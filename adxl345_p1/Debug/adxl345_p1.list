
adxl345_p1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028bc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  0800297c  0800297c  0001297c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080029b0  080029b0  000129b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080029b8  080029b8  000129b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080029bc  080029bc  000129bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000004  20000000  080029c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001dc  20000004  080029c4  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200001e0  080029c4  000201e0  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001148d  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002720  00000000  00000000  000314b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000a2b4  00000000  00000000  00033bd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000c50  00000000  00000000  0003de90  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000f48  00000000  00000000  0003eae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000753c  00000000  00000000  0003fa28  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003f8c  00000000  00000000  00046f64  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004aef0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000025a4  00000000  00000000  0004af6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002964 	.word	0x08002964

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08002964 	.word	0x08002964

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_shi>:
 800011c:	b403      	push	{r0, r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0040      	lsls	r0, r0, #1
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	5e09      	ldrsh	r1, [r1, r0]
 8000128:	0049      	lsls	r1, r1, #1
 800012a:	448e      	add	lr, r1
 800012c:	bc03      	pop	{r0, r1}
 800012e:	4770      	bx	lr

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f806 	bl	8000244 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__aeabi_idiv0>:
 8000244:	4770      	bx	lr
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uldivmod>:
 8000248:	2b00      	cmp	r3, #0
 800024a:	d111      	bne.n	8000270 <__aeabi_uldivmod+0x28>
 800024c:	2a00      	cmp	r2, #0
 800024e:	d10f      	bne.n	8000270 <__aeabi_uldivmod+0x28>
 8000250:	2900      	cmp	r1, #0
 8000252:	d100      	bne.n	8000256 <__aeabi_uldivmod+0xe>
 8000254:	2800      	cmp	r0, #0
 8000256:	d002      	beq.n	800025e <__aeabi_uldivmod+0x16>
 8000258:	2100      	movs	r1, #0
 800025a:	43c9      	mvns	r1, r1
 800025c:	1c08      	adds	r0, r1, #0
 800025e:	b407      	push	{r0, r1, r2}
 8000260:	4802      	ldr	r0, [pc, #8]	; (800026c <__aeabi_uldivmod+0x24>)
 8000262:	a102      	add	r1, pc, #8	; (adr r1, 800026c <__aeabi_uldivmod+0x24>)
 8000264:	1840      	adds	r0, r0, r1
 8000266:	9002      	str	r0, [sp, #8]
 8000268:	bd03      	pop	{r0, r1, pc}
 800026a:	46c0      	nop			; (mov r8, r8)
 800026c:	ffffffd9 	.word	0xffffffd9
 8000270:	b403      	push	{r0, r1}
 8000272:	4668      	mov	r0, sp
 8000274:	b501      	push	{r0, lr}
 8000276:	9802      	ldr	r0, [sp, #8]
 8000278:	f000 f806 	bl	8000288 <__udivmoddi4>
 800027c:	9b01      	ldr	r3, [sp, #4]
 800027e:	469e      	mov	lr, r3
 8000280:	b002      	add	sp, #8
 8000282:	bc0c      	pop	{r2, r3}
 8000284:	4770      	bx	lr
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__udivmoddi4>:
 8000288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800028a:	4657      	mov	r7, sl
 800028c:	464e      	mov	r6, r9
 800028e:	4645      	mov	r5, r8
 8000290:	46de      	mov	lr, fp
 8000292:	b5e0      	push	{r5, r6, r7, lr}
 8000294:	0004      	movs	r4, r0
 8000296:	b083      	sub	sp, #12
 8000298:	000d      	movs	r5, r1
 800029a:	4692      	mov	sl, r2
 800029c:	4699      	mov	r9, r3
 800029e:	428b      	cmp	r3, r1
 80002a0:	d82f      	bhi.n	8000302 <__udivmoddi4+0x7a>
 80002a2:	d02c      	beq.n	80002fe <__udivmoddi4+0x76>
 80002a4:	4649      	mov	r1, r9
 80002a6:	4650      	mov	r0, sl
 80002a8:	f000 f8ae 	bl	8000408 <__clzdi2>
 80002ac:	0029      	movs	r1, r5
 80002ae:	0006      	movs	r6, r0
 80002b0:	0020      	movs	r0, r4
 80002b2:	f000 f8a9 	bl	8000408 <__clzdi2>
 80002b6:	1a33      	subs	r3, r6, r0
 80002b8:	4698      	mov	r8, r3
 80002ba:	3b20      	subs	r3, #32
 80002bc:	469b      	mov	fp, r3
 80002be:	d500      	bpl.n	80002c2 <__udivmoddi4+0x3a>
 80002c0:	e074      	b.n	80003ac <__udivmoddi4+0x124>
 80002c2:	4653      	mov	r3, sl
 80002c4:	465a      	mov	r2, fp
 80002c6:	4093      	lsls	r3, r2
 80002c8:	001f      	movs	r7, r3
 80002ca:	4653      	mov	r3, sl
 80002cc:	4642      	mov	r2, r8
 80002ce:	4093      	lsls	r3, r2
 80002d0:	001e      	movs	r6, r3
 80002d2:	42af      	cmp	r7, r5
 80002d4:	d829      	bhi.n	800032a <__udivmoddi4+0xa2>
 80002d6:	d026      	beq.n	8000326 <__udivmoddi4+0x9e>
 80002d8:	465b      	mov	r3, fp
 80002da:	1ba4      	subs	r4, r4, r6
 80002dc:	41bd      	sbcs	r5, r7
 80002de:	2b00      	cmp	r3, #0
 80002e0:	da00      	bge.n	80002e4 <__udivmoddi4+0x5c>
 80002e2:	e079      	b.n	80003d8 <__udivmoddi4+0x150>
 80002e4:	2200      	movs	r2, #0
 80002e6:	2300      	movs	r3, #0
 80002e8:	9200      	str	r2, [sp, #0]
 80002ea:	9301      	str	r3, [sp, #4]
 80002ec:	2301      	movs	r3, #1
 80002ee:	465a      	mov	r2, fp
 80002f0:	4093      	lsls	r3, r2
 80002f2:	9301      	str	r3, [sp, #4]
 80002f4:	2301      	movs	r3, #1
 80002f6:	4642      	mov	r2, r8
 80002f8:	4093      	lsls	r3, r2
 80002fa:	9300      	str	r3, [sp, #0]
 80002fc:	e019      	b.n	8000332 <__udivmoddi4+0xaa>
 80002fe:	4282      	cmp	r2, r0
 8000300:	d9d0      	bls.n	80002a4 <__udivmoddi4+0x1c>
 8000302:	2200      	movs	r2, #0
 8000304:	2300      	movs	r3, #0
 8000306:	9200      	str	r2, [sp, #0]
 8000308:	9301      	str	r3, [sp, #4]
 800030a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <__udivmoddi4+0x8c>
 8000310:	601c      	str	r4, [r3, #0]
 8000312:	605d      	str	r5, [r3, #4]
 8000314:	9800      	ldr	r0, [sp, #0]
 8000316:	9901      	ldr	r1, [sp, #4]
 8000318:	b003      	add	sp, #12
 800031a:	bc3c      	pop	{r2, r3, r4, r5}
 800031c:	4690      	mov	r8, r2
 800031e:	4699      	mov	r9, r3
 8000320:	46a2      	mov	sl, r4
 8000322:	46ab      	mov	fp, r5
 8000324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000326:	42a3      	cmp	r3, r4
 8000328:	d9d6      	bls.n	80002d8 <__udivmoddi4+0x50>
 800032a:	2200      	movs	r2, #0
 800032c:	2300      	movs	r3, #0
 800032e:	9200      	str	r2, [sp, #0]
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	4643      	mov	r3, r8
 8000334:	2b00      	cmp	r3, #0
 8000336:	d0e8      	beq.n	800030a <__udivmoddi4+0x82>
 8000338:	07fb      	lsls	r3, r7, #31
 800033a:	0872      	lsrs	r2, r6, #1
 800033c:	431a      	orrs	r2, r3
 800033e:	4646      	mov	r6, r8
 8000340:	087b      	lsrs	r3, r7, #1
 8000342:	e00e      	b.n	8000362 <__udivmoddi4+0xda>
 8000344:	42ab      	cmp	r3, r5
 8000346:	d101      	bne.n	800034c <__udivmoddi4+0xc4>
 8000348:	42a2      	cmp	r2, r4
 800034a:	d80c      	bhi.n	8000366 <__udivmoddi4+0xde>
 800034c:	1aa4      	subs	r4, r4, r2
 800034e:	419d      	sbcs	r5, r3
 8000350:	2001      	movs	r0, #1
 8000352:	1924      	adds	r4, r4, r4
 8000354:	416d      	adcs	r5, r5
 8000356:	2100      	movs	r1, #0
 8000358:	3e01      	subs	r6, #1
 800035a:	1824      	adds	r4, r4, r0
 800035c:	414d      	adcs	r5, r1
 800035e:	2e00      	cmp	r6, #0
 8000360:	d006      	beq.n	8000370 <__udivmoddi4+0xe8>
 8000362:	42ab      	cmp	r3, r5
 8000364:	d9ee      	bls.n	8000344 <__udivmoddi4+0xbc>
 8000366:	3e01      	subs	r6, #1
 8000368:	1924      	adds	r4, r4, r4
 800036a:	416d      	adcs	r5, r5
 800036c:	2e00      	cmp	r6, #0
 800036e:	d1f8      	bne.n	8000362 <__udivmoddi4+0xda>
 8000370:	465b      	mov	r3, fp
 8000372:	9800      	ldr	r0, [sp, #0]
 8000374:	9901      	ldr	r1, [sp, #4]
 8000376:	1900      	adds	r0, r0, r4
 8000378:	4169      	adcs	r1, r5
 800037a:	2b00      	cmp	r3, #0
 800037c:	db22      	blt.n	80003c4 <__udivmoddi4+0x13c>
 800037e:	002b      	movs	r3, r5
 8000380:	465a      	mov	r2, fp
 8000382:	40d3      	lsrs	r3, r2
 8000384:	002a      	movs	r2, r5
 8000386:	4644      	mov	r4, r8
 8000388:	40e2      	lsrs	r2, r4
 800038a:	001c      	movs	r4, r3
 800038c:	465b      	mov	r3, fp
 800038e:	0015      	movs	r5, r2
 8000390:	2b00      	cmp	r3, #0
 8000392:	db2c      	blt.n	80003ee <__udivmoddi4+0x166>
 8000394:	0026      	movs	r6, r4
 8000396:	409e      	lsls	r6, r3
 8000398:	0033      	movs	r3, r6
 800039a:	0026      	movs	r6, r4
 800039c:	4647      	mov	r7, r8
 800039e:	40be      	lsls	r6, r7
 80003a0:	0032      	movs	r2, r6
 80003a2:	1a80      	subs	r0, r0, r2
 80003a4:	4199      	sbcs	r1, r3
 80003a6:	9000      	str	r0, [sp, #0]
 80003a8:	9101      	str	r1, [sp, #4]
 80003aa:	e7ae      	b.n	800030a <__udivmoddi4+0x82>
 80003ac:	4642      	mov	r2, r8
 80003ae:	2320      	movs	r3, #32
 80003b0:	1a9b      	subs	r3, r3, r2
 80003b2:	4652      	mov	r2, sl
 80003b4:	40da      	lsrs	r2, r3
 80003b6:	4641      	mov	r1, r8
 80003b8:	0013      	movs	r3, r2
 80003ba:	464a      	mov	r2, r9
 80003bc:	408a      	lsls	r2, r1
 80003be:	0017      	movs	r7, r2
 80003c0:	431f      	orrs	r7, r3
 80003c2:	e782      	b.n	80002ca <__udivmoddi4+0x42>
 80003c4:	4642      	mov	r2, r8
 80003c6:	2320      	movs	r3, #32
 80003c8:	1a9b      	subs	r3, r3, r2
 80003ca:	002a      	movs	r2, r5
 80003cc:	4646      	mov	r6, r8
 80003ce:	409a      	lsls	r2, r3
 80003d0:	0023      	movs	r3, r4
 80003d2:	40f3      	lsrs	r3, r6
 80003d4:	4313      	orrs	r3, r2
 80003d6:	e7d5      	b.n	8000384 <__udivmoddi4+0xfc>
 80003d8:	4642      	mov	r2, r8
 80003da:	2320      	movs	r3, #32
 80003dc:	2100      	movs	r1, #0
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	9100      	str	r1, [sp, #0]
 80003e4:	9201      	str	r2, [sp, #4]
 80003e6:	2201      	movs	r2, #1
 80003e8:	40da      	lsrs	r2, r3
 80003ea:	9201      	str	r2, [sp, #4]
 80003ec:	e782      	b.n	80002f4 <__udivmoddi4+0x6c>
 80003ee:	4642      	mov	r2, r8
 80003f0:	2320      	movs	r3, #32
 80003f2:	0026      	movs	r6, r4
 80003f4:	1a9b      	subs	r3, r3, r2
 80003f6:	40de      	lsrs	r6, r3
 80003f8:	002f      	movs	r7, r5
 80003fa:	46b4      	mov	ip, r6
 80003fc:	4097      	lsls	r7, r2
 80003fe:	4666      	mov	r6, ip
 8000400:	003b      	movs	r3, r7
 8000402:	4333      	orrs	r3, r6
 8000404:	e7c9      	b.n	800039a <__udivmoddi4+0x112>
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__clzdi2>:
 8000408:	b510      	push	{r4, lr}
 800040a:	2900      	cmp	r1, #0
 800040c:	d103      	bne.n	8000416 <__clzdi2+0xe>
 800040e:	f000 f807 	bl	8000420 <__clzsi2>
 8000412:	3020      	adds	r0, #32
 8000414:	e002      	b.n	800041c <__clzdi2+0x14>
 8000416:	1c08      	adds	r0, r1, #0
 8000418:	f000 f802 	bl	8000420 <__clzsi2>
 800041c:	bd10      	pop	{r4, pc}
 800041e:	46c0      	nop			; (mov r8, r8)

08000420 <__clzsi2>:
 8000420:	211c      	movs	r1, #28
 8000422:	2301      	movs	r3, #1
 8000424:	041b      	lsls	r3, r3, #16
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0xe>
 800042a:	0c00      	lsrs	r0, r0, #16
 800042c:	3910      	subs	r1, #16
 800042e:	0a1b      	lsrs	r3, r3, #8
 8000430:	4298      	cmp	r0, r3
 8000432:	d301      	bcc.n	8000438 <__clzsi2+0x18>
 8000434:	0a00      	lsrs	r0, r0, #8
 8000436:	3908      	subs	r1, #8
 8000438:	091b      	lsrs	r3, r3, #4
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0x22>
 800043e:	0900      	lsrs	r0, r0, #4
 8000440:	3904      	subs	r1, #4
 8000442:	a202      	add	r2, pc, #8	; (adr r2, 800044c <__clzsi2+0x2c>)
 8000444:	5c10      	ldrb	r0, [r2, r0]
 8000446:	1840      	adds	r0, r0, r1
 8000448:	4770      	bx	lr
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	02020304 	.word	0x02020304
 8000450:	01010101 	.word	0x01010101
	...

0800045c <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 800045c:	21fa      	movs	r1, #250	; 0xfa
 800045e:	4b0a      	ldr	r3, [pc, #40]	; (8000488 <HAL_InitTick+0x2c>)
{
 8000460:	b570      	push	{r4, r5, r6, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000462:	0089      	lsls	r1, r1, #2
{
 8000464:	0005      	movs	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000466:	6818      	ldr	r0, [r3, #0]
 8000468:	f7ff fe62 	bl	8000130 <__udivsi3>
 800046c:	f000 f86a 	bl	8000544 <HAL_SYSTICK_Config>
 8000470:	0004      	movs	r4, r0
  {
    status = HAL_ERROR;
 8000472:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000474:	2c00      	cmp	r4, #0
 8000476:	d105      	bne.n	8000484 <HAL_InitTick+0x28>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000478:	3802      	subs	r0, #2
 800047a:	0022      	movs	r2, r4
 800047c:	0029      	movs	r1, r5
 800047e:	f000 f827 	bl	80004d0 <HAL_NVIC_SetPriority>
 8000482:	0020      	movs	r0, r4
  }

  /* Return function status */
  return status;
}
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	46c0      	nop			; (mov r8, r8)
 8000488:	20000000 	.word	0x20000000

0800048c <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800048c:	2340      	movs	r3, #64	; 0x40
 800048e:	4a08      	ldr	r2, [pc, #32]	; (80004b0 <HAL_Init+0x24>)
{
 8000490:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000492:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000494:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000496:	430b      	orrs	r3, r1
 8000498:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800049a:	f7ff ffdf 	bl	800045c <HAL_InitTick>
 800049e:	1e04      	subs	r4, r0, #0
 80004a0:	d103      	bne.n	80004aa <HAL_Init+0x1e>
    HAL_MspInit();
 80004a2:	f002 f8bd 	bl	8002620 <HAL_MspInit>
}
 80004a6:	0020      	movs	r0, r4
 80004a8:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80004aa:	2401      	movs	r4, #1
 80004ac:	e7fb      	b.n	80004a6 <HAL_Init+0x1a>
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	40022000 	.word	0x40022000

080004b4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80004b4:	4a02      	ldr	r2, [pc, #8]	; (80004c0 <HAL_IncTick+0xc>)
 80004b6:	6813      	ldr	r3, [r2, #0]
 80004b8:	3301      	adds	r3, #1
 80004ba:	6013      	str	r3, [r2, #0]
}
 80004bc:	4770      	bx	lr
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	20000020 	.word	0x20000020

080004c4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80004c4:	4b01      	ldr	r3, [pc, #4]	; (80004cc <HAL_GetTick+0x8>)
 80004c6:	6818      	ldr	r0, [r3, #0]
}
 80004c8:	4770      	bx	lr
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	20000020 	.word	0x20000020

080004d0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80004d4:	2800      	cmp	r0, #0
 80004d6:	da14      	bge.n	8000502 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004d8:	230f      	movs	r3, #15
 80004da:	b2c0      	uxtb	r0, r0
 80004dc:	4003      	ands	r3, r0
 80004de:	3b08      	subs	r3, #8
 80004e0:	4a11      	ldr	r2, [pc, #68]	; (8000528 <HAL_NVIC_SetPriority+0x58>)
 80004e2:	089b      	lsrs	r3, r3, #2
 80004e4:	009b      	lsls	r3, r3, #2
 80004e6:	189b      	adds	r3, r3, r2
 80004e8:	2203      	movs	r2, #3
 80004ea:	4010      	ands	r0, r2
 80004ec:	4090      	lsls	r0, r2
 80004ee:	32fc      	adds	r2, #252	; 0xfc
 80004f0:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004f2:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004f4:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004f6:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004f8:	69dc      	ldr	r4, [r3, #28]
 80004fa:	43ac      	bics	r4, r5
 80004fc:	4321      	orrs	r1, r4
 80004fe:	61d9      	str	r1, [r3, #28]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000500:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000502:	2503      	movs	r5, #3
 8000504:	0883      	lsrs	r3, r0, #2
 8000506:	4028      	ands	r0, r5
 8000508:	40a8      	lsls	r0, r5
 800050a:	35fc      	adds	r5, #252	; 0xfc
 800050c:	002e      	movs	r6, r5
 800050e:	4a07      	ldr	r2, [pc, #28]	; (800052c <HAL_NVIC_SetPriority+0x5c>)
 8000510:	009b      	lsls	r3, r3, #2
 8000512:	189b      	adds	r3, r3, r2
 8000514:	22c0      	movs	r2, #192	; 0xc0
 8000516:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000518:	4029      	ands	r1, r5
 800051a:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800051c:	0092      	lsls	r2, r2, #2
 800051e:	589c      	ldr	r4, [r3, r2]
 8000520:	43b4      	bics	r4, r6
 8000522:	4321      	orrs	r1, r4
 8000524:	5099      	str	r1, [r3, r2]
 8000526:	e7eb      	b.n	8000500 <HAL_NVIC_SetPriority+0x30>
 8000528:	e000ed00 	.word	0xe000ed00
 800052c:	e000e100 	.word	0xe000e100

08000530 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000530:	231f      	movs	r3, #31
 8000532:	4018      	ands	r0, r3
 8000534:	3b1e      	subs	r3, #30
 8000536:	4083      	lsls	r3, r0
 8000538:	4a01      	ldr	r2, [pc, #4]	; (8000540 <HAL_NVIC_EnableIRQ+0x10>)
 800053a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800053c:	4770      	bx	lr
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	e000e100 	.word	0xe000e100

08000544 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000544:	4a09      	ldr	r2, [pc, #36]	; (800056c <HAL_SYSTICK_Config+0x28>)
 8000546:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000548:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800054a:	4293      	cmp	r3, r2
 800054c:	d80d      	bhi.n	800056a <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800054e:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000550:	4a07      	ldr	r2, [pc, #28]	; (8000570 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000552:	4808      	ldr	r0, [pc, #32]	; (8000574 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000554:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000556:	6a03      	ldr	r3, [r0, #32]
 8000558:	0609      	lsls	r1, r1, #24
 800055a:	021b      	lsls	r3, r3, #8
 800055c:	0a1b      	lsrs	r3, r3, #8
 800055e:	430b      	orrs	r3, r1
 8000560:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000562:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000564:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000566:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000568:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800056a:	4770      	bx	lr
 800056c:	00ffffff 	.word	0x00ffffff
 8000570:	e000e010 	.word	0xe000e010
 8000574:	e000ed00 	.word	0xe000ed00

08000578 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000578:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800057a:	1d84      	adds	r4, r0, #6
 800057c:	7fe3      	ldrb	r3, [r4, #31]
 800057e:	2b02      	cmp	r3, #2
 8000580:	d004      	beq.n	800058c <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000582:	2304      	movs	r3, #4
 8000584:	63c3      	str	r3, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 8000586:	3b03      	subs	r3, #3
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8000588:	0018      	movs	r0, r3
 800058a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800058c:	210e      	movs	r1, #14
 800058e:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000590:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000592:	681a      	ldr	r2, [r3, #0]
 8000594:	438a      	bics	r2, r1
 8000596:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8000598:	2201      	movs	r2, #1
 800059a:	6819      	ldr	r1, [r3, #0]
 800059c:	4391      	bics	r1, r2
 800059e:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80005a0:	231c      	movs	r3, #28
 80005a2:	402b      	ands	r3, r5
 80005a4:	0015      	movs	r5, r2
 80005a6:	409d      	lsls	r5, r3
 80005a8:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_UNLOCK(hdma);
 80005aa:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80005ac:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80005ae:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 80005b0:	2400      	movs	r4, #0
    if(hdma->XferAbortCallback != NULL)
 80005b2:	6b82      	ldr	r2, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80005b4:	77dc      	strb	r4, [r3, #31]
  HAL_StatusTypeDef status = HAL_OK;
 80005b6:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 80005b8:	42a2      	cmp	r2, r4
 80005ba:	d0e5      	beq.n	8000588 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 80005bc:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 80005be:	0023      	movs	r3, r4
 80005c0:	e7e2      	b.n	8000588 <HAL_DMA_Abort_IT+0x10>
	...

080005c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80005c4:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80005c6:	4a55      	ldr	r2, [pc, #340]	; (800071c <HAL_GPIO_Init+0x158>)
  while (((GPIO_Init->Pin) >> position) != 0)
 80005c8:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80005ca:	1882      	adds	r2, r0, r2
 80005cc:	1e54      	subs	r4, r2, #1
 80005ce:	41a2      	sbcs	r2, r4
{
 80005d0:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 80005d2:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00U;
 80005d4:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80005d6:	3205      	adds	r2, #5
 80005d8:	9203      	str	r2, [sp, #12]
  while (((GPIO_Init->Pin) >> position) != 0)
 80005da:	9a01      	ldr	r2, [sp, #4]
 80005dc:	40da      	lsrs	r2, r3
 80005de:	d101      	bne.n	80005e4 <HAL_GPIO_Init+0x20>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 80005e0:	b005      	add	sp, #20
 80005e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80005e4:	2501      	movs	r5, #1
 80005e6:	409d      	lsls	r5, r3
 80005e8:	9a01      	ldr	r2, [sp, #4]
 80005ea:	402a      	ands	r2, r5
 80005ec:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 80005ee:	d100      	bne.n	80005f2 <HAL_GPIO_Init+0x2e>
 80005f0:	e091      	b.n	8000716 <HAL_GPIO_Init+0x152>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80005f2:	684a      	ldr	r2, [r1, #4]
 80005f4:	4694      	mov	ip, r2
 80005f6:	2210      	movs	r2, #16
 80005f8:	4664      	mov	r4, ip
 80005fa:	4394      	bics	r4, r2
 80005fc:	0022      	movs	r2, r4
 80005fe:	3c01      	subs	r4, #1
 8000600:	2a02      	cmp	r2, #2
 8000602:	d11f      	bne.n	8000644 <HAL_GPIO_Init+0x80>
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000604:	2407      	movs	r4, #7
 8000606:	270f      	movs	r7, #15
 8000608:	401c      	ands	r4, r3
 800060a:	00a4      	lsls	r4, r4, #2
 800060c:	40a7      	lsls	r7, r4
        temp = GPIOx->AFR[position >> 3U];
 800060e:	08da      	lsrs	r2, r3, #3
 8000610:	0092      	lsls	r2, r2, #2
 8000612:	1882      	adds	r2, r0, r2
 8000614:	6a16      	ldr	r6, [r2, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000616:	43be      	bics	r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8000618:	690f      	ldr	r7, [r1, #16]
 800061a:	40a7      	lsls	r7, r4
 800061c:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 800061e:	6216      	str	r6, [r2, #32]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000620:	2403      	movs	r4, #3
 8000622:	005e      	lsls	r6, r3, #1
 8000624:	40b4      	lsls	r4, r6
        temp = GPIOx->OSPEEDR;
 8000626:	6882      	ldr	r2, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000628:	43a2      	bics	r2, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800062a:	68cc      	ldr	r4, [r1, #12]
 800062c:	40b4      	lsls	r4, r6
 800062e:	4322      	orrs	r2, r4
        GPIOx->OSPEEDR = temp;
 8000630:	6082      	str	r2, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000632:	4662      	mov	r2, ip
 8000634:	06d2      	lsls	r2, r2, #27
 8000636:	0fd2      	lsrs	r2, r2, #31
 8000638:	409a      	lsls	r2, r3
        temp= GPIOx->OTYPER;
 800063a:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800063c:	43ac      	bics	r4, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800063e:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8000640:	6042      	str	r2, [r0, #4]
 8000642:	e001      	b.n	8000648 <HAL_GPIO_Init+0x84>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000644:	2c01      	cmp	r4, #1
 8000646:	d9eb      	bls.n	8000620 <HAL_GPIO_Init+0x5c>
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000648:	2603      	movs	r6, #3
 800064a:	0034      	movs	r4, r6
 800064c:	005d      	lsls	r5, r3, #1
 800064e:	40ac      	lsls	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000650:	4662      	mov	r2, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000652:	43e4      	mvns	r4, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000654:	4032      	ands	r2, r6
 8000656:	40aa      	lsls	r2, r5
      temp = GPIOx->MODER;
 8000658:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800065a:	4027      	ands	r7, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800065c:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 800065e:	6002      	str	r2, [r0, #0]
      temp = GPIOx->PUPDR;
 8000660:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000662:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8000664:	688a      	ldr	r2, [r1, #8]
 8000666:	40aa      	lsls	r2, r5
 8000668:	4314      	orrs	r4, r2
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800066a:	4662      	mov	r2, ip
      GPIOx->PUPDR = temp;
 800066c:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800066e:	00d2      	lsls	r2, r2, #3
 8000670:	d551      	bpl.n	8000716 <HAL_GPIO_Init+0x152>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000672:	2501      	movs	r5, #1
 8000674:	4c2a      	ldr	r4, [pc, #168]	; (8000720 <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000676:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000678:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800067a:	432a      	orrs	r2, r5
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800067c:	001d      	movs	r5, r3
 800067e:	4035      	ands	r5, r6
 8000680:	00ad      	lsls	r5, r5, #2
 8000682:	40af      	lsls	r7, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000684:	6362      	str	r2, [r4, #52]	; 0x34
 8000686:	4a27      	ldr	r2, [pc, #156]	; (8000724 <HAL_GPIO_Init+0x160>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8000688:	089c      	lsrs	r4, r3, #2
 800068a:	00a4      	lsls	r4, r4, #2
 800068c:	18a4      	adds	r4, r4, r2
 800068e:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000690:	43ba      	bics	r2, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000692:	27a0      	movs	r7, #160	; 0xa0
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000694:	9202      	str	r2, [sp, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000696:	05ff      	lsls	r7, r7, #23
 8000698:	2200      	movs	r2, #0
 800069a:	42b8      	cmp	r0, r7
 800069c:	d010      	beq.n	80006c0 <HAL_GPIO_Init+0xfc>
 800069e:	4f22      	ldr	r7, [pc, #136]	; (8000728 <HAL_GPIO_Init+0x164>)
 80006a0:	3201      	adds	r2, #1
 80006a2:	42b8      	cmp	r0, r7
 80006a4:	d00c      	beq.n	80006c0 <HAL_GPIO_Init+0xfc>
 80006a6:	4f21      	ldr	r7, [pc, #132]	; (800072c <HAL_GPIO_Init+0x168>)
 80006a8:	3201      	adds	r2, #1
 80006aa:	42b8      	cmp	r0, r7
 80006ac:	d008      	beq.n	80006c0 <HAL_GPIO_Init+0xfc>
 80006ae:	4f20      	ldr	r7, [pc, #128]	; (8000730 <HAL_GPIO_Init+0x16c>)
 80006b0:	0032      	movs	r2, r6
 80006b2:	42b8      	cmp	r0, r7
 80006b4:	d004      	beq.n	80006c0 <HAL_GPIO_Init+0xfc>
 80006b6:	4e1f      	ldr	r6, [pc, #124]	; (8000734 <HAL_GPIO_Init+0x170>)
 80006b8:	3201      	adds	r2, #1
 80006ba:	42b0      	cmp	r0, r6
 80006bc:	d000      	beq.n	80006c0 <HAL_GPIO_Init+0xfc>
 80006be:	9a03      	ldr	r2, [sp, #12]
 80006c0:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006c2:	4667      	mov	r7, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80006c4:	9d02      	ldr	r5, [sp, #8]
 80006c6:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80006c8:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 80006ca:	4a1b      	ldr	r2, [pc, #108]	; (8000738 <HAL_GPIO_Init+0x174>)
        temp &= ~((uint32_t)iocurrent);
 80006cc:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->IMR;
 80006ce:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 80006d0:	9d00      	ldr	r5, [sp, #0]
        temp &= ~((uint32_t)iocurrent);
 80006d2:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 80006d4:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006d6:	03ff      	lsls	r7, r7, #15
 80006d8:	d401      	bmi.n	80006de <HAL_GPIO_Init+0x11a>
        temp &= ~((uint32_t)iocurrent);
 80006da:	0035      	movs	r5, r6
 80006dc:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006de:	4667      	mov	r7, ip
        EXTI->IMR = temp;
 80006e0:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80006e2:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 80006e4:	9d00      	ldr	r5, [sp, #0]
 80006e6:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006e8:	03bf      	lsls	r7, r7, #14
 80006ea:	d401      	bmi.n	80006f0 <HAL_GPIO_Init+0x12c>
        temp &= ~((uint32_t)iocurrent);
 80006ec:	0035      	movs	r5, r6
 80006ee:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006f0:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 80006f2:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 80006f4:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 80006f6:	9d00      	ldr	r5, [sp, #0]
 80006f8:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006fa:	02ff      	lsls	r7, r7, #11
 80006fc:	d401      	bmi.n	8000702 <HAL_GPIO_Init+0x13e>
        temp &= ~((uint32_t)iocurrent);
 80006fe:	0035      	movs	r5, r6
 8000700:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000702:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8000704:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000706:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8000708:	9e00      	ldr	r6, [sp, #0]
 800070a:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800070c:	02bf      	lsls	r7, r7, #10
 800070e:	d401      	bmi.n	8000714 <HAL_GPIO_Init+0x150>
        temp &= ~((uint32_t)iocurrent);
 8000710:	4025      	ands	r5, r4
 8000712:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8000714:	60d6      	str	r6, [r2, #12]
    position++;
 8000716:	3301      	adds	r3, #1
 8000718:	e75f      	b.n	80005da <HAL_GPIO_Init+0x16>
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	afffe400 	.word	0xafffe400
 8000720:	40021000 	.word	0x40021000
 8000724:	40010000 	.word	0x40010000
 8000728:	50000400 	.word	0x50000400
 800072c:	50000800 	.word	0x50000800
 8000730:	50000c00 	.word	0x50000c00
 8000734:	50001000 	.word	0x50001000
 8000738:	40010400 	.word	0x40010400

0800073c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 800073c:	2a00      	cmp	r2, #0
 800073e:	d001      	beq.n	8000744 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000740:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000742:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8000744:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000746:	e7fc      	b.n	8000742 <HAL_GPIO_WritePin+0x6>

08000748 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8000748:	4770      	bx	lr
	...

0800074c <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 800074c:	4b04      	ldr	r3, [pc, #16]	; (8000760 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 800074e:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8000750:	695a      	ldr	r2, [r3, #20]
 8000752:	4210      	tst	r0, r2
 8000754:	d002      	beq.n	800075c <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000756:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000758:	f7ff fff6 	bl	8000748 <HAL_GPIO_EXTI_Callback>
}
 800075c:	bd10      	pop	{r4, pc}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	40010400 	.word	0x40010400

08000764 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000764:	6803      	ldr	r3, [r0, #0]
 8000766:	699a      	ldr	r2, [r3, #24]
 8000768:	0792      	lsls	r2, r2, #30
 800076a:	d501      	bpl.n	8000770 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 800076c:	2200      	movs	r2, #0
 800076e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000770:	2201      	movs	r2, #1
 8000772:	6999      	ldr	r1, [r3, #24]
 8000774:	4211      	tst	r1, r2
 8000776:	d102      	bne.n	800077e <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000778:	6999      	ldr	r1, [r3, #24]
 800077a:	430a      	orrs	r2, r1
 800077c:	619a      	str	r2, [r3, #24]
  }
}
 800077e:	4770      	bx	lr

08000780 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8000780:	b570      	push	{r4, r5, r6, lr}
 8000782:	9e04      	ldr	r6, [sp, #16]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8000784:	0589      	lsls	r1, r1, #22
 8000786:	4333      	orrs	r3, r6
 8000788:	0d89      	lsrs	r1, r1, #22
 800078a:	4319      	orrs	r1, r3
 800078c:	2380      	movs	r3, #128	; 0x80
 800078e:	6804      	ldr	r4, [r0, #0]
 8000790:	00db      	lsls	r3, r3, #3
 8000792:	0d70      	lsrs	r0, r6, #21
 8000794:	4018      	ands	r0, r3
 8000796:	4b04      	ldr	r3, [pc, #16]	; (80007a8 <I2C_TransferConfig+0x28>)
 8000798:	6865      	ldr	r5, [r4, #4]
 800079a:	0412      	lsls	r2, r2, #16
 800079c:	4318      	orrs	r0, r3
 800079e:	4385      	bics	r5, r0
 80007a0:	4311      	orrs	r1, r2
 80007a2:	4329      	orrs	r1, r5
 80007a4:	6061      	str	r1, [r4, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80007a6:	bd70      	pop	{r4, r5, r6, pc}
 80007a8:	03ff63ff 	.word	0x03ff63ff

080007ac <I2C_WaitOnFlagUntilTimeout>:
{
 80007ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007ae:	0004      	movs	r4, r0
 80007b0:	000e      	movs	r6, r1
 80007b2:	0017      	movs	r7, r2
 80007b4:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80007b6:	6822      	ldr	r2, [r4, #0]
 80007b8:	6993      	ldr	r3, [r2, #24]
 80007ba:	4033      	ands	r3, r6
 80007bc:	1b9b      	subs	r3, r3, r6
 80007be:	4259      	negs	r1, r3
 80007c0:	414b      	adcs	r3, r1
 80007c2:	42bb      	cmp	r3, r7
 80007c4:	d001      	beq.n	80007ca <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 80007c6:	2000      	movs	r0, #0
 80007c8:	e017      	b.n	80007fa <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 80007ca:	1c6b      	adds	r3, r5, #1
 80007cc:	d0f4      	beq.n	80007b8 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80007ce:	f7ff fe79 	bl	80004c4 <HAL_GetTick>
 80007d2:	9b06      	ldr	r3, [sp, #24]
 80007d4:	1ac0      	subs	r0, r0, r3
 80007d6:	4285      	cmp	r5, r0
 80007d8:	d301      	bcc.n	80007de <I2C_WaitOnFlagUntilTimeout+0x32>
 80007da:	2d00      	cmp	r5, #0
 80007dc:	d1eb      	bne.n	80007b6 <I2C_WaitOnFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80007de:	2220      	movs	r2, #32
 80007e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80007e2:	2001      	movs	r0, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80007e4:	4313      	orrs	r3, r2
 80007e6:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80007e8:	0023      	movs	r3, r4
 80007ea:	3341      	adds	r3, #65	; 0x41
 80007ec:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80007ee:	0022      	movs	r2, r4
 80007f0:	2300      	movs	r3, #0
 80007f2:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 80007f4:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80007f6:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 80007f8:	7023      	strb	r3, [r4, #0]
}
 80007fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080007fc <I2C_IsAcknowledgeFailed>:
{
 80007fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80007fe:	6803      	ldr	r3, [r0, #0]
{
 8000800:	0004      	movs	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000802:	6998      	ldr	r0, [r3, #24]
 8000804:	2310      	movs	r3, #16
{
 8000806:	000e      	movs	r6, r1
 8000808:	0017      	movs	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800080a:	4018      	ands	r0, r3
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800080c:	2520      	movs	r5, #32
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800080e:	2800      	cmp	r0, #0
 8000810:	d118      	bne.n	8000844 <I2C_IsAcknowledgeFailed+0x48>
}
 8000812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (Timeout != HAL_MAX_DELAY)
 8000814:	1c72      	adds	r2, r6, #1
 8000816:	d016      	beq.n	8000846 <I2C_IsAcknowledgeFailed+0x4a>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000818:	f7ff fe54 	bl	80004c4 <HAL_GetTick>
 800081c:	1bc0      	subs	r0, r0, r7
 800081e:	4286      	cmp	r6, r0
 8000820:	d301      	bcc.n	8000826 <I2C_IsAcknowledgeFailed+0x2a>
 8000822:	2e00      	cmp	r6, #0
 8000824:	d10e      	bne.n	8000844 <I2C_IsAcknowledgeFailed+0x48>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000826:	2220      	movs	r2, #32
 8000828:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800082a:	4313      	orrs	r3, r2
 800082c:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800082e:	0023      	movs	r3, r4
 8000830:	3341      	adds	r3, #65	; 0x41
 8000832:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000834:	0022      	movs	r2, r4
 8000836:	2300      	movs	r3, #0
 8000838:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 800083a:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800083c:	7013      	strb	r3, [r2, #0]
    return HAL_ERROR;
 800083e:	2001      	movs	r0, #1
    __HAL_UNLOCK(hi2c);
 8000840:	7023      	strb	r3, [r4, #0]
    return HAL_ERROR;
 8000842:	e7e6      	b.n	8000812 <I2C_IsAcknowledgeFailed+0x16>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000844:	6823      	ldr	r3, [r4, #0]
 8000846:	699a      	ldr	r2, [r3, #24]
 8000848:	422a      	tst	r2, r5
 800084a:	d0e3      	beq.n	8000814 <I2C_IsAcknowledgeFailed+0x18>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800084c:	2210      	movs	r2, #16
    I2C_Flush_TXDR(hi2c);
 800084e:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000850:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000852:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8000854:	f7ff ff86 	bl	8000764 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8000858:	6822      	ldr	r2, [r4, #0]
 800085a:	4906      	ldr	r1, [pc, #24]	; (8000874 <I2C_IsAcknowledgeFailed+0x78>)
 800085c:	6853      	ldr	r3, [r2, #4]
 800085e:	400b      	ands	r3, r1
 8000860:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000862:	2304      	movs	r3, #4
 8000864:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000866:	4313      	orrs	r3, r2
 8000868:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800086a:	0023      	movs	r3, r4
 800086c:	3341      	adds	r3, #65	; 0x41
 800086e:	701d      	strb	r5, [r3, #0]
 8000870:	e7e0      	b.n	8000834 <I2C_IsAcknowledgeFailed+0x38>
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	fe00e800 	.word	0xfe00e800

08000878 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8000878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800087a:	0004      	movs	r4, r0
 800087c:	000d      	movs	r5, r1
 800087e:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000880:	2702      	movs	r7, #2
 8000882:	6823      	ldr	r3, [r4, #0]
 8000884:	699b      	ldr	r3, [r3, #24]
 8000886:	423b      	tst	r3, r7
 8000888:	d001      	beq.n	800088e <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 800088a:	2000      	movs	r0, #0
}
 800088c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800088e:	0032      	movs	r2, r6
 8000890:	0029      	movs	r1, r5
 8000892:	0020      	movs	r0, r4
 8000894:	f7ff ffb2 	bl	80007fc <I2C_IsAcknowledgeFailed>
 8000898:	2800      	cmp	r0, #0
 800089a:	d115      	bne.n	80008c8 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800089c:	1c6b      	adds	r3, r5, #1
 800089e:	d0f0      	beq.n	8000882 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80008a0:	f7ff fe10 	bl	80004c4 <HAL_GetTick>
 80008a4:	1b80      	subs	r0, r0, r6
 80008a6:	4285      	cmp	r5, r0
 80008a8:	d301      	bcc.n	80008ae <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 80008aa:	2d00      	cmp	r5, #0
 80008ac:	d1e9      	bne.n	8000882 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80008ae:	2220      	movs	r2, #32
 80008b0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80008b2:	4313      	orrs	r3, r2
 80008b4:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80008b6:	0023      	movs	r3, r4
 80008b8:	3341      	adds	r3, #65	; 0x41
 80008ba:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80008bc:	0022      	movs	r2, r4
 80008be:	2300      	movs	r3, #0
 80008c0:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 80008c2:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80008c4:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 80008c6:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 80008c8:	2001      	movs	r0, #1
 80008ca:	e7df      	b.n	800088c <I2C_WaitOnTXISFlagUntilTimeout+0x14>

080008cc <I2C_RequestMemoryRead>:
{
 80008cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80008ce:	0005      	movs	r5, r0
 80008d0:	0014      	movs	r4, r2
 80008d2:	001e      	movs	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <I2C_RequestMemoryRead+0x60>)
 80008d8:	9300      	str	r3, [sp, #0]
 80008da:	2300      	movs	r3, #0
 80008dc:	f7ff ff50 	bl	8000780 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80008e0:	9a07      	ldr	r2, [sp, #28]
 80008e2:	9906      	ldr	r1, [sp, #24]
 80008e4:	0028      	movs	r0, r5
 80008e6:	f7ff ffc7 	bl	8000878 <I2C_WaitOnTXISFlagUntilTimeout>
 80008ea:	2800      	cmp	r0, #0
 80008ec:	d001      	beq.n	80008f2 <I2C_RequestMemoryRead+0x26>
    return HAL_ERROR;
 80008ee:	2001      	movs	r0, #1
}
 80008f0:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80008f2:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80008f4:	2e01      	cmp	r6, #1
 80008f6:	d10d      	bne.n	8000914 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80008f8:	b2e4      	uxtb	r4, r4
 80008fa:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80008fc:	9b07      	ldr	r3, [sp, #28]
 80008fe:	2200      	movs	r2, #0
 8000900:	9300      	str	r3, [sp, #0]
 8000902:	2140      	movs	r1, #64	; 0x40
 8000904:	9b06      	ldr	r3, [sp, #24]
 8000906:	0028      	movs	r0, r5
 8000908:	f7ff ff50 	bl	80007ac <I2C_WaitOnFlagUntilTimeout>
 800090c:	1e43      	subs	r3, r0, #1
 800090e:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8000910:	b2c0      	uxtb	r0, r0
 8000912:	e7ed      	b.n	80008f0 <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8000914:	0a22      	lsrs	r2, r4, #8
 8000916:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000918:	9906      	ldr	r1, [sp, #24]
 800091a:	9a07      	ldr	r2, [sp, #28]
 800091c:	0028      	movs	r0, r5
 800091e:	f7ff ffab 	bl	8000878 <I2C_WaitOnTXISFlagUntilTimeout>
 8000922:	2800      	cmp	r0, #0
 8000924:	d1e3      	bne.n	80008ee <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000926:	682b      	ldr	r3, [r5, #0]
 8000928:	e7e6      	b.n	80008f8 <I2C_RequestMemoryRead+0x2c>
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	80002000 	.word	0x80002000

08000930 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8000930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000932:	0004      	movs	r4, r0
 8000934:	000d      	movs	r5, r1
 8000936:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000938:	2720      	movs	r7, #32
 800093a:	6823      	ldr	r3, [r4, #0]
 800093c:	699b      	ldr	r3, [r3, #24]
 800093e:	423b      	tst	r3, r7
 8000940:	d001      	beq.n	8000946 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8000942:	2000      	movs	r0, #0
}
 8000944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000946:	0032      	movs	r2, r6
 8000948:	0029      	movs	r1, r5
 800094a:	0020      	movs	r0, r4
 800094c:	f7ff ff56 	bl	80007fc <I2C_IsAcknowledgeFailed>
 8000950:	2800      	cmp	r0, #0
 8000952:	d113      	bne.n	800097c <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000954:	f7ff fdb6 	bl	80004c4 <HAL_GetTick>
 8000958:	1b80      	subs	r0, r0, r6
 800095a:	4285      	cmp	r5, r0
 800095c:	d301      	bcc.n	8000962 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 800095e:	2d00      	cmp	r5, #0
 8000960:	d1eb      	bne.n	800093a <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000962:	2220      	movs	r2, #32
 8000964:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000966:	4313      	orrs	r3, r2
 8000968:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800096a:	0023      	movs	r3, r4
 800096c:	3341      	adds	r3, #65	; 0x41
 800096e:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000970:	0022      	movs	r2, r4
 8000972:	2300      	movs	r3, #0
 8000974:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 8000976:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000978:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 800097a:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 800097c:	2001      	movs	r0, #1
 800097e:	e7e1      	b.n	8000944 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>

08000980 <HAL_I2C_Init>:
{
 8000980:	b570      	push	{r4, r5, r6, lr}
 8000982:	0004      	movs	r4, r0
    return HAL_ERROR;
 8000984:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8000986:	2c00      	cmp	r4, #0
 8000988:	d03f      	beq.n	8000a0a <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800098a:	0025      	movs	r5, r4
 800098c:	3541      	adds	r5, #65	; 0x41
 800098e:	782b      	ldrb	r3, [r5, #0]
 8000990:	b2db      	uxtb	r3, r3
 8000992:	2b00      	cmp	r3, #0
 8000994:	d105      	bne.n	80009a2 <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 8000996:	0022      	movs	r2, r4
 8000998:	3240      	adds	r2, #64	; 0x40
 800099a:	7013      	strb	r3, [r2, #0]
    HAL_I2C_MspInit(hi2c);
 800099c:	0020      	movs	r0, r4
 800099e:	f001 fe4d 	bl	800263c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80009a2:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 80009a4:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 80009a6:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 80009a8:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80009aa:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	68a6      	ldr	r6, [r4, #8]
 80009b0:	438a      	bics	r2, r1
 80009b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80009b4:	6861      	ldr	r1, [r4, #4]
 80009b6:	4a1a      	ldr	r2, [pc, #104]	; (8000a20 <HAL_I2C_Init+0xa0>)
 80009b8:	400a      	ands	r2, r1
 80009ba:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80009bc:	6899      	ldr	r1, [r3, #8]
 80009be:	4a19      	ldr	r2, [pc, #100]	; (8000a24 <HAL_I2C_Init+0xa4>)
 80009c0:	4011      	ands	r1, r2
 80009c2:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80009c4:	2801      	cmp	r0, #1
 80009c6:	d121      	bne.n	8000a0c <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80009c8:	2180      	movs	r1, #128	; 0x80
 80009ca:	0209      	lsls	r1, r1, #8
 80009cc:	4331      	orrs	r1, r6
 80009ce:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80009d0:	6858      	ldr	r0, [r3, #4]
 80009d2:	4915      	ldr	r1, [pc, #84]	; (8000a28 <HAL_I2C_Init+0xa8>)
 80009d4:	4301      	orrs	r1, r0
 80009d6:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80009d8:	68d9      	ldr	r1, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80009da:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80009dc:	400a      	ands	r2, r1
 80009de:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80009e0:	6961      	ldr	r1, [r4, #20]
 80009e2:	6922      	ldr	r2, [r4, #16]
 80009e4:	430a      	orrs	r2, r1
 80009e6:	69a1      	ldr	r1, [r4, #24]
 80009e8:	0209      	lsls	r1, r1, #8
 80009ea:	430a      	orrs	r2, r1
 80009ec:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80009ee:	6a21      	ldr	r1, [r4, #32]
 80009f0:	69e2      	ldr	r2, [r4, #28]
 80009f2:	430a      	orrs	r2, r1
 80009f4:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80009f6:	2201      	movs	r2, #1
 80009f8:	6819      	ldr	r1, [r3, #0]
 80009fa:	430a      	orrs	r2, r1
 80009fc:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80009fe:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000a00:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000a02:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000a04:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000a06:	3442      	adds	r4, #66	; 0x42
 8000a08:	7020      	strb	r0, [r4, #0]
}
 8000a0a:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000a0c:	2184      	movs	r1, #132	; 0x84
 8000a0e:	0209      	lsls	r1, r1, #8
 8000a10:	4331      	orrs	r1, r6
 8000a12:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000a14:	2802      	cmp	r0, #2
 8000a16:	d1db      	bne.n	80009d0 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000a18:	2180      	movs	r1, #128	; 0x80
 8000a1a:	0109      	lsls	r1, r1, #4
 8000a1c:	6059      	str	r1, [r3, #4]
 8000a1e:	e7d7      	b.n	80009d0 <HAL_I2C_Init+0x50>
 8000a20:	f0ffffff 	.word	0xf0ffffff
 8000a24:	ffff7fff 	.word	0xffff7fff
 8000a28:	02008000 	.word	0x02008000

08000a2c <HAL_I2C_Master_Transmit>:
{
 8000a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a2e:	0005      	movs	r5, r0
{
 8000a30:	b087      	sub	sp, #28
 8000a32:	9103      	str	r1, [sp, #12]
 8000a34:	9204      	str	r2, [sp, #16]
 8000a36:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a38:	3541      	adds	r5, #65	; 0x41
 8000a3a:	782b      	ldrb	r3, [r5, #0]
{
 8000a3c:	0004      	movs	r4, r0
    return HAL_BUSY;
 8000a3e:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a40:	2b20      	cmp	r3, #32
 8000a42:	d114      	bne.n	8000a6e <HAL_I2C_Master_Transmit+0x42>
    __HAL_LOCK(hi2c);
 8000a44:	0023      	movs	r3, r4
 8000a46:	3340      	adds	r3, #64	; 0x40
 8000a48:	781a      	ldrb	r2, [r3, #0]
 8000a4a:	2a01      	cmp	r2, #1
 8000a4c:	d00f      	beq.n	8000a6e <HAL_I2C_Master_Transmit+0x42>
 8000a4e:	2601      	movs	r6, #1
 8000a50:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 8000a52:	f7ff fd37 	bl	80004c4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000a56:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8000a58:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000a5a:	9000      	str	r0, [sp, #0]
 8000a5c:	2319      	movs	r3, #25
 8000a5e:	0032      	movs	r2, r6
 8000a60:	0209      	lsls	r1, r1, #8
 8000a62:	0020      	movs	r0, r4
 8000a64:	f7ff fea2 	bl	80007ac <I2C_WaitOnFlagUntilTimeout>
 8000a68:	2800      	cmp	r0, #0
 8000a6a:	d002      	beq.n	8000a72 <HAL_I2C_Master_Transmit+0x46>
      return HAL_ERROR;
 8000a6c:	2001      	movs	r0, #1
}
 8000a6e:	b007      	add	sp, #28
 8000a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000a72:	2321      	movs	r3, #33	; 0x21
 8000a74:	702b      	strb	r3, [r5, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000a76:	0025      	movs	r5, r4
 8000a78:	3b11      	subs	r3, #17
 8000a7a:	3542      	adds	r5, #66	; 0x42
 8000a7c:	702b      	strb	r3, [r5, #0]
    hi2c->pBuffPtr  = pData;
 8000a7e:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000a80:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8000a82:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8000a84:	466b      	mov	r3, sp
 8000a86:	8a9b      	ldrh	r3, [r3, #20]
    hi2c->XferISR   = NULL;
 8000a88:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8000a8a:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000a8c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000a8e:	4b30      	ldr	r3, [pc, #192]	; (8000b50 <HAL_I2C_Master_Transmit+0x124>)
 8000a90:	2aff      	cmp	r2, #255	; 0xff
 8000a92:	d921      	bls.n	8000ad8 <HAL_I2C_Master_Transmit+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000a94:	22ff      	movs	r2, #255	; 0xff
 8000a96:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000a98:	9300      	str	r3, [sp, #0]
 8000a9a:	2380      	movs	r3, #128	; 0x80
 8000a9c:	045b      	lsls	r3, r3, #17
 8000a9e:	9903      	ldr	r1, [sp, #12]
 8000aa0:	0020      	movs	r0, r4
 8000aa2:	f7ff fe6d 	bl	8000780 <I2C_TransferConfig>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000aa6:	26ff      	movs	r6, #255	; 0xff
    while (hi2c->XferCount > 0U)
 8000aa8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000aaa:	003a      	movs	r2, r7
 8000aac:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000aae:	0020      	movs	r0, r4
    while (hi2c->XferCount > 0U)
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d119      	bne.n	8000ae8 <HAL_I2C_Master_Transmit+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000ab4:	f7ff ff3c 	bl	8000930 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000ab8:	2800      	cmp	r0, #0
 8000aba:	d1d7      	bne.n	8000a6c <HAL_I2C_Master_Transmit+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000abc:	2120      	movs	r1, #32
 8000abe:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8000ac0:	4e24      	ldr	r6, [pc, #144]	; (8000b54 <HAL_I2C_Master_Transmit+0x128>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000ac2:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8000ac4:	685a      	ldr	r2, [r3, #4]
 8000ac6:	4032      	ands	r2, r6
 8000ac8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8000aca:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8000acc:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8000ace:	3341      	adds	r3, #65	; 0x41
 8000ad0:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000ad2:	7028      	strb	r0, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8000ad4:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8000ad6:	e7ca      	b.n	8000a6e <HAL_I2C_Master_Transmit+0x42>
      hi2c->XferSize = hi2c->XferCount;
 8000ad8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000ada:	b292      	uxth	r2, r2
 8000adc:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8000ade:	9300      	str	r3, [sp, #0]
 8000ae0:	2380      	movs	r3, #128	; 0x80
 8000ae2:	b2d2      	uxtb	r2, r2
 8000ae4:	049b      	lsls	r3, r3, #18
 8000ae6:	e7da      	b.n	8000a9e <HAL_I2C_Master_Transmit+0x72>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000ae8:	f7ff fec6 	bl	8000878 <I2C_WaitOnTXISFlagUntilTimeout>
 8000aec:	2800      	cmp	r0, #0
 8000aee:	d1bd      	bne.n	8000a6c <HAL_I2C_Master_Transmit+0x40>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000af0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000af2:	6822      	ldr	r2, [r4, #0]
 8000af4:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8000af6:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000af8:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8000afa:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8000afc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000afe:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000b00:	3b01      	subs	r3, #1
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000b06:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000b08:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000b0a:	b292      	uxth	r2, r2
 8000b0c:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d0ca      	beq.n	8000aa8 <HAL_I2C_Master_Transmit+0x7c>
 8000b12:	2a00      	cmp	r2, #0
 8000b14:	d1c8      	bne.n	8000aa8 <HAL_I2C_Master_Transmit+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000b16:	9700      	str	r7, [sp, #0]
 8000b18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000b1a:	2180      	movs	r1, #128	; 0x80
 8000b1c:	0020      	movs	r0, r4
 8000b1e:	f7ff fe45 	bl	80007ac <I2C_WaitOnFlagUntilTimeout>
 8000b22:	2800      	cmp	r0, #0
 8000b24:	d1a2      	bne.n	8000a6c <HAL_I2C_Master_Transmit+0x40>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000b26:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000b28:	2bff      	cmp	r3, #255	; 0xff
 8000b2a:	d909      	bls.n	8000b40 <HAL_I2C_Master_Transmit+0x114>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000b2c:	2380      	movs	r3, #128	; 0x80
 8000b2e:	22ff      	movs	r2, #255	; 0xff
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000b30:	8526      	strh	r6, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000b32:	045b      	lsls	r3, r3, #17
 8000b34:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000b36:	9903      	ldr	r1, [sp, #12]
 8000b38:	0020      	movs	r0, r4
 8000b3a:	f7ff fe21 	bl	8000780 <I2C_TransferConfig>
 8000b3e:	e7b3      	b.n	8000aa8 <HAL_I2C_Master_Transmit+0x7c>
 8000b40:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 8000b42:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000b44:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8000b46:	b292      	uxth	r2, r2
 8000b48:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000b4a:	b2d2      	uxtb	r2, r2
 8000b4c:	9000      	str	r0, [sp, #0]
 8000b4e:	e7f2      	b.n	8000b36 <HAL_I2C_Master_Transmit+0x10a>
 8000b50:	80002000 	.word	0x80002000
 8000b54:	fe00e800 	.word	0xfe00e800

08000b58 <HAL_I2C_Mem_Read>:
{
 8000b58:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000b5a:	0007      	movs	r7, r0
{
 8000b5c:	b089      	sub	sp, #36	; 0x24
 8000b5e:	9307      	str	r3, [sp, #28]
 8000b60:	ab0e      	add	r3, sp, #56	; 0x38
 8000b62:	9206      	str	r2, [sp, #24]
 8000b64:	cb04      	ldmia	r3!, {r2}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000b66:	3741      	adds	r7, #65	; 0x41
{
 8000b68:	881b      	ldrh	r3, [r3, #0]
 8000b6a:	9204      	str	r2, [sp, #16]
 8000b6c:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000b6e:	783b      	ldrb	r3, [r7, #0]
{
 8000b70:	0004      	movs	r4, r0
 8000b72:	000d      	movs	r5, r1
    return HAL_BUSY;
 8000b74:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000b76:	2b20      	cmp	r3, #32
 8000b78:	d108      	bne.n	8000b8c <HAL_I2C_Mem_Read+0x34>
    if ((pData == NULL) || (Size == 0U))
 8000b7a:	2a00      	cmp	r2, #0
 8000b7c:	d002      	beq.n	8000b84 <HAL_I2C_Mem_Read+0x2c>
 8000b7e:	9b05      	ldr	r3, [sp, #20]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d105      	bne.n	8000b90 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000b84:	2380      	movs	r3, #128	; 0x80
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8000b8a:	2001      	movs	r0, #1
}
 8000b8c:	b009      	add	sp, #36	; 0x24
 8000b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8000b90:	0023      	movs	r3, r4
 8000b92:	3340      	adds	r3, #64	; 0x40
 8000b94:	9303      	str	r3, [sp, #12]
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d0f7      	beq.n	8000b8c <HAL_I2C_Mem_Read+0x34>
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	9b03      	ldr	r3, [sp, #12]
 8000ba0:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8000ba2:	f7ff fc8f 	bl	80004c4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000ba6:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8000ba8:	9002      	str	r0, [sp, #8]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000baa:	9000      	str	r0, [sp, #0]
 8000bac:	2319      	movs	r3, #25
 8000bae:	2201      	movs	r2, #1
 8000bb0:	0209      	lsls	r1, r1, #8
 8000bb2:	0020      	movs	r0, r4
 8000bb4:	f7ff fdfa 	bl	80007ac <I2C_WaitOnFlagUntilTimeout>
 8000bb8:	1e06      	subs	r6, r0, #0
 8000bba:	d1e6      	bne.n	8000b8a <HAL_I2C_Mem_Read+0x32>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000bbc:	2322      	movs	r3, #34	; 0x22
 8000bbe:	703b      	strb	r3, [r7, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000bc0:	0027      	movs	r7, r4
 8000bc2:	331e      	adds	r3, #30
 8000bc4:	3742      	adds	r7, #66	; 0x42
 8000bc6:	703b      	strb	r3, [r7, #0]
    hi2c->pBuffPtr  = pData;
 8000bc8:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000bca:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8000bcc:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8000bce:	466b      	mov	r3, sp
 8000bd0:	8a9b      	ldrh	r3, [r3, #20]
    hi2c->XferISR   = NULL;
 8000bd2:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8000bd4:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000bd6:	9b02      	ldr	r3, [sp, #8]
 8000bd8:	9a06      	ldr	r2, [sp, #24]
 8000bda:	9301      	str	r3, [sp, #4]
 8000bdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000bde:	0029      	movs	r1, r5
 8000be0:	9300      	str	r3, [sp, #0]
 8000be2:	0020      	movs	r0, r4
 8000be4:	9b07      	ldr	r3, [sp, #28]
 8000be6:	f7ff fe71 	bl	80008cc <I2C_RequestMemoryRead>
 8000bea:	2800      	cmp	r0, #0
 8000bec:	d002      	beq.n	8000bf4 <HAL_I2C_Mem_Read+0x9c>
      __HAL_UNLOCK(hi2c);
 8000bee:	9b03      	ldr	r3, [sp, #12]
 8000bf0:	701e      	strb	r6, [r3, #0]
 8000bf2:	e7ca      	b.n	8000b8a <HAL_I2C_Mem_Read+0x32>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000bf4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000bf6:	4b35      	ldr	r3, [pc, #212]	; (8000ccc <HAL_I2C_Mem_Read+0x174>)
 8000bf8:	2aff      	cmp	r2, #255	; 0xff
 8000bfa:	d958      	bls.n	8000cae <HAL_I2C_Mem_Read+0x156>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000bfc:	22ff      	movs	r2, #255	; 0xff
 8000bfe:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8000c00:	9300      	str	r3, [sp, #0]
 8000c02:	2380      	movs	r3, #128	; 0x80
 8000c04:	045b      	lsls	r3, r3, #17
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8000c06:	0029      	movs	r1, r5
 8000c08:	0020      	movs	r0, r4
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000c0a:	2680      	movs	r6, #128	; 0x80
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8000c0c:	f7ff fdb8 	bl	8000780 <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000c10:	04b6      	lsls	r6, r6, #18
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8000c12:	9b02      	ldr	r3, [sp, #8]
 8000c14:	2200      	movs	r2, #0
 8000c16:	9300      	str	r3, [sp, #0]
 8000c18:	2104      	movs	r1, #4
 8000c1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000c1c:	0020      	movs	r0, r4
 8000c1e:	f7ff fdc5 	bl	80007ac <I2C_WaitOnFlagUntilTimeout>
 8000c22:	2800      	cmp	r0, #0
 8000c24:	d1b1      	bne.n	8000b8a <HAL_I2C_Mem_Read+0x32>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8000c26:	6823      	ldr	r3, [r4, #0]
 8000c28:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c2c:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8000c2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8000c30:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8000c32:	3301      	adds	r3, #1
 8000c34:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8000c36:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000c38:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000c40:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000c42:	b292      	uxth	r2, r2
 8000c44:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d018      	beq.n	8000c7c <HAL_I2C_Mem_Read+0x124>
 8000c4a:	2a00      	cmp	r2, #0
 8000c4c:	d116      	bne.n	8000c7c <HAL_I2C_Mem_Read+0x124>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000c4e:	9b02      	ldr	r3, [sp, #8]
 8000c50:	2180      	movs	r1, #128	; 0x80
 8000c52:	9300      	str	r3, [sp, #0]
 8000c54:	0020      	movs	r0, r4
 8000c56:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000c58:	f7ff fda8 	bl	80007ac <I2C_WaitOnFlagUntilTimeout>
 8000c5c:	2800      	cmp	r0, #0
 8000c5e:	d000      	beq.n	8000c62 <HAL_I2C_Mem_Read+0x10a>
 8000c60:	e793      	b.n	8000b8a <HAL_I2C_Mem_Read+0x32>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000c62:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000c64:	2bff      	cmp	r3, #255	; 0xff
 8000c66:	d92a      	bls.n	8000cbe <HAL_I2C_Mem_Read+0x166>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000c68:	23ff      	movs	r3, #255	; 0xff
 8000c6a:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000c6c:	2380      	movs	r3, #128	; 0x80
 8000c6e:	22ff      	movs	r2, #255	; 0xff
 8000c70:	9000      	str	r0, [sp, #0]
 8000c72:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000c74:	0029      	movs	r1, r5
 8000c76:	0020      	movs	r0, r4
 8000c78:	f7ff fd82 	bl	8000780 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8000c7c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d1c7      	bne.n	8000c12 <HAL_I2C_Mem_Read+0xba>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000c82:	9a02      	ldr	r2, [sp, #8]
 8000c84:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000c86:	0020      	movs	r0, r4
 8000c88:	f7ff fe52 	bl	8000930 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000c8c:	2800      	cmp	r0, #0
 8000c8e:	d000      	beq.n	8000c92 <HAL_I2C_Mem_Read+0x13a>
 8000c90:	e77b      	b.n	8000b8a <HAL_I2C_Mem_Read+0x32>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000c92:	2120      	movs	r1, #32
 8000c94:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8000c96:	4d0e      	ldr	r5, [pc, #56]	; (8000cd0 <HAL_I2C_Mem_Read+0x178>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000c98:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8000c9a:	685a      	ldr	r2, [r3, #4]
 8000c9c:	402a      	ands	r2, r5
 8000c9e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8000ca0:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8000ca2:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8000ca4:	3341      	adds	r3, #65	; 0x41
 8000ca6:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000ca8:	7038      	strb	r0, [r7, #0]
    __HAL_UNLOCK(hi2c);
 8000caa:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8000cac:	e76e      	b.n	8000b8c <HAL_I2C_Mem_Read+0x34>
      hi2c->XferSize = hi2c->XferCount;
 8000cae:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000cb0:	b292      	uxth	r2, r2
 8000cb2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8000cb4:	9300      	str	r3, [sp, #0]
 8000cb6:	2380      	movs	r3, #128	; 0x80
 8000cb8:	b2d2      	uxtb	r2, r2
 8000cba:	049b      	lsls	r3, r3, #18
 8000cbc:	e7a3      	b.n	8000c06 <HAL_I2C_Mem_Read+0xae>
          hi2c->XferSize = hi2c->XferCount;
 8000cbe:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000cc0:	0033      	movs	r3, r6
          hi2c->XferSize = hi2c->XferCount;
 8000cc2:	b292      	uxth	r2, r2
 8000cc4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000cc6:	b2d2      	uxtb	r2, r2
 8000cc8:	9000      	str	r0, [sp, #0]
 8000cca:	e7d3      	b.n	8000c74 <HAL_I2C_Mem_Read+0x11c>
 8000ccc:	80002400 	.word	0x80002400
 8000cd0:	fe00e800 	.word	0xfe00e800

08000cd4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000cd6:	0004      	movs	r4, r0
 8000cd8:	3441      	adds	r4, #65	; 0x41
 8000cda:	7822      	ldrb	r2, [r4, #0]
{
 8000cdc:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000cde:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8000ce0:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ce2:	2a20      	cmp	r2, #32
 8000ce4:	d118      	bne.n	8000d18 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 8000ce6:	001d      	movs	r5, r3
 8000ce8:	3540      	adds	r5, #64	; 0x40
 8000cea:	782e      	ldrb	r6, [r5, #0]
 8000cec:	2e01      	cmp	r6, #1
 8000cee:	d013      	beq.n	8000d18 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 8000cf0:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000cf2:	3022      	adds	r0, #34	; 0x22
 8000cf4:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8000cf6:	681e      	ldr	r6, [r3, #0]
 8000cf8:	3823      	subs	r0, #35	; 0x23
 8000cfa:	4386      	bics	r6, r0
 8000cfc:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000cfe:	681e      	ldr	r6, [r3, #0]
 8000d00:	4f06      	ldr	r7, [pc, #24]	; (8000d1c <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 8000d02:	403e      	ands	r6, r7
 8000d04:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8000d06:	681e      	ldr	r6, [r3, #0]
 8000d08:	4331      	orrs	r1, r6
 8000d0a:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8000d0c:	6819      	ldr	r1, [r3, #0]
 8000d0e:	4308      	orrs	r0, r1
 8000d10:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8000d12:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000d14:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8000d16:	7028      	strb	r0, [r5, #0]
  }
}
 8000d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	ffffefff 	.word	0xffffefff

08000d20 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000d20:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d22:	0005      	movs	r5, r0
 8000d24:	3541      	adds	r5, #65	; 0x41
 8000d26:	782a      	ldrb	r2, [r5, #0]
{
 8000d28:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d2a:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8000d2c:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d2e:	2a20      	cmp	r2, #32
 8000d30:	d117      	bne.n	8000d62 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8000d32:	001c      	movs	r4, r3
 8000d34:	3440      	adds	r4, #64	; 0x40
 8000d36:	7826      	ldrb	r6, [r4, #0]
 8000d38:	2e01      	cmp	r6, #1
 8000d3a:	d012      	beq.n	8000d62 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 8000d3c:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000d3e:	3022      	adds	r0, #34	; 0x22
 8000d40:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 8000d42:	681e      	ldr	r6, [r3, #0]
 8000d44:	3823      	subs	r0, #35	; 0x23
 8000d46:	4386      	bics	r6, r0
 8000d48:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8000d4a:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8000d4c:	4f05      	ldr	r7, [pc, #20]	; (8000d64 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 8000d4e:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8000d50:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8000d52:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8000d54:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8000d56:	6819      	ldr	r1, [r3, #0]
 8000d58:	4308      	orrs	r0, r1
 8000d5a:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8000d5c:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000d5e:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8000d60:	7020      	strb	r0, [r4, #0]
  }
}
 8000d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d64:	fffff0ff 	.word	0xfffff0ff

08000d68 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000d68:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8000d6a:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <HAL_RCC_GetSysClockFreq+0x64>)
{
 8000d6c:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8000d6e:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8000d70:	400a      	ands	r2, r1
 8000d72:	2a08      	cmp	r2, #8
 8000d74:	d026      	beq.n	8000dc4 <HAL_RCC_GetSysClockFreq+0x5c>
 8000d76:	2a0c      	cmp	r2, #12
 8000d78:	d006      	beq.n	8000d88 <HAL_RCC_GetSysClockFreq+0x20>
 8000d7a:	2a04      	cmp	r2, #4
 8000d7c:	d11a      	bne.n	8000db4 <HAL_RCC_GetSysClockFreq+0x4c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	06db      	lsls	r3, r3, #27
 8000d82:	d421      	bmi.n	8000dc8 <HAL_RCC_GetSysClockFreq+0x60>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8000d84:	4812      	ldr	r0, [pc, #72]	; (8000dd0 <HAL_RCC_GetSysClockFreq+0x68>)
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8000d86:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8000d88:	028a      	lsls	r2, r1, #10
 8000d8a:	4812      	ldr	r0, [pc, #72]	; (8000dd4 <HAL_RCC_GetSysClockFreq+0x6c>)
 8000d8c:	0f12      	lsrs	r2, r2, #28
 8000d8e:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000d90:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000d92:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000d94:	0f89      	lsrs	r1, r1, #30
 8000d96:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000d98:	03c0      	lsls	r0, r0, #15
 8000d9a:	d504      	bpl.n	8000da6 <HAL_RCC_GetSysClockFreq+0x3e>
        pllvco = (HSE_VALUE * pllm) / plld;
 8000d9c:	480e      	ldr	r0, [pc, #56]	; (8000dd8 <HAL_RCC_GetSysClockFreq+0x70>)
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8000d9e:	4350      	muls	r0, r2
 8000da0:	f7ff f9c6 	bl	8000130 <__udivsi3>
 8000da4:	e7ef      	b.n	8000d86 <HAL_RCC_GetSysClockFreq+0x1e>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	06db      	lsls	r3, r3, #27
 8000daa:	d501      	bpl.n	8000db0 <HAL_RCC_GetSysClockFreq+0x48>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8000dac:	480b      	ldr	r0, [pc, #44]	; (8000ddc <HAL_RCC_GetSysClockFreq+0x74>)
 8000dae:	e7f6      	b.n	8000d9e <HAL_RCC_GetSysClockFreq+0x36>
         pllvco = (HSI_VALUE * pllm) / plld;
 8000db0:	4807      	ldr	r0, [pc, #28]	; (8000dd0 <HAL_RCC_GetSysClockFreq+0x68>)
 8000db2:	e7f4      	b.n	8000d9e <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000db4:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8000db6:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000db8:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8000dba:	041b      	lsls	r3, r3, #16
 8000dbc:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	4098      	lsls	r0, r3
 8000dc2:	e7e0      	b.n	8000d86 <HAL_RCC_GetSysClockFreq+0x1e>
      sysclockfreq = HSE_VALUE;
 8000dc4:	4804      	ldr	r0, [pc, #16]	; (8000dd8 <HAL_RCC_GetSysClockFreq+0x70>)
 8000dc6:	e7de      	b.n	8000d86 <HAL_RCC_GetSysClockFreq+0x1e>
        sysclockfreq =  (HSI_VALUE >> 2);
 8000dc8:	4804      	ldr	r0, [pc, #16]	; (8000ddc <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 8000dca:	e7dc      	b.n	8000d86 <HAL_RCC_GetSysClockFreq+0x1e>
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	00f42400 	.word	0x00f42400
 8000dd4:	080029a5 	.word	0x080029a5
 8000dd8:	007a1200 	.word	0x007a1200
 8000ddc:	003d0900 	.word	0x003d0900

08000de0 <HAL_RCC_OscConfig>:
{
 8000de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000de2:	0005      	movs	r5, r0
 8000de4:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 8000de6:	2800      	cmp	r0, #0
 8000de8:	d102      	bne.n	8000df0 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8000dea:	2001      	movs	r0, #1
}
 8000dec:	b007      	add	sp, #28
 8000dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000df0:	230c      	movs	r3, #12
 8000df2:	4cc2      	ldr	r4, [pc, #776]	; (80010fc <HAL_RCC_OscConfig+0x31c>)
 8000df4:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000df6:	68e2      	ldr	r2, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000df8:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000dfa:	2380      	movs	r3, #128	; 0x80
 8000dfc:	025b      	lsls	r3, r3, #9
 8000dfe:	401a      	ands	r2, r3
 8000e00:	9201      	str	r2, [sp, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e02:	6802      	ldr	r2, [r0, #0]
 8000e04:	07d2      	lsls	r2, r2, #31
 8000e06:	d441      	bmi.n	8000e8c <HAL_RCC_OscConfig+0xac>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e08:	682b      	ldr	r3, [r5, #0]
 8000e0a:	079b      	lsls	r3, r3, #30
 8000e0c:	d500      	bpl.n	8000e10 <HAL_RCC_OscConfig+0x30>
 8000e0e:	e087      	b.n	8000f20 <HAL_RCC_OscConfig+0x140>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e10:	682b      	ldr	r3, [r5, #0]
 8000e12:	06db      	lsls	r3, r3, #27
 8000e14:	d528      	bpl.n	8000e68 <HAL_RCC_OscConfig+0x88>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8000e16:	2e00      	cmp	r6, #0
 8000e18:	d000      	beq.n	8000e1c <HAL_RCC_OscConfig+0x3c>
 8000e1a:	e0e1      	b.n	8000fe0 <HAL_RCC_OscConfig+0x200>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e1c:	6823      	ldr	r3, [r4, #0]
 8000e1e:	059b      	lsls	r3, r3, #22
 8000e20:	d502      	bpl.n	8000e28 <HAL_RCC_OscConfig+0x48>
 8000e22:	69eb      	ldr	r3, [r5, #28]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d0e0      	beq.n	8000dea <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e28:	6862      	ldr	r2, [r4, #4]
 8000e2a:	49b5      	ldr	r1, [pc, #724]	; (8001100 <HAL_RCC_OscConfig+0x320>)
 8000e2c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000e2e:	400a      	ands	r2, r1
 8000e30:	431a      	orrs	r2, r3
 8000e32:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e34:	6861      	ldr	r1, [r4, #4]
 8000e36:	6a2a      	ldr	r2, [r5, #32]
 8000e38:	0209      	lsls	r1, r1, #8
 8000e3a:	0a09      	lsrs	r1, r1, #8
 8000e3c:	0612      	lsls	r2, r2, #24
 8000e3e:	430a      	orrs	r2, r1
 8000e40:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000e42:	2280      	movs	r2, #128	; 0x80
 8000e44:	0b5b      	lsrs	r3, r3, #13
 8000e46:	3301      	adds	r3, #1
 8000e48:	0212      	lsls	r2, r2, #8
 8000e4a:	409a      	lsls	r2, r3
 8000e4c:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000e4e:	68e1      	ldr	r1, [r4, #12]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8000e50:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000e52:	060a      	lsls	r2, r1, #24
 8000e54:	49ab      	ldr	r1, [pc, #684]	; (8001104 <HAL_RCC_OscConfig+0x324>)
 8000e56:	0f12      	lsrs	r2, r2, #28
 8000e58:	5c8a      	ldrb	r2, [r1, r2]
 8000e5a:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000e5c:	4aaa      	ldr	r2, [pc, #680]	; (8001108 <HAL_RCC_OscConfig+0x328>)
 8000e5e:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8000e60:	f7ff fafc 	bl	800045c <HAL_InitTick>
        if(status != HAL_OK)
 8000e64:	2800      	cmp	r0, #0
 8000e66:	d1c1      	bne.n	8000dec <HAL_RCC_OscConfig+0xc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e68:	682b      	ldr	r3, [r5, #0]
 8000e6a:	071b      	lsls	r3, r3, #28
 8000e6c:	d500      	bpl.n	8000e70 <HAL_RCC_OscConfig+0x90>
 8000e6e:	e0ee      	b.n	800104e <HAL_RCC_OscConfig+0x26e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e70:	682b      	ldr	r3, [r5, #0]
 8000e72:	075b      	lsls	r3, r3, #29
 8000e74:	d500      	bpl.n	8000e78 <HAL_RCC_OscConfig+0x98>
 8000e76:	e110      	b.n	800109a <HAL_RCC_OscConfig+0x2ba>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000e78:	682b      	ldr	r3, [r5, #0]
 8000e7a:	069b      	lsls	r3, r3, #26
 8000e7c:	d500      	bpl.n	8000e80 <HAL_RCC_OscConfig+0xa0>
 8000e7e:	e195      	b.n	80011ac <HAL_RCC_OscConfig+0x3cc>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e80:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d000      	beq.n	8000e88 <HAL_RCC_OscConfig+0xa8>
 8000e86:	e1c4      	b.n	8001212 <HAL_RCC_OscConfig+0x432>
  return HAL_OK;
 8000e88:	2000      	movs	r0, #0
 8000e8a:	e7af      	b.n	8000dec <HAL_RCC_OscConfig+0xc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e8c:	2e08      	cmp	r6, #8
 8000e8e:	d004      	beq.n	8000e9a <HAL_RCC_OscConfig+0xba>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e90:	2e0c      	cmp	r6, #12
 8000e92:	d109      	bne.n	8000ea8 <HAL_RCC_OscConfig+0xc8>
 8000e94:	9a01      	ldr	r2, [sp, #4]
 8000e96:	2a00      	cmp	r2, #0
 8000e98:	d006      	beq.n	8000ea8 <HAL_RCC_OscConfig+0xc8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e9a:	6823      	ldr	r3, [r4, #0]
 8000e9c:	039b      	lsls	r3, r3, #14
 8000e9e:	d5b3      	bpl.n	8000e08 <HAL_RCC_OscConfig+0x28>
 8000ea0:	686b      	ldr	r3, [r5, #4]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d1b0      	bne.n	8000e08 <HAL_RCC_OscConfig+0x28>
 8000ea6:	e7a0      	b.n	8000dea <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ea8:	686a      	ldr	r2, [r5, #4]
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	d111      	bne.n	8000ed2 <HAL_RCC_OscConfig+0xf2>
 8000eae:	6822      	ldr	r2, [r4, #0]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000eb4:	f7ff fb06 	bl	80004c4 <HAL_GetTick>
 8000eb8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000eba:	2280      	movs	r2, #128	; 0x80
 8000ebc:	6823      	ldr	r3, [r4, #0]
 8000ebe:	0292      	lsls	r2, r2, #10
 8000ec0:	4213      	tst	r3, r2
 8000ec2:	d1a1      	bne.n	8000e08 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ec4:	f7ff fafe 	bl	80004c4 <HAL_GetTick>
 8000ec8:	1bc0      	subs	r0, r0, r7
 8000eca:	2864      	cmp	r0, #100	; 0x64
 8000ecc:	d9f5      	bls.n	8000eba <HAL_RCC_OscConfig+0xda>
            return HAL_TIMEOUT;
 8000ece:	2003      	movs	r0, #3
 8000ed0:	e78c      	b.n	8000dec <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ed2:	21a0      	movs	r1, #160	; 0xa0
 8000ed4:	02c9      	lsls	r1, r1, #11
 8000ed6:	428a      	cmp	r2, r1
 8000ed8:	d105      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x106>
 8000eda:	2280      	movs	r2, #128	; 0x80
 8000edc:	6821      	ldr	r1, [r4, #0]
 8000ede:	02d2      	lsls	r2, r2, #11
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	6022      	str	r2, [r4, #0]
 8000ee4:	e7e3      	b.n	8000eae <HAL_RCC_OscConfig+0xce>
 8000ee6:	6821      	ldr	r1, [r4, #0]
 8000ee8:	4888      	ldr	r0, [pc, #544]	; (800110c <HAL_RCC_OscConfig+0x32c>)
 8000eea:	4001      	ands	r1, r0
 8000eec:	6021      	str	r1, [r4, #0]
 8000eee:	6821      	ldr	r1, [r4, #0]
 8000ef0:	400b      	ands	r3, r1
 8000ef2:	9305      	str	r3, [sp, #20]
 8000ef4:	9b05      	ldr	r3, [sp, #20]
 8000ef6:	4986      	ldr	r1, [pc, #536]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8000ef8:	6823      	ldr	r3, [r4, #0]
 8000efa:	400b      	ands	r3, r1
 8000efc:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000efe:	2a00      	cmp	r2, #0
 8000f00:	d1d8      	bne.n	8000eb4 <HAL_RCC_OscConfig+0xd4>
        tickstart = HAL_GetTick();
 8000f02:	f7ff fadf 	bl	80004c4 <HAL_GetTick>
 8000f06:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f08:	2280      	movs	r2, #128	; 0x80
 8000f0a:	6823      	ldr	r3, [r4, #0]
 8000f0c:	0292      	lsls	r2, r2, #10
 8000f0e:	4213      	tst	r3, r2
 8000f10:	d100      	bne.n	8000f14 <HAL_RCC_OscConfig+0x134>
 8000f12:	e779      	b.n	8000e08 <HAL_RCC_OscConfig+0x28>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f14:	f7ff fad6 	bl	80004c4 <HAL_GetTick>
 8000f18:	1bc0      	subs	r0, r0, r7
 8000f1a:	2864      	cmp	r0, #100	; 0x64
 8000f1c:	d9f4      	bls.n	8000f08 <HAL_RCC_OscConfig+0x128>
 8000f1e:	e7d6      	b.n	8000ece <HAL_RCC_OscConfig+0xee>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8000f20:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 8000f22:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8000f24:	4213      	tst	r3, r2
 8000f26:	d003      	beq.n	8000f30 <HAL_RCC_OscConfig+0x150>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8000f28:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8000f2a:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8000f2c:	4311      	orrs	r1, r2
 8000f2e:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f30:	2e04      	cmp	r6, #4
 8000f32:	d004      	beq.n	8000f3e <HAL_RCC_OscConfig+0x15e>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f34:	2e0c      	cmp	r6, #12
 8000f36:	d125      	bne.n	8000f84 <HAL_RCC_OscConfig+0x1a4>
 8000f38:	9a01      	ldr	r2, [sp, #4]
 8000f3a:	2a00      	cmp	r2, #0
 8000f3c:	d122      	bne.n	8000f84 <HAL_RCC_OscConfig+0x1a4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000f3e:	6822      	ldr	r2, [r4, #0]
 8000f40:	0752      	lsls	r2, r2, #29
 8000f42:	d502      	bpl.n	8000f4a <HAL_RCC_OscConfig+0x16a>
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d100      	bne.n	8000f4a <HAL_RCC_OscConfig+0x16a>
 8000f48:	e74f      	b.n	8000dea <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f4a:	6861      	ldr	r1, [r4, #4]
 8000f4c:	692a      	ldr	r2, [r5, #16]
 8000f4e:	4871      	ldr	r0, [pc, #452]	; (8001114 <HAL_RCC_OscConfig+0x334>)
 8000f50:	0212      	lsls	r2, r2, #8
 8000f52:	4001      	ands	r1, r0
 8000f54:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000f56:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f58:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000f5a:	6822      	ldr	r2, [r4, #0]
 8000f5c:	438a      	bics	r2, r1
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000f62:	f7ff ff01 	bl	8000d68 <HAL_RCC_GetSysClockFreq>
 8000f66:	68e3      	ldr	r3, [r4, #12]
 8000f68:	4a66      	ldr	r2, [pc, #408]	; (8001104 <HAL_RCC_OscConfig+0x324>)
 8000f6a:	061b      	lsls	r3, r3, #24
 8000f6c:	0f1b      	lsrs	r3, r3, #28
 8000f6e:	5cd3      	ldrb	r3, [r2, r3]
 8000f70:	40d8      	lsrs	r0, r3
 8000f72:	4b65      	ldr	r3, [pc, #404]	; (8001108 <HAL_RCC_OscConfig+0x328>)
 8000f74:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8000f76:	2000      	movs	r0, #0
 8000f78:	f7ff fa70 	bl	800045c <HAL_InitTick>
      if(status != HAL_OK)
 8000f7c:	2800      	cmp	r0, #0
 8000f7e:	d100      	bne.n	8000f82 <HAL_RCC_OscConfig+0x1a2>
 8000f80:	e746      	b.n	8000e10 <HAL_RCC_OscConfig+0x30>
 8000f82:	e733      	b.n	8000dec <HAL_RCC_OscConfig+0xc>
      if(hsi_state != RCC_HSI_OFF)
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d019      	beq.n	8000fbc <HAL_RCC_OscConfig+0x1dc>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000f88:	2109      	movs	r1, #9
 8000f8a:	6822      	ldr	r2, [r4, #0]
 8000f8c:	438a      	bics	r2, r1
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000f92:	f7ff fa97 	bl	80004c4 <HAL_GetTick>
 8000f96:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000f98:	2204      	movs	r2, #4
 8000f9a:	6823      	ldr	r3, [r4, #0]
 8000f9c:	4213      	tst	r3, r2
 8000f9e:	d007      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x1d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fa0:	6862      	ldr	r2, [r4, #4]
 8000fa2:	692b      	ldr	r3, [r5, #16]
 8000fa4:	495b      	ldr	r1, [pc, #364]	; (8001114 <HAL_RCC_OscConfig+0x334>)
 8000fa6:	021b      	lsls	r3, r3, #8
 8000fa8:	400a      	ands	r2, r1
 8000faa:	4313      	orrs	r3, r2
 8000fac:	6063      	str	r3, [r4, #4]
 8000fae:	e72f      	b.n	8000e10 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fb0:	f7ff fa88 	bl	80004c4 <HAL_GetTick>
 8000fb4:	1bc0      	subs	r0, r0, r7
 8000fb6:	2802      	cmp	r0, #2
 8000fb8:	d9ee      	bls.n	8000f98 <HAL_RCC_OscConfig+0x1b8>
 8000fba:	e788      	b.n	8000ece <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_DISABLE();
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	6823      	ldr	r3, [r4, #0]
 8000fc0:	4393      	bics	r3, r2
 8000fc2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000fc4:	f7ff fa7e 	bl	80004c4 <HAL_GetTick>
 8000fc8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000fca:	2204      	movs	r2, #4
 8000fcc:	6823      	ldr	r3, [r4, #0]
 8000fce:	4213      	tst	r3, r2
 8000fd0:	d100      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x1f4>
 8000fd2:	e71d      	b.n	8000e10 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fd4:	f7ff fa76 	bl	80004c4 <HAL_GetTick>
 8000fd8:	1bc0      	subs	r0, r0, r7
 8000fda:	2802      	cmp	r0, #2
 8000fdc:	d9f5      	bls.n	8000fca <HAL_RCC_OscConfig+0x1ea>
 8000fde:	e776      	b.n	8000ece <HAL_RCC_OscConfig+0xee>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000fe0:	69eb      	ldr	r3, [r5, #28]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d020      	beq.n	8001028 <HAL_RCC_OscConfig+0x248>
        __HAL_RCC_MSI_ENABLE();
 8000fe6:	2380      	movs	r3, #128	; 0x80
 8000fe8:	6822      	ldr	r2, [r4, #0]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	4313      	orrs	r3, r2
 8000fee:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000ff0:	f7ff fa68 	bl	80004c4 <HAL_GetTick>
 8000ff4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000ff6:	2280      	movs	r2, #128	; 0x80
 8000ff8:	6823      	ldr	r3, [r4, #0]
 8000ffa:	0092      	lsls	r2, r2, #2
 8000ffc:	4213      	tst	r3, r2
 8000ffe:	d00d      	beq.n	800101c <HAL_RCC_OscConfig+0x23c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001000:	6863      	ldr	r3, [r4, #4]
 8001002:	4a3f      	ldr	r2, [pc, #252]	; (8001100 <HAL_RCC_OscConfig+0x320>)
 8001004:	4013      	ands	r3, r2
 8001006:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001008:	4313      	orrs	r3, r2
 800100a:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800100c:	6862      	ldr	r2, [r4, #4]
 800100e:	6a2b      	ldr	r3, [r5, #32]
 8001010:	0212      	lsls	r2, r2, #8
 8001012:	061b      	lsls	r3, r3, #24
 8001014:	0a12      	lsrs	r2, r2, #8
 8001016:	4313      	orrs	r3, r2
 8001018:	6063      	str	r3, [r4, #4]
 800101a:	e725      	b.n	8000e68 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800101c:	f7ff fa52 	bl	80004c4 <HAL_GetTick>
 8001020:	1bc0      	subs	r0, r0, r7
 8001022:	2802      	cmp	r0, #2
 8001024:	d9e7      	bls.n	8000ff6 <HAL_RCC_OscConfig+0x216>
 8001026:	e752      	b.n	8000ece <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_MSI_DISABLE();
 8001028:	6823      	ldr	r3, [r4, #0]
 800102a:	4a3b      	ldr	r2, [pc, #236]	; (8001118 <HAL_RCC_OscConfig+0x338>)
 800102c:	4013      	ands	r3, r2
 800102e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001030:	f7ff fa48 	bl	80004c4 <HAL_GetTick>
 8001034:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001036:	2280      	movs	r2, #128	; 0x80
 8001038:	6823      	ldr	r3, [r4, #0]
 800103a:	0092      	lsls	r2, r2, #2
 800103c:	4213      	tst	r3, r2
 800103e:	d100      	bne.n	8001042 <HAL_RCC_OscConfig+0x262>
 8001040:	e712      	b.n	8000e68 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001042:	f7ff fa3f 	bl	80004c4 <HAL_GetTick>
 8001046:	1bc0      	subs	r0, r0, r7
 8001048:	2802      	cmp	r0, #2
 800104a:	d9f4      	bls.n	8001036 <HAL_RCC_OscConfig+0x256>
 800104c:	e73f      	b.n	8000ece <HAL_RCC_OscConfig+0xee>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800104e:	696a      	ldr	r2, [r5, #20]
 8001050:	2301      	movs	r3, #1
 8001052:	2a00      	cmp	r2, #0
 8001054:	d010      	beq.n	8001078 <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 8001056:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001058:	4313      	orrs	r3, r2
 800105a:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800105c:	f7ff fa32 	bl	80004c4 <HAL_GetTick>
 8001060:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001062:	2202      	movs	r2, #2
 8001064:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001066:	4213      	tst	r3, r2
 8001068:	d000      	beq.n	800106c <HAL_RCC_OscConfig+0x28c>
 800106a:	e701      	b.n	8000e70 <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800106c:	f7ff fa2a 	bl	80004c4 <HAL_GetTick>
 8001070:	1bc0      	subs	r0, r0, r7
 8001072:	2802      	cmp	r0, #2
 8001074:	d9f5      	bls.n	8001062 <HAL_RCC_OscConfig+0x282>
 8001076:	e72a      	b.n	8000ece <HAL_RCC_OscConfig+0xee>
      __HAL_RCC_LSI_DISABLE();
 8001078:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800107a:	439a      	bics	r2, r3
 800107c:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800107e:	f7ff fa21 	bl	80004c4 <HAL_GetTick>
 8001082:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001084:	2202      	movs	r2, #2
 8001086:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001088:	4213      	tst	r3, r2
 800108a:	d100      	bne.n	800108e <HAL_RCC_OscConfig+0x2ae>
 800108c:	e6f0      	b.n	8000e70 <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800108e:	f7ff fa19 	bl	80004c4 <HAL_GetTick>
 8001092:	1bc0      	subs	r0, r0, r7
 8001094:	2802      	cmp	r0, #2
 8001096:	d9f5      	bls.n	8001084 <HAL_RCC_OscConfig+0x2a4>
 8001098:	e719      	b.n	8000ece <HAL_RCC_OscConfig+0xee>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800109a:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800109c:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800109e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80010a0:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 80010a2:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010a4:	421a      	tst	r2, r3
 80010a6:	d104      	bne.n	80010b2 <HAL_RCC_OscConfig+0x2d2>
      __HAL_RCC_PWR_CLK_ENABLE();
 80010a8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80010aa:	4313      	orrs	r3, r2
 80010ac:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 80010ae:	2301      	movs	r3, #1
 80010b0:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010b2:	2280      	movs	r2, #128	; 0x80
 80010b4:	4f19      	ldr	r7, [pc, #100]	; (800111c <HAL_RCC_OscConfig+0x33c>)
 80010b6:	0052      	lsls	r2, r2, #1
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	4213      	tst	r3, r2
 80010bc:	d008      	beq.n	80010d0 <HAL_RCC_OscConfig+0x2f0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010be:	2280      	movs	r2, #128	; 0x80
 80010c0:	68ab      	ldr	r3, [r5, #8]
 80010c2:	0052      	lsls	r2, r2, #1
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d12b      	bne.n	8001120 <HAL_RCC_OscConfig+0x340>
 80010c8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80010ca:	4313      	orrs	r3, r2
 80010cc:	6523      	str	r3, [r4, #80]	; 0x50
 80010ce:	e04c      	b.n	800116a <HAL_RCC_OscConfig+0x38a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010d0:	2280      	movs	r2, #128	; 0x80
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	0052      	lsls	r2, r2, #1
 80010d6:	4313      	orrs	r3, r2
 80010d8:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80010da:	f7ff f9f3 	bl	80004c4 <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010de:	2380      	movs	r3, #128	; 0x80
 80010e0:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 80010e2:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010e4:	9303      	str	r3, [sp, #12]
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	9a03      	ldr	r2, [sp, #12]
 80010ea:	4213      	tst	r3, r2
 80010ec:	d1e7      	bne.n	80010be <HAL_RCC_OscConfig+0x2de>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010ee:	f7ff f9e9 	bl	80004c4 <HAL_GetTick>
 80010f2:	9b02      	ldr	r3, [sp, #8]
 80010f4:	1ac0      	subs	r0, r0, r3
 80010f6:	2864      	cmp	r0, #100	; 0x64
 80010f8:	d9f5      	bls.n	80010e6 <HAL_RCC_OscConfig+0x306>
 80010fa:	e6e8      	b.n	8000ece <HAL_RCC_OscConfig+0xee>
 80010fc:	40021000 	.word	0x40021000
 8001100:	ffff1fff 	.word	0xffff1fff
 8001104:	0800298d 	.word	0x0800298d
 8001108:	20000000 	.word	0x20000000
 800110c:	fffeffff 	.word	0xfffeffff
 8001110:	fffbffff 	.word	0xfffbffff
 8001114:	ffffe0ff 	.word	0xffffe0ff
 8001118:	fffffeff 	.word	0xfffffeff
 800111c:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001120:	2b00      	cmp	r3, #0
 8001122:	d116      	bne.n	8001152 <HAL_RCC_OscConfig+0x372>
 8001124:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001126:	4a6c      	ldr	r2, [pc, #432]	; (80012d8 <HAL_RCC_OscConfig+0x4f8>)
 8001128:	4013      	ands	r3, r2
 800112a:	6523      	str	r3, [r4, #80]	; 0x50
 800112c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800112e:	4a6b      	ldr	r2, [pc, #428]	; (80012dc <HAL_RCC_OscConfig+0x4fc>)
 8001130:	4013      	ands	r3, r2
 8001132:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8001134:	f7ff f9c6 	bl	80004c4 <HAL_GetTick>
 8001138:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800113a:	2280      	movs	r2, #128	; 0x80
 800113c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800113e:	0092      	lsls	r2, r2, #2
 8001140:	4213      	tst	r3, r2
 8001142:	d02a      	beq.n	800119a <HAL_RCC_OscConfig+0x3ba>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001144:	f7ff f9be 	bl	80004c4 <HAL_GetTick>
 8001148:	4b65      	ldr	r3, [pc, #404]	; (80012e0 <HAL_RCC_OscConfig+0x500>)
 800114a:	1bc0      	subs	r0, r0, r7
 800114c:	4298      	cmp	r0, r3
 800114e:	d9f4      	bls.n	800113a <HAL_RCC_OscConfig+0x35a>
 8001150:	e6bd      	b.n	8000ece <HAL_RCC_OscConfig+0xee>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001152:	21a0      	movs	r1, #160	; 0xa0
 8001154:	00c9      	lsls	r1, r1, #3
 8001156:	428b      	cmp	r3, r1
 8001158:	d10b      	bne.n	8001172 <HAL_RCC_OscConfig+0x392>
 800115a:	2380      	movs	r3, #128	; 0x80
 800115c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	430b      	orrs	r3, r1
 8001162:	6523      	str	r3, [r4, #80]	; 0x50
 8001164:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001166:	431a      	orrs	r2, r3
 8001168:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800116a:	f7ff f9ab 	bl	80004c4 <HAL_GetTick>
 800116e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001170:	e00e      	b.n	8001190 <HAL_RCC_OscConfig+0x3b0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001172:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001174:	4a58      	ldr	r2, [pc, #352]	; (80012d8 <HAL_RCC_OscConfig+0x4f8>)
 8001176:	4013      	ands	r3, r2
 8001178:	6523      	str	r3, [r4, #80]	; 0x50
 800117a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800117c:	4a57      	ldr	r2, [pc, #348]	; (80012dc <HAL_RCC_OscConfig+0x4fc>)
 800117e:	4013      	ands	r3, r2
 8001180:	e7a4      	b.n	80010cc <HAL_RCC_OscConfig+0x2ec>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001182:	f7ff f99f 	bl	80004c4 <HAL_GetTick>
 8001186:	4b56      	ldr	r3, [pc, #344]	; (80012e0 <HAL_RCC_OscConfig+0x500>)
 8001188:	1bc0      	subs	r0, r0, r7
 800118a:	4298      	cmp	r0, r3
 800118c:	d900      	bls.n	8001190 <HAL_RCC_OscConfig+0x3b0>
 800118e:	e69e      	b.n	8000ece <HAL_RCC_OscConfig+0xee>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001190:	2280      	movs	r2, #128	; 0x80
 8001192:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001194:	0092      	lsls	r2, r2, #2
 8001196:	4213      	tst	r3, r2
 8001198:	d0f3      	beq.n	8001182 <HAL_RCC_OscConfig+0x3a2>
    if(pwrclkchanged == SET)
 800119a:	9b01      	ldr	r3, [sp, #4]
 800119c:	2b01      	cmp	r3, #1
 800119e:	d000      	beq.n	80011a2 <HAL_RCC_OscConfig+0x3c2>
 80011a0:	e66a      	b.n	8000e78 <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_PWR_CLK_DISABLE();
 80011a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80011a4:	4a4f      	ldr	r2, [pc, #316]	; (80012e4 <HAL_RCC_OscConfig+0x504>)
 80011a6:	4013      	ands	r3, r2
 80011a8:	63a3      	str	r3, [r4, #56]	; 0x38
 80011aa:	e665      	b.n	8000e78 <HAL_RCC_OscConfig+0x98>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80011ac:	69a9      	ldr	r1, [r5, #24]
 80011ae:	2301      	movs	r3, #1
 80011b0:	4a4d      	ldr	r2, [pc, #308]	; (80012e8 <HAL_RCC_OscConfig+0x508>)
 80011b2:	2900      	cmp	r1, #0
 80011b4:	d018      	beq.n	80011e8 <HAL_RCC_OscConfig+0x408>
        __HAL_RCC_HSI48_ENABLE();
 80011b6:	68a1      	ldr	r1, [r4, #8]
 80011b8:	4319      	orrs	r1, r3
 80011ba:	60a1      	str	r1, [r4, #8]
 80011bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80011be:	430b      	orrs	r3, r1
 80011c0:	6363      	str	r3, [r4, #52]	; 0x34
 80011c2:	2380      	movs	r3, #128	; 0x80
 80011c4:	6a11      	ldr	r1, [r2, #32]
 80011c6:	019b      	lsls	r3, r3, #6
 80011c8:	430b      	orrs	r3, r1
 80011ca:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 80011cc:	f7ff f97a 	bl	80004c4 <HAL_GetTick>
 80011d0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80011d2:	2202      	movs	r2, #2
 80011d4:	68a3      	ldr	r3, [r4, #8]
 80011d6:	4213      	tst	r3, r2
 80011d8:	d000      	beq.n	80011dc <HAL_RCC_OscConfig+0x3fc>
 80011da:	e651      	b.n	8000e80 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011dc:	f7ff f972 	bl	80004c4 <HAL_GetTick>
 80011e0:	1bc0      	subs	r0, r0, r7
 80011e2:	2802      	cmp	r0, #2
 80011e4:	d9f5      	bls.n	80011d2 <HAL_RCC_OscConfig+0x3f2>
 80011e6:	e672      	b.n	8000ece <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI48_DISABLE();
 80011e8:	68a1      	ldr	r1, [r4, #8]
 80011ea:	4399      	bics	r1, r3
 80011ec:	60a1      	str	r1, [r4, #8]
 80011ee:	6a13      	ldr	r3, [r2, #32]
 80011f0:	493e      	ldr	r1, [pc, #248]	; (80012ec <HAL_RCC_OscConfig+0x50c>)
 80011f2:	400b      	ands	r3, r1
 80011f4:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 80011f6:	f7ff f965 	bl	80004c4 <HAL_GetTick>
 80011fa:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80011fc:	2202      	movs	r2, #2
 80011fe:	68a3      	ldr	r3, [r4, #8]
 8001200:	4213      	tst	r3, r2
 8001202:	d100      	bne.n	8001206 <HAL_RCC_OscConfig+0x426>
 8001204:	e63c      	b.n	8000e80 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001206:	f7ff f95d 	bl	80004c4 <HAL_GetTick>
 800120a:	1bc0      	subs	r0, r0, r7
 800120c:	2802      	cmp	r0, #2
 800120e:	d9f5      	bls.n	80011fc <HAL_RCC_OscConfig+0x41c>
 8001210:	e65d      	b.n	8000ece <HAL_RCC_OscConfig+0xee>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001212:	2e0c      	cmp	r6, #12
 8001214:	d043      	beq.n	800129e <HAL_RCC_OscConfig+0x4be>
 8001216:	4a36      	ldr	r2, [pc, #216]	; (80012f0 <HAL_RCC_OscConfig+0x510>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001218:	2b02      	cmp	r3, #2
 800121a:	d12e      	bne.n	800127a <HAL_RCC_OscConfig+0x49a>
        __HAL_RCC_PLL_DISABLE();
 800121c:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800121e:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001220:	4013      	ands	r3, r2
 8001222:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001224:	f7ff f94e 	bl	80004c4 <HAL_GetTick>
 8001228:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800122a:	04b6      	lsls	r6, r6, #18
 800122c:	6823      	ldr	r3, [r4, #0]
 800122e:	4233      	tst	r3, r6
 8001230:	d11d      	bne.n	800126e <HAL_RCC_OscConfig+0x48e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001232:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8001234:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001236:	68e2      	ldr	r2, [r4, #12]
 8001238:	430b      	orrs	r3, r1
 800123a:	492e      	ldr	r1, [pc, #184]	; (80012f4 <HAL_RCC_OscConfig+0x514>)
 800123c:	400a      	ands	r2, r1
 800123e:	4313      	orrs	r3, r2
 8001240:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001242:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001244:	4313      	orrs	r3, r2
 8001246:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8001248:	2380      	movs	r3, #128	; 0x80
 800124a:	6822      	ldr	r2, [r4, #0]
 800124c:	045b      	lsls	r3, r3, #17
 800124e:	4313      	orrs	r3, r2
 8001250:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001252:	f7ff f937 	bl	80004c4 <HAL_GetTick>
 8001256:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001258:	04ad      	lsls	r5, r5, #18
 800125a:	6823      	ldr	r3, [r4, #0]
 800125c:	422b      	tst	r3, r5
 800125e:	d000      	beq.n	8001262 <HAL_RCC_OscConfig+0x482>
 8001260:	e612      	b.n	8000e88 <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001262:	f7ff f92f 	bl	80004c4 <HAL_GetTick>
 8001266:	1b80      	subs	r0, r0, r6
 8001268:	2802      	cmp	r0, #2
 800126a:	d9f6      	bls.n	800125a <HAL_RCC_OscConfig+0x47a>
 800126c:	e62f      	b.n	8000ece <HAL_RCC_OscConfig+0xee>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800126e:	f7ff f929 	bl	80004c4 <HAL_GetTick>
 8001272:	1bc0      	subs	r0, r0, r7
 8001274:	2802      	cmp	r0, #2
 8001276:	d9d9      	bls.n	800122c <HAL_RCC_OscConfig+0x44c>
 8001278:	e629      	b.n	8000ece <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_PLL_DISABLE();
 800127a:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800127c:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800127e:	4013      	ands	r3, r2
 8001280:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001282:	f7ff f91f 	bl	80004c4 <HAL_GetTick>
 8001286:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001288:	04ad      	lsls	r5, r5, #18
 800128a:	6823      	ldr	r3, [r4, #0]
 800128c:	422b      	tst	r3, r5
 800128e:	d100      	bne.n	8001292 <HAL_RCC_OscConfig+0x4b2>
 8001290:	e5fa      	b.n	8000e88 <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001292:	f7ff f917 	bl	80004c4 <HAL_GetTick>
 8001296:	1b80      	subs	r0, r0, r6
 8001298:	2802      	cmp	r0, #2
 800129a:	d9f6      	bls.n	800128a <HAL_RCC_OscConfig+0x4aa>
 800129c:	e617      	b.n	8000ece <HAL_RCC_OscConfig+0xee>
        return HAL_ERROR;
 800129e:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d100      	bne.n	80012a6 <HAL_RCC_OscConfig+0x4c6>
 80012a4:	e5a2      	b.n	8000dec <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012a6:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 80012a8:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012aa:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80012ac:	0252      	lsls	r2, r2, #9
 80012ae:	401a      	ands	r2, r3
        return HAL_ERROR;
 80012b0:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012b2:	428a      	cmp	r2, r1
 80012b4:	d000      	beq.n	80012b8 <HAL_RCC_OscConfig+0x4d8>
 80012b6:	e599      	b.n	8000dec <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80012b8:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ba:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80012bc:	0392      	lsls	r2, r2, #14
 80012be:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012c0:	428a      	cmp	r2, r1
 80012c2:	d000      	beq.n	80012c6 <HAL_RCC_OscConfig+0x4e6>
 80012c4:	e592      	b.n	8000dec <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80012c6:	20c0      	movs	r0, #192	; 0xc0
 80012c8:	0400      	lsls	r0, r0, #16
 80012ca:	4003      	ands	r3, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80012cc:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80012ce:	1a18      	subs	r0, r3, r0
 80012d0:	1e43      	subs	r3, r0, #1
 80012d2:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 80012d4:	b2c0      	uxtb	r0, r0
 80012d6:	e589      	b.n	8000dec <HAL_RCC_OscConfig+0xc>
 80012d8:	fffffeff 	.word	0xfffffeff
 80012dc:	fffffbff 	.word	0xfffffbff
 80012e0:	00001388 	.word	0x00001388
 80012e4:	efffffff 	.word	0xefffffff
 80012e8:	40010000 	.word	0x40010000
 80012ec:	ffffdfff 	.word	0xffffdfff
 80012f0:	feffffff 	.word	0xfeffffff
 80012f4:	ff02ffff 	.word	0xff02ffff

080012f8 <HAL_RCC_ClockConfig>:
{
 80012f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80012fa:	1e06      	subs	r6, r0, #0
 80012fc:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 80012fe:	d101      	bne.n	8001304 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8001300:	2001      	movs	r0, #1
}
 8001302:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001304:	2201      	movs	r2, #1
 8001306:	4c51      	ldr	r4, [pc, #324]	; (800144c <HAL_RCC_ClockConfig+0x154>)
 8001308:	9901      	ldr	r1, [sp, #4]
 800130a:	6823      	ldr	r3, [r4, #0]
 800130c:	4013      	ands	r3, r2
 800130e:	428b      	cmp	r3, r1
 8001310:	d327      	bcc.n	8001362 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001312:	6832      	ldr	r2, [r6, #0]
 8001314:	0793      	lsls	r3, r2, #30
 8001316:	d42f      	bmi.n	8001378 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001318:	07d3      	lsls	r3, r2, #31
 800131a:	d435      	bmi.n	8001388 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800131c:	2301      	movs	r3, #1
 800131e:	6822      	ldr	r2, [r4, #0]
 8001320:	9901      	ldr	r1, [sp, #4]
 8001322:	401a      	ands	r2, r3
 8001324:	4291      	cmp	r1, r2
 8001326:	d200      	bcs.n	800132a <HAL_RCC_ClockConfig+0x32>
 8001328:	e081      	b.n	800142e <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800132a:	6832      	ldr	r2, [r6, #0]
 800132c:	4c48      	ldr	r4, [pc, #288]	; (8001450 <HAL_RCC_ClockConfig+0x158>)
 800132e:	0753      	lsls	r3, r2, #29
 8001330:	d500      	bpl.n	8001334 <HAL_RCC_ClockConfig+0x3c>
 8001332:	e084      	b.n	800143e <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001334:	0713      	lsls	r3, r2, #28
 8001336:	d506      	bpl.n	8001346 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001338:	68e2      	ldr	r2, [r4, #12]
 800133a:	6933      	ldr	r3, [r6, #16]
 800133c:	4945      	ldr	r1, [pc, #276]	; (8001454 <HAL_RCC_ClockConfig+0x15c>)
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	400a      	ands	r2, r1
 8001342:	4313      	orrs	r3, r2
 8001344:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001346:	f7ff fd0f 	bl	8000d68 <HAL_RCC_GetSysClockFreq>
 800134a:	68e3      	ldr	r3, [r4, #12]
 800134c:	4a42      	ldr	r2, [pc, #264]	; (8001458 <HAL_RCC_ClockConfig+0x160>)
 800134e:	061b      	lsls	r3, r3, #24
 8001350:	0f1b      	lsrs	r3, r3, #28
 8001352:	5cd3      	ldrb	r3, [r2, r3]
 8001354:	40d8      	lsrs	r0, r3
 8001356:	4b41      	ldr	r3, [pc, #260]	; (800145c <HAL_RCC_ClockConfig+0x164>)
 8001358:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 800135a:	2000      	movs	r0, #0
 800135c:	f7ff f87e 	bl	800045c <HAL_InitTick>
 8001360:	e7cf      	b.n	8001302 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001362:	6823      	ldr	r3, [r4, #0]
 8001364:	9901      	ldr	r1, [sp, #4]
 8001366:	4393      	bics	r3, r2
 8001368:	430b      	orrs	r3, r1
 800136a:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800136c:	6823      	ldr	r3, [r4, #0]
 800136e:	4013      	ands	r3, r2
 8001370:	9a01      	ldr	r2, [sp, #4]
 8001372:	429a      	cmp	r2, r3
 8001374:	d1c4      	bne.n	8001300 <HAL_RCC_ClockConfig+0x8>
 8001376:	e7cc      	b.n	8001312 <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001378:	20f0      	movs	r0, #240	; 0xf0
 800137a:	4935      	ldr	r1, [pc, #212]	; (8001450 <HAL_RCC_ClockConfig+0x158>)
 800137c:	68cb      	ldr	r3, [r1, #12]
 800137e:	4383      	bics	r3, r0
 8001380:	68b0      	ldr	r0, [r6, #8]
 8001382:	4303      	orrs	r3, r0
 8001384:	60cb      	str	r3, [r1, #12]
 8001386:	e7c7      	b.n	8001318 <HAL_RCC_ClockConfig+0x20>
 8001388:	4d31      	ldr	r5, [pc, #196]	; (8001450 <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800138a:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800138c:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800138e:	2a02      	cmp	r2, #2
 8001390:	d119      	bne.n	80013c6 <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001392:	039b      	lsls	r3, r3, #14
 8001394:	d5b4      	bpl.n	8001300 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001396:	2103      	movs	r1, #3
 8001398:	68eb      	ldr	r3, [r5, #12]
 800139a:	438b      	bics	r3, r1
 800139c:	4313      	orrs	r3, r2
 800139e:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 80013a0:	f7ff f890 	bl	80004c4 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013a4:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80013a6:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d119      	bne.n	80013e0 <HAL_RCC_ClockConfig+0xe8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80013ac:	220c      	movs	r2, #12
 80013ae:	68eb      	ldr	r3, [r5, #12]
 80013b0:	4013      	ands	r3, r2
 80013b2:	2b08      	cmp	r3, #8
 80013b4:	d0b2      	beq.n	800131c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013b6:	f7ff f885 	bl	80004c4 <HAL_GetTick>
 80013ba:	4b29      	ldr	r3, [pc, #164]	; (8001460 <HAL_RCC_ClockConfig+0x168>)
 80013bc:	1bc0      	subs	r0, r0, r7
 80013be:	4298      	cmp	r0, r3
 80013c0:	d9f4      	bls.n	80013ac <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 80013c2:	2003      	movs	r0, #3
 80013c4:	e79d      	b.n	8001302 <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013c6:	2a03      	cmp	r2, #3
 80013c8:	d102      	bne.n	80013d0 <HAL_RCC_ClockConfig+0xd8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80013ca:	019b      	lsls	r3, r3, #6
 80013cc:	d4e3      	bmi.n	8001396 <HAL_RCC_ClockConfig+0x9e>
 80013ce:	e797      	b.n	8001300 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80013d0:	2a01      	cmp	r2, #1
 80013d2:	d102      	bne.n	80013da <HAL_RCC_ClockConfig+0xe2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013d4:	075b      	lsls	r3, r3, #29
 80013d6:	d4de      	bmi.n	8001396 <HAL_RCC_ClockConfig+0x9e>
 80013d8:	e792      	b.n	8001300 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80013da:	059b      	lsls	r3, r3, #22
 80013dc:	d4db      	bmi.n	8001396 <HAL_RCC_ClockConfig+0x9e>
 80013de:	e78f      	b.n	8001300 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013e0:	2b03      	cmp	r3, #3
 80013e2:	d10b      	bne.n	80013fc <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013e4:	220c      	movs	r2, #12
 80013e6:	68eb      	ldr	r3, [r5, #12]
 80013e8:	4013      	ands	r3, r2
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d096      	beq.n	800131c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013ee:	f7ff f869 	bl	80004c4 <HAL_GetTick>
 80013f2:	4b1b      	ldr	r3, [pc, #108]	; (8001460 <HAL_RCC_ClockConfig+0x168>)
 80013f4:	1bc0      	subs	r0, r0, r7
 80013f6:	4298      	cmp	r0, r3
 80013f8:	d9f4      	bls.n	80013e4 <HAL_RCC_ClockConfig+0xec>
 80013fa:	e7e2      	b.n	80013c2 <HAL_RCC_ClockConfig+0xca>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d010      	beq.n	8001422 <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001400:	220c      	movs	r2, #12
 8001402:	68eb      	ldr	r3, [r5, #12]
 8001404:	4213      	tst	r3, r2
 8001406:	d089      	beq.n	800131c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001408:	f7ff f85c 	bl	80004c4 <HAL_GetTick>
 800140c:	4b14      	ldr	r3, [pc, #80]	; (8001460 <HAL_RCC_ClockConfig+0x168>)
 800140e:	1bc0      	subs	r0, r0, r7
 8001410:	4298      	cmp	r0, r3
 8001412:	d9f5      	bls.n	8001400 <HAL_RCC_ClockConfig+0x108>
 8001414:	e7d5      	b.n	80013c2 <HAL_RCC_ClockConfig+0xca>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001416:	f7ff f855 	bl	80004c4 <HAL_GetTick>
 800141a:	4b11      	ldr	r3, [pc, #68]	; (8001460 <HAL_RCC_ClockConfig+0x168>)
 800141c:	1bc0      	subs	r0, r0, r7
 800141e:	4298      	cmp	r0, r3
 8001420:	d8cf      	bhi.n	80013c2 <HAL_RCC_ClockConfig+0xca>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001422:	220c      	movs	r2, #12
 8001424:	68eb      	ldr	r3, [r5, #12]
 8001426:	4013      	ands	r3, r2
 8001428:	2b04      	cmp	r3, #4
 800142a:	d1f4      	bne.n	8001416 <HAL_RCC_ClockConfig+0x11e>
 800142c:	e776      	b.n	800131c <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800142e:	6822      	ldr	r2, [r4, #0]
 8001430:	439a      	bics	r2, r3
 8001432:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001434:	6822      	ldr	r2, [r4, #0]
 8001436:	421a      	tst	r2, r3
 8001438:	d000      	beq.n	800143c <HAL_RCC_ClockConfig+0x144>
 800143a:	e761      	b.n	8001300 <HAL_RCC_ClockConfig+0x8>
 800143c:	e775      	b.n	800132a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800143e:	68e3      	ldr	r3, [r4, #12]
 8001440:	4908      	ldr	r1, [pc, #32]	; (8001464 <HAL_RCC_ClockConfig+0x16c>)
 8001442:	400b      	ands	r3, r1
 8001444:	68f1      	ldr	r1, [r6, #12]
 8001446:	430b      	orrs	r3, r1
 8001448:	60e3      	str	r3, [r4, #12]
 800144a:	e773      	b.n	8001334 <HAL_RCC_ClockConfig+0x3c>
 800144c:	40022000 	.word	0x40022000
 8001450:	40021000 	.word	0x40021000
 8001454:	ffffc7ff 	.word	0xffffc7ff
 8001458:	0800298d 	.word	0x0800298d
 800145c:	20000000 	.word	0x20000000
 8001460:	00001388 	.word	0x00001388
 8001464:	fffff8ff 	.word	0xfffff8ff

08001468 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001468:	4b04      	ldr	r3, [pc, #16]	; (800147c <HAL_RCC_GetPCLK1Freq+0x14>)
 800146a:	4a05      	ldr	r2, [pc, #20]	; (8001480 <HAL_RCC_GetPCLK1Freq+0x18>)
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	055b      	lsls	r3, r3, #21
 8001470:	0f5b      	lsrs	r3, r3, #29
 8001472:	5cd3      	ldrb	r3, [r2, r3]
 8001474:	4a03      	ldr	r2, [pc, #12]	; (8001484 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001476:	6810      	ldr	r0, [r2, #0]
 8001478:	40d8      	lsrs	r0, r3
}
 800147a:	4770      	bx	lr
 800147c:	40021000 	.word	0x40021000
 8001480:	0800299d 	.word	0x0800299d
 8001484:	20000000 	.word	0x20000000

08001488 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001488:	4b04      	ldr	r3, [pc, #16]	; (800149c <HAL_RCC_GetPCLK2Freq+0x14>)
 800148a:	4a05      	ldr	r2, [pc, #20]	; (80014a0 <HAL_RCC_GetPCLK2Freq+0x18>)
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	049b      	lsls	r3, r3, #18
 8001490:	0f5b      	lsrs	r3, r3, #29
 8001492:	5cd3      	ldrb	r3, [r2, r3]
 8001494:	4a03      	ldr	r2, [pc, #12]	; (80014a4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001496:	6810      	ldr	r0, [r2, #0]
 8001498:	40d8      	lsrs	r0, r3
}
 800149a:	4770      	bx	lr
 800149c:	40021000 	.word	0x40021000
 80014a0:	0800299d 	.word	0x0800299d
 80014a4:	20000000 	.word	0x20000000

080014a8 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80014a8:	6803      	ldr	r3, [r0, #0]
{
 80014aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80014ac:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80014ae:	069b      	lsls	r3, r3, #26
 80014b0:	d53a      	bpl.n	8001528 <HAL_RCCEx_PeriphCLKConfig+0x80>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014b2:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80014b4:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014b6:	4c5f      	ldr	r4, [pc, #380]	; (8001634 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80014b8:	055b      	lsls	r3, r3, #21
 80014ba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 80014bc:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014be:	421a      	tst	r2, r3
 80014c0:	d104      	bne.n	80014cc <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014c2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80014c4:	4313      	orrs	r3, r2
 80014c6:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 80014c8:	2301      	movs	r3, #1
 80014ca:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014cc:	2780      	movs	r7, #128	; 0x80
 80014ce:	4e5a      	ldr	r6, [pc, #360]	; (8001638 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80014d0:	007f      	lsls	r7, r7, #1
 80014d2:	6833      	ldr	r3, [r6, #0]
 80014d4:	423b      	tst	r3, r7
 80014d6:	d069      	beq.n	80015ac <HAL_RCCEx_PeriphCLKConfig+0x104>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80014d8:	22c0      	movs	r2, #192	; 0xc0
 80014da:	21c0      	movs	r1, #192	; 0xc0
 80014dc:	6820      	ldr	r0, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80014de:	686b      	ldr	r3, [r5, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80014e0:	0392      	lsls	r2, r2, #14
 80014e2:	4010      	ands	r0, r2
 80014e4:	0289      	lsls	r1, r1, #10
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80014e6:	401a      	ands	r2, r3
 80014e8:	4290      	cmp	r0, r2
 80014ea:	d000      	beq.n	80014ee <HAL_RCCEx_PeriphCLKConfig+0x46>
 80014ec:	e06f      	b.n	80015ce <HAL_RCCEx_PeriphCLKConfig+0x126>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80014ee:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80014f0:	400a      	ands	r2, r1

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80014f2:	d000      	beq.n	80014f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80014f4:	e076      	b.n	80015e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80014f6:	6869      	ldr	r1, [r5, #4]
 80014f8:	23c0      	movs	r3, #192	; 0xc0
 80014fa:	000a      	movs	r2, r1
 80014fc:	029b      	lsls	r3, r3, #10
 80014fe:	401a      	ands	r2, r3
 8001500:	429a      	cmp	r2, r3
 8001502:	d107      	bne.n	8001514 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8001504:	6823      	ldr	r3, [r4, #0]
 8001506:	484d      	ldr	r0, [pc, #308]	; (800163c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001508:	4003      	ands	r3, r0
 800150a:	20c0      	movs	r0, #192	; 0xc0
 800150c:	0380      	lsls	r0, r0, #14
 800150e:	4001      	ands	r1, r0
 8001510:	430b      	orrs	r3, r1
 8001512:	6023      	str	r3, [r4, #0]
 8001514:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001516:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001518:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800151a:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 800151c:	2b01      	cmp	r3, #1
 800151e:	d103      	bne.n	8001528 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001520:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001522:	4a47      	ldr	r2, [pc, #284]	; (8001640 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001524:	4013      	ands	r3, r2
 8001526:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001528:	682b      	ldr	r3, [r5, #0]
 800152a:	07da      	lsls	r2, r3, #31
 800152c:	d506      	bpl.n	800153c <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800152e:	2003      	movs	r0, #3
 8001530:	4940      	ldr	r1, [pc, #256]	; (8001634 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001532:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8001534:	4382      	bics	r2, r0
 8001536:	68a8      	ldr	r0, [r5, #8]
 8001538:	4302      	orrs	r2, r0
 800153a:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800153c:	079a      	lsls	r2, r3, #30
 800153e:	d506      	bpl.n	800154e <HAL_RCCEx_PeriphCLKConfig+0xa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001540:	200c      	movs	r0, #12
 8001542:	493c      	ldr	r1, [pc, #240]	; (8001634 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001544:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8001546:	4382      	bics	r2, r0
 8001548:	68e8      	ldr	r0, [r5, #12]
 800154a:	4302      	orrs	r2, r0
 800154c:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800154e:	075a      	lsls	r2, r3, #29
 8001550:	d506      	bpl.n	8001560 <HAL_RCCEx_PeriphCLKConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001552:	4938      	ldr	r1, [pc, #224]	; (8001634 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001554:	483b      	ldr	r0, [pc, #236]	; (8001644 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8001556:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8001558:	4002      	ands	r2, r0
 800155a:	6928      	ldr	r0, [r5, #16]
 800155c:	4302      	orrs	r2, r0
 800155e:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001560:	071a      	lsls	r2, r3, #28
 8001562:	d506      	bpl.n	8001572 <HAL_RCCEx_PeriphCLKConfig+0xca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001564:	4933      	ldr	r1, [pc, #204]	; (8001634 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001566:	4838      	ldr	r0, [pc, #224]	; (8001648 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001568:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800156a:	4002      	ands	r2, r0
 800156c:	6968      	ldr	r0, [r5, #20]
 800156e:	4302      	orrs	r2, r0
 8001570:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001572:	05da      	lsls	r2, r3, #23
 8001574:	d506      	bpl.n	8001584 <HAL_RCCEx_PeriphCLKConfig+0xdc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001576:	492f      	ldr	r1, [pc, #188]	; (8001634 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001578:	4834      	ldr	r0, [pc, #208]	; (800164c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800157a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800157c:	4002      	ands	r2, r0
 800157e:	69a8      	ldr	r0, [r5, #24]
 8001580:	4302      	orrs	r2, r0
 8001582:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001584:	065a      	lsls	r2, r3, #25
 8001586:	d506      	bpl.n	8001596 <HAL_RCCEx_PeriphCLKConfig+0xee>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001588:	492a      	ldr	r1, [pc, #168]	; (8001634 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800158a:	4831      	ldr	r0, [pc, #196]	; (8001650 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800158c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800158e:	4002      	ands	r2, r0
 8001590:	6a28      	ldr	r0, [r5, #32]
 8001592:	4302      	orrs	r2, r0
 8001594:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8001596:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001598:	061b      	lsls	r3, r3, #24
 800159a:	d517      	bpl.n	80015cc <HAL_RCCEx_PeriphCLKConfig+0x124>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800159c:	4a25      	ldr	r2, [pc, #148]	; (8001634 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800159e:	492d      	ldr	r1, [pc, #180]	; (8001654 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80015a0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80015a2:	400b      	ands	r3, r1
 80015a4:	69e9      	ldr	r1, [r5, #28]
 80015a6:	430b      	orrs	r3, r1
 80015a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015aa:	e00f      	b.n	80015cc <HAL_RCCEx_PeriphCLKConfig+0x124>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015ac:	6833      	ldr	r3, [r6, #0]
 80015ae:	433b      	orrs	r3, r7
 80015b0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80015b2:	f7fe ff87 	bl	80004c4 <HAL_GetTick>
 80015b6:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b8:	6833      	ldr	r3, [r6, #0]
 80015ba:	423b      	tst	r3, r7
 80015bc:	d18c      	bne.n	80014d8 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015be:	f7fe ff81 	bl	80004c4 <HAL_GetTick>
 80015c2:	9b01      	ldr	r3, [sp, #4]
 80015c4:	1ac0      	subs	r0, r0, r3
 80015c6:	2864      	cmp	r0, #100	; 0x64
 80015c8:	d9f6      	bls.n	80015b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
          return HAL_TIMEOUT;
 80015ca:	2003      	movs	r0, #3
}
 80015cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80015ce:	001a      	movs	r2, r3
 80015d0:	400a      	ands	r2, r1
 80015d2:	428a      	cmp	r2, r1
 80015d4:	d000      	beq.n	80015d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
 80015d6:	e78a      	b.n	80014ee <HAL_RCCEx_PeriphCLKConfig+0x46>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80015d8:	6822      	ldr	r2, [r4, #0]
          return HAL_ERROR;
 80015da:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80015dc:	0392      	lsls	r2, r2, #14
 80015de:	d400      	bmi.n	80015e2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
 80015e0:	e785      	b.n	80014ee <HAL_RCCEx_PeriphCLKConfig+0x46>
 80015e2:	e7f3      	b.n	80015cc <HAL_RCCEx_PeriphCLKConfig+0x124>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80015e4:	400b      	ands	r3, r1
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d100      	bne.n	80015ec <HAL_RCCEx_PeriphCLKConfig+0x144>
 80015ea:	e784      	b.n	80014f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80015ec:	682b      	ldr	r3, [r5, #0]
 80015ee:	069b      	lsls	r3, r3, #26
 80015f0:	d400      	bmi.n	80015f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80015f2:	e780      	b.n	80014f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      __HAL_RCC_BACKUPRESET_FORCE();
 80015f4:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80015f6:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 80015f8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80015fa:	0312      	lsls	r2, r2, #12
 80015fc:	4302      	orrs	r2, r0
 80015fe:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001600:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001602:	4b12      	ldr	r3, [pc, #72]	; (800164c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001604:	4814      	ldr	r0, [pc, #80]	; (8001658 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001606:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001608:	4002      	ands	r2, r0
 800160a:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 800160c:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800160e:	05cb      	lsls	r3, r1, #23
 8001610:	d400      	bmi.n	8001614 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8001612:	e770      	b.n	80014f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
        tickstart = HAL_GetTick();
 8001614:	f7fe ff56 	bl	80004c4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001618:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 800161a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800161c:	00bf      	lsls	r7, r7, #2
 800161e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001620:	423b      	tst	r3, r7
 8001622:	d000      	beq.n	8001626 <HAL_RCCEx_PeriphCLKConfig+0x17e>
 8001624:	e767      	b.n	80014f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001626:	f7fe ff4d 	bl	80004c4 <HAL_GetTick>
 800162a:	4b0c      	ldr	r3, [pc, #48]	; (800165c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800162c:	1b80      	subs	r0, r0, r6
 800162e:	4298      	cmp	r0, r3
 8001630:	d9f5      	bls.n	800161e <HAL_RCCEx_PeriphCLKConfig+0x176>
 8001632:	e7ca      	b.n	80015ca <HAL_RCCEx_PeriphCLKConfig+0x122>
 8001634:	40021000 	.word	0x40021000
 8001638:	40007000 	.word	0x40007000
 800163c:	ffcfffff 	.word	0xffcfffff
 8001640:	efffffff 	.word	0xefffffff
 8001644:	fffff3ff 	.word	0xfffff3ff
 8001648:	ffffcfff 	.word	0xffffcfff
 800164c:	fffcffff 	.word	0xfffcffff
 8001650:	fbffffff 	.word	0xfbffffff
 8001654:	fff3ffff 	.word	0xfff3ffff
 8001658:	fff7ffff 	.word	0xfff7ffff
 800165c:	00001388 	.word	0x00001388

08001660 <HAL_RTC_AlarmAEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8001660:	4770      	bx	lr
	...

08001664 <HAL_RTC_AlarmIRQHandler>:
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8001664:	6803      	ldr	r3, [r0, #0]
{
 8001666:	b510      	push	{r4, lr}
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8001668:	689a      	ldr	r2, [r3, #8]
{
 800166a:	0004      	movs	r4, r0
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800166c:	04d2      	lsls	r2, r2, #19
 800166e:	d50a      	bpl.n	8001686 <HAL_RTC_AlarmIRQHandler+0x22>
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	05db      	lsls	r3, r3, #23
 8001674:	d507      	bpl.n	8001686 <HAL_RTC_AlarmIRQHandler+0x22>
      HAL_RTC_AlarmAEventCallback(hrtc);
 8001676:	f7ff fff3 	bl	8001660 <HAL_RTC_AlarmAEventCallback>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800167a:	6821      	ldr	r1, [r4, #0]
 800167c:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <HAL_RTC_AlarmIRQHandler+0x54>)
 800167e:	68ca      	ldr	r2, [r1, #12]
 8001680:	b2d2      	uxtb	r2, r2
 8001682:	4313      	orrs	r3, r2
 8001684:	60cb      	str	r3, [r1, #12]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8001686:	6823      	ldr	r3, [r4, #0]
 8001688:	689a      	ldr	r2, [r3, #8]
 800168a:	0492      	lsls	r2, r2, #18
 800168c:	d50b      	bpl.n	80016a6 <HAL_RTC_AlarmIRQHandler+0x42>
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	059b      	lsls	r3, r3, #22
 8001692:	d508      	bpl.n	80016a6 <HAL_RTC_AlarmIRQHandler+0x42>
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8001694:	0020      	movs	r0, r4
 8001696:	f000 fa67 	bl	8001b68 <HAL_RTCEx_AlarmBEventCallback>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800169a:	6821      	ldr	r1, [r4, #0]
 800169c:	4b07      	ldr	r3, [pc, #28]	; (80016bc <HAL_RTC_AlarmIRQHandler+0x58>)
 800169e:	68ca      	ldr	r2, [r1, #12]
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	4313      	orrs	r3, r2
 80016a4:	60cb      	str	r3, [r1, #12]
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80016a6:	2280      	movs	r2, #128	; 0x80
 80016a8:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <HAL_RTC_AlarmIRQHandler+0x5c>)
 80016aa:	0292      	lsls	r2, r2, #10
 80016ac:	615a      	str	r2, [r3, #20]
  hrtc->State = HAL_RTC_STATE_READY;
 80016ae:	2301      	movs	r3, #1
 80016b0:	3402      	adds	r4, #2
 80016b2:	77e3      	strb	r3, [r4, #31]
}
 80016b4:	bd10      	pop	{r4, pc}
 80016b6:	46c0      	nop			; (mov r8, r8)
 80016b8:	fffffe7f 	.word	0xfffffe7f
 80016bc:	fffffd7f 	.word	0xfffffd7f
 80016c0:	40010400 	.word	0x40010400

080016c4 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80016c4:	21a0      	movs	r1, #160	; 0xa0
 80016c6:	6802      	ldr	r2, [r0, #0]
{
 80016c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80016ca:	68d3      	ldr	r3, [r2, #12]
{
 80016cc:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80016ce:	438b      	bics	r3, r1
 80016d0:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80016d2:	f7fe fef7 	bl	80004c4 <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80016d6:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 80016d8:	0006      	movs	r6, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80016da:	2520      	movs	r5, #32
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80016dc:	00bf      	lsls	r7, r7, #2
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80016de:	6823      	ldr	r3, [r4, #0]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	422b      	tst	r3, r5
 80016e4:	d001      	beq.n	80016ea <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80016e6:	2000      	movs	r0, #0
}
 80016e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80016ea:	f7fe feeb 	bl	80004c4 <HAL_GetTick>
 80016ee:	1b80      	subs	r0, r0, r6
 80016f0:	42b8      	cmp	r0, r7
 80016f2:	d9f4      	bls.n	80016de <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 80016f4:	2003      	movs	r0, #3
 80016f6:	e7f7      	b.n	80016e8 <HAL_RTC_WaitForSynchro+0x24>

080016f8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80016f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80016fa:	2440      	movs	r4, #64	; 0x40
 80016fc:	6803      	ldr	r3, [r0, #0]
{
 80016fe:	0005      	movs	r5, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8001700:	68da      	ldr	r2, [r3, #12]
 8001702:	4222      	tst	r2, r4
 8001704:	d001      	beq.n	800170a <RTC_EnterInitMode+0x12>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001706:	2000      	movs	r0, #0
}
 8001708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800170a:	2201      	movs	r2, #1
 800170c:	4252      	negs	r2, r2
 800170e:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8001710:	f7fe fed8 	bl	80004c4 <HAL_GetTick>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8001714:	27fa      	movs	r7, #250	; 0xfa
    tickstart = HAL_GetTick();
 8001716:	0006      	movs	r6, r0
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8001718:	00bf      	lsls	r7, r7, #2
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800171a:	682b      	ldr	r3, [r5, #0]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	4223      	tst	r3, r4
 8001720:	d1f1      	bne.n	8001706 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8001722:	f7fe fecf 	bl	80004c4 <HAL_GetTick>
 8001726:	1b80      	subs	r0, r0, r6
 8001728:	42b8      	cmp	r0, r7
 800172a:	d9f6      	bls.n	800171a <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 800172c:	2003      	movs	r0, #3
 800172e:	e7eb      	b.n	8001708 <RTC_EnterInitMode+0x10>

08001730 <HAL_RTC_Init>:
{
 8001730:	b570      	push	{r4, r5, r6, lr}
 8001732:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001734:	2501      	movs	r5, #1
  if (hrtc == NULL)
 8001736:	2800      	cmp	r0, #0
 8001738:	d01a      	beq.n	8001770 <HAL_RTC_Init+0x40>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800173a:	1c86      	adds	r6, r0, #2
 800173c:	7ff3      	ldrb	r3, [r6, #31]
 800173e:	b2db      	uxtb	r3, r3
 8001740:	2b00      	cmp	r3, #0
 8001742:	d103      	bne.n	800174c <HAL_RTC_Init+0x1c>
    hrtc->Lock = HAL_UNLOCKED;
 8001744:	1942      	adds	r2, r0, r5
 8001746:	77d3      	strb	r3, [r2, #31]
    HAL_RTC_MspInit(hrtc);
 8001748:	f000 ffb4 	bl	80026b4 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800174c:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800174e:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001750:	77f3      	strb	r3, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001752:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001754:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001756:	625a      	str	r2, [r3, #36]	; 0x24
 8001758:	3a77      	subs	r2, #119	; 0x77
 800175a:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800175c:	f7ff ffcc 	bl	80016f8 <RTC_EnterInitMode>
 8001760:	6823      	ldr	r3, [r4, #0]
 8001762:	1e05      	subs	r5, r0, #0
 8001764:	d006      	beq.n	8001774 <HAL_RTC_Init+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001766:	22ff      	movs	r2, #255	; 0xff
 8001768:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800176a:	2304      	movs	r3, #4
 800176c:	77f3      	strb	r3, [r6, #31]
        return HAL_ERROR;
 800176e:	2501      	movs	r5, #1
}
 8001770:	0028      	movs	r0, r5
 8001772:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001774:	689a      	ldr	r2, [r3, #8]
 8001776:	491b      	ldr	r1, [pc, #108]	; (80017e4 <HAL_RTC_Init+0xb4>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001778:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800177a:	400a      	ands	r2, r1
 800177c:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800177e:	6862      	ldr	r2, [r4, #4]
 8001780:	6899      	ldr	r1, [r3, #8]
 8001782:	4302      	orrs	r2, r0
 8001784:	69a0      	ldr	r0, [r4, #24]
 8001786:	4302      	orrs	r2, r0
 8001788:	430a      	orrs	r2, r1
 800178a:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800178c:	68e2      	ldr	r2, [r4, #12]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800178e:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001790:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001792:	68a2      	ldr	r2, [r4, #8]
 8001794:	6919      	ldr	r1, [r3, #16]
 8001796:	0412      	lsls	r2, r2, #16
 8001798:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800179a:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800179c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800179e:	68da      	ldr	r2, [r3, #12]
 80017a0:	438a      	bics	r2, r1
 80017a2:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80017a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017a6:	397d      	subs	r1, #125	; 0x7d
 80017a8:	438a      	bics	r2, r1
 80017aa:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80017ac:	69e2      	ldr	r2, [r4, #28]
 80017ae:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80017b0:	4302      	orrs	r2, r0
 80017b2:	430a      	orrs	r2, r1
 80017b4:	64da      	str	r2, [r3, #76]	; 0x4c
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	069b      	lsls	r3, r3, #26
 80017ba:	d40c      	bmi.n	80017d6 <HAL_RTC_Init+0xa6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80017bc:	0020      	movs	r0, r4
 80017be:	f7ff ff81 	bl	80016c4 <HAL_RTC_WaitForSynchro>
 80017c2:	2800      	cmp	r0, #0
 80017c4:	d007      	beq.n	80017d6 <HAL_RTC_Init+0xa6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80017c6:	22ff      	movs	r2, #255	; 0xff
 80017c8:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(hrtc);
 80017ca:	3401      	adds	r4, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80017cc:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80017ce:	2304      	movs	r3, #4
 80017d0:	77f3      	strb	r3, [r6, #31]
        __HAL_UNLOCK(hrtc);
 80017d2:	77e5      	strb	r5, [r4, #31]
 80017d4:	e7cb      	b.n	800176e <HAL_RTC_Init+0x3e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80017d6:	22ff      	movs	r2, #255	; 0xff
 80017d8:	6823      	ldr	r3, [r4, #0]
 80017da:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80017dc:	2301      	movs	r3, #1
 80017de:	77f3      	strb	r3, [r6, #31]
    return HAL_OK;
 80017e0:	e7c6      	b.n	8001770 <HAL_RTC_Init+0x40>
 80017e2:	46c0      	nop			; (mov r8, r8)
 80017e4:	ff8fffbf 	.word	0xff8fffbf

080017e8 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 80017e8:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while (Param >= 10U)
 80017ea:	2809      	cmp	r0, #9
 80017ec:	d803      	bhi.n	80017f6 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Param -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 80017ee:	011b      	lsls	r3, r3, #4
 80017f0:	4318      	orrs	r0, r3
 80017f2:	b2c0      	uxtb	r0, r0
}
 80017f4:	4770      	bx	lr
    Param -= 10U;
 80017f6:	380a      	subs	r0, #10
    bcdhigh++;
 80017f8:	3301      	adds	r3, #1
    Param -= 10U;
 80017fa:	b2c0      	uxtb	r0, r0
 80017fc:	e7f5      	b.n	80017ea <RTC_ByteToBcd2+0x2>
	...

08001800 <HAL_RTC_SetTime>:
{
 8001800:	2302      	movs	r3, #2
 8001802:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8001804:	1c47      	adds	r7, r0, #1
{
 8001806:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 8001808:	7ff9      	ldrb	r1, [r7, #31]
{
 800180a:	0005      	movs	r5, r0
  __HAL_LOCK(hrtc);
 800180c:	001e      	movs	r6, r3
 800180e:	2901      	cmp	r1, #1
 8001810:	d036      	beq.n	8001880 <HAL_RTC_SetTime+0x80>
 8001812:	2101      	movs	r1, #1
 8001814:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001816:	18c1      	adds	r1, r0, r3
 8001818:	77cb      	strb	r3, [r1, #31]
 800181a:	9100      	str	r1, [sp, #0]
 800181c:	2140      	movs	r1, #64	; 0x40
 800181e:	6803      	ldr	r3, [r0, #0]
 8001820:	7866      	ldrb	r6, [r4, #1]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	7820      	ldrb	r0, [r4, #0]
 8001826:	400b      	ands	r3, r1
  if (Format == RTC_FORMAT_BIN)
 8001828:	2a00      	cmp	r2, #0
 800182a:	d12b      	bne.n	8001884 <HAL_RTC_SetTime+0x84>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800182c:	2b00      	cmp	r3, #0
 800182e:	d100      	bne.n	8001832 <HAL_RTC_SetTime+0x32>
      sTime->TimeFormat = 0x00U;
 8001830:	70e3      	strb	r3, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001832:	f7ff ffd9 	bl	80017e8 <RTC_ByteToBcd2>
 8001836:	9001      	str	r0, [sp, #4]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001838:	0030      	movs	r0, r6
 800183a:	f7ff ffd5 	bl	80017e8 <RTC_ByteToBcd2>
 800183e:	0006      	movs	r6, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8001840:	78a0      	ldrb	r0, [r4, #2]
 8001842:	f7ff ffd1 	bl	80017e8 <RTC_ByteToBcd2>
 8001846:	0003      	movs	r3, r0
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8001848:	78e0      	ldrb	r0, [r4, #3]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800184a:	0236      	lsls	r6, r6, #8
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800184c:	0400      	lsls	r0, r0, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800184e:	4318      	orrs	r0, r3
 8001850:	9b01      	ldr	r3, [sp, #4]
 8001852:	041b      	lsls	r3, r3, #16
 8001854:	4318      	orrs	r0, r3
 8001856:	4330      	orrs	r0, r6
 8001858:	9001      	str	r0, [sp, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800185a:	22ca      	movs	r2, #202	; 0xca
 800185c:	682b      	ldr	r3, [r5, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800185e:	0028      	movs	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001860:	625a      	str	r2, [r3, #36]	; 0x24
 8001862:	3a77      	subs	r2, #119	; 0x77
 8001864:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001866:	f7ff ff47 	bl	80016f8 <RTC_EnterInitMode>
 800186a:	682b      	ldr	r3, [r5, #0]
 800186c:	1e06      	subs	r6, r0, #0
 800186e:	d016      	beq.n	800189e <HAL_RTC_SetTime+0x9e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001870:	22ff      	movs	r2, #255	; 0xff
 8001872:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001874:	2304      	movs	r3, #4
 8001876:	9a00      	ldr	r2, [sp, #0]
 8001878:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 800187a:	2300      	movs	r3, #0
 800187c:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 800187e:	2601      	movs	r6, #1
}
 8001880:	0030      	movs	r0, r6
 8001882:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001884:	2b00      	cmp	r3, #0
 8001886:	d100      	bne.n	800188a <HAL_RTC_SetTime+0x8a>
      sTime->TimeFormat = 0x00U;
 8001888:	70e3      	strb	r3, [r4, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800188a:	0400      	lsls	r0, r0, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800188c:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800188e:	4306      	orrs	r6, r0
              ((uint32_t)sTime->Seconds) | \
 8001890:	78a0      	ldrb	r0, [r4, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001892:	4306      	orrs	r6, r0
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8001894:	78e0      	ldrb	r0, [r4, #3]
 8001896:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001898:	4306      	orrs	r6, r0
 800189a:	9601      	str	r6, [sp, #4]
 800189c:	e7dd      	b.n	800185a <HAL_RTC_SetTime+0x5a>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800189e:	4815      	ldr	r0, [pc, #84]	; (80018f4 <HAL_RTC_SetTime+0xf4>)
 80018a0:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80018a2:	4915      	ldr	r1, [pc, #84]	; (80018f8 <HAL_RTC_SetTime+0xf8>)
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80018a4:	4002      	ands	r2, r0
 80018a6:	601a      	str	r2, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80018a8:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80018aa:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80018ac:	400a      	ands	r2, r1
 80018ae:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80018b0:	68e2      	ldr	r2, [r4, #12]
 80018b2:	6899      	ldr	r1, [r3, #8]
 80018b4:	4302      	orrs	r2, r0
 80018b6:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80018b8:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80018ba:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80018bc:	68da      	ldr	r2, [r3, #12]
 80018be:	438a      	bics	r2, r1
 80018c0:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	069b      	lsls	r3, r3, #26
 80018c6:	d40c      	bmi.n	80018e2 <HAL_RTC_SetTime+0xe2>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80018c8:	0028      	movs	r0, r5
 80018ca:	f7ff fefb 	bl	80016c4 <HAL_RTC_WaitForSynchro>
 80018ce:	2800      	cmp	r0, #0
 80018d0:	d007      	beq.n	80018e2 <HAL_RTC_SetTime+0xe2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80018d2:	22ff      	movs	r2, #255	; 0xff
 80018d4:	682b      	ldr	r3, [r5, #0]
 80018d6:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80018d8:	2304      	movs	r3, #4
 80018da:	9a00      	ldr	r2, [sp, #0]
 80018dc:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 80018de:	77fe      	strb	r6, [r7, #31]
 80018e0:	e7cd      	b.n	800187e <HAL_RTC_SetTime+0x7e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80018e2:	22ff      	movs	r2, #255	; 0xff
 80018e4:	682b      	ldr	r3, [r5, #0]
 80018e6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80018e8:	2301      	movs	r3, #1
 80018ea:	9a00      	ldr	r2, [sp, #0]
 80018ec:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 80018ee:	2300      	movs	r3, #0
 80018f0:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 80018f2:	e7c5      	b.n	8001880 <HAL_RTC_SetTime+0x80>
 80018f4:	007f7f7f 	.word	0x007f7f7f
 80018f8:	fffbffff 	.word	0xfffbffff

080018fc <HAL_RTC_SetDate>:
{
 80018fc:	2302      	movs	r3, #2
 80018fe:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8001900:	1c47      	adds	r7, r0, #1
{
 8001902:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 8001904:	7ff9      	ldrb	r1, [r7, #31]
{
 8001906:	b085      	sub	sp, #20
 8001908:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 800190a:	001e      	movs	r6, r3
 800190c:	2901      	cmp	r1, #1
 800190e:	d035      	beq.n	800197c <HAL_RTC_SetDate+0x80>
 8001910:	2101      	movs	r1, #1
 8001912:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001914:	18c1      	adds	r1, r0, r3
 8001916:	9101      	str	r1, [sp, #4]
 8001918:	77cb      	strb	r3, [r1, #31]
 800191a:	786b      	ldrb	r3, [r5, #1]
 800191c:	78e8      	ldrb	r0, [r5, #3]
 800191e:	78ae      	ldrb	r6, [r5, #2]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001920:	2a00      	cmp	r2, #0
 8001922:	d14e      	bne.n	80019c2 <HAL_RTC_SetDate+0xc6>
 8001924:	3210      	adds	r2, #16
 8001926:	4213      	tst	r3, r2
 8001928:	d002      	beq.n	8001930 <HAL_RTC_SetDate+0x34>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800192a:	4393      	bics	r3, r2
 800192c:	330a      	adds	r3, #10
 800192e:	706b      	strb	r3, [r5, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001930:	f7ff ff5a 	bl	80017e8 <RTC_ByteToBcd2>
 8001934:	9002      	str	r0, [sp, #8]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8001936:	7868      	ldrb	r0, [r5, #1]
 8001938:	f7ff ff56 	bl	80017e8 <RTC_ByteToBcd2>
 800193c:	9003      	str	r0, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800193e:	0030      	movs	r0, r6
 8001940:	f7ff ff52 	bl	80017e8 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001944:	9b02      	ldr	r3, [sp, #8]
                  ((uint32_t)sDate->WeekDay << 13U));
 8001946:	782d      	ldrb	r5, [r5, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001948:	041e      	lsls	r6, r3, #16
                  ((uint32_t)sDate->WeekDay << 13U));
 800194a:	036d      	lsls	r5, r5, #13
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800194c:	9b03      	ldr	r3, [sp, #12]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800194e:	4305      	orrs	r5, r0
 8001950:	4335      	orrs	r5, r6
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8001952:	021e      	lsls	r6, r3, #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001954:	22ca      	movs	r2, #202	; 0xca
 8001956:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001958:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800195a:	625a      	str	r2, [r3, #36]	; 0x24
 800195c:	3a77      	subs	r2, #119	; 0x77
 800195e:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001960:	f7ff feca 	bl	80016f8 <RTC_EnterInitMode>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001964:	4335      	orrs	r5, r6
 8001966:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001968:	1e06      	subs	r6, r0, #0
 800196a:	d00a      	beq.n	8001982 <HAL_RTC_SetDate+0x86>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800196c:	22ff      	movs	r2, #255	; 0xff
 800196e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001970:	2304      	movs	r3, #4
 8001972:	9a01      	ldr	r2, [sp, #4]
 8001974:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8001976:	2300      	movs	r3, #0
 8001978:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 800197a:	2601      	movs	r6, #1
}
 800197c:	0030      	movs	r0, r6
 800197e:	b005      	add	sp, #20
 8001980:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001982:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8001984:	4812      	ldr	r0, [pc, #72]	; (80019d0 <HAL_RTC_SetDate+0xd4>)
 8001986:	4005      	ands	r5, r0
 8001988:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800198a:	68da      	ldr	r2, [r3, #12]
 800198c:	438a      	bics	r2, r1
 800198e:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	069b      	lsls	r3, r3, #26
 8001994:	d40c      	bmi.n	80019b0 <HAL_RTC_SetDate+0xb4>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001996:	0020      	movs	r0, r4
 8001998:	f7ff fe94 	bl	80016c4 <HAL_RTC_WaitForSynchro>
 800199c:	2800      	cmp	r0, #0
 800199e:	d007      	beq.n	80019b0 <HAL_RTC_SetDate+0xb4>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80019a0:	22ff      	movs	r2, #255	; 0xff
 80019a2:	6823      	ldr	r3, [r4, #0]
 80019a4:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80019a6:	2304      	movs	r3, #4
 80019a8:	9a01      	ldr	r2, [sp, #4]
 80019aa:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 80019ac:	77fe      	strb	r6, [r7, #31]
 80019ae:	e7e4      	b.n	800197a <HAL_RTC_SetDate+0x7e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80019b0:	22ff      	movs	r2, #255	; 0xff
 80019b2:	6823      	ldr	r3, [r4, #0]
 80019b4:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 80019b6:	2301      	movs	r3, #1
 80019b8:	9a01      	ldr	r2, [sp, #4]
 80019ba:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 80019bc:	2300      	movs	r3, #0
 80019be:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 80019c0:	e7dc      	b.n	800197c <HAL_RTC_SetDate+0x80>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80019c2:	0400      	lsls	r0, r0, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80019c4:	021b      	lsls	r3, r3, #8
                  (((uint32_t)sDate->WeekDay) << 13U));
 80019c6:	782d      	ldrb	r5, [r5, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80019c8:	4303      	orrs	r3, r0
                  (((uint32_t)sDate->Month) << 8U) | \
 80019ca:	431e      	orrs	r6, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80019cc:	036d      	lsls	r5, r5, #13
 80019ce:	e7c1      	b.n	8001954 <HAL_RTC_SetDate+0x58>
 80019d0:	00ffff3f 	.word	0x00ffff3f

080019d4 <HAL_RTC_SetAlarm_IT>:
{
 80019d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 80019d6:	1c43      	adds	r3, r0, #1
 80019d8:	9300      	str	r3, [sp, #0]
{
 80019da:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 80019dc:	7fd9      	ldrb	r1, [r3, #31]
 80019de:	2302      	movs	r3, #2
{
 80019e0:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 80019e2:	0018      	movs	r0, r3
 80019e4:	2901      	cmp	r1, #1
 80019e6:	d100      	bne.n	80019ea <HAL_RTC_SetAlarm_IT+0x16>
 80019e8:	e08d      	b.n	8001b06 <HAL_RTC_SetAlarm_IT+0x132>
 80019ea:	2101      	movs	r1, #1
 80019ec:	1860      	adds	r0, r4, r1
 80019ee:	77c1      	strb	r1, [r0, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80019f0:	18e1      	adds	r1, r4, r3
 80019f2:	77cb      	strb	r3, [r1, #31]
 80019f4:	2140      	movs	r1, #64	; 0x40
 80019f6:	6823      	ldr	r3, [r4, #0]
 80019f8:	7828      	ldrb	r0, [r5, #0]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	786e      	ldrb	r6, [r5, #1]
 80019fe:	78af      	ldrb	r7, [r5, #2]
 8001a00:	400b      	ands	r3, r1
  if (Format == RTC_FORMAT_BIN)
 8001a02:	2a00      	cmp	r2, #0
 8001a04:	d15d      	bne.n	8001ac2 <HAL_RTC_SetAlarm_IT+0xee>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d100      	bne.n	8001a0c <HAL_RTC_SetAlarm_IT+0x38>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8001a0a:	70eb      	strb	r3, [r5, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001a0c:	f7ff feec 	bl	80017e8 <RTC_ByteToBcd2>
 8001a10:	9001      	str	r0, [sp, #4]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001a12:	0030      	movs	r0, r6
 8001a14:	f7ff fee8 	bl	80017e8 <RTC_ByteToBcd2>
 8001a18:	0006      	movs	r6, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8001a1a:	0038      	movs	r0, r7
 8001a1c:	f7ff fee4 	bl	80017e8 <RTC_ByteToBcd2>
 8001a20:	0007      	movs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001a22:	1c6b      	adds	r3, r5, #1
 8001a24:	7fd8      	ldrb	r0, [r3, #31]
 8001a26:	f7ff fedf 	bl	80017e8 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001a2a:	696a      	ldr	r2, [r5, #20]
 8001a2c:	69eb      	ldr	r3, [r5, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001a2e:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001a30:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001a32:	78ea      	ldrb	r2, [r5, #3]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001a34:	0600      	lsls	r0, r0, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001a36:	0412      	lsls	r2, r2, #16
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	431f      	orrs	r7, r3
 8001a3c:	9b01      	ldr	r3, [sp, #4]
 8001a3e:	041b      	lsls	r3, r3, #16
 8001a40:	431f      	orrs	r7, r3
 8001a42:	4337      	orrs	r7, r6
 8001a44:	4307      	orrs	r7, r0
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8001a46:	69aa      	ldr	r2, [r5, #24]
 8001a48:	686b      	ldr	r3, [r5, #4]
  if (sAlarm->Alarm == RTC_ALARM_A)
 8001a4a:	6a69      	ldr	r1, [r5, #36]	; 0x24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8001a4c:	4313      	orrs	r3, r2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001a4e:	22ca      	movs	r2, #202	; 0xca
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8001a50:	9301      	str	r3, [sp, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001a52:	6823      	ldr	r3, [r4, #0]
 8001a54:	625a      	str	r2, [r3, #36]	; 0x24
 8001a56:	3a77      	subs	r2, #119	; 0x77
 8001a58:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8001a5a:	32ad      	adds	r2, #173	; 0xad
 8001a5c:	4291      	cmp	r1, r2
 8001a5e:	d153      	bne.n	8001b08 <HAL_RTC_SetAlarm_IT+0x134>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8001a60:	689a      	ldr	r2, [r3, #8]
 8001a62:	493c      	ldr	r1, [pc, #240]	; (8001b54 <HAL_RTC_SetAlarm_IT+0x180>)
 8001a64:	400a      	ands	r2, r1
 8001a66:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8001a68:	68d9      	ldr	r1, [r3, #12]
 8001a6a:	4a3b      	ldr	r2, [pc, #236]	; (8001b58 <HAL_RTC_SetAlarm_IT+0x184>)
 8001a6c:	b2c9      	uxtb	r1, r1
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8001a72:	f7fe fd27 	bl	80004c4 <HAL_GetTick>
 8001a76:	0006      	movs	r6, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8001a78:	2201      	movs	r2, #1
 8001a7a:	6823      	ldr	r3, [r4, #0]
 8001a7c:	68dd      	ldr	r5, [r3, #12]
 8001a7e:	4015      	ands	r5, r2
 8001a80:	d032      	beq.n	8001ae8 <HAL_RTC_SetAlarm_IT+0x114>
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8001a82:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8001a84:	61df      	str	r7, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8001a86:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8001a88:	2280      	movs	r2, #128	; 0x80
 8001a8a:	6899      	ldr	r1, [r3, #8]
 8001a8c:	0052      	lsls	r2, r2, #1
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8001a92:	2280      	movs	r2, #128	; 0x80
 8001a94:	6899      	ldr	r1, [r3, #8]
 8001a96:	0152      	lsls	r2, r2, #5
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8001a9c:	2280      	movs	r2, #128	; 0x80
 8001a9e:	4b2f      	ldr	r3, [pc, #188]	; (8001b5c <HAL_RTC_SetAlarm_IT+0x188>)
 8001aa0:	0292      	lsls	r2, r2, #10
 8001aa2:	6819      	ldr	r1, [r3, #0]
  __HAL_UNLOCK(hrtc);
 8001aa4:	2000      	movs	r0, #0
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8001aa6:	4311      	orrs	r1, r2
 8001aa8:	6019      	str	r1, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8001aaa:	6899      	ldr	r1, [r3, #8]
 8001aac:	430a      	orrs	r2, r1
 8001aae:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001ab0:	22ff      	movs	r2, #255	; 0xff
 8001ab2:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_READY;
 8001ab4:	3402      	adds	r4, #2
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001ab6:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	77e3      	strb	r3, [r4, #31]
  __HAL_UNLOCK(hrtc);
 8001abc:	9b00      	ldr	r3, [sp, #0]
 8001abe:	77d8      	strb	r0, [r3, #31]
  return HAL_OK;
 8001ac0:	e021      	b.n	8001b06 <HAL_RTC_SetAlarm_IT+0x132>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d100      	bne.n	8001ac8 <HAL_RTC_SetAlarm_IT+0xf4>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8001ac6:	70eb      	strb	r3, [r5, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8001ac8:	69eb      	ldr	r3, [r5, #28]
 8001aca:	696a      	ldr	r2, [r5, #20]
 8001acc:	0400      	lsls	r0, r0, #16
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	431f      	orrs	r7, r3
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001ad2:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8001ad4:	4307      	orrs	r7, r0
 8001ad6:	4337      	orrs	r7, r6
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001ad8:	78ee      	ldrb	r6, [r5, #3]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001ada:	1c6b      	adds	r3, r5, #1
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001adc:	0436      	lsls	r6, r6, #16
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8001ade:	4337      	orrs	r7, r6
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001ae0:	7fde      	ldrb	r6, [r3, #31]
 8001ae2:	0636      	lsls	r6, r6, #24
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8001ae4:	4337      	orrs	r7, r6
 8001ae6:	e7ae      	b.n	8001a46 <HAL_RTC_SetAlarm_IT+0x72>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001ae8:	f7fe fcec 	bl	80004c4 <HAL_GetTick>
 8001aec:	23fa      	movs	r3, #250	; 0xfa
 8001aee:	1b80      	subs	r0, r0, r6
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	4298      	cmp	r0, r3
 8001af4:	d9c0      	bls.n	8001a78 <HAL_RTC_SetAlarm_IT+0xa4>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001af6:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001af8:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001afa:	6823      	ldr	r3, [r4, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001afc:	3402      	adds	r4, #2
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001afe:	625a      	str	r2, [r3, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 8001b00:	9b00      	ldr	r3, [sp, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001b02:	77e0      	strb	r0, [r4, #31]
        __HAL_UNLOCK(hrtc);
 8001b04:	77dd      	strb	r5, [r3, #31]
}
 8001b06:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8001b08:	689a      	ldr	r2, [r3, #8]
 8001b0a:	4915      	ldr	r1, [pc, #84]	; (8001b60 <HAL_RTC_SetAlarm_IT+0x18c>)
 8001b0c:	400a      	ands	r2, r1
 8001b0e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8001b10:	68d9      	ldr	r1, [r3, #12]
 8001b12:	4a14      	ldr	r2, [pc, #80]	; (8001b64 <HAL_RTC_SetAlarm_IT+0x190>)
 8001b14:	b2c9      	uxtb	r1, r1
 8001b16:	430a      	orrs	r2, r1
 8001b18:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8001b1a:	f7fe fcd3 	bl	80004c4 <HAL_GetTick>
 8001b1e:	0006      	movs	r6, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8001b20:	2202      	movs	r2, #2
 8001b22:	6823      	ldr	r3, [r4, #0]
 8001b24:	68dd      	ldr	r5, [r3, #12]
 8001b26:	4015      	ands	r5, r2
 8001b28:	d00b      	beq.n	8001b42 <HAL_RTC_SetAlarm_IT+0x16e>
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8001b2a:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8001b2c:	621f      	str	r7, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8001b2e:	649a      	str	r2, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8001b30:	2280      	movs	r2, #128	; 0x80
 8001b32:	6899      	ldr	r1, [r3, #8]
 8001b34:	0092      	lsls	r2, r2, #2
 8001b36:	430a      	orrs	r2, r1
 8001b38:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8001b3a:	2280      	movs	r2, #128	; 0x80
 8001b3c:	6899      	ldr	r1, [r3, #8]
 8001b3e:	0192      	lsls	r2, r2, #6
 8001b40:	e7aa      	b.n	8001a98 <HAL_RTC_SetAlarm_IT+0xc4>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001b42:	f7fe fcbf 	bl	80004c4 <HAL_GetTick>
 8001b46:	23fa      	movs	r3, #250	; 0xfa
 8001b48:	1b80      	subs	r0, r0, r6
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	4298      	cmp	r0, r3
 8001b4e:	d9e7      	bls.n	8001b20 <HAL_RTC_SetAlarm_IT+0x14c>
 8001b50:	e7d1      	b.n	8001af6 <HAL_RTC_SetAlarm_IT+0x122>
 8001b52:	46c0      	nop			; (mov r8, r8)
 8001b54:	fffffeff 	.word	0xfffffeff
 8001b58:	fffffe7f 	.word	0xfffffe7f
 8001b5c:	40010400 	.word	0x40010400
 8001b60:	fffffdff 	.word	0xfffffdff
 8001b64:	fffffd7f 	.word	0xfffffd7f

08001b68 <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8001b68:	4770      	bx	lr
	...

08001b6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b6c:	b570      	push	{r4, r5, r6, lr}
 8001b6e:	0004      	movs	r4, r0
  /* Check the SPI handle allocation */
  if (hspi == NULL)
  {
    return HAL_ERROR;
 8001b70:	2001      	movs	r0, #1
  if (hspi == NULL)
 8001b72:	2c00      	cmp	r4, #0
 8001b74:	d037      	beq.n	8001be6 <HAL_SPI_Init+0x7a>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b76:	2300      	movs	r3, #0
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001b78:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b7a:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001b7c:	3551      	adds	r5, #81	; 0x51
 8001b7e:	782b      	ldrb	r3, [r5, #0]
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d105      	bne.n	8001b92 <HAL_SPI_Init+0x26>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001b86:	0022      	movs	r2, r4
 8001b88:	3250      	adds	r2, #80	; 0x50
 8001b8a:	7013      	strb	r3, [r2, #0]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001b8c:	0020      	movs	r0, r4
 8001b8e:	f000 fda9 	bl	80026e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001b92:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001b94:	2240      	movs	r2, #64	; 0x40
 8001b96:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001b98:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8001b9a:	680b      	ldr	r3, [r1, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001b9c:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8001b9e:	4393      	bics	r3, r2
 8001ba0:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001ba2:	6863      	ldr	r3, [r4, #4]
 8001ba4:	69a2      	ldr	r2, [r4, #24]
 8001ba6:	4303      	orrs	r3, r0
 8001ba8:	68e0      	ldr	r0, [r4, #12]
 8001baa:	4303      	orrs	r3, r0
 8001bac:	6920      	ldr	r0, [r4, #16]
 8001bae:	4303      	orrs	r3, r0
 8001bb0:	6960      	ldr	r0, [r4, #20]
 8001bb2:	4303      	orrs	r3, r0
 8001bb4:	69e0      	ldr	r0, [r4, #28]
 8001bb6:	4303      	orrs	r3, r0
 8001bb8:	6a20      	ldr	r0, [r4, #32]
 8001bba:	4303      	orrs	r3, r0
 8001bbc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001bbe:	4303      	orrs	r3, r0
 8001bc0:	2080      	movs	r0, #128	; 0x80
 8001bc2:	0080      	lsls	r0, r0, #2
 8001bc4:	4010      	ands	r0, r2
 8001bc6:	4303      	orrs	r3, r0
 8001bc8:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001bca:	2304      	movs	r3, #4
 8001bcc:	0c12      	lsrs	r2, r2, #16
 8001bce:	401a      	ands	r2, r3
 8001bd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001bd2:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001bd4:	431a      	orrs	r2, r3
 8001bd6:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001bd8:	69cb      	ldr	r3, [r1, #28]
 8001bda:	4a03      	ldr	r2, [pc, #12]	; (8001be8 <HAL_SPI_Init+0x7c>)
 8001bdc:	4013      	ands	r3, r2
 8001bde:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8001be0:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001be2:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001be4:	702b      	strb	r3, [r5, #0]

  return HAL_OK;
}
 8001be6:	bd70      	pop	{r4, r5, r6, pc}
 8001be8:	fffff7ff 	.word	0xfffff7ff

08001bec <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001bec:	6803      	ldr	r3, [r0, #0]
 8001bee:	4907      	ldr	r1, [pc, #28]	; (8001c0c <UART_EndRxTransfer+0x20>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	400a      	ands	r2, r1
 8001bf4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bf6:	689a      	ldr	r2, [r3, #8]
 8001bf8:	3123      	adds	r1, #35	; 0x23
 8001bfa:	31ff      	adds	r1, #255	; 0xff
 8001bfc:	438a      	bics	r2, r1
 8001bfe:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001c00:	2320      	movs	r3, #32
 8001c02:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	6603      	str	r3, [r0, #96]	; 0x60
}
 8001c08:	4770      	bx	lr
 8001c0a:	46c0      	nop			; (mov r8, r8)
 8001c0c:	fffffedf 	.word	0xfffffedf

08001c10 <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001c10:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8001c12:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001c14:	2b21      	cmp	r3, #33	; 0x21
 8001c16:	d10d      	bne.n	8001c34 <UART_TxISR_16BIT+0x24>
  {
    if (huart->TxXferCount == 0U)
 8001c18:	0001      	movs	r1, r0
 8001c1a:	3152      	adds	r1, #82	; 0x52
 8001c1c:	880a      	ldrh	r2, [r1, #0]
 8001c1e:	6803      	ldr	r3, [r0, #0]
 8001c20:	2a00      	cmp	r2, #0
 8001c22:	d108      	bne.n	8001c36 <UART_TxISR_16BIT+0x26>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001c24:	2180      	movs	r1, #128	; 0x80
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	438a      	bics	r2, r1
 8001c2a:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001c2c:	2240      	movs	r2, #64	; 0x40
 8001c2e:	6819      	ldr	r1, [r3, #0]
 8001c30:	430a      	orrs	r2, r1
 8001c32:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8001c34:	bd10      	pop	{r4, pc}
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001c36:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
      huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8001c38:	8822      	ldrh	r2, [r4, #0]
      huart->pTxBuffPtr += 2U;
 8001c3a:	3402      	adds	r4, #2
      huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8001c3c:	05d2      	lsls	r2, r2, #23
 8001c3e:	0dd2      	lsrs	r2, r2, #23
 8001c40:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8001c42:	64c4      	str	r4, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8001c44:	880b      	ldrh	r3, [r1, #0]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	800b      	strh	r3, [r1, #0]
}
 8001c4c:	e7f2      	b.n	8001c34 <UART_TxISR_16BIT+0x24>

08001c4e <UART_TxISR_8BIT>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001c4e:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8001c50:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001c52:	2b21      	cmp	r3, #33	; 0x21
 8001c54:	d10d      	bne.n	8001c72 <UART_TxISR_8BIT+0x24>
    if (huart->TxXferCount == 0U)
 8001c56:	0001      	movs	r1, r0
 8001c58:	3152      	adds	r1, #82	; 0x52
 8001c5a:	880a      	ldrh	r2, [r1, #0]
 8001c5c:	6803      	ldr	r3, [r0, #0]
 8001c5e:	2a00      	cmp	r2, #0
 8001c60:	d108      	bne.n	8001c74 <UART_TxISR_8BIT+0x26>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001c62:	2180      	movs	r1, #128	; 0x80
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	438a      	bics	r2, r1
 8001c68:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001c6a:	2240      	movs	r2, #64	; 0x40
 8001c6c:	6819      	ldr	r1, [r3, #0]
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	601a      	str	r2, [r3, #0]
}
 8001c72:	bd10      	pop	{r4, pc}
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8001c74:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001c76:	7814      	ldrb	r4, [r2, #0]
      huart->pTxBuffPtr++;
 8001c78:	3201      	adds	r2, #1
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8001c7a:	629c      	str	r4, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8001c7c:	64c2      	str	r2, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8001c7e:	880b      	ldrh	r3, [r1, #0]
 8001c80:	3b01      	subs	r3, #1
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	800b      	strh	r3, [r1, #0]
}
 8001c86:	e7f4      	b.n	8001c72 <UART_TxISR_8BIT+0x24>

08001c88 <HAL_UART_Transmit_IT>:
{
 8001c88:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 8001c8a:	6f44      	ldr	r4, [r0, #116]	; 0x74
{
 8001c8c:	0003      	movs	r3, r0
    return HAL_BUSY;
 8001c8e:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8001c90:	2c20      	cmp	r4, #32
 8001c92:	d130      	bne.n	8001cf6 <HAL_UART_Transmit_IT+0x6e>
      return HAL_ERROR;
 8001c94:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8001c96:	2900      	cmp	r1, #0
 8001c98:	d02d      	beq.n	8001cf6 <HAL_UART_Transmit_IT+0x6e>
 8001c9a:	2a00      	cmp	r2, #0
 8001c9c:	d02b      	beq.n	8001cf6 <HAL_UART_Transmit_IT+0x6e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c9e:	2480      	movs	r4, #128	; 0x80
 8001ca0:	689d      	ldr	r5, [r3, #8]
 8001ca2:	0164      	lsls	r4, r4, #5
 8001ca4:	42a5      	cmp	r5, r4
 8001ca6:	d104      	bne.n	8001cb2 <HAL_UART_Transmit_IT+0x2a>
 8001ca8:	691c      	ldr	r4, [r3, #16]
 8001caa:	2c00      	cmp	r4, #0
 8001cac:	d101      	bne.n	8001cb2 <HAL_UART_Transmit_IT+0x2a>
      if ((((uint32_t)pData) & 1) != 0)
 8001cae:	4201      	tst	r1, r0
 8001cb0:	d121      	bne.n	8001cf6 <HAL_UART_Transmit_IT+0x6e>
    __HAL_LOCK(huart);
 8001cb2:	001c      	movs	r4, r3
 8001cb4:	3470      	adds	r4, #112	; 0x70
 8001cb6:	7826      	ldrb	r6, [r4, #0]
    return HAL_BUSY;
 8001cb8:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8001cba:	2e01      	cmp	r6, #1
 8001cbc:	d01b      	beq.n	8001cf6 <HAL_UART_Transmit_IT+0x6e>
 8001cbe:	3801      	subs	r0, #1
 8001cc0:	7020      	strb	r0, [r4, #0]
    huart->pTxBuffPtr  = pData;
 8001cc2:	64d9      	str	r1, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8001cc4:	0019      	movs	r1, r3
 8001cc6:	3150      	adds	r1, #80	; 0x50
 8001cc8:	800a      	strh	r2, [r1, #0]
    huart->TxXferCount = Size;
 8001cca:	804a      	strh	r2, [r1, #2]
    huart->TxISR       = NULL;
 8001ccc:	2200      	movs	r2, #0
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cce:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->TxISR       = NULL;
 8001cd0:	665a      	str	r2, [r3, #100]	; 0x64
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001cd2:	3221      	adds	r2, #33	; 0x21
 8001cd4:	675a      	str	r2, [r3, #116]	; 0x74
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cd6:	2280      	movs	r2, #128	; 0x80
 8001cd8:	0152      	lsls	r2, r2, #5
 8001cda:	4295      	cmp	r5, r2
 8001cdc:	d10c      	bne.n	8001cf8 <HAL_UART_Transmit_IT+0x70>
 8001cde:	691a      	ldr	r2, [r3, #16]
 8001ce0:	2a00      	cmp	r2, #0
 8001ce2:	d109      	bne.n	8001cf8 <HAL_UART_Transmit_IT+0x70>
      huart->TxISR = UART_TxISR_16BIT;
 8001ce4:	4a05      	ldr	r2, [pc, #20]	; (8001cfc <HAL_UART_Transmit_IT+0x74>)
      huart->TxISR = UART_TxISR_8BIT;
 8001ce6:	665a      	str	r2, [r3, #100]	; 0x64
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	2380      	movs	r3, #128	; 0x80
    __HAL_UNLOCK(huart);
 8001cec:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001cee:	6811      	ldr	r1, [r2, #0]
    __HAL_UNLOCK(huart);
 8001cf0:	7020      	strb	r0, [r4, #0]
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001cf2:	430b      	orrs	r3, r1
 8001cf4:	6013      	str	r3, [r2, #0]
}
 8001cf6:	bd70      	pop	{r4, r5, r6, pc}
      huart->TxISR = UART_TxISR_8BIT;
 8001cf8:	4a01      	ldr	r2, [pc, #4]	; (8001d00 <HAL_UART_Transmit_IT+0x78>)
 8001cfa:	e7f4      	b.n	8001ce6 <HAL_UART_Transmit_IT+0x5e>
 8001cfc:	08001c11 	.word	0x08001c11
 8001d00:	08001c4f 	.word	0x08001c4f

08001d04 <HAL_UART_TxCpltCallback>:
 8001d04:	4770      	bx	lr

08001d06 <HAL_UART_ErrorCallback>:
 8001d06:	4770      	bx	lr

08001d08 <HAL_UART_IRQHandler>:
{
 8001d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001d0a:	6803      	ldr	r3, [r0, #0]
{
 8001d0c:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001d0e:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d10:	6818      	ldr	r0, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001d12:	689e      	ldr	r6, [r3, #8]
  if (errorflags == 0U)
 8001d14:	0711      	lsls	r1, r2, #28
 8001d16:	d10a      	bne.n	8001d2e <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001d18:	2120      	movs	r1, #32
 8001d1a:	420a      	tst	r2, r1
 8001d1c:	d100      	bne.n	8001d20 <HAL_UART_IRQHandler+0x18>
 8001d1e:	e06a      	b.n	8001df6 <HAL_UART_IRQHandler+0xee>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001d20:	4208      	tst	r0, r1
 8001d22:	d068      	beq.n	8001df6 <HAL_UART_IRQHandler+0xee>
      if (huart->RxISR != NULL)
 8001d24:	6e23      	ldr	r3, [r4, #96]	; 0x60
      huart->TxISR(huart);
 8001d26:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d15a      	bne.n	8001de2 <HAL_UART_IRQHandler+0xda>
 8001d2c:	e05a      	b.n	8001de4 <HAL_UART_IRQHandler+0xdc>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001d2e:	2101      	movs	r1, #1
 8001d30:	0035      	movs	r5, r6
 8001d32:	400d      	ands	r5, r1
 8001d34:	d103      	bne.n	8001d3e <HAL_UART_IRQHandler+0x36>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8001d36:	2790      	movs	r7, #144	; 0x90
 8001d38:	007f      	lsls	r7, r7, #1
 8001d3a:	4238      	tst	r0, r7
 8001d3c:	d05b      	beq.n	8001df6 <HAL_UART_IRQHandler+0xee>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001d3e:	420a      	tst	r2, r1
 8001d40:	d005      	beq.n	8001d4e <HAL_UART_IRQHandler+0x46>
 8001d42:	05c6      	lsls	r6, r0, #23
 8001d44:	d503      	bpl.n	8001d4e <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001d46:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001d48:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8001d4a:	4331      	orrs	r1, r6
 8001d4c:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001d4e:	2102      	movs	r1, #2
 8001d50:	420a      	tst	r2, r1
 8001d52:	d006      	beq.n	8001d62 <HAL_UART_IRQHandler+0x5a>
 8001d54:	2d00      	cmp	r5, #0
 8001d56:	d004      	beq.n	8001d62 <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001d58:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001d5a:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8001d5c:	1849      	adds	r1, r1, r1
 8001d5e:	4331      	orrs	r1, r6
 8001d60:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001d62:	2104      	movs	r1, #4
 8001d64:	420a      	tst	r2, r1
 8001d66:	d006      	beq.n	8001d76 <HAL_UART_IRQHandler+0x6e>
 8001d68:	2d00      	cmp	r5, #0
 8001d6a:	d004      	beq.n	8001d76 <HAL_UART_IRQHandler+0x6e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001d6c:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001d6e:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8001d70:	3902      	subs	r1, #2
 8001d72:	4331      	orrs	r1, r6
 8001d74:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001d76:	0711      	lsls	r1, r2, #28
 8001d78:	d508      	bpl.n	8001d8c <HAL_UART_IRQHandler+0x84>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001d7a:	0681      	lsls	r1, r0, #26
 8001d7c:	d401      	bmi.n	8001d82 <HAL_UART_IRQHandler+0x7a>
 8001d7e:	2d00      	cmp	r5, #0
 8001d80:	d004      	beq.n	8001d8c <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001d82:	2108      	movs	r1, #8
 8001d84:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001d86:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001d88:	4319      	orrs	r1, r3
 8001d8a:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001d8c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d028      	beq.n	8001de4 <HAL_UART_IRQHandler+0xdc>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001d92:	2320      	movs	r3, #32
 8001d94:	421a      	tst	r2, r3
 8001d96:	d006      	beq.n	8001da6 <HAL_UART_IRQHandler+0x9e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001d98:	4218      	tst	r0, r3
 8001d9a:	d004      	beq.n	8001da6 <HAL_UART_IRQHandler+0x9e>
        if (huart->RxISR != NULL)
 8001d9c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <HAL_UART_IRQHandler+0x9e>
          huart->RxISR(huart);
 8001da2:	0020      	movs	r0, r4
 8001da4:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001da6:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8001da8:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001daa:	689b      	ldr	r3, [r3, #8]
        UART_EndRxTransfer(huart);
 8001dac:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001dae:	065b      	lsls	r3, r3, #25
 8001db0:	d402      	bmi.n	8001db8 <HAL_UART_IRQHandler+0xb0>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8001db2:	2308      	movs	r3, #8
 8001db4:	401d      	ands	r5, r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001db6:	d01a      	beq.n	8001dee <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 8001db8:	f7ff ff18 	bl	8001bec <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001dbc:	2140      	movs	r1, #64	; 0x40
 8001dbe:	6823      	ldr	r3, [r4, #0]
 8001dc0:	689a      	ldr	r2, [r3, #8]
 8001dc2:	420a      	tst	r2, r1
 8001dc4:	d00f      	beq.n	8001de6 <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001dc6:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8001dc8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001dca:	438a      	bics	r2, r1
 8001dcc:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8001dce:	2800      	cmp	r0, #0
 8001dd0:	d009      	beq.n	8001de6 <HAL_UART_IRQHandler+0xde>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001dd2:	4b1a      	ldr	r3, [pc, #104]	; (8001e3c <HAL_UART_IRQHandler+0x134>)
 8001dd4:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001dd6:	f7fe fbcf 	bl	8000578 <HAL_DMA_Abort_IT>
 8001dda:	2800      	cmp	r0, #0
 8001ddc:	d002      	beq.n	8001de4 <HAL_UART_IRQHandler+0xdc>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001dde:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001de0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001de2:	4798      	blx	r3
}
 8001de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8001de6:	0020      	movs	r0, r4
 8001de8:	f7ff ff8d 	bl	8001d06 <HAL_UART_ErrorCallback>
 8001dec:	e7fa      	b.n	8001de4 <HAL_UART_IRQHandler+0xdc>
        HAL_UART_ErrorCallback(huart);
 8001dee:	f7ff ff8a 	bl	8001d06 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001df2:	67e5      	str	r5, [r4, #124]	; 0x7c
 8001df4:	e7f6      	b.n	8001de4 <HAL_UART_IRQHandler+0xdc>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8001df6:	2180      	movs	r1, #128	; 0x80
 8001df8:	0349      	lsls	r1, r1, #13
 8001dfa:	420a      	tst	r2, r1
 8001dfc:	d006      	beq.n	8001e0c <HAL_UART_IRQHandler+0x104>
 8001dfe:	0275      	lsls	r5, r6, #9
 8001e00:	d504      	bpl.n	8001e0c <HAL_UART_IRQHandler+0x104>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8001e02:	6219      	str	r1, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8001e04:	0020      	movs	r0, r4
 8001e06:	f000 fa51 	bl	80022ac <HAL_UARTEx_WakeupCallback>
    return;
 8001e0a:	e7eb      	b.n	8001de4 <HAL_UART_IRQHandler+0xdc>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8001e0c:	2180      	movs	r1, #128	; 0x80
 8001e0e:	420a      	tst	r2, r1
 8001e10:	d003      	beq.n	8001e1a <HAL_UART_IRQHandler+0x112>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8001e12:	4208      	tst	r0, r1
 8001e14:	d001      	beq.n	8001e1a <HAL_UART_IRQHandler+0x112>
    if (huart->TxISR != NULL)
 8001e16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001e18:	e785      	b.n	8001d26 <HAL_UART_IRQHandler+0x1e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001e1a:	2140      	movs	r1, #64	; 0x40
 8001e1c:	420a      	tst	r2, r1
 8001e1e:	d0e1      	beq.n	8001de4 <HAL_UART_IRQHandler+0xdc>
 8001e20:	4208      	tst	r0, r1
 8001e22:	d0df      	beq.n	8001de4 <HAL_UART_IRQHandler+0xdc>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001e24:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001e26:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001e28:	438a      	bics	r2, r1
 8001e2a:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8001e2c:	2320      	movs	r3, #32
 8001e2e:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	6663      	str	r3, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 8001e34:	f7ff ff66 	bl	8001d04 <HAL_UART_TxCpltCallback>
 8001e38:	e7d4      	b.n	8001de4 <HAL_UART_IRQHandler+0xdc>
 8001e3a:	46c0      	nop			; (mov r8, r8)
 8001e3c:	08001e41 	.word	0x08001e41

08001e40 <UART_DMAAbortOnError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001e40:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	0002      	movs	r2, r0
{
 8001e46:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8001e48:	325a      	adds	r2, #90	; 0x5a
 8001e4a:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8001e4c:	3a08      	subs	r2, #8
 8001e4e:	8013      	strh	r3, [r2, #0]
  HAL_UART_ErrorCallback(huart);
 8001e50:	f7ff ff59 	bl	8001d06 <HAL_UART_ErrorCallback>
}
 8001e54:	bd10      	pop	{r4, pc}
	...

08001e58 <UART_SetConfig>:
{
 8001e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e5a:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e5c:	6925      	ldr	r5, [r4, #16]
 8001e5e:	68a2      	ldr	r2, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8001e60:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e62:	432a      	orrs	r2, r5
 8001e64:	6965      	ldr	r5, [r4, #20]
 8001e66:	69c1      	ldr	r1, [r0, #28]
 8001e68:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001e6a:	6818      	ldr	r0, [r3, #0]
 8001e6c:	4d81      	ldr	r5, [pc, #516]	; (8002074 <UART_SetConfig+0x21c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e6e:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001e70:	4028      	ands	r0, r5
 8001e72:	4302      	orrs	r2, r0
 8001e74:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	487f      	ldr	r0, [pc, #508]	; (8002078 <UART_SetConfig+0x220>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001e7a:	4d80      	ldr	r5, [pc, #512]	; (800207c <UART_SetConfig+0x224>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e7c:	4002      	ands	r2, r0
 8001e7e:	68e0      	ldr	r0, [r4, #12]
 8001e80:	4302      	orrs	r2, r0
 8001e82:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001e84:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001e86:	42ab      	cmp	r3, r5
 8001e88:	d001      	beq.n	8001e8e <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 8001e8a:	6a22      	ldr	r2, [r4, #32]
 8001e8c:	4310      	orrs	r0, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	4e7b      	ldr	r6, [pc, #492]	; (8002080 <UART_SetConfig+0x228>)
 8001e92:	4032      	ands	r2, r6
 8001e94:	4302      	orrs	r2, r0
 8001e96:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e98:	4a7a      	ldr	r2, [pc, #488]	; (8002084 <UART_SetConfig+0x22c>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d113      	bne.n	8001ec6 <UART_SetConfig+0x6e>
 8001e9e:	2203      	movs	r2, #3
 8001ea0:	4b79      	ldr	r3, [pc, #484]	; (8002088 <UART_SetConfig+0x230>)
 8001ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	4a79      	ldr	r2, [pc, #484]	; (800208c <UART_SetConfig+0x234>)
 8001ea8:	5cd0      	ldrb	r0, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001eaa:	2380      	movs	r3, #128	; 0x80
 8001eac:	021b      	lsls	r3, r3, #8
 8001eae:	4299      	cmp	r1, r3
 8001eb0:	d100      	bne.n	8001eb4 <UART_SetConfig+0x5c>
 8001eb2:	e0d1      	b.n	8002058 <UART_SetConfig+0x200>
    switch (clocksource)
 8001eb4:	2808      	cmp	r0, #8
 8001eb6:	d826      	bhi.n	8001f06 <UART_SetConfig+0xae>
 8001eb8:	f7fe f926 	bl	8000108 <__gnu_thumb1_case_uqi>
 8001ebc:	259996c0 	.word	0x259996c0
 8001ec0:	252525b4 	.word	0x252525b4
 8001ec4:	b7          	.byte	0xb7
 8001ec5:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001ec6:	4a72      	ldr	r2, [pc, #456]	; (8002090 <UART_SetConfig+0x238>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d105      	bne.n	8001ed8 <UART_SetConfig+0x80>
 8001ecc:	220c      	movs	r2, #12
 8001ece:	4b6e      	ldr	r3, [pc, #440]	; (8002088 <UART_SetConfig+0x230>)
 8001ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	4a6f      	ldr	r2, [pc, #444]	; (8002094 <UART_SetConfig+0x23c>)
 8001ed6:	e7e7      	b.n	8001ea8 <UART_SetConfig+0x50>
 8001ed8:	4a6f      	ldr	r2, [pc, #444]	; (8002098 <UART_SetConfig+0x240>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d100      	bne.n	8001ee0 <UART_SetConfig+0x88>
 8001ede:	e0a9      	b.n	8002034 <UART_SetConfig+0x1dc>
 8001ee0:	4a6e      	ldr	r2, [pc, #440]	; (800209c <UART_SetConfig+0x244>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d100      	bne.n	8001ee8 <UART_SetConfig+0x90>
 8001ee6:	e0a5      	b.n	8002034 <UART_SetConfig+0x1dc>
 8001ee8:	42ab      	cmp	r3, r5
 8001eea:	d000      	beq.n	8001eee <UART_SetConfig+0x96>
 8001eec:	e0ad      	b.n	800204a <UART_SetConfig+0x1f2>
 8001eee:	21c0      	movs	r1, #192	; 0xc0
 8001ef0:	2080      	movs	r0, #128	; 0x80
 8001ef2:	4a65      	ldr	r2, [pc, #404]	; (8002088 <UART_SetConfig+0x230>)
 8001ef4:	0109      	lsls	r1, r1, #4
 8001ef6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001ef8:	00c0      	lsls	r0, r0, #3
 8001efa:	400b      	ands	r3, r1
 8001efc:	4283      	cmp	r3, r0
 8001efe:	d038      	beq.n	8001f72 <UART_SetConfig+0x11a>
 8001f00:	d803      	bhi.n	8001f0a <UART_SetConfig+0xb2>
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00a      	beq.n	8001f1c <UART_SetConfig+0xc4>
        ret = HAL_ERROR;
 8001f06:	2501      	movs	r5, #1
 8001f08:	e00d      	b.n	8001f26 <UART_SetConfig+0xce>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001f0a:	2080      	movs	r0, #128	; 0x80
 8001f0c:	0100      	lsls	r0, r0, #4
 8001f0e:	4283      	cmp	r3, r0
 8001f10:	d00e      	beq.n	8001f30 <UART_SetConfig+0xd8>
 8001f12:	428b      	cmp	r3, r1
 8001f14:	d1f7      	bne.n	8001f06 <UART_SetConfig+0xae>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8001f16:	2080      	movs	r0, #128	; 0x80
 8001f18:	0200      	lsls	r0, r0, #8
 8001f1a:	e00d      	b.n	8001f38 <UART_SetConfig+0xe0>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8001f1c:	f7ff faa4 	bl	8001468 <HAL_RCC_GetPCLK1Freq>
 8001f20:	2500      	movs	r5, #0
    if (lpuart_ker_ck_pres != 0U)
 8001f22:	42a8      	cmp	r0, r5
 8001f24:	d108      	bne.n	8001f38 <UART_SetConfig+0xe0>
  huart->RxISR = NULL;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	0028      	movs	r0, r5
  huart->RxISR = NULL;
 8001f2a:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001f2c:	6663      	str	r3, [r4, #100]	; 0x64
}
 8001f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f30:	6813      	ldr	r3, [r2, #0]
 8001f32:	06db      	lsls	r3, r3, #27
 8001f34:	d520      	bpl.n	8001f78 <UART_SetConfig+0x120>
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8001f36:	485a      	ldr	r0, [pc, #360]	; (80020a0 <UART_SetConfig+0x248>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001f38:	2203      	movs	r2, #3
 8001f3a:	6863      	ldr	r3, [r4, #4]
 8001f3c:	435a      	muls	r2, r3
 8001f3e:	4282      	cmp	r2, r0
 8001f40:	d8e1      	bhi.n	8001f06 <UART_SetConfig+0xae>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8001f42:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001f44:	4282      	cmp	r2, r0
 8001f46:	d3de      	bcc.n	8001f06 <UART_SetConfig+0xae>
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8001f48:	2700      	movs	r7, #0
 8001f4a:	0e02      	lsrs	r2, r0, #24
 8001f4c:	0201      	lsls	r1, r0, #8
 8001f4e:	085e      	lsrs	r6, r3, #1
 8001f50:	1989      	adds	r1, r1, r6
 8001f52:	417a      	adcs	r2, r7
 8001f54:	0008      	movs	r0, r1
 8001f56:	0011      	movs	r1, r2
 8001f58:	001a      	movs	r2, r3
 8001f5a:	003b      	movs	r3, r7
 8001f5c:	f7fe f974 	bl	8000248 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001f60:	4b50      	ldr	r3, [pc, #320]	; (80020a4 <UART_SetConfig+0x24c>)
 8001f62:	18c2      	adds	r2, r0, r3
 8001f64:	4b50      	ldr	r3, [pc, #320]	; (80020a8 <UART_SetConfig+0x250>)
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d8cd      	bhi.n	8001f06 <UART_SetConfig+0xae>
          huart->Instance->BRR = usartdiv;
 8001f6a:	6823      	ldr	r3, [r4, #0]
 8001f6c:	003d      	movs	r5, r7
 8001f6e:	60d8      	str	r0, [r3, #12]
 8001f70:	e7d9      	b.n	8001f26 <UART_SetConfig+0xce>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8001f72:	f7fe fef9 	bl	8000d68 <HAL_RCC_GetSysClockFreq>
        break;
 8001f76:	e7d3      	b.n	8001f20 <UART_SetConfig+0xc8>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8001f78:	484c      	ldr	r0, [pc, #304]	; (80020ac <UART_SetConfig+0x254>)
 8001f7a:	e7dd      	b.n	8001f38 <UART_SetConfig+0xe0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001f7c:	f7ff fa74 	bl	8001468 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001f80:	6863      	ldr	r3, [r4, #4]
 8001f82:	0040      	lsls	r0, r0, #1
 8001f84:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001f86:	18c0      	adds	r0, r0, r3
 8001f88:	6861      	ldr	r1, [r4, #4]
 8001f8a:	e00b      	b.n	8001fa4 <UART_SetConfig+0x14c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001f8c:	f7ff fa7c 	bl	8001488 <HAL_RCC_GetPCLK2Freq>
 8001f90:	e7f6      	b.n	8001f80 <UART_SetConfig+0x128>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f92:	2510      	movs	r5, #16
 8001f94:	4b3c      	ldr	r3, [pc, #240]	; (8002088 <UART_SetConfig+0x230>)
 8001f96:	6861      	ldr	r1, [r4, #4]
 8001f98:	681a      	ldr	r2, [r3, #0]
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8001f9a:	0848      	lsrs	r0, r1, #1
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f9c:	4015      	ands	r5, r2
 8001f9e:	d006      	beq.n	8001fae <UART_SetConfig+0x156>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8001fa0:	4b43      	ldr	r3, [pc, #268]	; (80020b0 <UART_SetConfig+0x258>)
 8001fa2:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001fa4:	f7fe f8c4 	bl	8000130 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 8001fa8:	2500      	movs	r5, #0
 8001faa:	b283      	uxth	r3, r0
        break;
 8001fac:	e004      	b.n	8001fb8 <UART_SetConfig+0x160>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001fae:	4b41      	ldr	r3, [pc, #260]	; (80020b4 <UART_SetConfig+0x25c>)
 8001fb0:	18c0      	adds	r0, r0, r3
 8001fb2:	f7fe f8bd 	bl	8000130 <__udivsi3>
 8001fb6:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001fb8:	0019      	movs	r1, r3
 8001fba:	483f      	ldr	r0, [pc, #252]	; (80020b8 <UART_SetConfig+0x260>)
 8001fbc:	3910      	subs	r1, #16
 8001fbe:	4281      	cmp	r1, r0
 8001fc0:	d8a1      	bhi.n	8001f06 <UART_SetConfig+0xae>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001fc2:	210f      	movs	r1, #15
 8001fc4:	0018      	movs	r0, r3
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001fc6:	071b      	lsls	r3, r3, #28
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001fc8:	4388      	bics	r0, r1
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001fca:	0f5b      	lsrs	r3, r3, #29
      huart->Instance->BRR = brrtemp;
 8001fcc:	6821      	ldr	r1, [r4, #0]
 8001fce:	4303      	orrs	r3, r0
      huart->Instance->BRR = usartdiv;
 8001fd0:	60cb      	str	r3, [r1, #12]
 8001fd2:	e7a8      	b.n	8001f26 <UART_SetConfig+0xce>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001fd4:	f7fe fec8 	bl	8000d68 <HAL_RCC_GetSysClockFreq>
 8001fd8:	e7d2      	b.n	8001f80 <UART_SetConfig+0x128>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001fda:	6863      	ldr	r3, [r4, #4]
 8001fdc:	0858      	lsrs	r0, r3, #1
 8001fde:	2380      	movs	r3, #128	; 0x80
 8001fe0:	025b      	lsls	r3, r3, #9
 8001fe2:	e7d0      	b.n	8001f86 <UART_SetConfig+0x12e>
  uint32_t usartdiv                   = 0x00000000U;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	e7e7      	b.n	8001fb8 <UART_SetConfig+0x160>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001fe8:	f7ff fa4e 	bl	8001488 <HAL_RCC_GetPCLK2Freq>
 8001fec:	e028      	b.n	8002040 <UART_SetConfig+0x1e8>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001fee:	2510      	movs	r5, #16
 8001ff0:	4b25      	ldr	r3, [pc, #148]	; (8002088 <UART_SetConfig+0x230>)
 8001ff2:	6861      	ldr	r1, [r4, #4]
 8001ff4:	681a      	ldr	r2, [r3, #0]
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8001ff6:	0848      	lsrs	r0, r1, #1
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001ff8:	4015      	ands	r5, r2
 8001ffa:	d006      	beq.n	800200a <UART_SetConfig+0x1b2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8001ffc:	4b28      	ldr	r3, [pc, #160]	; (80020a0 <UART_SetConfig+0x248>)
 8001ffe:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002000:	f7fe f896 	bl	8000130 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 8002004:	2500      	movs	r5, #0
 8002006:	b283      	uxth	r3, r0
        break;
 8002008:	e004      	b.n	8002014 <UART_SetConfig+0x1bc>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800200a:	4b28      	ldr	r3, [pc, #160]	; (80020ac <UART_SetConfig+0x254>)
 800200c:	18c0      	adds	r0, r0, r3
 800200e:	f7fe f88f 	bl	8000130 <__udivsi3>
 8002012:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002014:	0019      	movs	r1, r3
 8002016:	4828      	ldr	r0, [pc, #160]	; (80020b8 <UART_SetConfig+0x260>)
 8002018:	3910      	subs	r1, #16
 800201a:	4281      	cmp	r1, r0
 800201c:	d900      	bls.n	8002020 <UART_SetConfig+0x1c8>
 800201e:	e772      	b.n	8001f06 <UART_SetConfig+0xae>
      huart->Instance->BRR = usartdiv;
 8002020:	6821      	ldr	r1, [r4, #0]
 8002022:	e7d5      	b.n	8001fd0 <UART_SetConfig+0x178>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002024:	f7fe fea0 	bl	8000d68 <HAL_RCC_GetSysClockFreq>
 8002028:	e00a      	b.n	8002040 <UART_SetConfig+0x1e8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800202a:	6863      	ldr	r3, [r4, #4]
 800202c:	0858      	lsrs	r0, r3, #1
 800202e:	2380      	movs	r3, #128	; 0x80
 8002030:	021b      	lsls	r3, r3, #8
 8002032:	e007      	b.n	8002044 <UART_SetConfig+0x1ec>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002034:	2380      	movs	r3, #128	; 0x80
 8002036:	021b      	lsls	r3, r3, #8
 8002038:	4299      	cmp	r1, r3
 800203a:	d09f      	beq.n	8001f7c <UART_SetConfig+0x124>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800203c:	f7ff fa14 	bl	8001468 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002040:	6863      	ldr	r3, [r4, #4]
 8002042:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002044:	18c0      	adds	r0, r0, r3
 8002046:	6861      	ldr	r1, [r4, #4]
 8002048:	e7da      	b.n	8002000 <UART_SetConfig+0x1a8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800204a:	2380      	movs	r3, #128	; 0x80
        ret = HAL_ERROR;
 800204c:	2501      	movs	r5, #1
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800204e:	021b      	lsls	r3, r3, #8
 8002050:	4299      	cmp	r1, r3
 8002052:	d0c7      	beq.n	8001fe4 <UART_SetConfig+0x18c>
  uint32_t usartdiv                   = 0x00000000U;
 8002054:	2300      	movs	r3, #0
 8002056:	e7dd      	b.n	8002014 <UART_SetConfig+0x1bc>
    switch (clocksource)
 8002058:	2808      	cmp	r0, #8
 800205a:	d900      	bls.n	800205e <UART_SetConfig+0x206>
 800205c:	e753      	b.n	8001f06 <UART_SetConfig+0xae>
 800205e:	f7fe f85d 	bl	800011c <__gnu_thumb1_case_shi>
 8002062:	ff8d      	.short	0xff8d
 8002064:	ff98ff95 	.word	0xff98ff95
 8002068:	ffb9ff52 	.word	0xffb9ff52
 800206c:	ff52ff52 	.word	0xff52ff52
 8002070:	ffbcff52 	.word	0xffbcff52
 8002074:	efff69f3 	.word	0xefff69f3
 8002078:	ffffcfff 	.word	0xffffcfff
 800207c:	40004800 	.word	0x40004800
 8002080:	fffff4ff 	.word	0xfffff4ff
 8002084:	40013800 	.word	0x40013800
 8002088:	40021000 	.word	0x40021000
 800208c:	0800297c 	.word	0x0800297c
 8002090:	40004400 	.word	0x40004400
 8002094:	08002980 	.word	0x08002980
 8002098:	40004c00 	.word	0x40004c00
 800209c:	40005000 	.word	0x40005000
 80020a0:	003d0900 	.word	0x003d0900
 80020a4:	fffffd00 	.word	0xfffffd00
 80020a8:	000ffcff 	.word	0x000ffcff
 80020ac:	00f42400 	.word	0x00f42400
 80020b0:	007a1200 	.word	0x007a1200
 80020b4:	01e84800 	.word	0x01e84800
 80020b8:	0000ffef 	.word	0x0000ffef

080020bc <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80020bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80020be:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80020c0:	07da      	lsls	r2, r3, #31
 80020c2:	d506      	bpl.n	80020d2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80020c4:	6801      	ldr	r1, [r0, #0]
 80020c6:	4c28      	ldr	r4, [pc, #160]	; (8002168 <UART_AdvFeatureConfig+0xac>)
 80020c8:	684a      	ldr	r2, [r1, #4]
 80020ca:	4022      	ands	r2, r4
 80020cc:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80020ce:	4322      	orrs	r2, r4
 80020d0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80020d2:	079a      	lsls	r2, r3, #30
 80020d4:	d506      	bpl.n	80020e4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80020d6:	6801      	ldr	r1, [r0, #0]
 80020d8:	4c24      	ldr	r4, [pc, #144]	; (800216c <UART_AdvFeatureConfig+0xb0>)
 80020da:	684a      	ldr	r2, [r1, #4]
 80020dc:	4022      	ands	r2, r4
 80020de:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80020e0:	4322      	orrs	r2, r4
 80020e2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80020e4:	075a      	lsls	r2, r3, #29
 80020e6:	d506      	bpl.n	80020f6 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80020e8:	6801      	ldr	r1, [r0, #0]
 80020ea:	4c21      	ldr	r4, [pc, #132]	; (8002170 <UART_AdvFeatureConfig+0xb4>)
 80020ec:	684a      	ldr	r2, [r1, #4]
 80020ee:	4022      	ands	r2, r4
 80020f0:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80020f2:	4322      	orrs	r2, r4
 80020f4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80020f6:	071a      	lsls	r2, r3, #28
 80020f8:	d506      	bpl.n	8002108 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80020fa:	6801      	ldr	r1, [r0, #0]
 80020fc:	4c1d      	ldr	r4, [pc, #116]	; (8002174 <UART_AdvFeatureConfig+0xb8>)
 80020fe:	684a      	ldr	r2, [r1, #4]
 8002100:	4022      	ands	r2, r4
 8002102:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002104:	4322      	orrs	r2, r4
 8002106:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002108:	06da      	lsls	r2, r3, #27
 800210a:	d506      	bpl.n	800211a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800210c:	6801      	ldr	r1, [r0, #0]
 800210e:	4c1a      	ldr	r4, [pc, #104]	; (8002178 <UART_AdvFeatureConfig+0xbc>)
 8002110:	688a      	ldr	r2, [r1, #8]
 8002112:	4022      	ands	r2, r4
 8002114:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002116:	4322      	orrs	r2, r4
 8002118:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800211a:	069a      	lsls	r2, r3, #26
 800211c:	d506      	bpl.n	800212c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800211e:	6801      	ldr	r1, [r0, #0]
 8002120:	4c16      	ldr	r4, [pc, #88]	; (800217c <UART_AdvFeatureConfig+0xc0>)
 8002122:	688a      	ldr	r2, [r1, #8]
 8002124:	4022      	ands	r2, r4
 8002126:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002128:	4322      	orrs	r2, r4
 800212a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800212c:	065a      	lsls	r2, r3, #25
 800212e:	d510      	bpl.n	8002152 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002130:	6801      	ldr	r1, [r0, #0]
 8002132:	4d13      	ldr	r5, [pc, #76]	; (8002180 <UART_AdvFeatureConfig+0xc4>)
 8002134:	684a      	ldr	r2, [r1, #4]
 8002136:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002138:	402a      	ands	r2, r5
 800213a:	4322      	orrs	r2, r4
 800213c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800213e:	2280      	movs	r2, #128	; 0x80
 8002140:	0352      	lsls	r2, r2, #13
 8002142:	4294      	cmp	r4, r2
 8002144:	d105      	bne.n	8002152 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002146:	684a      	ldr	r2, [r1, #4]
 8002148:	4c0e      	ldr	r4, [pc, #56]	; (8002184 <UART_AdvFeatureConfig+0xc8>)
 800214a:	4022      	ands	r2, r4
 800214c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800214e:	4322      	orrs	r2, r4
 8002150:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002152:	061b      	lsls	r3, r3, #24
 8002154:	d506      	bpl.n	8002164 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002156:	6802      	ldr	r2, [r0, #0]
 8002158:	490b      	ldr	r1, [pc, #44]	; (8002188 <UART_AdvFeatureConfig+0xcc>)
 800215a:	6853      	ldr	r3, [r2, #4]
 800215c:	400b      	ands	r3, r1
 800215e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002160:	430b      	orrs	r3, r1
 8002162:	6053      	str	r3, [r2, #4]
}
 8002164:	bd30      	pop	{r4, r5, pc}
 8002166:	46c0      	nop			; (mov r8, r8)
 8002168:	fffdffff 	.word	0xfffdffff
 800216c:	fffeffff 	.word	0xfffeffff
 8002170:	fffbffff 	.word	0xfffbffff
 8002174:	ffff7fff 	.word	0xffff7fff
 8002178:	ffffefff 	.word	0xffffefff
 800217c:	ffffdfff 	.word	0xffffdfff
 8002180:	ffefffff 	.word	0xffefffff
 8002184:	ff9fffff 	.word	0xff9fffff
 8002188:	fff7ffff 	.word	0xfff7ffff

0800218c <UART_WaitOnFlagUntilTimeout>:
{
 800218c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800218e:	0004      	movs	r4, r0
 8002190:	000e      	movs	r6, r1
 8002192:	0015      	movs	r5, r2
 8002194:	001f      	movs	r7, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002196:	6822      	ldr	r2, [r4, #0]
 8002198:	69d3      	ldr	r3, [r2, #28]
 800219a:	4033      	ands	r3, r6
 800219c:	1b9b      	subs	r3, r3, r6
 800219e:	4259      	negs	r1, r3
 80021a0:	414b      	adcs	r3, r1
 80021a2:	42ab      	cmp	r3, r5
 80021a4:	d001      	beq.n	80021aa <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 80021a6:	2000      	movs	r0, #0
 80021a8:	e01b      	b.n	80021e2 <UART_WaitOnFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 80021aa:	9b06      	ldr	r3, [sp, #24]
 80021ac:	3301      	adds	r3, #1
 80021ae:	d0f3      	beq.n	8002198 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021b0:	f7fe f988 	bl	80004c4 <HAL_GetTick>
 80021b4:	9b06      	ldr	r3, [sp, #24]
 80021b6:	1bc0      	subs	r0, r0, r7
 80021b8:	4283      	cmp	r3, r0
 80021ba:	d301      	bcc.n	80021c0 <UART_WaitOnFlagUntilTimeout+0x34>
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1ea      	bne.n	8002196 <UART_WaitOnFlagUntilTimeout+0xa>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021c0:	6823      	ldr	r3, [r4, #0]
 80021c2:	4908      	ldr	r1, [pc, #32]	; (80021e4 <UART_WaitOnFlagUntilTimeout+0x58>)
 80021c4:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 80021c6:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021c8:	400a      	ands	r2, r1
 80021ca:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021cc:	689a      	ldr	r2, [r3, #8]
 80021ce:	31a3      	adds	r1, #163	; 0xa3
 80021d0:	31ff      	adds	r1, #255	; 0xff
 80021d2:	438a      	bics	r2, r1
 80021d4:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80021d6:	2320      	movs	r3, #32
 80021d8:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80021da:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 80021dc:	2300      	movs	r3, #0
 80021de:	3470      	adds	r4, #112	; 0x70
 80021e0:	7023      	strb	r3, [r4, #0]
}
 80021e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021e4:	fffffe5f 	.word	0xfffffe5f

080021e8 <UART_CheckIdleState>:
{
 80021e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ea:	2600      	movs	r6, #0
{
 80021ec:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ee:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80021f0:	f7fe f968 	bl	80004c4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80021f4:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80021f6:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	071b      	lsls	r3, r3, #28
 80021fc:	d415      	bmi.n	800222a <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80021fe:	6823      	ldr	r3, [r4, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	075b      	lsls	r3, r3, #29
 8002204:	d50a      	bpl.n	800221c <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002206:	2180      	movs	r1, #128	; 0x80
 8002208:	4b0e      	ldr	r3, [pc, #56]	; (8002244 <UART_CheckIdleState+0x5c>)
 800220a:	2200      	movs	r2, #0
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	03c9      	lsls	r1, r1, #15
 8002210:	002b      	movs	r3, r5
 8002212:	0020      	movs	r0, r4
 8002214:	f7ff ffba 	bl	800218c <UART_WaitOnFlagUntilTimeout>
 8002218:	2800      	cmp	r0, #0
 800221a:	d111      	bne.n	8002240 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 800221c:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800221e:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002220:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002222:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8002224:	3470      	adds	r4, #112	; 0x70
 8002226:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8002228:	e00b      	b.n	8002242 <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800222a:	2180      	movs	r1, #128	; 0x80
 800222c:	4b05      	ldr	r3, [pc, #20]	; (8002244 <UART_CheckIdleState+0x5c>)
 800222e:	0032      	movs	r2, r6
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	0389      	lsls	r1, r1, #14
 8002234:	0003      	movs	r3, r0
 8002236:	0020      	movs	r0, r4
 8002238:	f7ff ffa8 	bl	800218c <UART_WaitOnFlagUntilTimeout>
 800223c:	2800      	cmp	r0, #0
 800223e:	d0de      	beq.n	80021fe <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002240:	2003      	movs	r0, #3
}
 8002242:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8002244:	01ffffff 	.word	0x01ffffff

08002248 <HAL_UART_Init>:
{
 8002248:	b510      	push	{r4, lr}
 800224a:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 800224c:	d101      	bne.n	8002252 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 800224e:	2001      	movs	r0, #1
}
 8002250:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8002252:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002254:	2b00      	cmp	r3, #0
 8002256:	d104      	bne.n	8002262 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8002258:	0002      	movs	r2, r0
 800225a:	3270      	adds	r2, #112	; 0x70
 800225c:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 800225e:	f000 fa9d 	bl	800279c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002262:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002264:	2101      	movs	r1, #1
 8002266:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002268:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800226a:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800226c:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 800226e:	438b      	bics	r3, r1
 8002270:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002272:	f7ff fdf1 	bl	8001e58 <UART_SetConfig>
 8002276:	2801      	cmp	r0, #1
 8002278:	d0e9      	beq.n	800224e <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800227a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800227c:	2b00      	cmp	r3, #0
 800227e:	d002      	beq.n	8002286 <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8002280:	0020      	movs	r0, r4
 8002282:	f7ff ff1b 	bl	80020bc <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002286:	6823      	ldr	r3, [r4, #0]
 8002288:	4907      	ldr	r1, [pc, #28]	; (80022a8 <HAL_UART_Init+0x60>)
 800228a:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 800228c:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800228e:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002290:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002292:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	438a      	bics	r2, r1
 8002298:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800229a:	2201      	movs	r2, #1
 800229c:	6819      	ldr	r1, [r3, #0]
 800229e:	430a      	orrs	r2, r1
 80022a0:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80022a2:	f7ff ffa1 	bl	80021e8 <UART_CheckIdleState>
 80022a6:	e7d3      	b.n	8002250 <HAL_UART_Init+0x8>
 80022a8:	ffffb7ff 	.word	0xffffb7ff

080022ac <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80022ac:	4770      	bx	lr
	...

080022b0 <adxl_read_values>:
uint8_t data_rec[];
int x,y,z;


void adxl_read_values (uint8_t reg)
{
 80022b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_I2C_Mem_Read (&hi2c1, DeviceAdr, reg, 1, (uint8_t *)data_rec, 6, 100);
 80022b2:	2364      	movs	r3, #100	; 0x64
 80022b4:	9302      	str	r3, [sp, #8]
 80022b6:	3b5e      	subs	r3, #94	; 0x5e
 80022b8:	9301      	str	r3, [sp, #4]
 80022ba:	4b05      	ldr	r3, [pc, #20]	; (80022d0 <adxl_read_values+0x20>)
 80022bc:	b282      	uxth	r2, r0
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	21a6      	movs	r1, #166	; 0xa6
 80022c2:	2301      	movs	r3, #1
 80022c4:	4803      	ldr	r0, [pc, #12]	; (80022d4 <adxl_read_values+0x24>)
 80022c6:	f7fe fc47 	bl	8000b58 <HAL_I2C_Mem_Read>
}
 80022ca:	b005      	add	sp, #20
 80022cc:	bd00      	pop	{pc}
 80022ce:	46c0      	nop			; (mov r8, r8)
 80022d0:	200001dc 	.word	0x200001dc
 80022d4:	20000084 	.word	0x20000084

080022d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022d8:	b530      	push	{r4, r5, lr}
 80022da:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022dc:	2238      	movs	r2, #56	; 0x38
 80022de:	2100      	movs	r1, #0
 80022e0:	a80e      	add	r0, sp, #56	; 0x38
 80022e2:	f000 fb37 	bl	8002954 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022e6:	2214      	movs	r2, #20
 80022e8:	2100      	movs	r1, #0
 80022ea:	4668      	mov	r0, sp
 80022ec:	f000 fb32 	bl	8002954 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022f0:	2224      	movs	r2, #36	; 0x24
 80022f2:	2100      	movs	r1, #0
 80022f4:	a805      	add	r0, sp, #20
 80022f6:	f000 fb2d 	bl	8002954 <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022fa:	4919      	ldr	r1, [pc, #100]	; (8002360 <SystemClock_Config+0x88>)
 80022fc:	4a19      	ldr	r2, [pc, #100]	; (8002364 <SystemClock_Config+0x8c>)
 80022fe:	680b      	ldr	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002300:	2400      	movs	r4, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002302:	401a      	ands	r2, r3
 8002304:	2380      	movs	r3, #128	; 0x80
 8002306:	011b      	lsls	r3, r3, #4
 8002308:	4313      	orrs	r3, r2
 800230a:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800230c:	230a      	movs	r3, #10
 800230e:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002310:	3306      	adds	r3, #6
 8002312:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002314:	3b0e      	subs	r3, #14
 8002316:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 8002318:	2380      	movs	r3, #128	; 0x80
 800231a:	031b      	lsls	r3, r3, #12
 800231c:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 800231e:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002320:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8002322:	041b      	lsls	r3, r3, #16
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002324:	a80e      	add	r0, sp, #56	; 0x38
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8002326:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002328:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800232a:	9513      	str	r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800232c:	9419      	str	r4, [sp, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800232e:	f7fe fd57 	bl	8000de0 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002332:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002334:	0029      	movs	r1, r5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002336:	9300      	str	r3, [sp, #0]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002338:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800233a:	3b0c      	subs	r3, #12
 800233c:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800233e:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002340:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002342:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002344:	f7fe ffd8 	bl	80012f8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8002348:	232a      	movs	r3, #42	; 0x2a
 800234a:	9305      	str	r3, [sp, #20]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800234c:	2380      	movs	r3, #128	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800234e:	a805      	add	r0, sp, #20
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002350:	029b      	lsls	r3, r3, #10
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002352:	9408      	str	r4, [sp, #32]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002354:	940a      	str	r4, [sp, #40]	; 0x28
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002356:	9306      	str	r3, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002358:	f7ff f8a6 	bl	80014a8 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800235c:	b01d      	add	sp, #116	; 0x74
 800235e:	bd30      	pop	{r4, r5, pc}
 8002360:	40007000 	.word	0x40007000
 8002364:	ffffe7ff 	.word	0xffffe7ff

08002368 <main>:
{
 8002368:	b5f0      	push	{r4, r5, r6, r7, lr}
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800236a:	2701      	movs	r7, #1
{
 800236c:	b097      	sub	sp, #92	; 0x5c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800236e:	ad0c      	add	r5, sp, #48	; 0x30
  HAL_Init();
 8002370:	f7fe f88c 	bl	800048c <HAL_Init>
  SystemClock_Config();
 8002374:	f7ff ffb0 	bl	80022d8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002378:	2214      	movs	r2, #20
 800237a:	2100      	movs	r1, #0
 800237c:	0028      	movs	r0, r5
 800237e:	f000 fae9 	bl	8002954 <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002382:	2102      	movs	r1, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002384:	2004      	movs	r0, #4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002386:	4b91      	ldr	r3, [pc, #580]	; (80025cc <main+0x264>)
  __HAL_RCC_GPIOH_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RADIO_NSS_Pin|RADIO_TCXO_VCC_Pin|RADIO_ANT_SWITCH_RX_Pin, GPIO_PIN_RESET);
 8002388:	4c91      	ldr	r4, [pc, #580]	; (80025d0 <main+0x268>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800238a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : RADIO_DIO_0_Pin RADIO_DIO_1_Pin RADIO_DIO_2_Pin */
  GPIO_InitStruct.Pin = RADIO_DIO_0_Pin|RADIO_DIO_1_Pin|RADIO_DIO_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800238c:	4e91      	ldr	r6, [pc, #580]	; (80025d4 <main+0x26c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800238e:	433a      	orrs	r2, r7
 8002390:	62da      	str	r2, [r3, #44]	; 0x2c
 8002392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002394:	403a      	ands	r2, r7
 8002396:	9203      	str	r2, [sp, #12]
 8002398:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800239a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800239c:	430a      	orrs	r2, r1
 800239e:	62da      	str	r2, [r3, #44]	; 0x2c
 80023a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023a2:	400a      	ands	r2, r1
 80023a4:	9204      	str	r2, [sp, #16]
 80023a6:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023aa:	4301      	orrs	r1, r0
 80023ac:	62d9      	str	r1, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023ae:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023b2:	4002      	ands	r2, r0
  HAL_GPIO_WritePin(GPIOA, RADIO_NSS_Pin|RADIO_TCXO_VCC_Pin|RADIO_ANT_SWITCH_RX_Pin, GPIO_PIN_RESET);
 80023b4:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023b6:	9205      	str	r2, [sp, #20]
 80023b8:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, RADIO_NSS_Pin|RADIO_TCXO_VCC_Pin|RADIO_ANT_SWITCH_RX_Pin, GPIO_PIN_RESET);
 80023bc:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023be:	430a      	orrs	r2, r1
 80023c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80023c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, RADIO_NSS_Pin|RADIO_TCXO_VCC_Pin|RADIO_ANT_SWITCH_RX_Pin, GPIO_PIN_RESET);
 80023c4:	2200      	movs	r2, #0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023c6:	400b      	ands	r3, r1
 80023c8:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOA, RADIO_NSS_Pin|RADIO_TCXO_VCC_Pin|RADIO_ANT_SWITCH_RX_Pin, GPIO_PIN_RESET);
 80023ca:	0021      	movs	r1, r4
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023cc:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOA, RADIO_NSS_Pin|RADIO_TCXO_VCC_Pin|RADIO_ANT_SWITCH_RX_Pin, GPIO_PIN_RESET);
 80023ce:	f7fe f9b5 	bl	800073c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, RADIO_ANT_SWITCH_TX_BOOST_Pin|RADIO_RESET_Pin|RADIO_ANT_SWITCH_TX_RFO_Pin, GPIO_PIN_RESET);
 80023d2:	2200      	movs	r2, #0
 80023d4:	2107      	movs	r1, #7
 80023d6:	4880      	ldr	r0, [pc, #512]	; (80025d8 <main+0x270>)
 80023d8:	f7fe f9b0 	bl	800073c <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023dc:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023de:	2302      	movs	r3, #2
  GPIO_InitStruct.Pin = RADIO_NSS_Pin|RADIO_TCXO_VCC_Pin|RADIO_ANT_SWITCH_RX_Pin;
 80023e0:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e2:	2400      	movs	r4, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e4:	0029      	movs	r1, r5
 80023e6:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023e8:	606f      	str	r7, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ea:	60ac      	str	r4, [r5, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023ec:	60eb      	str	r3, [r5, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ee:	f7fe f8e9 	bl	80005c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RADIO_DIO_0_Pin|RADIO_DIO_1_Pin|RADIO_DIO_2_Pin;
 80023f2:	2313      	movs	r3, #19
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023f4:	0029      	movs	r1, r5
 80023f6:	4879      	ldr	r0, [pc, #484]	; (80025dc <main+0x274>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023f8:	606e      	str	r6, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fa:	60ac      	str	r4, [r5, #8]
  GPIO_InitStruct.Pin = RADIO_DIO_0_Pin|RADIO_DIO_1_Pin|RADIO_DIO_2_Pin;
 80023fc:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023fe:	f7fe f8e1 	bl	80005c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RADIO_DIO_3_Pin */
  GPIO_InitStruct.Pin = RADIO_DIO_3_Pin;
 8002402:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(RADIO_DIO_3_GPIO_Port, &GPIO_InitStruct);
 8002404:	0029      	movs	r1, r5
  GPIO_InitStruct.Pin = RADIO_DIO_3_Pin;
 8002406:	019b      	lsls	r3, r3, #6
  HAL_GPIO_Init(RADIO_DIO_3_GPIO_Port, &GPIO_InitStruct);
 8002408:	4873      	ldr	r0, [pc, #460]	; (80025d8 <main+0x270>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800240a:	606e      	str	r6, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240c:	60ac      	str	r4, [r5, #8]
  GPIO_InitStruct.Pin = RADIO_DIO_3_Pin;
 800240e:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(RADIO_DIO_3_GPIO_Port, &GPIO_InitStruct);
 8002410:	f7fe f8d8 	bl	80005c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RADIO_ANT_SWITCH_TX_BOOST_Pin RADIO_RESET_Pin RADIO_ANT_SWITCH_TX_RFO_Pin */
  GPIO_InitStruct.Pin = RADIO_ANT_SWITCH_TX_BOOST_Pin|RADIO_RESET_Pin|RADIO_ANT_SWITCH_TX_RFO_Pin;
 8002414:	2307      	movs	r3, #7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002416:	0029      	movs	r1, r5
  GPIO_InitStruct.Pin = RADIO_ANT_SWITCH_TX_BOOST_Pin|RADIO_RESET_Pin|RADIO_ANT_SWITCH_TX_RFO_Pin;
 8002418:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800241a:	486f      	ldr	r0, [pc, #444]	; (80025d8 <main+0x270>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800241c:	3b05      	subs	r3, #5
 800241e:	60eb      	str	r3, [r5, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002420:	606f      	str	r7, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002422:	60ac      	str	r4, [r5, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002424:	f7fe f8ce 	bl	80005c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8002428:	0022      	movs	r2, r4
 800242a:	0021      	movs	r1, r4
 800242c:	2005      	movs	r0, #5
 800242e:	f7fe f84f 	bl	80004d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8002432:	2005      	movs	r0, #5
 8002434:	f7fe f87c 	bl	8000530 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002438:	0022      	movs	r2, r4
 800243a:	0021      	movs	r1, r4
 800243c:	2007      	movs	r0, #7
 800243e:	f7fe f847 	bl	80004d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002442:	2007      	movs	r0, #7
 8002444:	f7fe f874 	bl	8000530 <HAL_NVIC_EnableIRQ>
  RTC_TimeTypeDef sTime = {0};
 8002448:	0021      	movs	r1, r4
 800244a:	2214      	movs	r2, #20
 800244c:	a807      	add	r0, sp, #28
 800244e:	f000 fa81 	bl	8002954 <memset>
  RTC_AlarmTypeDef sAlarm = {0};
 8002452:	0021      	movs	r1, r4
 8002454:	2228      	movs	r2, #40	; 0x28
 8002456:	0028      	movs	r0, r5
  RTC_DateTypeDef sDate = {0};
 8002458:	9402      	str	r4, [sp, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 800245a:	f000 fa7b 	bl	8002954 <memset>
  hrtc.Instance = RTC;
 800245e:	4e60      	ldr	r6, [pc, #384]	; (80025e0 <main+0x278>)
 8002460:	4b60      	ldr	r3, [pc, #384]	; (80025e4 <main+0x27c>)
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002462:	0030      	movs	r0, r6
  hrtc.Instance = RTC;
 8002464:	6033      	str	r3, [r6, #0]
  hrtc.Init.AsynchPrediv = 31;
 8002466:	231f      	movs	r3, #31
 8002468:	60b3      	str	r3, [r6, #8]
  hrtc.Init.SynchPrediv = 1023;
 800246a:	4b5f      	ldr	r3, [pc, #380]	; (80025e8 <main+0x280>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800246c:	6074      	str	r4, [r6, #4]
  hrtc.Init.SynchPrediv = 1023;
 800246e:	60f3      	str	r3, [r6, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002470:	6134      	str	r4, [r6, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002472:	6174      	str	r4, [r6, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002474:	61b4      	str	r4, [r6, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002476:	61f4      	str	r4, [r6, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002478:	f7ff f95a 	bl	8001730 <HAL_RTC_Init>
  sTime.Hours = 0;
 800247c:	466b      	mov	r3, sp
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800247e:	0022      	movs	r2, r4
 8002480:	a907      	add	r1, sp, #28
 8002482:	0030      	movs	r0, r6
  sTime.Hours = 0;
 8002484:	771c      	strb	r4, [r3, #28]
  sTime.Minutes = 0;
 8002486:	775c      	strb	r4, [r3, #29]
  sTime.Seconds = 0;
 8002488:	779c      	strb	r4, [r3, #30]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800248a:	940a      	str	r4, [sp, #40]	; 0x28
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800248c:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800248e:	f7ff f9b7 	bl	8001800 <HAL_RTC_SetTime>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002492:	466b      	mov	r3, sp
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002494:	0022      	movs	r2, r4
 8002496:	a902      	add	r1, sp, #8
 8002498:	0030      	movs	r0, r6
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800249a:	721f      	strb	r7, [r3, #8]
  sDate.Month = RTC_MONTH_JANUARY;
 800249c:	725f      	strb	r7, [r3, #9]
  sDate.Date = 1;
 800249e:	729f      	strb	r7, [r3, #10]
  sDate.Year = 0;
 80024a0:	72dc      	strb	r4, [r3, #11]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80024a2:	f7ff fa2b 	bl	80018fc <HAL_RTC_SetDate>
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 80024a6:	23f0      	movs	r3, #240	; 0xf0
 80024a8:	051b      	lsls	r3, r3, #20
 80024aa:	61ab      	str	r3, [r5, #24]
  sAlarm.AlarmDateWeekDay = 1;
 80024ac:	2331      	movs	r3, #49	; 0x31
 80024ae:	446b      	add	r3, sp
 80024b0:	77df      	strb	r7, [r3, #31]
  sAlarm.Alarm = RTC_ALARM_A;
 80024b2:	2380      	movs	r3, #128	; 0x80
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80024b4:	0022      	movs	r2, r4
 80024b6:	0029      	movs	r1, r5
  sAlarm.Alarm = RTC_ALARM_A;
 80024b8:	005b      	lsls	r3, r3, #1
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80024ba:	0030      	movs	r0, r6
  sAlarm.AlarmTime.Hours = 0;
 80024bc:	702c      	strb	r4, [r5, #0]
  sAlarm.AlarmTime.Minutes = 0;
 80024be:	706c      	strb	r4, [r5, #1]
  sAlarm.AlarmTime.Seconds = 0;
 80024c0:	70ac      	strb	r4, [r5, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 80024c2:	606c      	str	r4, [r5, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80024c4:	60ec      	str	r4, [r5, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80024c6:	612c      	str	r4, [r5, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80024c8:	616c      	str	r4, [r5, #20]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80024ca:	61ec      	str	r4, [r5, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 80024cc:	626b      	str	r3, [r5, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80024ce:	f7ff fa81 	bl	80019d4 <HAL_RTC_SetAlarm_IT>
  hspi1.Instance = SPI1;
 80024d2:	4846      	ldr	r0, [pc, #280]	; (80025ec <main+0x284>)
 80024d4:	4b46      	ldr	r3, [pc, #280]	; (80025f0 <main+0x288>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80024d6:	2582      	movs	r5, #130	; 0x82
  hspi1.Instance = SPI1;
 80024d8:	6003      	str	r3, [r0, #0]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80024da:	2380      	movs	r3, #128	; 0x80
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	6183      	str	r3, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80024e0:	3be1      	subs	r3, #225	; 0xe1
 80024e2:	3bff      	subs	r3, #255	; 0xff
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80024e4:	006d      	lsls	r5, r5, #1
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80024e6:	61c3      	str	r3, [r0, #28]
  hspi1.Init.CRCPolynomial = 7;
 80024e8:	3b19      	subs	r3, #25
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80024ea:	6045      	str	r5, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80024ec:	6084      	str	r4, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80024ee:	60c4      	str	r4, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024f0:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024f2:	6144      	str	r4, [r0, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024f4:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80024f6:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024f8:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80024fa:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80024fc:	f7ff fb36 	bl	8001b6c <HAL_SPI_Init>
  hspi2.Instance = SPI2;
 8002500:	483c      	ldr	r0, [pc, #240]	; (80025f4 <main+0x28c>)
 8002502:	4b3d      	ldr	r3, [pc, #244]	; (80025f8 <main+0x290>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002504:	6045      	str	r5, [r0, #4]
  hspi2.Instance = SPI2;
 8002506:	6003      	str	r3, [r0, #0]
  hspi2.Init.CRCPolynomial = 7;
 8002508:	2307      	movs	r3, #7
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800250a:	6084      	str	r4, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800250c:	60c4      	str	r4, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800250e:	6104      	str	r4, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002510:	6144      	str	r4, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8002512:	6184      	str	r4, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002514:	61c4      	str	r4, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002516:	6204      	str	r4, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002518:	6244      	str	r4, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800251a:	6284      	str	r4, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800251c:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800251e:	f7ff fb25 	bl	8001b6c <HAL_SPI_Init>
  huart2.Instance = USART2;
 8002522:	4e36      	ldr	r6, [pc, #216]	; (80025fc <main+0x294>)
 8002524:	4b36      	ldr	r3, [pc, #216]	; (8002600 <main+0x298>)
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002526:	0030      	movs	r0, r6
  huart2.Instance = USART2;
 8002528:	6033      	str	r3, [r6, #0]
  huart2.Init.BaudRate = 115200;
 800252a:	23e1      	movs	r3, #225	; 0xe1
 800252c:	025b      	lsls	r3, r3, #9
 800252e:	6073      	str	r3, [r6, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002530:	230c      	movs	r3, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002532:	60b4      	str	r4, [r6, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002534:	60f4      	str	r4, [r6, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002536:	6134      	str	r4, [r6, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002538:	6173      	str	r3, [r6, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800253a:	61b4      	str	r4, [r6, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800253c:	61f4      	str	r4, [r6, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800253e:	6234      	str	r4, [r6, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002540:	6274      	str	r4, [r6, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002542:	f7ff fe81 	bl	8002248 <HAL_UART_Init>
  hi2c1.Instance = I2C1;
 8002546:	4d2f      	ldr	r5, [pc, #188]	; (8002604 <main+0x29c>)
 8002548:	4b2f      	ldr	r3, [pc, #188]	; (8002608 <main+0x2a0>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800254a:	0028      	movs	r0, r5
  hi2c1.Instance = I2C1;
 800254c:	602b      	str	r3, [r5, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800254e:	4b2f      	ldr	r3, [pc, #188]	; (800260c <main+0x2a4>)
  hi2c1.Init.OwnAddress1 = 0;
 8002550:	60ac      	str	r4, [r5, #8]
  hi2c1.Init.Timing = 0x00707CBB;
 8002552:	606b      	str	r3, [r5, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002554:	60ef      	str	r7, [r5, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002556:	612c      	str	r4, [r5, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002558:	616c      	str	r4, [r5, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800255a:	61ac      	str	r4, [r5, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800255c:	61ec      	str	r4, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800255e:	622c      	str	r4, [r5, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002560:	f7fe fa0e 	bl	8000980 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002564:	0021      	movs	r1, r4
 8002566:	0028      	movs	r0, r5
 8002568:	f7fe fbb4 	bl	8000cd4 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800256c:	0021      	movs	r1, r4
 800256e:	0028      	movs	r0, r5
 8002570:	f7fe fbd6 	bl	8000d20 <HAL_I2CEx_ConfigDigitalFilter>
  i2cBuf[0] = 0x2D;
 8002574:	232d      	movs	r3, #45	; 0x2d
  i2cBuf1[0] = 0x31;
 8002576:	2131      	movs	r1, #49	; 0x31
  i2cBuf[0] = 0x2D;
 8002578:	4a25      	ldr	r2, [pc, #148]	; (8002610 <main+0x2a8>)
  HAL_I2C_Master_Transmit(&hi2c1,DeviceAdr,i2cBuf,2,10);
 800257a:	0028      	movs	r0, r5
  i2cBuf[1] = 0x00;
 800257c:	7054      	strb	r4, [r2, #1]
  i2cBuf1[0] = 0x31;
 800257e:	4c25      	ldr	r4, [pc, #148]	; (8002614 <main+0x2ac>)
  i2cBuf[0] = 0x2D;
 8002580:	7013      	strb	r3, [r2, #0]
  i2cBuf1[1] = 0x01;
 8002582:	7067      	strb	r7, [r4, #1]
  i2cBuf2[0] = 0x2d;
 8002584:	4f24      	ldr	r7, [pc, #144]	; (8002618 <main+0x2b0>)
  i2cBuf1[0] = 0x31;
 8002586:	7021      	strb	r1, [r4, #0]
  i2cBuf2[0] = 0x2d;
 8002588:	703b      	strb	r3, [r7, #0]
  i2cBuf2[1] = 0x08;
 800258a:	3b25      	subs	r3, #37	; 0x25
 800258c:	707b      	strb	r3, [r7, #1]
  HAL_I2C_Master_Transmit(&hi2c1,DeviceAdr,i2cBuf,2,10);
 800258e:	3302      	adds	r3, #2
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	3175      	adds	r1, #117	; 0x75
 8002594:	3b08      	subs	r3, #8
 8002596:	f7fe fa49 	bl	8000a2c <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Transmit(&hi2c1,DeviceAdr,i2cBuf1,2,10);
 800259a:	230a      	movs	r3, #10
 800259c:	0022      	movs	r2, r4
 800259e:	9300      	str	r3, [sp, #0]
 80025a0:	21a6      	movs	r1, #166	; 0xa6
 80025a2:	3b08      	subs	r3, #8
 80025a4:	0028      	movs	r0, r5
 80025a6:	f7fe fa41 	bl	8000a2c <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Transmit(&hi2c1,DeviceAdr,i2cBuf2,2,10);
 80025aa:	230a      	movs	r3, #10
 80025ac:	003a      	movs	r2, r7
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	21a6      	movs	r1, #166	; 0xa6
 80025b2:	3b08      	subs	r3, #8
 80025b4:	0028      	movs	r0, r5
 80025b6:	f7fe fa39 	bl	8000a2c <HAL_I2C_Master_Transmit>
	  adxl_read_values (0x32);
 80025ba:	2032      	movs	r0, #50	; 0x32
 80025bc:	f7ff fe78 	bl	80022b0 <adxl_read_values>
	  HAL_UART_Transmit_IT(&huart2,data_rec,6);
 80025c0:	2206      	movs	r2, #6
 80025c2:	4916      	ldr	r1, [pc, #88]	; (800261c <main+0x2b4>)
 80025c4:	0030      	movs	r0, r6
 80025c6:	f7ff fb5f 	bl	8001c88 <HAL_UART_Transmit_IT>
 80025ca:	e7f6      	b.n	80025ba <main+0x252>
 80025cc:	40021000 	.word	0x40021000
 80025d0:	00009002 	.word	0x00009002
 80025d4:	10110000 	.word	0x10110000
 80025d8:	50000800 	.word	0x50000800
 80025dc:	50000400 	.word	0x50000400
 80025e0:	200000dc 	.word	0x200000dc
 80025e4:	40002800 	.word	0x40002800
 80025e8:	000003ff 	.word	0x000003ff
 80025ec:	20000104 	.word	0x20000104
 80025f0:	40013000 	.word	0x40013000
 80025f4:	2000002c 	.word	0x2000002c
 80025f8:	40003800 	.word	0x40003800
 80025fc:	2000015c 	.word	0x2000015c
 8002600:	40004400 	.word	0x40004400
 8002604:	20000084 	.word	0x20000084
 8002608:	40005400 	.word	0x40005400
 800260c:	00707cbb 	.word	0x00707cbb
 8002610:	200001dd 	.word	0x200001dd
 8002614:	20000024 	.word	0x20000024
 8002618:	200000d0 	.word	0x200000d0
 800261c:	200001dc 	.word	0x200001dc

08002620 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002620:	2201      	movs	r2, #1
 8002622:	4b05      	ldr	r3, [pc, #20]	; (8002638 <HAL_MspInit+0x18>)
 8002624:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002626:	430a      	orrs	r2, r1
 8002628:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800262a:	2280      	movs	r2, #128	; 0x80
 800262c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800262e:	0552      	lsls	r2, r2, #21
 8002630:	430a      	orrs	r2, r1
 8002632:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002634:	4770      	bx	lr
 8002636:	46c0      	nop			; (mov r8, r8)
 8002638:	40021000 	.word	0x40021000

0800263c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800263c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800263e:	0004      	movs	r4, r0
 8002640:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002642:	2214      	movs	r2, #20
 8002644:	2100      	movs	r1, #0
 8002646:	a801      	add	r0, sp, #4
 8002648:	f000 f984 	bl	8002954 <memset>
  if(hi2c->Instance==I2C1)
 800264c:	4b16      	ldr	r3, [pc, #88]	; (80026a8 <HAL_I2C_MspInit+0x6c>)
 800264e:	6822      	ldr	r2, [r4, #0]
 8002650:	429a      	cmp	r2, r3
 8002652:	d127      	bne.n	80026a4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002654:	2102      	movs	r1, #2
 8002656:	4c15      	ldr	r4, [pc, #84]	; (80026ac <HAL_I2C_MspInit+0x70>)
    PB9     ------> I2C1_SDA
    PB6     ------> I2C1_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002658:	2501      	movs	r5, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800265a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800265c:	2712      	movs	r7, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800265e:	430a      	orrs	r2, r1
 8002660:	62e2      	str	r2, [r4, #44]	; 0x2c
 8002662:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002664:	2603      	movs	r6, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002666:	400b      	ands	r3, r1
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800266c:	2380      	movs	r3, #128	; 0x80
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002672:	3bfd      	subs	r3, #253	; 0xfd
 8002674:	3bff      	subs	r3, #255	; 0xff
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002676:	a901      	add	r1, sp, #4
 8002678:	480d      	ldr	r0, [pc, #52]	; (80026b0 <HAL_I2C_MspInit+0x74>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800267a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800267c:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800267e:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002680:	9604      	str	r6, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002682:	f7fd ff9f 	bl	80005c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002686:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002688:	a901      	add	r1, sp, #4
 800268a:	4809      	ldr	r0, [pc, #36]	; (80026b0 <HAL_I2C_MspInit+0x74>)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800268c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800268e:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002690:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002692:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002694:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002696:	f7fd ff95 	bl	80005c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800269a:	2380      	movs	r3, #128	; 0x80
 800269c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800269e:	039b      	lsls	r3, r3, #14
 80026a0:	4313      	orrs	r3, r2
 80026a2:	63a3      	str	r3, [r4, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80026a4:	b007      	add	sp, #28
 80026a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026a8:	40005400 	.word	0x40005400
 80026ac:	40021000 	.word	0x40021000
 80026b0:	50000400 	.word	0x50000400

080026b4 <HAL_RTC_MspInit>:
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{

  if(hrtc->Instance==RTC)
 80026b4:	4b09      	ldr	r3, [pc, #36]	; (80026dc <HAL_RTC_MspInit+0x28>)
 80026b6:	6802      	ldr	r2, [r0, #0]
{
 80026b8:	b510      	push	{r4, lr}
  if(hrtc->Instance==RTC)
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d10d      	bne.n	80026da <HAL_RTC_MspInit+0x26>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80026be:	2380      	movs	r3, #128	; 0x80
 80026c0:	4a07      	ldr	r2, [pc, #28]	; (80026e0 <HAL_RTC_MspInit+0x2c>)
 80026c2:	02db      	lsls	r3, r3, #11
 80026c4:	6d11      	ldr	r1, [r2, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80026c6:	2002      	movs	r0, #2
    __HAL_RCC_RTC_ENABLE();
 80026c8:	430b      	orrs	r3, r1
 80026ca:	6513      	str	r3, [r2, #80]	; 0x50
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80026cc:	2200      	movs	r2, #0
 80026ce:	0011      	movs	r1, r2
 80026d0:	f7fd fefe 	bl	80004d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80026d4:	2002      	movs	r0, #2
 80026d6:	f7fd ff2b 	bl	8000530 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80026da:	bd10      	pop	{r4, pc}
 80026dc:	40002800 	.word	0x40002800
 80026e0:	40021000 	.word	0x40021000

080026e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026e4:	b530      	push	{r4, r5, lr}
 80026e6:	0004      	movs	r4, r0
 80026e8:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ea:	2214      	movs	r2, #20
 80026ec:	2100      	movs	r1, #0
 80026ee:	a803      	add	r0, sp, #12
 80026f0:	f000 f930 	bl	8002954 <memset>
  if(hspi->Instance==SPI1)
 80026f4:	6823      	ldr	r3, [r4, #0]
 80026f6:	4a25      	ldr	r2, [pc, #148]	; (800278c <HAL_SPI_MspInit+0xa8>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d12c      	bne.n	8002756 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80026fc:	2280      	movs	r2, #128	; 0x80
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026fe:	2402      	movs	r4, #2
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002700:	4b23      	ldr	r3, [pc, #140]	; (8002790 <HAL_SPI_MspInit+0xac>)
 8002702:	0152      	lsls	r2, r2, #5
 8002704:	6b59      	ldr	r1, [r3, #52]	; 0x34
    PA6     ------> SPI1_MISO 
    */
    GPIO_InitStruct.Pin = RADIO_SCLK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002706:	2503      	movs	r5, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002708:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800270a:	2101      	movs	r1, #1
    __HAL_RCC_SPI1_CLK_ENABLE();
 800270c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800270e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(RADIO_SCLK_GPIO_Port, &GPIO_InitStruct);
 8002710:	4820      	ldr	r0, [pc, #128]	; (8002794 <HAL_SPI_MspInit+0xb0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002712:	4322      	orrs	r2, r4
 8002714:	62da      	str	r2, [r3, #44]	; 0x2c
 8002716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002718:	4022      	ands	r2, r4
 800271a:	9200      	str	r2, [sp, #0]
 800271c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800271e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002720:	430a      	orrs	r2, r1
 8002722:	62da      	str	r2, [r3, #44]	; 0x2c
 8002724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002726:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002728:	400b      	ands	r3, r1
 800272a:	9301      	str	r3, [sp, #4]
 800272c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = RADIO_SCLK_Pin;
 800272e:	2308      	movs	r3, #8
    HAL_GPIO_Init(RADIO_SCLK_GPIO_Port, &GPIO_InitStruct);
 8002730:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = RADIO_SCLK_Pin;
 8002732:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002734:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(RADIO_SCLK_GPIO_Port, &GPIO_InitStruct);
 8002736:	f7fd ff45 	bl	80005c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RADIO_MOSI_Pin|RADIO_MISO_Pin;
 800273a:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800273c:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pin = RADIO_MOSI_Pin|RADIO_MISO_Pin;
 800273e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002740:	2300      	movs	r3, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002742:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002744:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002746:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002748:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800274a:	a903      	add	r1, sp, #12
 800274c:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800274e:	f7fd ff39 	bl	80005c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002752:	b009      	add	sp, #36	; 0x24
 8002754:	bd30      	pop	{r4, r5, pc}
  else if(hspi->Instance==SPI2)
 8002756:	4a10      	ldr	r2, [pc, #64]	; (8002798 <HAL_SPI_MspInit+0xb4>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d1fa      	bne.n	8002752 <HAL_SPI_MspInit+0x6e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800275c:	2280      	movs	r2, #128	; 0x80
 800275e:	4b0c      	ldr	r3, [pc, #48]	; (8002790 <HAL_SPI_MspInit+0xac>)
 8002760:	01d2      	lsls	r2, r2, #7
 8002762:	6b99      	ldr	r1, [r3, #56]	; 0x38
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002764:	480b      	ldr	r0, [pc, #44]	; (8002794 <HAL_SPI_MspInit+0xb0>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002766:	430a      	orrs	r2, r1
 8002768:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800276a:	2202      	movs	r2, #2
 800276c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800276e:	4311      	orrs	r1, r2
 8002770:	62d9      	str	r1, [r3, #44]	; 0x2c
 8002772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002774:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002776:	4013      	ands	r3, r2
 8002778:	9302      	str	r3, [sp, #8]
 800277a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12;
 800277c:	23f0      	movs	r3, #240	; 0xf0
 800277e:	021b      	lsls	r3, r3, #8
 8002780:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002782:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002784:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002786:	9306      	str	r3, [sp, #24]
 8002788:	e7e1      	b.n	800274e <HAL_SPI_MspInit+0x6a>
 800278a:	46c0      	nop			; (mov r8, r8)
 800278c:	40013000 	.word	0x40013000
 8002790:	40021000 	.word	0x40021000
 8002794:	50000400 	.word	0x50000400
 8002798:	40003800 	.word	0x40003800

0800279c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800279c:	b510      	push	{r4, lr}
 800279e:	0004      	movs	r4, r0
 80027a0:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a2:	2214      	movs	r2, #20
 80027a4:	2100      	movs	r1, #0
 80027a6:	a801      	add	r0, sp, #4
 80027a8:	f000 f8d4 	bl	8002954 <memset>
  if(huart->Instance==USART2)
 80027ac:	4b14      	ldr	r3, [pc, #80]	; (8002800 <HAL_UART_MspInit+0x64>)
 80027ae:	6822      	ldr	r2, [r4, #0]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d122      	bne.n	80027fa <HAL_UART_MspInit+0x5e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80027b4:	2280      	movs	r2, #128	; 0x80
 80027b6:	4b13      	ldr	r3, [pc, #76]	; (8002804 <HAL_UART_MspInit+0x68>)
 80027b8:	0292      	lsls	r2, r2, #10
 80027ba:	6b99      	ldr	r1, [r3, #56]	; 0x38
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027bc:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_ENABLE();
 80027be:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c0:	2101      	movs	r1, #1
    __HAL_RCC_USART2_CLK_ENABLE();
 80027c2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c6:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c8:	430a      	orrs	r2, r1
 80027ca:	62da      	str	r2, [r3, #44]	; 0x2c
 80027cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ce:	400b      	ands	r3, r1
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80027d4:	230c      	movs	r3, #12
 80027d6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d8:	3b0a      	subs	r3, #10
 80027da:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027dc:	185b      	adds	r3, r3, r1
 80027de:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80027e0:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027e2:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80027e4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027e6:	f7fd feed 	bl	80005c4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80027ea:	2200      	movs	r2, #0
 80027ec:	201c      	movs	r0, #28
 80027ee:	0011      	movs	r1, r2
 80027f0:	f7fd fe6e 	bl	80004d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80027f4:	201c      	movs	r0, #28
 80027f6:	f7fd fe9b 	bl	8000530 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80027fa:	b006      	add	sp, #24
 80027fc:	bd10      	pop	{r4, pc}
 80027fe:	46c0      	nop			; (mov r8, r8)
 8002800:	40004400 	.word	0x40004400
 8002804:	40021000 	.word	0x40021000

08002808 <NMI_Handler>:
 8002808:	4770      	bx	lr

0800280a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800280a:	e7fe      	b.n	800280a <HardFault_Handler>

0800280c <SVC_Handler>:
 800280c:	4770      	bx	lr

0800280e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800280e:	4770      	bx	lr

08002810 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002810:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002812:	f7fd fe4f 	bl	80004b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002816:	bd10      	pop	{r4, pc}

08002818 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8002818:	b510      	push	{r4, lr}
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800281a:	4802      	ldr	r0, [pc, #8]	; (8002824 <RTC_IRQHandler+0xc>)
 800281c:	f7fe ff22 	bl	8001664 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8002820:	bd10      	pop	{r4, pc}
 8002822:	46c0      	nop			; (mov r8, r8)
 8002824:	200000dc 	.word	0x200000dc

08002828 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8002828:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800282a:	2001      	movs	r0, #1
 800282c:	f7fd ff8e 	bl	800074c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002830:	2002      	movs	r0, #2
 8002832:	f7fd ff8b 	bl	800074c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8002836:	bd10      	pop	{r4, pc}

08002838 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002838:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800283a:	2010      	movs	r0, #16
 800283c:	f7fd ff86 	bl	800074c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002840:	2080      	movs	r0, #128	; 0x80
 8002842:	0180      	lsls	r0, r0, #6
 8002844:	f7fd ff82 	bl	800074c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002848:	bd10      	pop	{r4, pc}
	...

0800284c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800284c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800284e:	4802      	ldr	r0, [pc, #8]	; (8002858 <USART2_IRQHandler+0xc>)
 8002850:	f7ff fa5a 	bl	8001d08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002854:	bd10      	pop	{r4, pc}
 8002856:	46c0      	nop			; (mov r8, r8)
 8002858:	2000015c 	.word	0x2000015c

0800285c <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 800285c:	2280      	movs	r2, #128	; 0x80
 800285e:	4b10      	ldr	r3, [pc, #64]	; (80028a0 <SystemInit+0x44>)
 8002860:	0052      	lsls	r2, r2, #1
 8002862:	6819      	ldr	r1, [r3, #0]
 8002864:	430a      	orrs	r2, r1
 8002866:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8002868:	68da      	ldr	r2, [r3, #12]
 800286a:	490e      	ldr	r1, [pc, #56]	; (80028a4 <SystemInit+0x48>)
 800286c:	400a      	ands	r2, r1
 800286e:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	490d      	ldr	r1, [pc, #52]	; (80028a8 <SystemInit+0x4c>)
 8002874:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002876:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8002878:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	438a      	bics	r2, r1
 800287e:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	490a      	ldr	r1, [pc, #40]	; (80028ac <SystemInit+0x50>)
 8002884:	400a      	ands	r2, r1
 8002886:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8002888:	68da      	ldr	r2, [r3, #12]
 800288a:	4909      	ldr	r1, [pc, #36]	; (80028b0 <SystemInit+0x54>)
 800288c:	400a      	ands	r2, r1
 800288e:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002890:	2200      	movs	r2, #0
 8002892:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002894:	2280      	movs	r2, #128	; 0x80
 8002896:	4b07      	ldr	r3, [pc, #28]	; (80028b4 <SystemInit+0x58>)
 8002898:	0512      	lsls	r2, r2, #20
 800289a:	609a      	str	r2, [r3, #8]
#endif
}
 800289c:	4770      	bx	lr
 800289e:	46c0      	nop			; (mov r8, r8)
 80028a0:	40021000 	.word	0x40021000
 80028a4:	88ff400c 	.word	0x88ff400c
 80028a8:	fef6fff6 	.word	0xfef6fff6
 80028ac:	fffbffff 	.word	0xfffbffff
 80028b0:	ff02ffff 	.word	0xff02ffff
 80028b4:	e000ed00 	.word	0xe000ed00

080028b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80028b8:	480d      	ldr	r0, [pc, #52]	; (80028f0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80028ba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80028bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80028be:	e003      	b.n	80028c8 <LoopCopyDataInit>

080028c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80028c0:	4b0c      	ldr	r3, [pc, #48]	; (80028f4 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 80028c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80028c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80028c6:	3104      	adds	r1, #4

080028c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80028c8:	480b      	ldr	r0, [pc, #44]	; (80028f8 <LoopForever+0xa>)
  ldr  r3, =_edata
 80028ca:	4b0c      	ldr	r3, [pc, #48]	; (80028fc <LoopForever+0xe>)
  adds  r2, r0, r1
 80028cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80028ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80028d0:	d3f6      	bcc.n	80028c0 <CopyDataInit>
  ldr  r2, =_sbss
 80028d2:	4a0b      	ldr	r2, [pc, #44]	; (8002900 <LoopForever+0x12>)
  b  LoopFillZerobss
 80028d4:	e002      	b.n	80028dc <LoopFillZerobss>

080028d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80028d6:	2300      	movs	r3, #0
  str  r3, [r2]
 80028d8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028da:	3204      	adds	r2, #4

080028dc <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80028dc:	4b09      	ldr	r3, [pc, #36]	; (8002904 <LoopForever+0x16>)
  cmp  r2, r3
 80028de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80028e0:	d3f9      	bcc.n	80028d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80028e2:	f7ff ffbb 	bl	800285c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028e6:	f000 f811 	bl	800290c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028ea:	f7ff fd3d 	bl	8002368 <main>

080028ee <LoopForever>:

LoopForever:
    b LoopForever
 80028ee:	e7fe      	b.n	80028ee <LoopForever>
   ldr   r0, =_estack
 80028f0:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 80028f4:	080029c0 	.word	0x080029c0
  ldr  r0, =_sdata
 80028f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80028fc:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8002900:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8002904:	200001e0 	.word	0x200001e0

08002908 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002908:	e7fe      	b.n	8002908 <ADC1_COMP_IRQHandler>
	...

0800290c <__libc_init_array>:
 800290c:	b570      	push	{r4, r5, r6, lr}
 800290e:	2600      	movs	r6, #0
 8002910:	4d0c      	ldr	r5, [pc, #48]	; (8002944 <__libc_init_array+0x38>)
 8002912:	4c0d      	ldr	r4, [pc, #52]	; (8002948 <__libc_init_array+0x3c>)
 8002914:	1b64      	subs	r4, r4, r5
 8002916:	10a4      	asrs	r4, r4, #2
 8002918:	42a6      	cmp	r6, r4
 800291a:	d109      	bne.n	8002930 <__libc_init_array+0x24>
 800291c:	2600      	movs	r6, #0
 800291e:	f000 f821 	bl	8002964 <_init>
 8002922:	4d0a      	ldr	r5, [pc, #40]	; (800294c <__libc_init_array+0x40>)
 8002924:	4c0a      	ldr	r4, [pc, #40]	; (8002950 <__libc_init_array+0x44>)
 8002926:	1b64      	subs	r4, r4, r5
 8002928:	10a4      	asrs	r4, r4, #2
 800292a:	42a6      	cmp	r6, r4
 800292c:	d105      	bne.n	800293a <__libc_init_array+0x2e>
 800292e:	bd70      	pop	{r4, r5, r6, pc}
 8002930:	00b3      	lsls	r3, r6, #2
 8002932:	58eb      	ldr	r3, [r5, r3]
 8002934:	4798      	blx	r3
 8002936:	3601      	adds	r6, #1
 8002938:	e7ee      	b.n	8002918 <__libc_init_array+0xc>
 800293a:	00b3      	lsls	r3, r6, #2
 800293c:	58eb      	ldr	r3, [r5, r3]
 800293e:	4798      	blx	r3
 8002940:	3601      	adds	r6, #1
 8002942:	e7f2      	b.n	800292a <__libc_init_array+0x1e>
 8002944:	080029b8 	.word	0x080029b8
 8002948:	080029b8 	.word	0x080029b8
 800294c:	080029b8 	.word	0x080029b8
 8002950:	080029bc 	.word	0x080029bc

08002954 <memset>:
 8002954:	0003      	movs	r3, r0
 8002956:	1882      	adds	r2, r0, r2
 8002958:	4293      	cmp	r3, r2
 800295a:	d100      	bne.n	800295e <memset+0xa>
 800295c:	4770      	bx	lr
 800295e:	7019      	strb	r1, [r3, #0]
 8002960:	3301      	adds	r3, #1
 8002962:	e7f9      	b.n	8002958 <memset+0x4>

08002964 <_init>:
 8002964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002966:	46c0      	nop			; (mov r8, r8)
 8002968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800296a:	bc08      	pop	{r3}
 800296c:	469e      	mov	lr, r3
 800296e:	4770      	bx	lr

08002970 <_fini>:
 8002970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002972:	46c0      	nop			; (mov r8, r8)
 8002974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002976:	bc08      	pop	{r3}
 8002978:	469e      	mov	lr, r3
 800297a:	4770      	bx	lr
