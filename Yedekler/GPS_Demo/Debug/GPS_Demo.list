
GPS_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4bc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c8  0800d580  0800d580  0001d580  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800db48  0800db48  0001db48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800db50  0800db50  0001db50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800db54  0800db54  0001db54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000006b0  20000000  0800db58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000ccc  200006b0  0800e208  000206b0  2**2
                  ALLOC
  8 ._user_heap_stack 00001100  2000137c  0800e208  0002137c  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  000206b0  2**0
                  CONTENTS, READONLY
 10 .debug_info   000148e5  00000000  00000000  000206d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002f4e  00000000  00000000  00034fbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000fd0  00000000  00000000  00037f10  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000e90  00000000  00000000  00038ee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000796e  00000000  00000000  00039d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004e3f  00000000  00000000  000416de  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004651d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004294  00000000  00000000  0004659c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200006b0 	.word	0x200006b0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800d564 	.word	0x0800d564

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200006b4 	.word	0x200006b4
 8000104:	0800d564 	.word	0x0800d564

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_uhi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5a09      	ldrh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	1c10      	adds	r0, r2, #0
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	1c19      	adds	r1, r3, #0
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f813 	bl	8001468 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 ff6d 	bl	800132c <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f805 	bl	8001468 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 fffb 	bl	8001468 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ff8d 	bl	80013a0 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 ff83 	bl	80013a0 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	1c08      	adds	r0, r1, #0
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f824 	bl	8000524 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_d2uiz>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	2200      	movs	r2, #0
 80004ec:	4b0c      	ldr	r3, [pc, #48]	; (8000520 <__aeabi_d2uiz+0x38>)
 80004ee:	0004      	movs	r4, r0
 80004f0:	000d      	movs	r5, r1
 80004f2:	f7ff ffcf 	bl	8000494 <__aeabi_dcmpge>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	d104      	bne.n	8000504 <__aeabi_d2uiz+0x1c>
 80004fa:	0020      	movs	r0, r4
 80004fc:	0029      	movs	r1, r5
 80004fe:	f001 fdcb 	bl	8002098 <__aeabi_d2iz>
 8000502:	bd70      	pop	{r4, r5, r6, pc}
 8000504:	4b06      	ldr	r3, [pc, #24]	; (8000520 <__aeabi_d2uiz+0x38>)
 8000506:	2200      	movs	r2, #0
 8000508:	0020      	movs	r0, r4
 800050a:	0029      	movs	r1, r5
 800050c:	f001 fa8e 	bl	8001a2c <__aeabi_dsub>
 8000510:	f001 fdc2 	bl	8002098 <__aeabi_d2iz>
 8000514:	2380      	movs	r3, #128	; 0x80
 8000516:	061b      	lsls	r3, r3, #24
 8000518:	469c      	mov	ip, r3
 800051a:	4460      	add	r0, ip
 800051c:	e7f1      	b.n	8000502 <__aeabi_d2uiz+0x1a>
 800051e:	46c0      	nop			; (mov r8, r8)
 8000520:	41e00000 	.word	0x41e00000

08000524 <__udivmoddi4>:
 8000524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000526:	4657      	mov	r7, sl
 8000528:	464e      	mov	r6, r9
 800052a:	4645      	mov	r5, r8
 800052c:	46de      	mov	lr, fp
 800052e:	b5e0      	push	{r5, r6, r7, lr}
 8000530:	0004      	movs	r4, r0
 8000532:	b083      	sub	sp, #12
 8000534:	000d      	movs	r5, r1
 8000536:	4692      	mov	sl, r2
 8000538:	4699      	mov	r9, r3
 800053a:	428b      	cmp	r3, r1
 800053c:	d82f      	bhi.n	800059e <__udivmoddi4+0x7a>
 800053e:	d02c      	beq.n	800059a <__udivmoddi4+0x76>
 8000540:	4649      	mov	r1, r9
 8000542:	4650      	mov	r0, sl
 8000544:	f001 fe74 	bl	8002230 <__clzdi2>
 8000548:	0029      	movs	r1, r5
 800054a:	0006      	movs	r6, r0
 800054c:	0020      	movs	r0, r4
 800054e:	f001 fe6f 	bl	8002230 <__clzdi2>
 8000552:	1a33      	subs	r3, r6, r0
 8000554:	4698      	mov	r8, r3
 8000556:	3b20      	subs	r3, #32
 8000558:	469b      	mov	fp, r3
 800055a:	d500      	bpl.n	800055e <__udivmoddi4+0x3a>
 800055c:	e074      	b.n	8000648 <__udivmoddi4+0x124>
 800055e:	4653      	mov	r3, sl
 8000560:	465a      	mov	r2, fp
 8000562:	4093      	lsls	r3, r2
 8000564:	001f      	movs	r7, r3
 8000566:	4653      	mov	r3, sl
 8000568:	4642      	mov	r2, r8
 800056a:	4093      	lsls	r3, r2
 800056c:	001e      	movs	r6, r3
 800056e:	42af      	cmp	r7, r5
 8000570:	d829      	bhi.n	80005c6 <__udivmoddi4+0xa2>
 8000572:	d026      	beq.n	80005c2 <__udivmoddi4+0x9e>
 8000574:	465b      	mov	r3, fp
 8000576:	1ba4      	subs	r4, r4, r6
 8000578:	41bd      	sbcs	r5, r7
 800057a:	2b00      	cmp	r3, #0
 800057c:	da00      	bge.n	8000580 <__udivmoddi4+0x5c>
 800057e:	e079      	b.n	8000674 <__udivmoddi4+0x150>
 8000580:	2200      	movs	r2, #0
 8000582:	2300      	movs	r3, #0
 8000584:	9200      	str	r2, [sp, #0]
 8000586:	9301      	str	r3, [sp, #4]
 8000588:	2301      	movs	r3, #1
 800058a:	465a      	mov	r2, fp
 800058c:	4093      	lsls	r3, r2
 800058e:	9301      	str	r3, [sp, #4]
 8000590:	2301      	movs	r3, #1
 8000592:	4642      	mov	r2, r8
 8000594:	4093      	lsls	r3, r2
 8000596:	9300      	str	r3, [sp, #0]
 8000598:	e019      	b.n	80005ce <__udivmoddi4+0xaa>
 800059a:	4282      	cmp	r2, r0
 800059c:	d9d0      	bls.n	8000540 <__udivmoddi4+0x1c>
 800059e:	2200      	movs	r2, #0
 80005a0:	2300      	movs	r3, #0
 80005a2:	9200      	str	r2, [sp, #0]
 80005a4:	9301      	str	r3, [sp, #4]
 80005a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <__udivmoddi4+0x8c>
 80005ac:	601c      	str	r4, [r3, #0]
 80005ae:	605d      	str	r5, [r3, #4]
 80005b0:	9800      	ldr	r0, [sp, #0]
 80005b2:	9901      	ldr	r1, [sp, #4]
 80005b4:	b003      	add	sp, #12
 80005b6:	bc3c      	pop	{r2, r3, r4, r5}
 80005b8:	4690      	mov	r8, r2
 80005ba:	4699      	mov	r9, r3
 80005bc:	46a2      	mov	sl, r4
 80005be:	46ab      	mov	fp, r5
 80005c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005c2:	42a3      	cmp	r3, r4
 80005c4:	d9d6      	bls.n	8000574 <__udivmoddi4+0x50>
 80005c6:	2200      	movs	r2, #0
 80005c8:	2300      	movs	r3, #0
 80005ca:	9200      	str	r2, [sp, #0]
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	4643      	mov	r3, r8
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d0e8      	beq.n	80005a6 <__udivmoddi4+0x82>
 80005d4:	07fb      	lsls	r3, r7, #31
 80005d6:	0872      	lsrs	r2, r6, #1
 80005d8:	431a      	orrs	r2, r3
 80005da:	4646      	mov	r6, r8
 80005dc:	087b      	lsrs	r3, r7, #1
 80005de:	e00e      	b.n	80005fe <__udivmoddi4+0xda>
 80005e0:	42ab      	cmp	r3, r5
 80005e2:	d101      	bne.n	80005e8 <__udivmoddi4+0xc4>
 80005e4:	42a2      	cmp	r2, r4
 80005e6:	d80c      	bhi.n	8000602 <__udivmoddi4+0xde>
 80005e8:	1aa4      	subs	r4, r4, r2
 80005ea:	419d      	sbcs	r5, r3
 80005ec:	2001      	movs	r0, #1
 80005ee:	1924      	adds	r4, r4, r4
 80005f0:	416d      	adcs	r5, r5
 80005f2:	2100      	movs	r1, #0
 80005f4:	3e01      	subs	r6, #1
 80005f6:	1824      	adds	r4, r4, r0
 80005f8:	414d      	adcs	r5, r1
 80005fa:	2e00      	cmp	r6, #0
 80005fc:	d006      	beq.n	800060c <__udivmoddi4+0xe8>
 80005fe:	42ab      	cmp	r3, r5
 8000600:	d9ee      	bls.n	80005e0 <__udivmoddi4+0xbc>
 8000602:	3e01      	subs	r6, #1
 8000604:	1924      	adds	r4, r4, r4
 8000606:	416d      	adcs	r5, r5
 8000608:	2e00      	cmp	r6, #0
 800060a:	d1f8      	bne.n	80005fe <__udivmoddi4+0xda>
 800060c:	465b      	mov	r3, fp
 800060e:	9800      	ldr	r0, [sp, #0]
 8000610:	9901      	ldr	r1, [sp, #4]
 8000612:	1900      	adds	r0, r0, r4
 8000614:	4169      	adcs	r1, r5
 8000616:	2b00      	cmp	r3, #0
 8000618:	db22      	blt.n	8000660 <__udivmoddi4+0x13c>
 800061a:	002b      	movs	r3, r5
 800061c:	465a      	mov	r2, fp
 800061e:	40d3      	lsrs	r3, r2
 8000620:	002a      	movs	r2, r5
 8000622:	4644      	mov	r4, r8
 8000624:	40e2      	lsrs	r2, r4
 8000626:	001c      	movs	r4, r3
 8000628:	465b      	mov	r3, fp
 800062a:	0015      	movs	r5, r2
 800062c:	2b00      	cmp	r3, #0
 800062e:	db2c      	blt.n	800068a <__udivmoddi4+0x166>
 8000630:	0026      	movs	r6, r4
 8000632:	409e      	lsls	r6, r3
 8000634:	0033      	movs	r3, r6
 8000636:	0026      	movs	r6, r4
 8000638:	4647      	mov	r7, r8
 800063a:	40be      	lsls	r6, r7
 800063c:	0032      	movs	r2, r6
 800063e:	1a80      	subs	r0, r0, r2
 8000640:	4199      	sbcs	r1, r3
 8000642:	9000      	str	r0, [sp, #0]
 8000644:	9101      	str	r1, [sp, #4]
 8000646:	e7ae      	b.n	80005a6 <__udivmoddi4+0x82>
 8000648:	4642      	mov	r2, r8
 800064a:	2320      	movs	r3, #32
 800064c:	1a9b      	subs	r3, r3, r2
 800064e:	4652      	mov	r2, sl
 8000650:	40da      	lsrs	r2, r3
 8000652:	4641      	mov	r1, r8
 8000654:	0013      	movs	r3, r2
 8000656:	464a      	mov	r2, r9
 8000658:	408a      	lsls	r2, r1
 800065a:	0017      	movs	r7, r2
 800065c:	431f      	orrs	r7, r3
 800065e:	e782      	b.n	8000566 <__udivmoddi4+0x42>
 8000660:	4642      	mov	r2, r8
 8000662:	2320      	movs	r3, #32
 8000664:	1a9b      	subs	r3, r3, r2
 8000666:	002a      	movs	r2, r5
 8000668:	4646      	mov	r6, r8
 800066a:	409a      	lsls	r2, r3
 800066c:	0023      	movs	r3, r4
 800066e:	40f3      	lsrs	r3, r6
 8000670:	4313      	orrs	r3, r2
 8000672:	e7d5      	b.n	8000620 <__udivmoddi4+0xfc>
 8000674:	4642      	mov	r2, r8
 8000676:	2320      	movs	r3, #32
 8000678:	2100      	movs	r1, #0
 800067a:	1a9b      	subs	r3, r3, r2
 800067c:	2200      	movs	r2, #0
 800067e:	9100      	str	r1, [sp, #0]
 8000680:	9201      	str	r2, [sp, #4]
 8000682:	2201      	movs	r2, #1
 8000684:	40da      	lsrs	r2, r3
 8000686:	9201      	str	r2, [sp, #4]
 8000688:	e782      	b.n	8000590 <__udivmoddi4+0x6c>
 800068a:	4642      	mov	r2, r8
 800068c:	2320      	movs	r3, #32
 800068e:	0026      	movs	r6, r4
 8000690:	1a9b      	subs	r3, r3, r2
 8000692:	40de      	lsrs	r6, r3
 8000694:	002f      	movs	r7, r5
 8000696:	46b4      	mov	ip, r6
 8000698:	4097      	lsls	r7, r2
 800069a:	4666      	mov	r6, ip
 800069c:	003b      	movs	r3, r7
 800069e:	4333      	orrs	r3, r6
 80006a0:	e7c9      	b.n	8000636 <__udivmoddi4+0x112>
 80006a2:	46c0      	nop			; (mov r8, r8)

080006a4 <__aeabi_dadd>:
 80006a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006a6:	4645      	mov	r5, r8
 80006a8:	46de      	mov	lr, fp
 80006aa:	4657      	mov	r7, sl
 80006ac:	464e      	mov	r6, r9
 80006ae:	030c      	lsls	r4, r1, #12
 80006b0:	b5e0      	push	{r5, r6, r7, lr}
 80006b2:	004e      	lsls	r6, r1, #1
 80006b4:	0fc9      	lsrs	r1, r1, #31
 80006b6:	4688      	mov	r8, r1
 80006b8:	000d      	movs	r5, r1
 80006ba:	0a61      	lsrs	r1, r4, #9
 80006bc:	0f44      	lsrs	r4, r0, #29
 80006be:	430c      	orrs	r4, r1
 80006c0:	00c7      	lsls	r7, r0, #3
 80006c2:	0319      	lsls	r1, r3, #12
 80006c4:	0058      	lsls	r0, r3, #1
 80006c6:	0fdb      	lsrs	r3, r3, #31
 80006c8:	469b      	mov	fp, r3
 80006ca:	0a4b      	lsrs	r3, r1, #9
 80006cc:	0f51      	lsrs	r1, r2, #29
 80006ce:	430b      	orrs	r3, r1
 80006d0:	0d76      	lsrs	r6, r6, #21
 80006d2:	0d40      	lsrs	r0, r0, #21
 80006d4:	0019      	movs	r1, r3
 80006d6:	00d2      	lsls	r2, r2, #3
 80006d8:	45d8      	cmp	r8, fp
 80006da:	d100      	bne.n	80006de <__aeabi_dadd+0x3a>
 80006dc:	e0ae      	b.n	800083c <__aeabi_dadd+0x198>
 80006de:	1a35      	subs	r5, r6, r0
 80006e0:	2d00      	cmp	r5, #0
 80006e2:	dc00      	bgt.n	80006e6 <__aeabi_dadd+0x42>
 80006e4:	e0f6      	b.n	80008d4 <__aeabi_dadd+0x230>
 80006e6:	2800      	cmp	r0, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dadd+0x66>
 80006ea:	4313      	orrs	r3, r2
 80006ec:	d100      	bne.n	80006f0 <__aeabi_dadd+0x4c>
 80006ee:	e0db      	b.n	80008a8 <__aeabi_dadd+0x204>
 80006f0:	1e6b      	subs	r3, r5, #1
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d000      	beq.n	80006f8 <__aeabi_dadd+0x54>
 80006f6:	e137      	b.n	8000968 <__aeabi_dadd+0x2c4>
 80006f8:	1aba      	subs	r2, r7, r2
 80006fa:	4297      	cmp	r7, r2
 80006fc:	41bf      	sbcs	r7, r7
 80006fe:	1a64      	subs	r4, r4, r1
 8000700:	427f      	negs	r7, r7
 8000702:	1be4      	subs	r4, r4, r7
 8000704:	2601      	movs	r6, #1
 8000706:	0017      	movs	r7, r2
 8000708:	e024      	b.n	8000754 <__aeabi_dadd+0xb0>
 800070a:	4bc6      	ldr	r3, [pc, #792]	; (8000a24 <__aeabi_dadd+0x380>)
 800070c:	429e      	cmp	r6, r3
 800070e:	d04d      	beq.n	80007ac <__aeabi_dadd+0x108>
 8000710:	2380      	movs	r3, #128	; 0x80
 8000712:	041b      	lsls	r3, r3, #16
 8000714:	4319      	orrs	r1, r3
 8000716:	2d38      	cmp	r5, #56	; 0x38
 8000718:	dd00      	ble.n	800071c <__aeabi_dadd+0x78>
 800071a:	e107      	b.n	800092c <__aeabi_dadd+0x288>
 800071c:	2d1f      	cmp	r5, #31
 800071e:	dd00      	ble.n	8000722 <__aeabi_dadd+0x7e>
 8000720:	e138      	b.n	8000994 <__aeabi_dadd+0x2f0>
 8000722:	2020      	movs	r0, #32
 8000724:	1b43      	subs	r3, r0, r5
 8000726:	469a      	mov	sl, r3
 8000728:	000b      	movs	r3, r1
 800072a:	4650      	mov	r0, sl
 800072c:	4083      	lsls	r3, r0
 800072e:	4699      	mov	r9, r3
 8000730:	0013      	movs	r3, r2
 8000732:	4648      	mov	r0, r9
 8000734:	40eb      	lsrs	r3, r5
 8000736:	4318      	orrs	r0, r3
 8000738:	0003      	movs	r3, r0
 800073a:	4650      	mov	r0, sl
 800073c:	4082      	lsls	r2, r0
 800073e:	1e50      	subs	r0, r2, #1
 8000740:	4182      	sbcs	r2, r0
 8000742:	40e9      	lsrs	r1, r5
 8000744:	431a      	orrs	r2, r3
 8000746:	1aba      	subs	r2, r7, r2
 8000748:	1a61      	subs	r1, r4, r1
 800074a:	4297      	cmp	r7, r2
 800074c:	41a4      	sbcs	r4, r4
 800074e:	0017      	movs	r7, r2
 8000750:	4264      	negs	r4, r4
 8000752:	1b0c      	subs	r4, r1, r4
 8000754:	0223      	lsls	r3, r4, #8
 8000756:	d562      	bpl.n	800081e <__aeabi_dadd+0x17a>
 8000758:	0264      	lsls	r4, r4, #9
 800075a:	0a65      	lsrs	r5, r4, #9
 800075c:	2d00      	cmp	r5, #0
 800075e:	d100      	bne.n	8000762 <__aeabi_dadd+0xbe>
 8000760:	e0df      	b.n	8000922 <__aeabi_dadd+0x27e>
 8000762:	0028      	movs	r0, r5
 8000764:	f001 fd46 	bl	80021f4 <__clzsi2>
 8000768:	0003      	movs	r3, r0
 800076a:	3b08      	subs	r3, #8
 800076c:	2b1f      	cmp	r3, #31
 800076e:	dd00      	ble.n	8000772 <__aeabi_dadd+0xce>
 8000770:	e0d2      	b.n	8000918 <__aeabi_dadd+0x274>
 8000772:	2220      	movs	r2, #32
 8000774:	003c      	movs	r4, r7
 8000776:	1ad2      	subs	r2, r2, r3
 8000778:	409d      	lsls	r5, r3
 800077a:	40d4      	lsrs	r4, r2
 800077c:	409f      	lsls	r7, r3
 800077e:	4325      	orrs	r5, r4
 8000780:	429e      	cmp	r6, r3
 8000782:	dd00      	ble.n	8000786 <__aeabi_dadd+0xe2>
 8000784:	e0c4      	b.n	8000910 <__aeabi_dadd+0x26c>
 8000786:	1b9e      	subs	r6, r3, r6
 8000788:	1c73      	adds	r3, r6, #1
 800078a:	2b1f      	cmp	r3, #31
 800078c:	dd00      	ble.n	8000790 <__aeabi_dadd+0xec>
 800078e:	e0f1      	b.n	8000974 <__aeabi_dadd+0x2d0>
 8000790:	2220      	movs	r2, #32
 8000792:	0038      	movs	r0, r7
 8000794:	0029      	movs	r1, r5
 8000796:	1ad2      	subs	r2, r2, r3
 8000798:	40d8      	lsrs	r0, r3
 800079a:	4091      	lsls	r1, r2
 800079c:	4097      	lsls	r7, r2
 800079e:	002c      	movs	r4, r5
 80007a0:	4301      	orrs	r1, r0
 80007a2:	1e78      	subs	r0, r7, #1
 80007a4:	4187      	sbcs	r7, r0
 80007a6:	40dc      	lsrs	r4, r3
 80007a8:	2600      	movs	r6, #0
 80007aa:	430f      	orrs	r7, r1
 80007ac:	077b      	lsls	r3, r7, #29
 80007ae:	d009      	beq.n	80007c4 <__aeabi_dadd+0x120>
 80007b0:	230f      	movs	r3, #15
 80007b2:	403b      	ands	r3, r7
 80007b4:	2b04      	cmp	r3, #4
 80007b6:	d005      	beq.n	80007c4 <__aeabi_dadd+0x120>
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	42bb      	cmp	r3, r7
 80007bc:	41bf      	sbcs	r7, r7
 80007be:	427f      	negs	r7, r7
 80007c0:	19e4      	adds	r4, r4, r7
 80007c2:	001f      	movs	r7, r3
 80007c4:	0223      	lsls	r3, r4, #8
 80007c6:	d52c      	bpl.n	8000822 <__aeabi_dadd+0x17e>
 80007c8:	4b96      	ldr	r3, [pc, #600]	; (8000a24 <__aeabi_dadd+0x380>)
 80007ca:	3601      	adds	r6, #1
 80007cc:	429e      	cmp	r6, r3
 80007ce:	d100      	bne.n	80007d2 <__aeabi_dadd+0x12e>
 80007d0:	e09a      	b.n	8000908 <__aeabi_dadd+0x264>
 80007d2:	4645      	mov	r5, r8
 80007d4:	4b94      	ldr	r3, [pc, #592]	; (8000a28 <__aeabi_dadd+0x384>)
 80007d6:	08ff      	lsrs	r7, r7, #3
 80007d8:	401c      	ands	r4, r3
 80007da:	0760      	lsls	r0, r4, #29
 80007dc:	0576      	lsls	r6, r6, #21
 80007de:	0264      	lsls	r4, r4, #9
 80007e0:	4307      	orrs	r7, r0
 80007e2:	0b24      	lsrs	r4, r4, #12
 80007e4:	0d76      	lsrs	r6, r6, #21
 80007e6:	2100      	movs	r1, #0
 80007e8:	0324      	lsls	r4, r4, #12
 80007ea:	0b23      	lsrs	r3, r4, #12
 80007ec:	0d0c      	lsrs	r4, r1, #20
 80007ee:	4a8f      	ldr	r2, [pc, #572]	; (8000a2c <__aeabi_dadd+0x388>)
 80007f0:	0524      	lsls	r4, r4, #20
 80007f2:	431c      	orrs	r4, r3
 80007f4:	4014      	ands	r4, r2
 80007f6:	0533      	lsls	r3, r6, #20
 80007f8:	4323      	orrs	r3, r4
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	07ed      	lsls	r5, r5, #31
 80007fe:	085b      	lsrs	r3, r3, #1
 8000800:	432b      	orrs	r3, r5
 8000802:	0038      	movs	r0, r7
 8000804:	0019      	movs	r1, r3
 8000806:	bc3c      	pop	{r2, r3, r4, r5}
 8000808:	4690      	mov	r8, r2
 800080a:	4699      	mov	r9, r3
 800080c:	46a2      	mov	sl, r4
 800080e:	46ab      	mov	fp, r5
 8000810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000812:	4664      	mov	r4, ip
 8000814:	4304      	orrs	r4, r0
 8000816:	d100      	bne.n	800081a <__aeabi_dadd+0x176>
 8000818:	e211      	b.n	8000c3e <__aeabi_dadd+0x59a>
 800081a:	0004      	movs	r4, r0
 800081c:	4667      	mov	r7, ip
 800081e:	077b      	lsls	r3, r7, #29
 8000820:	d1c6      	bne.n	80007b0 <__aeabi_dadd+0x10c>
 8000822:	4645      	mov	r5, r8
 8000824:	0760      	lsls	r0, r4, #29
 8000826:	08ff      	lsrs	r7, r7, #3
 8000828:	4307      	orrs	r7, r0
 800082a:	08e4      	lsrs	r4, r4, #3
 800082c:	4b7d      	ldr	r3, [pc, #500]	; (8000a24 <__aeabi_dadd+0x380>)
 800082e:	429e      	cmp	r6, r3
 8000830:	d030      	beq.n	8000894 <__aeabi_dadd+0x1f0>
 8000832:	0324      	lsls	r4, r4, #12
 8000834:	0576      	lsls	r6, r6, #21
 8000836:	0b24      	lsrs	r4, r4, #12
 8000838:	0d76      	lsrs	r6, r6, #21
 800083a:	e7d4      	b.n	80007e6 <__aeabi_dadd+0x142>
 800083c:	1a33      	subs	r3, r6, r0
 800083e:	469a      	mov	sl, r3
 8000840:	2b00      	cmp	r3, #0
 8000842:	dd78      	ble.n	8000936 <__aeabi_dadd+0x292>
 8000844:	2800      	cmp	r0, #0
 8000846:	d031      	beq.n	80008ac <__aeabi_dadd+0x208>
 8000848:	4876      	ldr	r0, [pc, #472]	; (8000a24 <__aeabi_dadd+0x380>)
 800084a:	4286      	cmp	r6, r0
 800084c:	d0ae      	beq.n	80007ac <__aeabi_dadd+0x108>
 800084e:	2080      	movs	r0, #128	; 0x80
 8000850:	0400      	lsls	r0, r0, #16
 8000852:	4301      	orrs	r1, r0
 8000854:	4653      	mov	r3, sl
 8000856:	2b38      	cmp	r3, #56	; 0x38
 8000858:	dc00      	bgt.n	800085c <__aeabi_dadd+0x1b8>
 800085a:	e0e9      	b.n	8000a30 <__aeabi_dadd+0x38c>
 800085c:	430a      	orrs	r2, r1
 800085e:	1e51      	subs	r1, r2, #1
 8000860:	418a      	sbcs	r2, r1
 8000862:	2100      	movs	r1, #0
 8000864:	19d2      	adds	r2, r2, r7
 8000866:	42ba      	cmp	r2, r7
 8000868:	41bf      	sbcs	r7, r7
 800086a:	1909      	adds	r1, r1, r4
 800086c:	427c      	negs	r4, r7
 800086e:	0017      	movs	r7, r2
 8000870:	190c      	adds	r4, r1, r4
 8000872:	0223      	lsls	r3, r4, #8
 8000874:	d5d3      	bpl.n	800081e <__aeabi_dadd+0x17a>
 8000876:	4b6b      	ldr	r3, [pc, #428]	; (8000a24 <__aeabi_dadd+0x380>)
 8000878:	3601      	adds	r6, #1
 800087a:	429e      	cmp	r6, r3
 800087c:	d100      	bne.n	8000880 <__aeabi_dadd+0x1dc>
 800087e:	e13a      	b.n	8000af6 <__aeabi_dadd+0x452>
 8000880:	2001      	movs	r0, #1
 8000882:	4b69      	ldr	r3, [pc, #420]	; (8000a28 <__aeabi_dadd+0x384>)
 8000884:	401c      	ands	r4, r3
 8000886:	087b      	lsrs	r3, r7, #1
 8000888:	4007      	ands	r7, r0
 800088a:	431f      	orrs	r7, r3
 800088c:	07e0      	lsls	r0, r4, #31
 800088e:	4307      	orrs	r7, r0
 8000890:	0864      	lsrs	r4, r4, #1
 8000892:	e78b      	b.n	80007ac <__aeabi_dadd+0x108>
 8000894:	0023      	movs	r3, r4
 8000896:	433b      	orrs	r3, r7
 8000898:	d100      	bne.n	800089c <__aeabi_dadd+0x1f8>
 800089a:	e1cb      	b.n	8000c34 <__aeabi_dadd+0x590>
 800089c:	2280      	movs	r2, #128	; 0x80
 800089e:	0312      	lsls	r2, r2, #12
 80008a0:	4314      	orrs	r4, r2
 80008a2:	0324      	lsls	r4, r4, #12
 80008a4:	0b24      	lsrs	r4, r4, #12
 80008a6:	e79e      	b.n	80007e6 <__aeabi_dadd+0x142>
 80008a8:	002e      	movs	r6, r5
 80008aa:	e77f      	b.n	80007ac <__aeabi_dadd+0x108>
 80008ac:	0008      	movs	r0, r1
 80008ae:	4310      	orrs	r0, r2
 80008b0:	d100      	bne.n	80008b4 <__aeabi_dadd+0x210>
 80008b2:	e0b4      	b.n	8000a1e <__aeabi_dadd+0x37a>
 80008b4:	1e58      	subs	r0, r3, #1
 80008b6:	2800      	cmp	r0, #0
 80008b8:	d000      	beq.n	80008bc <__aeabi_dadd+0x218>
 80008ba:	e0de      	b.n	8000a7a <__aeabi_dadd+0x3d6>
 80008bc:	18ba      	adds	r2, r7, r2
 80008be:	42ba      	cmp	r2, r7
 80008c0:	419b      	sbcs	r3, r3
 80008c2:	1864      	adds	r4, r4, r1
 80008c4:	425b      	negs	r3, r3
 80008c6:	18e4      	adds	r4, r4, r3
 80008c8:	0017      	movs	r7, r2
 80008ca:	2601      	movs	r6, #1
 80008cc:	0223      	lsls	r3, r4, #8
 80008ce:	d5a6      	bpl.n	800081e <__aeabi_dadd+0x17a>
 80008d0:	2602      	movs	r6, #2
 80008d2:	e7d5      	b.n	8000880 <__aeabi_dadd+0x1dc>
 80008d4:	2d00      	cmp	r5, #0
 80008d6:	d16e      	bne.n	80009b6 <__aeabi_dadd+0x312>
 80008d8:	1c70      	adds	r0, r6, #1
 80008da:	0540      	lsls	r0, r0, #21
 80008dc:	0d40      	lsrs	r0, r0, #21
 80008de:	2801      	cmp	r0, #1
 80008e0:	dc00      	bgt.n	80008e4 <__aeabi_dadd+0x240>
 80008e2:	e0f9      	b.n	8000ad8 <__aeabi_dadd+0x434>
 80008e4:	1ab8      	subs	r0, r7, r2
 80008e6:	4684      	mov	ip, r0
 80008e8:	4287      	cmp	r7, r0
 80008ea:	4180      	sbcs	r0, r0
 80008ec:	1ae5      	subs	r5, r4, r3
 80008ee:	4240      	negs	r0, r0
 80008f0:	1a2d      	subs	r5, r5, r0
 80008f2:	0228      	lsls	r0, r5, #8
 80008f4:	d400      	bmi.n	80008f8 <__aeabi_dadd+0x254>
 80008f6:	e089      	b.n	8000a0c <__aeabi_dadd+0x368>
 80008f8:	1bd7      	subs	r7, r2, r7
 80008fa:	42ba      	cmp	r2, r7
 80008fc:	4192      	sbcs	r2, r2
 80008fe:	1b1c      	subs	r4, r3, r4
 8000900:	4252      	negs	r2, r2
 8000902:	1aa5      	subs	r5, r4, r2
 8000904:	46d8      	mov	r8, fp
 8000906:	e729      	b.n	800075c <__aeabi_dadd+0xb8>
 8000908:	4645      	mov	r5, r8
 800090a:	2400      	movs	r4, #0
 800090c:	2700      	movs	r7, #0
 800090e:	e76a      	b.n	80007e6 <__aeabi_dadd+0x142>
 8000910:	4c45      	ldr	r4, [pc, #276]	; (8000a28 <__aeabi_dadd+0x384>)
 8000912:	1af6      	subs	r6, r6, r3
 8000914:	402c      	ands	r4, r5
 8000916:	e749      	b.n	80007ac <__aeabi_dadd+0x108>
 8000918:	003d      	movs	r5, r7
 800091a:	3828      	subs	r0, #40	; 0x28
 800091c:	4085      	lsls	r5, r0
 800091e:	2700      	movs	r7, #0
 8000920:	e72e      	b.n	8000780 <__aeabi_dadd+0xdc>
 8000922:	0038      	movs	r0, r7
 8000924:	f001 fc66 	bl	80021f4 <__clzsi2>
 8000928:	3020      	adds	r0, #32
 800092a:	e71d      	b.n	8000768 <__aeabi_dadd+0xc4>
 800092c:	430a      	orrs	r2, r1
 800092e:	1e51      	subs	r1, r2, #1
 8000930:	418a      	sbcs	r2, r1
 8000932:	2100      	movs	r1, #0
 8000934:	e707      	b.n	8000746 <__aeabi_dadd+0xa2>
 8000936:	2b00      	cmp	r3, #0
 8000938:	d000      	beq.n	800093c <__aeabi_dadd+0x298>
 800093a:	e0f3      	b.n	8000b24 <__aeabi_dadd+0x480>
 800093c:	1c70      	adds	r0, r6, #1
 800093e:	0543      	lsls	r3, r0, #21
 8000940:	0d5b      	lsrs	r3, r3, #21
 8000942:	2b01      	cmp	r3, #1
 8000944:	dc00      	bgt.n	8000948 <__aeabi_dadd+0x2a4>
 8000946:	e0ad      	b.n	8000aa4 <__aeabi_dadd+0x400>
 8000948:	4b36      	ldr	r3, [pc, #216]	; (8000a24 <__aeabi_dadd+0x380>)
 800094a:	4298      	cmp	r0, r3
 800094c:	d100      	bne.n	8000950 <__aeabi_dadd+0x2ac>
 800094e:	e0d1      	b.n	8000af4 <__aeabi_dadd+0x450>
 8000950:	18ba      	adds	r2, r7, r2
 8000952:	42ba      	cmp	r2, r7
 8000954:	41bf      	sbcs	r7, r7
 8000956:	1864      	adds	r4, r4, r1
 8000958:	427f      	negs	r7, r7
 800095a:	19e4      	adds	r4, r4, r7
 800095c:	07e7      	lsls	r7, r4, #31
 800095e:	0852      	lsrs	r2, r2, #1
 8000960:	4317      	orrs	r7, r2
 8000962:	0864      	lsrs	r4, r4, #1
 8000964:	0006      	movs	r6, r0
 8000966:	e721      	b.n	80007ac <__aeabi_dadd+0x108>
 8000968:	482e      	ldr	r0, [pc, #184]	; (8000a24 <__aeabi_dadd+0x380>)
 800096a:	4285      	cmp	r5, r0
 800096c:	d100      	bne.n	8000970 <__aeabi_dadd+0x2cc>
 800096e:	e093      	b.n	8000a98 <__aeabi_dadd+0x3f4>
 8000970:	001d      	movs	r5, r3
 8000972:	e6d0      	b.n	8000716 <__aeabi_dadd+0x72>
 8000974:	0029      	movs	r1, r5
 8000976:	3e1f      	subs	r6, #31
 8000978:	40f1      	lsrs	r1, r6
 800097a:	2b20      	cmp	r3, #32
 800097c:	d100      	bne.n	8000980 <__aeabi_dadd+0x2dc>
 800097e:	e08d      	b.n	8000a9c <__aeabi_dadd+0x3f8>
 8000980:	2240      	movs	r2, #64	; 0x40
 8000982:	1ad3      	subs	r3, r2, r3
 8000984:	409d      	lsls	r5, r3
 8000986:	432f      	orrs	r7, r5
 8000988:	1e7d      	subs	r5, r7, #1
 800098a:	41af      	sbcs	r7, r5
 800098c:	2400      	movs	r4, #0
 800098e:	430f      	orrs	r7, r1
 8000990:	2600      	movs	r6, #0
 8000992:	e744      	b.n	800081e <__aeabi_dadd+0x17a>
 8000994:	002b      	movs	r3, r5
 8000996:	0008      	movs	r0, r1
 8000998:	3b20      	subs	r3, #32
 800099a:	40d8      	lsrs	r0, r3
 800099c:	0003      	movs	r3, r0
 800099e:	2d20      	cmp	r5, #32
 80009a0:	d100      	bne.n	80009a4 <__aeabi_dadd+0x300>
 80009a2:	e07d      	b.n	8000aa0 <__aeabi_dadd+0x3fc>
 80009a4:	2040      	movs	r0, #64	; 0x40
 80009a6:	1b45      	subs	r5, r0, r5
 80009a8:	40a9      	lsls	r1, r5
 80009aa:	430a      	orrs	r2, r1
 80009ac:	1e51      	subs	r1, r2, #1
 80009ae:	418a      	sbcs	r2, r1
 80009b0:	2100      	movs	r1, #0
 80009b2:	431a      	orrs	r2, r3
 80009b4:	e6c7      	b.n	8000746 <__aeabi_dadd+0xa2>
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d050      	beq.n	8000a5c <__aeabi_dadd+0x3b8>
 80009ba:	4e1a      	ldr	r6, [pc, #104]	; (8000a24 <__aeabi_dadd+0x380>)
 80009bc:	42b0      	cmp	r0, r6
 80009be:	d057      	beq.n	8000a70 <__aeabi_dadd+0x3cc>
 80009c0:	2680      	movs	r6, #128	; 0x80
 80009c2:	426b      	negs	r3, r5
 80009c4:	4699      	mov	r9, r3
 80009c6:	0436      	lsls	r6, r6, #16
 80009c8:	4334      	orrs	r4, r6
 80009ca:	464b      	mov	r3, r9
 80009cc:	2b38      	cmp	r3, #56	; 0x38
 80009ce:	dd00      	ble.n	80009d2 <__aeabi_dadd+0x32e>
 80009d0:	e0d6      	b.n	8000b80 <__aeabi_dadd+0x4dc>
 80009d2:	2b1f      	cmp	r3, #31
 80009d4:	dd00      	ble.n	80009d8 <__aeabi_dadd+0x334>
 80009d6:	e135      	b.n	8000c44 <__aeabi_dadd+0x5a0>
 80009d8:	2620      	movs	r6, #32
 80009da:	1af5      	subs	r5, r6, r3
 80009dc:	0026      	movs	r6, r4
 80009de:	40ae      	lsls	r6, r5
 80009e0:	46b2      	mov	sl, r6
 80009e2:	003e      	movs	r6, r7
 80009e4:	40de      	lsrs	r6, r3
 80009e6:	46ac      	mov	ip, r5
 80009e8:	0035      	movs	r5, r6
 80009ea:	4656      	mov	r6, sl
 80009ec:	432e      	orrs	r6, r5
 80009ee:	4665      	mov	r5, ip
 80009f0:	40af      	lsls	r7, r5
 80009f2:	1e7d      	subs	r5, r7, #1
 80009f4:	41af      	sbcs	r7, r5
 80009f6:	40dc      	lsrs	r4, r3
 80009f8:	4337      	orrs	r7, r6
 80009fa:	1bd7      	subs	r7, r2, r7
 80009fc:	42ba      	cmp	r2, r7
 80009fe:	4192      	sbcs	r2, r2
 8000a00:	1b0c      	subs	r4, r1, r4
 8000a02:	4252      	negs	r2, r2
 8000a04:	1aa4      	subs	r4, r4, r2
 8000a06:	0006      	movs	r6, r0
 8000a08:	46d8      	mov	r8, fp
 8000a0a:	e6a3      	b.n	8000754 <__aeabi_dadd+0xb0>
 8000a0c:	4664      	mov	r4, ip
 8000a0e:	4667      	mov	r7, ip
 8000a10:	432c      	orrs	r4, r5
 8000a12:	d000      	beq.n	8000a16 <__aeabi_dadd+0x372>
 8000a14:	e6a2      	b.n	800075c <__aeabi_dadd+0xb8>
 8000a16:	2500      	movs	r5, #0
 8000a18:	2600      	movs	r6, #0
 8000a1a:	2700      	movs	r7, #0
 8000a1c:	e706      	b.n	800082c <__aeabi_dadd+0x188>
 8000a1e:	001e      	movs	r6, r3
 8000a20:	e6c4      	b.n	80007ac <__aeabi_dadd+0x108>
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	000007ff 	.word	0x000007ff
 8000a28:	ff7fffff 	.word	0xff7fffff
 8000a2c:	800fffff 	.word	0x800fffff
 8000a30:	2b1f      	cmp	r3, #31
 8000a32:	dc63      	bgt.n	8000afc <__aeabi_dadd+0x458>
 8000a34:	2020      	movs	r0, #32
 8000a36:	1ac3      	subs	r3, r0, r3
 8000a38:	0008      	movs	r0, r1
 8000a3a:	4098      	lsls	r0, r3
 8000a3c:	469c      	mov	ip, r3
 8000a3e:	4683      	mov	fp, r0
 8000a40:	4653      	mov	r3, sl
 8000a42:	0010      	movs	r0, r2
 8000a44:	40d8      	lsrs	r0, r3
 8000a46:	0003      	movs	r3, r0
 8000a48:	4658      	mov	r0, fp
 8000a4a:	4318      	orrs	r0, r3
 8000a4c:	4663      	mov	r3, ip
 8000a4e:	409a      	lsls	r2, r3
 8000a50:	1e53      	subs	r3, r2, #1
 8000a52:	419a      	sbcs	r2, r3
 8000a54:	4653      	mov	r3, sl
 8000a56:	4302      	orrs	r2, r0
 8000a58:	40d9      	lsrs	r1, r3
 8000a5a:	e703      	b.n	8000864 <__aeabi_dadd+0x1c0>
 8000a5c:	0026      	movs	r6, r4
 8000a5e:	433e      	orrs	r6, r7
 8000a60:	d006      	beq.n	8000a70 <__aeabi_dadd+0x3cc>
 8000a62:	43eb      	mvns	r3, r5
 8000a64:	4699      	mov	r9, r3
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d0c7      	beq.n	80009fa <__aeabi_dadd+0x356>
 8000a6a:	4e94      	ldr	r6, [pc, #592]	; (8000cbc <__aeabi_dadd+0x618>)
 8000a6c:	42b0      	cmp	r0, r6
 8000a6e:	d1ac      	bne.n	80009ca <__aeabi_dadd+0x326>
 8000a70:	000c      	movs	r4, r1
 8000a72:	0017      	movs	r7, r2
 8000a74:	0006      	movs	r6, r0
 8000a76:	46d8      	mov	r8, fp
 8000a78:	e698      	b.n	80007ac <__aeabi_dadd+0x108>
 8000a7a:	4b90      	ldr	r3, [pc, #576]	; (8000cbc <__aeabi_dadd+0x618>)
 8000a7c:	459a      	cmp	sl, r3
 8000a7e:	d00b      	beq.n	8000a98 <__aeabi_dadd+0x3f4>
 8000a80:	4682      	mov	sl, r0
 8000a82:	e6e7      	b.n	8000854 <__aeabi_dadd+0x1b0>
 8000a84:	2800      	cmp	r0, #0
 8000a86:	d000      	beq.n	8000a8a <__aeabi_dadd+0x3e6>
 8000a88:	e09e      	b.n	8000bc8 <__aeabi_dadd+0x524>
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	4310      	orrs	r0, r2
 8000a8e:	d100      	bne.n	8000a92 <__aeabi_dadd+0x3ee>
 8000a90:	e0e9      	b.n	8000c66 <__aeabi_dadd+0x5c2>
 8000a92:	001c      	movs	r4, r3
 8000a94:	0017      	movs	r7, r2
 8000a96:	46d8      	mov	r8, fp
 8000a98:	4e88      	ldr	r6, [pc, #544]	; (8000cbc <__aeabi_dadd+0x618>)
 8000a9a:	e687      	b.n	80007ac <__aeabi_dadd+0x108>
 8000a9c:	2500      	movs	r5, #0
 8000a9e:	e772      	b.n	8000986 <__aeabi_dadd+0x2e2>
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	e782      	b.n	80009aa <__aeabi_dadd+0x306>
 8000aa4:	0023      	movs	r3, r4
 8000aa6:	433b      	orrs	r3, r7
 8000aa8:	2e00      	cmp	r6, #0
 8000aaa:	d000      	beq.n	8000aae <__aeabi_dadd+0x40a>
 8000aac:	e0ab      	b.n	8000c06 <__aeabi_dadd+0x562>
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d100      	bne.n	8000ab4 <__aeabi_dadd+0x410>
 8000ab2:	e0e7      	b.n	8000c84 <__aeabi_dadd+0x5e0>
 8000ab4:	000b      	movs	r3, r1
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	d100      	bne.n	8000abc <__aeabi_dadd+0x418>
 8000aba:	e677      	b.n	80007ac <__aeabi_dadd+0x108>
 8000abc:	18ba      	adds	r2, r7, r2
 8000abe:	42ba      	cmp	r2, r7
 8000ac0:	41bf      	sbcs	r7, r7
 8000ac2:	1864      	adds	r4, r4, r1
 8000ac4:	427f      	negs	r7, r7
 8000ac6:	19e4      	adds	r4, r4, r7
 8000ac8:	0223      	lsls	r3, r4, #8
 8000aca:	d400      	bmi.n	8000ace <__aeabi_dadd+0x42a>
 8000acc:	e0f2      	b.n	8000cb4 <__aeabi_dadd+0x610>
 8000ace:	4b7c      	ldr	r3, [pc, #496]	; (8000cc0 <__aeabi_dadd+0x61c>)
 8000ad0:	0017      	movs	r7, r2
 8000ad2:	401c      	ands	r4, r3
 8000ad4:	0006      	movs	r6, r0
 8000ad6:	e669      	b.n	80007ac <__aeabi_dadd+0x108>
 8000ad8:	0020      	movs	r0, r4
 8000ada:	4338      	orrs	r0, r7
 8000adc:	2e00      	cmp	r6, #0
 8000ade:	d1d1      	bne.n	8000a84 <__aeabi_dadd+0x3e0>
 8000ae0:	2800      	cmp	r0, #0
 8000ae2:	d15b      	bne.n	8000b9c <__aeabi_dadd+0x4f8>
 8000ae4:	001c      	movs	r4, r3
 8000ae6:	4314      	orrs	r4, r2
 8000ae8:	d100      	bne.n	8000aec <__aeabi_dadd+0x448>
 8000aea:	e0a8      	b.n	8000c3e <__aeabi_dadd+0x59a>
 8000aec:	001c      	movs	r4, r3
 8000aee:	0017      	movs	r7, r2
 8000af0:	46d8      	mov	r8, fp
 8000af2:	e65b      	b.n	80007ac <__aeabi_dadd+0x108>
 8000af4:	0006      	movs	r6, r0
 8000af6:	2400      	movs	r4, #0
 8000af8:	2700      	movs	r7, #0
 8000afa:	e697      	b.n	800082c <__aeabi_dadd+0x188>
 8000afc:	4650      	mov	r0, sl
 8000afe:	000b      	movs	r3, r1
 8000b00:	3820      	subs	r0, #32
 8000b02:	40c3      	lsrs	r3, r0
 8000b04:	4699      	mov	r9, r3
 8000b06:	4653      	mov	r3, sl
 8000b08:	2b20      	cmp	r3, #32
 8000b0a:	d100      	bne.n	8000b0e <__aeabi_dadd+0x46a>
 8000b0c:	e095      	b.n	8000c3a <__aeabi_dadd+0x596>
 8000b0e:	2340      	movs	r3, #64	; 0x40
 8000b10:	4650      	mov	r0, sl
 8000b12:	1a1b      	subs	r3, r3, r0
 8000b14:	4099      	lsls	r1, r3
 8000b16:	430a      	orrs	r2, r1
 8000b18:	1e51      	subs	r1, r2, #1
 8000b1a:	418a      	sbcs	r2, r1
 8000b1c:	464b      	mov	r3, r9
 8000b1e:	2100      	movs	r1, #0
 8000b20:	431a      	orrs	r2, r3
 8000b22:	e69f      	b.n	8000864 <__aeabi_dadd+0x1c0>
 8000b24:	2e00      	cmp	r6, #0
 8000b26:	d130      	bne.n	8000b8a <__aeabi_dadd+0x4e6>
 8000b28:	0026      	movs	r6, r4
 8000b2a:	433e      	orrs	r6, r7
 8000b2c:	d067      	beq.n	8000bfe <__aeabi_dadd+0x55a>
 8000b2e:	43db      	mvns	r3, r3
 8000b30:	469a      	mov	sl, r3
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d01c      	beq.n	8000b70 <__aeabi_dadd+0x4cc>
 8000b36:	4e61      	ldr	r6, [pc, #388]	; (8000cbc <__aeabi_dadd+0x618>)
 8000b38:	42b0      	cmp	r0, r6
 8000b3a:	d060      	beq.n	8000bfe <__aeabi_dadd+0x55a>
 8000b3c:	4653      	mov	r3, sl
 8000b3e:	2b38      	cmp	r3, #56	; 0x38
 8000b40:	dd00      	ble.n	8000b44 <__aeabi_dadd+0x4a0>
 8000b42:	e096      	b.n	8000c72 <__aeabi_dadd+0x5ce>
 8000b44:	2b1f      	cmp	r3, #31
 8000b46:	dd00      	ble.n	8000b4a <__aeabi_dadd+0x4a6>
 8000b48:	e09f      	b.n	8000c8a <__aeabi_dadd+0x5e6>
 8000b4a:	2620      	movs	r6, #32
 8000b4c:	1af3      	subs	r3, r6, r3
 8000b4e:	0026      	movs	r6, r4
 8000b50:	409e      	lsls	r6, r3
 8000b52:	469c      	mov	ip, r3
 8000b54:	46b3      	mov	fp, r6
 8000b56:	4653      	mov	r3, sl
 8000b58:	003e      	movs	r6, r7
 8000b5a:	40de      	lsrs	r6, r3
 8000b5c:	0033      	movs	r3, r6
 8000b5e:	465e      	mov	r6, fp
 8000b60:	431e      	orrs	r6, r3
 8000b62:	4663      	mov	r3, ip
 8000b64:	409f      	lsls	r7, r3
 8000b66:	1e7b      	subs	r3, r7, #1
 8000b68:	419f      	sbcs	r7, r3
 8000b6a:	4653      	mov	r3, sl
 8000b6c:	40dc      	lsrs	r4, r3
 8000b6e:	4337      	orrs	r7, r6
 8000b70:	18bf      	adds	r7, r7, r2
 8000b72:	4297      	cmp	r7, r2
 8000b74:	4192      	sbcs	r2, r2
 8000b76:	1864      	adds	r4, r4, r1
 8000b78:	4252      	negs	r2, r2
 8000b7a:	18a4      	adds	r4, r4, r2
 8000b7c:	0006      	movs	r6, r0
 8000b7e:	e678      	b.n	8000872 <__aeabi_dadd+0x1ce>
 8000b80:	4327      	orrs	r7, r4
 8000b82:	1e7c      	subs	r4, r7, #1
 8000b84:	41a7      	sbcs	r7, r4
 8000b86:	2400      	movs	r4, #0
 8000b88:	e737      	b.n	80009fa <__aeabi_dadd+0x356>
 8000b8a:	4e4c      	ldr	r6, [pc, #304]	; (8000cbc <__aeabi_dadd+0x618>)
 8000b8c:	42b0      	cmp	r0, r6
 8000b8e:	d036      	beq.n	8000bfe <__aeabi_dadd+0x55a>
 8000b90:	2680      	movs	r6, #128	; 0x80
 8000b92:	425b      	negs	r3, r3
 8000b94:	0436      	lsls	r6, r6, #16
 8000b96:	469a      	mov	sl, r3
 8000b98:	4334      	orrs	r4, r6
 8000b9a:	e7cf      	b.n	8000b3c <__aeabi_dadd+0x498>
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	4310      	orrs	r0, r2
 8000ba0:	d100      	bne.n	8000ba4 <__aeabi_dadd+0x500>
 8000ba2:	e603      	b.n	80007ac <__aeabi_dadd+0x108>
 8000ba4:	1ab8      	subs	r0, r7, r2
 8000ba6:	4684      	mov	ip, r0
 8000ba8:	4567      	cmp	r7, ip
 8000baa:	41ad      	sbcs	r5, r5
 8000bac:	1ae0      	subs	r0, r4, r3
 8000bae:	426d      	negs	r5, r5
 8000bb0:	1b40      	subs	r0, r0, r5
 8000bb2:	0205      	lsls	r5, r0, #8
 8000bb4:	d400      	bmi.n	8000bb8 <__aeabi_dadd+0x514>
 8000bb6:	e62c      	b.n	8000812 <__aeabi_dadd+0x16e>
 8000bb8:	1bd7      	subs	r7, r2, r7
 8000bba:	42ba      	cmp	r2, r7
 8000bbc:	4192      	sbcs	r2, r2
 8000bbe:	1b1c      	subs	r4, r3, r4
 8000bc0:	4252      	negs	r2, r2
 8000bc2:	1aa4      	subs	r4, r4, r2
 8000bc4:	46d8      	mov	r8, fp
 8000bc6:	e5f1      	b.n	80007ac <__aeabi_dadd+0x108>
 8000bc8:	0018      	movs	r0, r3
 8000bca:	4310      	orrs	r0, r2
 8000bcc:	d100      	bne.n	8000bd0 <__aeabi_dadd+0x52c>
 8000bce:	e763      	b.n	8000a98 <__aeabi_dadd+0x3f4>
 8000bd0:	08f8      	lsrs	r0, r7, #3
 8000bd2:	0767      	lsls	r7, r4, #29
 8000bd4:	4307      	orrs	r7, r0
 8000bd6:	2080      	movs	r0, #128	; 0x80
 8000bd8:	08e4      	lsrs	r4, r4, #3
 8000bda:	0300      	lsls	r0, r0, #12
 8000bdc:	4204      	tst	r4, r0
 8000bde:	d008      	beq.n	8000bf2 <__aeabi_dadd+0x54e>
 8000be0:	08dd      	lsrs	r5, r3, #3
 8000be2:	4205      	tst	r5, r0
 8000be4:	d105      	bne.n	8000bf2 <__aeabi_dadd+0x54e>
 8000be6:	08d2      	lsrs	r2, r2, #3
 8000be8:	0759      	lsls	r1, r3, #29
 8000bea:	4311      	orrs	r1, r2
 8000bec:	000f      	movs	r7, r1
 8000bee:	002c      	movs	r4, r5
 8000bf0:	46d8      	mov	r8, fp
 8000bf2:	0f7b      	lsrs	r3, r7, #29
 8000bf4:	00e4      	lsls	r4, r4, #3
 8000bf6:	431c      	orrs	r4, r3
 8000bf8:	00ff      	lsls	r7, r7, #3
 8000bfa:	4e30      	ldr	r6, [pc, #192]	; (8000cbc <__aeabi_dadd+0x618>)
 8000bfc:	e5d6      	b.n	80007ac <__aeabi_dadd+0x108>
 8000bfe:	000c      	movs	r4, r1
 8000c00:	0017      	movs	r7, r2
 8000c02:	0006      	movs	r6, r0
 8000c04:	e5d2      	b.n	80007ac <__aeabi_dadd+0x108>
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d038      	beq.n	8000c7c <__aeabi_dadd+0x5d8>
 8000c0a:	000b      	movs	r3, r1
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	d100      	bne.n	8000c12 <__aeabi_dadd+0x56e>
 8000c10:	e742      	b.n	8000a98 <__aeabi_dadd+0x3f4>
 8000c12:	08f8      	lsrs	r0, r7, #3
 8000c14:	0767      	lsls	r7, r4, #29
 8000c16:	4307      	orrs	r7, r0
 8000c18:	2080      	movs	r0, #128	; 0x80
 8000c1a:	08e4      	lsrs	r4, r4, #3
 8000c1c:	0300      	lsls	r0, r0, #12
 8000c1e:	4204      	tst	r4, r0
 8000c20:	d0e7      	beq.n	8000bf2 <__aeabi_dadd+0x54e>
 8000c22:	08cb      	lsrs	r3, r1, #3
 8000c24:	4203      	tst	r3, r0
 8000c26:	d1e4      	bne.n	8000bf2 <__aeabi_dadd+0x54e>
 8000c28:	08d2      	lsrs	r2, r2, #3
 8000c2a:	0749      	lsls	r1, r1, #29
 8000c2c:	4311      	orrs	r1, r2
 8000c2e:	000f      	movs	r7, r1
 8000c30:	001c      	movs	r4, r3
 8000c32:	e7de      	b.n	8000bf2 <__aeabi_dadd+0x54e>
 8000c34:	2700      	movs	r7, #0
 8000c36:	2400      	movs	r4, #0
 8000c38:	e5d5      	b.n	80007e6 <__aeabi_dadd+0x142>
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	e76b      	b.n	8000b16 <__aeabi_dadd+0x472>
 8000c3e:	2500      	movs	r5, #0
 8000c40:	2700      	movs	r7, #0
 8000c42:	e5f3      	b.n	800082c <__aeabi_dadd+0x188>
 8000c44:	464e      	mov	r6, r9
 8000c46:	0025      	movs	r5, r4
 8000c48:	3e20      	subs	r6, #32
 8000c4a:	40f5      	lsrs	r5, r6
 8000c4c:	464b      	mov	r3, r9
 8000c4e:	002e      	movs	r6, r5
 8000c50:	2b20      	cmp	r3, #32
 8000c52:	d02d      	beq.n	8000cb0 <__aeabi_dadd+0x60c>
 8000c54:	2540      	movs	r5, #64	; 0x40
 8000c56:	1aed      	subs	r5, r5, r3
 8000c58:	40ac      	lsls	r4, r5
 8000c5a:	4327      	orrs	r7, r4
 8000c5c:	1e7c      	subs	r4, r7, #1
 8000c5e:	41a7      	sbcs	r7, r4
 8000c60:	2400      	movs	r4, #0
 8000c62:	4337      	orrs	r7, r6
 8000c64:	e6c9      	b.n	80009fa <__aeabi_dadd+0x356>
 8000c66:	2480      	movs	r4, #128	; 0x80
 8000c68:	2500      	movs	r5, #0
 8000c6a:	0324      	lsls	r4, r4, #12
 8000c6c:	4e13      	ldr	r6, [pc, #76]	; (8000cbc <__aeabi_dadd+0x618>)
 8000c6e:	2700      	movs	r7, #0
 8000c70:	e5dc      	b.n	800082c <__aeabi_dadd+0x188>
 8000c72:	4327      	orrs	r7, r4
 8000c74:	1e7c      	subs	r4, r7, #1
 8000c76:	41a7      	sbcs	r7, r4
 8000c78:	2400      	movs	r4, #0
 8000c7a:	e779      	b.n	8000b70 <__aeabi_dadd+0x4cc>
 8000c7c:	000c      	movs	r4, r1
 8000c7e:	0017      	movs	r7, r2
 8000c80:	4e0e      	ldr	r6, [pc, #56]	; (8000cbc <__aeabi_dadd+0x618>)
 8000c82:	e593      	b.n	80007ac <__aeabi_dadd+0x108>
 8000c84:	000c      	movs	r4, r1
 8000c86:	0017      	movs	r7, r2
 8000c88:	e590      	b.n	80007ac <__aeabi_dadd+0x108>
 8000c8a:	4656      	mov	r6, sl
 8000c8c:	0023      	movs	r3, r4
 8000c8e:	3e20      	subs	r6, #32
 8000c90:	40f3      	lsrs	r3, r6
 8000c92:	4699      	mov	r9, r3
 8000c94:	4653      	mov	r3, sl
 8000c96:	2b20      	cmp	r3, #32
 8000c98:	d00e      	beq.n	8000cb8 <__aeabi_dadd+0x614>
 8000c9a:	2340      	movs	r3, #64	; 0x40
 8000c9c:	4656      	mov	r6, sl
 8000c9e:	1b9b      	subs	r3, r3, r6
 8000ca0:	409c      	lsls	r4, r3
 8000ca2:	4327      	orrs	r7, r4
 8000ca4:	1e7c      	subs	r4, r7, #1
 8000ca6:	41a7      	sbcs	r7, r4
 8000ca8:	464b      	mov	r3, r9
 8000caa:	2400      	movs	r4, #0
 8000cac:	431f      	orrs	r7, r3
 8000cae:	e75f      	b.n	8000b70 <__aeabi_dadd+0x4cc>
 8000cb0:	2400      	movs	r4, #0
 8000cb2:	e7d2      	b.n	8000c5a <__aeabi_dadd+0x5b6>
 8000cb4:	0017      	movs	r7, r2
 8000cb6:	e5b2      	b.n	800081e <__aeabi_dadd+0x17a>
 8000cb8:	2400      	movs	r4, #0
 8000cba:	e7f2      	b.n	8000ca2 <__aeabi_dadd+0x5fe>
 8000cbc:	000007ff 	.word	0x000007ff
 8000cc0:	ff7fffff 	.word	0xff7fffff

08000cc4 <__aeabi_ddiv>:
 8000cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cc6:	4657      	mov	r7, sl
 8000cc8:	4645      	mov	r5, r8
 8000cca:	46de      	mov	lr, fp
 8000ccc:	464e      	mov	r6, r9
 8000cce:	b5e0      	push	{r5, r6, r7, lr}
 8000cd0:	004c      	lsls	r4, r1, #1
 8000cd2:	030e      	lsls	r6, r1, #12
 8000cd4:	b087      	sub	sp, #28
 8000cd6:	4683      	mov	fp, r0
 8000cd8:	4692      	mov	sl, r2
 8000cda:	001d      	movs	r5, r3
 8000cdc:	4680      	mov	r8, r0
 8000cde:	0b36      	lsrs	r6, r6, #12
 8000ce0:	0d64      	lsrs	r4, r4, #21
 8000ce2:	0fcf      	lsrs	r7, r1, #31
 8000ce4:	2c00      	cmp	r4, #0
 8000ce6:	d04f      	beq.n	8000d88 <__aeabi_ddiv+0xc4>
 8000ce8:	4b6f      	ldr	r3, [pc, #444]	; (8000ea8 <__aeabi_ddiv+0x1e4>)
 8000cea:	429c      	cmp	r4, r3
 8000cec:	d035      	beq.n	8000d5a <__aeabi_ddiv+0x96>
 8000cee:	2380      	movs	r3, #128	; 0x80
 8000cf0:	0f42      	lsrs	r2, r0, #29
 8000cf2:	041b      	lsls	r3, r3, #16
 8000cf4:	00f6      	lsls	r6, r6, #3
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	4333      	orrs	r3, r6
 8000cfa:	4699      	mov	r9, r3
 8000cfc:	00c3      	lsls	r3, r0, #3
 8000cfe:	4698      	mov	r8, r3
 8000d00:	4b6a      	ldr	r3, [pc, #424]	; (8000eac <__aeabi_ddiv+0x1e8>)
 8000d02:	2600      	movs	r6, #0
 8000d04:	469c      	mov	ip, r3
 8000d06:	2300      	movs	r3, #0
 8000d08:	4464      	add	r4, ip
 8000d0a:	9303      	str	r3, [sp, #12]
 8000d0c:	032b      	lsls	r3, r5, #12
 8000d0e:	0b1b      	lsrs	r3, r3, #12
 8000d10:	469b      	mov	fp, r3
 8000d12:	006b      	lsls	r3, r5, #1
 8000d14:	0fed      	lsrs	r5, r5, #31
 8000d16:	4650      	mov	r0, sl
 8000d18:	0d5b      	lsrs	r3, r3, #21
 8000d1a:	9501      	str	r5, [sp, #4]
 8000d1c:	d05e      	beq.n	8000ddc <__aeabi_ddiv+0x118>
 8000d1e:	4a62      	ldr	r2, [pc, #392]	; (8000ea8 <__aeabi_ddiv+0x1e4>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d053      	beq.n	8000dcc <__aeabi_ddiv+0x108>
 8000d24:	465a      	mov	r2, fp
 8000d26:	00d1      	lsls	r1, r2, #3
 8000d28:	2280      	movs	r2, #128	; 0x80
 8000d2a:	0f40      	lsrs	r0, r0, #29
 8000d2c:	0412      	lsls	r2, r2, #16
 8000d2e:	4302      	orrs	r2, r0
 8000d30:	430a      	orrs	r2, r1
 8000d32:	4693      	mov	fp, r2
 8000d34:	4652      	mov	r2, sl
 8000d36:	00d1      	lsls	r1, r2, #3
 8000d38:	4a5c      	ldr	r2, [pc, #368]	; (8000eac <__aeabi_ddiv+0x1e8>)
 8000d3a:	4694      	mov	ip, r2
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4463      	add	r3, ip
 8000d40:	0038      	movs	r0, r7
 8000d42:	4068      	eors	r0, r5
 8000d44:	4684      	mov	ip, r0
 8000d46:	9002      	str	r0, [sp, #8]
 8000d48:	1ae4      	subs	r4, r4, r3
 8000d4a:	4316      	orrs	r6, r2
 8000d4c:	2e0f      	cmp	r6, #15
 8000d4e:	d900      	bls.n	8000d52 <__aeabi_ddiv+0x8e>
 8000d50:	e0b4      	b.n	8000ebc <__aeabi_ddiv+0x1f8>
 8000d52:	4b57      	ldr	r3, [pc, #348]	; (8000eb0 <__aeabi_ddiv+0x1ec>)
 8000d54:	00b6      	lsls	r6, r6, #2
 8000d56:	599b      	ldr	r3, [r3, r6]
 8000d58:	469f      	mov	pc, r3
 8000d5a:	0003      	movs	r3, r0
 8000d5c:	4333      	orrs	r3, r6
 8000d5e:	4699      	mov	r9, r3
 8000d60:	d16c      	bne.n	8000e3c <__aeabi_ddiv+0x178>
 8000d62:	2300      	movs	r3, #0
 8000d64:	4698      	mov	r8, r3
 8000d66:	3302      	adds	r3, #2
 8000d68:	2608      	movs	r6, #8
 8000d6a:	9303      	str	r3, [sp, #12]
 8000d6c:	e7ce      	b.n	8000d0c <__aeabi_ddiv+0x48>
 8000d6e:	46cb      	mov	fp, r9
 8000d70:	4641      	mov	r1, r8
 8000d72:	9a03      	ldr	r2, [sp, #12]
 8000d74:	9701      	str	r7, [sp, #4]
 8000d76:	2a02      	cmp	r2, #2
 8000d78:	d165      	bne.n	8000e46 <__aeabi_ddiv+0x182>
 8000d7a:	9b01      	ldr	r3, [sp, #4]
 8000d7c:	4c4a      	ldr	r4, [pc, #296]	; (8000ea8 <__aeabi_ddiv+0x1e4>)
 8000d7e:	469c      	mov	ip, r3
 8000d80:	2300      	movs	r3, #0
 8000d82:	2200      	movs	r2, #0
 8000d84:	4698      	mov	r8, r3
 8000d86:	e06b      	b.n	8000e60 <__aeabi_ddiv+0x19c>
 8000d88:	0003      	movs	r3, r0
 8000d8a:	4333      	orrs	r3, r6
 8000d8c:	4699      	mov	r9, r3
 8000d8e:	d04e      	beq.n	8000e2e <__aeabi_ddiv+0x16a>
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d100      	bne.n	8000d96 <__aeabi_ddiv+0xd2>
 8000d94:	e1bc      	b.n	8001110 <__aeabi_ddiv+0x44c>
 8000d96:	0030      	movs	r0, r6
 8000d98:	f001 fa2c 	bl	80021f4 <__clzsi2>
 8000d9c:	0003      	movs	r3, r0
 8000d9e:	3b0b      	subs	r3, #11
 8000da0:	2b1c      	cmp	r3, #28
 8000da2:	dd00      	ble.n	8000da6 <__aeabi_ddiv+0xe2>
 8000da4:	e1ac      	b.n	8001100 <__aeabi_ddiv+0x43c>
 8000da6:	221d      	movs	r2, #29
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	465a      	mov	r2, fp
 8000dac:	0001      	movs	r1, r0
 8000dae:	40da      	lsrs	r2, r3
 8000db0:	3908      	subs	r1, #8
 8000db2:	408e      	lsls	r6, r1
 8000db4:	0013      	movs	r3, r2
 8000db6:	4333      	orrs	r3, r6
 8000db8:	4699      	mov	r9, r3
 8000dba:	465b      	mov	r3, fp
 8000dbc:	408b      	lsls	r3, r1
 8000dbe:	4698      	mov	r8, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	4c3c      	ldr	r4, [pc, #240]	; (8000eb4 <__aeabi_ddiv+0x1f0>)
 8000dc4:	2600      	movs	r6, #0
 8000dc6:	1a24      	subs	r4, r4, r0
 8000dc8:	9303      	str	r3, [sp, #12]
 8000dca:	e79f      	b.n	8000d0c <__aeabi_ddiv+0x48>
 8000dcc:	4651      	mov	r1, sl
 8000dce:	465a      	mov	r2, fp
 8000dd0:	4311      	orrs	r1, r2
 8000dd2:	d129      	bne.n	8000e28 <__aeabi_ddiv+0x164>
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	4693      	mov	fp, r2
 8000dd8:	3202      	adds	r2, #2
 8000dda:	e7b1      	b.n	8000d40 <__aeabi_ddiv+0x7c>
 8000ddc:	4659      	mov	r1, fp
 8000dde:	4301      	orrs	r1, r0
 8000de0:	d01e      	beq.n	8000e20 <__aeabi_ddiv+0x15c>
 8000de2:	465b      	mov	r3, fp
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d100      	bne.n	8000dea <__aeabi_ddiv+0x126>
 8000de8:	e19e      	b.n	8001128 <__aeabi_ddiv+0x464>
 8000dea:	4658      	mov	r0, fp
 8000dec:	f001 fa02 	bl	80021f4 <__clzsi2>
 8000df0:	0003      	movs	r3, r0
 8000df2:	3b0b      	subs	r3, #11
 8000df4:	2b1c      	cmp	r3, #28
 8000df6:	dd00      	ble.n	8000dfa <__aeabi_ddiv+0x136>
 8000df8:	e18f      	b.n	800111a <__aeabi_ddiv+0x456>
 8000dfa:	0002      	movs	r2, r0
 8000dfc:	4659      	mov	r1, fp
 8000dfe:	3a08      	subs	r2, #8
 8000e00:	4091      	lsls	r1, r2
 8000e02:	468b      	mov	fp, r1
 8000e04:	211d      	movs	r1, #29
 8000e06:	1acb      	subs	r3, r1, r3
 8000e08:	4651      	mov	r1, sl
 8000e0a:	40d9      	lsrs	r1, r3
 8000e0c:	000b      	movs	r3, r1
 8000e0e:	4659      	mov	r1, fp
 8000e10:	430b      	orrs	r3, r1
 8000e12:	4651      	mov	r1, sl
 8000e14:	469b      	mov	fp, r3
 8000e16:	4091      	lsls	r1, r2
 8000e18:	4b26      	ldr	r3, [pc, #152]	; (8000eb4 <__aeabi_ddiv+0x1f0>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	1a1b      	subs	r3, r3, r0
 8000e1e:	e78f      	b.n	8000d40 <__aeabi_ddiv+0x7c>
 8000e20:	2300      	movs	r3, #0
 8000e22:	2201      	movs	r2, #1
 8000e24:	469b      	mov	fp, r3
 8000e26:	e78b      	b.n	8000d40 <__aeabi_ddiv+0x7c>
 8000e28:	4651      	mov	r1, sl
 8000e2a:	2203      	movs	r2, #3
 8000e2c:	e788      	b.n	8000d40 <__aeabi_ddiv+0x7c>
 8000e2e:	2300      	movs	r3, #0
 8000e30:	4698      	mov	r8, r3
 8000e32:	3301      	adds	r3, #1
 8000e34:	2604      	movs	r6, #4
 8000e36:	2400      	movs	r4, #0
 8000e38:	9303      	str	r3, [sp, #12]
 8000e3a:	e767      	b.n	8000d0c <__aeabi_ddiv+0x48>
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	46b1      	mov	r9, r6
 8000e40:	9303      	str	r3, [sp, #12]
 8000e42:	260c      	movs	r6, #12
 8000e44:	e762      	b.n	8000d0c <__aeabi_ddiv+0x48>
 8000e46:	2a03      	cmp	r2, #3
 8000e48:	d100      	bne.n	8000e4c <__aeabi_ddiv+0x188>
 8000e4a:	e25c      	b.n	8001306 <__aeabi_ddiv+0x642>
 8000e4c:	9b01      	ldr	r3, [sp, #4]
 8000e4e:	2a01      	cmp	r2, #1
 8000e50:	d000      	beq.n	8000e54 <__aeabi_ddiv+0x190>
 8000e52:	e1e4      	b.n	800121e <__aeabi_ddiv+0x55a>
 8000e54:	4013      	ands	r3, r2
 8000e56:	469c      	mov	ip, r3
 8000e58:	2300      	movs	r3, #0
 8000e5a:	2400      	movs	r4, #0
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	4698      	mov	r8, r3
 8000e60:	2100      	movs	r1, #0
 8000e62:	0312      	lsls	r2, r2, #12
 8000e64:	0b13      	lsrs	r3, r2, #12
 8000e66:	0d0a      	lsrs	r2, r1, #20
 8000e68:	0512      	lsls	r2, r2, #20
 8000e6a:	431a      	orrs	r2, r3
 8000e6c:	0523      	lsls	r3, r4, #20
 8000e6e:	4c12      	ldr	r4, [pc, #72]	; (8000eb8 <__aeabi_ddiv+0x1f4>)
 8000e70:	4640      	mov	r0, r8
 8000e72:	4022      	ands	r2, r4
 8000e74:	4313      	orrs	r3, r2
 8000e76:	4662      	mov	r2, ip
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	07d2      	lsls	r2, r2, #31
 8000e7c:	085b      	lsrs	r3, r3, #1
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	0019      	movs	r1, r3
 8000e82:	b007      	add	sp, #28
 8000e84:	bc3c      	pop	{r2, r3, r4, r5}
 8000e86:	4690      	mov	r8, r2
 8000e88:	4699      	mov	r9, r3
 8000e8a:	46a2      	mov	sl, r4
 8000e8c:	46ab      	mov	fp, r5
 8000e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e90:	2300      	movs	r3, #0
 8000e92:	2280      	movs	r2, #128	; 0x80
 8000e94:	469c      	mov	ip, r3
 8000e96:	0312      	lsls	r2, r2, #12
 8000e98:	4698      	mov	r8, r3
 8000e9a:	4c03      	ldr	r4, [pc, #12]	; (8000ea8 <__aeabi_ddiv+0x1e4>)
 8000e9c:	e7e0      	b.n	8000e60 <__aeabi_ddiv+0x19c>
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	4c01      	ldr	r4, [pc, #4]	; (8000ea8 <__aeabi_ddiv+0x1e4>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	4698      	mov	r8, r3
 8000ea6:	e7db      	b.n	8000e60 <__aeabi_ddiv+0x19c>
 8000ea8:	000007ff 	.word	0x000007ff
 8000eac:	fffffc01 	.word	0xfffffc01
 8000eb0:	0800d638 	.word	0x0800d638
 8000eb4:	fffffc0d 	.word	0xfffffc0d
 8000eb8:	800fffff 	.word	0x800fffff
 8000ebc:	45d9      	cmp	r9, fp
 8000ebe:	d900      	bls.n	8000ec2 <__aeabi_ddiv+0x1fe>
 8000ec0:	e139      	b.n	8001136 <__aeabi_ddiv+0x472>
 8000ec2:	d100      	bne.n	8000ec6 <__aeabi_ddiv+0x202>
 8000ec4:	e134      	b.n	8001130 <__aeabi_ddiv+0x46c>
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	4646      	mov	r6, r8
 8000eca:	464d      	mov	r5, r9
 8000ecc:	469a      	mov	sl, r3
 8000ece:	3c01      	subs	r4, #1
 8000ed0:	465b      	mov	r3, fp
 8000ed2:	0e0a      	lsrs	r2, r1, #24
 8000ed4:	021b      	lsls	r3, r3, #8
 8000ed6:	431a      	orrs	r2, r3
 8000ed8:	020b      	lsls	r3, r1, #8
 8000eda:	0c17      	lsrs	r7, r2, #16
 8000edc:	9303      	str	r3, [sp, #12]
 8000ede:	0413      	lsls	r3, r2, #16
 8000ee0:	0c1b      	lsrs	r3, r3, #16
 8000ee2:	0039      	movs	r1, r7
 8000ee4:	0028      	movs	r0, r5
 8000ee6:	4690      	mov	r8, r2
 8000ee8:	9301      	str	r3, [sp, #4]
 8000eea:	f7ff f929 	bl	8000140 <__udivsi3>
 8000eee:	0002      	movs	r2, r0
 8000ef0:	9b01      	ldr	r3, [sp, #4]
 8000ef2:	4683      	mov	fp, r0
 8000ef4:	435a      	muls	r2, r3
 8000ef6:	0028      	movs	r0, r5
 8000ef8:	0039      	movs	r1, r7
 8000efa:	4691      	mov	r9, r2
 8000efc:	f7ff f9a6 	bl	800024c <__aeabi_uidivmod>
 8000f00:	0c35      	lsrs	r5, r6, #16
 8000f02:	0409      	lsls	r1, r1, #16
 8000f04:	430d      	orrs	r5, r1
 8000f06:	45a9      	cmp	r9, r5
 8000f08:	d90d      	bls.n	8000f26 <__aeabi_ddiv+0x262>
 8000f0a:	465b      	mov	r3, fp
 8000f0c:	4445      	add	r5, r8
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	45a8      	cmp	r8, r5
 8000f12:	d900      	bls.n	8000f16 <__aeabi_ddiv+0x252>
 8000f14:	e13a      	b.n	800118c <__aeabi_ddiv+0x4c8>
 8000f16:	45a9      	cmp	r9, r5
 8000f18:	d800      	bhi.n	8000f1c <__aeabi_ddiv+0x258>
 8000f1a:	e137      	b.n	800118c <__aeabi_ddiv+0x4c8>
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	425b      	negs	r3, r3
 8000f20:	469c      	mov	ip, r3
 8000f22:	4445      	add	r5, r8
 8000f24:	44e3      	add	fp, ip
 8000f26:	464b      	mov	r3, r9
 8000f28:	1aeb      	subs	r3, r5, r3
 8000f2a:	0039      	movs	r1, r7
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	9304      	str	r3, [sp, #16]
 8000f30:	f7ff f906 	bl	8000140 <__udivsi3>
 8000f34:	9b01      	ldr	r3, [sp, #4]
 8000f36:	0005      	movs	r5, r0
 8000f38:	4343      	muls	r3, r0
 8000f3a:	0039      	movs	r1, r7
 8000f3c:	9804      	ldr	r0, [sp, #16]
 8000f3e:	4699      	mov	r9, r3
 8000f40:	f7ff f984 	bl	800024c <__aeabi_uidivmod>
 8000f44:	0433      	lsls	r3, r6, #16
 8000f46:	0409      	lsls	r1, r1, #16
 8000f48:	0c1b      	lsrs	r3, r3, #16
 8000f4a:	430b      	orrs	r3, r1
 8000f4c:	4599      	cmp	r9, r3
 8000f4e:	d909      	bls.n	8000f64 <__aeabi_ddiv+0x2a0>
 8000f50:	4443      	add	r3, r8
 8000f52:	1e6a      	subs	r2, r5, #1
 8000f54:	4598      	cmp	r8, r3
 8000f56:	d900      	bls.n	8000f5a <__aeabi_ddiv+0x296>
 8000f58:	e11a      	b.n	8001190 <__aeabi_ddiv+0x4cc>
 8000f5a:	4599      	cmp	r9, r3
 8000f5c:	d800      	bhi.n	8000f60 <__aeabi_ddiv+0x29c>
 8000f5e:	e117      	b.n	8001190 <__aeabi_ddiv+0x4cc>
 8000f60:	3d02      	subs	r5, #2
 8000f62:	4443      	add	r3, r8
 8000f64:	464a      	mov	r2, r9
 8000f66:	1a9b      	subs	r3, r3, r2
 8000f68:	465a      	mov	r2, fp
 8000f6a:	0412      	lsls	r2, r2, #16
 8000f6c:	432a      	orrs	r2, r5
 8000f6e:	9903      	ldr	r1, [sp, #12]
 8000f70:	4693      	mov	fp, r2
 8000f72:	0c10      	lsrs	r0, r2, #16
 8000f74:	0c0a      	lsrs	r2, r1, #16
 8000f76:	4691      	mov	r9, r2
 8000f78:	0409      	lsls	r1, r1, #16
 8000f7a:	465a      	mov	r2, fp
 8000f7c:	0c09      	lsrs	r1, r1, #16
 8000f7e:	464e      	mov	r6, r9
 8000f80:	000d      	movs	r5, r1
 8000f82:	0412      	lsls	r2, r2, #16
 8000f84:	0c12      	lsrs	r2, r2, #16
 8000f86:	4345      	muls	r5, r0
 8000f88:	9105      	str	r1, [sp, #20]
 8000f8a:	4351      	muls	r1, r2
 8000f8c:	4372      	muls	r2, r6
 8000f8e:	4370      	muls	r0, r6
 8000f90:	1952      	adds	r2, r2, r5
 8000f92:	0c0e      	lsrs	r6, r1, #16
 8000f94:	18b2      	adds	r2, r6, r2
 8000f96:	4295      	cmp	r5, r2
 8000f98:	d903      	bls.n	8000fa2 <__aeabi_ddiv+0x2de>
 8000f9a:	2580      	movs	r5, #128	; 0x80
 8000f9c:	026d      	lsls	r5, r5, #9
 8000f9e:	46ac      	mov	ip, r5
 8000fa0:	4460      	add	r0, ip
 8000fa2:	0c15      	lsrs	r5, r2, #16
 8000fa4:	0409      	lsls	r1, r1, #16
 8000fa6:	0412      	lsls	r2, r2, #16
 8000fa8:	0c09      	lsrs	r1, r1, #16
 8000faa:	1828      	adds	r0, r5, r0
 8000fac:	1852      	adds	r2, r2, r1
 8000fae:	4283      	cmp	r3, r0
 8000fb0:	d200      	bcs.n	8000fb4 <__aeabi_ddiv+0x2f0>
 8000fb2:	e0ce      	b.n	8001152 <__aeabi_ddiv+0x48e>
 8000fb4:	d100      	bne.n	8000fb8 <__aeabi_ddiv+0x2f4>
 8000fb6:	e0c8      	b.n	800114a <__aeabi_ddiv+0x486>
 8000fb8:	1a1d      	subs	r5, r3, r0
 8000fba:	4653      	mov	r3, sl
 8000fbc:	1a9e      	subs	r6, r3, r2
 8000fbe:	45b2      	cmp	sl, r6
 8000fc0:	4192      	sbcs	r2, r2
 8000fc2:	4252      	negs	r2, r2
 8000fc4:	1aab      	subs	r3, r5, r2
 8000fc6:	469a      	mov	sl, r3
 8000fc8:	4598      	cmp	r8, r3
 8000fca:	d100      	bne.n	8000fce <__aeabi_ddiv+0x30a>
 8000fcc:	e117      	b.n	80011fe <__aeabi_ddiv+0x53a>
 8000fce:	0039      	movs	r1, r7
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	f7ff f8b5 	bl	8000140 <__udivsi3>
 8000fd6:	9b01      	ldr	r3, [sp, #4]
 8000fd8:	0005      	movs	r5, r0
 8000fda:	4343      	muls	r3, r0
 8000fdc:	0039      	movs	r1, r7
 8000fde:	4650      	mov	r0, sl
 8000fe0:	9304      	str	r3, [sp, #16]
 8000fe2:	f7ff f933 	bl	800024c <__aeabi_uidivmod>
 8000fe6:	9804      	ldr	r0, [sp, #16]
 8000fe8:	040b      	lsls	r3, r1, #16
 8000fea:	0c31      	lsrs	r1, r6, #16
 8000fec:	4319      	orrs	r1, r3
 8000fee:	4288      	cmp	r0, r1
 8000ff0:	d909      	bls.n	8001006 <__aeabi_ddiv+0x342>
 8000ff2:	4441      	add	r1, r8
 8000ff4:	1e6b      	subs	r3, r5, #1
 8000ff6:	4588      	cmp	r8, r1
 8000ff8:	d900      	bls.n	8000ffc <__aeabi_ddiv+0x338>
 8000ffa:	e107      	b.n	800120c <__aeabi_ddiv+0x548>
 8000ffc:	4288      	cmp	r0, r1
 8000ffe:	d800      	bhi.n	8001002 <__aeabi_ddiv+0x33e>
 8001000:	e104      	b.n	800120c <__aeabi_ddiv+0x548>
 8001002:	3d02      	subs	r5, #2
 8001004:	4441      	add	r1, r8
 8001006:	9b04      	ldr	r3, [sp, #16]
 8001008:	1acb      	subs	r3, r1, r3
 800100a:	0018      	movs	r0, r3
 800100c:	0039      	movs	r1, r7
 800100e:	9304      	str	r3, [sp, #16]
 8001010:	f7ff f896 	bl	8000140 <__udivsi3>
 8001014:	9b01      	ldr	r3, [sp, #4]
 8001016:	4682      	mov	sl, r0
 8001018:	4343      	muls	r3, r0
 800101a:	0039      	movs	r1, r7
 800101c:	9804      	ldr	r0, [sp, #16]
 800101e:	9301      	str	r3, [sp, #4]
 8001020:	f7ff f914 	bl	800024c <__aeabi_uidivmod>
 8001024:	9801      	ldr	r0, [sp, #4]
 8001026:	040b      	lsls	r3, r1, #16
 8001028:	0431      	lsls	r1, r6, #16
 800102a:	0c09      	lsrs	r1, r1, #16
 800102c:	4319      	orrs	r1, r3
 800102e:	4288      	cmp	r0, r1
 8001030:	d90d      	bls.n	800104e <__aeabi_ddiv+0x38a>
 8001032:	4653      	mov	r3, sl
 8001034:	4441      	add	r1, r8
 8001036:	3b01      	subs	r3, #1
 8001038:	4588      	cmp	r8, r1
 800103a:	d900      	bls.n	800103e <__aeabi_ddiv+0x37a>
 800103c:	e0e8      	b.n	8001210 <__aeabi_ddiv+0x54c>
 800103e:	4288      	cmp	r0, r1
 8001040:	d800      	bhi.n	8001044 <__aeabi_ddiv+0x380>
 8001042:	e0e5      	b.n	8001210 <__aeabi_ddiv+0x54c>
 8001044:	2302      	movs	r3, #2
 8001046:	425b      	negs	r3, r3
 8001048:	469c      	mov	ip, r3
 800104a:	4441      	add	r1, r8
 800104c:	44e2      	add	sl, ip
 800104e:	9b01      	ldr	r3, [sp, #4]
 8001050:	042d      	lsls	r5, r5, #16
 8001052:	1ace      	subs	r6, r1, r3
 8001054:	4651      	mov	r1, sl
 8001056:	4329      	orrs	r1, r5
 8001058:	9d05      	ldr	r5, [sp, #20]
 800105a:	464f      	mov	r7, r9
 800105c:	002a      	movs	r2, r5
 800105e:	040b      	lsls	r3, r1, #16
 8001060:	0c08      	lsrs	r0, r1, #16
 8001062:	0c1b      	lsrs	r3, r3, #16
 8001064:	435a      	muls	r2, r3
 8001066:	4345      	muls	r5, r0
 8001068:	437b      	muls	r3, r7
 800106a:	4378      	muls	r0, r7
 800106c:	195b      	adds	r3, r3, r5
 800106e:	0c17      	lsrs	r7, r2, #16
 8001070:	18fb      	adds	r3, r7, r3
 8001072:	429d      	cmp	r5, r3
 8001074:	d903      	bls.n	800107e <__aeabi_ddiv+0x3ba>
 8001076:	2580      	movs	r5, #128	; 0x80
 8001078:	026d      	lsls	r5, r5, #9
 800107a:	46ac      	mov	ip, r5
 800107c:	4460      	add	r0, ip
 800107e:	0c1d      	lsrs	r5, r3, #16
 8001080:	0412      	lsls	r2, r2, #16
 8001082:	041b      	lsls	r3, r3, #16
 8001084:	0c12      	lsrs	r2, r2, #16
 8001086:	1828      	adds	r0, r5, r0
 8001088:	189b      	adds	r3, r3, r2
 800108a:	4286      	cmp	r6, r0
 800108c:	d200      	bcs.n	8001090 <__aeabi_ddiv+0x3cc>
 800108e:	e093      	b.n	80011b8 <__aeabi_ddiv+0x4f4>
 8001090:	d100      	bne.n	8001094 <__aeabi_ddiv+0x3d0>
 8001092:	e08e      	b.n	80011b2 <__aeabi_ddiv+0x4ee>
 8001094:	2301      	movs	r3, #1
 8001096:	4319      	orrs	r1, r3
 8001098:	4ba0      	ldr	r3, [pc, #640]	; (800131c <__aeabi_ddiv+0x658>)
 800109a:	18e3      	adds	r3, r4, r3
 800109c:	2b00      	cmp	r3, #0
 800109e:	dc00      	bgt.n	80010a2 <__aeabi_ddiv+0x3de>
 80010a0:	e099      	b.n	80011d6 <__aeabi_ddiv+0x512>
 80010a2:	074a      	lsls	r2, r1, #29
 80010a4:	d000      	beq.n	80010a8 <__aeabi_ddiv+0x3e4>
 80010a6:	e09e      	b.n	80011e6 <__aeabi_ddiv+0x522>
 80010a8:	465a      	mov	r2, fp
 80010aa:	01d2      	lsls	r2, r2, #7
 80010ac:	d506      	bpl.n	80010bc <__aeabi_ddiv+0x3f8>
 80010ae:	465a      	mov	r2, fp
 80010b0:	4b9b      	ldr	r3, [pc, #620]	; (8001320 <__aeabi_ddiv+0x65c>)
 80010b2:	401a      	ands	r2, r3
 80010b4:	2380      	movs	r3, #128	; 0x80
 80010b6:	4693      	mov	fp, r2
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	18e3      	adds	r3, r4, r3
 80010bc:	4a99      	ldr	r2, [pc, #612]	; (8001324 <__aeabi_ddiv+0x660>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	dd68      	ble.n	8001194 <__aeabi_ddiv+0x4d0>
 80010c2:	2301      	movs	r3, #1
 80010c4:	9a02      	ldr	r2, [sp, #8]
 80010c6:	4c98      	ldr	r4, [pc, #608]	; (8001328 <__aeabi_ddiv+0x664>)
 80010c8:	401a      	ands	r2, r3
 80010ca:	2300      	movs	r3, #0
 80010cc:	4694      	mov	ip, r2
 80010ce:	4698      	mov	r8, r3
 80010d0:	2200      	movs	r2, #0
 80010d2:	e6c5      	b.n	8000e60 <__aeabi_ddiv+0x19c>
 80010d4:	2280      	movs	r2, #128	; 0x80
 80010d6:	464b      	mov	r3, r9
 80010d8:	0312      	lsls	r2, r2, #12
 80010da:	4213      	tst	r3, r2
 80010dc:	d00a      	beq.n	80010f4 <__aeabi_ddiv+0x430>
 80010de:	465b      	mov	r3, fp
 80010e0:	4213      	tst	r3, r2
 80010e2:	d106      	bne.n	80010f2 <__aeabi_ddiv+0x42e>
 80010e4:	431a      	orrs	r2, r3
 80010e6:	0312      	lsls	r2, r2, #12
 80010e8:	0b12      	lsrs	r2, r2, #12
 80010ea:	46ac      	mov	ip, r5
 80010ec:	4688      	mov	r8, r1
 80010ee:	4c8e      	ldr	r4, [pc, #568]	; (8001328 <__aeabi_ddiv+0x664>)
 80010f0:	e6b6      	b.n	8000e60 <__aeabi_ddiv+0x19c>
 80010f2:	464b      	mov	r3, r9
 80010f4:	431a      	orrs	r2, r3
 80010f6:	0312      	lsls	r2, r2, #12
 80010f8:	0b12      	lsrs	r2, r2, #12
 80010fa:	46bc      	mov	ip, r7
 80010fc:	4c8a      	ldr	r4, [pc, #552]	; (8001328 <__aeabi_ddiv+0x664>)
 80010fe:	e6af      	b.n	8000e60 <__aeabi_ddiv+0x19c>
 8001100:	0003      	movs	r3, r0
 8001102:	465a      	mov	r2, fp
 8001104:	3b28      	subs	r3, #40	; 0x28
 8001106:	409a      	lsls	r2, r3
 8001108:	2300      	movs	r3, #0
 800110a:	4691      	mov	r9, r2
 800110c:	4698      	mov	r8, r3
 800110e:	e657      	b.n	8000dc0 <__aeabi_ddiv+0xfc>
 8001110:	4658      	mov	r0, fp
 8001112:	f001 f86f 	bl	80021f4 <__clzsi2>
 8001116:	3020      	adds	r0, #32
 8001118:	e640      	b.n	8000d9c <__aeabi_ddiv+0xd8>
 800111a:	0003      	movs	r3, r0
 800111c:	4652      	mov	r2, sl
 800111e:	3b28      	subs	r3, #40	; 0x28
 8001120:	409a      	lsls	r2, r3
 8001122:	2100      	movs	r1, #0
 8001124:	4693      	mov	fp, r2
 8001126:	e677      	b.n	8000e18 <__aeabi_ddiv+0x154>
 8001128:	f001 f864 	bl	80021f4 <__clzsi2>
 800112c:	3020      	adds	r0, #32
 800112e:	e65f      	b.n	8000df0 <__aeabi_ddiv+0x12c>
 8001130:	4588      	cmp	r8, r1
 8001132:	d200      	bcs.n	8001136 <__aeabi_ddiv+0x472>
 8001134:	e6c7      	b.n	8000ec6 <__aeabi_ddiv+0x202>
 8001136:	464b      	mov	r3, r9
 8001138:	07de      	lsls	r6, r3, #31
 800113a:	085d      	lsrs	r5, r3, #1
 800113c:	4643      	mov	r3, r8
 800113e:	085b      	lsrs	r3, r3, #1
 8001140:	431e      	orrs	r6, r3
 8001142:	4643      	mov	r3, r8
 8001144:	07db      	lsls	r3, r3, #31
 8001146:	469a      	mov	sl, r3
 8001148:	e6c2      	b.n	8000ed0 <__aeabi_ddiv+0x20c>
 800114a:	2500      	movs	r5, #0
 800114c:	4592      	cmp	sl, r2
 800114e:	d300      	bcc.n	8001152 <__aeabi_ddiv+0x48e>
 8001150:	e733      	b.n	8000fba <__aeabi_ddiv+0x2f6>
 8001152:	9e03      	ldr	r6, [sp, #12]
 8001154:	4659      	mov	r1, fp
 8001156:	46b4      	mov	ip, r6
 8001158:	44e2      	add	sl, ip
 800115a:	45b2      	cmp	sl, r6
 800115c:	41ad      	sbcs	r5, r5
 800115e:	426d      	negs	r5, r5
 8001160:	4445      	add	r5, r8
 8001162:	18eb      	adds	r3, r5, r3
 8001164:	3901      	subs	r1, #1
 8001166:	4598      	cmp	r8, r3
 8001168:	d207      	bcs.n	800117a <__aeabi_ddiv+0x4b6>
 800116a:	4298      	cmp	r0, r3
 800116c:	d900      	bls.n	8001170 <__aeabi_ddiv+0x4ac>
 800116e:	e07f      	b.n	8001270 <__aeabi_ddiv+0x5ac>
 8001170:	d100      	bne.n	8001174 <__aeabi_ddiv+0x4b0>
 8001172:	e0bc      	b.n	80012ee <__aeabi_ddiv+0x62a>
 8001174:	1a1d      	subs	r5, r3, r0
 8001176:	468b      	mov	fp, r1
 8001178:	e71f      	b.n	8000fba <__aeabi_ddiv+0x2f6>
 800117a:	4598      	cmp	r8, r3
 800117c:	d1fa      	bne.n	8001174 <__aeabi_ddiv+0x4b0>
 800117e:	9d03      	ldr	r5, [sp, #12]
 8001180:	4555      	cmp	r5, sl
 8001182:	d9f2      	bls.n	800116a <__aeabi_ddiv+0x4a6>
 8001184:	4643      	mov	r3, r8
 8001186:	468b      	mov	fp, r1
 8001188:	1a1d      	subs	r5, r3, r0
 800118a:	e716      	b.n	8000fba <__aeabi_ddiv+0x2f6>
 800118c:	469b      	mov	fp, r3
 800118e:	e6ca      	b.n	8000f26 <__aeabi_ddiv+0x262>
 8001190:	0015      	movs	r5, r2
 8001192:	e6e7      	b.n	8000f64 <__aeabi_ddiv+0x2a0>
 8001194:	465a      	mov	r2, fp
 8001196:	08c9      	lsrs	r1, r1, #3
 8001198:	0752      	lsls	r2, r2, #29
 800119a:	430a      	orrs	r2, r1
 800119c:	055b      	lsls	r3, r3, #21
 800119e:	4690      	mov	r8, r2
 80011a0:	0d5c      	lsrs	r4, r3, #21
 80011a2:	465a      	mov	r2, fp
 80011a4:	2301      	movs	r3, #1
 80011a6:	9902      	ldr	r1, [sp, #8]
 80011a8:	0252      	lsls	r2, r2, #9
 80011aa:	4019      	ands	r1, r3
 80011ac:	0b12      	lsrs	r2, r2, #12
 80011ae:	468c      	mov	ip, r1
 80011b0:	e656      	b.n	8000e60 <__aeabi_ddiv+0x19c>
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d100      	bne.n	80011b8 <__aeabi_ddiv+0x4f4>
 80011b6:	e76f      	b.n	8001098 <__aeabi_ddiv+0x3d4>
 80011b8:	4446      	add	r6, r8
 80011ba:	1e4a      	subs	r2, r1, #1
 80011bc:	45b0      	cmp	r8, r6
 80011be:	d929      	bls.n	8001214 <__aeabi_ddiv+0x550>
 80011c0:	0011      	movs	r1, r2
 80011c2:	4286      	cmp	r6, r0
 80011c4:	d000      	beq.n	80011c8 <__aeabi_ddiv+0x504>
 80011c6:	e765      	b.n	8001094 <__aeabi_ddiv+0x3d0>
 80011c8:	9a03      	ldr	r2, [sp, #12]
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d000      	beq.n	80011d0 <__aeabi_ddiv+0x50c>
 80011ce:	e761      	b.n	8001094 <__aeabi_ddiv+0x3d0>
 80011d0:	e762      	b.n	8001098 <__aeabi_ddiv+0x3d4>
 80011d2:	2101      	movs	r1, #1
 80011d4:	4249      	negs	r1, r1
 80011d6:	2001      	movs	r0, #1
 80011d8:	1ac2      	subs	r2, r0, r3
 80011da:	2a38      	cmp	r2, #56	; 0x38
 80011dc:	dd21      	ble.n	8001222 <__aeabi_ddiv+0x55e>
 80011de:	9b02      	ldr	r3, [sp, #8]
 80011e0:	4003      	ands	r3, r0
 80011e2:	469c      	mov	ip, r3
 80011e4:	e638      	b.n	8000e58 <__aeabi_ddiv+0x194>
 80011e6:	220f      	movs	r2, #15
 80011e8:	400a      	ands	r2, r1
 80011ea:	2a04      	cmp	r2, #4
 80011ec:	d100      	bne.n	80011f0 <__aeabi_ddiv+0x52c>
 80011ee:	e75b      	b.n	80010a8 <__aeabi_ddiv+0x3e4>
 80011f0:	000a      	movs	r2, r1
 80011f2:	1d11      	adds	r1, r2, #4
 80011f4:	4291      	cmp	r1, r2
 80011f6:	4192      	sbcs	r2, r2
 80011f8:	4252      	negs	r2, r2
 80011fa:	4493      	add	fp, r2
 80011fc:	e754      	b.n	80010a8 <__aeabi_ddiv+0x3e4>
 80011fe:	4b47      	ldr	r3, [pc, #284]	; (800131c <__aeabi_ddiv+0x658>)
 8001200:	18e3      	adds	r3, r4, r3
 8001202:	2b00      	cmp	r3, #0
 8001204:	dde5      	ble.n	80011d2 <__aeabi_ddiv+0x50e>
 8001206:	2201      	movs	r2, #1
 8001208:	4252      	negs	r2, r2
 800120a:	e7f2      	b.n	80011f2 <__aeabi_ddiv+0x52e>
 800120c:	001d      	movs	r5, r3
 800120e:	e6fa      	b.n	8001006 <__aeabi_ddiv+0x342>
 8001210:	469a      	mov	sl, r3
 8001212:	e71c      	b.n	800104e <__aeabi_ddiv+0x38a>
 8001214:	42b0      	cmp	r0, r6
 8001216:	d839      	bhi.n	800128c <__aeabi_ddiv+0x5c8>
 8001218:	d06e      	beq.n	80012f8 <__aeabi_ddiv+0x634>
 800121a:	0011      	movs	r1, r2
 800121c:	e73a      	b.n	8001094 <__aeabi_ddiv+0x3d0>
 800121e:	9302      	str	r3, [sp, #8]
 8001220:	e73a      	b.n	8001098 <__aeabi_ddiv+0x3d4>
 8001222:	2a1f      	cmp	r2, #31
 8001224:	dc3c      	bgt.n	80012a0 <__aeabi_ddiv+0x5dc>
 8001226:	2320      	movs	r3, #32
 8001228:	1a9b      	subs	r3, r3, r2
 800122a:	000c      	movs	r4, r1
 800122c:	4658      	mov	r0, fp
 800122e:	4099      	lsls	r1, r3
 8001230:	4098      	lsls	r0, r3
 8001232:	1e4b      	subs	r3, r1, #1
 8001234:	4199      	sbcs	r1, r3
 8001236:	465b      	mov	r3, fp
 8001238:	40d4      	lsrs	r4, r2
 800123a:	40d3      	lsrs	r3, r2
 800123c:	4320      	orrs	r0, r4
 800123e:	4308      	orrs	r0, r1
 8001240:	001a      	movs	r2, r3
 8001242:	0743      	lsls	r3, r0, #29
 8001244:	d009      	beq.n	800125a <__aeabi_ddiv+0x596>
 8001246:	230f      	movs	r3, #15
 8001248:	4003      	ands	r3, r0
 800124a:	2b04      	cmp	r3, #4
 800124c:	d005      	beq.n	800125a <__aeabi_ddiv+0x596>
 800124e:	0001      	movs	r1, r0
 8001250:	1d08      	adds	r0, r1, #4
 8001252:	4288      	cmp	r0, r1
 8001254:	419b      	sbcs	r3, r3
 8001256:	425b      	negs	r3, r3
 8001258:	18d2      	adds	r2, r2, r3
 800125a:	0213      	lsls	r3, r2, #8
 800125c:	d53a      	bpl.n	80012d4 <__aeabi_ddiv+0x610>
 800125e:	2301      	movs	r3, #1
 8001260:	9a02      	ldr	r2, [sp, #8]
 8001262:	2401      	movs	r4, #1
 8001264:	401a      	ands	r2, r3
 8001266:	2300      	movs	r3, #0
 8001268:	4694      	mov	ip, r2
 800126a:	4698      	mov	r8, r3
 800126c:	2200      	movs	r2, #0
 800126e:	e5f7      	b.n	8000e60 <__aeabi_ddiv+0x19c>
 8001270:	2102      	movs	r1, #2
 8001272:	4249      	negs	r1, r1
 8001274:	468c      	mov	ip, r1
 8001276:	9d03      	ldr	r5, [sp, #12]
 8001278:	44e3      	add	fp, ip
 800127a:	46ac      	mov	ip, r5
 800127c:	44e2      	add	sl, ip
 800127e:	45aa      	cmp	sl, r5
 8001280:	41ad      	sbcs	r5, r5
 8001282:	426d      	negs	r5, r5
 8001284:	4445      	add	r5, r8
 8001286:	18ed      	adds	r5, r5, r3
 8001288:	1a2d      	subs	r5, r5, r0
 800128a:	e696      	b.n	8000fba <__aeabi_ddiv+0x2f6>
 800128c:	1e8a      	subs	r2, r1, #2
 800128e:	9903      	ldr	r1, [sp, #12]
 8001290:	004d      	lsls	r5, r1, #1
 8001292:	428d      	cmp	r5, r1
 8001294:	4189      	sbcs	r1, r1
 8001296:	4249      	negs	r1, r1
 8001298:	4441      	add	r1, r8
 800129a:	1876      	adds	r6, r6, r1
 800129c:	9503      	str	r5, [sp, #12]
 800129e:	e78f      	b.n	80011c0 <__aeabi_ddiv+0x4fc>
 80012a0:	201f      	movs	r0, #31
 80012a2:	4240      	negs	r0, r0
 80012a4:	1ac3      	subs	r3, r0, r3
 80012a6:	4658      	mov	r0, fp
 80012a8:	40d8      	lsrs	r0, r3
 80012aa:	0003      	movs	r3, r0
 80012ac:	2a20      	cmp	r2, #32
 80012ae:	d028      	beq.n	8001302 <__aeabi_ddiv+0x63e>
 80012b0:	2040      	movs	r0, #64	; 0x40
 80012b2:	465d      	mov	r5, fp
 80012b4:	1a82      	subs	r2, r0, r2
 80012b6:	4095      	lsls	r5, r2
 80012b8:	4329      	orrs	r1, r5
 80012ba:	1e4a      	subs	r2, r1, #1
 80012bc:	4191      	sbcs	r1, r2
 80012be:	4319      	orrs	r1, r3
 80012c0:	2307      	movs	r3, #7
 80012c2:	2200      	movs	r2, #0
 80012c4:	400b      	ands	r3, r1
 80012c6:	d009      	beq.n	80012dc <__aeabi_ddiv+0x618>
 80012c8:	230f      	movs	r3, #15
 80012ca:	2200      	movs	r2, #0
 80012cc:	400b      	ands	r3, r1
 80012ce:	0008      	movs	r0, r1
 80012d0:	2b04      	cmp	r3, #4
 80012d2:	d1bd      	bne.n	8001250 <__aeabi_ddiv+0x58c>
 80012d4:	0001      	movs	r1, r0
 80012d6:	0753      	lsls	r3, r2, #29
 80012d8:	0252      	lsls	r2, r2, #9
 80012da:	0b12      	lsrs	r2, r2, #12
 80012dc:	08c9      	lsrs	r1, r1, #3
 80012de:	4319      	orrs	r1, r3
 80012e0:	2301      	movs	r3, #1
 80012e2:	4688      	mov	r8, r1
 80012e4:	9902      	ldr	r1, [sp, #8]
 80012e6:	2400      	movs	r4, #0
 80012e8:	4019      	ands	r1, r3
 80012ea:	468c      	mov	ip, r1
 80012ec:	e5b8      	b.n	8000e60 <__aeabi_ddiv+0x19c>
 80012ee:	4552      	cmp	r2, sl
 80012f0:	d8be      	bhi.n	8001270 <__aeabi_ddiv+0x5ac>
 80012f2:	468b      	mov	fp, r1
 80012f4:	2500      	movs	r5, #0
 80012f6:	e660      	b.n	8000fba <__aeabi_ddiv+0x2f6>
 80012f8:	9d03      	ldr	r5, [sp, #12]
 80012fa:	429d      	cmp	r5, r3
 80012fc:	d3c6      	bcc.n	800128c <__aeabi_ddiv+0x5c8>
 80012fe:	0011      	movs	r1, r2
 8001300:	e762      	b.n	80011c8 <__aeabi_ddiv+0x504>
 8001302:	2500      	movs	r5, #0
 8001304:	e7d8      	b.n	80012b8 <__aeabi_ddiv+0x5f4>
 8001306:	2280      	movs	r2, #128	; 0x80
 8001308:	465b      	mov	r3, fp
 800130a:	0312      	lsls	r2, r2, #12
 800130c:	431a      	orrs	r2, r3
 800130e:	9b01      	ldr	r3, [sp, #4]
 8001310:	0312      	lsls	r2, r2, #12
 8001312:	0b12      	lsrs	r2, r2, #12
 8001314:	469c      	mov	ip, r3
 8001316:	4688      	mov	r8, r1
 8001318:	4c03      	ldr	r4, [pc, #12]	; (8001328 <__aeabi_ddiv+0x664>)
 800131a:	e5a1      	b.n	8000e60 <__aeabi_ddiv+0x19c>
 800131c:	000003ff 	.word	0x000003ff
 8001320:	feffffff 	.word	0xfeffffff
 8001324:	000007fe 	.word	0x000007fe
 8001328:	000007ff 	.word	0x000007ff

0800132c <__eqdf2>:
 800132c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800132e:	464f      	mov	r7, r9
 8001330:	4646      	mov	r6, r8
 8001332:	46d6      	mov	lr, sl
 8001334:	005c      	lsls	r4, r3, #1
 8001336:	b5c0      	push	{r6, r7, lr}
 8001338:	031f      	lsls	r7, r3, #12
 800133a:	0fdb      	lsrs	r3, r3, #31
 800133c:	469a      	mov	sl, r3
 800133e:	4b17      	ldr	r3, [pc, #92]	; (800139c <__eqdf2+0x70>)
 8001340:	030e      	lsls	r6, r1, #12
 8001342:	004d      	lsls	r5, r1, #1
 8001344:	4684      	mov	ip, r0
 8001346:	4680      	mov	r8, r0
 8001348:	0b36      	lsrs	r6, r6, #12
 800134a:	0d6d      	lsrs	r5, r5, #21
 800134c:	0fc9      	lsrs	r1, r1, #31
 800134e:	4691      	mov	r9, r2
 8001350:	0b3f      	lsrs	r7, r7, #12
 8001352:	0d64      	lsrs	r4, r4, #21
 8001354:	2001      	movs	r0, #1
 8001356:	429d      	cmp	r5, r3
 8001358:	d008      	beq.n	800136c <__eqdf2+0x40>
 800135a:	429c      	cmp	r4, r3
 800135c:	d001      	beq.n	8001362 <__eqdf2+0x36>
 800135e:	42a5      	cmp	r5, r4
 8001360:	d00b      	beq.n	800137a <__eqdf2+0x4e>
 8001362:	bc1c      	pop	{r2, r3, r4}
 8001364:	4690      	mov	r8, r2
 8001366:	4699      	mov	r9, r3
 8001368:	46a2      	mov	sl, r4
 800136a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800136c:	4663      	mov	r3, ip
 800136e:	4333      	orrs	r3, r6
 8001370:	d1f7      	bne.n	8001362 <__eqdf2+0x36>
 8001372:	42ac      	cmp	r4, r5
 8001374:	d1f5      	bne.n	8001362 <__eqdf2+0x36>
 8001376:	433a      	orrs	r2, r7
 8001378:	d1f3      	bne.n	8001362 <__eqdf2+0x36>
 800137a:	2001      	movs	r0, #1
 800137c:	42be      	cmp	r6, r7
 800137e:	d1f0      	bne.n	8001362 <__eqdf2+0x36>
 8001380:	45c8      	cmp	r8, r9
 8001382:	d1ee      	bne.n	8001362 <__eqdf2+0x36>
 8001384:	4551      	cmp	r1, sl
 8001386:	d007      	beq.n	8001398 <__eqdf2+0x6c>
 8001388:	2d00      	cmp	r5, #0
 800138a:	d1ea      	bne.n	8001362 <__eqdf2+0x36>
 800138c:	4663      	mov	r3, ip
 800138e:	431e      	orrs	r6, r3
 8001390:	0030      	movs	r0, r6
 8001392:	1e46      	subs	r6, r0, #1
 8001394:	41b0      	sbcs	r0, r6
 8001396:	e7e4      	b.n	8001362 <__eqdf2+0x36>
 8001398:	2000      	movs	r0, #0
 800139a:	e7e2      	b.n	8001362 <__eqdf2+0x36>
 800139c:	000007ff 	.word	0x000007ff

080013a0 <__gedf2>:
 80013a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013a2:	4645      	mov	r5, r8
 80013a4:	46de      	mov	lr, fp
 80013a6:	4657      	mov	r7, sl
 80013a8:	464e      	mov	r6, r9
 80013aa:	b5e0      	push	{r5, r6, r7, lr}
 80013ac:	031f      	lsls	r7, r3, #12
 80013ae:	0b3d      	lsrs	r5, r7, #12
 80013b0:	4f2c      	ldr	r7, [pc, #176]	; (8001464 <__gedf2+0xc4>)
 80013b2:	030e      	lsls	r6, r1, #12
 80013b4:	004c      	lsls	r4, r1, #1
 80013b6:	46ab      	mov	fp, r5
 80013b8:	005d      	lsls	r5, r3, #1
 80013ba:	4684      	mov	ip, r0
 80013bc:	0b36      	lsrs	r6, r6, #12
 80013be:	0d64      	lsrs	r4, r4, #21
 80013c0:	0fc9      	lsrs	r1, r1, #31
 80013c2:	4690      	mov	r8, r2
 80013c4:	0d6d      	lsrs	r5, r5, #21
 80013c6:	0fdb      	lsrs	r3, r3, #31
 80013c8:	42bc      	cmp	r4, r7
 80013ca:	d02a      	beq.n	8001422 <__gedf2+0x82>
 80013cc:	4f25      	ldr	r7, [pc, #148]	; (8001464 <__gedf2+0xc4>)
 80013ce:	42bd      	cmp	r5, r7
 80013d0:	d02d      	beq.n	800142e <__gedf2+0x8e>
 80013d2:	2c00      	cmp	r4, #0
 80013d4:	d10f      	bne.n	80013f6 <__gedf2+0x56>
 80013d6:	4330      	orrs	r0, r6
 80013d8:	0007      	movs	r7, r0
 80013da:	4681      	mov	r9, r0
 80013dc:	4278      	negs	r0, r7
 80013de:	4178      	adcs	r0, r7
 80013e0:	b2c0      	uxtb	r0, r0
 80013e2:	2d00      	cmp	r5, #0
 80013e4:	d117      	bne.n	8001416 <__gedf2+0x76>
 80013e6:	465f      	mov	r7, fp
 80013e8:	433a      	orrs	r2, r7
 80013ea:	d114      	bne.n	8001416 <__gedf2+0x76>
 80013ec:	464b      	mov	r3, r9
 80013ee:	2000      	movs	r0, #0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d00a      	beq.n	800140a <__gedf2+0x6a>
 80013f4:	e006      	b.n	8001404 <__gedf2+0x64>
 80013f6:	2d00      	cmp	r5, #0
 80013f8:	d102      	bne.n	8001400 <__gedf2+0x60>
 80013fa:	4658      	mov	r0, fp
 80013fc:	4302      	orrs	r2, r0
 80013fe:	d001      	beq.n	8001404 <__gedf2+0x64>
 8001400:	4299      	cmp	r1, r3
 8001402:	d018      	beq.n	8001436 <__gedf2+0x96>
 8001404:	4248      	negs	r0, r1
 8001406:	2101      	movs	r1, #1
 8001408:	4308      	orrs	r0, r1
 800140a:	bc3c      	pop	{r2, r3, r4, r5}
 800140c:	4690      	mov	r8, r2
 800140e:	4699      	mov	r9, r3
 8001410:	46a2      	mov	sl, r4
 8001412:	46ab      	mov	fp, r5
 8001414:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001416:	2800      	cmp	r0, #0
 8001418:	d0f2      	beq.n	8001400 <__gedf2+0x60>
 800141a:	2001      	movs	r0, #1
 800141c:	3b01      	subs	r3, #1
 800141e:	4318      	orrs	r0, r3
 8001420:	e7f3      	b.n	800140a <__gedf2+0x6a>
 8001422:	0037      	movs	r7, r6
 8001424:	4307      	orrs	r7, r0
 8001426:	d0d1      	beq.n	80013cc <__gedf2+0x2c>
 8001428:	2002      	movs	r0, #2
 800142a:	4240      	negs	r0, r0
 800142c:	e7ed      	b.n	800140a <__gedf2+0x6a>
 800142e:	465f      	mov	r7, fp
 8001430:	4317      	orrs	r7, r2
 8001432:	d0ce      	beq.n	80013d2 <__gedf2+0x32>
 8001434:	e7f8      	b.n	8001428 <__gedf2+0x88>
 8001436:	42ac      	cmp	r4, r5
 8001438:	dce4      	bgt.n	8001404 <__gedf2+0x64>
 800143a:	da03      	bge.n	8001444 <__gedf2+0xa4>
 800143c:	1e48      	subs	r0, r1, #1
 800143e:	2101      	movs	r1, #1
 8001440:	4308      	orrs	r0, r1
 8001442:	e7e2      	b.n	800140a <__gedf2+0x6a>
 8001444:	455e      	cmp	r6, fp
 8001446:	d8dd      	bhi.n	8001404 <__gedf2+0x64>
 8001448:	d006      	beq.n	8001458 <__gedf2+0xb8>
 800144a:	2000      	movs	r0, #0
 800144c:	455e      	cmp	r6, fp
 800144e:	d2dc      	bcs.n	800140a <__gedf2+0x6a>
 8001450:	2301      	movs	r3, #1
 8001452:	1e48      	subs	r0, r1, #1
 8001454:	4318      	orrs	r0, r3
 8001456:	e7d8      	b.n	800140a <__gedf2+0x6a>
 8001458:	45c4      	cmp	ip, r8
 800145a:	d8d3      	bhi.n	8001404 <__gedf2+0x64>
 800145c:	2000      	movs	r0, #0
 800145e:	45c4      	cmp	ip, r8
 8001460:	d3f6      	bcc.n	8001450 <__gedf2+0xb0>
 8001462:	e7d2      	b.n	800140a <__gedf2+0x6a>
 8001464:	000007ff 	.word	0x000007ff

08001468 <__ledf2>:
 8001468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800146a:	464e      	mov	r6, r9
 800146c:	4645      	mov	r5, r8
 800146e:	46de      	mov	lr, fp
 8001470:	4657      	mov	r7, sl
 8001472:	005c      	lsls	r4, r3, #1
 8001474:	b5e0      	push	{r5, r6, r7, lr}
 8001476:	031f      	lsls	r7, r3, #12
 8001478:	0fdb      	lsrs	r3, r3, #31
 800147a:	4699      	mov	r9, r3
 800147c:	4b2a      	ldr	r3, [pc, #168]	; (8001528 <__ledf2+0xc0>)
 800147e:	030e      	lsls	r6, r1, #12
 8001480:	004d      	lsls	r5, r1, #1
 8001482:	0fc9      	lsrs	r1, r1, #31
 8001484:	4684      	mov	ip, r0
 8001486:	0b36      	lsrs	r6, r6, #12
 8001488:	0d6d      	lsrs	r5, r5, #21
 800148a:	468b      	mov	fp, r1
 800148c:	4690      	mov	r8, r2
 800148e:	0b3f      	lsrs	r7, r7, #12
 8001490:	0d64      	lsrs	r4, r4, #21
 8001492:	429d      	cmp	r5, r3
 8001494:	d020      	beq.n	80014d8 <__ledf2+0x70>
 8001496:	4b24      	ldr	r3, [pc, #144]	; (8001528 <__ledf2+0xc0>)
 8001498:	429c      	cmp	r4, r3
 800149a:	d022      	beq.n	80014e2 <__ledf2+0x7a>
 800149c:	2d00      	cmp	r5, #0
 800149e:	d112      	bne.n	80014c6 <__ledf2+0x5e>
 80014a0:	4330      	orrs	r0, r6
 80014a2:	4243      	negs	r3, r0
 80014a4:	4143      	adcs	r3, r0
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	2c00      	cmp	r4, #0
 80014aa:	d01f      	beq.n	80014ec <__ledf2+0x84>
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d00c      	beq.n	80014ca <__ledf2+0x62>
 80014b0:	464b      	mov	r3, r9
 80014b2:	2001      	movs	r0, #1
 80014b4:	3b01      	subs	r3, #1
 80014b6:	4303      	orrs	r3, r0
 80014b8:	0018      	movs	r0, r3
 80014ba:	bc3c      	pop	{r2, r3, r4, r5}
 80014bc:	4690      	mov	r8, r2
 80014be:	4699      	mov	r9, r3
 80014c0:	46a2      	mov	sl, r4
 80014c2:	46ab      	mov	fp, r5
 80014c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014c6:	2c00      	cmp	r4, #0
 80014c8:	d016      	beq.n	80014f8 <__ledf2+0x90>
 80014ca:	45cb      	cmp	fp, r9
 80014cc:	d017      	beq.n	80014fe <__ledf2+0x96>
 80014ce:	465b      	mov	r3, fp
 80014d0:	4259      	negs	r1, r3
 80014d2:	2301      	movs	r3, #1
 80014d4:	430b      	orrs	r3, r1
 80014d6:	e7ef      	b.n	80014b8 <__ledf2+0x50>
 80014d8:	0031      	movs	r1, r6
 80014da:	2302      	movs	r3, #2
 80014dc:	4301      	orrs	r1, r0
 80014de:	d1eb      	bne.n	80014b8 <__ledf2+0x50>
 80014e0:	e7d9      	b.n	8001496 <__ledf2+0x2e>
 80014e2:	0039      	movs	r1, r7
 80014e4:	2302      	movs	r3, #2
 80014e6:	4311      	orrs	r1, r2
 80014e8:	d1e6      	bne.n	80014b8 <__ledf2+0x50>
 80014ea:	e7d7      	b.n	800149c <__ledf2+0x34>
 80014ec:	433a      	orrs	r2, r7
 80014ee:	d1dd      	bne.n	80014ac <__ledf2+0x44>
 80014f0:	2300      	movs	r3, #0
 80014f2:	2800      	cmp	r0, #0
 80014f4:	d0e0      	beq.n	80014b8 <__ledf2+0x50>
 80014f6:	e7ea      	b.n	80014ce <__ledf2+0x66>
 80014f8:	433a      	orrs	r2, r7
 80014fa:	d1e6      	bne.n	80014ca <__ledf2+0x62>
 80014fc:	e7e7      	b.n	80014ce <__ledf2+0x66>
 80014fe:	42a5      	cmp	r5, r4
 8001500:	dce5      	bgt.n	80014ce <__ledf2+0x66>
 8001502:	db05      	blt.n	8001510 <__ledf2+0xa8>
 8001504:	42be      	cmp	r6, r7
 8001506:	d8e2      	bhi.n	80014ce <__ledf2+0x66>
 8001508:	d007      	beq.n	800151a <__ledf2+0xb2>
 800150a:	2300      	movs	r3, #0
 800150c:	42be      	cmp	r6, r7
 800150e:	d2d3      	bcs.n	80014b8 <__ledf2+0x50>
 8001510:	4659      	mov	r1, fp
 8001512:	2301      	movs	r3, #1
 8001514:	3901      	subs	r1, #1
 8001516:	430b      	orrs	r3, r1
 8001518:	e7ce      	b.n	80014b8 <__ledf2+0x50>
 800151a:	45c4      	cmp	ip, r8
 800151c:	d8d7      	bhi.n	80014ce <__ledf2+0x66>
 800151e:	2300      	movs	r3, #0
 8001520:	45c4      	cmp	ip, r8
 8001522:	d3f5      	bcc.n	8001510 <__ledf2+0xa8>
 8001524:	e7c8      	b.n	80014b8 <__ledf2+0x50>
 8001526:	46c0      	nop			; (mov r8, r8)
 8001528:	000007ff 	.word	0x000007ff

0800152c <__aeabi_dmul>:
 800152c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800152e:	4657      	mov	r7, sl
 8001530:	4645      	mov	r5, r8
 8001532:	46de      	mov	lr, fp
 8001534:	464e      	mov	r6, r9
 8001536:	b5e0      	push	{r5, r6, r7, lr}
 8001538:	030c      	lsls	r4, r1, #12
 800153a:	4698      	mov	r8, r3
 800153c:	004e      	lsls	r6, r1, #1
 800153e:	0b23      	lsrs	r3, r4, #12
 8001540:	b087      	sub	sp, #28
 8001542:	0007      	movs	r7, r0
 8001544:	4692      	mov	sl, r2
 8001546:	469b      	mov	fp, r3
 8001548:	0d76      	lsrs	r6, r6, #21
 800154a:	0fcd      	lsrs	r5, r1, #31
 800154c:	2e00      	cmp	r6, #0
 800154e:	d06b      	beq.n	8001628 <__aeabi_dmul+0xfc>
 8001550:	4b6d      	ldr	r3, [pc, #436]	; (8001708 <__aeabi_dmul+0x1dc>)
 8001552:	429e      	cmp	r6, r3
 8001554:	d035      	beq.n	80015c2 <__aeabi_dmul+0x96>
 8001556:	2480      	movs	r4, #128	; 0x80
 8001558:	465b      	mov	r3, fp
 800155a:	0f42      	lsrs	r2, r0, #29
 800155c:	0424      	lsls	r4, r4, #16
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	4314      	orrs	r4, r2
 8001562:	431c      	orrs	r4, r3
 8001564:	00c3      	lsls	r3, r0, #3
 8001566:	4699      	mov	r9, r3
 8001568:	4b68      	ldr	r3, [pc, #416]	; (800170c <__aeabi_dmul+0x1e0>)
 800156a:	46a3      	mov	fp, r4
 800156c:	469c      	mov	ip, r3
 800156e:	2300      	movs	r3, #0
 8001570:	2700      	movs	r7, #0
 8001572:	4466      	add	r6, ip
 8001574:	9302      	str	r3, [sp, #8]
 8001576:	4643      	mov	r3, r8
 8001578:	031c      	lsls	r4, r3, #12
 800157a:	005a      	lsls	r2, r3, #1
 800157c:	0fdb      	lsrs	r3, r3, #31
 800157e:	4650      	mov	r0, sl
 8001580:	0b24      	lsrs	r4, r4, #12
 8001582:	0d52      	lsrs	r2, r2, #21
 8001584:	4698      	mov	r8, r3
 8001586:	d100      	bne.n	800158a <__aeabi_dmul+0x5e>
 8001588:	e076      	b.n	8001678 <__aeabi_dmul+0x14c>
 800158a:	4b5f      	ldr	r3, [pc, #380]	; (8001708 <__aeabi_dmul+0x1dc>)
 800158c:	429a      	cmp	r2, r3
 800158e:	d06d      	beq.n	800166c <__aeabi_dmul+0x140>
 8001590:	2380      	movs	r3, #128	; 0x80
 8001592:	0f41      	lsrs	r1, r0, #29
 8001594:	041b      	lsls	r3, r3, #16
 8001596:	430b      	orrs	r3, r1
 8001598:	495c      	ldr	r1, [pc, #368]	; (800170c <__aeabi_dmul+0x1e0>)
 800159a:	00e4      	lsls	r4, r4, #3
 800159c:	468c      	mov	ip, r1
 800159e:	431c      	orrs	r4, r3
 80015a0:	00c3      	lsls	r3, r0, #3
 80015a2:	2000      	movs	r0, #0
 80015a4:	4462      	add	r2, ip
 80015a6:	4641      	mov	r1, r8
 80015a8:	18b6      	adds	r6, r6, r2
 80015aa:	4069      	eors	r1, r5
 80015ac:	1c72      	adds	r2, r6, #1
 80015ae:	9101      	str	r1, [sp, #4]
 80015b0:	4694      	mov	ip, r2
 80015b2:	4307      	orrs	r7, r0
 80015b4:	2f0f      	cmp	r7, #15
 80015b6:	d900      	bls.n	80015ba <__aeabi_dmul+0x8e>
 80015b8:	e0b0      	b.n	800171c <__aeabi_dmul+0x1f0>
 80015ba:	4a55      	ldr	r2, [pc, #340]	; (8001710 <__aeabi_dmul+0x1e4>)
 80015bc:	00bf      	lsls	r7, r7, #2
 80015be:	59d2      	ldr	r2, [r2, r7]
 80015c0:	4697      	mov	pc, r2
 80015c2:	465b      	mov	r3, fp
 80015c4:	4303      	orrs	r3, r0
 80015c6:	4699      	mov	r9, r3
 80015c8:	d000      	beq.n	80015cc <__aeabi_dmul+0xa0>
 80015ca:	e087      	b.n	80016dc <__aeabi_dmul+0x1b0>
 80015cc:	2300      	movs	r3, #0
 80015ce:	469b      	mov	fp, r3
 80015d0:	3302      	adds	r3, #2
 80015d2:	2708      	movs	r7, #8
 80015d4:	9302      	str	r3, [sp, #8]
 80015d6:	e7ce      	b.n	8001576 <__aeabi_dmul+0x4a>
 80015d8:	4642      	mov	r2, r8
 80015da:	9201      	str	r2, [sp, #4]
 80015dc:	2802      	cmp	r0, #2
 80015de:	d067      	beq.n	80016b0 <__aeabi_dmul+0x184>
 80015e0:	2803      	cmp	r0, #3
 80015e2:	d100      	bne.n	80015e6 <__aeabi_dmul+0xba>
 80015e4:	e20e      	b.n	8001a04 <__aeabi_dmul+0x4d8>
 80015e6:	2801      	cmp	r0, #1
 80015e8:	d000      	beq.n	80015ec <__aeabi_dmul+0xc0>
 80015ea:	e162      	b.n	80018b2 <__aeabi_dmul+0x386>
 80015ec:	2300      	movs	r3, #0
 80015ee:	2400      	movs	r4, #0
 80015f0:	2200      	movs	r2, #0
 80015f2:	4699      	mov	r9, r3
 80015f4:	9901      	ldr	r1, [sp, #4]
 80015f6:	4001      	ands	r1, r0
 80015f8:	b2cd      	uxtb	r5, r1
 80015fa:	2100      	movs	r1, #0
 80015fc:	0312      	lsls	r2, r2, #12
 80015fe:	0d0b      	lsrs	r3, r1, #20
 8001600:	0b12      	lsrs	r2, r2, #12
 8001602:	051b      	lsls	r3, r3, #20
 8001604:	4313      	orrs	r3, r2
 8001606:	4a43      	ldr	r2, [pc, #268]	; (8001714 <__aeabi_dmul+0x1e8>)
 8001608:	0524      	lsls	r4, r4, #20
 800160a:	4013      	ands	r3, r2
 800160c:	431c      	orrs	r4, r3
 800160e:	0064      	lsls	r4, r4, #1
 8001610:	07ed      	lsls	r5, r5, #31
 8001612:	0864      	lsrs	r4, r4, #1
 8001614:	432c      	orrs	r4, r5
 8001616:	4648      	mov	r0, r9
 8001618:	0021      	movs	r1, r4
 800161a:	b007      	add	sp, #28
 800161c:	bc3c      	pop	{r2, r3, r4, r5}
 800161e:	4690      	mov	r8, r2
 8001620:	4699      	mov	r9, r3
 8001622:	46a2      	mov	sl, r4
 8001624:	46ab      	mov	fp, r5
 8001626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001628:	4303      	orrs	r3, r0
 800162a:	4699      	mov	r9, r3
 800162c:	d04f      	beq.n	80016ce <__aeabi_dmul+0x1a2>
 800162e:	465b      	mov	r3, fp
 8001630:	2b00      	cmp	r3, #0
 8001632:	d100      	bne.n	8001636 <__aeabi_dmul+0x10a>
 8001634:	e189      	b.n	800194a <__aeabi_dmul+0x41e>
 8001636:	4658      	mov	r0, fp
 8001638:	f000 fddc 	bl	80021f4 <__clzsi2>
 800163c:	0003      	movs	r3, r0
 800163e:	3b0b      	subs	r3, #11
 8001640:	2b1c      	cmp	r3, #28
 8001642:	dd00      	ble.n	8001646 <__aeabi_dmul+0x11a>
 8001644:	e17a      	b.n	800193c <__aeabi_dmul+0x410>
 8001646:	221d      	movs	r2, #29
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	003a      	movs	r2, r7
 800164c:	0001      	movs	r1, r0
 800164e:	465c      	mov	r4, fp
 8001650:	40da      	lsrs	r2, r3
 8001652:	3908      	subs	r1, #8
 8001654:	408c      	lsls	r4, r1
 8001656:	0013      	movs	r3, r2
 8001658:	408f      	lsls	r7, r1
 800165a:	4323      	orrs	r3, r4
 800165c:	469b      	mov	fp, r3
 800165e:	46b9      	mov	r9, r7
 8001660:	2300      	movs	r3, #0
 8001662:	4e2d      	ldr	r6, [pc, #180]	; (8001718 <__aeabi_dmul+0x1ec>)
 8001664:	2700      	movs	r7, #0
 8001666:	1a36      	subs	r6, r6, r0
 8001668:	9302      	str	r3, [sp, #8]
 800166a:	e784      	b.n	8001576 <__aeabi_dmul+0x4a>
 800166c:	4653      	mov	r3, sl
 800166e:	4323      	orrs	r3, r4
 8001670:	d12a      	bne.n	80016c8 <__aeabi_dmul+0x19c>
 8001672:	2400      	movs	r4, #0
 8001674:	2002      	movs	r0, #2
 8001676:	e796      	b.n	80015a6 <__aeabi_dmul+0x7a>
 8001678:	4653      	mov	r3, sl
 800167a:	4323      	orrs	r3, r4
 800167c:	d020      	beq.n	80016c0 <__aeabi_dmul+0x194>
 800167e:	2c00      	cmp	r4, #0
 8001680:	d100      	bne.n	8001684 <__aeabi_dmul+0x158>
 8001682:	e157      	b.n	8001934 <__aeabi_dmul+0x408>
 8001684:	0020      	movs	r0, r4
 8001686:	f000 fdb5 	bl	80021f4 <__clzsi2>
 800168a:	0003      	movs	r3, r0
 800168c:	3b0b      	subs	r3, #11
 800168e:	2b1c      	cmp	r3, #28
 8001690:	dd00      	ble.n	8001694 <__aeabi_dmul+0x168>
 8001692:	e149      	b.n	8001928 <__aeabi_dmul+0x3fc>
 8001694:	211d      	movs	r1, #29
 8001696:	1acb      	subs	r3, r1, r3
 8001698:	4651      	mov	r1, sl
 800169a:	0002      	movs	r2, r0
 800169c:	40d9      	lsrs	r1, r3
 800169e:	4653      	mov	r3, sl
 80016a0:	3a08      	subs	r2, #8
 80016a2:	4094      	lsls	r4, r2
 80016a4:	4093      	lsls	r3, r2
 80016a6:	430c      	orrs	r4, r1
 80016a8:	4a1b      	ldr	r2, [pc, #108]	; (8001718 <__aeabi_dmul+0x1ec>)
 80016aa:	1a12      	subs	r2, r2, r0
 80016ac:	2000      	movs	r0, #0
 80016ae:	e77a      	b.n	80015a6 <__aeabi_dmul+0x7a>
 80016b0:	2501      	movs	r5, #1
 80016b2:	9b01      	ldr	r3, [sp, #4]
 80016b4:	4c14      	ldr	r4, [pc, #80]	; (8001708 <__aeabi_dmul+0x1dc>)
 80016b6:	401d      	ands	r5, r3
 80016b8:	2300      	movs	r3, #0
 80016ba:	2200      	movs	r2, #0
 80016bc:	4699      	mov	r9, r3
 80016be:	e79c      	b.n	80015fa <__aeabi_dmul+0xce>
 80016c0:	2400      	movs	r4, #0
 80016c2:	2200      	movs	r2, #0
 80016c4:	2001      	movs	r0, #1
 80016c6:	e76e      	b.n	80015a6 <__aeabi_dmul+0x7a>
 80016c8:	4653      	mov	r3, sl
 80016ca:	2003      	movs	r0, #3
 80016cc:	e76b      	b.n	80015a6 <__aeabi_dmul+0x7a>
 80016ce:	2300      	movs	r3, #0
 80016d0:	469b      	mov	fp, r3
 80016d2:	3301      	adds	r3, #1
 80016d4:	2704      	movs	r7, #4
 80016d6:	2600      	movs	r6, #0
 80016d8:	9302      	str	r3, [sp, #8]
 80016da:	e74c      	b.n	8001576 <__aeabi_dmul+0x4a>
 80016dc:	2303      	movs	r3, #3
 80016de:	4681      	mov	r9, r0
 80016e0:	270c      	movs	r7, #12
 80016e2:	9302      	str	r3, [sp, #8]
 80016e4:	e747      	b.n	8001576 <__aeabi_dmul+0x4a>
 80016e6:	2280      	movs	r2, #128	; 0x80
 80016e8:	2300      	movs	r3, #0
 80016ea:	2500      	movs	r5, #0
 80016ec:	0312      	lsls	r2, r2, #12
 80016ee:	4699      	mov	r9, r3
 80016f0:	4c05      	ldr	r4, [pc, #20]	; (8001708 <__aeabi_dmul+0x1dc>)
 80016f2:	e782      	b.n	80015fa <__aeabi_dmul+0xce>
 80016f4:	465c      	mov	r4, fp
 80016f6:	464b      	mov	r3, r9
 80016f8:	9802      	ldr	r0, [sp, #8]
 80016fa:	e76f      	b.n	80015dc <__aeabi_dmul+0xb0>
 80016fc:	465c      	mov	r4, fp
 80016fe:	464b      	mov	r3, r9
 8001700:	9501      	str	r5, [sp, #4]
 8001702:	9802      	ldr	r0, [sp, #8]
 8001704:	e76a      	b.n	80015dc <__aeabi_dmul+0xb0>
 8001706:	46c0      	nop			; (mov r8, r8)
 8001708:	000007ff 	.word	0x000007ff
 800170c:	fffffc01 	.word	0xfffffc01
 8001710:	0800d678 	.word	0x0800d678
 8001714:	800fffff 	.word	0x800fffff
 8001718:	fffffc0d 	.word	0xfffffc0d
 800171c:	464a      	mov	r2, r9
 800171e:	4649      	mov	r1, r9
 8001720:	0c17      	lsrs	r7, r2, #16
 8001722:	0c1a      	lsrs	r2, r3, #16
 8001724:	041b      	lsls	r3, r3, #16
 8001726:	0c1b      	lsrs	r3, r3, #16
 8001728:	0408      	lsls	r0, r1, #16
 800172a:	0019      	movs	r1, r3
 800172c:	0c00      	lsrs	r0, r0, #16
 800172e:	4341      	muls	r1, r0
 8001730:	0015      	movs	r5, r2
 8001732:	4688      	mov	r8, r1
 8001734:	0019      	movs	r1, r3
 8001736:	437d      	muls	r5, r7
 8001738:	4379      	muls	r1, r7
 800173a:	9503      	str	r5, [sp, #12]
 800173c:	4689      	mov	r9, r1
 800173e:	0029      	movs	r1, r5
 8001740:	0015      	movs	r5, r2
 8001742:	4345      	muls	r5, r0
 8001744:	444d      	add	r5, r9
 8001746:	9502      	str	r5, [sp, #8]
 8001748:	4645      	mov	r5, r8
 800174a:	0c2d      	lsrs	r5, r5, #16
 800174c:	46aa      	mov	sl, r5
 800174e:	9d02      	ldr	r5, [sp, #8]
 8001750:	4455      	add	r5, sl
 8001752:	45a9      	cmp	r9, r5
 8001754:	d906      	bls.n	8001764 <__aeabi_dmul+0x238>
 8001756:	468a      	mov	sl, r1
 8001758:	2180      	movs	r1, #128	; 0x80
 800175a:	0249      	lsls	r1, r1, #9
 800175c:	4689      	mov	r9, r1
 800175e:	44ca      	add	sl, r9
 8001760:	4651      	mov	r1, sl
 8001762:	9103      	str	r1, [sp, #12]
 8001764:	0c29      	lsrs	r1, r5, #16
 8001766:	9104      	str	r1, [sp, #16]
 8001768:	4641      	mov	r1, r8
 800176a:	0409      	lsls	r1, r1, #16
 800176c:	042d      	lsls	r5, r5, #16
 800176e:	0c09      	lsrs	r1, r1, #16
 8001770:	4688      	mov	r8, r1
 8001772:	0029      	movs	r1, r5
 8001774:	0c25      	lsrs	r5, r4, #16
 8001776:	0424      	lsls	r4, r4, #16
 8001778:	4441      	add	r1, r8
 800177a:	0c24      	lsrs	r4, r4, #16
 800177c:	9105      	str	r1, [sp, #20]
 800177e:	0021      	movs	r1, r4
 8001780:	4341      	muls	r1, r0
 8001782:	4688      	mov	r8, r1
 8001784:	0021      	movs	r1, r4
 8001786:	4379      	muls	r1, r7
 8001788:	468a      	mov	sl, r1
 800178a:	4368      	muls	r0, r5
 800178c:	4641      	mov	r1, r8
 800178e:	4450      	add	r0, sl
 8001790:	4681      	mov	r9, r0
 8001792:	0c08      	lsrs	r0, r1, #16
 8001794:	4448      	add	r0, r9
 8001796:	436f      	muls	r7, r5
 8001798:	4582      	cmp	sl, r0
 800179a:	d903      	bls.n	80017a4 <__aeabi_dmul+0x278>
 800179c:	2180      	movs	r1, #128	; 0x80
 800179e:	0249      	lsls	r1, r1, #9
 80017a0:	4689      	mov	r9, r1
 80017a2:	444f      	add	r7, r9
 80017a4:	0c01      	lsrs	r1, r0, #16
 80017a6:	4689      	mov	r9, r1
 80017a8:	0039      	movs	r1, r7
 80017aa:	4449      	add	r1, r9
 80017ac:	9102      	str	r1, [sp, #8]
 80017ae:	4641      	mov	r1, r8
 80017b0:	040f      	lsls	r7, r1, #16
 80017b2:	9904      	ldr	r1, [sp, #16]
 80017b4:	0c3f      	lsrs	r7, r7, #16
 80017b6:	4688      	mov	r8, r1
 80017b8:	0400      	lsls	r0, r0, #16
 80017ba:	19c0      	adds	r0, r0, r7
 80017bc:	4480      	add	r8, r0
 80017be:	4641      	mov	r1, r8
 80017c0:	9104      	str	r1, [sp, #16]
 80017c2:	4659      	mov	r1, fp
 80017c4:	0c0f      	lsrs	r7, r1, #16
 80017c6:	0409      	lsls	r1, r1, #16
 80017c8:	0c09      	lsrs	r1, r1, #16
 80017ca:	4688      	mov	r8, r1
 80017cc:	4359      	muls	r1, r3
 80017ce:	468a      	mov	sl, r1
 80017d0:	0039      	movs	r1, r7
 80017d2:	4351      	muls	r1, r2
 80017d4:	4689      	mov	r9, r1
 80017d6:	4641      	mov	r1, r8
 80017d8:	434a      	muls	r2, r1
 80017da:	4651      	mov	r1, sl
 80017dc:	0c09      	lsrs	r1, r1, #16
 80017de:	468b      	mov	fp, r1
 80017e0:	437b      	muls	r3, r7
 80017e2:	18d2      	adds	r2, r2, r3
 80017e4:	445a      	add	r2, fp
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d903      	bls.n	80017f2 <__aeabi_dmul+0x2c6>
 80017ea:	2380      	movs	r3, #128	; 0x80
 80017ec:	025b      	lsls	r3, r3, #9
 80017ee:	469b      	mov	fp, r3
 80017f0:	44d9      	add	r9, fp
 80017f2:	4651      	mov	r1, sl
 80017f4:	0409      	lsls	r1, r1, #16
 80017f6:	0c09      	lsrs	r1, r1, #16
 80017f8:	468a      	mov	sl, r1
 80017fa:	4641      	mov	r1, r8
 80017fc:	4361      	muls	r1, r4
 80017fe:	437c      	muls	r4, r7
 8001800:	0c13      	lsrs	r3, r2, #16
 8001802:	0412      	lsls	r2, r2, #16
 8001804:	444b      	add	r3, r9
 8001806:	4452      	add	r2, sl
 8001808:	46a1      	mov	r9, r4
 800180a:	468a      	mov	sl, r1
 800180c:	003c      	movs	r4, r7
 800180e:	4641      	mov	r1, r8
 8001810:	436c      	muls	r4, r5
 8001812:	434d      	muls	r5, r1
 8001814:	4651      	mov	r1, sl
 8001816:	444d      	add	r5, r9
 8001818:	0c0f      	lsrs	r7, r1, #16
 800181a:	197d      	adds	r5, r7, r5
 800181c:	45a9      	cmp	r9, r5
 800181e:	d903      	bls.n	8001828 <__aeabi_dmul+0x2fc>
 8001820:	2180      	movs	r1, #128	; 0x80
 8001822:	0249      	lsls	r1, r1, #9
 8001824:	4688      	mov	r8, r1
 8001826:	4444      	add	r4, r8
 8001828:	9f04      	ldr	r7, [sp, #16]
 800182a:	9903      	ldr	r1, [sp, #12]
 800182c:	46b8      	mov	r8, r7
 800182e:	4441      	add	r1, r8
 8001830:	468b      	mov	fp, r1
 8001832:	4583      	cmp	fp, r0
 8001834:	4180      	sbcs	r0, r0
 8001836:	4241      	negs	r1, r0
 8001838:	4688      	mov	r8, r1
 800183a:	4651      	mov	r1, sl
 800183c:	0408      	lsls	r0, r1, #16
 800183e:	042f      	lsls	r7, r5, #16
 8001840:	0c00      	lsrs	r0, r0, #16
 8001842:	183f      	adds	r7, r7, r0
 8001844:	4658      	mov	r0, fp
 8001846:	9902      	ldr	r1, [sp, #8]
 8001848:	1810      	adds	r0, r2, r0
 800184a:	4689      	mov	r9, r1
 800184c:	4290      	cmp	r0, r2
 800184e:	4192      	sbcs	r2, r2
 8001850:	444f      	add	r7, r9
 8001852:	46ba      	mov	sl, r7
 8001854:	4252      	negs	r2, r2
 8001856:	4699      	mov	r9, r3
 8001858:	4693      	mov	fp, r2
 800185a:	44c2      	add	sl, r8
 800185c:	44d1      	add	r9, sl
 800185e:	44cb      	add	fp, r9
 8001860:	428f      	cmp	r7, r1
 8001862:	41bf      	sbcs	r7, r7
 8001864:	45c2      	cmp	sl, r8
 8001866:	4189      	sbcs	r1, r1
 8001868:	4599      	cmp	r9, r3
 800186a:	419b      	sbcs	r3, r3
 800186c:	4593      	cmp	fp, r2
 800186e:	4192      	sbcs	r2, r2
 8001870:	427f      	negs	r7, r7
 8001872:	4249      	negs	r1, r1
 8001874:	0c2d      	lsrs	r5, r5, #16
 8001876:	4252      	negs	r2, r2
 8001878:	430f      	orrs	r7, r1
 800187a:	425b      	negs	r3, r3
 800187c:	4313      	orrs	r3, r2
 800187e:	197f      	adds	r7, r7, r5
 8001880:	18ff      	adds	r7, r7, r3
 8001882:	465b      	mov	r3, fp
 8001884:	193c      	adds	r4, r7, r4
 8001886:	0ddb      	lsrs	r3, r3, #23
 8001888:	9a05      	ldr	r2, [sp, #20]
 800188a:	0264      	lsls	r4, r4, #9
 800188c:	431c      	orrs	r4, r3
 800188e:	0243      	lsls	r3, r0, #9
 8001890:	4313      	orrs	r3, r2
 8001892:	1e5d      	subs	r5, r3, #1
 8001894:	41ab      	sbcs	r3, r5
 8001896:	465a      	mov	r2, fp
 8001898:	0dc0      	lsrs	r0, r0, #23
 800189a:	4303      	orrs	r3, r0
 800189c:	0252      	lsls	r2, r2, #9
 800189e:	4313      	orrs	r3, r2
 80018a0:	01e2      	lsls	r2, r4, #7
 80018a2:	d556      	bpl.n	8001952 <__aeabi_dmul+0x426>
 80018a4:	2001      	movs	r0, #1
 80018a6:	085a      	lsrs	r2, r3, #1
 80018a8:	4003      	ands	r3, r0
 80018aa:	4313      	orrs	r3, r2
 80018ac:	07e2      	lsls	r2, r4, #31
 80018ae:	4313      	orrs	r3, r2
 80018b0:	0864      	lsrs	r4, r4, #1
 80018b2:	485a      	ldr	r0, [pc, #360]	; (8001a1c <__aeabi_dmul+0x4f0>)
 80018b4:	4460      	add	r0, ip
 80018b6:	2800      	cmp	r0, #0
 80018b8:	dd4d      	ble.n	8001956 <__aeabi_dmul+0x42a>
 80018ba:	075a      	lsls	r2, r3, #29
 80018bc:	d009      	beq.n	80018d2 <__aeabi_dmul+0x3a6>
 80018be:	220f      	movs	r2, #15
 80018c0:	401a      	ands	r2, r3
 80018c2:	2a04      	cmp	r2, #4
 80018c4:	d005      	beq.n	80018d2 <__aeabi_dmul+0x3a6>
 80018c6:	1d1a      	adds	r2, r3, #4
 80018c8:	429a      	cmp	r2, r3
 80018ca:	419b      	sbcs	r3, r3
 80018cc:	425b      	negs	r3, r3
 80018ce:	18e4      	adds	r4, r4, r3
 80018d0:	0013      	movs	r3, r2
 80018d2:	01e2      	lsls	r2, r4, #7
 80018d4:	d504      	bpl.n	80018e0 <__aeabi_dmul+0x3b4>
 80018d6:	2080      	movs	r0, #128	; 0x80
 80018d8:	4a51      	ldr	r2, [pc, #324]	; (8001a20 <__aeabi_dmul+0x4f4>)
 80018da:	00c0      	lsls	r0, r0, #3
 80018dc:	4014      	ands	r4, r2
 80018de:	4460      	add	r0, ip
 80018e0:	4a50      	ldr	r2, [pc, #320]	; (8001a24 <__aeabi_dmul+0x4f8>)
 80018e2:	4290      	cmp	r0, r2
 80018e4:	dd00      	ble.n	80018e8 <__aeabi_dmul+0x3bc>
 80018e6:	e6e3      	b.n	80016b0 <__aeabi_dmul+0x184>
 80018e8:	2501      	movs	r5, #1
 80018ea:	08db      	lsrs	r3, r3, #3
 80018ec:	0762      	lsls	r2, r4, #29
 80018ee:	431a      	orrs	r2, r3
 80018f0:	0264      	lsls	r4, r4, #9
 80018f2:	9b01      	ldr	r3, [sp, #4]
 80018f4:	4691      	mov	r9, r2
 80018f6:	0b22      	lsrs	r2, r4, #12
 80018f8:	0544      	lsls	r4, r0, #21
 80018fa:	0d64      	lsrs	r4, r4, #21
 80018fc:	401d      	ands	r5, r3
 80018fe:	e67c      	b.n	80015fa <__aeabi_dmul+0xce>
 8001900:	2280      	movs	r2, #128	; 0x80
 8001902:	4659      	mov	r1, fp
 8001904:	0312      	lsls	r2, r2, #12
 8001906:	4211      	tst	r1, r2
 8001908:	d008      	beq.n	800191c <__aeabi_dmul+0x3f0>
 800190a:	4214      	tst	r4, r2
 800190c:	d106      	bne.n	800191c <__aeabi_dmul+0x3f0>
 800190e:	4322      	orrs	r2, r4
 8001910:	0312      	lsls	r2, r2, #12
 8001912:	0b12      	lsrs	r2, r2, #12
 8001914:	4645      	mov	r5, r8
 8001916:	4699      	mov	r9, r3
 8001918:	4c43      	ldr	r4, [pc, #268]	; (8001a28 <__aeabi_dmul+0x4fc>)
 800191a:	e66e      	b.n	80015fa <__aeabi_dmul+0xce>
 800191c:	465b      	mov	r3, fp
 800191e:	431a      	orrs	r2, r3
 8001920:	0312      	lsls	r2, r2, #12
 8001922:	0b12      	lsrs	r2, r2, #12
 8001924:	4c40      	ldr	r4, [pc, #256]	; (8001a28 <__aeabi_dmul+0x4fc>)
 8001926:	e668      	b.n	80015fa <__aeabi_dmul+0xce>
 8001928:	0003      	movs	r3, r0
 800192a:	4654      	mov	r4, sl
 800192c:	3b28      	subs	r3, #40	; 0x28
 800192e:	409c      	lsls	r4, r3
 8001930:	2300      	movs	r3, #0
 8001932:	e6b9      	b.n	80016a8 <__aeabi_dmul+0x17c>
 8001934:	f000 fc5e 	bl	80021f4 <__clzsi2>
 8001938:	3020      	adds	r0, #32
 800193a:	e6a6      	b.n	800168a <__aeabi_dmul+0x15e>
 800193c:	0003      	movs	r3, r0
 800193e:	3b28      	subs	r3, #40	; 0x28
 8001940:	409f      	lsls	r7, r3
 8001942:	2300      	movs	r3, #0
 8001944:	46bb      	mov	fp, r7
 8001946:	4699      	mov	r9, r3
 8001948:	e68a      	b.n	8001660 <__aeabi_dmul+0x134>
 800194a:	f000 fc53 	bl	80021f4 <__clzsi2>
 800194e:	3020      	adds	r0, #32
 8001950:	e674      	b.n	800163c <__aeabi_dmul+0x110>
 8001952:	46b4      	mov	ip, r6
 8001954:	e7ad      	b.n	80018b2 <__aeabi_dmul+0x386>
 8001956:	2501      	movs	r5, #1
 8001958:	1a2a      	subs	r2, r5, r0
 800195a:	2a38      	cmp	r2, #56	; 0x38
 800195c:	dd06      	ble.n	800196c <__aeabi_dmul+0x440>
 800195e:	9b01      	ldr	r3, [sp, #4]
 8001960:	2400      	movs	r4, #0
 8001962:	401d      	ands	r5, r3
 8001964:	2300      	movs	r3, #0
 8001966:	2200      	movs	r2, #0
 8001968:	4699      	mov	r9, r3
 800196a:	e646      	b.n	80015fa <__aeabi_dmul+0xce>
 800196c:	2a1f      	cmp	r2, #31
 800196e:	dc21      	bgt.n	80019b4 <__aeabi_dmul+0x488>
 8001970:	2520      	movs	r5, #32
 8001972:	0020      	movs	r0, r4
 8001974:	1aad      	subs	r5, r5, r2
 8001976:	001e      	movs	r6, r3
 8001978:	40ab      	lsls	r3, r5
 800197a:	40a8      	lsls	r0, r5
 800197c:	40d6      	lsrs	r6, r2
 800197e:	1e5d      	subs	r5, r3, #1
 8001980:	41ab      	sbcs	r3, r5
 8001982:	4330      	orrs	r0, r6
 8001984:	4318      	orrs	r0, r3
 8001986:	40d4      	lsrs	r4, r2
 8001988:	0743      	lsls	r3, r0, #29
 800198a:	d009      	beq.n	80019a0 <__aeabi_dmul+0x474>
 800198c:	230f      	movs	r3, #15
 800198e:	4003      	ands	r3, r0
 8001990:	2b04      	cmp	r3, #4
 8001992:	d005      	beq.n	80019a0 <__aeabi_dmul+0x474>
 8001994:	0003      	movs	r3, r0
 8001996:	1d18      	adds	r0, r3, #4
 8001998:	4298      	cmp	r0, r3
 800199a:	419b      	sbcs	r3, r3
 800199c:	425b      	negs	r3, r3
 800199e:	18e4      	adds	r4, r4, r3
 80019a0:	0223      	lsls	r3, r4, #8
 80019a2:	d521      	bpl.n	80019e8 <__aeabi_dmul+0x4bc>
 80019a4:	2501      	movs	r5, #1
 80019a6:	9b01      	ldr	r3, [sp, #4]
 80019a8:	2401      	movs	r4, #1
 80019aa:	401d      	ands	r5, r3
 80019ac:	2300      	movs	r3, #0
 80019ae:	2200      	movs	r2, #0
 80019b0:	4699      	mov	r9, r3
 80019b2:	e622      	b.n	80015fa <__aeabi_dmul+0xce>
 80019b4:	251f      	movs	r5, #31
 80019b6:	0021      	movs	r1, r4
 80019b8:	426d      	negs	r5, r5
 80019ba:	1a28      	subs	r0, r5, r0
 80019bc:	40c1      	lsrs	r1, r0
 80019be:	0008      	movs	r0, r1
 80019c0:	2a20      	cmp	r2, #32
 80019c2:	d01d      	beq.n	8001a00 <__aeabi_dmul+0x4d4>
 80019c4:	355f      	adds	r5, #95	; 0x5f
 80019c6:	1aaa      	subs	r2, r5, r2
 80019c8:	4094      	lsls	r4, r2
 80019ca:	4323      	orrs	r3, r4
 80019cc:	1e5c      	subs	r4, r3, #1
 80019ce:	41a3      	sbcs	r3, r4
 80019d0:	2507      	movs	r5, #7
 80019d2:	4303      	orrs	r3, r0
 80019d4:	401d      	ands	r5, r3
 80019d6:	2200      	movs	r2, #0
 80019d8:	2d00      	cmp	r5, #0
 80019da:	d009      	beq.n	80019f0 <__aeabi_dmul+0x4c4>
 80019dc:	220f      	movs	r2, #15
 80019de:	2400      	movs	r4, #0
 80019e0:	401a      	ands	r2, r3
 80019e2:	0018      	movs	r0, r3
 80019e4:	2a04      	cmp	r2, #4
 80019e6:	d1d6      	bne.n	8001996 <__aeabi_dmul+0x46a>
 80019e8:	0003      	movs	r3, r0
 80019ea:	0765      	lsls	r5, r4, #29
 80019ec:	0264      	lsls	r4, r4, #9
 80019ee:	0b22      	lsrs	r2, r4, #12
 80019f0:	08db      	lsrs	r3, r3, #3
 80019f2:	432b      	orrs	r3, r5
 80019f4:	2501      	movs	r5, #1
 80019f6:	4699      	mov	r9, r3
 80019f8:	9b01      	ldr	r3, [sp, #4]
 80019fa:	2400      	movs	r4, #0
 80019fc:	401d      	ands	r5, r3
 80019fe:	e5fc      	b.n	80015fa <__aeabi_dmul+0xce>
 8001a00:	2400      	movs	r4, #0
 8001a02:	e7e2      	b.n	80019ca <__aeabi_dmul+0x49e>
 8001a04:	2280      	movs	r2, #128	; 0x80
 8001a06:	2501      	movs	r5, #1
 8001a08:	0312      	lsls	r2, r2, #12
 8001a0a:	4322      	orrs	r2, r4
 8001a0c:	9901      	ldr	r1, [sp, #4]
 8001a0e:	0312      	lsls	r2, r2, #12
 8001a10:	0b12      	lsrs	r2, r2, #12
 8001a12:	400d      	ands	r5, r1
 8001a14:	4699      	mov	r9, r3
 8001a16:	4c04      	ldr	r4, [pc, #16]	; (8001a28 <__aeabi_dmul+0x4fc>)
 8001a18:	e5ef      	b.n	80015fa <__aeabi_dmul+0xce>
 8001a1a:	46c0      	nop			; (mov r8, r8)
 8001a1c:	000003ff 	.word	0x000003ff
 8001a20:	feffffff 	.word	0xfeffffff
 8001a24:	000007fe 	.word	0x000007fe
 8001a28:	000007ff 	.word	0x000007ff

08001a2c <__aeabi_dsub>:
 8001a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a2e:	4646      	mov	r6, r8
 8001a30:	46d6      	mov	lr, sl
 8001a32:	464f      	mov	r7, r9
 8001a34:	030c      	lsls	r4, r1, #12
 8001a36:	b5c0      	push	{r6, r7, lr}
 8001a38:	0fcd      	lsrs	r5, r1, #31
 8001a3a:	004e      	lsls	r6, r1, #1
 8001a3c:	0a61      	lsrs	r1, r4, #9
 8001a3e:	0f44      	lsrs	r4, r0, #29
 8001a40:	430c      	orrs	r4, r1
 8001a42:	00c1      	lsls	r1, r0, #3
 8001a44:	0058      	lsls	r0, r3, #1
 8001a46:	0d40      	lsrs	r0, r0, #21
 8001a48:	4684      	mov	ip, r0
 8001a4a:	468a      	mov	sl, r1
 8001a4c:	000f      	movs	r7, r1
 8001a4e:	0319      	lsls	r1, r3, #12
 8001a50:	0f50      	lsrs	r0, r2, #29
 8001a52:	0a49      	lsrs	r1, r1, #9
 8001a54:	4301      	orrs	r1, r0
 8001a56:	48c6      	ldr	r0, [pc, #792]	; (8001d70 <__aeabi_dsub+0x344>)
 8001a58:	0d76      	lsrs	r6, r6, #21
 8001a5a:	46a8      	mov	r8, r5
 8001a5c:	0fdb      	lsrs	r3, r3, #31
 8001a5e:	00d2      	lsls	r2, r2, #3
 8001a60:	4584      	cmp	ip, r0
 8001a62:	d100      	bne.n	8001a66 <__aeabi_dsub+0x3a>
 8001a64:	e0d8      	b.n	8001c18 <__aeabi_dsub+0x1ec>
 8001a66:	2001      	movs	r0, #1
 8001a68:	4043      	eors	r3, r0
 8001a6a:	42ab      	cmp	r3, r5
 8001a6c:	d100      	bne.n	8001a70 <__aeabi_dsub+0x44>
 8001a6e:	e0a6      	b.n	8001bbe <__aeabi_dsub+0x192>
 8001a70:	4660      	mov	r0, ip
 8001a72:	1a35      	subs	r5, r6, r0
 8001a74:	2d00      	cmp	r5, #0
 8001a76:	dc00      	bgt.n	8001a7a <__aeabi_dsub+0x4e>
 8001a78:	e105      	b.n	8001c86 <__aeabi_dsub+0x25a>
 8001a7a:	2800      	cmp	r0, #0
 8001a7c:	d110      	bne.n	8001aa0 <__aeabi_dsub+0x74>
 8001a7e:	000b      	movs	r3, r1
 8001a80:	4313      	orrs	r3, r2
 8001a82:	d100      	bne.n	8001a86 <__aeabi_dsub+0x5a>
 8001a84:	e0d7      	b.n	8001c36 <__aeabi_dsub+0x20a>
 8001a86:	1e6b      	subs	r3, r5, #1
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d000      	beq.n	8001a8e <__aeabi_dsub+0x62>
 8001a8c:	e14b      	b.n	8001d26 <__aeabi_dsub+0x2fa>
 8001a8e:	4653      	mov	r3, sl
 8001a90:	1a9f      	subs	r7, r3, r2
 8001a92:	45ba      	cmp	sl, r7
 8001a94:	4180      	sbcs	r0, r0
 8001a96:	1a64      	subs	r4, r4, r1
 8001a98:	4240      	negs	r0, r0
 8001a9a:	1a24      	subs	r4, r4, r0
 8001a9c:	2601      	movs	r6, #1
 8001a9e:	e01e      	b.n	8001ade <__aeabi_dsub+0xb2>
 8001aa0:	4bb3      	ldr	r3, [pc, #716]	; (8001d70 <__aeabi_dsub+0x344>)
 8001aa2:	429e      	cmp	r6, r3
 8001aa4:	d048      	beq.n	8001b38 <__aeabi_dsub+0x10c>
 8001aa6:	2380      	movs	r3, #128	; 0x80
 8001aa8:	041b      	lsls	r3, r3, #16
 8001aaa:	4319      	orrs	r1, r3
 8001aac:	2d38      	cmp	r5, #56	; 0x38
 8001aae:	dd00      	ble.n	8001ab2 <__aeabi_dsub+0x86>
 8001ab0:	e119      	b.n	8001ce6 <__aeabi_dsub+0x2ba>
 8001ab2:	2d1f      	cmp	r5, #31
 8001ab4:	dd00      	ble.n	8001ab8 <__aeabi_dsub+0x8c>
 8001ab6:	e14c      	b.n	8001d52 <__aeabi_dsub+0x326>
 8001ab8:	2320      	movs	r3, #32
 8001aba:	000f      	movs	r7, r1
 8001abc:	1b5b      	subs	r3, r3, r5
 8001abe:	0010      	movs	r0, r2
 8001ac0:	409a      	lsls	r2, r3
 8001ac2:	409f      	lsls	r7, r3
 8001ac4:	40e8      	lsrs	r0, r5
 8001ac6:	1e53      	subs	r3, r2, #1
 8001ac8:	419a      	sbcs	r2, r3
 8001aca:	40e9      	lsrs	r1, r5
 8001acc:	4307      	orrs	r7, r0
 8001ace:	4317      	orrs	r7, r2
 8001ad0:	4653      	mov	r3, sl
 8001ad2:	1bdf      	subs	r7, r3, r7
 8001ad4:	1a61      	subs	r1, r4, r1
 8001ad6:	45ba      	cmp	sl, r7
 8001ad8:	41a4      	sbcs	r4, r4
 8001ada:	4264      	negs	r4, r4
 8001adc:	1b0c      	subs	r4, r1, r4
 8001ade:	0223      	lsls	r3, r4, #8
 8001ae0:	d400      	bmi.n	8001ae4 <__aeabi_dsub+0xb8>
 8001ae2:	e0c5      	b.n	8001c70 <__aeabi_dsub+0x244>
 8001ae4:	0264      	lsls	r4, r4, #9
 8001ae6:	0a65      	lsrs	r5, r4, #9
 8001ae8:	2d00      	cmp	r5, #0
 8001aea:	d100      	bne.n	8001aee <__aeabi_dsub+0xc2>
 8001aec:	e0f6      	b.n	8001cdc <__aeabi_dsub+0x2b0>
 8001aee:	0028      	movs	r0, r5
 8001af0:	f000 fb80 	bl	80021f4 <__clzsi2>
 8001af4:	0003      	movs	r3, r0
 8001af6:	3b08      	subs	r3, #8
 8001af8:	2b1f      	cmp	r3, #31
 8001afa:	dd00      	ble.n	8001afe <__aeabi_dsub+0xd2>
 8001afc:	e0e9      	b.n	8001cd2 <__aeabi_dsub+0x2a6>
 8001afe:	2220      	movs	r2, #32
 8001b00:	003c      	movs	r4, r7
 8001b02:	1ad2      	subs	r2, r2, r3
 8001b04:	409d      	lsls	r5, r3
 8001b06:	40d4      	lsrs	r4, r2
 8001b08:	409f      	lsls	r7, r3
 8001b0a:	4325      	orrs	r5, r4
 8001b0c:	429e      	cmp	r6, r3
 8001b0e:	dd00      	ble.n	8001b12 <__aeabi_dsub+0xe6>
 8001b10:	e0db      	b.n	8001cca <__aeabi_dsub+0x29e>
 8001b12:	1b9e      	subs	r6, r3, r6
 8001b14:	1c73      	adds	r3, r6, #1
 8001b16:	2b1f      	cmp	r3, #31
 8001b18:	dd00      	ble.n	8001b1c <__aeabi_dsub+0xf0>
 8001b1a:	e10a      	b.n	8001d32 <__aeabi_dsub+0x306>
 8001b1c:	2220      	movs	r2, #32
 8001b1e:	0038      	movs	r0, r7
 8001b20:	1ad2      	subs	r2, r2, r3
 8001b22:	0029      	movs	r1, r5
 8001b24:	4097      	lsls	r7, r2
 8001b26:	002c      	movs	r4, r5
 8001b28:	4091      	lsls	r1, r2
 8001b2a:	40d8      	lsrs	r0, r3
 8001b2c:	1e7a      	subs	r2, r7, #1
 8001b2e:	4197      	sbcs	r7, r2
 8001b30:	40dc      	lsrs	r4, r3
 8001b32:	2600      	movs	r6, #0
 8001b34:	4301      	orrs	r1, r0
 8001b36:	430f      	orrs	r7, r1
 8001b38:	077b      	lsls	r3, r7, #29
 8001b3a:	d009      	beq.n	8001b50 <__aeabi_dsub+0x124>
 8001b3c:	230f      	movs	r3, #15
 8001b3e:	403b      	ands	r3, r7
 8001b40:	2b04      	cmp	r3, #4
 8001b42:	d005      	beq.n	8001b50 <__aeabi_dsub+0x124>
 8001b44:	1d3b      	adds	r3, r7, #4
 8001b46:	42bb      	cmp	r3, r7
 8001b48:	41bf      	sbcs	r7, r7
 8001b4a:	427f      	negs	r7, r7
 8001b4c:	19e4      	adds	r4, r4, r7
 8001b4e:	001f      	movs	r7, r3
 8001b50:	0223      	lsls	r3, r4, #8
 8001b52:	d525      	bpl.n	8001ba0 <__aeabi_dsub+0x174>
 8001b54:	4b86      	ldr	r3, [pc, #536]	; (8001d70 <__aeabi_dsub+0x344>)
 8001b56:	3601      	adds	r6, #1
 8001b58:	429e      	cmp	r6, r3
 8001b5a:	d100      	bne.n	8001b5e <__aeabi_dsub+0x132>
 8001b5c:	e0af      	b.n	8001cbe <__aeabi_dsub+0x292>
 8001b5e:	4b85      	ldr	r3, [pc, #532]	; (8001d74 <__aeabi_dsub+0x348>)
 8001b60:	2501      	movs	r5, #1
 8001b62:	401c      	ands	r4, r3
 8001b64:	4643      	mov	r3, r8
 8001b66:	0762      	lsls	r2, r4, #29
 8001b68:	08ff      	lsrs	r7, r7, #3
 8001b6a:	0264      	lsls	r4, r4, #9
 8001b6c:	0576      	lsls	r6, r6, #21
 8001b6e:	4317      	orrs	r7, r2
 8001b70:	0b24      	lsrs	r4, r4, #12
 8001b72:	0d76      	lsrs	r6, r6, #21
 8001b74:	401d      	ands	r5, r3
 8001b76:	2100      	movs	r1, #0
 8001b78:	0324      	lsls	r4, r4, #12
 8001b7a:	0b23      	lsrs	r3, r4, #12
 8001b7c:	0d0c      	lsrs	r4, r1, #20
 8001b7e:	4a7e      	ldr	r2, [pc, #504]	; (8001d78 <__aeabi_dsub+0x34c>)
 8001b80:	0524      	lsls	r4, r4, #20
 8001b82:	431c      	orrs	r4, r3
 8001b84:	4014      	ands	r4, r2
 8001b86:	0533      	lsls	r3, r6, #20
 8001b88:	4323      	orrs	r3, r4
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	07ed      	lsls	r5, r5, #31
 8001b8e:	085b      	lsrs	r3, r3, #1
 8001b90:	432b      	orrs	r3, r5
 8001b92:	0038      	movs	r0, r7
 8001b94:	0019      	movs	r1, r3
 8001b96:	bc1c      	pop	{r2, r3, r4}
 8001b98:	4690      	mov	r8, r2
 8001b9a:	4699      	mov	r9, r3
 8001b9c:	46a2      	mov	sl, r4
 8001b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ba0:	2501      	movs	r5, #1
 8001ba2:	4643      	mov	r3, r8
 8001ba4:	0762      	lsls	r2, r4, #29
 8001ba6:	08ff      	lsrs	r7, r7, #3
 8001ba8:	4317      	orrs	r7, r2
 8001baa:	08e4      	lsrs	r4, r4, #3
 8001bac:	401d      	ands	r5, r3
 8001bae:	4b70      	ldr	r3, [pc, #448]	; (8001d70 <__aeabi_dsub+0x344>)
 8001bb0:	429e      	cmp	r6, r3
 8001bb2:	d036      	beq.n	8001c22 <__aeabi_dsub+0x1f6>
 8001bb4:	0324      	lsls	r4, r4, #12
 8001bb6:	0576      	lsls	r6, r6, #21
 8001bb8:	0b24      	lsrs	r4, r4, #12
 8001bba:	0d76      	lsrs	r6, r6, #21
 8001bbc:	e7db      	b.n	8001b76 <__aeabi_dsub+0x14a>
 8001bbe:	4663      	mov	r3, ip
 8001bc0:	1af3      	subs	r3, r6, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	dc00      	bgt.n	8001bc8 <__aeabi_dsub+0x19c>
 8001bc6:	e094      	b.n	8001cf2 <__aeabi_dsub+0x2c6>
 8001bc8:	4660      	mov	r0, ip
 8001bca:	2800      	cmp	r0, #0
 8001bcc:	d035      	beq.n	8001c3a <__aeabi_dsub+0x20e>
 8001bce:	4868      	ldr	r0, [pc, #416]	; (8001d70 <__aeabi_dsub+0x344>)
 8001bd0:	4286      	cmp	r6, r0
 8001bd2:	d0b1      	beq.n	8001b38 <__aeabi_dsub+0x10c>
 8001bd4:	2780      	movs	r7, #128	; 0x80
 8001bd6:	043f      	lsls	r7, r7, #16
 8001bd8:	4339      	orrs	r1, r7
 8001bda:	2b38      	cmp	r3, #56	; 0x38
 8001bdc:	dc00      	bgt.n	8001be0 <__aeabi_dsub+0x1b4>
 8001bde:	e0fd      	b.n	8001ddc <__aeabi_dsub+0x3b0>
 8001be0:	430a      	orrs	r2, r1
 8001be2:	0017      	movs	r7, r2
 8001be4:	2100      	movs	r1, #0
 8001be6:	1e7a      	subs	r2, r7, #1
 8001be8:	4197      	sbcs	r7, r2
 8001bea:	4457      	add	r7, sl
 8001bec:	4557      	cmp	r7, sl
 8001bee:	4180      	sbcs	r0, r0
 8001bf0:	1909      	adds	r1, r1, r4
 8001bf2:	4244      	negs	r4, r0
 8001bf4:	190c      	adds	r4, r1, r4
 8001bf6:	0223      	lsls	r3, r4, #8
 8001bf8:	d53a      	bpl.n	8001c70 <__aeabi_dsub+0x244>
 8001bfa:	4b5d      	ldr	r3, [pc, #372]	; (8001d70 <__aeabi_dsub+0x344>)
 8001bfc:	3601      	adds	r6, #1
 8001bfe:	429e      	cmp	r6, r3
 8001c00:	d100      	bne.n	8001c04 <__aeabi_dsub+0x1d8>
 8001c02:	e14b      	b.n	8001e9c <__aeabi_dsub+0x470>
 8001c04:	2201      	movs	r2, #1
 8001c06:	4b5b      	ldr	r3, [pc, #364]	; (8001d74 <__aeabi_dsub+0x348>)
 8001c08:	401c      	ands	r4, r3
 8001c0a:	087b      	lsrs	r3, r7, #1
 8001c0c:	4017      	ands	r7, r2
 8001c0e:	431f      	orrs	r7, r3
 8001c10:	07e2      	lsls	r2, r4, #31
 8001c12:	4317      	orrs	r7, r2
 8001c14:	0864      	lsrs	r4, r4, #1
 8001c16:	e78f      	b.n	8001b38 <__aeabi_dsub+0x10c>
 8001c18:	0008      	movs	r0, r1
 8001c1a:	4310      	orrs	r0, r2
 8001c1c:	d000      	beq.n	8001c20 <__aeabi_dsub+0x1f4>
 8001c1e:	e724      	b.n	8001a6a <__aeabi_dsub+0x3e>
 8001c20:	e721      	b.n	8001a66 <__aeabi_dsub+0x3a>
 8001c22:	0023      	movs	r3, r4
 8001c24:	433b      	orrs	r3, r7
 8001c26:	d100      	bne.n	8001c2a <__aeabi_dsub+0x1fe>
 8001c28:	e1b9      	b.n	8001f9e <__aeabi_dsub+0x572>
 8001c2a:	2280      	movs	r2, #128	; 0x80
 8001c2c:	0312      	lsls	r2, r2, #12
 8001c2e:	4314      	orrs	r4, r2
 8001c30:	0324      	lsls	r4, r4, #12
 8001c32:	0b24      	lsrs	r4, r4, #12
 8001c34:	e79f      	b.n	8001b76 <__aeabi_dsub+0x14a>
 8001c36:	002e      	movs	r6, r5
 8001c38:	e77e      	b.n	8001b38 <__aeabi_dsub+0x10c>
 8001c3a:	0008      	movs	r0, r1
 8001c3c:	4310      	orrs	r0, r2
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dsub+0x216>
 8001c40:	e0ca      	b.n	8001dd8 <__aeabi_dsub+0x3ac>
 8001c42:	1e58      	subs	r0, r3, #1
 8001c44:	4684      	mov	ip, r0
 8001c46:	2800      	cmp	r0, #0
 8001c48:	d000      	beq.n	8001c4c <__aeabi_dsub+0x220>
 8001c4a:	e0e7      	b.n	8001e1c <__aeabi_dsub+0x3f0>
 8001c4c:	4452      	add	r2, sl
 8001c4e:	4552      	cmp	r2, sl
 8001c50:	4180      	sbcs	r0, r0
 8001c52:	1864      	adds	r4, r4, r1
 8001c54:	4240      	negs	r0, r0
 8001c56:	1824      	adds	r4, r4, r0
 8001c58:	0017      	movs	r7, r2
 8001c5a:	2601      	movs	r6, #1
 8001c5c:	0223      	lsls	r3, r4, #8
 8001c5e:	d507      	bpl.n	8001c70 <__aeabi_dsub+0x244>
 8001c60:	2602      	movs	r6, #2
 8001c62:	e7cf      	b.n	8001c04 <__aeabi_dsub+0x1d8>
 8001c64:	4664      	mov	r4, ip
 8001c66:	432c      	orrs	r4, r5
 8001c68:	d100      	bne.n	8001c6c <__aeabi_dsub+0x240>
 8001c6a:	e1b3      	b.n	8001fd4 <__aeabi_dsub+0x5a8>
 8001c6c:	002c      	movs	r4, r5
 8001c6e:	4667      	mov	r7, ip
 8001c70:	077b      	lsls	r3, r7, #29
 8001c72:	d000      	beq.n	8001c76 <__aeabi_dsub+0x24a>
 8001c74:	e762      	b.n	8001b3c <__aeabi_dsub+0x110>
 8001c76:	0763      	lsls	r3, r4, #29
 8001c78:	08ff      	lsrs	r7, r7, #3
 8001c7a:	431f      	orrs	r7, r3
 8001c7c:	2501      	movs	r5, #1
 8001c7e:	4643      	mov	r3, r8
 8001c80:	08e4      	lsrs	r4, r4, #3
 8001c82:	401d      	ands	r5, r3
 8001c84:	e793      	b.n	8001bae <__aeabi_dsub+0x182>
 8001c86:	2d00      	cmp	r5, #0
 8001c88:	d178      	bne.n	8001d7c <__aeabi_dsub+0x350>
 8001c8a:	1c75      	adds	r5, r6, #1
 8001c8c:	056d      	lsls	r5, r5, #21
 8001c8e:	0d6d      	lsrs	r5, r5, #21
 8001c90:	2d01      	cmp	r5, #1
 8001c92:	dc00      	bgt.n	8001c96 <__aeabi_dsub+0x26a>
 8001c94:	e0f2      	b.n	8001e7c <__aeabi_dsub+0x450>
 8001c96:	4650      	mov	r0, sl
 8001c98:	1a80      	subs	r0, r0, r2
 8001c9a:	4582      	cmp	sl, r0
 8001c9c:	41bf      	sbcs	r7, r7
 8001c9e:	1a65      	subs	r5, r4, r1
 8001ca0:	427f      	negs	r7, r7
 8001ca2:	1bed      	subs	r5, r5, r7
 8001ca4:	4684      	mov	ip, r0
 8001ca6:	0228      	lsls	r0, r5, #8
 8001ca8:	d400      	bmi.n	8001cac <__aeabi_dsub+0x280>
 8001caa:	e08c      	b.n	8001dc6 <__aeabi_dsub+0x39a>
 8001cac:	4650      	mov	r0, sl
 8001cae:	1a17      	subs	r7, r2, r0
 8001cb0:	42ba      	cmp	r2, r7
 8001cb2:	4192      	sbcs	r2, r2
 8001cb4:	1b0c      	subs	r4, r1, r4
 8001cb6:	4255      	negs	r5, r2
 8001cb8:	1b65      	subs	r5, r4, r5
 8001cba:	4698      	mov	r8, r3
 8001cbc:	e714      	b.n	8001ae8 <__aeabi_dsub+0xbc>
 8001cbe:	2501      	movs	r5, #1
 8001cc0:	4643      	mov	r3, r8
 8001cc2:	2400      	movs	r4, #0
 8001cc4:	401d      	ands	r5, r3
 8001cc6:	2700      	movs	r7, #0
 8001cc8:	e755      	b.n	8001b76 <__aeabi_dsub+0x14a>
 8001cca:	4c2a      	ldr	r4, [pc, #168]	; (8001d74 <__aeabi_dsub+0x348>)
 8001ccc:	1af6      	subs	r6, r6, r3
 8001cce:	402c      	ands	r4, r5
 8001cd0:	e732      	b.n	8001b38 <__aeabi_dsub+0x10c>
 8001cd2:	003d      	movs	r5, r7
 8001cd4:	3828      	subs	r0, #40	; 0x28
 8001cd6:	4085      	lsls	r5, r0
 8001cd8:	2700      	movs	r7, #0
 8001cda:	e717      	b.n	8001b0c <__aeabi_dsub+0xe0>
 8001cdc:	0038      	movs	r0, r7
 8001cde:	f000 fa89 	bl	80021f4 <__clzsi2>
 8001ce2:	3020      	adds	r0, #32
 8001ce4:	e706      	b.n	8001af4 <__aeabi_dsub+0xc8>
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	0017      	movs	r7, r2
 8001cea:	2100      	movs	r1, #0
 8001cec:	1e7a      	subs	r2, r7, #1
 8001cee:	4197      	sbcs	r7, r2
 8001cf0:	e6ee      	b.n	8001ad0 <__aeabi_dsub+0xa4>
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d000      	beq.n	8001cf8 <__aeabi_dsub+0x2cc>
 8001cf6:	e0e5      	b.n	8001ec4 <__aeabi_dsub+0x498>
 8001cf8:	1c73      	adds	r3, r6, #1
 8001cfa:	469c      	mov	ip, r3
 8001cfc:	055b      	lsls	r3, r3, #21
 8001cfe:	0d5b      	lsrs	r3, r3, #21
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	dc00      	bgt.n	8001d06 <__aeabi_dsub+0x2da>
 8001d04:	e09f      	b.n	8001e46 <__aeabi_dsub+0x41a>
 8001d06:	4b1a      	ldr	r3, [pc, #104]	; (8001d70 <__aeabi_dsub+0x344>)
 8001d08:	459c      	cmp	ip, r3
 8001d0a:	d100      	bne.n	8001d0e <__aeabi_dsub+0x2e2>
 8001d0c:	e0c5      	b.n	8001e9a <__aeabi_dsub+0x46e>
 8001d0e:	4452      	add	r2, sl
 8001d10:	4552      	cmp	r2, sl
 8001d12:	4180      	sbcs	r0, r0
 8001d14:	1864      	adds	r4, r4, r1
 8001d16:	4240      	negs	r0, r0
 8001d18:	1824      	adds	r4, r4, r0
 8001d1a:	07e7      	lsls	r7, r4, #31
 8001d1c:	0852      	lsrs	r2, r2, #1
 8001d1e:	4317      	orrs	r7, r2
 8001d20:	0864      	lsrs	r4, r4, #1
 8001d22:	4666      	mov	r6, ip
 8001d24:	e708      	b.n	8001b38 <__aeabi_dsub+0x10c>
 8001d26:	4812      	ldr	r0, [pc, #72]	; (8001d70 <__aeabi_dsub+0x344>)
 8001d28:	4285      	cmp	r5, r0
 8001d2a:	d100      	bne.n	8001d2e <__aeabi_dsub+0x302>
 8001d2c:	e085      	b.n	8001e3a <__aeabi_dsub+0x40e>
 8001d2e:	001d      	movs	r5, r3
 8001d30:	e6bc      	b.n	8001aac <__aeabi_dsub+0x80>
 8001d32:	0029      	movs	r1, r5
 8001d34:	3e1f      	subs	r6, #31
 8001d36:	40f1      	lsrs	r1, r6
 8001d38:	2b20      	cmp	r3, #32
 8001d3a:	d100      	bne.n	8001d3e <__aeabi_dsub+0x312>
 8001d3c:	e07f      	b.n	8001e3e <__aeabi_dsub+0x412>
 8001d3e:	2240      	movs	r2, #64	; 0x40
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	409d      	lsls	r5, r3
 8001d44:	432f      	orrs	r7, r5
 8001d46:	1e7d      	subs	r5, r7, #1
 8001d48:	41af      	sbcs	r7, r5
 8001d4a:	2400      	movs	r4, #0
 8001d4c:	430f      	orrs	r7, r1
 8001d4e:	2600      	movs	r6, #0
 8001d50:	e78e      	b.n	8001c70 <__aeabi_dsub+0x244>
 8001d52:	002b      	movs	r3, r5
 8001d54:	000f      	movs	r7, r1
 8001d56:	3b20      	subs	r3, #32
 8001d58:	40df      	lsrs	r7, r3
 8001d5a:	2d20      	cmp	r5, #32
 8001d5c:	d071      	beq.n	8001e42 <__aeabi_dsub+0x416>
 8001d5e:	2340      	movs	r3, #64	; 0x40
 8001d60:	1b5d      	subs	r5, r3, r5
 8001d62:	40a9      	lsls	r1, r5
 8001d64:	430a      	orrs	r2, r1
 8001d66:	1e51      	subs	r1, r2, #1
 8001d68:	418a      	sbcs	r2, r1
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	4317      	orrs	r7, r2
 8001d6e:	e6af      	b.n	8001ad0 <__aeabi_dsub+0xa4>
 8001d70:	000007ff 	.word	0x000007ff
 8001d74:	ff7fffff 	.word	0xff7fffff
 8001d78:	800fffff 	.word	0x800fffff
 8001d7c:	2e00      	cmp	r6, #0
 8001d7e:	d03e      	beq.n	8001dfe <__aeabi_dsub+0x3d2>
 8001d80:	4eb3      	ldr	r6, [pc, #716]	; (8002050 <__aeabi_dsub+0x624>)
 8001d82:	45b4      	cmp	ip, r6
 8001d84:	d045      	beq.n	8001e12 <__aeabi_dsub+0x3e6>
 8001d86:	2680      	movs	r6, #128	; 0x80
 8001d88:	0436      	lsls	r6, r6, #16
 8001d8a:	426d      	negs	r5, r5
 8001d8c:	4334      	orrs	r4, r6
 8001d8e:	2d38      	cmp	r5, #56	; 0x38
 8001d90:	dd00      	ble.n	8001d94 <__aeabi_dsub+0x368>
 8001d92:	e0a8      	b.n	8001ee6 <__aeabi_dsub+0x4ba>
 8001d94:	2d1f      	cmp	r5, #31
 8001d96:	dd00      	ble.n	8001d9a <__aeabi_dsub+0x36e>
 8001d98:	e11f      	b.n	8001fda <__aeabi_dsub+0x5ae>
 8001d9a:	2620      	movs	r6, #32
 8001d9c:	0027      	movs	r7, r4
 8001d9e:	4650      	mov	r0, sl
 8001da0:	1b76      	subs	r6, r6, r5
 8001da2:	40b7      	lsls	r7, r6
 8001da4:	40e8      	lsrs	r0, r5
 8001da6:	4307      	orrs	r7, r0
 8001da8:	4650      	mov	r0, sl
 8001daa:	40b0      	lsls	r0, r6
 8001dac:	1e46      	subs	r6, r0, #1
 8001dae:	41b0      	sbcs	r0, r6
 8001db0:	40ec      	lsrs	r4, r5
 8001db2:	4338      	orrs	r0, r7
 8001db4:	1a17      	subs	r7, r2, r0
 8001db6:	42ba      	cmp	r2, r7
 8001db8:	4192      	sbcs	r2, r2
 8001dba:	1b0c      	subs	r4, r1, r4
 8001dbc:	4252      	negs	r2, r2
 8001dbe:	1aa4      	subs	r4, r4, r2
 8001dc0:	4666      	mov	r6, ip
 8001dc2:	4698      	mov	r8, r3
 8001dc4:	e68b      	b.n	8001ade <__aeabi_dsub+0xb2>
 8001dc6:	4664      	mov	r4, ip
 8001dc8:	4667      	mov	r7, ip
 8001dca:	432c      	orrs	r4, r5
 8001dcc:	d000      	beq.n	8001dd0 <__aeabi_dsub+0x3a4>
 8001dce:	e68b      	b.n	8001ae8 <__aeabi_dsub+0xbc>
 8001dd0:	2500      	movs	r5, #0
 8001dd2:	2600      	movs	r6, #0
 8001dd4:	2700      	movs	r7, #0
 8001dd6:	e6ea      	b.n	8001bae <__aeabi_dsub+0x182>
 8001dd8:	001e      	movs	r6, r3
 8001dda:	e6ad      	b.n	8001b38 <__aeabi_dsub+0x10c>
 8001ddc:	2b1f      	cmp	r3, #31
 8001dde:	dc60      	bgt.n	8001ea2 <__aeabi_dsub+0x476>
 8001de0:	2720      	movs	r7, #32
 8001de2:	1af8      	subs	r0, r7, r3
 8001de4:	000f      	movs	r7, r1
 8001de6:	4684      	mov	ip, r0
 8001de8:	4087      	lsls	r7, r0
 8001dea:	0010      	movs	r0, r2
 8001dec:	40d8      	lsrs	r0, r3
 8001dee:	4307      	orrs	r7, r0
 8001df0:	4660      	mov	r0, ip
 8001df2:	4082      	lsls	r2, r0
 8001df4:	1e50      	subs	r0, r2, #1
 8001df6:	4182      	sbcs	r2, r0
 8001df8:	40d9      	lsrs	r1, r3
 8001dfa:	4317      	orrs	r7, r2
 8001dfc:	e6f5      	b.n	8001bea <__aeabi_dsub+0x1be>
 8001dfe:	0026      	movs	r6, r4
 8001e00:	4650      	mov	r0, sl
 8001e02:	4306      	orrs	r6, r0
 8001e04:	d005      	beq.n	8001e12 <__aeabi_dsub+0x3e6>
 8001e06:	43ed      	mvns	r5, r5
 8001e08:	2d00      	cmp	r5, #0
 8001e0a:	d0d3      	beq.n	8001db4 <__aeabi_dsub+0x388>
 8001e0c:	4e90      	ldr	r6, [pc, #576]	; (8002050 <__aeabi_dsub+0x624>)
 8001e0e:	45b4      	cmp	ip, r6
 8001e10:	d1bd      	bne.n	8001d8e <__aeabi_dsub+0x362>
 8001e12:	000c      	movs	r4, r1
 8001e14:	0017      	movs	r7, r2
 8001e16:	4666      	mov	r6, ip
 8001e18:	4698      	mov	r8, r3
 8001e1a:	e68d      	b.n	8001b38 <__aeabi_dsub+0x10c>
 8001e1c:	488c      	ldr	r0, [pc, #560]	; (8002050 <__aeabi_dsub+0x624>)
 8001e1e:	4283      	cmp	r3, r0
 8001e20:	d00b      	beq.n	8001e3a <__aeabi_dsub+0x40e>
 8001e22:	4663      	mov	r3, ip
 8001e24:	e6d9      	b.n	8001bda <__aeabi_dsub+0x1ae>
 8001e26:	2d00      	cmp	r5, #0
 8001e28:	d000      	beq.n	8001e2c <__aeabi_dsub+0x400>
 8001e2a:	e096      	b.n	8001f5a <__aeabi_dsub+0x52e>
 8001e2c:	0008      	movs	r0, r1
 8001e2e:	4310      	orrs	r0, r2
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x408>
 8001e32:	e0e2      	b.n	8001ffa <__aeabi_dsub+0x5ce>
 8001e34:	000c      	movs	r4, r1
 8001e36:	0017      	movs	r7, r2
 8001e38:	4698      	mov	r8, r3
 8001e3a:	4e85      	ldr	r6, [pc, #532]	; (8002050 <__aeabi_dsub+0x624>)
 8001e3c:	e67c      	b.n	8001b38 <__aeabi_dsub+0x10c>
 8001e3e:	2500      	movs	r5, #0
 8001e40:	e780      	b.n	8001d44 <__aeabi_dsub+0x318>
 8001e42:	2100      	movs	r1, #0
 8001e44:	e78e      	b.n	8001d64 <__aeabi_dsub+0x338>
 8001e46:	0023      	movs	r3, r4
 8001e48:	4650      	mov	r0, sl
 8001e4a:	4303      	orrs	r3, r0
 8001e4c:	2e00      	cmp	r6, #0
 8001e4e:	d000      	beq.n	8001e52 <__aeabi_dsub+0x426>
 8001e50:	e0a8      	b.n	8001fa4 <__aeabi_dsub+0x578>
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d100      	bne.n	8001e58 <__aeabi_dsub+0x42c>
 8001e56:	e0de      	b.n	8002016 <__aeabi_dsub+0x5ea>
 8001e58:	000b      	movs	r3, r1
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	d100      	bne.n	8001e60 <__aeabi_dsub+0x434>
 8001e5e:	e66b      	b.n	8001b38 <__aeabi_dsub+0x10c>
 8001e60:	4452      	add	r2, sl
 8001e62:	4552      	cmp	r2, sl
 8001e64:	4180      	sbcs	r0, r0
 8001e66:	1864      	adds	r4, r4, r1
 8001e68:	4240      	negs	r0, r0
 8001e6a:	1824      	adds	r4, r4, r0
 8001e6c:	0017      	movs	r7, r2
 8001e6e:	0223      	lsls	r3, r4, #8
 8001e70:	d400      	bmi.n	8001e74 <__aeabi_dsub+0x448>
 8001e72:	e6fd      	b.n	8001c70 <__aeabi_dsub+0x244>
 8001e74:	4b77      	ldr	r3, [pc, #476]	; (8002054 <__aeabi_dsub+0x628>)
 8001e76:	4666      	mov	r6, ip
 8001e78:	401c      	ands	r4, r3
 8001e7a:	e65d      	b.n	8001b38 <__aeabi_dsub+0x10c>
 8001e7c:	0025      	movs	r5, r4
 8001e7e:	4650      	mov	r0, sl
 8001e80:	4305      	orrs	r5, r0
 8001e82:	2e00      	cmp	r6, #0
 8001e84:	d1cf      	bne.n	8001e26 <__aeabi_dsub+0x3fa>
 8001e86:	2d00      	cmp	r5, #0
 8001e88:	d14f      	bne.n	8001f2a <__aeabi_dsub+0x4fe>
 8001e8a:	000c      	movs	r4, r1
 8001e8c:	4314      	orrs	r4, r2
 8001e8e:	d100      	bne.n	8001e92 <__aeabi_dsub+0x466>
 8001e90:	e0a0      	b.n	8001fd4 <__aeabi_dsub+0x5a8>
 8001e92:	000c      	movs	r4, r1
 8001e94:	0017      	movs	r7, r2
 8001e96:	4698      	mov	r8, r3
 8001e98:	e64e      	b.n	8001b38 <__aeabi_dsub+0x10c>
 8001e9a:	4666      	mov	r6, ip
 8001e9c:	2400      	movs	r4, #0
 8001e9e:	2700      	movs	r7, #0
 8001ea0:	e685      	b.n	8001bae <__aeabi_dsub+0x182>
 8001ea2:	001f      	movs	r7, r3
 8001ea4:	0008      	movs	r0, r1
 8001ea6:	3f20      	subs	r7, #32
 8001ea8:	40f8      	lsrs	r0, r7
 8001eaa:	0007      	movs	r7, r0
 8001eac:	2b20      	cmp	r3, #32
 8001eae:	d100      	bne.n	8001eb2 <__aeabi_dsub+0x486>
 8001eb0:	e08e      	b.n	8001fd0 <__aeabi_dsub+0x5a4>
 8001eb2:	2040      	movs	r0, #64	; 0x40
 8001eb4:	1ac3      	subs	r3, r0, r3
 8001eb6:	4099      	lsls	r1, r3
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	1e51      	subs	r1, r2, #1
 8001ebc:	418a      	sbcs	r2, r1
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	4317      	orrs	r7, r2
 8001ec2:	e692      	b.n	8001bea <__aeabi_dsub+0x1be>
 8001ec4:	2e00      	cmp	r6, #0
 8001ec6:	d114      	bne.n	8001ef2 <__aeabi_dsub+0x4c6>
 8001ec8:	0026      	movs	r6, r4
 8001eca:	4650      	mov	r0, sl
 8001ecc:	4306      	orrs	r6, r0
 8001ece:	d062      	beq.n	8001f96 <__aeabi_dsub+0x56a>
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d15c      	bne.n	8001f90 <__aeabi_dsub+0x564>
 8001ed6:	1887      	adds	r7, r0, r2
 8001ed8:	4297      	cmp	r7, r2
 8001eda:	4192      	sbcs	r2, r2
 8001edc:	1864      	adds	r4, r4, r1
 8001ede:	4252      	negs	r2, r2
 8001ee0:	18a4      	adds	r4, r4, r2
 8001ee2:	4666      	mov	r6, ip
 8001ee4:	e687      	b.n	8001bf6 <__aeabi_dsub+0x1ca>
 8001ee6:	4650      	mov	r0, sl
 8001ee8:	4320      	orrs	r0, r4
 8001eea:	1e44      	subs	r4, r0, #1
 8001eec:	41a0      	sbcs	r0, r4
 8001eee:	2400      	movs	r4, #0
 8001ef0:	e760      	b.n	8001db4 <__aeabi_dsub+0x388>
 8001ef2:	4e57      	ldr	r6, [pc, #348]	; (8002050 <__aeabi_dsub+0x624>)
 8001ef4:	45b4      	cmp	ip, r6
 8001ef6:	d04e      	beq.n	8001f96 <__aeabi_dsub+0x56a>
 8001ef8:	2680      	movs	r6, #128	; 0x80
 8001efa:	0436      	lsls	r6, r6, #16
 8001efc:	425b      	negs	r3, r3
 8001efe:	4334      	orrs	r4, r6
 8001f00:	2b38      	cmp	r3, #56	; 0x38
 8001f02:	dd00      	ble.n	8001f06 <__aeabi_dsub+0x4da>
 8001f04:	e07f      	b.n	8002006 <__aeabi_dsub+0x5da>
 8001f06:	2b1f      	cmp	r3, #31
 8001f08:	dd00      	ble.n	8001f0c <__aeabi_dsub+0x4e0>
 8001f0a:	e08b      	b.n	8002024 <__aeabi_dsub+0x5f8>
 8001f0c:	2620      	movs	r6, #32
 8001f0e:	0027      	movs	r7, r4
 8001f10:	4650      	mov	r0, sl
 8001f12:	1af6      	subs	r6, r6, r3
 8001f14:	40b7      	lsls	r7, r6
 8001f16:	40d8      	lsrs	r0, r3
 8001f18:	4307      	orrs	r7, r0
 8001f1a:	4650      	mov	r0, sl
 8001f1c:	40b0      	lsls	r0, r6
 8001f1e:	1e46      	subs	r6, r0, #1
 8001f20:	41b0      	sbcs	r0, r6
 8001f22:	4307      	orrs	r7, r0
 8001f24:	40dc      	lsrs	r4, r3
 8001f26:	18bf      	adds	r7, r7, r2
 8001f28:	e7d6      	b.n	8001ed8 <__aeabi_dsub+0x4ac>
 8001f2a:	000d      	movs	r5, r1
 8001f2c:	4315      	orrs	r5, r2
 8001f2e:	d100      	bne.n	8001f32 <__aeabi_dsub+0x506>
 8001f30:	e602      	b.n	8001b38 <__aeabi_dsub+0x10c>
 8001f32:	4650      	mov	r0, sl
 8001f34:	1a80      	subs	r0, r0, r2
 8001f36:	4582      	cmp	sl, r0
 8001f38:	41bf      	sbcs	r7, r7
 8001f3a:	1a65      	subs	r5, r4, r1
 8001f3c:	427f      	negs	r7, r7
 8001f3e:	1bed      	subs	r5, r5, r7
 8001f40:	4684      	mov	ip, r0
 8001f42:	0228      	lsls	r0, r5, #8
 8001f44:	d400      	bmi.n	8001f48 <__aeabi_dsub+0x51c>
 8001f46:	e68d      	b.n	8001c64 <__aeabi_dsub+0x238>
 8001f48:	4650      	mov	r0, sl
 8001f4a:	1a17      	subs	r7, r2, r0
 8001f4c:	42ba      	cmp	r2, r7
 8001f4e:	4192      	sbcs	r2, r2
 8001f50:	1b0c      	subs	r4, r1, r4
 8001f52:	4252      	negs	r2, r2
 8001f54:	1aa4      	subs	r4, r4, r2
 8001f56:	4698      	mov	r8, r3
 8001f58:	e5ee      	b.n	8001b38 <__aeabi_dsub+0x10c>
 8001f5a:	000d      	movs	r5, r1
 8001f5c:	4315      	orrs	r5, r2
 8001f5e:	d100      	bne.n	8001f62 <__aeabi_dsub+0x536>
 8001f60:	e76b      	b.n	8001e3a <__aeabi_dsub+0x40e>
 8001f62:	4650      	mov	r0, sl
 8001f64:	0767      	lsls	r7, r4, #29
 8001f66:	08c0      	lsrs	r0, r0, #3
 8001f68:	4307      	orrs	r7, r0
 8001f6a:	2080      	movs	r0, #128	; 0x80
 8001f6c:	08e4      	lsrs	r4, r4, #3
 8001f6e:	0300      	lsls	r0, r0, #12
 8001f70:	4204      	tst	r4, r0
 8001f72:	d007      	beq.n	8001f84 <__aeabi_dsub+0x558>
 8001f74:	08cd      	lsrs	r5, r1, #3
 8001f76:	4205      	tst	r5, r0
 8001f78:	d104      	bne.n	8001f84 <__aeabi_dsub+0x558>
 8001f7a:	002c      	movs	r4, r5
 8001f7c:	4698      	mov	r8, r3
 8001f7e:	08d7      	lsrs	r7, r2, #3
 8001f80:	0749      	lsls	r1, r1, #29
 8001f82:	430f      	orrs	r7, r1
 8001f84:	0f7b      	lsrs	r3, r7, #29
 8001f86:	00e4      	lsls	r4, r4, #3
 8001f88:	431c      	orrs	r4, r3
 8001f8a:	00ff      	lsls	r7, r7, #3
 8001f8c:	4e30      	ldr	r6, [pc, #192]	; (8002050 <__aeabi_dsub+0x624>)
 8001f8e:	e5d3      	b.n	8001b38 <__aeabi_dsub+0x10c>
 8001f90:	4e2f      	ldr	r6, [pc, #188]	; (8002050 <__aeabi_dsub+0x624>)
 8001f92:	45b4      	cmp	ip, r6
 8001f94:	d1b4      	bne.n	8001f00 <__aeabi_dsub+0x4d4>
 8001f96:	000c      	movs	r4, r1
 8001f98:	0017      	movs	r7, r2
 8001f9a:	4666      	mov	r6, ip
 8001f9c:	e5cc      	b.n	8001b38 <__aeabi_dsub+0x10c>
 8001f9e:	2700      	movs	r7, #0
 8001fa0:	2400      	movs	r4, #0
 8001fa2:	e5e8      	b.n	8001b76 <__aeabi_dsub+0x14a>
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d039      	beq.n	800201c <__aeabi_dsub+0x5f0>
 8001fa8:	000b      	movs	r3, r1
 8001faa:	4313      	orrs	r3, r2
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_dsub+0x584>
 8001fae:	e744      	b.n	8001e3a <__aeabi_dsub+0x40e>
 8001fb0:	08c0      	lsrs	r0, r0, #3
 8001fb2:	0767      	lsls	r7, r4, #29
 8001fb4:	4307      	orrs	r7, r0
 8001fb6:	2080      	movs	r0, #128	; 0x80
 8001fb8:	08e4      	lsrs	r4, r4, #3
 8001fba:	0300      	lsls	r0, r0, #12
 8001fbc:	4204      	tst	r4, r0
 8001fbe:	d0e1      	beq.n	8001f84 <__aeabi_dsub+0x558>
 8001fc0:	08cb      	lsrs	r3, r1, #3
 8001fc2:	4203      	tst	r3, r0
 8001fc4:	d1de      	bne.n	8001f84 <__aeabi_dsub+0x558>
 8001fc6:	08d7      	lsrs	r7, r2, #3
 8001fc8:	0749      	lsls	r1, r1, #29
 8001fca:	430f      	orrs	r7, r1
 8001fcc:	001c      	movs	r4, r3
 8001fce:	e7d9      	b.n	8001f84 <__aeabi_dsub+0x558>
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	e771      	b.n	8001eb8 <__aeabi_dsub+0x48c>
 8001fd4:	2500      	movs	r5, #0
 8001fd6:	2700      	movs	r7, #0
 8001fd8:	e5e9      	b.n	8001bae <__aeabi_dsub+0x182>
 8001fda:	002e      	movs	r6, r5
 8001fdc:	0027      	movs	r7, r4
 8001fde:	3e20      	subs	r6, #32
 8001fe0:	40f7      	lsrs	r7, r6
 8001fe2:	2d20      	cmp	r5, #32
 8001fe4:	d02f      	beq.n	8002046 <__aeabi_dsub+0x61a>
 8001fe6:	2640      	movs	r6, #64	; 0x40
 8001fe8:	1b75      	subs	r5, r6, r5
 8001fea:	40ac      	lsls	r4, r5
 8001fec:	4650      	mov	r0, sl
 8001fee:	4320      	orrs	r0, r4
 8001ff0:	1e44      	subs	r4, r0, #1
 8001ff2:	41a0      	sbcs	r0, r4
 8001ff4:	2400      	movs	r4, #0
 8001ff6:	4338      	orrs	r0, r7
 8001ff8:	e6dc      	b.n	8001db4 <__aeabi_dsub+0x388>
 8001ffa:	2480      	movs	r4, #128	; 0x80
 8001ffc:	2500      	movs	r5, #0
 8001ffe:	0324      	lsls	r4, r4, #12
 8002000:	4e13      	ldr	r6, [pc, #76]	; (8002050 <__aeabi_dsub+0x624>)
 8002002:	2700      	movs	r7, #0
 8002004:	e5d3      	b.n	8001bae <__aeabi_dsub+0x182>
 8002006:	4650      	mov	r0, sl
 8002008:	4320      	orrs	r0, r4
 800200a:	0007      	movs	r7, r0
 800200c:	1e78      	subs	r0, r7, #1
 800200e:	4187      	sbcs	r7, r0
 8002010:	2400      	movs	r4, #0
 8002012:	18bf      	adds	r7, r7, r2
 8002014:	e760      	b.n	8001ed8 <__aeabi_dsub+0x4ac>
 8002016:	000c      	movs	r4, r1
 8002018:	0017      	movs	r7, r2
 800201a:	e58d      	b.n	8001b38 <__aeabi_dsub+0x10c>
 800201c:	000c      	movs	r4, r1
 800201e:	0017      	movs	r7, r2
 8002020:	4e0b      	ldr	r6, [pc, #44]	; (8002050 <__aeabi_dsub+0x624>)
 8002022:	e589      	b.n	8001b38 <__aeabi_dsub+0x10c>
 8002024:	001e      	movs	r6, r3
 8002026:	0027      	movs	r7, r4
 8002028:	3e20      	subs	r6, #32
 800202a:	40f7      	lsrs	r7, r6
 800202c:	2b20      	cmp	r3, #32
 800202e:	d00c      	beq.n	800204a <__aeabi_dsub+0x61e>
 8002030:	2640      	movs	r6, #64	; 0x40
 8002032:	1af3      	subs	r3, r6, r3
 8002034:	409c      	lsls	r4, r3
 8002036:	4650      	mov	r0, sl
 8002038:	4320      	orrs	r0, r4
 800203a:	1e44      	subs	r4, r0, #1
 800203c:	41a0      	sbcs	r0, r4
 800203e:	4307      	orrs	r7, r0
 8002040:	2400      	movs	r4, #0
 8002042:	18bf      	adds	r7, r7, r2
 8002044:	e748      	b.n	8001ed8 <__aeabi_dsub+0x4ac>
 8002046:	2400      	movs	r4, #0
 8002048:	e7d0      	b.n	8001fec <__aeabi_dsub+0x5c0>
 800204a:	2400      	movs	r4, #0
 800204c:	e7f3      	b.n	8002036 <__aeabi_dsub+0x60a>
 800204e:	46c0      	nop			; (mov r8, r8)
 8002050:	000007ff 	.word	0x000007ff
 8002054:	ff7fffff 	.word	0xff7fffff

08002058 <__aeabi_dcmpun>:
 8002058:	b570      	push	{r4, r5, r6, lr}
 800205a:	4e0e      	ldr	r6, [pc, #56]	; (8002094 <__aeabi_dcmpun+0x3c>)
 800205c:	030d      	lsls	r5, r1, #12
 800205e:	031c      	lsls	r4, r3, #12
 8002060:	0049      	lsls	r1, r1, #1
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	0b2d      	lsrs	r5, r5, #12
 8002066:	0d49      	lsrs	r1, r1, #21
 8002068:	0b24      	lsrs	r4, r4, #12
 800206a:	0d5b      	lsrs	r3, r3, #21
 800206c:	42b1      	cmp	r1, r6
 800206e:	d004      	beq.n	800207a <__aeabi_dcmpun+0x22>
 8002070:	4908      	ldr	r1, [pc, #32]	; (8002094 <__aeabi_dcmpun+0x3c>)
 8002072:	2000      	movs	r0, #0
 8002074:	428b      	cmp	r3, r1
 8002076:	d008      	beq.n	800208a <__aeabi_dcmpun+0x32>
 8002078:	bd70      	pop	{r4, r5, r6, pc}
 800207a:	4305      	orrs	r5, r0
 800207c:	2001      	movs	r0, #1
 800207e:	2d00      	cmp	r5, #0
 8002080:	d1fa      	bne.n	8002078 <__aeabi_dcmpun+0x20>
 8002082:	4904      	ldr	r1, [pc, #16]	; (8002094 <__aeabi_dcmpun+0x3c>)
 8002084:	2000      	movs	r0, #0
 8002086:	428b      	cmp	r3, r1
 8002088:	d1f6      	bne.n	8002078 <__aeabi_dcmpun+0x20>
 800208a:	4314      	orrs	r4, r2
 800208c:	0020      	movs	r0, r4
 800208e:	1e44      	subs	r4, r0, #1
 8002090:	41a0      	sbcs	r0, r4
 8002092:	e7f1      	b.n	8002078 <__aeabi_dcmpun+0x20>
 8002094:	000007ff 	.word	0x000007ff

08002098 <__aeabi_d2iz>:
 8002098:	b530      	push	{r4, r5, lr}
 800209a:	4d13      	ldr	r5, [pc, #76]	; (80020e8 <__aeabi_d2iz+0x50>)
 800209c:	030a      	lsls	r2, r1, #12
 800209e:	004b      	lsls	r3, r1, #1
 80020a0:	0b12      	lsrs	r2, r2, #12
 80020a2:	0d5b      	lsrs	r3, r3, #21
 80020a4:	0fc9      	lsrs	r1, r1, #31
 80020a6:	2400      	movs	r4, #0
 80020a8:	42ab      	cmp	r3, r5
 80020aa:	dd10      	ble.n	80020ce <__aeabi_d2iz+0x36>
 80020ac:	4c0f      	ldr	r4, [pc, #60]	; (80020ec <__aeabi_d2iz+0x54>)
 80020ae:	42a3      	cmp	r3, r4
 80020b0:	dc0f      	bgt.n	80020d2 <__aeabi_d2iz+0x3a>
 80020b2:	2480      	movs	r4, #128	; 0x80
 80020b4:	4d0e      	ldr	r5, [pc, #56]	; (80020f0 <__aeabi_d2iz+0x58>)
 80020b6:	0364      	lsls	r4, r4, #13
 80020b8:	4322      	orrs	r2, r4
 80020ba:	1aed      	subs	r5, r5, r3
 80020bc:	2d1f      	cmp	r5, #31
 80020be:	dd0b      	ble.n	80020d8 <__aeabi_d2iz+0x40>
 80020c0:	480c      	ldr	r0, [pc, #48]	; (80020f4 <__aeabi_d2iz+0x5c>)
 80020c2:	1ac3      	subs	r3, r0, r3
 80020c4:	40da      	lsrs	r2, r3
 80020c6:	4254      	negs	r4, r2
 80020c8:	2900      	cmp	r1, #0
 80020ca:	d100      	bne.n	80020ce <__aeabi_d2iz+0x36>
 80020cc:	0014      	movs	r4, r2
 80020ce:	0020      	movs	r0, r4
 80020d0:	bd30      	pop	{r4, r5, pc}
 80020d2:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <__aeabi_d2iz+0x60>)
 80020d4:	18cc      	adds	r4, r1, r3
 80020d6:	e7fa      	b.n	80020ce <__aeabi_d2iz+0x36>
 80020d8:	4c08      	ldr	r4, [pc, #32]	; (80020fc <__aeabi_d2iz+0x64>)
 80020da:	40e8      	lsrs	r0, r5
 80020dc:	46a4      	mov	ip, r4
 80020de:	4463      	add	r3, ip
 80020e0:	409a      	lsls	r2, r3
 80020e2:	4302      	orrs	r2, r0
 80020e4:	e7ef      	b.n	80020c6 <__aeabi_d2iz+0x2e>
 80020e6:	46c0      	nop			; (mov r8, r8)
 80020e8:	000003fe 	.word	0x000003fe
 80020ec:	0000041d 	.word	0x0000041d
 80020f0:	00000433 	.word	0x00000433
 80020f4:	00000413 	.word	0x00000413
 80020f8:	7fffffff 	.word	0x7fffffff
 80020fc:	fffffbed 	.word	0xfffffbed

08002100 <__aeabi_i2d>:
 8002100:	b570      	push	{r4, r5, r6, lr}
 8002102:	2800      	cmp	r0, #0
 8002104:	d030      	beq.n	8002168 <__aeabi_i2d+0x68>
 8002106:	17c3      	asrs	r3, r0, #31
 8002108:	18c4      	adds	r4, r0, r3
 800210a:	405c      	eors	r4, r3
 800210c:	0fc5      	lsrs	r5, r0, #31
 800210e:	0020      	movs	r0, r4
 8002110:	f000 f870 	bl	80021f4 <__clzsi2>
 8002114:	4b17      	ldr	r3, [pc, #92]	; (8002174 <__aeabi_i2d+0x74>)
 8002116:	4a18      	ldr	r2, [pc, #96]	; (8002178 <__aeabi_i2d+0x78>)
 8002118:	1a1b      	subs	r3, r3, r0
 800211a:	1ad2      	subs	r2, r2, r3
 800211c:	2a1f      	cmp	r2, #31
 800211e:	dd18      	ble.n	8002152 <__aeabi_i2d+0x52>
 8002120:	4a16      	ldr	r2, [pc, #88]	; (800217c <__aeabi_i2d+0x7c>)
 8002122:	1ad2      	subs	r2, r2, r3
 8002124:	4094      	lsls	r4, r2
 8002126:	2200      	movs	r2, #0
 8002128:	0324      	lsls	r4, r4, #12
 800212a:	055b      	lsls	r3, r3, #21
 800212c:	0b24      	lsrs	r4, r4, #12
 800212e:	0d5b      	lsrs	r3, r3, #21
 8002130:	2100      	movs	r1, #0
 8002132:	0010      	movs	r0, r2
 8002134:	0324      	lsls	r4, r4, #12
 8002136:	0d0a      	lsrs	r2, r1, #20
 8002138:	0b24      	lsrs	r4, r4, #12
 800213a:	0512      	lsls	r2, r2, #20
 800213c:	4322      	orrs	r2, r4
 800213e:	4c10      	ldr	r4, [pc, #64]	; (8002180 <__aeabi_i2d+0x80>)
 8002140:	051b      	lsls	r3, r3, #20
 8002142:	4022      	ands	r2, r4
 8002144:	4313      	orrs	r3, r2
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	07ed      	lsls	r5, r5, #31
 800214a:	085b      	lsrs	r3, r3, #1
 800214c:	432b      	orrs	r3, r5
 800214e:	0019      	movs	r1, r3
 8002150:	bd70      	pop	{r4, r5, r6, pc}
 8002152:	0021      	movs	r1, r4
 8002154:	4091      	lsls	r1, r2
 8002156:	000a      	movs	r2, r1
 8002158:	210b      	movs	r1, #11
 800215a:	1a08      	subs	r0, r1, r0
 800215c:	40c4      	lsrs	r4, r0
 800215e:	055b      	lsls	r3, r3, #21
 8002160:	0324      	lsls	r4, r4, #12
 8002162:	0b24      	lsrs	r4, r4, #12
 8002164:	0d5b      	lsrs	r3, r3, #21
 8002166:	e7e3      	b.n	8002130 <__aeabi_i2d+0x30>
 8002168:	2500      	movs	r5, #0
 800216a:	2300      	movs	r3, #0
 800216c:	2400      	movs	r4, #0
 800216e:	2200      	movs	r2, #0
 8002170:	e7de      	b.n	8002130 <__aeabi_i2d+0x30>
 8002172:	46c0      	nop			; (mov r8, r8)
 8002174:	0000041e 	.word	0x0000041e
 8002178:	00000433 	.word	0x00000433
 800217c:	00000413 	.word	0x00000413
 8002180:	800fffff 	.word	0x800fffff

08002184 <__aeabi_ui2d>:
 8002184:	b510      	push	{r4, lr}
 8002186:	1e04      	subs	r4, r0, #0
 8002188:	d028      	beq.n	80021dc <__aeabi_ui2d+0x58>
 800218a:	f000 f833 	bl	80021f4 <__clzsi2>
 800218e:	4b15      	ldr	r3, [pc, #84]	; (80021e4 <__aeabi_ui2d+0x60>)
 8002190:	4a15      	ldr	r2, [pc, #84]	; (80021e8 <__aeabi_ui2d+0x64>)
 8002192:	1a1b      	subs	r3, r3, r0
 8002194:	1ad2      	subs	r2, r2, r3
 8002196:	2a1f      	cmp	r2, #31
 8002198:	dd15      	ble.n	80021c6 <__aeabi_ui2d+0x42>
 800219a:	4a14      	ldr	r2, [pc, #80]	; (80021ec <__aeabi_ui2d+0x68>)
 800219c:	1ad2      	subs	r2, r2, r3
 800219e:	4094      	lsls	r4, r2
 80021a0:	2200      	movs	r2, #0
 80021a2:	0324      	lsls	r4, r4, #12
 80021a4:	055b      	lsls	r3, r3, #21
 80021a6:	0b24      	lsrs	r4, r4, #12
 80021a8:	0d5b      	lsrs	r3, r3, #21
 80021aa:	2100      	movs	r1, #0
 80021ac:	0010      	movs	r0, r2
 80021ae:	0324      	lsls	r4, r4, #12
 80021b0:	0d0a      	lsrs	r2, r1, #20
 80021b2:	0b24      	lsrs	r4, r4, #12
 80021b4:	0512      	lsls	r2, r2, #20
 80021b6:	4322      	orrs	r2, r4
 80021b8:	4c0d      	ldr	r4, [pc, #52]	; (80021f0 <__aeabi_ui2d+0x6c>)
 80021ba:	051b      	lsls	r3, r3, #20
 80021bc:	4022      	ands	r2, r4
 80021be:	4313      	orrs	r3, r2
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	0859      	lsrs	r1, r3, #1
 80021c4:	bd10      	pop	{r4, pc}
 80021c6:	0021      	movs	r1, r4
 80021c8:	4091      	lsls	r1, r2
 80021ca:	000a      	movs	r2, r1
 80021cc:	210b      	movs	r1, #11
 80021ce:	1a08      	subs	r0, r1, r0
 80021d0:	40c4      	lsrs	r4, r0
 80021d2:	055b      	lsls	r3, r3, #21
 80021d4:	0324      	lsls	r4, r4, #12
 80021d6:	0b24      	lsrs	r4, r4, #12
 80021d8:	0d5b      	lsrs	r3, r3, #21
 80021da:	e7e6      	b.n	80021aa <__aeabi_ui2d+0x26>
 80021dc:	2300      	movs	r3, #0
 80021de:	2400      	movs	r4, #0
 80021e0:	2200      	movs	r2, #0
 80021e2:	e7e2      	b.n	80021aa <__aeabi_ui2d+0x26>
 80021e4:	0000041e 	.word	0x0000041e
 80021e8:	00000433 	.word	0x00000433
 80021ec:	00000413 	.word	0x00000413
 80021f0:	800fffff 	.word	0x800fffff

080021f4 <__clzsi2>:
 80021f4:	211c      	movs	r1, #28
 80021f6:	2301      	movs	r3, #1
 80021f8:	041b      	lsls	r3, r3, #16
 80021fa:	4298      	cmp	r0, r3
 80021fc:	d301      	bcc.n	8002202 <__clzsi2+0xe>
 80021fe:	0c00      	lsrs	r0, r0, #16
 8002200:	3910      	subs	r1, #16
 8002202:	0a1b      	lsrs	r3, r3, #8
 8002204:	4298      	cmp	r0, r3
 8002206:	d301      	bcc.n	800220c <__clzsi2+0x18>
 8002208:	0a00      	lsrs	r0, r0, #8
 800220a:	3908      	subs	r1, #8
 800220c:	091b      	lsrs	r3, r3, #4
 800220e:	4298      	cmp	r0, r3
 8002210:	d301      	bcc.n	8002216 <__clzsi2+0x22>
 8002212:	0900      	lsrs	r0, r0, #4
 8002214:	3904      	subs	r1, #4
 8002216:	a202      	add	r2, pc, #8	; (adr r2, 8002220 <__clzsi2+0x2c>)
 8002218:	5c10      	ldrb	r0, [r2, r0]
 800221a:	1840      	adds	r0, r0, r1
 800221c:	4770      	bx	lr
 800221e:	46c0      	nop			; (mov r8, r8)
 8002220:	02020304 	.word	0x02020304
 8002224:	01010101 	.word	0x01010101
	...

08002230 <__clzdi2>:
 8002230:	b510      	push	{r4, lr}
 8002232:	2900      	cmp	r1, #0
 8002234:	d103      	bne.n	800223e <__clzdi2+0xe>
 8002236:	f7ff ffdd 	bl	80021f4 <__clzsi2>
 800223a:	3020      	adds	r0, #32
 800223c:	e002      	b.n	8002244 <__clzdi2+0x14>
 800223e:	1c08      	adds	r0, r1, #0
 8002240:	f7ff ffd8 	bl	80021f4 <__clzsi2>
 8002244:	bd10      	pop	{r4, pc}
 8002246:	46c0      	nop			; (mov r8, r8)

08002248 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800224e:	1dfb      	adds	r3, r7, #7
 8002250:	2200      	movs	r2, #0
 8002252:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002254:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <HAL_Init+0x3c>)
 8002256:	4a0b      	ldr	r2, [pc, #44]	; (8002284 <HAL_Init+0x3c>)
 8002258:	6812      	ldr	r2, [r2, #0]
 800225a:	2140      	movs	r1, #64	; 0x40
 800225c:	430a      	orrs	r2, r1
 800225e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002260:	2000      	movs	r0, #0
 8002262:	f000 f811 	bl	8002288 <HAL_InitTick>
 8002266:	1e03      	subs	r3, r0, #0
 8002268:	d003      	beq.n	8002272 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800226a:	1dfb      	adds	r3, r7, #7
 800226c:	2201      	movs	r2, #1
 800226e:	701a      	strb	r2, [r3, #0]
 8002270:	e001      	b.n	8002276 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002272:	f007 fcf5 	bl	8009c60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002276:	1dfb      	adds	r3, r7, #7
 8002278:	781b      	ldrb	r3, [r3, #0]
}
 800227a:	0018      	movs	r0, r3
 800227c:	46bd      	mov	sp, r7
 800227e:	b002      	add	sp, #8
 8002280:	bd80      	pop	{r7, pc}
 8002282:	46c0      	nop			; (mov r8, r8)
 8002284:	40022000 	.word	0x40022000

08002288 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002290:	230f      	movs	r3, #15
 8002292:	18fb      	adds	r3, r7, r3
 8002294:	2200      	movs	r2, #0
 8002296:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8002298:	4b0f      	ldr	r3, [pc, #60]	; (80022d8 <HAL_InitTick+0x50>)
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	23fa      	movs	r3, #250	; 0xfa
 800229e:	0099      	lsls	r1, r3, #2
 80022a0:	0010      	movs	r0, r2
 80022a2:	f7fd ff4d 	bl	8000140 <__udivsi3>
 80022a6:	0003      	movs	r3, r0
 80022a8:	0018      	movs	r0, r3
 80022aa:	f000 f919 	bl	80024e0 <HAL_SYSTICK_Config>
 80022ae:	1e03      	subs	r3, r0, #0
 80022b0:	d004      	beq.n	80022bc <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 80022b2:	230f      	movs	r3, #15
 80022b4:	18fb      	adds	r3, r7, r3
 80022b6:	2201      	movs	r2, #1
 80022b8:	701a      	strb	r2, [r3, #0]
 80022ba:	e006      	b.n	80022ca <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	2301      	movs	r3, #1
 80022c0:	425b      	negs	r3, r3
 80022c2:	2200      	movs	r2, #0
 80022c4:	0018      	movs	r0, r3
 80022c6:	f000 f8e5 	bl	8002494 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 80022ca:	230f      	movs	r3, #15
 80022cc:	18fb      	adds	r3, r7, r3
 80022ce:	781b      	ldrb	r3, [r3, #0]
}
 80022d0:	0018      	movs	r0, r3
 80022d2:	46bd      	mov	sp, r7
 80022d4:	b004      	add	sp, #16
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	2000003c 	.word	0x2000003c

080022dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  uwTick++;
 80022e0:	4b03      	ldr	r3, [pc, #12]	; (80022f0 <HAL_IncTick+0x14>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	1c5a      	adds	r2, r3, #1
 80022e6:	4b02      	ldr	r3, [pc, #8]	; (80022f0 <HAL_IncTick+0x14>)
 80022e8:	601a      	str	r2, [r3, #0]
}
 80022ea:	46c0      	nop			; (mov r8, r8)
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20000a00 	.word	0x20000a00

080022f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  return uwTick;
 80022f8:	4b02      	ldr	r3, [pc, #8]	; (8002304 <HAL_GetTick+0x10>)
 80022fa:	681b      	ldr	r3, [r3, #0]
}
 80022fc:	0018      	movs	r0, r3
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	46c0      	nop			; (mov r8, r8)
 8002304:	20000a00 	.word	0x20000a00

08002308 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002310:	f7ff fff0 	bl	80022f4 <HAL_GetTick>
 8002314:	0003      	movs	r3, r0
 8002316:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	3301      	adds	r3, #1
 8002320:	d002      	beq.n	8002328 <HAL_Delay+0x20>
  {
    wait++;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	3301      	adds	r3, #1
 8002326:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002328:	46c0      	nop			; (mov r8, r8)
 800232a:	f7ff ffe3 	bl	80022f4 <HAL_GetTick>
 800232e:	0002      	movs	r2, r0
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	1ad2      	subs	r2, r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	429a      	cmp	r2, r3
 8002338:	d3f7      	bcc.n	800232a <HAL_Delay+0x22>
  {
  }
}
 800233a:	46c0      	nop			; (mov r8, r8)
 800233c:	46bd      	mov	sp, r7
 800233e:	b004      	add	sp, #16
 8002340:	bd80      	pop	{r7, pc}
	...

08002344 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	0002      	movs	r2, r0
 800234c:	1dfb      	adds	r3, r7, #7
 800234e:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002350:	4b06      	ldr	r3, [pc, #24]	; (800236c <NVIC_EnableIRQ+0x28>)
 8002352:	1dfa      	adds	r2, r7, #7
 8002354:	7812      	ldrb	r2, [r2, #0]
 8002356:	0011      	movs	r1, r2
 8002358:	221f      	movs	r2, #31
 800235a:	400a      	ands	r2, r1
 800235c:	2101      	movs	r1, #1
 800235e:	4091      	lsls	r1, r2
 8002360:	000a      	movs	r2, r1
 8002362:	601a      	str	r2, [r3, #0]
}
 8002364:	46c0      	nop			; (mov r8, r8)
 8002366:	46bd      	mov	sp, r7
 8002368:	b002      	add	sp, #8
 800236a:	bd80      	pop	{r7, pc}
 800236c:	e000e100 	.word	0xe000e100

08002370 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002370:	b5b0      	push	{r4, r5, r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	0002      	movs	r2, r0
 8002378:	6039      	str	r1, [r7, #0]
 800237a:	1dfb      	adds	r3, r7, #7
 800237c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800237e:	1dfb      	adds	r3, r7, #7
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2b7f      	cmp	r3, #127	; 0x7f
 8002384:	d932      	bls.n	80023ec <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002386:	4c2f      	ldr	r4, [pc, #188]	; (8002444 <NVIC_SetPriority+0xd4>)
 8002388:	1dfb      	adds	r3, r7, #7
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	001a      	movs	r2, r3
 800238e:	230f      	movs	r3, #15
 8002390:	4013      	ands	r3, r2
 8002392:	3b08      	subs	r3, #8
 8002394:	0899      	lsrs	r1, r3, #2
 8002396:	4a2b      	ldr	r2, [pc, #172]	; (8002444 <NVIC_SetPriority+0xd4>)
 8002398:	1dfb      	adds	r3, r7, #7
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	0018      	movs	r0, r3
 800239e:	230f      	movs	r3, #15
 80023a0:	4003      	ands	r3, r0
 80023a2:	3b08      	subs	r3, #8
 80023a4:	089b      	lsrs	r3, r3, #2
 80023a6:	3306      	adds	r3, #6
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	18d3      	adds	r3, r2, r3
 80023ac:	3304      	adds	r3, #4
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	1dfa      	adds	r2, r7, #7
 80023b2:	7812      	ldrb	r2, [r2, #0]
 80023b4:	0010      	movs	r0, r2
 80023b6:	2203      	movs	r2, #3
 80023b8:	4002      	ands	r2, r0
 80023ba:	00d2      	lsls	r2, r2, #3
 80023bc:	20ff      	movs	r0, #255	; 0xff
 80023be:	4090      	lsls	r0, r2
 80023c0:	0002      	movs	r2, r0
 80023c2:	43d2      	mvns	r2, r2
 80023c4:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	019b      	lsls	r3, r3, #6
 80023ca:	20ff      	movs	r0, #255	; 0xff
 80023cc:	4018      	ands	r0, r3
 80023ce:	1dfb      	adds	r3, r7, #7
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	001d      	movs	r5, r3
 80023d4:	2303      	movs	r3, #3
 80023d6:	402b      	ands	r3, r5
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	4098      	lsls	r0, r3
 80023dc:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023de:	431a      	orrs	r2, r3
 80023e0:	1d8b      	adds	r3, r1, #6
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	18e3      	adds	r3, r4, r3
 80023e6:	3304      	adds	r3, #4
 80023e8:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80023ea:	e027      	b.n	800243c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023ec:	4c16      	ldr	r4, [pc, #88]	; (8002448 <NVIC_SetPriority+0xd8>)
 80023ee:	1dfb      	adds	r3, r7, #7
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	b25b      	sxtb	r3, r3
 80023f4:	089b      	lsrs	r3, r3, #2
 80023f6:	4914      	ldr	r1, [pc, #80]	; (8002448 <NVIC_SetPriority+0xd8>)
 80023f8:	1dfa      	adds	r2, r7, #7
 80023fa:	7812      	ldrb	r2, [r2, #0]
 80023fc:	b252      	sxtb	r2, r2
 80023fe:	0892      	lsrs	r2, r2, #2
 8002400:	32c0      	adds	r2, #192	; 0xc0
 8002402:	0092      	lsls	r2, r2, #2
 8002404:	5852      	ldr	r2, [r2, r1]
 8002406:	1df9      	adds	r1, r7, #7
 8002408:	7809      	ldrb	r1, [r1, #0]
 800240a:	0008      	movs	r0, r1
 800240c:	2103      	movs	r1, #3
 800240e:	4001      	ands	r1, r0
 8002410:	00c9      	lsls	r1, r1, #3
 8002412:	20ff      	movs	r0, #255	; 0xff
 8002414:	4088      	lsls	r0, r1
 8002416:	0001      	movs	r1, r0
 8002418:	43c9      	mvns	r1, r1
 800241a:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	0192      	lsls	r2, r2, #6
 8002420:	20ff      	movs	r0, #255	; 0xff
 8002422:	4010      	ands	r0, r2
 8002424:	1dfa      	adds	r2, r7, #7
 8002426:	7812      	ldrb	r2, [r2, #0]
 8002428:	0015      	movs	r5, r2
 800242a:	2203      	movs	r2, #3
 800242c:	402a      	ands	r2, r5
 800242e:	00d2      	lsls	r2, r2, #3
 8002430:	4090      	lsls	r0, r2
 8002432:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002434:	430a      	orrs	r2, r1
 8002436:	33c0      	adds	r3, #192	; 0xc0
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	511a      	str	r2, [r3, r4]
}
 800243c:	46c0      	nop			; (mov r8, r8)
 800243e:	46bd      	mov	sp, r7
 8002440:	b002      	add	sp, #8
 8002442:	bdb0      	pop	{r4, r5, r7, pc}
 8002444:	e000ed00 	.word	0xe000ed00
 8002448:	e000e100 	.word	0xe000e100

0800244c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3b01      	subs	r3, #1
 8002458:	4a0c      	ldr	r2, [pc, #48]	; (800248c <SysTick_Config+0x40>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d901      	bls.n	8002462 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800245e:	2301      	movs	r3, #1
 8002460:	e010      	b.n	8002484 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002462:	4b0b      	ldr	r3, [pc, #44]	; (8002490 <SysTick_Config+0x44>)
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	3a01      	subs	r2, #1
 8002468:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800246a:	2301      	movs	r3, #1
 800246c:	425b      	negs	r3, r3
 800246e:	2103      	movs	r1, #3
 8002470:	0018      	movs	r0, r3
 8002472:	f7ff ff7d 	bl	8002370 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002476:	4b06      	ldr	r3, [pc, #24]	; (8002490 <SysTick_Config+0x44>)
 8002478:	2200      	movs	r2, #0
 800247a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800247c:	4b04      	ldr	r3, [pc, #16]	; (8002490 <SysTick_Config+0x44>)
 800247e:	2207      	movs	r2, #7
 8002480:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002482:	2300      	movs	r3, #0
}
 8002484:	0018      	movs	r0, r3
 8002486:	46bd      	mov	sp, r7
 8002488:	b002      	add	sp, #8
 800248a:	bd80      	pop	{r7, pc}
 800248c:	00ffffff 	.word	0x00ffffff
 8002490:	e000e010 	.word	0xe000e010

08002494 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	60b9      	str	r1, [r7, #8]
 800249c:	607a      	str	r2, [r7, #4]
 800249e:	230f      	movs	r3, #15
 80024a0:	18fb      	adds	r3, r7, r3
 80024a2:	1c02      	adds	r2, r0, #0
 80024a4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80024a6:	68ba      	ldr	r2, [r7, #8]
 80024a8:	230f      	movs	r3, #15
 80024aa:	18fb      	adds	r3, r7, r3
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	b25b      	sxtb	r3, r3
 80024b0:	0011      	movs	r1, r2
 80024b2:	0018      	movs	r0, r3
 80024b4:	f7ff ff5c 	bl	8002370 <NVIC_SetPriority>
}
 80024b8:	46c0      	nop			; (mov r8, r8)
 80024ba:	46bd      	mov	sp, r7
 80024bc:	b004      	add	sp, #16
 80024be:	bd80      	pop	{r7, pc}

080024c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	0002      	movs	r2, r0
 80024c8:	1dfb      	adds	r3, r7, #7
 80024ca:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024cc:	1dfb      	adds	r3, r7, #7
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	b25b      	sxtb	r3, r3
 80024d2:	0018      	movs	r0, r3
 80024d4:	f7ff ff36 	bl	8002344 <NVIC_EnableIRQ>
}
 80024d8:	46c0      	nop			; (mov r8, r8)
 80024da:	46bd      	mov	sp, r7
 80024dc:	b002      	add	sp, #8
 80024de:	bd80      	pop	{r7, pc}

080024e0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	0018      	movs	r0, r3
 80024ec:	f7ff ffae 	bl	800244c <SysTick_Config>
 80024f0:	0003      	movs	r3, r0
}
 80024f2:	0018      	movs	r0, r3
 80024f4:	46bd      	mov	sp, r7
 80024f6:	b002      	add	sp, #8
 80024f8:	bd80      	pop	{r7, pc}
	...

080024fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024fc:	b590      	push	{r4, r7, lr}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e062      	b.n	80025d4 <HAL_DMA_Init+0xd8>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a32      	ldr	r2, [pc, #200]	; (80025dc <HAL_DMA_Init+0xe0>)
 8002514:	4694      	mov	ip, r2
 8002516:	4463      	add	r3, ip
 8002518:	2114      	movs	r1, #20
 800251a:	0018      	movs	r0, r3
 800251c:	f7fd fe10 	bl	8000140 <__udivsi3>
 8002520:	0003      	movs	r3, r0
 8002522:	009a      	lsls	r2, r3, #2
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a2d      	ldr	r2, [pc, #180]	; (80025e0 <HAL_DMA_Init+0xe4>)
 800252c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2225      	movs	r2, #37	; 0x25
 8002532:	2102      	movs	r1, #2
 8002534:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	4a28      	ldr	r2, [pc, #160]	; (80025e4 <HAL_DMA_Init+0xe8>)
 8002542:	4013      	ands	r3, r2
 8002544:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800254e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800255a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002566:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	4313      	orrs	r3, r2
 8002572:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	2380      	movs	r3, #128	; 0x80
 8002582:	01db      	lsls	r3, r3, #7
 8002584:	429a      	cmp	r2, r3
 8002586:	d019      	beq.n	80025bc <HAL_DMA_Init+0xc0>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002588:	4a17      	ldr	r2, [pc, #92]	; (80025e8 <HAL_DMA_Init+0xec>)
 800258a:	4b17      	ldr	r3, [pc, #92]	; (80025e8 <HAL_DMA_Init+0xec>)
 800258c:	6819      	ldr	r1, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002592:	201c      	movs	r0, #28
 8002594:	4003      	ands	r3, r0
 8002596:	200f      	movs	r0, #15
 8002598:	4098      	lsls	r0, r3
 800259a:	0003      	movs	r3, r0
 800259c:	43db      	mvns	r3, r3
 800259e:	400b      	ands	r3, r1
 80025a0:	6013      	str	r3, [r2, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80025a2:	4a11      	ldr	r2, [pc, #68]	; (80025e8 <HAL_DMA_Init+0xec>)
 80025a4:	4b10      	ldr	r3, [pc, #64]	; (80025e8 <HAL_DMA_Init+0xec>)
 80025a6:	6819      	ldr	r1, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6858      	ldr	r0, [r3, #4]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b0:	241c      	movs	r4, #28
 80025b2:	4023      	ands	r3, r4
 80025b4:	4098      	lsls	r0, r3
 80025b6:	0003      	movs	r3, r0
 80025b8:	430b      	orrs	r3, r1
 80025ba:	6013      	str	r3, [r2, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2225      	movs	r2, #37	; 0x25
 80025c6:	2101      	movs	r1, #1
 80025c8:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2224      	movs	r2, #36	; 0x24
 80025ce:	2100      	movs	r1, #0
 80025d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	0018      	movs	r0, r3
 80025d6:	46bd      	mov	sp, r7
 80025d8:	b005      	add	sp, #20
 80025da:	bd90      	pop	{r4, r7, pc}
 80025dc:	bffdfff8 	.word	0xbffdfff8
 80025e0:	40020000 	.word	0x40020000
 80025e4:	ffff800f 	.word	0xffff800f
 80025e8:	400200a8 	.word	0x400200a8

080025ec <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025f4:	230f      	movs	r3, #15
 80025f6:	18fb      	adds	r3, r7, r3
 80025f8:	2200      	movs	r2, #0
 80025fa:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2225      	movs	r2, #37	; 0x25
 8002600:	5c9b      	ldrb	r3, [r3, r2]
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d007      	beq.n	8002618 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2204      	movs	r2, #4
 800260c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800260e:	230f      	movs	r3, #15
 8002610:	18fb      	adds	r3, r7, r3
 8002612:	2201      	movs	r2, #1
 8002614:	701a      	strb	r2, [r3, #0]
 8002616:	e02a      	b.n	800266e <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	6812      	ldr	r2, [r2, #0]
 8002620:	6812      	ldr	r2, [r2, #0]
 8002622:	210e      	movs	r1, #14
 8002624:	438a      	bics	r2, r1
 8002626:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	6812      	ldr	r2, [r2, #0]
 8002630:	6812      	ldr	r2, [r2, #0]
 8002632:	2101      	movs	r1, #1
 8002634:	438a      	bics	r2, r1
 8002636:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002640:	211c      	movs	r1, #28
 8002642:	400a      	ands	r2, r1
 8002644:	2101      	movs	r1, #1
 8002646:	4091      	lsls	r1, r2
 8002648:	000a      	movs	r2, r1
 800264a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2225      	movs	r2, #37	; 0x25
 8002650:	2101      	movs	r1, #1
 8002652:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2224      	movs	r2, #36	; 0x24
 8002658:	2100      	movs	r1, #0
 800265a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002660:	2b00      	cmp	r3, #0
 8002662:	d004      	beq.n	800266e <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	0010      	movs	r0, r2
 800266c:	4798      	blx	r3
    }
  }
  return status;
 800266e:	230f      	movs	r3, #15
 8002670:	18fb      	adds	r3, r7, r3
 8002672:	781b      	ldrb	r3, [r3, #0]
}
 8002674:	0018      	movs	r0, r3
 8002676:	46bd      	mov	sp, r7
 8002678:	b004      	add	sp, #16
 800267a:	bd80      	pop	{r7, pc}

0800267c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002698:	221c      	movs	r2, #28
 800269a:	4013      	ands	r3, r2
 800269c:	2204      	movs	r2, #4
 800269e:	409a      	lsls	r2, r3
 80026a0:	0013      	movs	r3, r2
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	4013      	ands	r3, r2
 80026a6:	d026      	beq.n	80026f6 <HAL_DMA_IRQHandler+0x7a>
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	2204      	movs	r2, #4
 80026ac:	4013      	ands	r3, r2
 80026ae:	d022      	beq.n	80026f6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2220      	movs	r2, #32
 80026b8:	4013      	ands	r3, r2
 80026ba:	d107      	bne.n	80026cc <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	6812      	ldr	r2, [r2, #0]
 80026c4:	6812      	ldr	r2, [r2, #0]
 80026c6:	2104      	movs	r1, #4
 80026c8:	438a      	bics	r2, r1
 80026ca:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80026d4:	211c      	movs	r1, #28
 80026d6:	400a      	ands	r2, r1
 80026d8:	2104      	movs	r1, #4
 80026da:	4091      	lsls	r1, r2
 80026dc:	000a      	movs	r2, r1
 80026de:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d100      	bne.n	80026ea <HAL_DMA_IRQHandler+0x6e>
 80026e8:	e071      	b.n	80027ce <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	0010      	movs	r0, r2
 80026f2:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80026f4:	e06b      	b.n	80027ce <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fa:	221c      	movs	r2, #28
 80026fc:	4013      	ands	r3, r2
 80026fe:	2202      	movs	r2, #2
 8002700:	409a      	lsls	r2, r3
 8002702:	0013      	movs	r3, r2
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	4013      	ands	r3, r2
 8002708:	d02d      	beq.n	8002766 <HAL_DMA_IRQHandler+0xea>
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	2202      	movs	r2, #2
 800270e:	4013      	ands	r3, r2
 8002710:	d029      	beq.n	8002766 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2220      	movs	r2, #32
 800271a:	4013      	ands	r3, r2
 800271c:	d10b      	bne.n	8002736 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	6812      	ldr	r2, [r2, #0]
 8002726:	6812      	ldr	r2, [r2, #0]
 8002728:	210a      	movs	r1, #10
 800272a:	438a      	bics	r2, r1
 800272c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2225      	movs	r2, #37	; 0x25
 8002732:	2101      	movs	r1, #1
 8002734:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800273e:	211c      	movs	r1, #28
 8002740:	400a      	ands	r2, r1
 8002742:	2102      	movs	r1, #2
 8002744:	4091      	lsls	r1, r2
 8002746:	000a      	movs	r2, r1
 8002748:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2224      	movs	r2, #36	; 0x24
 800274e:	2100      	movs	r1, #0
 8002750:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002756:	2b00      	cmp	r3, #0
 8002758:	d039      	beq.n	80027ce <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	0010      	movs	r0, r2
 8002762:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002764:	e033      	b.n	80027ce <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276a:	221c      	movs	r2, #28
 800276c:	4013      	ands	r3, r2
 800276e:	2208      	movs	r2, #8
 8002770:	409a      	lsls	r2, r3
 8002772:	0013      	movs	r3, r2
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	4013      	ands	r3, r2
 8002778:	d02a      	beq.n	80027d0 <HAL_DMA_IRQHandler+0x154>
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	2208      	movs	r2, #8
 800277e:	4013      	ands	r3, r2
 8002780:	d026      	beq.n	80027d0 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6812      	ldr	r2, [r2, #0]
 800278a:	6812      	ldr	r2, [r2, #0]
 800278c:	210e      	movs	r1, #14
 800278e:	438a      	bics	r2, r1
 8002790:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800279a:	211c      	movs	r1, #28
 800279c:	400a      	ands	r2, r1
 800279e:	2101      	movs	r1, #1
 80027a0:	4091      	lsls	r1, r2
 80027a2:	000a      	movs	r2, r1
 80027a4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2225      	movs	r2, #37	; 0x25
 80027b0:	2101      	movs	r1, #1
 80027b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2224      	movs	r2, #36	; 0x24
 80027b8:	2100      	movs	r1, #0
 80027ba:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d005      	beq.n	80027d0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	0010      	movs	r0, r2
 80027cc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80027ce:	46c0      	nop			; (mov r8, r8)
 80027d0:	46c0      	nop			; (mov r8, r8)
}
 80027d2:	46bd      	mov	sp, r7
 80027d4:	b004      	add	sp, #16
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80027e2:	2300      	movs	r3, #0
 80027e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027e6:	2300      	movs	r3, #0
 80027e8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80027ee:	e155      	b.n	8002a9c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2101      	movs	r1, #1
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	4091      	lsls	r1, r2
 80027fa:	000a      	movs	r2, r1
 80027fc:	4013      	ands	r3, r2
 80027fe:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d100      	bne.n	8002808 <HAL_GPIO_Init+0x30>
 8002806:	e146      	b.n	8002a96 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	2b02      	cmp	r3, #2
 800280e:	d003      	beq.n	8002818 <HAL_GPIO_Init+0x40>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	2b12      	cmp	r3, #18
 8002816:	d123      	bne.n	8002860 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	08da      	lsrs	r2, r3, #3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3208      	adds	r2, #8
 8002820:	0092      	lsls	r2, r2, #2
 8002822:	58d3      	ldr	r3, [r2, r3]
 8002824:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	2207      	movs	r2, #7
 800282a:	4013      	ands	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	220f      	movs	r2, #15
 8002830:	409a      	lsls	r2, r3
 8002832:	0013      	movs	r3, r2
 8002834:	43da      	mvns	r2, r3
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	4013      	ands	r3, r2
 800283a:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	691a      	ldr	r2, [r3, #16]
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	2107      	movs	r1, #7
 8002844:	400b      	ands	r3, r1
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	409a      	lsls	r2, r3
 800284a:	0013      	movs	r3, r2
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	4313      	orrs	r3, r2
 8002850:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	08da      	lsrs	r2, r3, #3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	3208      	adds	r2, #8
 800285a:	0092      	lsls	r2, r2, #2
 800285c:	6939      	ldr	r1, [r7, #16]
 800285e:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d00b      	beq.n	8002880 <HAL_GPIO_Init+0xa8>
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	2b02      	cmp	r3, #2
 800286e:	d007      	beq.n	8002880 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002874:	2b11      	cmp	r3, #17
 8002876:	d003      	beq.n	8002880 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	2b12      	cmp	r3, #18
 800287e:	d130      	bne.n	80028e2 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	2203      	movs	r2, #3
 800288c:	409a      	lsls	r2, r3
 800288e:	0013      	movs	r3, r2
 8002890:	43da      	mvns	r2, r3
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	4013      	ands	r3, r2
 8002896:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	68da      	ldr	r2, [r3, #12]
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	409a      	lsls	r2, r3
 80028a2:	0013      	movs	r3, r2
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028b6:	2201      	movs	r2, #1
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	409a      	lsls	r2, r3
 80028bc:	0013      	movs	r3, r2
 80028be:	43da      	mvns	r2, r3
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	4013      	ands	r3, r2
 80028c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	091b      	lsrs	r3, r3, #4
 80028cc:	2201      	movs	r2, #1
 80028ce:	401a      	ands	r2, r3
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	409a      	lsls	r2, r3
 80028d4:	0013      	movs	r3, r2
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	4313      	orrs	r3, r2
 80028da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	2203      	movs	r2, #3
 80028ee:	409a      	lsls	r2, r3
 80028f0:	0013      	movs	r3, r2
 80028f2:	43da      	mvns	r2, r3
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	4013      	ands	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2203      	movs	r2, #3
 8002900:	401a      	ands	r2, r3
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	409a      	lsls	r2, r3
 8002908:	0013      	movs	r3, r2
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	4313      	orrs	r3, r2
 800290e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	2203      	movs	r2, #3
 8002922:	409a      	lsls	r2, r3
 8002924:	0013      	movs	r3, r2
 8002926:	43da      	mvns	r2, r3
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	4013      	ands	r3, r2
 800292c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	689a      	ldr	r2, [r3, #8]
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	409a      	lsls	r2, r3
 8002938:	0013      	movs	r3, r2
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	4313      	orrs	r3, r2
 800293e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	2380      	movs	r3, #128	; 0x80
 800294c:	055b      	lsls	r3, r3, #21
 800294e:	4013      	ands	r3, r2
 8002950:	d100      	bne.n	8002954 <HAL_GPIO_Init+0x17c>
 8002952:	e0a0      	b.n	8002a96 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002954:	4b57      	ldr	r3, [pc, #348]	; (8002ab4 <HAL_GPIO_Init+0x2dc>)
 8002956:	4a57      	ldr	r2, [pc, #348]	; (8002ab4 <HAL_GPIO_Init+0x2dc>)
 8002958:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800295a:	2101      	movs	r1, #1
 800295c:	430a      	orrs	r2, r1
 800295e:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8002960:	4a55      	ldr	r2, [pc, #340]	; (8002ab8 <HAL_GPIO_Init+0x2e0>)
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	089b      	lsrs	r3, r3, #2
 8002966:	3302      	adds	r3, #2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	589b      	ldr	r3, [r3, r2]
 800296c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	2203      	movs	r2, #3
 8002972:	4013      	ands	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	220f      	movs	r2, #15
 8002978:	409a      	lsls	r2, r3
 800297a:	0013      	movs	r3, r2
 800297c:	43da      	mvns	r2, r3
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	4013      	ands	r3, r2
 8002982:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	23a0      	movs	r3, #160	; 0xa0
 8002988:	05db      	lsls	r3, r3, #23
 800298a:	429a      	cmp	r2, r3
 800298c:	d01f      	beq.n	80029ce <HAL_GPIO_Init+0x1f6>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a4a      	ldr	r2, [pc, #296]	; (8002abc <HAL_GPIO_Init+0x2e4>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d019      	beq.n	80029ca <HAL_GPIO_Init+0x1f2>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a49      	ldr	r2, [pc, #292]	; (8002ac0 <HAL_GPIO_Init+0x2e8>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d013      	beq.n	80029c6 <HAL_GPIO_Init+0x1ee>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a48      	ldr	r2, [pc, #288]	; (8002ac4 <HAL_GPIO_Init+0x2ec>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d00d      	beq.n	80029c2 <HAL_GPIO_Init+0x1ea>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a47      	ldr	r2, [pc, #284]	; (8002ac8 <HAL_GPIO_Init+0x2f0>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d007      	beq.n	80029be <HAL_GPIO_Init+0x1e6>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a46      	ldr	r2, [pc, #280]	; (8002acc <HAL_GPIO_Init+0x2f4>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d101      	bne.n	80029ba <HAL_GPIO_Init+0x1e2>
 80029b6:	2305      	movs	r3, #5
 80029b8:	e00a      	b.n	80029d0 <HAL_GPIO_Init+0x1f8>
 80029ba:	2306      	movs	r3, #6
 80029bc:	e008      	b.n	80029d0 <HAL_GPIO_Init+0x1f8>
 80029be:	2304      	movs	r3, #4
 80029c0:	e006      	b.n	80029d0 <HAL_GPIO_Init+0x1f8>
 80029c2:	2303      	movs	r3, #3
 80029c4:	e004      	b.n	80029d0 <HAL_GPIO_Init+0x1f8>
 80029c6:	2302      	movs	r3, #2
 80029c8:	e002      	b.n	80029d0 <HAL_GPIO_Init+0x1f8>
 80029ca:	2301      	movs	r3, #1
 80029cc:	e000      	b.n	80029d0 <HAL_GPIO_Init+0x1f8>
 80029ce:	2300      	movs	r3, #0
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	2103      	movs	r1, #3
 80029d4:	400a      	ands	r2, r1
 80029d6:	0092      	lsls	r2, r2, #2
 80029d8:	4093      	lsls	r3, r2
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	4313      	orrs	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029e0:	4935      	ldr	r1, [pc, #212]	; (8002ab8 <HAL_GPIO_Init+0x2e0>)
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	089b      	lsrs	r3, r3, #2
 80029e6:	3302      	adds	r3, #2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029ee:	4b38      	ldr	r3, [pc, #224]	; (8002ad0 <HAL_GPIO_Init+0x2f8>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	43da      	mvns	r2, r3
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	4013      	ands	r3, r2
 80029fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	2380      	movs	r3, #128	; 0x80
 8002a04:	025b      	lsls	r3, r3, #9
 8002a06:	4013      	ands	r3, r2
 8002a08:	d003      	beq.n	8002a12 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a12:	4b2f      	ldr	r3, [pc, #188]	; (8002ad0 <HAL_GPIO_Init+0x2f8>)
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002a18:	4b2d      	ldr	r3, [pc, #180]	; (8002ad0 <HAL_GPIO_Init+0x2f8>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	43da      	mvns	r2, r3
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	4013      	ands	r3, r2
 8002a26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685a      	ldr	r2, [r3, #4]
 8002a2c:	2380      	movs	r3, #128	; 0x80
 8002a2e:	029b      	lsls	r3, r3, #10
 8002a30:	4013      	ands	r3, r2
 8002a32:	d003      	beq.n	8002a3c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a3c:	4b24      	ldr	r3, [pc, #144]	; (8002ad0 <HAL_GPIO_Init+0x2f8>)
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a42:	4b23      	ldr	r3, [pc, #140]	; (8002ad0 <HAL_GPIO_Init+0x2f8>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	43da      	mvns	r2, r3
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	2380      	movs	r3, #128	; 0x80
 8002a58:	035b      	lsls	r3, r3, #13
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	d003      	beq.n	8002a66 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002a66:	4b1a      	ldr	r3, [pc, #104]	; (8002ad0 <HAL_GPIO_Init+0x2f8>)
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002a6c:	4b18      	ldr	r3, [pc, #96]	; (8002ad0 <HAL_GPIO_Init+0x2f8>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	43da      	mvns	r2, r3
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	2380      	movs	r3, #128	; 0x80
 8002a82:	039b      	lsls	r3, r3, #14
 8002a84:	4013      	ands	r3, r2
 8002a86:	d003      	beq.n	8002a90 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002a90:	4b0f      	ldr	r3, [pc, #60]	; (8002ad0 <HAL_GPIO_Init+0x2f8>)
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	3301      	adds	r3, #1
 8002a9a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	40da      	lsrs	r2, r3
 8002aa4:	1e13      	subs	r3, r2, #0
 8002aa6:	d000      	beq.n	8002aaa <HAL_GPIO_Init+0x2d2>
 8002aa8:	e6a2      	b.n	80027f0 <HAL_GPIO_Init+0x18>
  }
}
 8002aaa:	46c0      	nop			; (mov r8, r8)
 8002aac:	46bd      	mov	sp, r7
 8002aae:	b006      	add	sp, #24
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	46c0      	nop			; (mov r8, r8)
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	40010000 	.word	0x40010000
 8002abc:	50000400 	.word	0x50000400
 8002ac0:	50000800 	.word	0x50000800
 8002ac4:	50000c00 	.word	0x50000c00
 8002ac8:	50001000 	.word	0x50001000
 8002acc:	50001c00 	.word	0x50001c00
 8002ad0:	40010400 	.word	0x40010400

08002ad4 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	0008      	movs	r0, r1
 8002ade:	0011      	movs	r1, r2
 8002ae0:	1cbb      	adds	r3, r7, #2
 8002ae2:	1c02      	adds	r2, r0, #0
 8002ae4:	801a      	strh	r2, [r3, #0]
 8002ae6:	1c7b      	adds	r3, r7, #1
 8002ae8:	1c0a      	adds	r2, r1, #0
 8002aea:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8002aec:	1c7b      	adds	r3, r7, #1
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d004      	beq.n	8002afe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002af4:	1cbb      	adds	r3, r7, #2
 8002af6:	881a      	ldrh	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002afc:	e003      	b.n	8002b06 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002afe:	1cbb      	adds	r3, r7, #2
 8002b00:	881a      	ldrh	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b06:	46c0      	nop			; (mov r8, r8)
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	b002      	add	sp, #8
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b082      	sub	sp, #8
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
 8002b16:	000a      	movs	r2, r1
 8002b18:	1cbb      	adds	r3, r7, #2
 8002b1a:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	695a      	ldr	r2, [r3, #20]
 8002b20:	1cbb      	adds	r3, r7, #2
 8002b22:	881b      	ldrh	r3, [r3, #0]
 8002b24:	405a      	eors	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	615a      	str	r2, [r3, #20]
}
 8002b2a:	46c0      	nop			; (mov r8, r8)
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	b002      	add	sp, #8
 8002b30:	bd80      	pop	{r7, pc}
	...

08002b34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	0002      	movs	r2, r0
 8002b3c:	1dbb      	adds	r3, r7, #6
 8002b3e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8002b40:	4b09      	ldr	r3, [pc, #36]	; (8002b68 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002b42:	695b      	ldr	r3, [r3, #20]
 8002b44:	1dba      	adds	r2, r7, #6
 8002b46:	8812      	ldrh	r2, [r2, #0]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	d008      	beq.n	8002b5e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b4c:	4b06      	ldr	r3, [pc, #24]	; (8002b68 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002b4e:	1dba      	adds	r2, r7, #6
 8002b50:	8812      	ldrh	r2, [r2, #0]
 8002b52:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b54:	1dbb      	adds	r3, r7, #6
 8002b56:	881b      	ldrh	r3, [r3, #0]
 8002b58:	0018      	movs	r0, r3
 8002b5a:	f000 f807 	bl	8002b6c <HAL_GPIO_EXTI_Callback>
  }
}
 8002b5e:	46c0      	nop			; (mov r8, r8)
 8002b60:	46bd      	mov	sp, r7
 8002b62:	b002      	add	sp, #8
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	46c0      	nop			; (mov r8, r8)
 8002b68:	40010400 	.word	0x40010400

08002b6c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	0002      	movs	r2, r0
 8002b74:	1dbb      	adds	r3, r7, #6
 8002b76:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8002b78:	46c0      	nop			; (mov r8, r8)
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	b002      	add	sp, #8
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b80:	b590      	push	{r4, r7, lr}
 8002b82:	b08b      	sub	sp, #44	; 0x2c
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d102      	bne.n	8002b94 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	f000 fbb8 	bl	8003304 <HAL_RCC_OscConfig+0x784>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b94:	4bc7      	ldr	r3, [pc, #796]	; (8002eb4 <HAL_RCC_OscConfig+0x334>)
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	220c      	movs	r2, #12
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b9e:	4bc5      	ldr	r3, [pc, #788]	; (8002eb4 <HAL_RCC_OscConfig+0x334>)
 8002ba0:	68da      	ldr	r2, [r3, #12]
 8002ba2:	2380      	movs	r3, #128	; 0x80
 8002ba4:	025b      	lsls	r3, r3, #9
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	d100      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x36>
 8002bb4:	e07e      	b.n	8002cb4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	2b08      	cmp	r3, #8
 8002bba:	d007      	beq.n	8002bcc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	2b0c      	cmp	r3, #12
 8002bc0:	d112      	bne.n	8002be8 <HAL_RCC_OscConfig+0x68>
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	2380      	movs	r3, #128	; 0x80
 8002bc6:	025b      	lsls	r3, r3, #9
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d10d      	bne.n	8002be8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bcc:	4bb9      	ldr	r3, [pc, #740]	; (8002eb4 <HAL_RCC_OscConfig+0x334>)
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	2380      	movs	r3, #128	; 0x80
 8002bd2:	029b      	lsls	r3, r3, #10
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	d100      	bne.n	8002bda <HAL_RCC_OscConfig+0x5a>
 8002bd8:	e06b      	b.n	8002cb2 <HAL_RCC_OscConfig+0x132>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d167      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	f000 fb8e 	bl	8003304 <HAL_RCC_OscConfig+0x784>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	2380      	movs	r3, #128	; 0x80
 8002bee:	025b      	lsls	r3, r3, #9
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d107      	bne.n	8002c04 <HAL_RCC_OscConfig+0x84>
 8002bf4:	4baf      	ldr	r3, [pc, #700]	; (8002eb4 <HAL_RCC_OscConfig+0x334>)
 8002bf6:	4aaf      	ldr	r2, [pc, #700]	; (8002eb4 <HAL_RCC_OscConfig+0x334>)
 8002bf8:	6812      	ldr	r2, [r2, #0]
 8002bfa:	2180      	movs	r1, #128	; 0x80
 8002bfc:	0249      	lsls	r1, r1, #9
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	e027      	b.n	8002c54 <HAL_RCC_OscConfig+0xd4>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685a      	ldr	r2, [r3, #4]
 8002c08:	23a0      	movs	r3, #160	; 0xa0
 8002c0a:	02db      	lsls	r3, r3, #11
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d10e      	bne.n	8002c2e <HAL_RCC_OscConfig+0xae>
 8002c10:	4ba8      	ldr	r3, [pc, #672]	; (8002eb4 <HAL_RCC_OscConfig+0x334>)
 8002c12:	4aa8      	ldr	r2, [pc, #672]	; (8002eb4 <HAL_RCC_OscConfig+0x334>)
 8002c14:	6812      	ldr	r2, [r2, #0]
 8002c16:	2180      	movs	r1, #128	; 0x80
 8002c18:	02c9      	lsls	r1, r1, #11
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	601a      	str	r2, [r3, #0]
 8002c1e:	4ba5      	ldr	r3, [pc, #660]	; (8002eb4 <HAL_RCC_OscConfig+0x334>)
 8002c20:	4aa4      	ldr	r2, [pc, #656]	; (8002eb4 <HAL_RCC_OscConfig+0x334>)
 8002c22:	6812      	ldr	r2, [r2, #0]
 8002c24:	2180      	movs	r1, #128	; 0x80
 8002c26:	0249      	lsls	r1, r1, #9
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	e012      	b.n	8002c54 <HAL_RCC_OscConfig+0xd4>
 8002c2e:	4ba1      	ldr	r3, [pc, #644]	; (8002eb4 <HAL_RCC_OscConfig+0x334>)
 8002c30:	4aa0      	ldr	r2, [pc, #640]	; (8002eb4 <HAL_RCC_OscConfig+0x334>)
 8002c32:	6812      	ldr	r2, [r2, #0]
 8002c34:	49a0      	ldr	r1, [pc, #640]	; (8002eb8 <HAL_RCC_OscConfig+0x338>)
 8002c36:	400a      	ands	r2, r1
 8002c38:	601a      	str	r2, [r3, #0]
 8002c3a:	4b9e      	ldr	r3, [pc, #632]	; (8002eb4 <HAL_RCC_OscConfig+0x334>)
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	2380      	movs	r3, #128	; 0x80
 8002c40:	025b      	lsls	r3, r3, #9
 8002c42:	4013      	ands	r3, r2
 8002c44:	60fb      	str	r3, [r7, #12]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	4b9a      	ldr	r3, [pc, #616]	; (8002eb4 <HAL_RCC_OscConfig+0x334>)
 8002c4a:	4a9a      	ldr	r2, [pc, #616]	; (8002eb4 <HAL_RCC_OscConfig+0x334>)
 8002c4c:	6812      	ldr	r2, [r2, #0]
 8002c4e:	499b      	ldr	r1, [pc, #620]	; (8002ebc <HAL_RCC_OscConfig+0x33c>)
 8002c50:	400a      	ands	r2, r1
 8002c52:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d015      	beq.n	8002c88 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c5c:	f7ff fb4a 	bl	80022f4 <HAL_GetTick>
 8002c60:	0003      	movs	r3, r0
 8002c62:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c64:	e009      	b.n	8002c7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c66:	f7ff fb45 	bl	80022f4 <HAL_GetTick>
 8002c6a:	0002      	movs	r2, r0
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b64      	cmp	r3, #100	; 0x64
 8002c72:	d902      	bls.n	8002c7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	f000 fb45 	bl	8003304 <HAL_RCC_OscConfig+0x784>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c7a:	4b8e      	ldr	r3, [pc, #568]	; (8002eb4 <HAL_RCC_OscConfig+0x334>)
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	2380      	movs	r3, #128	; 0x80
 8002c80:	029b      	lsls	r3, r3, #10
 8002c82:	4013      	ands	r3, r2
 8002c84:	d0ef      	beq.n	8002c66 <HAL_RCC_OscConfig+0xe6>
 8002c86:	e015      	b.n	8002cb4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c88:	f7ff fb34 	bl	80022f4 <HAL_GetTick>
 8002c8c:	0003      	movs	r3, r0
 8002c8e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c90:	e008      	b.n	8002ca4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c92:	f7ff fb2f 	bl	80022f4 <HAL_GetTick>
 8002c96:	0002      	movs	r2, r0
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b64      	cmp	r3, #100	; 0x64
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e32f      	b.n	8003304 <HAL_RCC_OscConfig+0x784>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002ca4:	4b83      	ldr	r3, [pc, #524]	; (8002eb4 <HAL_RCC_OscConfig+0x334>)
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	2380      	movs	r3, #128	; 0x80
 8002caa:	029b      	lsls	r3, r3, #10
 8002cac:	4013      	ands	r3, r2
 8002cae:	d1f0      	bne.n	8002c92 <HAL_RCC_OscConfig+0x112>
 8002cb0:	e000      	b.n	8002cb4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2202      	movs	r2, #2
 8002cba:	4013      	ands	r3, r2
 8002cbc:	d100      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x140>
 8002cbe:	e097      	b.n	8002df0 <HAL_RCC_OscConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc8:	2220      	movs	r2, #32
 8002cca:	4013      	ands	r3, r2
 8002ccc:	d009      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002cce:	4b79      	ldr	r3, [pc, #484]	; (8002eb4 <HAL_RCC_OscConfig+0x334>)
 8002cd0:	4a78      	ldr	r2, [pc, #480]	; (8002eb4 <HAL_RCC_OscConfig+0x334>)
 8002cd2:	6812      	ldr	r2, [r2, #0]
 8002cd4:	2120      	movs	r1, #32
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cdc:	2220      	movs	r2, #32
 8002cde:	4393      	bics	r3, r2
 8002ce0:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	2b04      	cmp	r3, #4
 8002ce6:	d005      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	2b0c      	cmp	r3, #12
 8002cec:	d13d      	bne.n	8002d6a <HAL_RCC_OscConfig+0x1ea>
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d13a      	bne.n	8002d6a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002cf4:	4b6f      	ldr	r3, [pc, #444]	; (8002eb4 <HAL_RCC_OscConfig+0x334>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2204      	movs	r2, #4
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	d004      	beq.n	8002d08 <HAL_RCC_OscConfig+0x188>
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d101      	bne.n	8002d08 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e2fd      	b.n	8003304 <HAL_RCC_OscConfig+0x784>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d08:	4a6a      	ldr	r2, [pc, #424]	; (8002eb4 <HAL_RCC_OscConfig+0x334>)
 8002d0a:	4b6a      	ldr	r3, [pc, #424]	; (8002eb4 <HAL_RCC_OscConfig+0x334>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	496c      	ldr	r1, [pc, #432]	; (8002ec0 <HAL_RCC_OscConfig+0x340>)
 8002d10:	4019      	ands	r1, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	021b      	lsls	r3, r3, #8
 8002d18:	430b      	orrs	r3, r1
 8002d1a:	6053      	str	r3, [r2, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002d1c:	4b65      	ldr	r3, [pc, #404]	; (8002eb4 <HAL_RCC_OscConfig+0x334>)
 8002d1e:	4a65      	ldr	r2, [pc, #404]	; (8002eb4 <HAL_RCC_OscConfig+0x334>)
 8002d20:	6812      	ldr	r2, [r2, #0]
 8002d22:	2109      	movs	r1, #9
 8002d24:	438a      	bics	r2, r1
 8002d26:	0011      	movs	r1, r2
 8002d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d2e:	f000 fc1d 	bl	800356c <HAL_RCC_GetSysClockFreq>
 8002d32:	0001      	movs	r1, r0
 8002d34:	4b5f      	ldr	r3, [pc, #380]	; (8002eb4 <HAL_RCC_OscConfig+0x334>)
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	091b      	lsrs	r3, r3, #4
 8002d3a:	220f      	movs	r2, #15
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	4a61      	ldr	r2, [pc, #388]	; (8002ec4 <HAL_RCC_OscConfig+0x344>)
 8002d40:	5cd3      	ldrb	r3, [r2, r3]
 8002d42:	000a      	movs	r2, r1
 8002d44:	40da      	lsrs	r2, r3
 8002d46:	4b60      	ldr	r3, [pc, #384]	; (8002ec8 <HAL_RCC_OscConfig+0x348>)
 8002d48:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8002d4a:	2313      	movs	r3, #19
 8002d4c:	18fc      	adds	r4, r7, r3
 8002d4e:	2000      	movs	r0, #0
 8002d50:	f7ff fa9a 	bl	8002288 <HAL_InitTick>
 8002d54:	0003      	movs	r3, r0
 8002d56:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002d58:	2313      	movs	r3, #19
 8002d5a:	18fb      	adds	r3, r7, r3
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d046      	beq.n	8002df0 <HAL_RCC_OscConfig+0x270>
      {
        return status;
 8002d62:	2313      	movs	r3, #19
 8002d64:	18fb      	adds	r3, r7, r3
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	e2cc      	b.n	8003304 <HAL_RCC_OscConfig+0x784>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d026      	beq.n	8002dbe <HAL_RCC_OscConfig+0x23e>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002d70:	4b50      	ldr	r3, [pc, #320]	; (8002eb4 <HAL_RCC_OscConfig+0x334>)
 8002d72:	4a50      	ldr	r2, [pc, #320]	; (8002eb4 <HAL_RCC_OscConfig+0x334>)
 8002d74:	6812      	ldr	r2, [r2, #0]
 8002d76:	2109      	movs	r1, #9
 8002d78:	438a      	bics	r2, r1
 8002d7a:	0011      	movs	r1, r2
 8002d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d82:	f7ff fab7 	bl	80022f4 <HAL_GetTick>
 8002d86:	0003      	movs	r3, r0
 8002d88:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d8c:	f7ff fab2 	bl	80022f4 <HAL_GetTick>
 8002d90:	0002      	movs	r2, r0
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e2b2      	b.n	8003304 <HAL_RCC_OscConfig+0x784>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d9e:	4b45      	ldr	r3, [pc, #276]	; (8002eb4 <HAL_RCC_OscConfig+0x334>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2204      	movs	r2, #4
 8002da4:	4013      	ands	r3, r2
 8002da6:	d0f1      	beq.n	8002d8c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002da8:	4a42      	ldr	r2, [pc, #264]	; (8002eb4 <HAL_RCC_OscConfig+0x334>)
 8002daa:	4b42      	ldr	r3, [pc, #264]	; (8002eb4 <HAL_RCC_OscConfig+0x334>)
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	4944      	ldr	r1, [pc, #272]	; (8002ec0 <HAL_RCC_OscConfig+0x340>)
 8002db0:	4019      	ands	r1, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	021b      	lsls	r3, r3, #8
 8002db8:	430b      	orrs	r3, r1
 8002dba:	6053      	str	r3, [r2, #4]
 8002dbc:	e018      	b.n	8002df0 <HAL_RCC_OscConfig+0x270>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dbe:	4b3d      	ldr	r3, [pc, #244]	; (8002eb4 <HAL_RCC_OscConfig+0x334>)
 8002dc0:	4a3c      	ldr	r2, [pc, #240]	; (8002eb4 <HAL_RCC_OscConfig+0x334>)
 8002dc2:	6812      	ldr	r2, [r2, #0]
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	438a      	bics	r2, r1
 8002dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dca:	f7ff fa93 	bl	80022f4 <HAL_GetTick>
 8002dce:	0003      	movs	r3, r0
 8002dd0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0x266>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dd4:	f7ff fa8e 	bl	80022f4 <HAL_GetTick>
 8002dd8:	0002      	movs	r2, r0
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x266>
          {
            return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e28e      	b.n	8003304 <HAL_RCC_OscConfig+0x784>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002de6:	4b33      	ldr	r3, [pc, #204]	; (8002eb4 <HAL_RCC_OscConfig+0x334>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2204      	movs	r2, #4
 8002dec:	4013      	ands	r3, r2
 8002dee:	d1f1      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x254>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2210      	movs	r2, #16
 8002df6:	4013      	ands	r3, r2
 8002df8:	d100      	bne.n	8002dfc <HAL_RCC_OscConfig+0x27c>
 8002dfa:	e09d      	b.n	8002f38 <HAL_RCC_OscConfig+0x3b8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d13f      	bne.n	8002e82 <HAL_RCC_OscConfig+0x302>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e02:	4b2c      	ldr	r3, [pc, #176]	; (8002eb4 <HAL_RCC_OscConfig+0x334>)
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	2380      	movs	r3, #128	; 0x80
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	d005      	beq.n	8002e1a <HAL_RCC_OscConfig+0x29a>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	69db      	ldr	r3, [r3, #28]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <HAL_RCC_OscConfig+0x29a>
      {
        return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e274      	b.n	8003304 <HAL_RCC_OscConfig+0x784>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e1a:	4a26      	ldr	r2, [pc, #152]	; (8002eb4 <HAL_RCC_OscConfig+0x334>)
 8002e1c:	4b25      	ldr	r3, [pc, #148]	; (8002eb4 <HAL_RCC_OscConfig+0x334>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	492a      	ldr	r1, [pc, #168]	; (8002ecc <HAL_RCC_OscConfig+0x34c>)
 8002e22:	4019      	ands	r1, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e28:	430b      	orrs	r3, r1
 8002e2a:	6053      	str	r3, [r2, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e2c:	4a21      	ldr	r2, [pc, #132]	; (8002eb4 <HAL_RCC_OscConfig+0x334>)
 8002e2e:	4b21      	ldr	r3, [pc, #132]	; (8002eb4 <HAL_RCC_OscConfig+0x334>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	021b      	lsls	r3, r3, #8
 8002e34:	0a19      	lsrs	r1, r3, #8
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	061b      	lsls	r3, r3, #24
 8002e3c:	430b      	orrs	r3, r1
 8002e3e:	6053      	str	r3, [r2, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e44:	0b5b      	lsrs	r3, r3, #13
 8002e46:	3301      	adds	r3, #1
 8002e48:	2280      	movs	r2, #128	; 0x80
 8002e4a:	0212      	lsls	r2, r2, #8
 8002e4c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002e4e:	4b19      	ldr	r3, [pc, #100]	; (8002eb4 <HAL_RCC_OscConfig+0x334>)
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	091b      	lsrs	r3, r3, #4
 8002e54:	210f      	movs	r1, #15
 8002e56:	400b      	ands	r3, r1
 8002e58:	491a      	ldr	r1, [pc, #104]	; (8002ec4 <HAL_RCC_OscConfig+0x344>)
 8002e5a:	5ccb      	ldrb	r3, [r1, r3]
 8002e5c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002e5e:	4b1a      	ldr	r3, [pc, #104]	; (8002ec8 <HAL_RCC_OscConfig+0x348>)
 8002e60:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8002e62:	2313      	movs	r3, #19
 8002e64:	18fc      	adds	r4, r7, r3
 8002e66:	2000      	movs	r0, #0
 8002e68:	f7ff fa0e 	bl	8002288 <HAL_InitTick>
 8002e6c:	0003      	movs	r3, r0
 8002e6e:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002e70:	2313      	movs	r3, #19
 8002e72:	18fb      	adds	r3, r7, r3
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d05e      	beq.n	8002f38 <HAL_RCC_OscConfig+0x3b8>
        {
          return status;
 8002e7a:	2313      	movs	r3, #19
 8002e7c:	18fb      	adds	r3, r7, r3
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	e240      	b.n	8003304 <HAL_RCC_OscConfig+0x784>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d03c      	beq.n	8002f04 <HAL_RCC_OscConfig+0x384>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e8a:	4b0a      	ldr	r3, [pc, #40]	; (8002eb4 <HAL_RCC_OscConfig+0x334>)
 8002e8c:	4a09      	ldr	r2, [pc, #36]	; (8002eb4 <HAL_RCC_OscConfig+0x334>)
 8002e8e:	6812      	ldr	r2, [r2, #0]
 8002e90:	2180      	movs	r1, #128	; 0x80
 8002e92:	0049      	lsls	r1, r1, #1
 8002e94:	430a      	orrs	r2, r1
 8002e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e98:	f7ff fa2c 	bl	80022f4 <HAL_GetTick>
 8002e9c:	0003      	movs	r3, r0
 8002e9e:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ea0:	e016      	b.n	8002ed0 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ea2:	f7ff fa27 	bl	80022f4 <HAL_GetTick>
 8002ea6:	0002      	movs	r2, r0
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d90f      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e227      	b.n	8003304 <HAL_RCC_OscConfig+0x784>
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	fffeffff 	.word	0xfffeffff
 8002ebc:	fffbffff 	.word	0xfffbffff
 8002ec0:	ffffe0ff 	.word	0xffffe0ff
 8002ec4:	0800d8b8 	.word	0x0800d8b8
 8002ec8:	2000003c 	.word	0x2000003c
 8002ecc:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ed0:	4bca      	ldr	r3, [pc, #808]	; (80031fc <HAL_RCC_OscConfig+0x67c>)
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	2380      	movs	r3, #128	; 0x80
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	4013      	ands	r3, r2
 8002eda:	d0e2      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x322>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002edc:	4ac7      	ldr	r2, [pc, #796]	; (80031fc <HAL_RCC_OscConfig+0x67c>)
 8002ede:	4bc7      	ldr	r3, [pc, #796]	; (80031fc <HAL_RCC_OscConfig+0x67c>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	49c7      	ldr	r1, [pc, #796]	; (8003200 <HAL_RCC_OscConfig+0x680>)
 8002ee4:	4019      	ands	r1, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eea:	430b      	orrs	r3, r1
 8002eec:	6053      	str	r3, [r2, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002eee:	4ac3      	ldr	r2, [pc, #780]	; (80031fc <HAL_RCC_OscConfig+0x67c>)
 8002ef0:	4bc2      	ldr	r3, [pc, #776]	; (80031fc <HAL_RCC_OscConfig+0x67c>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	021b      	lsls	r3, r3, #8
 8002ef6:	0a19      	lsrs	r1, r3, #8
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a1b      	ldr	r3, [r3, #32]
 8002efc:	061b      	lsls	r3, r3, #24
 8002efe:	430b      	orrs	r3, r1
 8002f00:	6053      	str	r3, [r2, #4]
 8002f02:	e019      	b.n	8002f38 <HAL_RCC_OscConfig+0x3b8>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f04:	4bbd      	ldr	r3, [pc, #756]	; (80031fc <HAL_RCC_OscConfig+0x67c>)
 8002f06:	4abd      	ldr	r2, [pc, #756]	; (80031fc <HAL_RCC_OscConfig+0x67c>)
 8002f08:	6812      	ldr	r2, [r2, #0]
 8002f0a:	49be      	ldr	r1, [pc, #760]	; (8003204 <HAL_RCC_OscConfig+0x684>)
 8002f0c:	400a      	ands	r2, r1
 8002f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f10:	f7ff f9f0 	bl	80022f4 <HAL_GetTick>
 8002f14:	0003      	movs	r3, r0
 8002f16:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002f18:	e008      	b.n	8002f2c <HAL_RCC_OscConfig+0x3ac>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f1a:	f7ff f9eb 	bl	80022f4 <HAL_GetTick>
 8002f1e:	0002      	movs	r2, r0
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_OscConfig+0x3ac>
          {
            return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e1eb      	b.n	8003304 <HAL_RCC_OscConfig+0x784>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002f2c:	4bb3      	ldr	r3, [pc, #716]	; (80031fc <HAL_RCC_OscConfig+0x67c>)
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	2380      	movs	r3, #128	; 0x80
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	4013      	ands	r3, r2
 8002f36:	d1f0      	bne.n	8002f1a <HAL_RCC_OscConfig+0x39a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2208      	movs	r2, #8
 8002f3e:	4013      	ands	r3, r2
 8002f40:	d036      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d019      	beq.n	8002f7e <HAL_RCC_OscConfig+0x3fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f4a:	4bac      	ldr	r3, [pc, #688]	; (80031fc <HAL_RCC_OscConfig+0x67c>)
 8002f4c:	4aab      	ldr	r2, [pc, #684]	; (80031fc <HAL_RCC_OscConfig+0x67c>)
 8002f4e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002f50:	2101      	movs	r1, #1
 8002f52:	430a      	orrs	r2, r1
 8002f54:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f56:	f7ff f9cd 	bl	80022f4 <HAL_GetTick>
 8002f5a:	0003      	movs	r3, r0
 8002f5c:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0x3f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f60:	f7ff f9c8 	bl	80022f4 <HAL_GetTick>
 8002f64:	0002      	movs	r2, r0
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x3f2>
        {
          return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e1c8      	b.n	8003304 <HAL_RCC_OscConfig+0x784>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f72:	4ba2      	ldr	r3, [pc, #648]	; (80031fc <HAL_RCC_OscConfig+0x67c>)
 8002f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f76:	2202      	movs	r2, #2
 8002f78:	4013      	ands	r3, r2
 8002f7a:	d0f1      	beq.n	8002f60 <HAL_RCC_OscConfig+0x3e0>
 8002f7c:	e018      	b.n	8002fb0 <HAL_RCC_OscConfig+0x430>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f7e:	4b9f      	ldr	r3, [pc, #636]	; (80031fc <HAL_RCC_OscConfig+0x67c>)
 8002f80:	4a9e      	ldr	r2, [pc, #632]	; (80031fc <HAL_RCC_OscConfig+0x67c>)
 8002f82:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002f84:	2101      	movs	r1, #1
 8002f86:	438a      	bics	r2, r1
 8002f88:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f8a:	f7ff f9b3 	bl	80022f4 <HAL_GetTick>
 8002f8e:	0003      	movs	r3, r0
 8002f90:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_OscConfig+0x426>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f94:	f7ff f9ae 	bl	80022f4 <HAL_GetTick>
 8002f98:	0002      	movs	r2, r0
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x426>
        {
          return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e1ae      	b.n	8003304 <HAL_RCC_OscConfig+0x784>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002fa6:	4b95      	ldr	r3, [pc, #596]	; (80031fc <HAL_RCC_OscConfig+0x67c>)
 8002fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002faa:	2202      	movs	r2, #2
 8002fac:	4013      	ands	r3, r2
 8002fae:	d1f1      	bne.n	8002f94 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2204      	movs	r2, #4
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	d100      	bne.n	8002fbc <HAL_RCC_OscConfig+0x43c>
 8002fba:	e0af      	b.n	800311c <HAL_RCC_OscConfig+0x59c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fbc:	2323      	movs	r3, #35	; 0x23
 8002fbe:	18fb      	adds	r3, r7, r3
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fc4:	4b8d      	ldr	r3, [pc, #564]	; (80031fc <HAL_RCC_OscConfig+0x67c>)
 8002fc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fc8:	2380      	movs	r3, #128	; 0x80
 8002fca:	055b      	lsls	r3, r3, #21
 8002fcc:	4013      	ands	r3, r2
 8002fce:	d10a      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x466>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fd0:	4b8a      	ldr	r3, [pc, #552]	; (80031fc <HAL_RCC_OscConfig+0x67c>)
 8002fd2:	4a8a      	ldr	r2, [pc, #552]	; (80031fc <HAL_RCC_OscConfig+0x67c>)
 8002fd4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fd6:	2180      	movs	r1, #128	; 0x80
 8002fd8:	0549      	lsls	r1, r1, #21
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002fde:	2323      	movs	r3, #35	; 0x23
 8002fe0:	18fb      	adds	r3, r7, r3
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe6:	4b88      	ldr	r3, [pc, #544]	; (8003208 <HAL_RCC_OscConfig+0x688>)
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	2380      	movs	r3, #128	; 0x80
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	4013      	ands	r3, r2
 8002ff0:	d11a      	bne.n	8003028 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ff2:	4b85      	ldr	r3, [pc, #532]	; (8003208 <HAL_RCC_OscConfig+0x688>)
 8002ff4:	4a84      	ldr	r2, [pc, #528]	; (8003208 <HAL_RCC_OscConfig+0x688>)
 8002ff6:	6812      	ldr	r2, [r2, #0]
 8002ff8:	2180      	movs	r1, #128	; 0x80
 8002ffa:	0049      	lsls	r1, r1, #1
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003000:	f7ff f978 	bl	80022f4 <HAL_GetTick>
 8003004:	0003      	movs	r3, r0
 8003006:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003008:	e008      	b.n	800301c <HAL_RCC_OscConfig+0x49c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800300a:	f7ff f973 	bl	80022f4 <HAL_GetTick>
 800300e:	0002      	movs	r2, r0
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	2b64      	cmp	r3, #100	; 0x64
 8003016:	d901      	bls.n	800301c <HAL_RCC_OscConfig+0x49c>
        {
          return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e173      	b.n	8003304 <HAL_RCC_OscConfig+0x784>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800301c:	4b7a      	ldr	r3, [pc, #488]	; (8003208 <HAL_RCC_OscConfig+0x688>)
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	2380      	movs	r3, #128	; 0x80
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	4013      	ands	r3, r2
 8003026:	d0f0      	beq.n	800300a <HAL_RCC_OscConfig+0x48a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	2380      	movs	r3, #128	; 0x80
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	429a      	cmp	r2, r3
 8003032:	d107      	bne.n	8003044 <HAL_RCC_OscConfig+0x4c4>
 8003034:	4b71      	ldr	r3, [pc, #452]	; (80031fc <HAL_RCC_OscConfig+0x67c>)
 8003036:	4a71      	ldr	r2, [pc, #452]	; (80031fc <HAL_RCC_OscConfig+0x67c>)
 8003038:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800303a:	2180      	movs	r1, #128	; 0x80
 800303c:	0049      	lsls	r1, r1, #1
 800303e:	430a      	orrs	r2, r1
 8003040:	651a      	str	r2, [r3, #80]	; 0x50
 8003042:	e031      	b.n	80030a8 <HAL_RCC_OscConfig+0x528>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d10c      	bne.n	8003066 <HAL_RCC_OscConfig+0x4e6>
 800304c:	4b6b      	ldr	r3, [pc, #428]	; (80031fc <HAL_RCC_OscConfig+0x67c>)
 800304e:	4a6b      	ldr	r2, [pc, #428]	; (80031fc <HAL_RCC_OscConfig+0x67c>)
 8003050:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003052:	496c      	ldr	r1, [pc, #432]	; (8003204 <HAL_RCC_OscConfig+0x684>)
 8003054:	400a      	ands	r2, r1
 8003056:	651a      	str	r2, [r3, #80]	; 0x50
 8003058:	4b68      	ldr	r3, [pc, #416]	; (80031fc <HAL_RCC_OscConfig+0x67c>)
 800305a:	4a68      	ldr	r2, [pc, #416]	; (80031fc <HAL_RCC_OscConfig+0x67c>)
 800305c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800305e:	496b      	ldr	r1, [pc, #428]	; (800320c <HAL_RCC_OscConfig+0x68c>)
 8003060:	400a      	ands	r2, r1
 8003062:	651a      	str	r2, [r3, #80]	; 0x50
 8003064:	e020      	b.n	80030a8 <HAL_RCC_OscConfig+0x528>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	689a      	ldr	r2, [r3, #8]
 800306a:	23a0      	movs	r3, #160	; 0xa0
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	429a      	cmp	r2, r3
 8003070:	d10e      	bne.n	8003090 <HAL_RCC_OscConfig+0x510>
 8003072:	4b62      	ldr	r3, [pc, #392]	; (80031fc <HAL_RCC_OscConfig+0x67c>)
 8003074:	4a61      	ldr	r2, [pc, #388]	; (80031fc <HAL_RCC_OscConfig+0x67c>)
 8003076:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003078:	2180      	movs	r1, #128	; 0x80
 800307a:	00c9      	lsls	r1, r1, #3
 800307c:	430a      	orrs	r2, r1
 800307e:	651a      	str	r2, [r3, #80]	; 0x50
 8003080:	4b5e      	ldr	r3, [pc, #376]	; (80031fc <HAL_RCC_OscConfig+0x67c>)
 8003082:	4a5e      	ldr	r2, [pc, #376]	; (80031fc <HAL_RCC_OscConfig+0x67c>)
 8003084:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003086:	2180      	movs	r1, #128	; 0x80
 8003088:	0049      	lsls	r1, r1, #1
 800308a:	430a      	orrs	r2, r1
 800308c:	651a      	str	r2, [r3, #80]	; 0x50
 800308e:	e00b      	b.n	80030a8 <HAL_RCC_OscConfig+0x528>
 8003090:	4b5a      	ldr	r3, [pc, #360]	; (80031fc <HAL_RCC_OscConfig+0x67c>)
 8003092:	4a5a      	ldr	r2, [pc, #360]	; (80031fc <HAL_RCC_OscConfig+0x67c>)
 8003094:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003096:	495b      	ldr	r1, [pc, #364]	; (8003204 <HAL_RCC_OscConfig+0x684>)
 8003098:	400a      	ands	r2, r1
 800309a:	651a      	str	r2, [r3, #80]	; 0x50
 800309c:	4b57      	ldr	r3, [pc, #348]	; (80031fc <HAL_RCC_OscConfig+0x67c>)
 800309e:	4a57      	ldr	r2, [pc, #348]	; (80031fc <HAL_RCC_OscConfig+0x67c>)
 80030a0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80030a2:	495a      	ldr	r1, [pc, #360]	; (800320c <HAL_RCC_OscConfig+0x68c>)
 80030a4:	400a      	ands	r2, r1
 80030a6:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d015      	beq.n	80030dc <HAL_RCC_OscConfig+0x55c>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030b0:	f7ff f920 	bl	80022f4 <HAL_GetTick>
 80030b4:	0003      	movs	r3, r0
 80030b6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030b8:	e009      	b.n	80030ce <HAL_RCC_OscConfig+0x54e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030ba:	f7ff f91b 	bl	80022f4 <HAL_GetTick>
 80030be:	0002      	movs	r2, r0
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	4a52      	ldr	r2, [pc, #328]	; (8003210 <HAL_RCC_OscConfig+0x690>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x54e>
        {
          return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e11a      	b.n	8003304 <HAL_RCC_OscConfig+0x784>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030ce:	4b4b      	ldr	r3, [pc, #300]	; (80031fc <HAL_RCC_OscConfig+0x67c>)
 80030d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80030d2:	2380      	movs	r3, #128	; 0x80
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	4013      	ands	r3, r2
 80030d8:	d0ef      	beq.n	80030ba <HAL_RCC_OscConfig+0x53a>
 80030da:	e014      	b.n	8003106 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030dc:	f7ff f90a 	bl	80022f4 <HAL_GetTick>
 80030e0:	0003      	movs	r3, r0
 80030e2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030e4:	e009      	b.n	80030fa <HAL_RCC_OscConfig+0x57a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030e6:	f7ff f905 	bl	80022f4 <HAL_GetTick>
 80030ea:	0002      	movs	r2, r0
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	4a47      	ldr	r2, [pc, #284]	; (8003210 <HAL_RCC_OscConfig+0x690>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x57a>
        {
          return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e104      	b.n	8003304 <HAL_RCC_OscConfig+0x784>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030fa:	4b40      	ldr	r3, [pc, #256]	; (80031fc <HAL_RCC_OscConfig+0x67c>)
 80030fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80030fe:	2380      	movs	r3, #128	; 0x80
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	4013      	ands	r3, r2
 8003104:	d1ef      	bne.n	80030e6 <HAL_RCC_OscConfig+0x566>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003106:	2323      	movs	r3, #35	; 0x23
 8003108:	18fb      	adds	r3, r7, r3
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d105      	bne.n	800311c <HAL_RCC_OscConfig+0x59c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003110:	4b3a      	ldr	r3, [pc, #232]	; (80031fc <HAL_RCC_OscConfig+0x67c>)
 8003112:	4a3a      	ldr	r2, [pc, #232]	; (80031fc <HAL_RCC_OscConfig+0x67c>)
 8003114:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003116:	493f      	ldr	r1, [pc, #252]	; (8003214 <HAL_RCC_OscConfig+0x694>)
 8003118:	400a      	ands	r2, r1
 800311a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2220      	movs	r2, #32
 8003122:	4013      	ands	r3, r2
 8003124:	d049      	beq.n	80031ba <HAL_RCC_OscConfig+0x63a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d026      	beq.n	800317c <HAL_RCC_OscConfig+0x5fc>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800312e:	4b33      	ldr	r3, [pc, #204]	; (80031fc <HAL_RCC_OscConfig+0x67c>)
 8003130:	4a32      	ldr	r2, [pc, #200]	; (80031fc <HAL_RCC_OscConfig+0x67c>)
 8003132:	6892      	ldr	r2, [r2, #8]
 8003134:	2101      	movs	r1, #1
 8003136:	430a      	orrs	r2, r1
 8003138:	609a      	str	r2, [r3, #8]
 800313a:	4b30      	ldr	r3, [pc, #192]	; (80031fc <HAL_RCC_OscConfig+0x67c>)
 800313c:	4a2f      	ldr	r2, [pc, #188]	; (80031fc <HAL_RCC_OscConfig+0x67c>)
 800313e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003140:	2101      	movs	r1, #1
 8003142:	430a      	orrs	r2, r1
 8003144:	635a      	str	r2, [r3, #52]	; 0x34
 8003146:	4b34      	ldr	r3, [pc, #208]	; (8003218 <HAL_RCC_OscConfig+0x698>)
 8003148:	4a33      	ldr	r2, [pc, #204]	; (8003218 <HAL_RCC_OscConfig+0x698>)
 800314a:	6a12      	ldr	r2, [r2, #32]
 800314c:	2180      	movs	r1, #128	; 0x80
 800314e:	0189      	lsls	r1, r1, #6
 8003150:	430a      	orrs	r2, r1
 8003152:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003154:	f7ff f8ce 	bl	80022f4 <HAL_GetTick>
 8003158:	0003      	movs	r3, r0
 800315a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800315c:	e008      	b.n	8003170 <HAL_RCC_OscConfig+0x5f0>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800315e:	f7ff f8c9 	bl	80022f4 <HAL_GetTick>
 8003162:	0002      	movs	r2, r0
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_OscConfig+0x5f0>
          {
            return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e0c9      	b.n	8003304 <HAL_RCC_OscConfig+0x784>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003170:	4b22      	ldr	r3, [pc, #136]	; (80031fc <HAL_RCC_OscConfig+0x67c>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	2202      	movs	r2, #2
 8003176:	4013      	ands	r3, r2
 8003178:	d0f1      	beq.n	800315e <HAL_RCC_OscConfig+0x5de>
 800317a:	e01e      	b.n	80031ba <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800317c:	4b1f      	ldr	r3, [pc, #124]	; (80031fc <HAL_RCC_OscConfig+0x67c>)
 800317e:	4a1f      	ldr	r2, [pc, #124]	; (80031fc <HAL_RCC_OscConfig+0x67c>)
 8003180:	6892      	ldr	r2, [r2, #8]
 8003182:	2101      	movs	r1, #1
 8003184:	438a      	bics	r2, r1
 8003186:	609a      	str	r2, [r3, #8]
 8003188:	4b23      	ldr	r3, [pc, #140]	; (8003218 <HAL_RCC_OscConfig+0x698>)
 800318a:	4a23      	ldr	r2, [pc, #140]	; (8003218 <HAL_RCC_OscConfig+0x698>)
 800318c:	6a12      	ldr	r2, [r2, #32]
 800318e:	4923      	ldr	r1, [pc, #140]	; (800321c <HAL_RCC_OscConfig+0x69c>)
 8003190:	400a      	ands	r2, r1
 8003192:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003194:	f7ff f8ae 	bl	80022f4 <HAL_GetTick>
 8003198:	0003      	movs	r3, r0
 800319a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800319c:	e008      	b.n	80031b0 <HAL_RCC_OscConfig+0x630>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800319e:	f7ff f8a9 	bl	80022f4 <HAL_GetTick>
 80031a2:	0002      	movs	r2, r0
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x630>
          {
            return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e0a9      	b.n	8003304 <HAL_RCC_OscConfig+0x784>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80031b0:	4b12      	ldr	r3, [pc, #72]	; (80031fc <HAL_RCC_OscConfig+0x67c>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	2202      	movs	r2, #2
 80031b6:	4013      	ands	r3, r2
 80031b8:	d1f1      	bne.n	800319e <HAL_RCC_OscConfig+0x61e>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d100      	bne.n	80031c4 <HAL_RCC_OscConfig+0x644>
 80031c2:	e09e      	b.n	8003302 <HAL_RCC_OscConfig+0x782>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	2b0c      	cmp	r3, #12
 80031c8:	d100      	bne.n	80031cc <HAL_RCC_OscConfig+0x64c>
 80031ca:	e077      	b.n	80032bc <HAL_RCC_OscConfig+0x73c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d158      	bne.n	8003286 <HAL_RCC_OscConfig+0x706>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d4:	4b09      	ldr	r3, [pc, #36]	; (80031fc <HAL_RCC_OscConfig+0x67c>)
 80031d6:	4a09      	ldr	r2, [pc, #36]	; (80031fc <HAL_RCC_OscConfig+0x67c>)
 80031d8:	6812      	ldr	r2, [r2, #0]
 80031da:	4911      	ldr	r1, [pc, #68]	; (8003220 <HAL_RCC_OscConfig+0x6a0>)
 80031dc:	400a      	ands	r2, r1
 80031de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e0:	f7ff f888 	bl	80022f4 <HAL_GetTick>
 80031e4:	0003      	movs	r3, r0
 80031e6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80031e8:	e01c      	b.n	8003224 <HAL_RCC_OscConfig+0x6a4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031ea:	f7ff f883 	bl	80022f4 <HAL_GetTick>
 80031ee:	0002      	movs	r2, r0
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d915      	bls.n	8003224 <HAL_RCC_OscConfig+0x6a4>
          {
            return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e083      	b.n	8003304 <HAL_RCC_OscConfig+0x784>
 80031fc:	40021000 	.word	0x40021000
 8003200:	ffff1fff 	.word	0xffff1fff
 8003204:	fffffeff 	.word	0xfffffeff
 8003208:	40007000 	.word	0x40007000
 800320c:	fffffbff 	.word	0xfffffbff
 8003210:	00001388 	.word	0x00001388
 8003214:	efffffff 	.word	0xefffffff
 8003218:	40010000 	.word	0x40010000
 800321c:	ffffdfff 	.word	0xffffdfff
 8003220:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003224:	4b39      	ldr	r3, [pc, #228]	; (800330c <HAL_RCC_OscConfig+0x78c>)
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	2380      	movs	r3, #128	; 0x80
 800322a:	049b      	lsls	r3, r3, #18
 800322c:	4013      	ands	r3, r2
 800322e:	d1dc      	bne.n	80031ea <HAL_RCC_OscConfig+0x66a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003230:	4a36      	ldr	r2, [pc, #216]	; (800330c <HAL_RCC_OscConfig+0x78c>)
 8003232:	4b36      	ldr	r3, [pc, #216]	; (800330c <HAL_RCC_OscConfig+0x78c>)
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	4936      	ldr	r1, [pc, #216]	; (8003310 <HAL_RCC_OscConfig+0x790>)
 8003238:	4019      	ands	r1, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003242:	4318      	orrs	r0, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003248:	4303      	orrs	r3, r0
 800324a:	430b      	orrs	r3, r1
 800324c:	60d3      	str	r3, [r2, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800324e:	4b2f      	ldr	r3, [pc, #188]	; (800330c <HAL_RCC_OscConfig+0x78c>)
 8003250:	4a2e      	ldr	r2, [pc, #184]	; (800330c <HAL_RCC_OscConfig+0x78c>)
 8003252:	6812      	ldr	r2, [r2, #0]
 8003254:	2180      	movs	r1, #128	; 0x80
 8003256:	0449      	lsls	r1, r1, #17
 8003258:	430a      	orrs	r2, r1
 800325a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325c:	f7ff f84a 	bl	80022f4 <HAL_GetTick>
 8003260:	0003      	movs	r3, r0
 8003262:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003264:	e008      	b.n	8003278 <HAL_RCC_OscConfig+0x6f8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003266:	f7ff f845 	bl	80022f4 <HAL_GetTick>
 800326a:	0002      	movs	r2, r0
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	2b02      	cmp	r3, #2
 8003272:	d901      	bls.n	8003278 <HAL_RCC_OscConfig+0x6f8>
          {
            return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e045      	b.n	8003304 <HAL_RCC_OscConfig+0x784>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003278:	4b24      	ldr	r3, [pc, #144]	; (800330c <HAL_RCC_OscConfig+0x78c>)
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	2380      	movs	r3, #128	; 0x80
 800327e:	049b      	lsls	r3, r3, #18
 8003280:	4013      	ands	r3, r2
 8003282:	d0f0      	beq.n	8003266 <HAL_RCC_OscConfig+0x6e6>
 8003284:	e03d      	b.n	8003302 <HAL_RCC_OscConfig+0x782>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003286:	4b21      	ldr	r3, [pc, #132]	; (800330c <HAL_RCC_OscConfig+0x78c>)
 8003288:	4a20      	ldr	r2, [pc, #128]	; (800330c <HAL_RCC_OscConfig+0x78c>)
 800328a:	6812      	ldr	r2, [r2, #0]
 800328c:	4921      	ldr	r1, [pc, #132]	; (8003314 <HAL_RCC_OscConfig+0x794>)
 800328e:	400a      	ands	r2, r1
 8003290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003292:	f7ff f82f 	bl	80022f4 <HAL_GetTick>
 8003296:	0003      	movs	r3, r0
 8003298:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800329c:	f7ff f82a 	bl	80022f4 <HAL_GetTick>
 80032a0:	0002      	movs	r2, r0
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e02a      	b.n	8003304 <HAL_RCC_OscConfig+0x784>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80032ae:	4b17      	ldr	r3, [pc, #92]	; (800330c <HAL_RCC_OscConfig+0x78c>)
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	2380      	movs	r3, #128	; 0x80
 80032b4:	049b      	lsls	r3, r3, #18
 80032b6:	4013      	ands	r3, r2
 80032b8:	d1f0      	bne.n	800329c <HAL_RCC_OscConfig+0x71c>
 80032ba:	e022      	b.n	8003302 <HAL_RCC_OscConfig+0x782>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d101      	bne.n	80032c8 <HAL_RCC_OscConfig+0x748>
      {
        return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e01d      	b.n	8003304 <HAL_RCC_OscConfig+0x784>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032c8:	4b10      	ldr	r3, [pc, #64]	; (800330c <HAL_RCC_OscConfig+0x78c>)
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	2380      	movs	r3, #128	; 0x80
 80032d2:	025b      	lsls	r3, r3, #9
 80032d4:	401a      	ands	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032da:	429a      	cmp	r2, r3
 80032dc:	d10f      	bne.n	80032fe <HAL_RCC_OscConfig+0x77e>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	23f0      	movs	r3, #240	; 0xf0
 80032e2:	039b      	lsls	r3, r3, #14
 80032e4:	401a      	ands	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d107      	bne.n	80032fe <HAL_RCC_OscConfig+0x77e>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	23c0      	movs	r3, #192	; 0xc0
 80032f2:	041b      	lsls	r3, r3, #16
 80032f4:	401a      	ands	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d001      	beq.n	8003302 <HAL_RCC_OscConfig+0x782>
        {
          return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e000      	b.n	8003304 <HAL_RCC_OscConfig+0x784>
        }
      }
    }
  }

  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	0018      	movs	r0, r3
 8003306:	46bd      	mov	sp, r7
 8003308:	b00b      	add	sp, #44	; 0x2c
 800330a:	bd90      	pop	{r4, r7, pc}
 800330c:	40021000 	.word	0x40021000
 8003310:	ff02ffff 	.word	0xff02ffff
 8003314:	feffffff 	.word	0xfeffffff

08003318 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003318:	b590      	push	{r4, r7, lr}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d101      	bne.n	800332c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e10c      	b.n	8003546 <HAL_RCC_ClockConfig+0x22e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800332c:	4b88      	ldr	r3, [pc, #544]	; (8003550 <HAL_RCC_ClockConfig+0x238>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2201      	movs	r2, #1
 8003332:	401a      	ands	r2, r3
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	429a      	cmp	r2, r3
 8003338:	d211      	bcs.n	800335e <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800333a:	4b85      	ldr	r3, [pc, #532]	; (8003550 <HAL_RCC_ClockConfig+0x238>)
 800333c:	4a84      	ldr	r2, [pc, #528]	; (8003550 <HAL_RCC_ClockConfig+0x238>)
 800333e:	6812      	ldr	r2, [r2, #0]
 8003340:	2101      	movs	r1, #1
 8003342:	438a      	bics	r2, r1
 8003344:	0011      	movs	r1, r2
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	430a      	orrs	r2, r1
 800334a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800334c:	4b80      	ldr	r3, [pc, #512]	; (8003550 <HAL_RCC_ClockConfig+0x238>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2201      	movs	r2, #1
 8003352:	401a      	ands	r2, r3
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	429a      	cmp	r2, r3
 8003358:	d001      	beq.n	800335e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e0f3      	b.n	8003546 <HAL_RCC_ClockConfig+0x22e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2202      	movs	r2, #2
 8003364:	4013      	ands	r3, r2
 8003366:	d009      	beq.n	800337c <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003368:	4a7a      	ldr	r2, [pc, #488]	; (8003554 <HAL_RCC_ClockConfig+0x23c>)
 800336a:	4b7a      	ldr	r3, [pc, #488]	; (8003554 <HAL_RCC_ClockConfig+0x23c>)
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	21f0      	movs	r1, #240	; 0xf0
 8003370:	438b      	bics	r3, r1
 8003372:	0019      	movs	r1, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	430b      	orrs	r3, r1
 800337a:	60d3      	str	r3, [r2, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2201      	movs	r2, #1
 8003382:	4013      	ands	r3, r2
 8003384:	d100      	bne.n	8003388 <HAL_RCC_ClockConfig+0x70>
 8003386:	e089      	b.n	800349c <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	2b02      	cmp	r3, #2
 800338e:	d107      	bne.n	80033a0 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003390:	4b70      	ldr	r3, [pc, #448]	; (8003554 <HAL_RCC_ClockConfig+0x23c>)
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	2380      	movs	r3, #128	; 0x80
 8003396:	029b      	lsls	r3, r3, #10
 8003398:	4013      	ands	r3, r2
 800339a:	d120      	bne.n	80033de <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e0d2      	b.n	8003546 <HAL_RCC_ClockConfig+0x22e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	2b03      	cmp	r3, #3
 80033a6:	d107      	bne.n	80033b8 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033a8:	4b6a      	ldr	r3, [pc, #424]	; (8003554 <HAL_RCC_ClockConfig+0x23c>)
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	2380      	movs	r3, #128	; 0x80
 80033ae:	049b      	lsls	r3, r3, #18
 80033b0:	4013      	ands	r3, r2
 80033b2:	d114      	bne.n	80033de <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e0c6      	b.n	8003546 <HAL_RCC_ClockConfig+0x22e>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d106      	bne.n	80033ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033c0:	4b64      	ldr	r3, [pc, #400]	; (8003554 <HAL_RCC_ClockConfig+0x23c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2204      	movs	r2, #4
 80033c6:	4013      	ands	r3, r2
 80033c8:	d109      	bne.n	80033de <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e0bb      	b.n	8003546 <HAL_RCC_ClockConfig+0x22e>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80033ce:	4b61      	ldr	r3, [pc, #388]	; (8003554 <HAL_RCC_ClockConfig+0x23c>)
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	2380      	movs	r3, #128	; 0x80
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	4013      	ands	r3, r2
 80033d8:	d101      	bne.n	80033de <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e0b3      	b.n	8003546 <HAL_RCC_ClockConfig+0x22e>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033de:	4a5d      	ldr	r2, [pc, #372]	; (8003554 <HAL_RCC_ClockConfig+0x23c>)
 80033e0:	4b5c      	ldr	r3, [pc, #368]	; (8003554 <HAL_RCC_ClockConfig+0x23c>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	2103      	movs	r1, #3
 80033e6:	438b      	bics	r3, r1
 80033e8:	0019      	movs	r1, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	430b      	orrs	r3, r1
 80033f0:	60d3      	str	r3, [r2, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033f2:	f7fe ff7f 	bl	80022f4 <HAL_GetTick>
 80033f6:	0003      	movs	r3, r0
 80033f8:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d111      	bne.n	8003426 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003402:	e009      	b.n	8003418 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003404:	f7fe ff76 	bl	80022f4 <HAL_GetTick>
 8003408:	0002      	movs	r2, r0
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	4a52      	ldr	r2, [pc, #328]	; (8003558 <HAL_RCC_ClockConfig+0x240>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e096      	b.n	8003546 <HAL_RCC_ClockConfig+0x22e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003418:	4b4e      	ldr	r3, [pc, #312]	; (8003554 <HAL_RCC_ClockConfig+0x23c>)
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	220c      	movs	r2, #12
 800341e:	4013      	ands	r3, r2
 8003420:	2b08      	cmp	r3, #8
 8003422:	d1ef      	bne.n	8003404 <HAL_RCC_ClockConfig+0xec>
 8003424:	e03a      	b.n	800349c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2b03      	cmp	r3, #3
 800342c:	d111      	bne.n	8003452 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800342e:	e009      	b.n	8003444 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003430:	f7fe ff60 	bl	80022f4 <HAL_GetTick>
 8003434:	0002      	movs	r2, r0
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	4a47      	ldr	r2, [pc, #284]	; (8003558 <HAL_RCC_ClockConfig+0x240>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d901      	bls.n	8003444 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e080      	b.n	8003546 <HAL_RCC_ClockConfig+0x22e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003444:	4b43      	ldr	r3, [pc, #268]	; (8003554 <HAL_RCC_ClockConfig+0x23c>)
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	220c      	movs	r2, #12
 800344a:	4013      	ands	r3, r2
 800344c:	2b0c      	cmp	r3, #12
 800344e:	d1ef      	bne.n	8003430 <HAL_RCC_ClockConfig+0x118>
 8003450:	e024      	b.n	800349c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d11b      	bne.n	8003492 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800345a:	e009      	b.n	8003470 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800345c:	f7fe ff4a 	bl	80022f4 <HAL_GetTick>
 8003460:	0002      	movs	r2, r0
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	4a3c      	ldr	r2, [pc, #240]	; (8003558 <HAL_RCC_ClockConfig+0x240>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d901      	bls.n	8003470 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e06a      	b.n	8003546 <HAL_RCC_ClockConfig+0x22e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003470:	4b38      	ldr	r3, [pc, #224]	; (8003554 <HAL_RCC_ClockConfig+0x23c>)
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	220c      	movs	r2, #12
 8003476:	4013      	ands	r3, r2
 8003478:	2b04      	cmp	r3, #4
 800347a:	d1ef      	bne.n	800345c <HAL_RCC_ClockConfig+0x144>
 800347c:	e00e      	b.n	800349c <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800347e:	f7fe ff39 	bl	80022f4 <HAL_GetTick>
 8003482:	0002      	movs	r2, r0
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	4a33      	ldr	r2, [pc, #204]	; (8003558 <HAL_RCC_ClockConfig+0x240>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e059      	b.n	8003546 <HAL_RCC_ClockConfig+0x22e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003492:	4b30      	ldr	r3, [pc, #192]	; (8003554 <HAL_RCC_ClockConfig+0x23c>)
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	220c      	movs	r2, #12
 8003498:	4013      	ands	r3, r2
 800349a:	d1f0      	bne.n	800347e <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800349c:	4b2c      	ldr	r3, [pc, #176]	; (8003550 <HAL_RCC_ClockConfig+0x238>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2201      	movs	r2, #1
 80034a2:	401a      	ands	r2, r3
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d911      	bls.n	80034ce <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034aa:	4b29      	ldr	r3, [pc, #164]	; (8003550 <HAL_RCC_ClockConfig+0x238>)
 80034ac:	4a28      	ldr	r2, [pc, #160]	; (8003550 <HAL_RCC_ClockConfig+0x238>)
 80034ae:	6812      	ldr	r2, [r2, #0]
 80034b0:	2101      	movs	r1, #1
 80034b2:	438a      	bics	r2, r1
 80034b4:	0011      	movs	r1, r2
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	430a      	orrs	r2, r1
 80034ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034bc:	4b24      	ldr	r3, [pc, #144]	; (8003550 <HAL_RCC_ClockConfig+0x238>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2201      	movs	r2, #1
 80034c2:	401a      	ands	r2, r3
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d001      	beq.n	80034ce <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e03b      	b.n	8003546 <HAL_RCC_ClockConfig+0x22e>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2204      	movs	r2, #4
 80034d4:	4013      	ands	r3, r2
 80034d6:	d008      	beq.n	80034ea <HAL_RCC_ClockConfig+0x1d2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034d8:	4a1e      	ldr	r2, [pc, #120]	; (8003554 <HAL_RCC_ClockConfig+0x23c>)
 80034da:	4b1e      	ldr	r3, [pc, #120]	; (8003554 <HAL_RCC_ClockConfig+0x23c>)
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	491f      	ldr	r1, [pc, #124]	; (800355c <HAL_RCC_ClockConfig+0x244>)
 80034e0:	4019      	ands	r1, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	430b      	orrs	r3, r1
 80034e8:	60d3      	str	r3, [r2, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2208      	movs	r2, #8
 80034f0:	4013      	ands	r3, r2
 80034f2:	d009      	beq.n	8003508 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034f4:	4a17      	ldr	r2, [pc, #92]	; (8003554 <HAL_RCC_ClockConfig+0x23c>)
 80034f6:	4b17      	ldr	r3, [pc, #92]	; (8003554 <HAL_RCC_ClockConfig+0x23c>)
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	4919      	ldr	r1, [pc, #100]	; (8003560 <HAL_RCC_ClockConfig+0x248>)
 80034fc:	4019      	ands	r1, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	430b      	orrs	r3, r1
 8003506:	60d3      	str	r3, [r2, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003508:	f000 f830 	bl	800356c <HAL_RCC_GetSysClockFreq>
 800350c:	0001      	movs	r1, r0
 800350e:	4b11      	ldr	r3, [pc, #68]	; (8003554 <HAL_RCC_ClockConfig+0x23c>)
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	091b      	lsrs	r3, r3, #4
 8003514:	220f      	movs	r2, #15
 8003516:	4013      	ands	r3, r2
 8003518:	4a12      	ldr	r2, [pc, #72]	; (8003564 <HAL_RCC_ClockConfig+0x24c>)
 800351a:	5cd3      	ldrb	r3, [r2, r3]
 800351c:	000a      	movs	r2, r1
 800351e:	40da      	lsrs	r2, r3
 8003520:	4b11      	ldr	r3, [pc, #68]	; (8003568 <HAL_RCC_ClockConfig+0x250>)
 8003522:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8003524:	230b      	movs	r3, #11
 8003526:	18fc      	adds	r4, r7, r3
 8003528:	2000      	movs	r0, #0
 800352a:	f7fe fead 	bl	8002288 <HAL_InitTick>
 800352e:	0003      	movs	r3, r0
 8003530:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003532:	230b      	movs	r3, #11
 8003534:	18fb      	adds	r3, r7, r3
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d003      	beq.n	8003544 <HAL_RCC_ClockConfig+0x22c>
  {
    return status;
 800353c:	230b      	movs	r3, #11
 800353e:	18fb      	adds	r3, r7, r3
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	e000      	b.n	8003546 <HAL_RCC_ClockConfig+0x22e>
  }

  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	0018      	movs	r0, r3
 8003548:	46bd      	mov	sp, r7
 800354a:	b005      	add	sp, #20
 800354c:	bd90      	pop	{r4, r7, pc}
 800354e:	46c0      	nop			; (mov r8, r8)
 8003550:	40022000 	.word	0x40022000
 8003554:	40021000 	.word	0x40021000
 8003558:	00001388 	.word	0x00001388
 800355c:	fffff8ff 	.word	0xfffff8ff
 8003560:	ffffc7ff 	.word	0xffffc7ff
 8003564:	0800d8b8 	.word	0x0800d8b8
 8003568:	2000003c 	.word	0x2000003c

0800356c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003572:	4b32      	ldr	r3, [pc, #200]	; (800363c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	220c      	movs	r2, #12
 800357c:	4013      	ands	r3, r2
 800357e:	2b08      	cmp	r3, #8
 8003580:	d00e      	beq.n	80035a0 <HAL_RCC_GetSysClockFreq+0x34>
 8003582:	2b0c      	cmp	r3, #12
 8003584:	d00f      	beq.n	80035a6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003586:	2b04      	cmp	r3, #4
 8003588:	d145      	bne.n	8003616 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800358a:	4b2c      	ldr	r3, [pc, #176]	; (800363c <HAL_RCC_GetSysClockFreq+0xd0>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2210      	movs	r2, #16
 8003590:	4013      	ands	r3, r2
 8003592:	d002      	beq.n	800359a <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003594:	4b2a      	ldr	r3, [pc, #168]	; (8003640 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003596:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003598:	e04b      	b.n	8003632 <HAL_RCC_GetSysClockFreq+0xc6>
        sysclockfreq =  HSI_VALUE;
 800359a:	4b2a      	ldr	r3, [pc, #168]	; (8003644 <HAL_RCC_GetSysClockFreq+0xd8>)
 800359c:	613b      	str	r3, [r7, #16]
      break;
 800359e:	e048      	b.n	8003632 <HAL_RCC_GetSysClockFreq+0xc6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035a0:	4b29      	ldr	r3, [pc, #164]	; (8003648 <HAL_RCC_GetSysClockFreq+0xdc>)
 80035a2:	613b      	str	r3, [r7, #16]
      break;
 80035a4:	e045      	b.n	8003632 <HAL_RCC_GetSysClockFreq+0xc6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	0c9b      	lsrs	r3, r3, #18
 80035aa:	220f      	movs	r2, #15
 80035ac:	4013      	ands	r3, r2
 80035ae:	4a27      	ldr	r2, [pc, #156]	; (800364c <HAL_RCC_GetSysClockFreq+0xe0>)
 80035b0:	5cd3      	ldrb	r3, [r2, r3]
 80035b2:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	0d9b      	lsrs	r3, r3, #22
 80035b8:	2203      	movs	r2, #3
 80035ba:	4013      	ands	r3, r2
 80035bc:	3301      	adds	r3, #1
 80035be:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035c0:	4b1e      	ldr	r3, [pc, #120]	; (800363c <HAL_RCC_GetSysClockFreq+0xd0>)
 80035c2:	68da      	ldr	r2, [r3, #12]
 80035c4:	2380      	movs	r3, #128	; 0x80
 80035c6:	025b      	lsls	r3, r3, #9
 80035c8:	4013      	ands	r3, r2
 80035ca:	d009      	beq.n	80035e0 <HAL_RCC_GetSysClockFreq+0x74>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	4a1e      	ldr	r2, [pc, #120]	; (8003648 <HAL_RCC_GetSysClockFreq+0xdc>)
 80035d0:	4353      	muls	r3, r2
 80035d2:	6879      	ldr	r1, [r7, #4]
 80035d4:	0018      	movs	r0, r3
 80035d6:	f7fc fdb3 	bl	8000140 <__udivsi3>
 80035da:	0003      	movs	r3, r0
 80035dc:	617b      	str	r3, [r7, #20]
 80035de:	e017      	b.n	8003610 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80035e0:	4b16      	ldr	r3, [pc, #88]	; (800363c <HAL_RCC_GetSysClockFreq+0xd0>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2210      	movs	r2, #16
 80035e6:	4013      	ands	r3, r2
 80035e8:	d009      	beq.n	80035fe <HAL_RCC_GetSysClockFreq+0x92>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	4a14      	ldr	r2, [pc, #80]	; (8003640 <HAL_RCC_GetSysClockFreq+0xd4>)
 80035ee:	4353      	muls	r3, r2
 80035f0:	6879      	ldr	r1, [r7, #4]
 80035f2:	0018      	movs	r0, r3
 80035f4:	f7fc fda4 	bl	8000140 <__udivsi3>
 80035f8:	0003      	movs	r3, r0
 80035fa:	617b      	str	r3, [r7, #20]
 80035fc:	e008      	b.n	8003610 <HAL_RCC_GetSysClockFreq+0xa4>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	4a10      	ldr	r2, [pc, #64]	; (8003644 <HAL_RCC_GetSysClockFreq+0xd8>)
 8003602:	4353      	muls	r3, r2
 8003604:	6879      	ldr	r1, [r7, #4]
 8003606:	0018      	movs	r0, r3
 8003608:	f7fc fd9a 	bl	8000140 <__udivsi3>
 800360c:	0003      	movs	r3, r0
 800360e:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	613b      	str	r3, [r7, #16]
      break;
 8003614:	e00d      	b.n	8003632 <HAL_RCC_GetSysClockFreq+0xc6>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003616:	4b09      	ldr	r3, [pc, #36]	; (800363c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	0b5b      	lsrs	r3, r3, #13
 800361c:	2207      	movs	r2, #7
 800361e:	4013      	ands	r3, r2
 8003620:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	3301      	adds	r3, #1
 8003626:	2280      	movs	r2, #128	; 0x80
 8003628:	0212      	lsls	r2, r2, #8
 800362a:	409a      	lsls	r2, r3
 800362c:	0013      	movs	r3, r2
 800362e:	613b      	str	r3, [r7, #16]
      break;
 8003630:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003632:	693b      	ldr	r3, [r7, #16]
}
 8003634:	0018      	movs	r0, r3
 8003636:	46bd      	mov	sp, r7
 8003638:	b006      	add	sp, #24
 800363a:	bd80      	pop	{r7, pc}
 800363c:	40021000 	.word	0x40021000
 8003640:	003d0900 	.word	0x003d0900
 8003644:	00f42400 	.word	0x00f42400
 8003648:	007a1200 	.word	0x007a1200
 800364c:	0800d8d0 	.word	0x0800d8d0

08003650 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003654:	4b02      	ldr	r3, [pc, #8]	; (8003660 <HAL_RCC_GetHCLKFreq+0x10>)
 8003656:	681b      	ldr	r3, [r3, #0]
}
 8003658:	0018      	movs	r0, r3
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	46c0      	nop			; (mov r8, r8)
 8003660:	2000003c 	.word	0x2000003c

08003664 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003668:	f7ff fff2 	bl	8003650 <HAL_RCC_GetHCLKFreq>
 800366c:	0001      	movs	r1, r0
 800366e:	4b06      	ldr	r3, [pc, #24]	; (8003688 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	0a1b      	lsrs	r3, r3, #8
 8003674:	2207      	movs	r2, #7
 8003676:	4013      	ands	r3, r2
 8003678:	4a04      	ldr	r2, [pc, #16]	; (800368c <HAL_RCC_GetPCLK1Freq+0x28>)
 800367a:	5cd3      	ldrb	r3, [r2, r3]
 800367c:	40d9      	lsrs	r1, r3
 800367e:	000b      	movs	r3, r1
}
 8003680:	0018      	movs	r0, r3
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	46c0      	nop			; (mov r8, r8)
 8003688:	40021000 	.word	0x40021000
 800368c:	0800d8c8 	.word	0x0800d8c8

08003690 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003694:	f7ff ffdc 	bl	8003650 <HAL_RCC_GetHCLKFreq>
 8003698:	0001      	movs	r1, r0
 800369a:	4b06      	ldr	r3, [pc, #24]	; (80036b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	0adb      	lsrs	r3, r3, #11
 80036a0:	2207      	movs	r2, #7
 80036a2:	4013      	ands	r3, r2
 80036a4:	4a04      	ldr	r2, [pc, #16]	; (80036b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80036a6:	5cd3      	ldrb	r3, [r2, r3]
 80036a8:	40d9      	lsrs	r1, r3
 80036aa:	000b      	movs	r3, r1
}
 80036ac:	0018      	movs	r0, r3
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	46c0      	nop			; (mov r8, r8)
 80036b4:	40021000 	.word	0x40021000
 80036b8:	0800d8c8 	.word	0x0800d8c8

080036bc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2220      	movs	r2, #32
 80036ca:	4013      	ands	r3, r2
 80036cc:	d100      	bne.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x14>
 80036ce:	e0c6      	b.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 80036d0:	2317      	movs	r3, #23
 80036d2:	18fb      	adds	r3, r7, r3
 80036d4:	2200      	movs	r2, #0
 80036d6:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036d8:	4b96      	ldr	r3, [pc, #600]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80036da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036dc:	2380      	movs	r3, #128	; 0x80
 80036de:	055b      	lsls	r3, r3, #21
 80036e0:	4013      	ands	r3, r2
 80036e2:	d10a      	bne.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036e4:	4b93      	ldr	r3, [pc, #588]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80036e6:	4a93      	ldr	r2, [pc, #588]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80036e8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036ea:	2180      	movs	r1, #128	; 0x80
 80036ec:	0549      	lsls	r1, r1, #21
 80036ee:	430a      	orrs	r2, r1
 80036f0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80036f2:	2317      	movs	r3, #23
 80036f4:	18fb      	adds	r3, r7, r3
 80036f6:	2201      	movs	r2, #1
 80036f8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036fa:	4b8f      	ldr	r3, [pc, #572]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	2380      	movs	r3, #128	; 0x80
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	4013      	ands	r3, r2
 8003704:	d11a      	bne.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003706:	4b8c      	ldr	r3, [pc, #560]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003708:	4a8b      	ldr	r2, [pc, #556]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800370a:	6812      	ldr	r2, [r2, #0]
 800370c:	2180      	movs	r1, #128	; 0x80
 800370e:	0049      	lsls	r1, r1, #1
 8003710:	430a      	orrs	r2, r1
 8003712:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003714:	f7fe fdee 	bl	80022f4 <HAL_GetTick>
 8003718:	0003      	movs	r3, r0
 800371a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800371c:	e008      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800371e:	f7fe fde9 	bl	80022f4 <HAL_GetTick>
 8003722:	0002      	movs	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b64      	cmp	r3, #100	; 0x64
 800372a:	d901      	bls.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e0fc      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x26e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003730:	4b81      	ldr	r3, [pc, #516]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	2380      	movs	r3, #128	; 0x80
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	4013      	ands	r3, r2
 800373a:	d0f0      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800373c:	4b7d      	ldr	r3, [pc, #500]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	23c0      	movs	r3, #192	; 0xc0
 8003742:	039b      	lsls	r3, r3, #14
 8003744:	4013      	ands	r3, r2
 8003746:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	23c0      	movs	r3, #192	; 0xc0
 800374e:	039b      	lsls	r3, r3, #14
 8003750:	401a      	ands	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	429a      	cmp	r2, r3
 8003756:	d013      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	23c0      	movs	r3, #192	; 0xc0
 800375e:	029b      	lsls	r3, r3, #10
 8003760:	401a      	ands	r2, r3
 8003762:	23c0      	movs	r3, #192	; 0xc0
 8003764:	029b      	lsls	r3, r3, #10
 8003766:	429a      	cmp	r2, r3
 8003768:	d10a      	bne.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800376a:	4b72      	ldr	r3, [pc, #456]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	2380      	movs	r3, #128	; 0x80
 8003770:	029b      	lsls	r3, r3, #10
 8003772:	401a      	ands	r2, r3
 8003774:	2380      	movs	r3, #128	; 0x80
 8003776:	029b      	lsls	r3, r3, #10
 8003778:	429a      	cmp	r2, r3
 800377a:	d101      	bne.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e0d4      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x26e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003780:	4b6c      	ldr	r3, [pc, #432]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003782:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003784:	23c0      	movs	r3, #192	; 0xc0
 8003786:	029b      	lsls	r3, r3, #10
 8003788:	4013      	ands	r3, r2
 800378a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d03b      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	23c0      	movs	r3, #192	; 0xc0
 8003798:	029b      	lsls	r3, r3, #10
 800379a:	401a      	ands	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d033      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2220      	movs	r2, #32
 80037a8:	4013      	ands	r3, r2
 80037aa:	d02e      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80037ac:	4b61      	ldr	r3, [pc, #388]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80037ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037b0:	4a62      	ldr	r2, [pc, #392]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80037b2:	4013      	ands	r3, r2
 80037b4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037b6:	4b5f      	ldr	r3, [pc, #380]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80037b8:	4a5e      	ldr	r2, [pc, #376]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80037ba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80037bc:	2180      	movs	r1, #128	; 0x80
 80037be:	0309      	lsls	r1, r1, #12
 80037c0:	430a      	orrs	r2, r1
 80037c2:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037c4:	4b5b      	ldr	r3, [pc, #364]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80037c6:	4a5b      	ldr	r2, [pc, #364]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80037c8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80037ca:	495d      	ldr	r1, [pc, #372]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80037cc:	400a      	ands	r2, r1
 80037ce:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80037d0:	4b58      	ldr	r3, [pc, #352]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	2380      	movs	r3, #128	; 0x80
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	4013      	ands	r3, r2
 80037de:	d014      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e0:	f7fe fd88 	bl	80022f4 <HAL_GetTick>
 80037e4:	0003      	movs	r3, r0
 80037e6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037e8:	e009      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037ea:	f7fe fd83 	bl	80022f4 <HAL_GetTick>
 80037ee:	0002      	movs	r2, r0
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	4a53      	ldr	r2, [pc, #332]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d901      	bls.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e095      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037fe:	4b4d      	ldr	r3, [pc, #308]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003800:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003802:	2380      	movs	r3, #128	; 0x80
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	4013      	ands	r3, r2
 8003808:	d0ef      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685a      	ldr	r2, [r3, #4]
 800380e:	23c0      	movs	r3, #192	; 0xc0
 8003810:	029b      	lsls	r3, r3, #10
 8003812:	401a      	ands	r2, r3
 8003814:	23c0      	movs	r3, #192	; 0xc0
 8003816:	029b      	lsls	r3, r3, #10
 8003818:	429a      	cmp	r2, r3
 800381a:	d10b      	bne.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x178>
 800381c:	4a45      	ldr	r2, [pc, #276]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800381e:	4b45      	ldr	r3, [pc, #276]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4949      	ldr	r1, [pc, #292]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003824:	4019      	ands	r1, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6858      	ldr	r0, [r3, #4]
 800382a:	23c0      	movs	r3, #192	; 0xc0
 800382c:	039b      	lsls	r3, r3, #14
 800382e:	4003      	ands	r3, r0
 8003830:	430b      	orrs	r3, r1
 8003832:	6013      	str	r3, [r2, #0]
 8003834:	4a3f      	ldr	r2, [pc, #252]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003836:	4b3f      	ldr	r3, [pc, #252]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003838:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6858      	ldr	r0, [r3, #4]
 800383e:	23c0      	movs	r3, #192	; 0xc0
 8003840:	029b      	lsls	r3, r3, #10
 8003842:	4003      	ands	r3, r0
 8003844:	430b      	orrs	r3, r1
 8003846:	6513      	str	r3, [r2, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003848:	2317      	movs	r3, #23
 800384a:	18fb      	adds	r3, r7, r3
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d105      	bne.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003852:	4b38      	ldr	r3, [pc, #224]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003854:	4a37      	ldr	r2, [pc, #220]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003856:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003858:	493c      	ldr	r1, [pc, #240]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800385a:	400a      	ands	r2, r1
 800385c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2201      	movs	r2, #1
 8003864:	4013      	ands	r3, r2
 8003866:	d009      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003868:	4a32      	ldr	r2, [pc, #200]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800386a:	4b32      	ldr	r3, [pc, #200]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800386c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800386e:	2103      	movs	r1, #3
 8003870:	438b      	bics	r3, r1
 8003872:	0019      	movs	r1, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	430b      	orrs	r3, r1
 800387a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2202      	movs	r2, #2
 8003882:	4013      	ands	r3, r2
 8003884:	d009      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003886:	4a2b      	ldr	r2, [pc, #172]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003888:	4b2a      	ldr	r3, [pc, #168]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800388a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800388c:	210c      	movs	r1, #12
 800388e:	438b      	bics	r3, r1
 8003890:	0019      	movs	r1, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	430b      	orrs	r3, r1
 8003898:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2204      	movs	r2, #4
 80038a0:	4013      	ands	r3, r2
 80038a2:	d008      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038a4:	4a23      	ldr	r2, [pc, #140]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80038a6:	4b23      	ldr	r3, [pc, #140]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80038a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038aa:	4929      	ldr	r1, [pc, #164]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80038ac:	4019      	ands	r1, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	430b      	orrs	r3, r1
 80038b4:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2208      	movs	r2, #8
 80038bc:	4013      	ands	r3, r2
 80038be:	d008      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038c0:	4a1c      	ldr	r2, [pc, #112]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80038c2:	4b1c      	ldr	r3, [pc, #112]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80038c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c6:	4923      	ldr	r1, [pc, #140]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80038c8:	4019      	ands	r1, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	430b      	orrs	r3, r1
 80038d0:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	2380      	movs	r3, #128	; 0x80
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	4013      	ands	r3, r2
 80038dc:	d008      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038de:	4a15      	ldr	r2, [pc, #84]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80038e0:	4b14      	ldr	r3, [pc, #80]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80038e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038e4:	4915      	ldr	r1, [pc, #84]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80038e6:	4019      	ands	r1, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	430b      	orrs	r3, r1
 80038ee:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2240      	movs	r2, #64	; 0x40
 80038f6:	4013      	ands	r3, r2
 80038f8:	d008      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038fa:	4a0e      	ldr	r2, [pc, #56]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80038fc:	4b0d      	ldr	r3, [pc, #52]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80038fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003900:	4915      	ldr	r1, [pc, #84]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003902:	4019      	ands	r1, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	430b      	orrs	r3, r1
 800390a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2280      	movs	r2, #128	; 0x80
 8003912:	4013      	ands	r3, r2
 8003914:	d008      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003916:	4a07      	ldr	r2, [pc, #28]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003918:	4b06      	ldr	r3, [pc, #24]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800391a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800391c:	490f      	ldr	r1, [pc, #60]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800391e:	4019      	ands	r1, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	69db      	ldr	r3, [r3, #28]
 8003924:	430b      	orrs	r3, r1
 8003926:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	0018      	movs	r0, r3
 800392c:	46bd      	mov	sp, r7
 800392e:	b006      	add	sp, #24
 8003930:	bd80      	pop	{r7, pc}
 8003932:	46c0      	nop			; (mov r8, r8)
 8003934:	40021000 	.word	0x40021000
 8003938:	40007000 	.word	0x40007000
 800393c:	fffcffff 	.word	0xfffcffff
 8003940:	fff7ffff 	.word	0xfff7ffff
 8003944:	00001388 	.word	0x00001388
 8003948:	ffcfffff 	.word	0xffcfffff
 800394c:	efffffff 	.word	0xefffffff
 8003950:	fffff3ff 	.word	0xfffff3ff
 8003954:	ffffcfff 	.word	0xffffcfff
 8003958:	fbffffff 	.word	0xfbffffff
 800395c:	fff3ffff 	.word	0xfff3ffff

08003960 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e08e      	b.n	8003a90 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2221      	movs	r2, #33	; 0x21
 8003976:	5c9b      	ldrb	r3, [r3, r2]
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d107      	bne.n	800398e <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2220      	movs	r2, #32
 8003982:	2100      	movs	r1, #0
 8003984:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	0018      	movs	r0, r3
 800398a:	f006 f97d 	bl	8009c88 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2221      	movs	r2, #33	; 0x21
 8003992:	2102      	movs	r1, #2
 8003994:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	22ca      	movs	r2, #202	; 0xca
 800399c:	625a      	str	r2, [r3, #36]	; 0x24
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2253      	movs	r2, #83	; 0x53
 80039a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	0018      	movs	r0, r3
 80039aa:	f000 fcfc 	bl	80043a6 <RTC_EnterInitMode>
 80039ae:	1e03      	subs	r3, r0, #0
 80039b0:	d009      	beq.n	80039c6 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	22ff      	movs	r2, #255	; 0xff
 80039b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2221      	movs	r2, #33	; 0x21
 80039be:	2104      	movs	r1, #4
 80039c0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e064      	b.n	8003a90 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	6812      	ldr	r2, [r2, #0]
 80039ce:	6892      	ldr	r2, [r2, #8]
 80039d0:	4931      	ldr	r1, [pc, #196]	; (8003a98 <HAL_RTC_Init+0x138>)
 80039d2:	400a      	ands	r2, r1
 80039d4:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	6812      	ldr	r2, [r2, #0]
 80039de:	6891      	ldr	r1, [r2, #8]
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	6850      	ldr	r0, [r2, #4]
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	6912      	ldr	r2, [r2, #16]
 80039e8:	4310      	orrs	r0, r2
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	6992      	ldr	r2, [r2, #24]
 80039ee:	4302      	orrs	r2, r0
 80039f0:	430a      	orrs	r2, r1
 80039f2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	68d2      	ldr	r2, [r2, #12]
 80039fc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	6812      	ldr	r2, [r2, #0]
 8003a06:	6911      	ldr	r1, [r2, #16]
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	6892      	ldr	r2, [r2, #8]
 8003a0c:	0412      	lsls	r2, r2, #16
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	6812      	ldr	r2, [r2, #0]
 8003a1a:	68d2      	ldr	r2, [r2, #12]
 8003a1c:	2180      	movs	r1, #128	; 0x80
 8003a1e:	438a      	bics	r2, r1
 8003a20:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	6812      	ldr	r2, [r2, #0]
 8003a2a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003a2c:	2103      	movs	r1, #3
 8003a2e:	438a      	bics	r2, r1
 8003a30:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	6812      	ldr	r2, [r2, #0]
 8003a3a:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	69d0      	ldr	r0, [r2, #28]
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	6952      	ldr	r2, [r2, #20]
 8003a44:	4302      	orrs	r2, r0
 8003a46:	430a      	orrs	r2, r1
 8003a48:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	2220      	movs	r2, #32
 8003a52:	4013      	ands	r3, r2
 8003a54:	d113      	bne.n	8003a7e <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	0018      	movs	r0, r3
 8003a5a:	f000 fc7d 	bl	8004358 <HAL_RTC_WaitForSynchro>
 8003a5e:	1e03      	subs	r3, r0, #0
 8003a60:	d00d      	beq.n	8003a7e <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	22ff      	movs	r2, #255	; 0xff
 8003a68:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2221      	movs	r2, #33	; 0x21
 8003a6e:	2104      	movs	r1, #4
 8003a70:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2220      	movs	r2, #32
 8003a76:	2100      	movs	r1, #0
 8003a78:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e008      	b.n	8003a90 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	22ff      	movs	r2, #255	; 0xff
 8003a84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2221      	movs	r2, #33	; 0x21
 8003a8a:	2101      	movs	r1, #1
 8003a8c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
  }
}
 8003a90:	0018      	movs	r0, r3
 8003a92:	46bd      	mov	sp, r7
 8003a94:	b002      	add	sp, #8
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	ff8fffbf 	.word	0xff8fffbf

08003a9c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003a9c:	b590      	push	{r4, r7, lr}
 8003a9e:	b087      	sub	sp, #28
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2220      	movs	r2, #32
 8003aac:	5c9b      	ldrb	r3, [r3, r2]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d101      	bne.n	8003ab6 <HAL_RTC_SetTime+0x1a>
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	e0ad      	b.n	8003c12 <HAL_RTC_SetTime+0x176>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2220      	movs	r2, #32
 8003aba:	2101      	movs	r1, #1
 8003abc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2221      	movs	r2, #33	; 0x21
 8003ac2:	2102      	movs	r1, #2
 8003ac4:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d125      	bne.n	8003b18 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	2240      	movs	r2, #64	; 0x40
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	d102      	bne.n	8003ade <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	2200      	movs	r2, #0
 8003adc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	0018      	movs	r0, r3
 8003ae4:	f000 fc89 	bl	80043fa <RTC_ByteToBcd2>
 8003ae8:	0003      	movs	r3, r0
 8003aea:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	785b      	ldrb	r3, [r3, #1]
 8003af0:	0018      	movs	r0, r3
 8003af2:	f000 fc82 	bl	80043fa <RTC_ByteToBcd2>
 8003af6:	0003      	movs	r3, r0
 8003af8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003afa:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	789b      	ldrb	r3, [r3, #2]
 8003b00:	0018      	movs	r0, r3
 8003b02:	f000 fc7a 	bl	80043fa <RTC_ByteToBcd2>
 8003b06:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003b08:	0022      	movs	r2, r4
 8003b0a:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	78db      	ldrb	r3, [r3, #3]
 8003b10:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003b12:	4313      	orrs	r3, r2
 8003b14:	617b      	str	r3, [r7, #20]
 8003b16:	e017      	b.n	8003b48 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	2240      	movs	r2, #64	; 0x40
 8003b20:	4013      	ands	r3, r2
 8003b22:	d102      	bne.n	8003b2a <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	2200      	movs	r2, #0
 8003b28:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	785b      	ldrb	r3, [r3, #1]
 8003b34:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003b36:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8003b38:	68ba      	ldr	r2, [r7, #8]
 8003b3a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003b3c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	78db      	ldrb	r3, [r3, #3]
 8003b42:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003b44:	4313      	orrs	r3, r2
 8003b46:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	22ca      	movs	r2, #202	; 0xca
 8003b4e:	625a      	str	r2, [r3, #36]	; 0x24
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2253      	movs	r2, #83	; 0x53
 8003b56:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	0018      	movs	r0, r3
 8003b5c:	f000 fc23 	bl	80043a6 <RTC_EnterInitMode>
 8003b60:	1e03      	subs	r3, r0, #0
 8003b62:	d00d      	beq.n	8003b80 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	22ff      	movs	r2, #255	; 0xff
 8003b6a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2221      	movs	r2, #33	; 0x21
 8003b70:	2104      	movs	r1, #4
 8003b72:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2220      	movs	r2, #32
 8003b78:	2100      	movs	r1, #0
 8003b7a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e048      	b.n	8003c12 <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	4925      	ldr	r1, [pc, #148]	; (8003c1c <HAL_RTC_SetTime+0x180>)
 8003b88:	400a      	ands	r2, r1
 8003b8a:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	6812      	ldr	r2, [r2, #0]
 8003b94:	6892      	ldr	r2, [r2, #8]
 8003b96:	4922      	ldr	r1, [pc, #136]	; (8003c20 <HAL_RTC_SetTime+0x184>)
 8003b98:	400a      	ands	r2, r1
 8003b9a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	6812      	ldr	r2, [r2, #0]
 8003ba4:	6891      	ldr	r1, [r2, #8]
 8003ba6:	68ba      	ldr	r2, [r7, #8]
 8003ba8:	68d0      	ldr	r0, [r2, #12]
 8003baa:	68ba      	ldr	r2, [r7, #8]
 8003bac:	6912      	ldr	r2, [r2, #16]
 8003bae:	4302      	orrs	r2, r0
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	6812      	ldr	r2, [r2, #0]
 8003bbc:	68d2      	ldr	r2, [r2, #12]
 8003bbe:	2180      	movs	r1, #128	; 0x80
 8003bc0:	438a      	bics	r2, r1
 8003bc2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	2220      	movs	r2, #32
 8003bcc:	4013      	ands	r3, r2
 8003bce:	d113      	bne.n	8003bf8 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	f000 fbc0 	bl	8004358 <HAL_RTC_WaitForSynchro>
 8003bd8:	1e03      	subs	r3, r0, #0
 8003bda:	d00d      	beq.n	8003bf8 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	22ff      	movs	r2, #255	; 0xff
 8003be2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2221      	movs	r2, #33	; 0x21
 8003be8:	2104      	movs	r1, #4
 8003bea:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e00c      	b.n	8003c12 <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	22ff      	movs	r2, #255	; 0xff
 8003bfe:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2221      	movs	r2, #33	; 0x21
 8003c04:	2101      	movs	r1, #1
 8003c06:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003c10:	2300      	movs	r3, #0
  }
}
 8003c12:	0018      	movs	r0, r3
 8003c14:	46bd      	mov	sp, r7
 8003c16:	b007      	add	sp, #28
 8003c18:	bd90      	pop	{r4, r7, pc}
 8003c1a:	46c0      	nop			; (mov r8, r8)
 8003c1c:	007f7f7f 	.word	0x007f7f7f
 8003c20:	fffbffff 	.word	0xfffbffff

08003c24 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b086      	sub	sp, #24
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	045b      	lsls	r3, r3, #17
 8003c42:	0c5a      	lsrs	r2, r3, #17
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a22      	ldr	r2, [pc, #136]	; (8003cd8 <HAL_RTC_GetTime+0xb4>)
 8003c50:	4013      	ands	r3, r2
 8003c52:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	0c1b      	lsrs	r3, r3, #16
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	223f      	movs	r2, #63	; 0x3f
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	b2da      	uxtb	r2, r3
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	0a1b      	lsrs	r3, r3, #8
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	227f      	movs	r2, #127	; 0x7f
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	b2da      	uxtb	r2, r3
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	227f      	movs	r2, #127	; 0x7f
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	b2da      	uxtb	r2, r3
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	0c1b      	lsrs	r3, r3, #16
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2240      	movs	r2, #64	; 0x40
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	b2da      	uxtb	r2, r3
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d11a      	bne.n	8003cce <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	0018      	movs	r0, r3
 8003c9e:	f000 fbd6 	bl	800444e <RTC_Bcd2ToByte>
 8003ca2:	0003      	movs	r3, r0
 8003ca4:	001a      	movs	r2, r3
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	785b      	ldrb	r3, [r3, #1]
 8003cae:	0018      	movs	r0, r3
 8003cb0:	f000 fbcd 	bl	800444e <RTC_Bcd2ToByte>
 8003cb4:	0003      	movs	r3, r0
 8003cb6:	001a      	movs	r2, r3
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	789b      	ldrb	r3, [r3, #2]
 8003cc0:	0018      	movs	r0, r3
 8003cc2:	f000 fbc4 	bl	800444e <RTC_Bcd2ToByte>
 8003cc6:	0003      	movs	r3, r0
 8003cc8:	001a      	movs	r2, r3
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	b006      	add	sp, #24
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	007f7f7f 	.word	0x007f7f7f

08003cdc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003cdc:	b590      	push	{r4, r7, lr}
 8003cde:	b087      	sub	sp, #28
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2220      	movs	r2, #32
 8003cec:	5c9b      	ldrb	r3, [r3, r2]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d101      	bne.n	8003cf6 <HAL_RTC_SetDate+0x1a>
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	e099      	b.n	8003e2a <HAL_RTC_SetDate+0x14e>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2220      	movs	r2, #32
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2221      	movs	r2, #33	; 0x21
 8003d02:	2102      	movs	r1, #2
 8003d04:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d10e      	bne.n	8003d2a <HAL_RTC_SetDate+0x4e>
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	785b      	ldrb	r3, [r3, #1]
 8003d10:	001a      	movs	r2, r3
 8003d12:	2310      	movs	r3, #16
 8003d14:	4013      	ands	r3, r2
 8003d16:	d008      	beq.n	8003d2a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	785b      	ldrb	r3, [r3, #1]
 8003d1c:	2210      	movs	r2, #16
 8003d1e:	4393      	bics	r3, r2
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	330a      	adds	r3, #10
 8003d24:	b2da      	uxtb	r2, r3
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d11c      	bne.n	8003d6a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	78db      	ldrb	r3, [r3, #3]
 8003d34:	0018      	movs	r0, r3
 8003d36:	f000 fb60 	bl	80043fa <RTC_ByteToBcd2>
 8003d3a:	0003      	movs	r3, r0
 8003d3c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	785b      	ldrb	r3, [r3, #1]
 8003d42:	0018      	movs	r0, r3
 8003d44:	f000 fb59 	bl	80043fa <RTC_ByteToBcd2>
 8003d48:	0003      	movs	r3, r0
 8003d4a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003d4c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	789b      	ldrb	r3, [r3, #2]
 8003d52:	0018      	movs	r0, r3
 8003d54:	f000 fb51 	bl	80043fa <RTC_ByteToBcd2>
 8003d58:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003d5a:	0022      	movs	r2, r4
 8003d5c:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003d64:	4313      	orrs	r3, r2
 8003d66:	617b      	str	r3, [r7, #20]
 8003d68:	e00e      	b.n	8003d88 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	78db      	ldrb	r3, [r3, #3]
 8003d6e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	785b      	ldrb	r3, [r3, #1]
 8003d74:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003d76:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8003d78:	68ba      	ldr	r2, [r7, #8]
 8003d7a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8003d7c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003d84:	4313      	orrs	r3, r2
 8003d86:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	22ca      	movs	r2, #202	; 0xca
 8003d8e:	625a      	str	r2, [r3, #36]	; 0x24
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2253      	movs	r2, #83	; 0x53
 8003d96:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	0018      	movs	r0, r3
 8003d9c:	f000 fb03 	bl	80043a6 <RTC_EnterInitMode>
 8003da0:	1e03      	subs	r3, r0, #0
 8003da2:	d00d      	beq.n	8003dc0 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	22ff      	movs	r2, #255	; 0xff
 8003daa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2221      	movs	r2, #33	; 0x21
 8003db0:	2104      	movs	r1, #4
 8003db2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2220      	movs	r2, #32
 8003db8:	2100      	movs	r1, #0
 8003dba:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e034      	b.n	8003e2a <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	491b      	ldr	r1, [pc, #108]	; (8003e34 <HAL_RTC_SetDate+0x158>)
 8003dc8:	400a      	ands	r2, r1
 8003dca:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	6812      	ldr	r2, [r2, #0]
 8003dd4:	68d2      	ldr	r2, [r2, #12]
 8003dd6:	2180      	movs	r1, #128	; 0x80
 8003dd8:	438a      	bics	r2, r1
 8003dda:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	2220      	movs	r2, #32
 8003de4:	4013      	ands	r3, r2
 8003de6:	d113      	bne.n	8003e10 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	0018      	movs	r0, r3
 8003dec:	f000 fab4 	bl	8004358 <HAL_RTC_WaitForSynchro>
 8003df0:	1e03      	subs	r3, r0, #0
 8003df2:	d00d      	beq.n	8003e10 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	22ff      	movs	r2, #255	; 0xff
 8003dfa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2221      	movs	r2, #33	; 0x21
 8003e00:	2104      	movs	r1, #4
 8003e02:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2220      	movs	r2, #32
 8003e08:	2100      	movs	r1, #0
 8003e0a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e00c      	b.n	8003e2a <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	22ff      	movs	r2, #255	; 0xff
 8003e16:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2221      	movs	r2, #33	; 0x21
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2220      	movs	r2, #32
 8003e24:	2100      	movs	r1, #0
 8003e26:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003e28:	2300      	movs	r3, #0
  }
}
 8003e2a:	0018      	movs	r0, r3
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	b007      	add	sp, #28
 8003e30:	bd90      	pop	{r4, r7, pc}
 8003e32:	46c0      	nop			; (mov r8, r8)
 8003e34:	00ffff3f 	.word	0x00ffff3f

08003e38 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	4a21      	ldr	r2, [pc, #132]	; (8003ed0 <HAL_RTC_GetDate+0x98>)
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	0c1b      	lsrs	r3, r3, #16
 8003e54:	b2da      	uxtb	r2, r3
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	0a1b      	lsrs	r3, r3, #8
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	221f      	movs	r2, #31
 8003e62:	4013      	ands	r3, r2
 8003e64:	b2da      	uxtb	r2, r3
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	223f      	movs	r2, #63	; 0x3f
 8003e70:	4013      	ands	r3, r2
 8003e72:	b2da      	uxtb	r2, r3
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	0b5b      	lsrs	r3, r3, #13
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2207      	movs	r2, #7
 8003e80:	4013      	ands	r3, r2
 8003e82:	b2da      	uxtb	r2, r3
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d11a      	bne.n	8003ec4 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	78db      	ldrb	r3, [r3, #3]
 8003e92:	0018      	movs	r0, r3
 8003e94:	f000 fadb 	bl	800444e <RTC_Bcd2ToByte>
 8003e98:	0003      	movs	r3, r0
 8003e9a:	001a      	movs	r2, r3
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	785b      	ldrb	r3, [r3, #1]
 8003ea4:	0018      	movs	r0, r3
 8003ea6:	f000 fad2 	bl	800444e <RTC_Bcd2ToByte>
 8003eaa:	0003      	movs	r3, r0
 8003eac:	001a      	movs	r2, r3
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	789b      	ldrb	r3, [r3, #2]
 8003eb6:	0018      	movs	r0, r3
 8003eb8:	f000 fac9 	bl	800444e <RTC_Bcd2ToByte>
 8003ebc:	0003      	movs	r3, r0
 8003ebe:	001a      	movs	r2, r3
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	0018      	movs	r0, r3
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	b006      	add	sp, #24
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	46c0      	nop			; (mov r8, r8)
 8003ed0:	00ffff3f 	.word	0x00ffff3f

08003ed4 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003ed4:	b590      	push	{r4, r7, lr}
 8003ed6:	b089      	sub	sp, #36	; 0x24
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	5c9b      	ldrb	r3, [r3, r2]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d101      	bne.n	8003eee <HAL_RTC_SetAlarm_IT+0x1a>
 8003eea:	2302      	movs	r3, #2
 8003eec:	e130      	b.n	8004150 <HAL_RTC_SetAlarm_IT+0x27c>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2221      	movs	r2, #33	; 0x21
 8003efa:	2102      	movs	r1, #2
 8003efc:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d136      	bne.n	8003f72 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	2240      	movs	r2, #64	; 0x40
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	d102      	bne.n	8003f16 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	2200      	movs	r2, #0
 8003f14:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	0018      	movs	r0, r3
 8003f1c:	f000 fa6d 	bl	80043fa <RTC_ByteToBcd2>
 8003f20:	0003      	movs	r3, r0
 8003f22:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	785b      	ldrb	r3, [r3, #1]
 8003f28:	0018      	movs	r0, r3
 8003f2a:	f000 fa66 	bl	80043fa <RTC_ByteToBcd2>
 8003f2e:	0003      	movs	r3, r0
 8003f30:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003f32:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	789b      	ldrb	r3, [r3, #2]
 8003f38:	0018      	movs	r0, r3
 8003f3a:	f000 fa5e 	bl	80043fa <RTC_ByteToBcd2>
 8003f3e:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003f40:	0022      	movs	r2, r4
 8003f42:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	78db      	ldrb	r3, [r3, #3]
 8003f48:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	2220      	movs	r2, #32
 8003f52:	5c9b      	ldrb	r3, [r3, r2]
 8003f54:	0018      	movs	r0, r3
 8003f56:	f000 fa50 	bl	80043fa <RTC_ByteToBcd2>
 8003f5a:	0003      	movs	r3, r0
 8003f5c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003f5e:	0022      	movs	r2, r4
 8003f60:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003f66:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	61fb      	str	r3, [r7, #28]
 8003f70:	e022      	b.n	8003fb8 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	2240      	movs	r2, #64	; 0x40
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	d102      	bne.n	8003f84 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	2200      	movs	r2, #0
 8003f82:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	785b      	ldrb	r3, [r3, #1]
 8003f8e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003f90:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8003f92:	68ba      	ldr	r2, [r7, #8]
 8003f94:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003f96:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	78db      	ldrb	r3, [r3, #3]
 8003f9c:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8003f9e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	2120      	movs	r1, #32
 8003fa4:	5c5b      	ldrb	r3, [r3, r1]
 8003fa6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003fa8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003fae:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	22ca      	movs	r2, #202	; 0xca
 8003fca:	625a      	str	r2, [r3, #36]	; 0x24
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2253      	movs	r2, #83	; 0x53
 8003fd2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fd8:	2380      	movs	r3, #128	; 0x80
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d14e      	bne.n	800407e <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	6812      	ldr	r2, [r2, #0]
 8003fe8:	6892      	ldr	r2, [r2, #8]
 8003fea:	495b      	ldr	r1, [pc, #364]	; (8004158 <HAL_RTC_SetAlarm_IT+0x284>)
 8003fec:	400a      	ands	r2, r1
 8003fee:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	6812      	ldr	r2, [r2, #0]
 8003ff8:	68d2      	ldr	r2, [r2, #12]
 8003ffa:	21ff      	movs	r1, #255	; 0xff
 8003ffc:	400a      	ands	r2, r1
 8003ffe:	4957      	ldr	r1, [pc, #348]	; (800415c <HAL_RTC_SetAlarm_IT+0x288>)
 8004000:	430a      	orrs	r2, r1
 8004002:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004004:	f7fe f976 	bl	80022f4 <HAL_GetTick>
 8004008:	0003      	movs	r3, r0
 800400a:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800400c:	e016      	b.n	800403c <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800400e:	f7fe f971 	bl	80022f4 <HAL_GetTick>
 8004012:	0002      	movs	r2, r0
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	1ad2      	subs	r2, r2, r3
 8004018:	23fa      	movs	r3, #250	; 0xfa
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	429a      	cmp	r2, r3
 800401e:	d90d      	bls.n	800403c <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	22ff      	movs	r2, #255	; 0xff
 8004026:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2221      	movs	r2, #33	; 0x21
 800402c:	2103      	movs	r1, #3
 800402e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2220      	movs	r2, #32
 8004034:	2100      	movs	r1, #0
 8004036:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e089      	b.n	8004150 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	2201      	movs	r2, #1
 8004044:	4013      	ands	r3, r2
 8004046:	d0e2      	beq.n	800400e <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	69fa      	ldr	r2, [r7, #28]
 800404e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	6812      	ldr	r2, [r2, #0]
 8004060:	6892      	ldr	r2, [r2, #8]
 8004062:	2180      	movs	r1, #128	; 0x80
 8004064:	0049      	lsls	r1, r1, #1
 8004066:	430a      	orrs	r2, r1
 8004068:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	6812      	ldr	r2, [r2, #0]
 8004072:	6892      	ldr	r2, [r2, #8]
 8004074:	2180      	movs	r1, #128	; 0x80
 8004076:	0149      	lsls	r1, r1, #5
 8004078:	430a      	orrs	r2, r1
 800407a:	609a      	str	r2, [r3, #8]
 800407c:	e04d      	b.n	800411a <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	6812      	ldr	r2, [r2, #0]
 8004086:	6892      	ldr	r2, [r2, #8]
 8004088:	4935      	ldr	r1, [pc, #212]	; (8004160 <HAL_RTC_SetAlarm_IT+0x28c>)
 800408a:	400a      	ands	r2, r1
 800408c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	6812      	ldr	r2, [r2, #0]
 8004096:	68d2      	ldr	r2, [r2, #12]
 8004098:	21ff      	movs	r1, #255	; 0xff
 800409a:	400a      	ands	r2, r1
 800409c:	4931      	ldr	r1, [pc, #196]	; (8004164 <HAL_RTC_SetAlarm_IT+0x290>)
 800409e:	430a      	orrs	r2, r1
 80040a0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80040a2:	f7fe f927 	bl	80022f4 <HAL_GetTick>
 80040a6:	0003      	movs	r3, r0
 80040a8:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80040aa:	e016      	b.n	80040da <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80040ac:	f7fe f922 	bl	80022f4 <HAL_GetTick>
 80040b0:	0002      	movs	r2, r0
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	1ad2      	subs	r2, r2, r3
 80040b6:	23fa      	movs	r3, #250	; 0xfa
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d90d      	bls.n	80040da <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	22ff      	movs	r2, #255	; 0xff
 80040c4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2221      	movs	r2, #33	; 0x21
 80040ca:	2103      	movs	r1, #3
 80040cc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2220      	movs	r2, #32
 80040d2:	2100      	movs	r1, #0
 80040d4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e03a      	b.n	8004150 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	2202      	movs	r2, #2
 80040e2:	4013      	ands	r3, r2
 80040e4:	d0e2      	beq.n	80040ac <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	69fa      	ldr	r2, [r7, #28]
 80040ec:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	69ba      	ldr	r2, [r7, #24]
 80040f4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	6812      	ldr	r2, [r2, #0]
 80040fe:	6892      	ldr	r2, [r2, #8]
 8004100:	2180      	movs	r1, #128	; 0x80
 8004102:	0089      	lsls	r1, r1, #2
 8004104:	430a      	orrs	r2, r1
 8004106:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	6812      	ldr	r2, [r2, #0]
 8004110:	6892      	ldr	r2, [r2, #8]
 8004112:	2180      	movs	r1, #128	; 0x80
 8004114:	0189      	lsls	r1, r1, #6
 8004116:	430a      	orrs	r2, r1
 8004118:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800411a:	4b13      	ldr	r3, [pc, #76]	; (8004168 <HAL_RTC_SetAlarm_IT+0x294>)
 800411c:	4a12      	ldr	r2, [pc, #72]	; (8004168 <HAL_RTC_SetAlarm_IT+0x294>)
 800411e:	6812      	ldr	r2, [r2, #0]
 8004120:	2180      	movs	r1, #128	; 0x80
 8004122:	0289      	lsls	r1, r1, #10
 8004124:	430a      	orrs	r2, r1
 8004126:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8004128:	4b0f      	ldr	r3, [pc, #60]	; (8004168 <HAL_RTC_SetAlarm_IT+0x294>)
 800412a:	4a0f      	ldr	r2, [pc, #60]	; (8004168 <HAL_RTC_SetAlarm_IT+0x294>)
 800412c:	6892      	ldr	r2, [r2, #8]
 800412e:	2180      	movs	r1, #128	; 0x80
 8004130:	0289      	lsls	r1, r1, #10
 8004132:	430a      	orrs	r2, r1
 8004134:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	22ff      	movs	r2, #255	; 0xff
 800413c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2221      	movs	r2, #33	; 0x21
 8004142:	2101      	movs	r1, #1
 8004144:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2220      	movs	r2, #32
 800414a:	2100      	movs	r1, #0
 800414c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	0018      	movs	r0, r3
 8004152:	46bd      	mov	sp, r7
 8004154:	b009      	add	sp, #36	; 0x24
 8004156:	bd90      	pop	{r4, r7, pc}
 8004158:	fffffeff 	.word	0xfffffeff
 800415c:	fffffe7f 	.word	0xfffffe7f
 8004160:	fffffdff 	.word	0xfffffdff
 8004164:	fffffd7f 	.word	0xfffffd7f
 8004168:	40010400 	.word	0x40010400

0800416c <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2220      	movs	r2, #32
 800417a:	5c9b      	ldrb	r3, [r3, r2]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d101      	bne.n	8004184 <HAL_RTC_DeactivateAlarm+0x18>
 8004180:	2302      	movs	r3, #2
 8004182:	e086      	b.n	8004292 <HAL_RTC_DeactivateAlarm+0x126>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2220      	movs	r2, #32
 8004188:	2101      	movs	r1, #1
 800418a:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2221      	movs	r2, #33	; 0x21
 8004190:	2102      	movs	r1, #2
 8004192:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	22ca      	movs	r2, #202	; 0xca
 800419a:	625a      	str	r2, [r3, #36]	; 0x24
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2253      	movs	r2, #83	; 0x53
 80041a2:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	2380      	movs	r3, #128	; 0x80
 80041a8:	005b      	lsls	r3, r3, #1
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d132      	bne.n	8004214 <HAL_RTC_DeactivateAlarm+0xa8>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	6812      	ldr	r2, [r2, #0]
 80041b6:	6892      	ldr	r2, [r2, #8]
 80041b8:	4938      	ldr	r1, [pc, #224]	; (800429c <HAL_RTC_DeactivateAlarm+0x130>)
 80041ba:	400a      	ands	r2, r1
 80041bc:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	6812      	ldr	r2, [r2, #0]
 80041c6:	6892      	ldr	r2, [r2, #8]
 80041c8:	4935      	ldr	r1, [pc, #212]	; (80042a0 <HAL_RTC_DeactivateAlarm+0x134>)
 80041ca:	400a      	ands	r2, r1
 80041cc:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 80041ce:	f7fe f891 	bl	80022f4 <HAL_GetTick>
 80041d2:	0003      	movs	r3, r0
 80041d4:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80041d6:	e016      	b.n	8004206 <HAL_RTC_DeactivateAlarm+0x9a>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80041d8:	f7fe f88c 	bl	80022f4 <HAL_GetTick>
 80041dc:	0002      	movs	r2, r0
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	1ad2      	subs	r2, r2, r3
 80041e2:	23fa      	movs	r3, #250	; 0xfa
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d90d      	bls.n	8004206 <HAL_RTC_DeactivateAlarm+0x9a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	22ff      	movs	r2, #255	; 0xff
 80041f0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2221      	movs	r2, #33	; 0x21
 80041f6:	2103      	movs	r1, #3
 80041f8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2220      	movs	r2, #32
 80041fe:	2100      	movs	r1, #0
 8004200:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e045      	b.n	8004292 <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	2201      	movs	r2, #1
 800420e:	4013      	ands	r3, r2
 8004210:	d0e2      	beq.n	80041d8 <HAL_RTC_DeactivateAlarm+0x6c>
 8004212:	e031      	b.n	8004278 <HAL_RTC_DeactivateAlarm+0x10c>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	6812      	ldr	r2, [r2, #0]
 800421c:	6892      	ldr	r2, [r2, #8]
 800421e:	4921      	ldr	r1, [pc, #132]	; (80042a4 <HAL_RTC_DeactivateAlarm+0x138>)
 8004220:	400a      	ands	r2, r1
 8004222:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	6812      	ldr	r2, [r2, #0]
 800422c:	6892      	ldr	r2, [r2, #8]
 800422e:	491e      	ldr	r1, [pc, #120]	; (80042a8 <HAL_RTC_DeactivateAlarm+0x13c>)
 8004230:	400a      	ands	r2, r1
 8004232:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8004234:	f7fe f85e 	bl	80022f4 <HAL_GetTick>
 8004238:	0003      	movs	r3, r0
 800423a:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800423c:	e016      	b.n	800426c <HAL_RTC_DeactivateAlarm+0x100>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800423e:	f7fe f859 	bl	80022f4 <HAL_GetTick>
 8004242:	0002      	movs	r2, r0
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	1ad2      	subs	r2, r2, r3
 8004248:	23fa      	movs	r3, #250	; 0xfa
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	429a      	cmp	r2, r3
 800424e:	d90d      	bls.n	800426c <HAL_RTC_DeactivateAlarm+0x100>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	22ff      	movs	r2, #255	; 0xff
 8004256:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2221      	movs	r2, #33	; 0x21
 800425c:	2103      	movs	r1, #3
 800425e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2220      	movs	r2, #32
 8004264:	2100      	movs	r1, #0
 8004266:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e012      	b.n	8004292 <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	2202      	movs	r2, #2
 8004274:	4013      	ands	r3, r2
 8004276:	d0e2      	beq.n	800423e <HAL_RTC_DeactivateAlarm+0xd2>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	22ff      	movs	r2, #255	; 0xff
 800427e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2221      	movs	r2, #33	; 0x21
 8004284:	2101      	movs	r1, #1
 8004286:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2220      	movs	r2, #32
 800428c:	2100      	movs	r1, #0
 800428e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	0018      	movs	r0, r3
 8004294:	46bd      	mov	sp, r7
 8004296:	b004      	add	sp, #16
 8004298:	bd80      	pop	{r7, pc}
 800429a:	46c0      	nop			; (mov r8, r8)
 800429c:	fffffeff 	.word	0xfffffeff
 80042a0:	ffffefff 	.word	0xffffefff
 80042a4:	fffffdff 	.word	0xfffffdff
 80042a8:	ffffdfff 	.word	0xffffdfff

080042ac <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689a      	ldr	r2, [r3, #8]
 80042ba:	2380      	movs	r3, #128	; 0x80
 80042bc:	015b      	lsls	r3, r3, #5
 80042be:	4013      	ands	r3, r2
 80042c0:	d014      	beq.n	80042ec <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68da      	ldr	r2, [r3, #12]
 80042c8:	2380      	movs	r3, #128	; 0x80
 80042ca:	005b      	lsls	r3, r3, #1
 80042cc:	4013      	ands	r3, r2
 80042ce:	d00d      	beq.n	80042ec <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	0018      	movs	r0, r3
 80042d4:	f000 f838 	bl	8004348 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	6812      	ldr	r2, [r2, #0]
 80042e0:	68d2      	ldr	r2, [r2, #12]
 80042e2:	21ff      	movs	r1, #255	; 0xff
 80042e4:	400a      	ands	r2, r1
 80042e6:	4915      	ldr	r1, [pc, #84]	; (800433c <HAL_RTC_AlarmIRQHandler+0x90>)
 80042e8:	430a      	orrs	r2, r1
 80042ea:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	689a      	ldr	r2, [r3, #8]
 80042f2:	2380      	movs	r3, #128	; 0x80
 80042f4:	019b      	lsls	r3, r3, #6
 80042f6:	4013      	ands	r3, r2
 80042f8:	d014      	beq.n	8004324 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68da      	ldr	r2, [r3, #12]
 8004300:	2380      	movs	r3, #128	; 0x80
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	4013      	ands	r3, r2
 8004306:	d00d      	beq.n	8004324 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	0018      	movs	r0, r3
 800430c:	f000 f8bc 	bl	8004488 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	6812      	ldr	r2, [r2, #0]
 8004318:	68d2      	ldr	r2, [r2, #12]
 800431a:	21ff      	movs	r1, #255	; 0xff
 800431c:	400a      	ands	r2, r1
 800431e:	4908      	ldr	r1, [pc, #32]	; (8004340 <HAL_RTC_AlarmIRQHandler+0x94>)
 8004320:	430a      	orrs	r2, r1
 8004322:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004324:	4b07      	ldr	r3, [pc, #28]	; (8004344 <HAL_RTC_AlarmIRQHandler+0x98>)
 8004326:	2280      	movs	r2, #128	; 0x80
 8004328:	0292      	lsls	r2, r2, #10
 800432a:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2221      	movs	r2, #33	; 0x21
 8004330:	2101      	movs	r1, #1
 8004332:	5499      	strb	r1, [r3, r2]
}
 8004334:	46c0      	nop			; (mov r8, r8)
 8004336:	46bd      	mov	sp, r7
 8004338:	b002      	add	sp, #8
 800433a:	bd80      	pop	{r7, pc}
 800433c:	fffffe7f 	.word	0xfffffe7f
 8004340:	fffffd7f 	.word	0xfffffd7f
 8004344:	40010400 	.word	0x40010400

08004348 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8004350:	46c0      	nop			; (mov r8, r8)
 8004352:	46bd      	mov	sp, r7
 8004354:	b002      	add	sp, #8
 8004356:	bd80      	pop	{r7, pc}

08004358 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	6812      	ldr	r2, [r2, #0]
 8004368:	68d2      	ldr	r2, [r2, #12]
 800436a:	21a0      	movs	r1, #160	; 0xa0
 800436c:	438a      	bics	r2, r1
 800436e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004370:	f7fd ffc0 	bl	80022f4 <HAL_GetTick>
 8004374:	0003      	movs	r3, r0
 8004376:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004378:	e00a      	b.n	8004390 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800437a:	f7fd ffbb 	bl	80022f4 <HAL_GetTick>
 800437e:	0002      	movs	r2, r0
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	1ad2      	subs	r2, r2, r3
 8004384:	23fa      	movs	r3, #250	; 0xfa
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	429a      	cmp	r2, r3
 800438a:	d901      	bls.n	8004390 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e006      	b.n	800439e <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	2220      	movs	r2, #32
 8004398:	4013      	ands	r3, r2
 800439a:	d0ee      	beq.n	800437a <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	0018      	movs	r0, r3
 80043a0:	46bd      	mov	sp, r7
 80043a2:	b004      	add	sp, #16
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b084      	sub	sp, #16
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	2240      	movs	r2, #64	; 0x40
 80043b6:	4013      	ands	r3, r2
 80043b8:	d11a      	bne.n	80043f0 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2201      	movs	r2, #1
 80043c0:	4252      	negs	r2, r2
 80043c2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80043c4:	f7fd ff96 	bl	80022f4 <HAL_GetTick>
 80043c8:	0003      	movs	r3, r0
 80043ca:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80043cc:	e00a      	b.n	80043e4 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80043ce:	f7fd ff91 	bl	80022f4 <HAL_GetTick>
 80043d2:	0002      	movs	r2, r0
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	1ad2      	subs	r2, r2, r3
 80043d8:	23fa      	movs	r3, #250	; 0xfa
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	429a      	cmp	r2, r3
 80043de:	d901      	bls.n	80043e4 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e006      	b.n	80043f2 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	2240      	movs	r2, #64	; 0x40
 80043ec:	4013      	ands	r3, r2
 80043ee:	d0ee      	beq.n	80043ce <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	0018      	movs	r0, r3
 80043f4:	46bd      	mov	sp, r7
 80043f6:	b004      	add	sp, #16
 80043f8:	bd80      	pop	{r7, pc}

080043fa <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b084      	sub	sp, #16
 80043fe:	af00      	add	r7, sp, #0
 8004400:	0002      	movs	r2, r0
 8004402:	1dfb      	adds	r3, r7, #7
 8004404:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8004406:	2300      	movs	r3, #0
 8004408:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800440a:	230b      	movs	r3, #11
 800440c:	18fb      	adds	r3, r7, r3
 800440e:	1dfa      	adds	r2, r7, #7
 8004410:	7812      	ldrb	r2, [r2, #0]
 8004412:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8004414:	e009      	b.n	800442a <RTC_ByteToBcd2+0x30>
  {
    bcdhigh++;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	3301      	adds	r3, #1
 800441a:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800441c:	230b      	movs	r3, #11
 800441e:	18fb      	adds	r3, r7, r3
 8004420:	220b      	movs	r2, #11
 8004422:	18ba      	adds	r2, r7, r2
 8004424:	7812      	ldrb	r2, [r2, #0]
 8004426:	3a0a      	subs	r2, #10
 8004428:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 800442a:	230b      	movs	r3, #11
 800442c:	18fb      	adds	r3, r7, r3
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	2b09      	cmp	r3, #9
 8004432:	d8f0      	bhi.n	8004416 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	b2db      	uxtb	r3, r3
 8004438:	011b      	lsls	r3, r3, #4
 800443a:	b2da      	uxtb	r2, r3
 800443c:	230b      	movs	r3, #11
 800443e:	18fb      	adds	r3, r7, r3
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	4313      	orrs	r3, r2
 8004444:	b2db      	uxtb	r3, r3
}
 8004446:	0018      	movs	r0, r3
 8004448:	46bd      	mov	sp, r7
 800444a:	b004      	add	sp, #16
 800444c:	bd80      	pop	{r7, pc}

0800444e <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800444e:	b580      	push	{r7, lr}
 8004450:	b084      	sub	sp, #16
 8004452:	af00      	add	r7, sp, #0
 8004454:	0002      	movs	r2, r0
 8004456:	1dfb      	adds	r3, r7, #7
 8004458:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800445a:	1dfb      	adds	r3, r7, #7
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	091b      	lsrs	r3, r3, #4
 8004460:	b2db      	uxtb	r3, r3
 8004462:	001a      	movs	r2, r3
 8004464:	0013      	movs	r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	189b      	adds	r3, r3, r2
 800446a:	005b      	lsls	r3, r3, #1
 800446c:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	b2da      	uxtb	r2, r3
 8004472:	1dfb      	adds	r3, r7, #7
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	210f      	movs	r1, #15
 8004478:	400b      	ands	r3, r1
 800447a:	b2db      	uxtb	r3, r3
 800447c:	18d3      	adds	r3, r2, r3
 800447e:	b2db      	uxtb	r3, r3
}
 8004480:	0018      	movs	r0, r3
 8004482:	46bd      	mov	sp, r7
 8004484:	b004      	add	sp, #16
 8004486:	bd80      	pop	{r7, pc}

08004488 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004490:	46c0      	nop			; (mov r8, r8)
 8004492:	46bd      	mov	sp, r7
 8004494:	b002      	add	sp, #8
 8004496:	bd80      	pop	{r7, pc}

08004498 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d101      	bne.n	80044aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e057      	b.n	800455a <HAL_SPI_Init+0xc2>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2251      	movs	r2, #81	; 0x51
 80044b4:	5c9b      	ldrb	r3, [r3, r2]
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d107      	bne.n	80044cc <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2250      	movs	r2, #80	; 0x50
 80044c0:	2100      	movs	r1, #0
 80044c2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	0018      	movs	r0, r3
 80044c8:	f005 fbfe 	bl	8009cc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2251      	movs	r2, #81	; 0x51
 80044d0:	2102      	movs	r1, #2
 80044d2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	6812      	ldr	r2, [r2, #0]
 80044dc:	6812      	ldr	r2, [r2, #0]
 80044de:	2140      	movs	r1, #64	; 0x40
 80044e0:	438a      	bics	r2, r1
 80044e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	6851      	ldr	r1, [r2, #4]
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	6892      	ldr	r2, [r2, #8]
 80044f0:	4311      	orrs	r1, r2
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	68d2      	ldr	r2, [r2, #12]
 80044f6:	4311      	orrs	r1, r2
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	6912      	ldr	r2, [r2, #16]
 80044fc:	4311      	orrs	r1, r2
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	6952      	ldr	r2, [r2, #20]
 8004502:	4311      	orrs	r1, r2
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	6990      	ldr	r0, [r2, #24]
 8004508:	2280      	movs	r2, #128	; 0x80
 800450a:	0092      	lsls	r2, r2, #2
 800450c:	4002      	ands	r2, r0
 800450e:	4311      	orrs	r1, r2
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	69d2      	ldr	r2, [r2, #28]
 8004514:	4311      	orrs	r1, r2
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	6a12      	ldr	r2, [r2, #32]
 800451a:	4311      	orrs	r1, r2
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004520:	430a      	orrs	r2, r1
 8004522:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	6992      	ldr	r2, [r2, #24]
 800452c:	0c12      	lsrs	r2, r2, #16
 800452e:	2104      	movs	r1, #4
 8004530:	4011      	ands	r1, r2
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004536:	430a      	orrs	r2, r1
 8004538:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	6812      	ldr	r2, [r2, #0]
 8004542:	69d2      	ldr	r2, [r2, #28]
 8004544:	4907      	ldr	r1, [pc, #28]	; (8004564 <HAL_SPI_Init+0xcc>)
 8004546:	400a      	ands	r2, r1
 8004548:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2251      	movs	r2, #81	; 0x51
 8004554:	2101      	movs	r1, #1
 8004556:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	0018      	movs	r0, r3
 800455c:	46bd      	mov	sp, r7
 800455e:	b002      	add	sp, #8
 8004560:	bd80      	pop	{r7, pc}
 8004562:	46c0      	nop			; (mov r8, r8)
 8004564:	fffff7ff 	.word	0xfffff7ff

08004568 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b08c      	sub	sp, #48	; 0x30
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
 8004574:	001a      	movs	r2, r3
 8004576:	1cbb      	adds	r3, r7, #2
 8004578:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800457a:	2301      	movs	r3, #1
 800457c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800457e:	232b      	movs	r3, #43	; 0x2b
 8004580:	18fb      	adds	r3, r7, r3
 8004582:	2200      	movs	r2, #0
 8004584:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2250      	movs	r2, #80	; 0x50
 800458a:	5c9b      	ldrb	r3, [r3, r2]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d101      	bne.n	8004594 <HAL_SPI_TransmitReceive+0x2c>
 8004590:	2302      	movs	r3, #2
 8004592:	e1a2      	b.n	80048da <HAL_SPI_TransmitReceive+0x372>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2250      	movs	r2, #80	; 0x50
 8004598:	2101      	movs	r1, #1
 800459a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800459c:	f7fd feaa 	bl	80022f4 <HAL_GetTick>
 80045a0:	0003      	movs	r3, r0
 80045a2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80045a4:	2323      	movs	r3, #35	; 0x23
 80045a6:	18fb      	adds	r3, r7, r3
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	2151      	movs	r1, #81	; 0x51
 80045ac:	5c52      	ldrb	r2, [r2, r1]
 80045ae:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80045b6:	231a      	movs	r3, #26
 80045b8:	18fb      	adds	r3, r7, r3
 80045ba:	1cba      	adds	r2, r7, #2
 80045bc:	8812      	ldrh	r2, [r2, #0]
 80045be:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80045c0:	2323      	movs	r3, #35	; 0x23
 80045c2:	18fb      	adds	r3, r7, r3
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d012      	beq.n	80045f0 <HAL_SPI_TransmitReceive+0x88>
 80045ca:	69fa      	ldr	r2, [r7, #28]
 80045cc:	2382      	movs	r3, #130	; 0x82
 80045ce:	005b      	lsls	r3, r3, #1
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d108      	bne.n	80045e6 <HAL_SPI_TransmitReceive+0x7e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d104      	bne.n	80045e6 <HAL_SPI_TransmitReceive+0x7e>
 80045dc:	2323      	movs	r3, #35	; 0x23
 80045de:	18fb      	adds	r3, r7, r3
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	2b04      	cmp	r3, #4
 80045e4:	d004      	beq.n	80045f0 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_BUSY;
 80045e6:	232b      	movs	r3, #43	; 0x2b
 80045e8:	18fb      	adds	r3, r7, r3
 80045ea:	2202      	movs	r2, #2
 80045ec:	701a      	strb	r2, [r3, #0]
    goto error;
 80045ee:	e169      	b.n	80048c4 <HAL_SPI_TransmitReceive+0x35c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d006      	beq.n	8004604 <HAL_SPI_TransmitReceive+0x9c>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d003      	beq.n	8004604 <HAL_SPI_TransmitReceive+0x9c>
 80045fc:	1cbb      	adds	r3, r7, #2
 80045fe:	881b      	ldrh	r3, [r3, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d104      	bne.n	800460e <HAL_SPI_TransmitReceive+0xa6>
  {
    errorcode = HAL_ERROR;
 8004604:	232b      	movs	r3, #43	; 0x2b
 8004606:	18fb      	adds	r3, r7, r3
 8004608:	2201      	movs	r2, #1
 800460a:	701a      	strb	r2, [r3, #0]
    goto error;
 800460c:	e15a      	b.n	80048c4 <HAL_SPI_TransmitReceive+0x35c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2251      	movs	r2, #81	; 0x51
 8004612:	5c9b      	ldrb	r3, [r3, r2]
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b04      	cmp	r3, #4
 8004618:	d003      	beq.n	8004622 <HAL_SPI_TransmitReceive+0xba>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2251      	movs	r2, #81	; 0x51
 800461e:	2105      	movs	r1, #5
 8004620:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	1cba      	adds	r2, r7, #2
 8004632:	8812      	ldrh	r2, [r2, #0]
 8004634:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	1cba      	adds	r2, r7, #2
 800463a:	8812      	ldrh	r2, [r2, #0]
 800463c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	68ba      	ldr	r2, [r7, #8]
 8004642:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	1cba      	adds	r2, r7, #2
 8004648:	8812      	ldrh	r2, [r2, #0]
 800464a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	1cba      	adds	r2, r7, #2
 8004650:	8812      	ldrh	r2, [r2, #0]
 8004652:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2240      	movs	r2, #64	; 0x40
 8004668:	4013      	ands	r3, r2
 800466a:	2b40      	cmp	r3, #64	; 0x40
 800466c:	d007      	beq.n	800467e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	6812      	ldr	r2, [r2, #0]
 8004676:	6812      	ldr	r2, [r2, #0]
 8004678:	2140      	movs	r1, #64	; 0x40
 800467a:	430a      	orrs	r2, r1
 800467c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	68da      	ldr	r2, [r3, #12]
 8004682:	2380      	movs	r3, #128	; 0x80
 8004684:	011b      	lsls	r3, r3, #4
 8004686:	429a      	cmp	r2, r3
 8004688:	d000      	beq.n	800468c <HAL_SPI_TransmitReceive+0x124>
 800468a:	e07a      	b.n	8004782 <HAL_SPI_TransmitReceive+0x21a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d004      	beq.n	800469e <HAL_SPI_TransmitReceive+0x136>
 8004694:	231a      	movs	r3, #26
 8004696:	18fb      	adds	r3, r7, r3
 8004698:	881b      	ldrh	r3, [r3, #0]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d166      	bne.n	800476c <HAL_SPI_TransmitReceive+0x204>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80046a6:	8812      	ldrh	r2, [r2, #0]
 80046a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ae:	1c9a      	adds	r2, r3, #2
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	3b01      	subs	r3, #1
 80046bc:	b29a      	uxth	r2, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046c2:	e053      	b.n	800476c <HAL_SPI_TransmitReceive+0x204>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	2202      	movs	r2, #2
 80046cc:	4013      	ands	r3, r2
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d11b      	bne.n	800470a <HAL_SPI_TransmitReceive+0x1a2>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d016      	beq.n	800470a <HAL_SPI_TransmitReceive+0x1a2>
 80046dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d113      	bne.n	800470a <HAL_SPI_TransmitReceive+0x1a2>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80046ea:	8812      	ldrh	r2, [r2, #0]
 80046ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f2:	1c9a      	adds	r2, r3, #2
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	3b01      	subs	r3, #1
 8004700:	b29a      	uxth	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004706:	2300      	movs	r3, #0
 8004708:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	2201      	movs	r2, #1
 8004712:	4013      	ands	r3, r2
 8004714:	2b01      	cmp	r3, #1
 8004716:	d119      	bne.n	800474c <HAL_SPI_TransmitReceive+0x1e4>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800471c:	b29b      	uxth	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d014      	beq.n	800474c <HAL_SPI_TransmitReceive+0x1e4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	b29b      	uxth	r3, r3
 800472e:	8013      	strh	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004734:	1c9a      	adds	r2, r3, #2
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800473e:	b29b      	uxth	r3, r3
 8004740:	3b01      	subs	r3, #1
 8004742:	b29a      	uxth	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004748:	2301      	movs	r3, #1
 800474a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800474c:	f7fd fdd2 	bl	80022f4 <HAL_GetTick>
 8004750:	0002      	movs	r2, r0
 8004752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004754:	1ad2      	subs	r2, r2, r3
 8004756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004758:	429a      	cmp	r2, r3
 800475a:	d307      	bcc.n	800476c <HAL_SPI_TransmitReceive+0x204>
 800475c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800475e:	3301      	adds	r3, #1
 8004760:	d004      	beq.n	800476c <HAL_SPI_TransmitReceive+0x204>
      {
        errorcode = HAL_TIMEOUT;
 8004762:	232b      	movs	r3, #43	; 0x2b
 8004764:	18fb      	adds	r3, r7, r3
 8004766:	2203      	movs	r2, #3
 8004768:	701a      	strb	r2, [r3, #0]
        goto error;
 800476a:	e0ab      	b.n	80048c4 <HAL_SPI_TransmitReceive+0x35c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004770:	b29b      	uxth	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1a6      	bne.n	80046c4 <HAL_SPI_TransmitReceive+0x15c>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800477a:	b29b      	uxth	r3, r3
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1a1      	bne.n	80046c4 <HAL_SPI_TransmitReceive+0x15c>
 8004780:	e081      	b.n	8004886 <HAL_SPI_TransmitReceive+0x31e>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d005      	beq.n	8004796 <HAL_SPI_TransmitReceive+0x22e>
 800478a:	231a      	movs	r3, #26
 800478c:	18fb      	adds	r3, r7, r3
 800478e:	881b      	ldrh	r3, [r3, #0]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d000      	beq.n	8004796 <HAL_SPI_TransmitReceive+0x22e>
 8004794:	e06d      	b.n	8004872 <HAL_SPI_TransmitReceive+0x30a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	330c      	adds	r3, #12
 800479c:	001a      	movs	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	7013      	strb	r3, [r2, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047aa:	1c5a      	adds	r2, r3, #1
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	3b01      	subs	r3, #1
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047be:	e058      	b.n	8004872 <HAL_SPI_TransmitReceive+0x30a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	2202      	movs	r2, #2
 80047c8:	4013      	ands	r3, r2
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d11d      	bne.n	800480a <HAL_SPI_TransmitReceive+0x2a2>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d018      	beq.n	800480a <HAL_SPI_TransmitReceive+0x2a2>
 80047d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d115      	bne.n	800480a <HAL_SPI_TransmitReceive+0x2a2>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	330c      	adds	r3, #12
 80047e4:	001a      	movs	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	7013      	strb	r3, [r2, #0]
        hspi->pTxBuffPtr++;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f2:	1c5a      	adds	r2, r3, #1
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	3b01      	subs	r3, #1
 8004800:	b29a      	uxth	r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004806:	2300      	movs	r3, #0
 8004808:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	2201      	movs	r2, #1
 8004812:	4013      	ands	r3, r2
 8004814:	2b01      	cmp	r3, #1
 8004816:	d119      	bne.n	800484c <HAL_SPI_TransmitReceive+0x2e4>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800481c:	b29b      	uxth	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d014      	beq.n	800484c <HAL_SPI_TransmitReceive+0x2e4>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	b2db      	uxtb	r3, r3
 800482e:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr++;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004834:	1c5a      	adds	r2, r3, #1
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800483e:	b29b      	uxth	r3, r3
 8004840:	3b01      	subs	r3, #1
 8004842:	b29a      	uxth	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004848:	2301      	movs	r3, #1
 800484a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800484c:	f7fd fd52 	bl	80022f4 <HAL_GetTick>
 8004850:	0002      	movs	r2, r0
 8004852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004854:	1ad2      	subs	r2, r2, r3
 8004856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004858:	429a      	cmp	r2, r3
 800485a:	d302      	bcc.n	8004862 <HAL_SPI_TransmitReceive+0x2fa>
 800485c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800485e:	3301      	adds	r3, #1
 8004860:	d102      	bne.n	8004868 <HAL_SPI_TransmitReceive+0x300>
 8004862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004864:	2b00      	cmp	r3, #0
 8004866:	d104      	bne.n	8004872 <HAL_SPI_TransmitReceive+0x30a>
      {
        errorcode = HAL_TIMEOUT;
 8004868:	232b      	movs	r3, #43	; 0x2b
 800486a:	18fb      	adds	r3, r7, r3
 800486c:	2203      	movs	r2, #3
 800486e:	701a      	strb	r2, [r3, #0]
        goto error;
 8004870:	e028      	b.n	80048c4 <HAL_SPI_TransmitReceive+0x35c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004876:	b29b      	uxth	r3, r3
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1a1      	bne.n	80047c0 <HAL_SPI_TransmitReceive+0x258>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004880:	b29b      	uxth	r3, r3
 8004882:	2b00      	cmp	r3, #0
 8004884:	d19c      	bne.n	80047c0 <HAL_SPI_TransmitReceive+0x258>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004888:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	0018      	movs	r0, r3
 800488e:	f000 f9a1 	bl	8004bd4 <SPI_EndRxTxTransaction>
 8004892:	1e03      	subs	r3, r0, #0
 8004894:	d007      	beq.n	80048a6 <HAL_SPI_TransmitReceive+0x33e>
  {
    errorcode = HAL_ERROR;
 8004896:	232b      	movs	r3, #43	; 0x2b
 8004898:	18fb      	adds	r3, r7, r3
 800489a:	2201      	movs	r2, #1
 800489c:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2220      	movs	r2, #32
 80048a2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80048a4:	e00e      	b.n	80048c4 <HAL_SPI_TransmitReceive+0x35c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d10a      	bne.n	80048c4 <HAL_SPI_TransmitReceive+0x35c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048ae:	2300      	movs	r3, #0
 80048b0:	617b      	str	r3, [r7, #20]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	617b      	str	r3, [r7, #20]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	617b      	str	r3, [r7, #20]
 80048c2:	697b      	ldr	r3, [r7, #20]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2251      	movs	r2, #81	; 0x51
 80048c8:	2101      	movs	r1, #1
 80048ca:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2250      	movs	r2, #80	; 0x50
 80048d0:	2100      	movs	r1, #0
 80048d2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80048d4:	232b      	movs	r3, #43	; 0x2b
 80048d6:	18fb      	adds	r3, r7, r3
 80048d8:	781b      	ldrb	r3, [r3, #0]
}
 80048da:	0018      	movs	r0, r3
 80048dc:	46bd      	mov	sp, r7
 80048de:	b00c      	add	sp, #48	; 0x30
 80048e0:	bd80      	pop	{r7, pc}
	...

080048e4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b088      	sub	sp, #32
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	2240      	movs	r2, #64	; 0x40
 8004900:	4013      	ands	r3, r2
 8004902:	d10d      	bne.n	8004920 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	2201      	movs	r2, #1
 8004908:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800490a:	d009      	beq.n	8004920 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	2240      	movs	r2, #64	; 0x40
 8004910:	4013      	ands	r3, r2
 8004912:	d005      	beq.n	8004920 <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	0010      	movs	r0, r2
 800491c:	4798      	blx	r3
    return;
 800491e:	e0c6      	b.n	8004aae <HAL_SPI_IRQHandler+0x1ca>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	2202      	movs	r2, #2
 8004924:	4013      	ands	r3, r2
 8004926:	d009      	beq.n	800493c <HAL_SPI_IRQHandler+0x58>
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	2280      	movs	r2, #128	; 0x80
 800492c:	4013      	ands	r3, r2
 800492e:	d005      	beq.n	800493c <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	0010      	movs	r0, r2
 8004938:	4798      	blx	r3
    return;
 800493a:	e0b8      	b.n	8004aae <HAL_SPI_IRQHandler+0x1ca>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	2220      	movs	r2, #32
 8004940:	4013      	ands	r3, r2
 8004942:	d109      	bne.n	8004958 <HAL_SPI_IRQHandler+0x74>
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	2240      	movs	r2, #64	; 0x40
 8004948:	4013      	ands	r3, r2
 800494a:	d105      	bne.n	8004958 <HAL_SPI_IRQHandler+0x74>
 800494c:	69ba      	ldr	r2, [r7, #24]
 800494e:	2380      	movs	r3, #128	; 0x80
 8004950:	005b      	lsls	r3, r3, #1
 8004952:	4013      	ands	r3, r2
 8004954:	d100      	bne.n	8004958 <HAL_SPI_IRQHandler+0x74>
 8004956:	e0aa      	b.n	8004aae <HAL_SPI_IRQHandler+0x1ca>
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	2220      	movs	r2, #32
 800495c:	4013      	ands	r3, r2
 800495e:	d100      	bne.n	8004962 <HAL_SPI_IRQHandler+0x7e>
 8004960:	e0a5      	b.n	8004aae <HAL_SPI_IRQHandler+0x1ca>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	2240      	movs	r2, #64	; 0x40
 8004966:	4013      	ands	r3, r2
 8004968:	d023      	beq.n	80049b2 <HAL_SPI_IRQHandler+0xce>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2251      	movs	r2, #81	; 0x51
 800496e:	5c9b      	ldrb	r3, [r3, r2]
 8004970:	b2db      	uxtb	r3, r3
 8004972:	2b03      	cmp	r3, #3
 8004974:	d011      	beq.n	800499a <HAL_SPI_IRQHandler+0xb6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800497a:	2204      	movs	r2, #4
 800497c:	431a      	orrs	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004982:	2300      	movs	r3, #0
 8004984:	617b      	str	r3, [r7, #20]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	617b      	str	r3, [r7, #20]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	617b      	str	r3, [r7, #20]
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	e00b      	b.n	80049b2 <HAL_SPI_IRQHandler+0xce>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800499a:	2300      	movs	r3, #0
 800499c:	613b      	str	r3, [r7, #16]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	613b      	str	r3, [r7, #16]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	613b      	str	r3, [r7, #16]
 80049ae:	693b      	ldr	r3, [r7, #16]
        return;
 80049b0:	e07d      	b.n	8004aae <HAL_SPI_IRQHandler+0x1ca>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	2220      	movs	r2, #32
 80049b6:	4013      	ands	r3, r2
 80049b8:	d014      	beq.n	80049e4 <HAL_SPI_IRQHandler+0x100>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049be:	2201      	movs	r2, #1
 80049c0:	431a      	orrs	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80049c6:	2300      	movs	r3, #0
 80049c8:	60fb      	str	r3, [r7, #12]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	60fb      	str	r3, [r7, #12]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	6812      	ldr	r2, [r2, #0]
 80049da:	6812      	ldr	r2, [r2, #0]
 80049dc:	2140      	movs	r1, #64	; 0x40
 80049de:	438a      	bics	r2, r1
 80049e0:	601a      	str	r2, [r3, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	2380      	movs	r3, #128	; 0x80
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	4013      	ands	r3, r2
 80049ec:	d00c      	beq.n	8004a08 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f2:	2208      	movs	r2, #8
 80049f4:	431a      	orrs	r2, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80049fa:	2300      	movs	r3, #0
 80049fc:	60bb      	str	r3, [r7, #8]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	60bb      	str	r3, [r7, #8]
 8004a06:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d04d      	beq.n	8004aac <HAL_SPI_IRQHandler+0x1c8>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	6812      	ldr	r2, [r2, #0]
 8004a18:	6852      	ldr	r2, [r2, #4]
 8004a1a:	21e0      	movs	r1, #224	; 0xe0
 8004a1c:	438a      	bics	r2, r1
 8004a1e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2251      	movs	r2, #81	; 0x51
 8004a24:	2101      	movs	r1, #1
 8004a26:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	d103      	bne.n	8004a38 <HAL_SPI_IRQHandler+0x154>
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	2201      	movs	r2, #1
 8004a34:	4013      	ands	r3, r2
 8004a36:	d032      	beq.n	8004a9e <HAL_SPI_IRQHandler+0x1ba>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	6812      	ldr	r2, [r2, #0]
 8004a40:	6852      	ldr	r2, [r2, #4]
 8004a42:	2103      	movs	r1, #3
 8004a44:	438a      	bics	r2, r1
 8004a46:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d010      	beq.n	8004a72 <HAL_SPI_IRQHandler+0x18e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a54:	4a17      	ldr	r2, [pc, #92]	; (8004ab4 <HAL_SPI_IRQHandler+0x1d0>)
 8004a56:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a5c:	0018      	movs	r0, r3
 8004a5e:	f7fd fdc5 	bl	80025ec <HAL_DMA_Abort_IT>
 8004a62:	1e03      	subs	r3, r0, #0
 8004a64:	d005      	beq.n	8004a72 <HAL_SPI_IRQHandler+0x18e>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a6a:	2240      	movs	r2, #64	; 0x40
 8004a6c:	431a      	orrs	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d016      	beq.n	8004aa8 <HAL_SPI_IRQHandler+0x1c4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a7e:	4a0d      	ldr	r2, [pc, #52]	; (8004ab4 <HAL_SPI_IRQHandler+0x1d0>)
 8004a80:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a86:	0018      	movs	r0, r3
 8004a88:	f7fd fdb0 	bl	80025ec <HAL_DMA_Abort_IT>
 8004a8c:	1e03      	subs	r3, r0, #0
 8004a8e:	d00b      	beq.n	8004aa8 <HAL_SPI_IRQHandler+0x1c4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a94:	2240      	movs	r2, #64	; 0x40
 8004a96:	431a      	orrs	r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004a9c:	e004      	b.n	8004aa8 <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	0018      	movs	r0, r3
 8004aa2:	f000 f809 	bl	8004ab8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004aa6:	e000      	b.n	8004aaa <HAL_SPI_IRQHandler+0x1c6>
        if (hspi->hdmatx != NULL)
 8004aa8:	46c0      	nop			; (mov r8, r8)
    return;
 8004aaa:	46c0      	nop			; (mov r8, r8)
 8004aac:	46c0      	nop			; (mov r8, r8)
  }
}
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	b008      	add	sp, #32
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	08004ac9 	.word	0x08004ac9

08004ab8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004ac0:	46c0      	nop			; (mov r8, r8)
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	b002      	add	sp, #8
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	0018      	movs	r0, r3
 8004ae6:	f7ff ffe7 	bl	8004ab8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004aea:	46c0      	nop			; (mov r8, r8)
 8004aec:	46bd      	mov	sp, r7
 8004aee:	b004      	add	sp, #16
 8004af0:	bd80      	pop	{r7, pc}
	...

08004af4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	603b      	str	r3, [r7, #0]
 8004b00:	1dfb      	adds	r3, r7, #7
 8004b02:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b04:	e050      	b.n	8004ba8 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	3301      	adds	r3, #1
 8004b0a:	d04d      	beq.n	8004ba8 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004b0c:	f7fd fbf2 	bl	80022f4 <HAL_GetTick>
 8004b10:	0002      	movs	r2, r0
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	1ad2      	subs	r2, r2, r3
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d202      	bcs.n	8004b22 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d142      	bne.n	8004ba8 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	6812      	ldr	r2, [r2, #0]
 8004b2a:	6852      	ldr	r2, [r2, #4]
 8004b2c:	21e0      	movs	r1, #224	; 0xe0
 8004b2e:	438a      	bics	r2, r1
 8004b30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	685a      	ldr	r2, [r3, #4]
 8004b36:	2382      	movs	r3, #130	; 0x82
 8004b38:	005b      	lsls	r3, r3, #1
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d113      	bne.n	8004b66 <SPI_WaitFlagStateUntilTimeout+0x72>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	689a      	ldr	r2, [r3, #8]
 8004b42:	2380      	movs	r3, #128	; 0x80
 8004b44:	021b      	lsls	r3, r3, #8
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d005      	beq.n	8004b56 <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	689a      	ldr	r2, [r3, #8]
 8004b4e:	2380      	movs	r3, #128	; 0x80
 8004b50:	00db      	lsls	r3, r3, #3
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d107      	bne.n	8004b66 <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	6812      	ldr	r2, [r2, #0]
 8004b5e:	6812      	ldr	r2, [r2, #0]
 8004b60:	2140      	movs	r1, #64	; 0x40
 8004b62:	438a      	bics	r2, r1
 8004b64:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b6a:	2380      	movs	r3, #128	; 0x80
 8004b6c:	019b      	lsls	r3, r3, #6
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d110      	bne.n	8004b94 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	6812      	ldr	r2, [r2, #0]
 8004b7a:	6812      	ldr	r2, [r2, #0]
 8004b7c:	4914      	ldr	r1, [pc, #80]	; (8004bd0 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 8004b7e:	400a      	ands	r2, r1
 8004b80:	601a      	str	r2, [r3, #0]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	6812      	ldr	r2, [r2, #0]
 8004b8a:	6812      	ldr	r2, [r2, #0]
 8004b8c:	2180      	movs	r1, #128	; 0x80
 8004b8e:	0189      	lsls	r1, r1, #6
 8004b90:	430a      	orrs	r2, r1
 8004b92:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2251      	movs	r2, #81	; 0x51
 8004b98:	2101      	movs	r1, #1
 8004b9a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2250      	movs	r2, #80	; 0x50
 8004ba0:	2100      	movs	r1, #0
 8004ba2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e00f      	b.n	8004bc8 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	68ba      	ldr	r2, [r7, #8]
 8004bb0:	401a      	ands	r2, r3
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	425a      	negs	r2, r3
 8004bb8:	4153      	adcs	r3, r2
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	001a      	movs	r2, r3
 8004bbe:	1dfb      	adds	r3, r7, #7
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d19f      	bne.n	8004b06 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	0018      	movs	r0, r3
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	b004      	add	sp, #16
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	ffffdfff 	.word	0xffffdfff

08004bd4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b086      	sub	sp, #24
 8004bd8:	af02      	add	r7, sp, #8
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	685a      	ldr	r2, [r3, #4]
 8004be4:	2382      	movs	r3, #130	; 0x82
 8004be6:	005b      	lsls	r3, r3, #1
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d112      	bne.n	8004c12 <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004bec:	68ba      	ldr	r2, [r7, #8]
 8004bee:	68f8      	ldr	r0, [r7, #12]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	9300      	str	r3, [sp, #0]
 8004bf4:	0013      	movs	r3, r2
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	2180      	movs	r1, #128	; 0x80
 8004bfa:	f7ff ff7b 	bl	8004af4 <SPI_WaitFlagStateUntilTimeout>
 8004bfe:	1e03      	subs	r3, r0, #0
 8004c00:	d020      	beq.n	8004c44 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c06:	2220      	movs	r2, #32
 8004c08:	431a      	orrs	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e019      	b.n	8004c46 <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2251      	movs	r2, #81	; 0x51
 8004c16:	5c9b      	ldrb	r3, [r3, r2]
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b05      	cmp	r3, #5
 8004c1c:	d112      	bne.n	8004c44 <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004c1e:	68ba      	ldr	r2, [r7, #8]
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	0013      	movs	r3, r2
 8004c28:	2200      	movs	r2, #0
 8004c2a:	2101      	movs	r1, #1
 8004c2c:	f7ff ff62 	bl	8004af4 <SPI_WaitFlagStateUntilTimeout>
 8004c30:	1e03      	subs	r3, r0, #0
 8004c32:	d007      	beq.n	8004c44 <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c38:	2220      	movs	r2, #32
 8004c3a:	431a      	orrs	r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e000      	b.n	8004c46 <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	0018      	movs	r0, r3
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	b004      	add	sp, #16
 8004c4c:	bd80      	pop	{r7, pc}
	...

08004c50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d101      	bne.n	8004c62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e044      	b.n	8004cec <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d107      	bne.n	8004c7a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2270      	movs	r2, #112	; 0x70
 8004c6e:	2100      	movs	r1, #0
 8004c70:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	0018      	movs	r0, r3
 8004c76:	f005 f90d 	bl	8009e94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2224      	movs	r2, #36	; 0x24
 8004c7e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	6812      	ldr	r2, [r2, #0]
 8004c88:	6812      	ldr	r2, [r2, #0]
 8004c8a:	2101      	movs	r1, #1
 8004c8c:	438a      	bics	r2, r1
 8004c8e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	0018      	movs	r0, r3
 8004c94:	f000 fa0c 	bl	80050b0 <UART_SetConfig>
 8004c98:	0003      	movs	r3, r0
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d101      	bne.n	8004ca2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e024      	b.n	8004cec <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d003      	beq.n	8004cb2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	0018      	movs	r0, r3
 8004cae:	f000 fd3b 	bl	8005728 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	6812      	ldr	r2, [r2, #0]
 8004cba:	6852      	ldr	r2, [r2, #4]
 8004cbc:	490d      	ldr	r1, [pc, #52]	; (8004cf4 <HAL_UART_Init+0xa4>)
 8004cbe:	400a      	ands	r2, r1
 8004cc0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	6812      	ldr	r2, [r2, #0]
 8004cca:	6892      	ldr	r2, [r2, #8]
 8004ccc:	212a      	movs	r1, #42	; 0x2a
 8004cce:	438a      	bics	r2, r1
 8004cd0:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	6812      	ldr	r2, [r2, #0]
 8004cda:	6812      	ldr	r2, [r2, #0]
 8004cdc:	2101      	movs	r1, #1
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	0018      	movs	r0, r3
 8004ce6:	f000 fdcb 	bl	8005880 <UART_CheckIdleState>
 8004cea:	0003      	movs	r3, r0
}
 8004cec:	0018      	movs	r0, r3
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	b002      	add	sp, #8
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	ffffb7ff 	.word	0xffffb7ff

08004cf8 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b08a      	sub	sp, #40	; 0x28
 8004cfc:	af02      	add	r7, sp, #8
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	603b      	str	r3, [r7, #0]
 8004d04:	1dbb      	adds	r3, r7, #6
 8004d06:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d0c:	2b20      	cmp	r3, #32
 8004d0e:	d000      	beq.n	8004d12 <HAL_UART_Transmit+0x1a>
 8004d10:	e093      	b.n	8004e3a <HAL_UART_Transmit+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d003      	beq.n	8004d20 <HAL_UART_Transmit+0x28>
 8004d18:	1dbb      	adds	r3, r7, #6
 8004d1a:	881b      	ldrh	r3, [r3, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d101      	bne.n	8004d24 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e08b      	b.n	8004e3c <HAL_UART_Transmit+0x144>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	689a      	ldr	r2, [r3, #8]
 8004d28:	2380      	movs	r3, #128	; 0x80
 8004d2a:	015b      	lsls	r3, r3, #5
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d109      	bne.n	8004d44 <HAL_UART_Transmit+0x4c>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d105      	bne.n	8004d44 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1) != 0)
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	d001      	beq.n	8004d44 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e07b      	b.n	8004e3c <HAL_UART_Transmit+0x144>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2270      	movs	r2, #112	; 0x70
 8004d48:	5c9b      	ldrb	r3, [r3, r2]
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d101      	bne.n	8004d52 <HAL_UART_Transmit+0x5a>
 8004d4e:	2302      	movs	r3, #2
 8004d50:	e074      	b.n	8004e3c <HAL_UART_Transmit+0x144>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2270      	movs	r2, #112	; 0x70
 8004d56:	2101      	movs	r1, #1
 8004d58:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2221      	movs	r2, #33	; 0x21
 8004d64:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004d66:	f7fd fac5 	bl	80022f4 <HAL_GetTick>
 8004d6a:	0003      	movs	r3, r0
 8004d6c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	1dba      	adds	r2, r7, #6
 8004d72:	2150      	movs	r1, #80	; 0x50
 8004d74:	8812      	ldrh	r2, [r2, #0]
 8004d76:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	1dba      	adds	r2, r7, #6
 8004d7c:	2152      	movs	r1, #82	; 0x52
 8004d7e:	8812      	ldrh	r2, [r2, #0]
 8004d80:	525a      	strh	r2, [r3, r1]

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	689a      	ldr	r2, [r3, #8]
 8004d86:	2380      	movs	r3, #128	; 0x80
 8004d88:	015b      	lsls	r3, r3, #5
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d108      	bne.n	8004da0 <HAL_UART_Transmit+0xa8>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d104      	bne.n	8004da0 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8004d96:	2300      	movs	r3, #0
 8004d98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	61bb      	str	r3, [r7, #24]
 8004d9e:	e003      	b.n	8004da8 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004da4:	2300      	movs	r3, #0
 8004da6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004da8:	e02b      	b.n	8004e02 <HAL_UART_Transmit+0x10a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	68f8      	ldr	r0, [r7, #12]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	9300      	str	r3, [sp, #0]
 8004db2:	0013      	movs	r3, r2
 8004db4:	2200      	movs	r2, #0
 8004db6:	2180      	movs	r1, #128	; 0x80
 8004db8:	f000 fda8 	bl	800590c <UART_WaitOnFlagUntilTimeout>
 8004dbc:	1e03      	subs	r3, r0, #0
 8004dbe:	d001      	beq.n	8004dc4 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e03b      	b.n	8004e3c <HAL_UART_Transmit+0x144>
      }
      if (pdata8bits == NULL)
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10a      	bne.n	8004de0 <HAL_UART_Transmit+0xe8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	69ba      	ldr	r2, [r7, #24]
 8004dd0:	8812      	ldrh	r2, [r2, #0]
 8004dd2:	05d2      	lsls	r2, r2, #23
 8004dd4:	0dd2      	lsrs	r2, r2, #23
 8004dd6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	3302      	adds	r3, #2
 8004ddc:	61bb      	str	r3, [r7, #24]
 8004dde:	e007      	b.n	8004df0 <HAL_UART_Transmit+0xf8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	69fa      	ldr	r2, [r7, #28]
 8004de6:	7812      	ldrb	r2, [r2, #0]
 8004de8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	3301      	adds	r3, #1
 8004dee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2252      	movs	r2, #82	; 0x52
 8004df4:	5a9b      	ldrh	r3, [r3, r2]
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	b299      	uxth	r1, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2252      	movs	r2, #82	; 0x52
 8004e00:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2252      	movs	r2, #82	; 0x52
 8004e06:	5a9b      	ldrh	r3, [r3, r2]
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1cd      	bne.n	8004daa <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	9300      	str	r3, [sp, #0]
 8004e16:	0013      	movs	r3, r2
 8004e18:	2200      	movs	r2, #0
 8004e1a:	2140      	movs	r1, #64	; 0x40
 8004e1c:	f000 fd76 	bl	800590c <UART_WaitOnFlagUntilTimeout>
 8004e20:	1e03      	subs	r3, r0, #0
 8004e22:	d001      	beq.n	8004e28 <HAL_UART_Transmit+0x130>
    {
      return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e009      	b.n	8004e3c <HAL_UART_Transmit+0x144>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2270      	movs	r2, #112	; 0x70
 8004e32:	2100      	movs	r1, #0
 8004e34:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004e36:	2300      	movs	r3, #0
 8004e38:	e000      	b.n	8004e3c <HAL_UART_Transmit+0x144>
  }
  else
  {
    return HAL_BUSY;
 8004e3a:	2302      	movs	r3, #2
  }
}
 8004e3c:	0018      	movs	r0, r3
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	b008      	add	sp, #32
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b088      	sub	sp, #32
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	69db      	ldr	r3, [r3, #28]
 8004e52:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	220f      	movs	r2, #15
 8004e68:	4013      	ands	r3, r2
 8004e6a:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d112      	bne.n	8004e98 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	2220      	movs	r2, #32
 8004e76:	4013      	ands	r3, r2
 8004e78:	d00e      	beq.n	8004e98 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	2220      	movs	r2, #32
 8004e7e:	4013      	ands	r3, r2
 8004e80:	d00a      	beq.n	8004e98 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d100      	bne.n	8004e8c <HAL_UART_IRQHandler+0x48>
 8004e8a:	e0f6      	b.n	800507a <HAL_UART_IRQHandler+0x236>
      {
        huart->RxISR(huart);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	0010      	movs	r0, r2
 8004e94:	4798      	blx	r3
      }
      return;
 8004e96:	e0f0      	b.n	800507a <HAL_UART_IRQHandler+0x236>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d100      	bne.n	8004ea0 <HAL_UART_IRQHandler+0x5c>
 8004e9e:	e0b8      	b.n	8005012 <HAL_UART_IRQHandler+0x1ce>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	d105      	bne.n	8004eb4 <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8004ea8:	69ba      	ldr	r2, [r7, #24]
 8004eaa:	2390      	movs	r3, #144	; 0x90
 8004eac:	005b      	lsls	r3, r3, #1
 8004eae:	4013      	ands	r3, r2
 8004eb0:	d100      	bne.n	8004eb4 <HAL_UART_IRQHandler+0x70>
 8004eb2:	e0ae      	b.n	8005012 <HAL_UART_IRQHandler+0x1ce>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	4013      	ands	r3, r2
 8004eba:	d00e      	beq.n	8004eda <HAL_UART_IRQHandler+0x96>
 8004ebc:	69ba      	ldr	r2, [r7, #24]
 8004ebe:	2380      	movs	r3, #128	; 0x80
 8004ec0:	005b      	lsls	r3, r3, #1
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	d009      	beq.n	8004eda <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	431a      	orrs	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	2202      	movs	r2, #2
 8004ede:	4013      	ands	r3, r2
 8004ee0:	d00d      	beq.n	8004efe <HAL_UART_IRQHandler+0xba>
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	d009      	beq.n	8004efe <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2202      	movs	r2, #2
 8004ef0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ef6:	2204      	movs	r2, #4
 8004ef8:	431a      	orrs	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	2204      	movs	r2, #4
 8004f02:	4013      	ands	r3, r2
 8004f04:	d00d      	beq.n	8004f22 <HAL_UART_IRQHandler+0xde>
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	d009      	beq.n	8004f22 <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2204      	movs	r2, #4
 8004f14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f1a:	2202      	movs	r2, #2
 8004f1c:	431a      	orrs	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	2208      	movs	r2, #8
 8004f26:	4013      	ands	r3, r2
 8004f28:	d011      	beq.n	8004f4e <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	2220      	movs	r2, #32
 8004f2e:	4013      	ands	r3, r2
 8004f30:	d103      	bne.n	8004f3a <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	2201      	movs	r2, #1
 8004f36:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004f38:	d009      	beq.n	8004f4e <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2208      	movs	r2, #8
 8004f40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f46:	2208      	movs	r2, #8
 8004f48:	431a      	orrs	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d100      	bne.n	8004f58 <HAL_UART_IRQHandler+0x114>
 8004f56:	e092      	b.n	800507e <HAL_UART_IRQHandler+0x23a>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	2220      	movs	r2, #32
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	d00c      	beq.n	8004f7a <HAL_UART_IRQHandler+0x136>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	2220      	movs	r2, #32
 8004f64:	4013      	ands	r3, r2
 8004f66:	d008      	beq.n	8004f7a <HAL_UART_IRQHandler+0x136>
      {
        if (huart->RxISR != NULL)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d004      	beq.n	8004f7a <HAL_UART_IRQHandler+0x136>
        {
          huart->RxISR(huart);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	0010      	movs	r0, r2
 8004f78:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f7e:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	2240      	movs	r2, #64	; 0x40
 8004f88:	4013      	ands	r3, r2
 8004f8a:	2b40      	cmp	r3, #64	; 0x40
 8004f8c:	d003      	beq.n	8004f96 <HAL_UART_IRQHandler+0x152>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2208      	movs	r2, #8
 8004f92:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f94:	d033      	beq.n	8004ffe <HAL_UART_IRQHandler+0x1ba>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	0018      	movs	r0, r3
 8004f9a:	f000 fd01 	bl	80059a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	2240      	movs	r2, #64	; 0x40
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	2b40      	cmp	r3, #64	; 0x40
 8004faa:	d123      	bne.n	8004ff4 <HAL_UART_IRQHandler+0x1b0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	6812      	ldr	r2, [r2, #0]
 8004fb4:	6892      	ldr	r2, [r2, #8]
 8004fb6:	2140      	movs	r1, #64	; 0x40
 8004fb8:	438a      	bics	r2, r1
 8004fba:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d012      	beq.n	8004fea <HAL_UART_IRQHandler+0x1a6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fc8:	4a30      	ldr	r2, [pc, #192]	; (800508c <HAL_UART_IRQHandler+0x248>)
 8004fca:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fd0:	0018      	movs	r0, r3
 8004fd2:	f7fd fb0b 	bl	80025ec <HAL_DMA_Abort_IT>
 8004fd6:	1e03      	subs	r3, r0, #0
 8004fd8:	d019      	beq.n	800500e <HAL_UART_IRQHandler+0x1ca>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fe4:	0018      	movs	r0, r3
 8004fe6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fe8:	e011      	b.n	800500e <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	0018      	movs	r0, r3
 8004fee:	f000 f857 	bl	80050a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ff2:	e00c      	b.n	800500e <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	0018      	movs	r0, r3
 8004ff8:	f000 f852 	bl	80050a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ffc:	e007      	b.n	800500e <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	0018      	movs	r0, r3
 8005002:	f000 f84d 	bl	80050a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800500c:	e037      	b.n	800507e <HAL_UART_IRQHandler+0x23a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800500e:	46c0      	nop			; (mov r8, r8)
    return;
 8005010:	e035      	b.n	800507e <HAL_UART_IRQHandler+0x23a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005012:	69fa      	ldr	r2, [r7, #28]
 8005014:	2380      	movs	r3, #128	; 0x80
 8005016:	035b      	lsls	r3, r3, #13
 8005018:	4013      	ands	r3, r2
 800501a:	d00e      	beq.n	800503a <HAL_UART_IRQHandler+0x1f6>
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	2380      	movs	r3, #128	; 0x80
 8005020:	03db      	lsls	r3, r3, #15
 8005022:	4013      	ands	r3, r2
 8005024:	d009      	beq.n	800503a <HAL_UART_IRQHandler+0x1f6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2280      	movs	r2, #128	; 0x80
 800502c:	0352      	lsls	r2, r2, #13
 800502e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	0018      	movs	r0, r3
 8005034:	f000 fd05 	bl	8005a42 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005038:	e024      	b.n	8005084 <HAL_UART_IRQHandler+0x240>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	2280      	movs	r2, #128	; 0x80
 800503e:	4013      	ands	r3, r2
 8005040:	d00d      	beq.n	800505e <HAL_UART_IRQHandler+0x21a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	2280      	movs	r2, #128	; 0x80
 8005046:	4013      	ands	r3, r2
 8005048:	d009      	beq.n	800505e <HAL_UART_IRQHandler+0x21a>
  {
    if (huart->TxISR != NULL)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800504e:	2b00      	cmp	r3, #0
 8005050:	d017      	beq.n	8005082 <HAL_UART_IRQHandler+0x23e>
    {
      huart->TxISR(huart);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	0010      	movs	r0, r2
 800505a:	4798      	blx	r3
    }
    return;
 800505c:	e011      	b.n	8005082 <HAL_UART_IRQHandler+0x23e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	2240      	movs	r2, #64	; 0x40
 8005062:	4013      	ands	r3, r2
 8005064:	d00e      	beq.n	8005084 <HAL_UART_IRQHandler+0x240>
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	2240      	movs	r2, #64	; 0x40
 800506a:	4013      	ands	r3, r2
 800506c:	d00a      	beq.n	8005084 <HAL_UART_IRQHandler+0x240>
  {
    UART_EndTransmit_IT(huart);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	0018      	movs	r0, r3
 8005072:	f000 fccc 	bl	8005a0e <UART_EndTransmit_IT>
    return;
 8005076:	46c0      	nop			; (mov r8, r8)
 8005078:	e004      	b.n	8005084 <HAL_UART_IRQHandler+0x240>
      return;
 800507a:	46c0      	nop			; (mov r8, r8)
 800507c:	e002      	b.n	8005084 <HAL_UART_IRQHandler+0x240>
    return;
 800507e:	46c0      	nop			; (mov r8, r8)
 8005080:	e000      	b.n	8005084 <HAL_UART_IRQHandler+0x240>
    return;
 8005082:	46c0      	nop			; (mov r8, r8)
  }

}
 8005084:	46bd      	mov	sp, r7
 8005086:	b008      	add	sp, #32
 8005088:	bd80      	pop	{r7, pc}
 800508a:	46c0      	nop			; (mov r8, r8)
 800508c:	080059e1 	.word	0x080059e1

08005090 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005098:	46c0      	nop			; (mov r8, r8)
 800509a:	46bd      	mov	sp, r7
 800509c:	b002      	add	sp, #8
 800509e:	bd80      	pop	{r7, pc}

080050a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80050a8:	46c0      	nop			; (mov r8, r8)
 80050aa:	46bd      	mov	sp, r7
 80050ac:	b002      	add	sp, #8
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050b0:	b5b0      	push	{r4, r5, r7, lr}
 80050b2:	b08e      	sub	sp, #56	; 0x38
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80050b8:	231b      	movs	r3, #27
 80050ba:	2218      	movs	r2, #24
 80050bc:	4694      	mov	ip, r2
 80050be:	44bc      	add	ip, r7
 80050c0:	4463      	add	r3, ip
 80050c2:	2210      	movs	r2, #16
 80050c4:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 80050c6:	2300      	movs	r3, #0
 80050c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 80050ca:	2313      	movs	r3, #19
 80050cc:	2218      	movs	r2, #24
 80050ce:	4694      	mov	ip, r2
 80050d0:	44bc      	add	ip, r7
 80050d2:	4463      	add	r3, ip
 80050d4:	2200      	movs	r2, #0
 80050d6:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80050d8:	2300      	movs	r3, #0
 80050da:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	689a      	ldr	r2, [r3, #8]
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	431a      	orrs	r2, r3
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	695b      	ldr	r3, [r3, #20]
 80050ea:	431a      	orrs	r2, r3
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	69db      	ldr	r3, [r3, #28]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	69fa      	ldr	r2, [r7, #28]
 80050fa:	6812      	ldr	r2, [r2, #0]
 80050fc:	6812      	ldr	r2, [r2, #0]
 80050fe:	49c8      	ldr	r1, [pc, #800]	; (8005420 <UART_SetConfig+0x370>)
 8005100:	4011      	ands	r1, r2
 8005102:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005104:	430a      	orrs	r2, r1
 8005106:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	69fa      	ldr	r2, [r7, #28]
 800510e:	6812      	ldr	r2, [r2, #0]
 8005110:	6852      	ldr	r2, [r2, #4]
 8005112:	49c4      	ldr	r1, [pc, #784]	; (8005424 <UART_SetConfig+0x374>)
 8005114:	4011      	ands	r1, r2
 8005116:	69fa      	ldr	r2, [r7, #28]
 8005118:	68d2      	ldr	r2, [r2, #12]
 800511a:	430a      	orrs	r2, r1
 800511c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4abf      	ldr	r2, [pc, #764]	; (8005428 <UART_SetConfig+0x378>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d004      	beq.n	8005138 <UART_SetConfig+0x88>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005134:	4313      	orrs	r3, r2
 8005136:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	69fa      	ldr	r2, [r7, #28]
 800513e:	6812      	ldr	r2, [r2, #0]
 8005140:	6892      	ldr	r2, [r2, #8]
 8005142:	49ba      	ldr	r1, [pc, #744]	; (800542c <UART_SetConfig+0x37c>)
 8005144:	4011      	ands	r1, r2
 8005146:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005148:	430a      	orrs	r2, r1
 800514a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4ab7      	ldr	r2, [pc, #732]	; (8005430 <UART_SetConfig+0x380>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d134      	bne.n	80051c0 <UART_SetConfig+0x110>
 8005156:	4bb7      	ldr	r3, [pc, #732]	; (8005434 <UART_SetConfig+0x384>)
 8005158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800515a:	2203      	movs	r2, #3
 800515c:	4013      	ands	r3, r2
 800515e:	2b01      	cmp	r3, #1
 8005160:	d015      	beq.n	800518e <UART_SetConfig+0xde>
 8005162:	d304      	bcc.n	800516e <UART_SetConfig+0xbe>
 8005164:	2b02      	cmp	r3, #2
 8005166:	d00a      	beq.n	800517e <UART_SetConfig+0xce>
 8005168:	2b03      	cmp	r3, #3
 800516a:	d018      	beq.n	800519e <UART_SetConfig+0xee>
 800516c:	e01f      	b.n	80051ae <UART_SetConfig+0xfe>
 800516e:	231b      	movs	r3, #27
 8005170:	2218      	movs	r2, #24
 8005172:	4694      	mov	ip, r2
 8005174:	44bc      	add	ip, r7
 8005176:	4463      	add	r3, ip
 8005178:	2201      	movs	r2, #1
 800517a:	701a      	strb	r2, [r3, #0]
 800517c:	e0c5      	b.n	800530a <UART_SetConfig+0x25a>
 800517e:	231b      	movs	r3, #27
 8005180:	2218      	movs	r2, #24
 8005182:	4694      	mov	ip, r2
 8005184:	44bc      	add	ip, r7
 8005186:	4463      	add	r3, ip
 8005188:	2202      	movs	r2, #2
 800518a:	701a      	strb	r2, [r3, #0]
 800518c:	e0bd      	b.n	800530a <UART_SetConfig+0x25a>
 800518e:	231b      	movs	r3, #27
 8005190:	2218      	movs	r2, #24
 8005192:	4694      	mov	ip, r2
 8005194:	44bc      	add	ip, r7
 8005196:	4463      	add	r3, ip
 8005198:	2204      	movs	r2, #4
 800519a:	701a      	strb	r2, [r3, #0]
 800519c:	e0b5      	b.n	800530a <UART_SetConfig+0x25a>
 800519e:	231b      	movs	r3, #27
 80051a0:	2218      	movs	r2, #24
 80051a2:	4694      	mov	ip, r2
 80051a4:	44bc      	add	ip, r7
 80051a6:	4463      	add	r3, ip
 80051a8:	2208      	movs	r2, #8
 80051aa:	701a      	strb	r2, [r3, #0]
 80051ac:	e0ad      	b.n	800530a <UART_SetConfig+0x25a>
 80051ae:	231b      	movs	r3, #27
 80051b0:	2218      	movs	r2, #24
 80051b2:	4694      	mov	ip, r2
 80051b4:	44bc      	add	ip, r7
 80051b6:	4463      	add	r3, ip
 80051b8:	2210      	movs	r2, #16
 80051ba:	701a      	strb	r2, [r3, #0]
 80051bc:	46c0      	nop			; (mov r8, r8)
 80051be:	e0a4      	b.n	800530a <UART_SetConfig+0x25a>
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a9c      	ldr	r2, [pc, #624]	; (8005438 <UART_SetConfig+0x388>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d137      	bne.n	800523a <UART_SetConfig+0x18a>
 80051ca:	4b9a      	ldr	r3, [pc, #616]	; (8005434 <UART_SetConfig+0x384>)
 80051cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051ce:	220c      	movs	r2, #12
 80051d0:	4013      	ands	r3, r2
 80051d2:	2b04      	cmp	r3, #4
 80051d4:	d018      	beq.n	8005208 <UART_SetConfig+0x158>
 80051d6:	d802      	bhi.n	80051de <UART_SetConfig+0x12e>
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d005      	beq.n	80051e8 <UART_SetConfig+0x138>
 80051dc:	e024      	b.n	8005228 <UART_SetConfig+0x178>
 80051de:	2b08      	cmp	r3, #8
 80051e0:	d00a      	beq.n	80051f8 <UART_SetConfig+0x148>
 80051e2:	2b0c      	cmp	r3, #12
 80051e4:	d018      	beq.n	8005218 <UART_SetConfig+0x168>
 80051e6:	e01f      	b.n	8005228 <UART_SetConfig+0x178>
 80051e8:	231b      	movs	r3, #27
 80051ea:	2218      	movs	r2, #24
 80051ec:	4694      	mov	ip, r2
 80051ee:	44bc      	add	ip, r7
 80051f0:	4463      	add	r3, ip
 80051f2:	2200      	movs	r2, #0
 80051f4:	701a      	strb	r2, [r3, #0]
 80051f6:	e088      	b.n	800530a <UART_SetConfig+0x25a>
 80051f8:	231b      	movs	r3, #27
 80051fa:	2218      	movs	r2, #24
 80051fc:	4694      	mov	ip, r2
 80051fe:	44bc      	add	ip, r7
 8005200:	4463      	add	r3, ip
 8005202:	2202      	movs	r2, #2
 8005204:	701a      	strb	r2, [r3, #0]
 8005206:	e080      	b.n	800530a <UART_SetConfig+0x25a>
 8005208:	231b      	movs	r3, #27
 800520a:	2218      	movs	r2, #24
 800520c:	4694      	mov	ip, r2
 800520e:	44bc      	add	ip, r7
 8005210:	4463      	add	r3, ip
 8005212:	2204      	movs	r2, #4
 8005214:	701a      	strb	r2, [r3, #0]
 8005216:	e078      	b.n	800530a <UART_SetConfig+0x25a>
 8005218:	231b      	movs	r3, #27
 800521a:	2218      	movs	r2, #24
 800521c:	4694      	mov	ip, r2
 800521e:	44bc      	add	ip, r7
 8005220:	4463      	add	r3, ip
 8005222:	2208      	movs	r2, #8
 8005224:	701a      	strb	r2, [r3, #0]
 8005226:	e070      	b.n	800530a <UART_SetConfig+0x25a>
 8005228:	231b      	movs	r3, #27
 800522a:	2218      	movs	r2, #24
 800522c:	4694      	mov	ip, r2
 800522e:	44bc      	add	ip, r7
 8005230:	4463      	add	r3, ip
 8005232:	2210      	movs	r2, #16
 8005234:	701a      	strb	r2, [r3, #0]
 8005236:	46c0      	nop			; (mov r8, r8)
 8005238:	e067      	b.n	800530a <UART_SetConfig+0x25a>
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a7f      	ldr	r2, [pc, #508]	; (800543c <UART_SetConfig+0x38c>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d107      	bne.n	8005254 <UART_SetConfig+0x1a4>
 8005244:	231b      	movs	r3, #27
 8005246:	2218      	movs	r2, #24
 8005248:	4694      	mov	ip, r2
 800524a:	44bc      	add	ip, r7
 800524c:	4463      	add	r3, ip
 800524e:	2200      	movs	r2, #0
 8005250:	701a      	strb	r2, [r3, #0]
 8005252:	e05a      	b.n	800530a <UART_SetConfig+0x25a>
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a79      	ldr	r2, [pc, #484]	; (8005440 <UART_SetConfig+0x390>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d107      	bne.n	800526e <UART_SetConfig+0x1be>
 800525e:	231b      	movs	r3, #27
 8005260:	2218      	movs	r2, #24
 8005262:	4694      	mov	ip, r2
 8005264:	44bc      	add	ip, r7
 8005266:	4463      	add	r3, ip
 8005268:	2200      	movs	r2, #0
 800526a:	701a      	strb	r2, [r3, #0]
 800526c:	e04d      	b.n	800530a <UART_SetConfig+0x25a>
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a6d      	ldr	r2, [pc, #436]	; (8005428 <UART_SetConfig+0x378>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d141      	bne.n	80052fc <UART_SetConfig+0x24c>
 8005278:	4b6e      	ldr	r3, [pc, #440]	; (8005434 <UART_SetConfig+0x384>)
 800527a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800527c:	23c0      	movs	r3, #192	; 0xc0
 800527e:	011b      	lsls	r3, r3, #4
 8005280:	4013      	ands	r3, r2
 8005282:	2280      	movs	r2, #128	; 0x80
 8005284:	00d2      	lsls	r2, r2, #3
 8005286:	4293      	cmp	r3, r2
 8005288:	d01f      	beq.n	80052ca <UART_SetConfig+0x21a>
 800528a:	2280      	movs	r2, #128	; 0x80
 800528c:	00d2      	lsls	r2, r2, #3
 800528e:	4293      	cmp	r3, r2
 8005290:	d802      	bhi.n	8005298 <UART_SetConfig+0x1e8>
 8005292:	2b00      	cmp	r3, #0
 8005294:	d009      	beq.n	80052aa <UART_SetConfig+0x1fa>
 8005296:	e028      	b.n	80052ea <UART_SetConfig+0x23a>
 8005298:	2280      	movs	r2, #128	; 0x80
 800529a:	0112      	lsls	r2, r2, #4
 800529c:	4293      	cmp	r3, r2
 800529e:	d00c      	beq.n	80052ba <UART_SetConfig+0x20a>
 80052a0:	22c0      	movs	r2, #192	; 0xc0
 80052a2:	0112      	lsls	r2, r2, #4
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d018      	beq.n	80052da <UART_SetConfig+0x22a>
 80052a8:	e01f      	b.n	80052ea <UART_SetConfig+0x23a>
 80052aa:	231b      	movs	r3, #27
 80052ac:	2218      	movs	r2, #24
 80052ae:	4694      	mov	ip, r2
 80052b0:	44bc      	add	ip, r7
 80052b2:	4463      	add	r3, ip
 80052b4:	2200      	movs	r2, #0
 80052b6:	701a      	strb	r2, [r3, #0]
 80052b8:	e027      	b.n	800530a <UART_SetConfig+0x25a>
 80052ba:	231b      	movs	r3, #27
 80052bc:	2218      	movs	r2, #24
 80052be:	4694      	mov	ip, r2
 80052c0:	44bc      	add	ip, r7
 80052c2:	4463      	add	r3, ip
 80052c4:	2202      	movs	r2, #2
 80052c6:	701a      	strb	r2, [r3, #0]
 80052c8:	e01f      	b.n	800530a <UART_SetConfig+0x25a>
 80052ca:	231b      	movs	r3, #27
 80052cc:	2218      	movs	r2, #24
 80052ce:	4694      	mov	ip, r2
 80052d0:	44bc      	add	ip, r7
 80052d2:	4463      	add	r3, ip
 80052d4:	2204      	movs	r2, #4
 80052d6:	701a      	strb	r2, [r3, #0]
 80052d8:	e017      	b.n	800530a <UART_SetConfig+0x25a>
 80052da:	231b      	movs	r3, #27
 80052dc:	2218      	movs	r2, #24
 80052de:	4694      	mov	ip, r2
 80052e0:	44bc      	add	ip, r7
 80052e2:	4463      	add	r3, ip
 80052e4:	2208      	movs	r2, #8
 80052e6:	701a      	strb	r2, [r3, #0]
 80052e8:	e00f      	b.n	800530a <UART_SetConfig+0x25a>
 80052ea:	231b      	movs	r3, #27
 80052ec:	2218      	movs	r2, #24
 80052ee:	4694      	mov	ip, r2
 80052f0:	44bc      	add	ip, r7
 80052f2:	4463      	add	r3, ip
 80052f4:	2210      	movs	r2, #16
 80052f6:	701a      	strb	r2, [r3, #0]
 80052f8:	46c0      	nop			; (mov r8, r8)
 80052fa:	e006      	b.n	800530a <UART_SetConfig+0x25a>
 80052fc:	231b      	movs	r3, #27
 80052fe:	2218      	movs	r2, #24
 8005300:	4694      	mov	ip, r2
 8005302:	44bc      	add	ip, r7
 8005304:	4463      	add	r3, ip
 8005306:	2210      	movs	r2, #16
 8005308:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a46      	ldr	r2, [pc, #280]	; (8005428 <UART_SetConfig+0x378>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d000      	beq.n	8005316 <UART_SetConfig+0x266>
 8005314:	e09e      	b.n	8005454 <UART_SetConfig+0x3a4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005316:	231b      	movs	r3, #27
 8005318:	2218      	movs	r2, #24
 800531a:	4694      	mov	ip, r2
 800531c:	44bc      	add	ip, r7
 800531e:	4463      	add	r3, ip
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	2b02      	cmp	r3, #2
 8005324:	d00d      	beq.n	8005342 <UART_SetConfig+0x292>
 8005326:	dc02      	bgt.n	800532e <UART_SetConfig+0x27e>
 8005328:	2b00      	cmp	r3, #0
 800532a:	d005      	beq.n	8005338 <UART_SetConfig+0x288>
 800532c:	e01d      	b.n	800536a <UART_SetConfig+0x2ba>
 800532e:	2b04      	cmp	r3, #4
 8005330:	d012      	beq.n	8005358 <UART_SetConfig+0x2a8>
 8005332:	2b08      	cmp	r3, #8
 8005334:	d015      	beq.n	8005362 <UART_SetConfig+0x2b2>
 8005336:	e018      	b.n	800536a <UART_SetConfig+0x2ba>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8005338:	f7fe f994 	bl	8003664 <HAL_RCC_GetPCLK1Freq>
 800533c:	0003      	movs	r3, r0
 800533e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005340:	e01b      	b.n	800537a <UART_SetConfig+0x2ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005342:	4b3c      	ldr	r3, [pc, #240]	; (8005434 <UART_SetConfig+0x384>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2210      	movs	r2, #16
 8005348:	4013      	ands	r3, r2
 800534a:	d002      	beq.n	8005352 <UART_SetConfig+0x2a2>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 800534c:	4b3d      	ldr	r3, [pc, #244]	; (8005444 <UART_SetConfig+0x394>)
 800534e:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 8005350:	e013      	b.n	800537a <UART_SetConfig+0x2ca>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8005352:	4b3d      	ldr	r3, [pc, #244]	; (8005448 <UART_SetConfig+0x398>)
 8005354:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005356:	e010      	b.n	800537a <UART_SetConfig+0x2ca>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8005358:	f7fe f908 	bl	800356c <HAL_RCC_GetSysClockFreq>
 800535c:	0003      	movs	r3, r0
 800535e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005360:	e00b      	b.n	800537a <UART_SetConfig+0x2ca>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8005362:	2380      	movs	r3, #128	; 0x80
 8005364:	021b      	lsls	r3, r3, #8
 8005366:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005368:	e007      	b.n	800537a <UART_SetConfig+0x2ca>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800536a:	2313      	movs	r3, #19
 800536c:	2218      	movs	r2, #24
 800536e:	4694      	mov	ip, r2
 8005370:	44bc      	add	ip, r7
 8005372:	4463      	add	r3, ip
 8005374:	2201      	movs	r2, #1
 8005376:	701a      	strb	r2, [r3, #0]
        break;
 8005378:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800537a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537c:	2b00      	cmp	r3, #0
 800537e:	d100      	bne.n	8005382 <UART_SetConfig+0x2d2>
 8005380:	e1b1      	b.n	80056e6 <UART_SetConfig+0x636>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	0013      	movs	r3, r2
 8005388:	005b      	lsls	r3, r3, #1
 800538a:	189a      	adds	r2, r3, r2
 800538c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538e:	429a      	cmp	r2, r3
 8005390:	d805      	bhi.n	800539e <UART_SetConfig+0x2ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539a:	429a      	cmp	r2, r3
 800539c:	d207      	bcs.n	80053ae <UART_SetConfig+0x2fe>
      {
        ret = HAL_ERROR;
 800539e:	2313      	movs	r3, #19
 80053a0:	2218      	movs	r2, #24
 80053a2:	4694      	mov	ip, r2
 80053a4:	44bc      	add	ip, r7
 80053a6:	4463      	add	r3, ip
 80053a8:	2201      	movs	r2, #1
 80053aa:	701a      	strb	r2, [r3, #0]
 80053ac:	e19b      	b.n	80056e6 <UART_SetConfig+0x636>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 80053ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b0:	613b      	str	r3, [r7, #16]
 80053b2:	2300      	movs	r3, #0
 80053b4:	617b      	str	r3, [r7, #20]
 80053b6:	6939      	ldr	r1, [r7, #16]
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	000b      	movs	r3, r1
 80053bc:	0e1b      	lsrs	r3, r3, #24
 80053be:	0010      	movs	r0, r2
 80053c0:	0205      	lsls	r5, r0, #8
 80053c2:	431d      	orrs	r5, r3
 80053c4:	000b      	movs	r3, r1
 80053c6:	021c      	lsls	r4, r3, #8
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	085b      	lsrs	r3, r3, #1
 80053ce:	60bb      	str	r3, [r7, #8]
 80053d0:	2300      	movs	r3, #0
 80053d2:	60fb      	str	r3, [r7, #12]
 80053d4:	68b8      	ldr	r0, [r7, #8]
 80053d6:	68f9      	ldr	r1, [r7, #12]
 80053d8:	1900      	adds	r0, r0, r4
 80053da:	4169      	adcs	r1, r5
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	603b      	str	r3, [r7, #0]
 80053e2:	2300      	movs	r3, #0
 80053e4:	607b      	str	r3, [r7, #4]
 80053e6:	683a      	ldr	r2, [r7, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f7fb f85d 	bl	80004a8 <__aeabi_uldivmod>
 80053ee:	0003      	movs	r3, r0
 80053f0:	000c      	movs	r4, r1
 80053f2:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80053f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f6:	4a15      	ldr	r2, [pc, #84]	; (800544c <UART_SetConfig+0x39c>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d908      	bls.n	800540e <UART_SetConfig+0x35e>
 80053fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053fe:	4a14      	ldr	r2, [pc, #80]	; (8005450 <UART_SetConfig+0x3a0>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d804      	bhi.n	800540e <UART_SetConfig+0x35e>
        {
          huart->Instance->BRR = usartdiv;
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800540a:	60da      	str	r2, [r3, #12]
 800540c:	e16b      	b.n	80056e6 <UART_SetConfig+0x636>
        }
        else
        {
          ret = HAL_ERROR;
 800540e:	2313      	movs	r3, #19
 8005410:	2218      	movs	r2, #24
 8005412:	4694      	mov	ip, r2
 8005414:	44bc      	add	ip, r7
 8005416:	4463      	add	r3, ip
 8005418:	2201      	movs	r2, #1
 800541a:	701a      	strb	r2, [r3, #0]
 800541c:	e163      	b.n	80056e6 <UART_SetConfig+0x636>
 800541e:	46c0      	nop			; (mov r8, r8)
 8005420:	efff69f3 	.word	0xefff69f3
 8005424:	ffffcfff 	.word	0xffffcfff
 8005428:	40004800 	.word	0x40004800
 800542c:	fffff4ff 	.word	0xfffff4ff
 8005430:	40013800 	.word	0x40013800
 8005434:	40021000 	.word	0x40021000
 8005438:	40004400 	.word	0x40004400
 800543c:	40004c00 	.word	0x40004c00
 8005440:	40005000 	.word	0x40005000
 8005444:	003d0900 	.word	0x003d0900
 8005448:	00f42400 	.word	0x00f42400
 800544c:	000002ff 	.word	0x000002ff
 8005450:	000fffff 	.word	0x000fffff
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	69da      	ldr	r2, [r3, #28]
 8005458:	2380      	movs	r3, #128	; 0x80
 800545a:	021b      	lsls	r3, r3, #8
 800545c:	429a      	cmp	r2, r3
 800545e:	d000      	beq.n	8005462 <UART_SetConfig+0x3b2>
 8005460:	e0b3      	b.n	80055ca <UART_SetConfig+0x51a>
  {
    switch (clocksource)
 8005462:	231b      	movs	r3, #27
 8005464:	2218      	movs	r2, #24
 8005466:	4694      	mov	ip, r2
 8005468:	44bc      	add	ip, r7
 800546a:	4463      	add	r3, ip
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	2b08      	cmp	r3, #8
 8005470:	d86d      	bhi.n	800554e <UART_SetConfig+0x49e>
 8005472:	009a      	lsls	r2, r3, #2
 8005474:	4ba4      	ldr	r3, [pc, #656]	; (8005708 <UART_SetConfig+0x658>)
 8005476:	18d3      	adds	r3, r2, r3
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800547c:	f7fe f8f2 	bl	8003664 <HAL_RCC_GetPCLK1Freq>
 8005480:	0003      	movs	r3, r0
 8005482:	005a      	lsls	r2, r3, #1
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	085b      	lsrs	r3, r3, #1
 800548a:	18d2      	adds	r2, r2, r3
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	0019      	movs	r1, r3
 8005492:	0010      	movs	r0, r2
 8005494:	f7fa fe54 	bl	8000140 <__udivsi3>
 8005498:	0003      	movs	r3, r0
 800549a:	b29b      	uxth	r3, r3
 800549c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800549e:	e05e      	b.n	800555e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80054a0:	f7fe f8f6 	bl	8003690 <HAL_RCC_GetPCLK2Freq>
 80054a4:	0003      	movs	r3, r0
 80054a6:	005a      	lsls	r2, r3, #1
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	085b      	lsrs	r3, r3, #1
 80054ae:	18d2      	adds	r2, r2, r3
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	0019      	movs	r1, r3
 80054b6:	0010      	movs	r0, r2
 80054b8:	f7fa fe42 	bl	8000140 <__udivsi3>
 80054bc:	0003      	movs	r3, r0
 80054be:	b29b      	uxth	r3, r3
 80054c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80054c2:	e04c      	b.n	800555e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054c4:	4b91      	ldr	r3, [pc, #580]	; (800570c <UART_SetConfig+0x65c>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2210      	movs	r2, #16
 80054ca:	4013      	ands	r3, r2
 80054cc:	d00e      	beq.n	80054ec <UART_SetConfig+0x43c>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	085b      	lsrs	r3, r3, #1
 80054d4:	4a8e      	ldr	r2, [pc, #568]	; (8005710 <UART_SetConfig+0x660>)
 80054d6:	189a      	adds	r2, r3, r2
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	0019      	movs	r1, r3
 80054de:	0010      	movs	r0, r2
 80054e0:	f7fa fe2e 	bl	8000140 <__udivsi3>
 80054e4:	0003      	movs	r3, r0
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 80054ea:	e038      	b.n	800555e <UART_SetConfig+0x4ae>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	085b      	lsrs	r3, r3, #1
 80054f2:	4a88      	ldr	r2, [pc, #544]	; (8005714 <UART_SetConfig+0x664>)
 80054f4:	189a      	adds	r2, r3, r2
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	0019      	movs	r1, r3
 80054fc:	0010      	movs	r0, r2
 80054fe:	f7fa fe1f 	bl	8000140 <__udivsi3>
 8005502:	0003      	movs	r3, r0
 8005504:	b29b      	uxth	r3, r3
 8005506:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005508:	e029      	b.n	800555e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800550a:	f7fe f82f 	bl	800356c <HAL_RCC_GetSysClockFreq>
 800550e:	0003      	movs	r3, r0
 8005510:	005a      	lsls	r2, r3, #1
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	085b      	lsrs	r3, r3, #1
 8005518:	18d2      	adds	r2, r2, r3
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	0019      	movs	r1, r3
 8005520:	0010      	movs	r0, r2
 8005522:	f7fa fe0d 	bl	8000140 <__udivsi3>
 8005526:	0003      	movs	r3, r0
 8005528:	b29b      	uxth	r3, r3
 800552a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800552c:	e017      	b.n	800555e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	085b      	lsrs	r3, r3, #1
 8005534:	2280      	movs	r2, #128	; 0x80
 8005536:	0252      	lsls	r2, r2, #9
 8005538:	189a      	adds	r2, r3, r2
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	0019      	movs	r1, r3
 8005540:	0010      	movs	r0, r2
 8005542:	f7fa fdfd 	bl	8000140 <__udivsi3>
 8005546:	0003      	movs	r3, r0
 8005548:	b29b      	uxth	r3, r3
 800554a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800554c:	e007      	b.n	800555e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800554e:	2313      	movs	r3, #19
 8005550:	2218      	movs	r2, #24
 8005552:	4694      	mov	ip, r2
 8005554:	44bc      	add	ip, r7
 8005556:	4463      	add	r3, ip
 8005558:	2201      	movs	r2, #1
 800555a:	701a      	strb	r2, [r3, #0]
        break;
 800555c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800555e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005560:	2b0f      	cmp	r3, #15
 8005562:	d92a      	bls.n	80055ba <UART_SetConfig+0x50a>
 8005564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005566:	4a6c      	ldr	r2, [pc, #432]	; (8005718 <UART_SetConfig+0x668>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d826      	bhi.n	80055ba <UART_SetConfig+0x50a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800556c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800556e:	b29a      	uxth	r2, r3
 8005570:	230a      	movs	r3, #10
 8005572:	2118      	movs	r1, #24
 8005574:	468c      	mov	ip, r1
 8005576:	44bc      	add	ip, r7
 8005578:	4463      	add	r3, ip
 800557a:	210f      	movs	r1, #15
 800557c:	438a      	bics	r2, r1
 800557e:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005582:	085b      	lsrs	r3, r3, #1
 8005584:	b29b      	uxth	r3, r3
 8005586:	2207      	movs	r2, #7
 8005588:	4013      	ands	r3, r2
 800558a:	b299      	uxth	r1, r3
 800558c:	230a      	movs	r3, #10
 800558e:	2218      	movs	r2, #24
 8005590:	4694      	mov	ip, r2
 8005592:	44bc      	add	ip, r7
 8005594:	4463      	add	r3, ip
 8005596:	220a      	movs	r2, #10
 8005598:	2018      	movs	r0, #24
 800559a:	4684      	mov	ip, r0
 800559c:	44bc      	add	ip, r7
 800559e:	4462      	add	r2, ip
 80055a0:	8812      	ldrh	r2, [r2, #0]
 80055a2:	430a      	orrs	r2, r1
 80055a4:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	220a      	movs	r2, #10
 80055ac:	2118      	movs	r1, #24
 80055ae:	468c      	mov	ip, r1
 80055b0:	44bc      	add	ip, r7
 80055b2:	4462      	add	r2, ip
 80055b4:	8812      	ldrh	r2, [r2, #0]
 80055b6:	60da      	str	r2, [r3, #12]
 80055b8:	e095      	b.n	80056e6 <UART_SetConfig+0x636>
    }
    else
    {
      ret = HAL_ERROR;
 80055ba:	2313      	movs	r3, #19
 80055bc:	2218      	movs	r2, #24
 80055be:	4694      	mov	ip, r2
 80055c0:	44bc      	add	ip, r7
 80055c2:	4463      	add	r3, ip
 80055c4:	2201      	movs	r2, #1
 80055c6:	701a      	strb	r2, [r3, #0]
 80055c8:	e08d      	b.n	80056e6 <UART_SetConfig+0x636>
    }
  }
  else
  {
    switch (clocksource)
 80055ca:	231b      	movs	r3, #27
 80055cc:	2218      	movs	r2, #24
 80055ce:	4694      	mov	ip, r2
 80055d0:	44bc      	add	ip, r7
 80055d2:	4463      	add	r3, ip
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	2b08      	cmp	r3, #8
 80055d8:	d86a      	bhi.n	80056b0 <UART_SetConfig+0x600>
 80055da:	009a      	lsls	r2, r3, #2
 80055dc:	4b4f      	ldr	r3, [pc, #316]	; (800571c <UART_SetConfig+0x66c>)
 80055de:	18d3      	adds	r3, r2, r3
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80055e4:	f7fe f83e 	bl	8003664 <HAL_RCC_GetPCLK1Freq>
 80055e8:	0002      	movs	r2, r0
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	085b      	lsrs	r3, r3, #1
 80055f0:	18d2      	adds	r2, r2, r3
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	0019      	movs	r1, r3
 80055f8:	0010      	movs	r0, r2
 80055fa:	f7fa fda1 	bl	8000140 <__udivsi3>
 80055fe:	0003      	movs	r3, r0
 8005600:	b29b      	uxth	r3, r3
 8005602:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005604:	e05c      	b.n	80056c0 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005606:	f7fe f843 	bl	8003690 <HAL_RCC_GetPCLK2Freq>
 800560a:	0002      	movs	r2, r0
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	085b      	lsrs	r3, r3, #1
 8005612:	18d2      	adds	r2, r2, r3
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	0019      	movs	r1, r3
 800561a:	0010      	movs	r0, r2
 800561c:	f7fa fd90 	bl	8000140 <__udivsi3>
 8005620:	0003      	movs	r3, r0
 8005622:	b29b      	uxth	r3, r3
 8005624:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005626:	e04b      	b.n	80056c0 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005628:	4b38      	ldr	r3, [pc, #224]	; (800570c <UART_SetConfig+0x65c>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2210      	movs	r2, #16
 800562e:	4013      	ands	r3, r2
 8005630:	d00e      	beq.n	8005650 <UART_SetConfig+0x5a0>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	085b      	lsrs	r3, r3, #1
 8005638:	4a39      	ldr	r2, [pc, #228]	; (8005720 <UART_SetConfig+0x670>)
 800563a:	189a      	adds	r2, r3, r2
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	0019      	movs	r1, r3
 8005642:	0010      	movs	r0, r2
 8005644:	f7fa fd7c 	bl	8000140 <__udivsi3>
 8005648:	0003      	movs	r3, r0
 800564a:	b29b      	uxth	r3, r3
 800564c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 800564e:	e037      	b.n	80056c0 <UART_SetConfig+0x610>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	085b      	lsrs	r3, r3, #1
 8005656:	4a33      	ldr	r2, [pc, #204]	; (8005724 <UART_SetConfig+0x674>)
 8005658:	189a      	adds	r2, r3, r2
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	0019      	movs	r1, r3
 8005660:	0010      	movs	r0, r2
 8005662:	f7fa fd6d 	bl	8000140 <__udivsi3>
 8005666:	0003      	movs	r3, r0
 8005668:	b29b      	uxth	r3, r3
 800566a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800566c:	e028      	b.n	80056c0 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800566e:	f7fd ff7d 	bl	800356c <HAL_RCC_GetSysClockFreq>
 8005672:	0002      	movs	r2, r0
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	085b      	lsrs	r3, r3, #1
 800567a:	18d2      	adds	r2, r2, r3
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	0019      	movs	r1, r3
 8005682:	0010      	movs	r0, r2
 8005684:	f7fa fd5c 	bl	8000140 <__udivsi3>
 8005688:	0003      	movs	r3, r0
 800568a:	b29b      	uxth	r3, r3
 800568c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800568e:	e017      	b.n	80056c0 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	085b      	lsrs	r3, r3, #1
 8005696:	2280      	movs	r2, #128	; 0x80
 8005698:	0212      	lsls	r2, r2, #8
 800569a:	189a      	adds	r2, r3, r2
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	0019      	movs	r1, r3
 80056a2:	0010      	movs	r0, r2
 80056a4:	f7fa fd4c 	bl	8000140 <__udivsi3>
 80056a8:	0003      	movs	r3, r0
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80056ae:	e007      	b.n	80056c0 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80056b0:	2313      	movs	r3, #19
 80056b2:	2218      	movs	r2, #24
 80056b4:	4694      	mov	ip, r2
 80056b6:	44bc      	add	ip, r7
 80056b8:	4463      	add	r3, ip
 80056ba:	2201      	movs	r2, #1
 80056bc:	701a      	strb	r2, [r3, #0]
        break;
 80056be:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c2:	2b0f      	cmp	r3, #15
 80056c4:	d908      	bls.n	80056d8 <UART_SetConfig+0x628>
 80056c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c8:	4a13      	ldr	r2, [pc, #76]	; (8005718 <UART_SetConfig+0x668>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d804      	bhi.n	80056d8 <UART_SetConfig+0x628>
    {
      huart->Instance->BRR = usartdiv;
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056d4:	60da      	str	r2, [r3, #12]
 80056d6:	e006      	b.n	80056e6 <UART_SetConfig+0x636>
    }
    else
    {
      ret = HAL_ERROR;
 80056d8:	2313      	movs	r3, #19
 80056da:	2218      	movs	r2, #24
 80056dc:	4694      	mov	ip, r2
 80056de:	44bc      	add	ip, r7
 80056e0:	4463      	add	r3, ip
 80056e2:	2201      	movs	r2, #1
 80056e4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	2200      	movs	r2, #0
 80056ea:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	2200      	movs	r2, #0
 80056f0:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80056f2:	2313      	movs	r3, #19
 80056f4:	2218      	movs	r2, #24
 80056f6:	4694      	mov	ip, r2
 80056f8:	44bc      	add	ip, r7
 80056fa:	4463      	add	r3, ip
 80056fc:	781b      	ldrb	r3, [r3, #0]
}
 80056fe:	0018      	movs	r0, r3
 8005700:	46bd      	mov	sp, r7
 8005702:	b00e      	add	sp, #56	; 0x38
 8005704:	bdb0      	pop	{r4, r5, r7, pc}
 8005706:	46c0      	nop			; (mov r8, r8)
 8005708:	0800d6b8 	.word	0x0800d6b8
 800570c:	40021000 	.word	0x40021000
 8005710:	007a1200 	.word	0x007a1200
 8005714:	01e84800 	.word	0x01e84800
 8005718:	0000ffff 	.word	0x0000ffff
 800571c:	0800d6dc 	.word	0x0800d6dc
 8005720:	003d0900 	.word	0x003d0900
 8005724:	00f42400 	.word	0x00f42400

08005728 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005734:	2201      	movs	r2, #1
 8005736:	4013      	ands	r3, r2
 8005738:	d00a      	beq.n	8005750 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	6812      	ldr	r2, [r2, #0]
 8005742:	6852      	ldr	r2, [r2, #4]
 8005744:	4945      	ldr	r1, [pc, #276]	; (800585c <UART_AdvFeatureConfig+0x134>)
 8005746:	4011      	ands	r1, r2
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800574c:	430a      	orrs	r2, r1
 800574e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005754:	2202      	movs	r2, #2
 8005756:	4013      	ands	r3, r2
 8005758:	d00a      	beq.n	8005770 <UART_AdvFeatureConfig+0x48>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	6812      	ldr	r2, [r2, #0]
 8005762:	6852      	ldr	r2, [r2, #4]
 8005764:	493e      	ldr	r1, [pc, #248]	; (8005860 <UART_AdvFeatureConfig+0x138>)
 8005766:	4011      	ands	r1, r2
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800576c:	430a      	orrs	r2, r1
 800576e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005774:	2204      	movs	r2, #4
 8005776:	4013      	ands	r3, r2
 8005778:	d00a      	beq.n	8005790 <UART_AdvFeatureConfig+0x68>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	6812      	ldr	r2, [r2, #0]
 8005782:	6852      	ldr	r2, [r2, #4]
 8005784:	4937      	ldr	r1, [pc, #220]	; (8005864 <UART_AdvFeatureConfig+0x13c>)
 8005786:	4011      	ands	r1, r2
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800578c:	430a      	orrs	r2, r1
 800578e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005794:	2208      	movs	r2, #8
 8005796:	4013      	ands	r3, r2
 8005798:	d00a      	beq.n	80057b0 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	6812      	ldr	r2, [r2, #0]
 80057a2:	6852      	ldr	r2, [r2, #4]
 80057a4:	4930      	ldr	r1, [pc, #192]	; (8005868 <UART_AdvFeatureConfig+0x140>)
 80057a6:	4011      	ands	r1, r2
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80057ac:	430a      	orrs	r2, r1
 80057ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b4:	2210      	movs	r2, #16
 80057b6:	4013      	ands	r3, r2
 80057b8:	d00a      	beq.n	80057d0 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	6812      	ldr	r2, [r2, #0]
 80057c2:	6892      	ldr	r2, [r2, #8]
 80057c4:	4929      	ldr	r1, [pc, #164]	; (800586c <UART_AdvFeatureConfig+0x144>)
 80057c6:	4011      	ands	r1, r2
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80057cc:	430a      	orrs	r2, r1
 80057ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d4:	2220      	movs	r2, #32
 80057d6:	4013      	ands	r3, r2
 80057d8:	d00a      	beq.n	80057f0 <UART_AdvFeatureConfig+0xc8>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	6812      	ldr	r2, [r2, #0]
 80057e2:	6892      	ldr	r2, [r2, #8]
 80057e4:	4922      	ldr	r1, [pc, #136]	; (8005870 <UART_AdvFeatureConfig+0x148>)
 80057e6:	4011      	ands	r1, r2
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80057ec:	430a      	orrs	r2, r1
 80057ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f4:	2240      	movs	r2, #64	; 0x40
 80057f6:	4013      	ands	r3, r2
 80057f8:	d01b      	beq.n	8005832 <UART_AdvFeatureConfig+0x10a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	6812      	ldr	r2, [r2, #0]
 8005802:	6852      	ldr	r2, [r2, #4]
 8005804:	491b      	ldr	r1, [pc, #108]	; (8005874 <UART_AdvFeatureConfig+0x14c>)
 8005806:	4011      	ands	r1, r2
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800580c:	430a      	orrs	r2, r1
 800580e:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005814:	2380      	movs	r3, #128	; 0x80
 8005816:	035b      	lsls	r3, r3, #13
 8005818:	429a      	cmp	r2, r3
 800581a:	d10a      	bne.n	8005832 <UART_AdvFeatureConfig+0x10a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	6812      	ldr	r2, [r2, #0]
 8005824:	6852      	ldr	r2, [r2, #4]
 8005826:	4914      	ldr	r1, [pc, #80]	; (8005878 <UART_AdvFeatureConfig+0x150>)
 8005828:	4011      	ands	r1, r2
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800582e:	430a      	orrs	r2, r1
 8005830:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005836:	2280      	movs	r2, #128	; 0x80
 8005838:	4013      	ands	r3, r2
 800583a:	d00a      	beq.n	8005852 <UART_AdvFeatureConfig+0x12a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	6812      	ldr	r2, [r2, #0]
 8005844:	6852      	ldr	r2, [r2, #4]
 8005846:	490d      	ldr	r1, [pc, #52]	; (800587c <UART_AdvFeatureConfig+0x154>)
 8005848:	4011      	ands	r1, r2
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800584e:	430a      	orrs	r2, r1
 8005850:	605a      	str	r2, [r3, #4]
  }
}
 8005852:	46c0      	nop			; (mov r8, r8)
 8005854:	46bd      	mov	sp, r7
 8005856:	b002      	add	sp, #8
 8005858:	bd80      	pop	{r7, pc}
 800585a:	46c0      	nop			; (mov r8, r8)
 800585c:	fffdffff 	.word	0xfffdffff
 8005860:	fffeffff 	.word	0xfffeffff
 8005864:	fffbffff 	.word	0xfffbffff
 8005868:	ffff7fff 	.word	0xffff7fff
 800586c:	ffffefff 	.word	0xffffefff
 8005870:	ffffdfff 	.word	0xffffdfff
 8005874:	ffefffff 	.word	0xffefffff
 8005878:	ff9fffff 	.word	0xff9fffff
 800587c:	fff7ffff 	.word	0xfff7ffff

08005880 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af02      	add	r7, sp, #8
 8005886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800588e:	f7fc fd31 	bl	80022f4 <HAL_GetTick>
 8005892:	0003      	movs	r3, r0
 8005894:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2208      	movs	r2, #8
 800589e:	4013      	ands	r3, r2
 80058a0:	2b08      	cmp	r3, #8
 80058a2:	d10d      	bne.n	80058c0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	2380      	movs	r3, #128	; 0x80
 80058a8:	0399      	lsls	r1, r3, #14
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	4b16      	ldr	r3, [pc, #88]	; (8005908 <UART_CheckIdleState+0x88>)
 80058ae:	9300      	str	r3, [sp, #0]
 80058b0:	0013      	movs	r3, r2
 80058b2:	2200      	movs	r2, #0
 80058b4:	f000 f82a 	bl	800590c <UART_WaitOnFlagUntilTimeout>
 80058b8:	1e03      	subs	r3, r0, #0
 80058ba:	d001      	beq.n	80058c0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058bc:	2303      	movs	r3, #3
 80058be:	e01f      	b.n	8005900 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2204      	movs	r2, #4
 80058c8:	4013      	ands	r3, r2
 80058ca:	2b04      	cmp	r3, #4
 80058cc:	d10d      	bne.n	80058ea <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	2380      	movs	r3, #128	; 0x80
 80058d2:	03d9      	lsls	r1, r3, #15
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	4b0c      	ldr	r3, [pc, #48]	; (8005908 <UART_CheckIdleState+0x88>)
 80058d8:	9300      	str	r3, [sp, #0]
 80058da:	0013      	movs	r3, r2
 80058dc:	2200      	movs	r2, #0
 80058de:	f000 f815 	bl	800590c <UART_WaitOnFlagUntilTimeout>
 80058e2:	1e03      	subs	r3, r0, #0
 80058e4:	d001      	beq.n	80058ea <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e00a      	b.n	8005900 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2220      	movs	r2, #32
 80058ee:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2220      	movs	r2, #32
 80058f4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2270      	movs	r2, #112	; 0x70
 80058fa:	2100      	movs	r1, #0
 80058fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	0018      	movs	r0, r3
 8005902:	46bd      	mov	sp, r7
 8005904:	b004      	add	sp, #16
 8005906:	bd80      	pop	{r7, pc}
 8005908:	01ffffff 	.word	0x01ffffff

0800590c <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	603b      	str	r3, [r7, #0]
 8005918:	1dfb      	adds	r3, r7, #7
 800591a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800591c:	e029      	b.n	8005972 <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	3301      	adds	r3, #1
 8005922:	d026      	beq.n	8005972 <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005924:	f7fc fce6 	bl	80022f4 <HAL_GetTick>
 8005928:	0002      	movs	r2, r0
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	1ad2      	subs	r2, r2, r3
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	429a      	cmp	r2, r3
 8005932:	d802      	bhi.n	800593a <UART_WaitOnFlagUntilTimeout+0x2e>
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d11b      	bne.n	8005972 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	6812      	ldr	r2, [r2, #0]
 8005942:	6812      	ldr	r2, [r2, #0]
 8005944:	4915      	ldr	r1, [pc, #84]	; (800599c <UART_WaitOnFlagUntilTimeout+0x90>)
 8005946:	400a      	ands	r2, r1
 8005948:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	6812      	ldr	r2, [r2, #0]
 8005952:	6892      	ldr	r2, [r2, #8]
 8005954:	2101      	movs	r1, #1
 8005956:	438a      	bics	r2, r1
 8005958:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2220      	movs	r2, #32
 800595e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2220      	movs	r2, #32
 8005964:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2270      	movs	r2, #112	; 0x70
 800596a:	2100      	movs	r1, #0
 800596c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e00f      	b.n	8005992 <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	69db      	ldr	r3, [r3, #28]
 8005978:	68ba      	ldr	r2, [r7, #8]
 800597a:	401a      	ands	r2, r3
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	425a      	negs	r2, r3
 8005982:	4153      	adcs	r3, r2
 8005984:	b2db      	uxtb	r3, r3
 8005986:	001a      	movs	r2, r3
 8005988:	1dfb      	adds	r3, r7, #7
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	429a      	cmp	r2, r3
 800598e:	d0c6      	beq.n	800591e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	0018      	movs	r0, r3
 8005994:	46bd      	mov	sp, r7
 8005996:	b004      	add	sp, #16
 8005998:	bd80      	pop	{r7, pc}
 800599a:	46c0      	nop			; (mov r8, r8)
 800599c:	fffffe5f 	.word	0xfffffe5f

080059a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	6812      	ldr	r2, [r2, #0]
 80059b0:	6812      	ldr	r2, [r2, #0]
 80059b2:	490a      	ldr	r1, [pc, #40]	; (80059dc <UART_EndRxTransfer+0x3c>)
 80059b4:	400a      	ands	r2, r1
 80059b6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	6812      	ldr	r2, [r2, #0]
 80059c0:	6892      	ldr	r2, [r2, #8]
 80059c2:	2101      	movs	r1, #1
 80059c4:	438a      	bics	r2, r1
 80059c6:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2220      	movs	r2, #32
 80059cc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	661a      	str	r2, [r3, #96]	; 0x60
}
 80059d4:	46c0      	nop			; (mov r8, r8)
 80059d6:	46bd      	mov	sp, r7
 80059d8:	b002      	add	sp, #8
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	fffffedf 	.word	0xfffffedf

080059e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	225a      	movs	r2, #90	; 0x5a
 80059f2:	2100      	movs	r1, #0
 80059f4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2252      	movs	r2, #82	; 0x52
 80059fa:	2100      	movs	r1, #0
 80059fc:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	0018      	movs	r0, r3
 8005a02:	f7ff fb4d 	bl	80050a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a06:	46c0      	nop			; (mov r8, r8)
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	b004      	add	sp, #16
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b082      	sub	sp, #8
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	6812      	ldr	r2, [r2, #0]
 8005a1e:	6812      	ldr	r2, [r2, #0]
 8005a20:	2140      	movs	r1, #64	; 0x40
 8005a22:	438a      	bics	r2, r1
 8005a24:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2220      	movs	r2, #32
 8005a2a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	0018      	movs	r0, r3
 8005a36:	f7ff fb2b 	bl	8005090 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a3a:	46c0      	nop			; (mov r8, r8)
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	b002      	add	sp, #8
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b082      	sub	sp, #8
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005a4a:	46c0      	nop			; (mov r8, r8)
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	b002      	add	sp, #8
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <SX1276GetWakeTime>:
    SX1276SetPublicNetwork,
    SX1276GetWakeupTime
};

uint32_t SX1276GetWakeTime( void )
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	af00      	add	r7, sp, #0
  return  BOARD_WAKEUP_TIME;
 8005a56:	2305      	movs	r3, #5
}
 8005a58:	0018      	movs	r0, r3
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}

08005a5e <SX1276SetXO>:

void SX1276SetXO( uint8_t state )
{
 8005a5e:	b580      	push	{r7, lr}
 8005a60:	b082      	sub	sp, #8
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	0002      	movs	r2, r0
 8005a66:	1dfb      	adds	r3, r7, #7
 8005a68:	701a      	strb	r2, [r3, #0]

  if (state == SET )
 8005a6a:	1dfb      	adds	r3, r7, #7
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d10b      	bne.n	8005a8a <SX1276SetXO+0x2c>
  {
    TCXO_ON(); 
 8005a72:	2380      	movs	r3, #128	; 0x80
 8005a74:	0159      	lsls	r1, r3, #5
 8005a76:	23a0      	movs	r3, #160	; 0xa0
 8005a78:	05db      	lsls	r3, r3, #23
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	0018      	movs	r0, r3
 8005a7e:	f7fd f829 	bl	8002ad4 <HAL_GPIO_WritePin>
    
    DelayMs( BOARD_WAKEUP_TIME ); //start up time of TCXO
 8005a82:	2005      	movs	r0, #5
 8005a84:	f7fc fc40 	bl	8002308 <HAL_Delay>
  }
  else
  {
    TCXO_OFF(); 
  }
}
 8005a88:	e007      	b.n	8005a9a <SX1276SetXO+0x3c>
    TCXO_OFF(); 
 8005a8a:	2380      	movs	r3, #128	; 0x80
 8005a8c:	0159      	lsls	r1, r3, #5
 8005a8e:	23a0      	movs	r3, #160	; 0xa0
 8005a90:	05db      	lsls	r3, r3, #23
 8005a92:	2200      	movs	r2, #0
 8005a94:	0018      	movs	r0, r3
 8005a96:	f7fd f81d 	bl	8002ad4 <HAL_GPIO_WritePin>
}
 8005a9a:	46c0      	nop			; (mov r8, r8)
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	b002      	add	sp, #8
 8005aa0:	bd80      	pop	{r7, pc}
	...

08005aa4 <SX1276IoInit>:
void SX1276IoInit( void )
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	af00      	add	r7, sp, #0
  SX1276BoardInit( &BoardCallbacks );
 8005aa8:	4b03      	ldr	r3, [pc, #12]	; (8005ab8 <SX1276IoInit+0x14>)
 8005aaa:	0018      	movs	r0, r3
 8005aac:	f000 ffa0 	bl	80069f0 <SX1276BoardInit>
}
 8005ab0:	46c0      	nop			; (mov r8, r8)
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	46c0      	nop			; (mov r8, r8)
 8005ab8:	20000000 	.word	0x20000000

08005abc <SX1276IoDeInit>:

void SX1276IoDeInit( void )
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	af00      	add	r7, sp, #0
}
 8005ac0:	46c0      	nop			; (mov r8, r8)
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
	...

08005ac8 <HW_GPIO_GetBitPos>:

static uint8_t HW_GPIO_GetBitPos(uint16_t GPIO_Pin)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	0002      	movs	r2, r0
 8005ad0:	1dbb      	adds	r3, r7, #6
 8005ad2:	801a      	strh	r2, [r3, #0]
  uint8_t PinPos=0;
 8005ad4:	230f      	movs	r3, #15
 8005ad6:	18fb      	adds	r3, r7, r3
 8005ad8:	2200      	movs	r2, #0
 8005ada:	701a      	strb	r2, [r3, #0]

  if ( ( GPIO_Pin & 0xFF00 ) != 0) { PinPos |= 0x8; }
 8005adc:	1dbb      	adds	r3, r7, #6
 8005ade:	881a      	ldrh	r2, [r3, #0]
 8005ae0:	23ff      	movs	r3, #255	; 0xff
 8005ae2:	021b      	lsls	r3, r3, #8
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	d007      	beq.n	8005af8 <HW_GPIO_GetBitPos+0x30>
 8005ae8:	230f      	movs	r3, #15
 8005aea:	18fb      	adds	r3, r7, r3
 8005aec:	220f      	movs	r2, #15
 8005aee:	18ba      	adds	r2, r7, r2
 8005af0:	7812      	ldrb	r2, [r2, #0]
 8005af2:	2108      	movs	r1, #8
 8005af4:	430a      	orrs	r2, r1
 8005af6:	701a      	strb	r2, [r3, #0]
  if ( ( GPIO_Pin & 0xF0F0 ) != 0) { PinPos |= 0x4; }
 8005af8:	1dbb      	adds	r3, r7, #6
 8005afa:	881b      	ldrh	r3, [r3, #0]
 8005afc:	4a15      	ldr	r2, [pc, #84]	; (8005b54 <HW_GPIO_GetBitPos+0x8c>)
 8005afe:	4013      	ands	r3, r2
 8005b00:	d007      	beq.n	8005b12 <HW_GPIO_GetBitPos+0x4a>
 8005b02:	230f      	movs	r3, #15
 8005b04:	18fb      	adds	r3, r7, r3
 8005b06:	220f      	movs	r2, #15
 8005b08:	18ba      	adds	r2, r7, r2
 8005b0a:	7812      	ldrb	r2, [r2, #0]
 8005b0c:	2104      	movs	r1, #4
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	701a      	strb	r2, [r3, #0]
  if ( ( GPIO_Pin & 0xCCCC ) != 0) { PinPos |= 0x2; }
 8005b12:	1dbb      	adds	r3, r7, #6
 8005b14:	881b      	ldrh	r3, [r3, #0]
 8005b16:	4a10      	ldr	r2, [pc, #64]	; (8005b58 <HW_GPIO_GetBitPos+0x90>)
 8005b18:	4013      	ands	r3, r2
 8005b1a:	d007      	beq.n	8005b2c <HW_GPIO_GetBitPos+0x64>
 8005b1c:	230f      	movs	r3, #15
 8005b1e:	18fb      	adds	r3, r7, r3
 8005b20:	220f      	movs	r2, #15
 8005b22:	18ba      	adds	r2, r7, r2
 8005b24:	7812      	ldrb	r2, [r2, #0]
 8005b26:	2102      	movs	r1, #2
 8005b28:	430a      	orrs	r2, r1
 8005b2a:	701a      	strb	r2, [r3, #0]
  if ( ( GPIO_Pin & 0xAAAA ) != 0) { PinPos |= 0x1; }
 8005b2c:	1dbb      	adds	r3, r7, #6
 8005b2e:	881b      	ldrh	r3, [r3, #0]
 8005b30:	4a0a      	ldr	r2, [pc, #40]	; (8005b5c <HW_GPIO_GetBitPos+0x94>)
 8005b32:	4013      	ands	r3, r2
 8005b34:	d007      	beq.n	8005b46 <HW_GPIO_GetBitPos+0x7e>
 8005b36:	230f      	movs	r3, #15
 8005b38:	18fb      	adds	r3, r7, r3
 8005b3a:	220f      	movs	r2, #15
 8005b3c:	18ba      	adds	r2, r7, r2
 8005b3e:	7812      	ldrb	r2, [r2, #0]
 8005b40:	2101      	movs	r1, #1
 8005b42:	430a      	orrs	r2, r1
 8005b44:	701a      	strb	r2, [r3, #0]

  return PinPos;
 8005b46:	230f      	movs	r3, #15
 8005b48:	18fb      	adds	r3, r7, r3
 8005b4a:	781b      	ldrb	r3, [r3, #0]
}
 8005b4c:	0018      	movs	r0, r3
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	b004      	add	sp, #16
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	0000f0f0 	.word	0x0000f0f0
 8005b58:	0000cccc 	.word	0x0000cccc
 8005b5c:	0000aaaa 	.word	0x0000aaaa

08005b60 <MSP_GetIRQn>:

IRQn_Type MSP_GetIRQn( uint16_t GPIO_Pin)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	0002      	movs	r2, r0
 8005b68:	1dbb      	adds	r3, r7, #6
 8005b6a:	801a      	strh	r2, [r3, #0]
  switch( GPIO_Pin )
 8005b6c:	1dbb      	adds	r3, r7, #6
 8005b6e:	881b      	ldrh	r3, [r3, #0]
 8005b70:	2b04      	cmp	r3, #4
 8005b72:	d009      	beq.n	8005b88 <MSP_GetIRQn+0x28>
 8005b74:	dc03      	bgt.n	8005b7e <MSP_GetIRQn+0x1e>
 8005b76:	3b01      	subs	r3, #1
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d807      	bhi.n	8005b8c <MSP_GetIRQn+0x2c>
 8005b7c:	e002      	b.n	8005b84 <MSP_GetIRQn+0x24>
 8005b7e:	2b08      	cmp	r3, #8
 8005b80:	d002      	beq.n	8005b88 <MSP_GetIRQn+0x28>
 8005b82:	e003      	b.n	8005b8c <MSP_GetIRQn+0x2c>
  {
    case GPIO_PIN_0:
    case GPIO_PIN_1:  return EXTI0_1_IRQn;
 8005b84:	2305      	movs	r3, #5
 8005b86:	e002      	b.n	8005b8e <MSP_GetIRQn+0x2e>
    case GPIO_PIN_2:
    case GPIO_PIN_3:  return EXTI2_3_IRQn;
 8005b88:	2306      	movs	r3, #6
 8005b8a:	e000      	b.n	8005b8e <MSP_GetIRQn+0x2e>
    case GPIO_PIN_11:
    case GPIO_PIN_12:
    case GPIO_PIN_13:
    case GPIO_PIN_14:
    case GPIO_PIN_15:
    default: return EXTI4_15_IRQn;
 8005b8c:	2307      	movs	r3, #7
  }
}
 8005b8e:	0018      	movs	r0, r3
 8005b90:	46bd      	mov	sp, r7
 8005b92:	b002      	add	sp, #8
 8005b94:	bd80      	pop	{r7, pc}
	...

08005b98 <HW_GPIO_SetIrq>:
void HW_GPIO_SetIrq( GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint32_t prio,  GpioIrqHandler *irqHandler )
{
 8005b98:	b590      	push	{r4, r7, lr}
 8005b9a:	b087      	sub	sp, #28
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	607a      	str	r2, [r7, #4]
 8005ba2:	603b      	str	r3, [r7, #0]
 8005ba4:	230a      	movs	r3, #10
 8005ba6:	18fb      	adds	r3, r7, r3
 8005ba8:	1c0a      	adds	r2, r1, #0
 8005baa:	801a      	strh	r2, [r3, #0]
  IRQn_Type IRQnb;

  uint32_t BitPos = HW_GPIO_GetBitPos( GPIO_Pin ) ;
 8005bac:	230a      	movs	r3, #10
 8005bae:	18fb      	adds	r3, r7, r3
 8005bb0:	881b      	ldrh	r3, [r3, #0]
 8005bb2:	0018      	movs	r0, r3
 8005bb4:	f7ff ff88 	bl	8005ac8 <HW_GPIO_GetBitPos>
 8005bb8:	0003      	movs	r3, r0
 8005bba:	617b      	str	r3, [r7, #20]

  if ( irqHandler != NULL)
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d01f      	beq.n	8005c02 <HW_GPIO_SetIrq+0x6a>
  {
    GpioIrq[ BitPos ] = irqHandler;
 8005bc2:	4b14      	ldr	r3, [pc, #80]	; (8005c14 <HW_GPIO_SetIrq+0x7c>)
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	0092      	lsls	r2, r2, #2
 8005bc8:	6839      	ldr	r1, [r7, #0]
 8005bca:	50d1      	str	r1, [r2, r3]

    IRQnb = MSP_GetIRQn( GPIO_Pin );
 8005bcc:	2313      	movs	r3, #19
 8005bce:	18fc      	adds	r4, r7, r3
 8005bd0:	230a      	movs	r3, #10
 8005bd2:	18fb      	adds	r3, r7, r3
 8005bd4:	881b      	ldrh	r3, [r3, #0]
 8005bd6:	0018      	movs	r0, r3
 8005bd8:	f7ff ffc2 	bl	8005b60 <MSP_GetIRQn>
 8005bdc:	0003      	movs	r3, r0
 8005bde:	7023      	strb	r3, [r4, #0]

    HAL_NVIC_SetPriority( IRQnb , prio, 0);
 8005be0:	6879      	ldr	r1, [r7, #4]
 8005be2:	2313      	movs	r3, #19
 8005be4:	18fb      	adds	r3, r7, r3
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	b25b      	sxtb	r3, r3
 8005bea:	2200      	movs	r2, #0
 8005bec:	0018      	movs	r0, r3
 8005bee:	f7fc fc51 	bl	8002494 <HAL_NVIC_SetPriority>

    HAL_NVIC_EnableIRQ( IRQnb );
 8005bf2:	2313      	movs	r3, #19
 8005bf4:	18fb      	adds	r3, r7, r3
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	b25b      	sxtb	r3, r3
 8005bfa:	0018      	movs	r0, r3
 8005bfc:	f7fc fc60 	bl	80024c0 <HAL_NVIC_EnableIRQ>
  }
  else
  {
    GpioIrq[ BitPos ] = NULL;
  }
}
 8005c00:	e004      	b.n	8005c0c <HW_GPIO_SetIrq+0x74>
    GpioIrq[ BitPos ] = NULL;
 8005c02:	4b04      	ldr	r3, [pc, #16]	; (8005c14 <HW_GPIO_SetIrq+0x7c>)
 8005c04:	697a      	ldr	r2, [r7, #20]
 8005c06:	0092      	lsls	r2, r2, #2
 8005c08:	2100      	movs	r1, #0
 8005c0a:	50d1      	str	r1, [r2, r3]
}
 8005c0c:	46c0      	nop			; (mov r8, r8)
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	b007      	add	sp, #28
 8005c12:	bd90      	pop	{r4, r7, pc}
 8005c14:	200006cc 	.word	0x200006cc

08005c18 <SX1276IoIrqInit>:


void SX1276IoIrqInit( DioIrqHandler **irqHandlers )
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]

  HW_GPIO_SetIrq( GPIOB, GPIO_PIN_4, IRQ_HIGH_PRIORITY, irqHandlers[0] );
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4811      	ldr	r0, [pc, #68]	; (8005c6c <SX1276IoIrqInit+0x54>)
 8005c26:	2200      	movs	r2, #0
 8005c28:	2110      	movs	r1, #16
 8005c2a:	f7ff ffb5 	bl	8005b98 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( GPIOB, GPIO_PIN_1, IRQ_HIGH_PRIORITY, irqHandlers[1] );
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	3304      	adds	r3, #4
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	480d      	ldr	r0, [pc, #52]	; (8005c6c <SX1276IoIrqInit+0x54>)
 8005c36:	2200      	movs	r2, #0
 8005c38:	2102      	movs	r1, #2
 8005c3a:	f7ff ffad 	bl	8005b98 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( GPIOB, GPIO_PIN_0, IRQ_HIGH_PRIORITY, irqHandlers[2] );
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	3308      	adds	r3, #8
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4809      	ldr	r0, [pc, #36]	; (8005c6c <SX1276IoIrqInit+0x54>)
 8005c46:	2200      	movs	r2, #0
 8005c48:	2101      	movs	r1, #1
 8005c4a:	f7ff ffa5 	bl	8005b98 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( GPIOB, GPIO_PIN_13, IRQ_HIGH_PRIORITY, irqHandlers[3] );
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	330c      	adds	r3, #12
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	2380      	movs	r3, #128	; 0x80
 8005c56:	0199      	lsls	r1, r3, #6
 8005c58:	4804      	ldr	r0, [pc, #16]	; (8005c6c <SX1276IoIrqInit+0x54>)
 8005c5a:	0013      	movs	r3, r2
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f7ff ff9b 	bl	8005b98 <HW_GPIO_SetIrq>

}
 8005c62:	46c0      	nop			; (mov r8, r8)
 8005c64:	46bd      	mov	sp, r7
 8005c66:	b002      	add	sp, #8
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	46c0      	nop			; (mov r8, r8)
 8005c6c:	50000400 	.word	0x50000400

08005c70 <SX1276AntSwInit>:


static void SX1276AntSwInit( void )
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin( RADIO_ANT_SWITCH_RX_GPIO_Port, RADIO_ANT_SWITCH_RX_Pin, 0);
 8005c74:	23a0      	movs	r3, #160	; 0xa0
 8005c76:	05db      	lsls	r3, r3, #23
 8005c78:	2200      	movs	r2, #0
 8005c7a:	2102      	movs	r1, #2
 8005c7c:	0018      	movs	r0, r3
 8005c7e:	f7fc ff29 	bl	8002ad4 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin( RADIO_ANT_SWITCH_TX_BOOST_GPIO_Port, RADIO_ANT_SWITCH_TX_BOOST_Pin, 0);
 8005c82:	4b07      	ldr	r3, [pc, #28]	; (8005ca0 <SX1276AntSwInit+0x30>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	2102      	movs	r1, #2
 8005c88:	0018      	movs	r0, r3
 8005c8a:	f7fc ff23 	bl	8002ad4 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin( RADIO_ANT_SWITCH_TX_RFO_GPIO_Port, RADIO_ANT_SWITCH_TX_RFO_Pin, 0);
 8005c8e:	4b04      	ldr	r3, [pc, #16]	; (8005ca0 <SX1276AntSwInit+0x30>)
 8005c90:	2200      	movs	r2, #0
 8005c92:	2104      	movs	r1, #4
 8005c94:	0018      	movs	r0, r3
 8005c96:	f7fc ff1d 	bl	8002ad4 <HAL_GPIO_WritePin>
}
 8005c9a:	46c0      	nop			; (mov r8, r8)
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	50000800 	.word	0x50000800

08005ca4 <SX1276AntSwDeInit>:

static void SX1276AntSwDeInit( void )
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin( RADIO_ANT_SWITCH_RX_GPIO_Port, RADIO_ANT_SWITCH_RX_Pin, 1);
 8005ca8:	23a0      	movs	r3, #160	; 0xa0
 8005caa:	05db      	lsls	r3, r3, #23
 8005cac:	2201      	movs	r2, #1
 8005cae:	2102      	movs	r1, #2
 8005cb0:	0018      	movs	r0, r3
 8005cb2:	f7fc ff0f 	bl	8002ad4 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin( RADIO_ANT_SWITCH_TX_BOOST_GPIO_Port, RADIO_ANT_SWITCH_TX_BOOST_Pin, 1);
 8005cb6:	4b07      	ldr	r3, [pc, #28]	; (8005cd4 <SX1276AntSwDeInit+0x30>)
 8005cb8:	2201      	movs	r2, #1
 8005cba:	2102      	movs	r1, #2
 8005cbc:	0018      	movs	r0, r3
 8005cbe:	f7fc ff09 	bl	8002ad4 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin( RADIO_ANT_SWITCH_TX_RFO_GPIO_Port, RADIO_ANT_SWITCH_TX_RFO_Pin, 1);
 8005cc2:	4b04      	ldr	r3, [pc, #16]	; (8005cd4 <SX1276AntSwDeInit+0x30>)
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	2104      	movs	r1, #4
 8005cc8:	0018      	movs	r0, r3
 8005cca:	f7fc ff03 	bl	8002ad4 <HAL_GPIO_WritePin>
}
 8005cce:	46c0      	nop			; (mov r8, r8)
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	50000800 	.word	0x50000800

08005cd8 <SX1276SetRfTxPower>:



void SX1276SetRfTxPower( int8_t power )
{
 8005cd8:	b590      	push	{r4, r7, lr}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	0002      	movs	r2, r0
 8005ce0:	1dfb      	adds	r3, r7, #7
 8005ce2:	701a      	strb	r2, [r3, #0]
    uint8_t paConfig = 0;
 8005ce4:	230f      	movs	r3, #15
 8005ce6:	18fb      	adds	r3, r7, r3
 8005ce8:	2200      	movs	r2, #0
 8005cea:	701a      	strb	r2, [r3, #0]
    uint8_t paDac = 0;
 8005cec:	230e      	movs	r3, #14
 8005cee:	18fb      	adds	r3, r7, r3
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	701a      	strb	r2, [r3, #0]

    paConfig = SX1276Read( REG_PACONFIG );
 8005cf4:	230f      	movs	r3, #15
 8005cf6:	18fc      	adds	r4, r7, r3
 8005cf8:	2009      	movs	r0, #9
 8005cfa:	f002 faf3 	bl	80082e4 <SX1276Read>
 8005cfe:	0003      	movs	r3, r0
 8005d00:	7023      	strb	r3, [r4, #0]
    paDac = SX1276Read( REG_PADAC );
 8005d02:	230e      	movs	r3, #14
 8005d04:	18fc      	adds	r4, r7, r3
 8005d06:	204d      	movs	r0, #77	; 0x4d
 8005d08:	f002 faec 	bl	80082e4 <SX1276Read>
 8005d0c:	0003      	movs	r3, r0
 8005d0e:	7023      	strb	r3, [r4, #0]

    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1276GetPaSelect( power );
 8005d10:	230f      	movs	r3, #15
 8005d12:	18fb      	adds	r3, r7, r3
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	b25b      	sxtb	r3, r3
 8005d18:	227f      	movs	r2, #127	; 0x7f
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	b25c      	sxtb	r4, r3
 8005d1e:	1dfb      	adds	r3, r7, #7
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	0018      	movs	r0, r3
 8005d24:	f000 f8b7 	bl	8005e96 <SX1276GetPaSelect>
 8005d28:	0003      	movs	r3, r0
 8005d2a:	b25b      	sxtb	r3, r3
 8005d2c:	4323      	orrs	r3, r4
 8005d2e:	b25a      	sxtb	r2, r3
 8005d30:	230f      	movs	r3, #15
 8005d32:	18fb      	adds	r3, r7, r3
 8005d34:	701a      	strb	r2, [r3, #0]
    paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK ) | 0x70;
 8005d36:	230f      	movs	r3, #15
 8005d38:	18fb      	adds	r3, r7, r3
 8005d3a:	220f      	movs	r2, #15
 8005d3c:	18ba      	adds	r2, r7, r2
 8005d3e:	7812      	ldrb	r2, [r2, #0]
 8005d40:	2170      	movs	r1, #112	; 0x70
 8005d42:	430a      	orrs	r2, r1
 8005d44:	701a      	strb	r2, [r3, #0]

    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 8005d46:	230f      	movs	r3, #15
 8005d48:	18fb      	adds	r3, r7, r3
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	b25b      	sxtb	r3, r3
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	da6b      	bge.n	8005e2a <SX1276SetRfTxPower+0x152>
    {
        if( power > 17 )
 8005d52:	1dfb      	adds	r3, r7, #7
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	b25b      	sxtb	r3, r3
 8005d58:	2b11      	cmp	r3, #17
 8005d5a:	dd08      	ble.n	8005d6e <SX1276SetRfTxPower+0x96>
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 8005d5c:	230e      	movs	r3, #14
 8005d5e:	18fb      	adds	r3, r7, r3
 8005d60:	220e      	movs	r2, #14
 8005d62:	18ba      	adds	r2, r7, r2
 8005d64:	7812      	ldrb	r2, [r2, #0]
 8005d66:	2107      	movs	r1, #7
 8005d68:	430a      	orrs	r2, r1
 8005d6a:	701a      	strb	r2, [r3, #0]
 8005d6c:	e00c      	b.n	8005d88 <SX1276SetRfTxPower+0xb0>
        }
        else
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 8005d6e:	230e      	movs	r3, #14
 8005d70:	18fb      	adds	r3, r7, r3
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	b25b      	sxtb	r3, r3
 8005d76:	2207      	movs	r2, #7
 8005d78:	4393      	bics	r3, r2
 8005d7a:	b25b      	sxtb	r3, r3
 8005d7c:	2204      	movs	r2, #4
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	b25a      	sxtb	r2, r3
 8005d82:	230e      	movs	r3, #14
 8005d84:	18fb      	adds	r3, r7, r3
 8005d86:	701a      	strb	r2, [r3, #0]
        }
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 8005d88:	230e      	movs	r3, #14
 8005d8a:	18fb      	adds	r3, r7, r3
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	2207      	movs	r2, #7
 8005d90:	4013      	ands	r3, r2
 8005d92:	2b07      	cmp	r3, #7
 8005d94:	d124      	bne.n	8005de0 <SX1276SetRfTxPower+0x108>
        {
            if( power < 5 )
 8005d96:	1dfb      	adds	r3, r7, #7
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	b25b      	sxtb	r3, r3
 8005d9c:	2b04      	cmp	r3, #4
 8005d9e:	dc02      	bgt.n	8005da6 <SX1276SetRfTxPower+0xce>
            {
                power = 5;
 8005da0:	1dfb      	adds	r3, r7, #7
 8005da2:	2205      	movs	r2, #5
 8005da4:	701a      	strb	r2, [r3, #0]
            }
            if( power > 20 )
 8005da6:	1dfb      	adds	r3, r7, #7
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	b25b      	sxtb	r3, r3
 8005dac:	2b14      	cmp	r3, #20
 8005dae:	dd02      	ble.n	8005db6 <SX1276SetRfTxPower+0xde>
            {
                power = 20;
 8005db0:	1dfb      	adds	r3, r7, #7
 8005db2:	2214      	movs	r2, #20
 8005db4:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 8005db6:	230f      	movs	r3, #15
 8005db8:	18fb      	adds	r3, r7, r3
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	b25b      	sxtb	r3, r3
 8005dbe:	220f      	movs	r2, #15
 8005dc0:	4393      	bics	r3, r2
 8005dc2:	b25a      	sxtb	r2, r3
 8005dc4:	1dfb      	adds	r3, r7, #7
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	3b05      	subs	r3, #5
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	b25b      	sxtb	r3, r3
 8005dce:	210f      	movs	r1, #15
 8005dd0:	400b      	ands	r3, r1
 8005dd2:	b25b      	sxtb	r3, r3
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	b25a      	sxtb	r2, r3
 8005dd8:	230f      	movs	r3, #15
 8005dda:	18fb      	adds	r3, r7, r3
 8005ddc:	701a      	strb	r2, [r3, #0]
 8005dde:	e048      	b.n	8005e72 <SX1276SetRfTxPower+0x19a>
        }
        else
        {
            if( power < 2 )
 8005de0:	1dfb      	adds	r3, r7, #7
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	b25b      	sxtb	r3, r3
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	dc02      	bgt.n	8005df0 <SX1276SetRfTxPower+0x118>
            {
                power = 2;
 8005dea:	1dfb      	adds	r3, r7, #7
 8005dec:	2202      	movs	r2, #2
 8005dee:	701a      	strb	r2, [r3, #0]
            }
            if( power > 17 )
 8005df0:	1dfb      	adds	r3, r7, #7
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	b25b      	sxtb	r3, r3
 8005df6:	2b11      	cmp	r3, #17
 8005df8:	dd02      	ble.n	8005e00 <SX1276SetRfTxPower+0x128>
            {
                power = 17;
 8005dfa:	1dfb      	adds	r3, r7, #7
 8005dfc:	2211      	movs	r2, #17
 8005dfe:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 8005e00:	230f      	movs	r3, #15
 8005e02:	18fb      	adds	r3, r7, r3
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	b25b      	sxtb	r3, r3
 8005e08:	220f      	movs	r2, #15
 8005e0a:	4393      	bics	r3, r2
 8005e0c:	b25a      	sxtb	r2, r3
 8005e0e:	1dfb      	adds	r3, r7, #7
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	3b02      	subs	r3, #2
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	b25b      	sxtb	r3, r3
 8005e18:	210f      	movs	r1, #15
 8005e1a:	400b      	ands	r3, r1
 8005e1c:	b25b      	sxtb	r3, r3
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	b25a      	sxtb	r2, r3
 8005e22:	230f      	movs	r3, #15
 8005e24:	18fb      	adds	r3, r7, r3
 8005e26:	701a      	strb	r2, [r3, #0]
 8005e28:	e023      	b.n	8005e72 <SX1276SetRfTxPower+0x19a>
        }
    }
    else
    {
        if( power < -1 )
 8005e2a:	1dfb      	adds	r3, r7, #7
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	b25b      	sxtb	r3, r3
 8005e30:	3301      	adds	r3, #1
 8005e32:	da02      	bge.n	8005e3a <SX1276SetRfTxPower+0x162>
        {
            power = -1;
 8005e34:	1dfb      	adds	r3, r7, #7
 8005e36:	22ff      	movs	r2, #255	; 0xff
 8005e38:	701a      	strb	r2, [r3, #0]
        }
        if( power > 14 )
 8005e3a:	1dfb      	adds	r3, r7, #7
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	b25b      	sxtb	r3, r3
 8005e40:	2b0e      	cmp	r3, #14
 8005e42:	dd02      	ble.n	8005e4a <SX1276SetRfTxPower+0x172>
        {
            power = 14;
 8005e44:	1dfb      	adds	r3, r7, #7
 8005e46:	220e      	movs	r2, #14
 8005e48:	701a      	strb	r2, [r3, #0]
        }
        paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power + 1 ) & 0x0F );
 8005e4a:	230f      	movs	r3, #15
 8005e4c:	18fb      	adds	r3, r7, r3
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	b25b      	sxtb	r3, r3
 8005e52:	220f      	movs	r2, #15
 8005e54:	4393      	bics	r3, r2
 8005e56:	b25a      	sxtb	r2, r3
 8005e58:	1dfb      	adds	r3, r7, #7
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	b25b      	sxtb	r3, r3
 8005e62:	210f      	movs	r1, #15
 8005e64:	400b      	ands	r3, r1
 8005e66:	b25b      	sxtb	r3, r3
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	b25a      	sxtb	r2, r3
 8005e6c:	230f      	movs	r3, #15
 8005e6e:	18fb      	adds	r3, r7, r3
 8005e70:	701a      	strb	r2, [r3, #0]
    }
    SX1276Write( REG_PACONFIG, paConfig );
 8005e72:	230f      	movs	r3, #15
 8005e74:	18fb      	adds	r3, r7, r3
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	0019      	movs	r1, r3
 8005e7a:	2009      	movs	r0, #9
 8005e7c:	f002 fa1e 	bl	80082bc <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 8005e80:	230e      	movs	r3, #14
 8005e82:	18fb      	adds	r3, r7, r3
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	0019      	movs	r1, r3
 8005e88:	204d      	movs	r0, #77	; 0x4d
 8005e8a:	f002 fa17 	bl	80082bc <SX1276Write>
}
 8005e8e:	46c0      	nop			; (mov r8, r8)
 8005e90:	46bd      	mov	sp, r7
 8005e92:	b005      	add	sp, #20
 8005e94:	bd90      	pop	{r4, r7, pc}

08005e96 <SX1276GetPaSelect>:

uint8_t SX1276GetPaSelect( uint8_t power )
{
 8005e96:	b580      	push	{r7, lr}
 8005e98:	b082      	sub	sp, #8
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	0002      	movs	r2, r0
 8005e9e:	1dfb      	adds	r3, r7, #7
 8005ea0:	701a      	strb	r2, [r3, #0]
    if (power >14)
 8005ea2:	1dfb      	adds	r3, r7, #7
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	2b0e      	cmp	r3, #14
 8005ea8:	d901      	bls.n	8005eae <SX1276GetPaSelect+0x18>
    {
        return RF_PACONFIG_PASELECT_PABOOST;
 8005eaa:	2380      	movs	r3, #128	; 0x80
 8005eac:	e000      	b.n	8005eb0 <SX1276GetPaSelect+0x1a>
    }
    else
    {
        return RF_PACONFIG_PASELECT_RFO;
 8005eae:	2300      	movs	r3, #0
    }
}
 8005eb0:	0018      	movs	r0, r3
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	b002      	add	sp, #8
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <SX1276SetAntSwLowPower>:

void SX1276SetAntSwLowPower( bool status )
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	0002      	movs	r2, r0
 8005ec0:	1dfb      	adds	r3, r7, #7
 8005ec2:	701a      	strb	r2, [r3, #0]
    if( status == false )
 8005ec4:	1dfb      	adds	r3, r7, #7
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	4053      	eors	r3, r2
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d002      	beq.n	8005ed8 <SX1276SetAntSwLowPower+0x20>
    {
      SX1276AntSwInit( );
 8005ed2:	f7ff fecd 	bl	8005c70 <SX1276AntSwInit>
    }
    else 
    {
      SX1276AntSwDeInit( );
    }
}
 8005ed6:	e001      	b.n	8005edc <SX1276SetAntSwLowPower+0x24>
      SX1276AntSwDeInit( );
 8005ed8:	f7ff fee4 	bl	8005ca4 <SX1276AntSwDeInit>
}
 8005edc:	46c0      	nop			; (mov r8, r8)
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	b002      	add	sp, #8
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <SX1276SetAntSw>:

void SX1276SetAntSw( uint8_t opMode )
{
 8005ee4:	b590      	push	{r4, r7, lr}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	0002      	movs	r2, r0
 8005eec:	1dfb      	adds	r3, r7, #7
 8005eee:	701a      	strb	r2, [r3, #0]
 uint8_t paConfig =  SX1276Read( REG_PACONFIG );
 8005ef0:	230f      	movs	r3, #15
 8005ef2:	18fc      	adds	r4, r7, r3
 8005ef4:	2009      	movs	r0, #9
 8005ef6:	f002 f9f5 	bl	80082e4 <SX1276Read>
 8005efa:	0003      	movs	r3, r0
 8005efc:	7023      	strb	r3, [r4, #0]
    switch( opMode )
 8005efe:	1dfb      	adds	r3, r7, #7
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	2b03      	cmp	r3, #3
 8005f04:	d116      	bne.n	8005f34 <SX1276SetAntSw+0x50>
    {
    case RFLR_OPMODE_TRANSMITTER:
      if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 8005f06:	230f      	movs	r3, #15
 8005f08:	18fb      	adds	r3, r7, r3
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	b25b      	sxtb	r3, r3
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	da06      	bge.n	8005f20 <SX1276SetAntSw+0x3c>
      {
    	  HAL_GPIO_WritePin( RADIO_ANT_SWITCH_TX_BOOST_GPIO_Port, RADIO_ANT_SWITCH_TX_BOOST_Pin, 1 );
 8005f12:	4b10      	ldr	r3, [pc, #64]	; (8005f54 <SX1276SetAntSw+0x70>)
 8005f14:	2201      	movs	r2, #1
 8005f16:	2102      	movs	r1, #2
 8005f18:	0018      	movs	r0, r3
 8005f1a:	f7fc fddb 	bl	8002ad4 <HAL_GPIO_WritePin>
 8005f1e:	e005      	b.n	8005f2c <SX1276SetAntSw+0x48>
      }
      else
      {
    	  HAL_GPIO_WritePin( RADIO_ANT_SWITCH_TX_RFO_GPIO_Port, RADIO_ANT_SWITCH_TX_RFO_Pin, 1 );
 8005f20:	4b0c      	ldr	r3, [pc, #48]	; (8005f54 <SX1276SetAntSw+0x70>)
 8005f22:	2201      	movs	r2, #1
 8005f24:	2104      	movs	r1, #4
 8005f26:	0018      	movs	r0, r3
 8005f28:	f7fc fdd4 	bl	8002ad4 <HAL_GPIO_WritePin>
      }
      SX1276.RxTx = 1;
 8005f2c:	4b0a      	ldr	r3, [pc, #40]	; (8005f58 <SX1276SetAntSw+0x74>)
 8005f2e:	2201      	movs	r2, #1
 8005f30:	701a      	strb	r2, [r3, #0]
        break;
 8005f32:	e00a      	b.n	8005f4a <SX1276SetAntSw+0x66>
    case RFLR_OPMODE_RECEIVER:
    case RFLR_OPMODE_RECEIVER_SINGLE:
    case RFLR_OPMODE_CAD:
    default:
     SX1276.RxTx = 0;
 8005f34:	4b08      	ldr	r3, [pc, #32]	; (8005f58 <SX1276SetAntSw+0x74>)
 8005f36:	2200      	movs	r2, #0
 8005f38:	701a      	strb	r2, [r3, #0]
     HAL_GPIO_WritePin(RADIO_ANT_SWITCH_RX_GPIO_Port, RADIO_ANT_SWITCH_RX_Pin, 1 );
 8005f3a:	23a0      	movs	r3, #160	; 0xa0
 8005f3c:	05db      	lsls	r3, r3, #23
 8005f3e:	2201      	movs	r2, #1
 8005f40:	2102      	movs	r1, #2
 8005f42:	0018      	movs	r0, r3
 8005f44:	f7fc fdc6 	bl	8002ad4 <HAL_GPIO_WritePin>
     break;
 8005f48:	46c0      	nop			; (mov r8, r8)
    }
}
 8005f4a:	46c0      	nop			; (mov r8, r8)
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	b005      	add	sp, #20
 8005f50:	bd90      	pop	{r4, r7, pc}
 8005f52:	46c0      	nop			; (mov r8, r8)
 8005f54:	50000800 	.word	0x50000800
 8005f58:	20000a34 	.word	0x20000a34

08005f5c <SX1276CheckRfFrequency>:

bool SX1276CheckRfFrequency( uint32_t frequency )
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
    // Implement check. Currently all frequencies are supported
    return true;
 8005f64:	2301      	movs	r3, #1
}
 8005f66:	0018      	movs	r0, r3
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	b002      	add	sp, #8
 8005f6c:	bd80      	pop	{r7, pc}
	...

08005f70 <LPM_SetStopMode>:

  return;
}

void LPM_SetStopMode(LPM_Id_t id, LPM_SetMode_t mode)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	0002      	movs	r2, r0
 8005f78:	1dfb      	adds	r3, r7, #7
 8005f7a:	701a      	strb	r2, [r3, #0]
 8005f7c:	1dbb      	adds	r3, r7, #6
 8005f7e:	1c0a      	adds	r2, r1, #0
 8005f80:	701a      	strb	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005f82:	f3ef 8310 	mrs	r3, PRIMASK
 8005f86:	613b      	str	r3, [r7, #16]
  return(result);
 8005f88:	693b      	ldr	r3, [r7, #16]
  BACKUP_PRIMASK();
 8005f8a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005f8c:	b672      	cpsid	i
  
  DISABLE_IRQ( );
  
  
  switch(mode)
 8005f8e:	1dbb      	adds	r3, r7, #6
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d00a      	beq.n	8005fac <LPM_SetStopMode+0x3c>
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d000      	beq.n	8005f9c <LPM_SetStopMode+0x2c>
    {
      StopModeDisable &= ~(uint32_t)id;
      break;
    }
    default:
      break;
 8005f9a:	e010      	b.n	8005fbe <LPM_SetStopMode+0x4e>
      StopModeDisable |= (uint32_t)id;
 8005f9c:	1dfb      	adds	r3, r7, #7
 8005f9e:	781a      	ldrb	r2, [r3, #0]
 8005fa0:	4b0b      	ldr	r3, [pc, #44]	; (8005fd0 <LPM_SetStopMode+0x60>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	431a      	orrs	r2, r3
 8005fa6:	4b0a      	ldr	r3, [pc, #40]	; (8005fd0 <LPM_SetStopMode+0x60>)
 8005fa8:	601a      	str	r2, [r3, #0]
      break;
 8005faa:	e008      	b.n	8005fbe <LPM_SetStopMode+0x4e>
      StopModeDisable &= ~(uint32_t)id;
 8005fac:	1dfb      	adds	r3, r7, #7
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	43da      	mvns	r2, r3
 8005fb2:	4b07      	ldr	r3, [pc, #28]	; (8005fd0 <LPM_SetStopMode+0x60>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	401a      	ands	r2, r3
 8005fb8:	4b05      	ldr	r3, [pc, #20]	; (8005fd0 <LPM_SetStopMode+0x60>)
 8005fba:	601a      	str	r2, [r3, #0]
      break;
 8005fbc:	46c0      	nop			; (mov r8, r8)
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f383 8810 	msr	PRIMASK, r3
  }
  RESTORE_PRIMASK( );

  return;
 8005fc8:	46c0      	nop			; (mov r8, r8)
}
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	b006      	add	sp, #24
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	2000070c 	.word	0x2000070c

08005fd4 <LPM_GetMode>:

  return;
}

LPM_GetMode_t LPM_GetMode(void)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005fda:	f3ef 8310 	mrs	r3, PRIMASK
 8005fde:	607b      	str	r3, [r7, #4]
  return(result);
 8005fe0:	687b      	ldr	r3, [r7, #4]
  LPM_GetMode_t mode_selected;

  BACKUP_PRIMASK();
 8005fe2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 8005fe4:	b672      	cpsid	i
  
  DISABLE_IRQ( );

  if(StopModeDisable )
 8005fe6:	4b11      	ldr	r3, [pc, #68]	; (800602c <LPM_GetMode+0x58>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d004      	beq.n	8005ff8 <LPM_GetMode+0x24>
  {
    mode_selected = LPM_SleepMode;
 8005fee:	230f      	movs	r3, #15
 8005ff0:	18fb      	adds	r3, r7, r3
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	701a      	strb	r2, [r3, #0]
 8005ff6:	e00c      	b.n	8006012 <LPM_GetMode+0x3e>
  }
  else
  {
    if(OffModeDisable)
 8005ff8:	4b0d      	ldr	r3, [pc, #52]	; (8006030 <LPM_GetMode+0x5c>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d004      	beq.n	800600a <LPM_GetMode+0x36>
    {
      mode_selected = LPM_StopMode;
 8006000:	230f      	movs	r3, #15
 8006002:	18fb      	adds	r3, r7, r3
 8006004:	2201      	movs	r2, #1
 8006006:	701a      	strb	r2, [r3, #0]
 8006008:	e003      	b.n	8006012 <LPM_GetMode+0x3e>
    }
    else
    {
      mode_selected = LPM_OffMode;
 800600a:	230f      	movs	r3, #15
 800600c:	18fb      	adds	r3, r7, r3
 800600e:	2202      	movs	r2, #2
 8006010:	701a      	strb	r2, [r3, #0]
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	f383 8810 	msr	PRIMASK, r3
    }
  }

  RESTORE_PRIMASK( );

  return mode_selected;
 800601c:	230f      	movs	r3, #15
 800601e:	18fb      	adds	r3, r7, r3
 8006020:	781b      	ldrb	r3, [r3, #0]
}
 8006022:	0018      	movs	r0, r3
 8006024:	46bd      	mov	sp, r7
 8006026:	b004      	add	sp, #16
 8006028:	bd80      	pop	{r7, pc}
 800602a:	46c0      	nop			; (mov r8, r8)
 800602c:	2000070c 	.word	0x2000070c
 8006030:	20000710 	.word	0x20000710

08006034 <TimerInit>:
 * \retval true (the object is already in the list) or false
 */
static bool TimerExists( TimerEvent_t *obj );

void TimerInit( TimerEvent_t *obj, void ( *callback )( void *context ) )
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  obj->Timestamp = 0;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	601a      	str	r2, [r3, #0]
  obj->ReloadValue = 0;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	605a      	str	r2, [r3, #4]
  obj->IsStarted = false;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	721a      	strb	r2, [r3, #8]
  obj->IsNext2Expire = false;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	725a      	strb	r2, [r3, #9]
  obj->Callback = callback;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	683a      	ldr	r2, [r7, #0]
 800605a:	60da      	str	r2, [r3, #12]
  obj->Context = NULL;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	611a      	str	r2, [r3, #16]
  obj->Next = NULL;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	615a      	str	r2, [r3, #20]
}
 8006068:	46c0      	nop			; (mov r8, r8)
 800606a:	46bd      	mov	sp, r7
 800606c:	b002      	add	sp, #8
 800606e:	bd80      	pop	{r7, pc}

08006070 <TimerStart>:
{
  obj->Context = context;
}

void TimerStart( TimerEvent_t *obj )
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b088      	sub	sp, #32
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  uint32_t elapsedTime = 0;
 8006078:	2300      	movs	r3, #0
 800607a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800607c:	f3ef 8310 	mrs	r3, PRIMASK
 8006080:	617b      	str	r3, [r7, #20]
  return(result);
 8006082:	697b      	ldr	r3, [r7, #20]
  
  BACKUP_PRIMASK();
 8006084:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 8006086:	b672      	cpsid	i
  
  DISABLE_IRQ( );
  

  if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d005      	beq.n	800609a <TimerStart+0x2a>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	0018      	movs	r0, r3
 8006092:	f000 f909 	bl	80062a8 <TimerExists>
 8006096:	1e03      	subs	r3, r0, #0
 8006098:	d005      	beq.n	80060a6 <TimerStart+0x36>
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	f383 8810 	msr	PRIMASK, r3
  {
    RESTORE_PRIMASK( );
    return;
 80060a4:	e033      	b.n	800610e <TimerStart+0x9e>
  }
  obj->Timestamp = obj->ReloadValue;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	685a      	ldr	r2, [r3, #4]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	601a      	str	r2, [r3, #0]
  obj->IsStarted = true;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2201      	movs	r2, #1
 80060b2:	721a      	strb	r2, [r3, #8]
  obj->IsNext2Expire = false;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	725a      	strb	r2, [r3, #9]

  if( TimerListHead == NULL )
 80060ba:	4b16      	ldr	r3, [pc, #88]	; (8006114 <TimerStart+0xa4>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d106      	bne.n	80060d0 <TimerStart+0x60>
  {
    HW_RTC_SetTimerContext( );
 80060c2:	f000 fa49 	bl	8006558 <HW_RTC_SetTimerContext>
    TimerInsertNewHeadTimer( obj ); // insert a timeout at now+obj->Timestamp
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	0018      	movs	r0, r3
 80060ca:	f000 f95b 	bl	8006384 <TimerInsertNewHeadTimer>
 80060ce:	e019      	b.n	8006104 <TimerStart+0x94>
  }
  else 
  {
    elapsedTime = HW_RTC_GetTimerElapsedTime( );
 80060d0:	f000 f9f8 	bl	80064c4 <HW_RTC_GetTimerElapsedTime>
 80060d4:	0003      	movs	r3, r0
 80060d6:	61fb      	str	r3, [r7, #28]
    obj->Timestamp += elapsedTime;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	18d2      	adds	r2, r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	601a      	str	r2, [r3, #0]
  
    if( obj->Timestamp < TimerListHead->Timestamp )
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	4b0a      	ldr	r3, [pc, #40]	; (8006114 <TimerStart+0xa4>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d204      	bcs.n	80060fc <TimerStart+0x8c>
    {
      TimerInsertNewHeadTimer( obj);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	0018      	movs	r0, r3
 80060f6:	f000 f945 	bl	8006384 <TimerInsertNewHeadTimer>
 80060fa:	e003      	b.n	8006104 <TimerStart+0x94>
    }
    else
    {
      TimerInsertTimer( obj);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	0018      	movs	r0, r3
 8006100:	f000 f912 	bl	8006328 <TimerInsertTimer>
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	60fb      	str	r3, [r7, #12]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f383 8810 	msr	PRIMASK, r3
    }
  }
  RESTORE_PRIMASK( );
}
 800610e:	46bd      	mov	sp, r7
 8006110:	b008      	add	sp, #32
 8006112:	bd80      	pop	{r7, pc}
 8006114:	20000714 	.word	0x20000714

08006118 <TimerStop>:
    TimerSetTimeout( TimerListHead );
  }
}

void TimerStop( TimerEvent_t *obj ) 
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b088      	sub	sp, #32
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006120:	f3ef 8310 	mrs	r3, PRIMASK
 8006124:	613b      	str	r3, [r7, #16]
  return(result);
 8006126:	693b      	ldr	r3, [r7, #16]
  BACKUP_PRIMASK();
 8006128:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800612a:	b672      	cpsid	i
  
  DISABLE_IRQ( );
  
  TimerEvent_t* prev = TimerListHead;
 800612c:	4b36      	ldr	r3, [pc, #216]	; (8006208 <TimerStop+0xf0>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	61fb      	str	r3, [r7, #28]
  TimerEvent_t* cur = TimerListHead;
 8006132:	4b35      	ldr	r3, [pc, #212]	; (8006208 <TimerStop+0xf0>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	61bb      	str	r3, [r7, #24]

  // List is empty or the Obj to stop does not exist 
  if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 8006138:	4b33      	ldr	r3, [pc, #204]	; (8006208 <TimerStop+0xf0>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d002      	beq.n	8006146 <TimerStop+0x2e>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d105      	bne.n	8006152 <TimerStop+0x3a>
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f383 8810 	msr	PRIMASK, r3
  {
    RESTORE_PRIMASK( );
    return;
 8006150:	e057      	b.n	8006202 <TimerStop+0xea>
  }

  obj->IsStarted = false;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	721a      	strb	r2, [r3, #8]

  if( TimerListHead == obj ) // Stop the Head                  
 8006158:	4b2b      	ldr	r3, [pc, #172]	; (8006208 <TimerStop+0xf0>)
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	429a      	cmp	r2, r3
 8006160:	d147      	bne.n	80061f2 <TimerStop+0xda>
  {
    if( TimerListHead->IsNext2Expire == true ) // The head is already running 
 8006162:	4b29      	ldr	r3, [pc, #164]	; (8006208 <TimerStop+0xf0>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	7a5b      	ldrb	r3, [r3, #9]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d019      	beq.n	80061a0 <TimerStop+0x88>
    {  
	  
      TimerListHead->IsNext2Expire = false;
 800616c:	4b26      	ldr	r3, [pc, #152]	; (8006208 <TimerStop+0xf0>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2200      	movs	r2, #0
 8006172:	725a      	strb	r2, [r3, #9]
      if( TimerListHead->Next != NULL )
 8006174:	4b24      	ldr	r3, [pc, #144]	; (8006208 <TimerStop+0xf0>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	695b      	ldr	r3, [r3, #20]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00a      	beq.n	8006194 <TimerStop+0x7c>
      {
        TimerListHead = TimerListHead->Next;
 800617e:	4b22      	ldr	r3, [pc, #136]	; (8006208 <TimerStop+0xf0>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	695a      	ldr	r2, [r3, #20]
 8006184:	4b20      	ldr	r3, [pc, #128]	; (8006208 <TimerStop+0xf0>)
 8006186:	601a      	str	r2, [r3, #0]
        TimerSetTimeout( TimerListHead );
 8006188:	4b1f      	ldr	r3, [pc, #124]	; (8006208 <TimerStop+0xf0>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	0018      	movs	r0, r3
 800618e:	f000 f8a7 	bl	80062e0 <TimerSetTimeout>
 8006192:	e031      	b.n	80061f8 <TimerStop+0xe0>
      }
      else
      {
        HW_RTC_StopAlarm( );
 8006194:	f000 f9c0 	bl	8006518 <HW_RTC_StopAlarm>
        TimerListHead = NULL;
 8006198:	4b1b      	ldr	r3, [pc, #108]	; (8006208 <TimerStop+0xf0>)
 800619a:	2200      	movs	r2, #0
 800619c:	601a      	str	r2, [r3, #0]
 800619e:	e02b      	b.n	80061f8 <TimerStop+0xe0>
      }
    }
    else // Stop the head before it is started
    {   
      if( TimerListHead->Next != NULL )   
 80061a0:	4b19      	ldr	r3, [pc, #100]	; (8006208 <TimerStop+0xf0>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	695b      	ldr	r3, [r3, #20]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d005      	beq.n	80061b6 <TimerStop+0x9e>
      {
        TimerListHead = TimerListHead->Next;
 80061aa:	4b17      	ldr	r3, [pc, #92]	; (8006208 <TimerStop+0xf0>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	695a      	ldr	r2, [r3, #20]
 80061b0:	4b15      	ldr	r3, [pc, #84]	; (8006208 <TimerStop+0xf0>)
 80061b2:	601a      	str	r2, [r3, #0]
 80061b4:	e020      	b.n	80061f8 <TimerStop+0xe0>
      }
      else
      {
        TimerListHead = NULL;
 80061b6:	4b14      	ldr	r3, [pc, #80]	; (8006208 <TimerStop+0xf0>)
 80061b8:	2200      	movs	r2, #0
 80061ba:	601a      	str	r2, [r3, #0]
 80061bc:	e01c      	b.n	80061f8 <TimerStop+0xe0>
  }
  else // Stop an object within the list
  {      
    while( cur != NULL )
    {
      if( cur == obj )
 80061be:	69ba      	ldr	r2, [r7, #24]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d110      	bne.n	80061e8 <TimerStop+0xd0>
      {
        if( cur->Next != NULL )
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	695b      	ldr	r3, [r3, #20]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d006      	beq.n	80061dc <TimerStop+0xc4>
        {
          cur = cur->Next;
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	695b      	ldr	r3, [r3, #20]
 80061d2:	61bb      	str	r3, [r7, #24]
          prev->Next = cur;
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	69ba      	ldr	r2, [r7, #24]
 80061d8:	615a      	str	r2, [r3, #20]
        else
        {
          cur = NULL;
          prev->Next = cur;
        }
        break;
 80061da:	e00d      	b.n	80061f8 <TimerStop+0xe0>
          cur = NULL;
 80061dc:	2300      	movs	r3, #0
 80061de:	61bb      	str	r3, [r7, #24]
          prev->Next = cur;
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	69ba      	ldr	r2, [r7, #24]
 80061e4:	615a      	str	r2, [r3, #20]
        break;
 80061e6:	e007      	b.n	80061f8 <TimerStop+0xe0>
      }
      else
      {
        prev = cur;
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	61fb      	str	r3, [r7, #28]
        cur = cur->Next;
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	695b      	ldr	r3, [r3, #20]
 80061f0:	61bb      	str	r3, [r7, #24]
    while( cur != NULL )
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1e2      	bne.n	80061be <TimerStop+0xa6>
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	60bb      	str	r3, [r7, #8]
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	f383 8810 	msr	PRIMASK, r3
      }
    }   
  }
  
  RESTORE_PRIMASK( );
}  
 8006202:	46bd      	mov	sp, r7
 8006204:	b008      	add	sp, #32
 8006206:	bd80      	pop	{r7, pc}
 8006208:	20000714 	.word	0x20000714

0800620c <TimerSetValue>:
  TimerStop( obj );
  TimerStart( obj );
}

void TimerSetValue( TimerEvent_t *obj, uint32_t value )
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
  uint32_t minValue = 0;
 8006216:	2300      	movs	r3, #0
 8006218:	60bb      	str	r3, [r7, #8]
  uint32_t ticks = HW_RTC_ms2Tick( value );
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	0018      	movs	r0, r3
 800621e:	f000 f8f0 	bl	8006402 <HW_RTC_ms2Tick>
 8006222:	0003      	movs	r3, r0
 8006224:	60fb      	str	r3, [r7, #12]

  TimerStop( obj );
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	0018      	movs	r0, r3
 800622a:	f7ff ff75 	bl	8006118 <TimerStop>

  minValue = HW_RTC_GetMinimumTimeout( );
 800622e:	f000 f8e2 	bl	80063f6 <HW_RTC_GetMinimumTimeout>
 8006232:	0003      	movs	r3, r0
 8006234:	60bb      	str	r3, [r7, #8]
  
  if( ticks < minValue )
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	429a      	cmp	r2, r3
 800623c:	d201      	bcs.n	8006242 <TimerSetValue+0x36>
  {
    ticks = minValue;
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	60fb      	str	r3, [r7, #12]
  }

  obj->Timestamp = ticks;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	68fa      	ldr	r2, [r7, #12]
 8006246:	601a      	str	r2, [r3, #0]
  obj->ReloadValue = ticks;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	605a      	str	r2, [r3, #4]
}
 800624e:	46c0      	nop			; (mov r8, r8)
 8006250:	46bd      	mov	sp, r7
 8006252:	b004      	add	sp, #16
 8006254:	bd80      	pop	{r7, pc}

08006256 <TimerGetCurrentTime>:

TimerTime_t TimerGetCurrentTime( void )
{
 8006256:	b580      	push	{r7, lr}
 8006258:	b082      	sub	sp, #8
 800625a:	af00      	add	r7, sp, #0
  uint32_t now = HW_RTC_GetTimerValue( );
 800625c:	f000 f94a 	bl	80064f4 <HW_RTC_GetTimerValue>
 8006260:	0003      	movs	r3, r0
 8006262:	607b      	str	r3, [r7, #4]
  return  HW_RTC_Tick2ms(now);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	0018      	movs	r0, r3
 8006268:	f000 f8e3 	bl	8006432 <HW_RTC_Tick2ms>
 800626c:	0003      	movs	r3, r0
}
 800626e:	0018      	movs	r0, r3
 8006270:	46bd      	mov	sp, r7
 8006272:	b002      	add	sp, #8
 8006274:	bd80      	pop	{r7, pc}

08006276 <TimerGetElapsedTime>:

TimerTime_t TimerGetElapsedTime( TimerTime_t past )
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b084      	sub	sp, #16
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = HW_RTC_GetTimerValue( );
 800627e:	f000 f939 	bl	80064f4 <HW_RTC_GetTimerValue>
 8006282:	0003      	movs	r3, r0
 8006284:	60fb      	str	r3, [r7, #12]
  uint32_t pastInTicks = HW_RTC_ms2Tick( past );
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	0018      	movs	r0, r3
 800628a:	f000 f8ba 	bl	8006402 <HW_RTC_ms2Tick>
 800628e:	0003      	movs	r3, r0
 8006290:	60bb      	str	r3, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return HW_RTC_Tick2ms( nowInTicks- pastInTicks );
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	1ad3      	subs	r3, r2, r3
 8006298:	0018      	movs	r0, r3
 800629a:	f000 f8ca 	bl	8006432 <HW_RTC_Tick2ms>
 800629e:	0003      	movs	r3, r0
}
 80062a0:	0018      	movs	r0, r3
 80062a2:	46bd      	mov	sp, r7
 80062a4:	b004      	add	sp, #16
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <TimerExists>:

static bool TimerExists( TimerEvent_t *obj )
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  TimerEvent_t* cur = TimerListHead;
 80062b0:	4b0a      	ldr	r3, [pc, #40]	; (80062dc <TimerExists+0x34>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 80062b6:	e008      	b.n	80062ca <TimerExists+0x22>
  {
    if( cur == obj )
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d101      	bne.n	80062c4 <TimerExists+0x1c>
    {
      return true;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e006      	b.n	80062d2 <TimerExists+0x2a>
    }
    cur = cur->Next;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	695b      	ldr	r3, [r3, #20]
 80062c8:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d1f3      	bne.n	80062b8 <TimerExists+0x10>
  }
  return false;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	0018      	movs	r0, r3
 80062d4:	46bd      	mov	sp, r7
 80062d6:	b004      	add	sp, #16
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	46c0      	nop			; (mov r8, r8)
 80062dc:	20000714 	.word	0x20000714

080062e0 <TimerSetTimeout>:
static void TimerSetTimeout( TimerEvent_t *obj )
{
 80062e0:	b590      	push	{r4, r7, lr}
 80062e2:	b085      	sub	sp, #20
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  int32_t minTicks= HW_RTC_GetMinimumTimeout( );
 80062e8:	f000 f885 	bl	80063f6 <HW_RTC_GetMinimumTimeout>
 80062ec:	0003      	movs	r3, r0
 80062ee:	60fb      	str	r3, [r7, #12]
  obj->IsNext2Expire = true; 
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	725a      	strb	r2, [r3, #9]

  // In case deadline too soon
  if(obj->Timestamp  < (HW_RTC_GetTimerElapsedTime(  ) + minTicks) )
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681c      	ldr	r4, [r3, #0]
 80062fa:	f000 f8e3 	bl	80064c4 <HW_RTC_GetTimerElapsedTime>
 80062fe:	0002      	movs	r2, r0
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	18d3      	adds	r3, r2, r3
 8006304:	429c      	cmp	r4, r3
 8006306:	d206      	bcs.n	8006316 <TimerSetTimeout+0x36>
  {
    obj->Timestamp = HW_RTC_GetTimerElapsedTime(  ) + minTicks;
 8006308:	f000 f8dc 	bl	80064c4 <HW_RTC_GetTimerElapsedTime>
 800630c:	0002      	movs	r2, r0
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	18d2      	adds	r2, r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	601a      	str	r2, [r3, #0]
  }
  HW_RTC_SetAlarm( obj->Timestamp );
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	0018      	movs	r0, r3
 800631c:	f000 f8a2 	bl	8006464 <HW_RTC_SetAlarm>
}
 8006320:	46c0      	nop			; (mov r8, r8)
 8006322:	46bd      	mov	sp, r7
 8006324:	b005      	add	sp, #20
 8006326:	bd90      	pop	{r4, r7, pc}

08006328 <TimerInsertTimer>:
    return RtcTempCompensation( period, temperature );
}


static void TimerInsertTimer( TimerEvent_t *obj)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  TimerEvent_t* cur = TimerListHead;
 8006330:	4b13      	ldr	r3, [pc, #76]	; (8006380 <TimerInsertTimer+0x58>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	60fb      	str	r3, [r7, #12]
  TimerEvent_t* next = TimerListHead->Next;
 8006336:	4b12      	ldr	r3, [pc, #72]	; (8006380 <TimerInsertTimer+0x58>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	695b      	ldr	r3, [r3, #20]
 800633c:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800633e:	e012      	b.n	8006366 <TimerInsertTimer+0x3e>
  {  
    if( obj->Timestamp  > next->Timestamp )
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	429a      	cmp	r2, r3
 800634a:	d905      	bls.n	8006358 <TimerInsertTimer+0x30>
    {
        cur = next;
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	695b      	ldr	r3, [r3, #20]
 8006354:	60bb      	str	r3, [r7, #8]
 8006356:	e006      	b.n	8006366 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = obj;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	615a      	str	r2, [r3, #20]
        obj->Next = next;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	68ba      	ldr	r2, [r7, #8]
 8006362:	615a      	str	r2, [r3, #20]
        return;
 8006364:	e009      	b.n	800637a <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	695b      	ldr	r3, [r3, #20]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1e8      	bne.n	8006340 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = obj;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	615a      	str	r2, [r3, #20]
  obj->Next = NULL;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	615a      	str	r2, [r3, #20]
}
 800637a:	46bd      	mov	sp, r7
 800637c:	b004      	add	sp, #16
 800637e:	bd80      	pop	{r7, pc}
 8006380:	20000714 	.word	0x20000714

08006384 <TimerInsertNewHeadTimer>:

static void TimerInsertNewHeadTimer( TimerEvent_t *obj )
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  TimerEvent_t* cur = TimerListHead;
 800638c:	4b0b      	ldr	r3, [pc, #44]	; (80063bc <TimerInsertNewHeadTimer+0x38>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d002      	beq.n	800639e <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsNext2Expire = false;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	725a      	strb	r2, [r3, #9]
  }

  obj->Next = cur;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	615a      	str	r2, [r3, #20]
  TimerListHead = obj;
 80063a4:	4b05      	ldr	r3, [pc, #20]	; (80063bc <TimerInsertNewHeadTimer+0x38>)
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	601a      	str	r2, [r3, #0]
  TimerSetTimeout( TimerListHead );
 80063aa:	4b04      	ldr	r3, [pc, #16]	; (80063bc <TimerInsertNewHeadTimer+0x38>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	0018      	movs	r0, r3
 80063b0:	f7ff ff96 	bl	80062e0 <TimerSetTimeout>
}
 80063b4:	46c0      	nop			; (mov r8, r8)
 80063b6:	46bd      	mov	sp, r7
 80063b8:	b004      	add	sp, #16
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	20000714 	.word	0x20000714

080063c0 <memcpy1>:
{
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
}

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	1dbb      	adds	r3, r7, #6
 80063cc:	801a      	strh	r2, [r3, #0]
    while( size-- )
 80063ce:	e007      	b.n	80063e0 <memcpy1+0x20>
    {
        *dst++ = *src++;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	1c5a      	adds	r2, r3, #1
 80063d4:	60fa      	str	r2, [r7, #12]
 80063d6:	68ba      	ldr	r2, [r7, #8]
 80063d8:	1c51      	adds	r1, r2, #1
 80063da:	60b9      	str	r1, [r7, #8]
 80063dc:	7812      	ldrb	r2, [r2, #0]
 80063de:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80063e0:	1dbb      	adds	r3, r7, #6
 80063e2:	881b      	ldrh	r3, [r3, #0]
 80063e4:	1dba      	adds	r2, r7, #6
 80063e6:	1e59      	subs	r1, r3, #1
 80063e8:	8011      	strh	r1, [r2, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d1f0      	bne.n	80063d0 <memcpy1+0x10>
    }
}
 80063ee:	46c0      	nop			; (mov r8, r8)
 80063f0:	46bd      	mov	sp, r7
 80063f2:	b004      	add	sp, #16
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <HW_RTC_GetMinimumTimeout>:
 * @brief returns the wake up time in ticks
 * @param none
 * @retval wake up time in ticks
 */
uint32_t HW_RTC_GetMinimumTimeout( void )
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	af00      	add	r7, sp, #0
  return( MIN_ALARM_DELAY );
 80063fa:	2303      	movs	r3, #3
}
 80063fc:	0018      	movs	r0, r3
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}

08006402 <HW_RTC_ms2Tick>:
 * @brief converts time in ms to time in ticks
 * @param [IN] time in milliseconds
 * @retval returns time in timer ticks
 */
uint32_t HW_RTC_ms2Tick( TimerTime_t timeMilliSec )
{
 8006402:	b5b0      	push	{r4, r5, r7, lr}
 8006404:	b082      	sub	sp, #8
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
/*return( ( timeMicroSec / RTC_ALARM_TIME_BASE ) ); */
  return ( uint32_t) ( ( ((uint64_t)timeMilliSec) * CONV_DENOM ) / CONV_NUMER );
 800640a:	6879      	ldr	r1, [r7, #4]
 800640c:	000a      	movs	r2, r1
 800640e:	2100      	movs	r1, #0
 8006410:	000b      	movs	r3, r1
 8006412:	0e51      	lsrs	r1, r2, #25
 8006414:	01dd      	lsls	r5, r3, #7
 8006416:	430d      	orrs	r5, r1
 8006418:	01d4      	lsls	r4, r2, #7
 800641a:	227d      	movs	r2, #125	; 0x7d
 800641c:	2300      	movs	r3, #0
 800641e:	0020      	movs	r0, r4
 8006420:	0029      	movs	r1, r5
 8006422:	f7fa f841 	bl	80004a8 <__aeabi_uldivmod>
 8006426:	0003      	movs	r3, r0
 8006428:	000c      	movs	r4, r1
}
 800642a:	0018      	movs	r0, r3
 800642c:	46bd      	mov	sp, r7
 800642e:	b002      	add	sp, #8
 8006430:	bdb0      	pop	{r4, r5, r7, pc}

08006432 <HW_RTC_Tick2ms>:
 * @brief converts time in ticks to time in ms
 * @param [IN] time in timer ticks
 * @retval returns time in milliseconds
 */
TimerTime_t HW_RTC_Tick2ms( uint32_t tick )
{
 8006432:	b580      	push	{r7, lr}
 8006434:	b084      	sub	sp, #16
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
/*return( ( timeMicroSec * RTC_ALARM_TIME_BASE ) ); */
  uint32_t seconds = tick>>N_PREDIV_S;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	0a9b      	lsrs	r3, r3, #10
 800643e:	60fb      	str	r3, [r7, #12]
  tick = tick&PREDIV_S;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	059b      	lsls	r3, r3, #22
 8006444:	0d9b      	lsrs	r3, r3, #22
 8006446:	607b      	str	r3, [r7, #4]
  return  ( ( seconds*1000 ) + ((tick*1000)>>N_PREDIV_S) );
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	22fa      	movs	r2, #250	; 0xfa
 800644c:	0092      	lsls	r2, r2, #2
 800644e:	435a      	muls	r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	21fa      	movs	r1, #250	; 0xfa
 8006454:	0089      	lsls	r1, r1, #2
 8006456:	434b      	muls	r3, r1
 8006458:	0a9b      	lsrs	r3, r3, #10
 800645a:	18d3      	adds	r3, r2, r3
}
 800645c:	0018      	movs	r0, r3
 800645e:	46bd      	mov	sp, r7
 8006460:	b004      	add	sp, #16
 8006462:	bd80      	pop	{r7, pc}

08006464 <HW_RTC_SetAlarm>:
 * @brief Set the alarm
 * @note The alarm is set at now (read in this funtion) + timeout
 * @param timeout Duration of the Timer ticks
 */
void HW_RTC_SetAlarm( uint32_t timeout )
{
 8006464:	b590      	push	{r4, r7, lr}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  /* we don't go in Low Power mode for timeout below MIN_ALARM_DELAY */
  if ( (MIN_ALARM_DELAY + McuWakeUpTimeCal ) < ((timeout - HW_RTC_GetTimerElapsedTime( ) )) )
 800646c:	4b14      	ldr	r3, [pc, #80]	; (80064c0 <HW_RTC_SetAlarm+0x5c>)
 800646e:	2200      	movs	r2, #0
 8006470:	5e9b      	ldrsh	r3, [r3, r2]
 8006472:	3303      	adds	r3, #3
 8006474:	001c      	movs	r4, r3
 8006476:	f000 f825 	bl	80064c4 <HW_RTC_GetTimerElapsedTime>
 800647a:	0002      	movs	r2, r0
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	1a9b      	subs	r3, r3, r2
 8006480:	429c      	cmp	r4, r3
 8006482:	d204      	bcs.n	800648e <HW_RTC_SetAlarm+0x2a>
  {
    LPM_SetStopMode(LPM_RTC_Id , LPM_Enable );
 8006484:	2100      	movs	r1, #0
 8006486:	2004      	movs	r0, #4
 8006488:	f7ff fd72 	bl	8005f70 <LPM_SetStopMode>
 800648c:	e003      	b.n	8006496 <HW_RTC_SetAlarm+0x32>
  }
  else
  {
    LPM_SetStopMode(LPM_RTC_Id , LPM_Disable );
 800648e:	2101      	movs	r1, #1
 8006490:	2004      	movs	r0, #4
 8006492:	f7ff fd6d 	bl	8005f70 <LPM_SetStopMode>
  }

  /*In case stop mode is required */
  if( LPM_GetMode() == LPM_StopMode )
 8006496:	f7ff fd9d 	bl	8005fd4 <LPM_GetMode>
 800649a:	0003      	movs	r3, r0
 800649c:	2b01      	cmp	r3, #1
 800649e:	d106      	bne.n	80064ae <HW_RTC_SetAlarm+0x4a>
  {
    timeout = timeout -  McuWakeUpTimeCal;
 80064a0:	4b07      	ldr	r3, [pc, #28]	; (80064c0 <HW_RTC_SetAlarm+0x5c>)
 80064a2:	2200      	movs	r2, #0
 80064a4:	5e9b      	ldrsh	r3, [r3, r2]
 80064a6:	001a      	movs	r2, r3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	1a9b      	subs	r3, r3, r2
 80064ac:	607b      	str	r3, [r7, #4]
  }

  HW_RTC_StartWakeUpAlarm( timeout );
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	0018      	movs	r0, r3
 80064b2:	f000 f869 	bl	8006588 <HW_RTC_StartWakeUpAlarm>
}
 80064b6:	46c0      	nop			; (mov r8, r8)
 80064b8:	46bd      	mov	sp, r7
 80064ba:	b003      	add	sp, #12
 80064bc:	bd90      	pop	{r4, r7, pc}
 80064be:	46c0      	nop			; (mov r8, r8)
 80064c0:	20000718 	.word	0x20000718

080064c4 <HW_RTC_GetTimerElapsedTime>:
 * @brief Get the RTC timer elapsed time since the last Alarm was set
 * @param none
 * @retval RTC Elapsed time in ticks
 */
uint32_t HW_RTC_GetTimerElapsedTime( void )
{
 80064c4:	b590      	push	{r4, r7, lr}
 80064c6:	b089      	sub	sp, #36	; 0x24
 80064c8:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  uint32_t CalendarValue = (uint32_t) HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct );
 80064ca:	2308      	movs	r3, #8
 80064cc:	18fa      	adds	r2, r7, r3
 80064ce:	1d3b      	adds	r3, r7, #4
 80064d0:	0011      	movs	r1, r2
 80064d2:	0018      	movs	r0, r3
 80064d4:	f000 f9d4 	bl	8006880 <HW_RTC_GetCalendarValue>
 80064d8:	0003      	movs	r3, r0
 80064da:	000c      	movs	r4, r1
 80064dc:	61fb      	str	r3, [r7, #28]

  return( ( uint32_t )( CalendarValue - RtcTimerContext.Rtc_Time ));
 80064de:	4b04      	ldr	r3, [pc, #16]	; (80064f0 <HW_RTC_GetTimerElapsedTime+0x2c>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	69fa      	ldr	r2, [r7, #28]
 80064e4:	1ad3      	subs	r3, r2, r3
}
 80064e6:	0018      	movs	r0, r3
 80064e8:	46bd      	mov	sp, r7
 80064ea:	b009      	add	sp, #36	; 0x24
 80064ec:	bd90      	pop	{r4, r7, pc}
 80064ee:	46c0      	nop			; (mov r8, r8)
 80064f0:	20000768 	.word	0x20000768

080064f4 <HW_RTC_GetTimerValue>:
 * @brief Get the RTC timer value
 * @param none
 * @retval RTC Timer value in ticks
 */
uint32_t HW_RTC_GetTimerValue( void )
{
 80064f4:	b590      	push	{r4, r7, lr}
 80064f6:	b089      	sub	sp, #36	; 0x24
 80064f8:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  uint32_t CalendarValue = (uint32_t) HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct );
 80064fa:	2308      	movs	r3, #8
 80064fc:	18fa      	adds	r2, r7, r3
 80064fe:	1d3b      	adds	r3, r7, #4
 8006500:	0011      	movs	r1, r2
 8006502:	0018      	movs	r0, r3
 8006504:	f000 f9bc 	bl	8006880 <HW_RTC_GetCalendarValue>
 8006508:	0003      	movs	r3, r0
 800650a:	000c      	movs	r4, r1
 800650c:	61fb      	str	r3, [r7, #28]

  return( CalendarValue );
 800650e:	69fb      	ldr	r3, [r7, #28]
}
 8006510:	0018      	movs	r0, r3
 8006512:	46bd      	mov	sp, r7
 8006514:	b009      	add	sp, #36	; 0x24
 8006516:	bd90      	pop	{r4, r7, pc}

08006518 <HW_RTC_StopAlarm>:
 * @brief Stop the Alarm
 * @param none
 * @retval none
 */
void HW_RTC_StopAlarm( void )
{
 8006518:	b580      	push	{r7, lr}
 800651a:	af00      	add	r7, sp, #0
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A );
 800651c:	2380      	movs	r3, #128	; 0x80
 800651e:	005a      	lsls	r2, r3, #1
 8006520:	4b0a      	ldr	r3, [pc, #40]	; (800654c <HW_RTC_StopAlarm+0x34>)
 8006522:	0011      	movs	r1, r2
 8006524:	0018      	movs	r0, r3
 8006526:	f7fd fe21 	bl	800416c <HAL_RTC_DeactivateAlarm>
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG( &RtcHandle, RTC_FLAG_ALRAF);
 800652a:	4b08      	ldr	r3, [pc, #32]	; (800654c <HW_RTC_StopAlarm+0x34>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a07      	ldr	r2, [pc, #28]	; (800654c <HW_RTC_StopAlarm+0x34>)
 8006530:	6812      	ldr	r2, [r2, #0]
 8006532:	68d2      	ldr	r2, [r2, #12]
 8006534:	21ff      	movs	r1, #255	; 0xff
 8006536:	400a      	ands	r2, r1
 8006538:	4905      	ldr	r1, [pc, #20]	; (8006550 <HW_RTC_StopAlarm+0x38>)
 800653a:	430a      	orrs	r2, r1
 800653c:	60da      	str	r2, [r3, #12]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800653e:	4b05      	ldr	r3, [pc, #20]	; (8006554 <HW_RTC_StopAlarm+0x3c>)
 8006540:	2280      	movs	r2, #128	; 0x80
 8006542:	0292      	lsls	r2, r2, #10
 8006544:	615a      	str	r2, [r3, #20]
}
 8006546:	46c0      	nop			; (mov r8, r8)
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}
 800654c:	2000071c 	.word	0x2000071c
 8006550:	fffffe7f 	.word	0xfffffe7f
 8006554:	40010400 	.word	0x40010400

08006558 <HW_RTC_SetTimerContext>:
 * @brief set Time Reference set also the RTC_DateStruct and RTC_TimeStruct
 * @param none
 * @retval Timer Value
 */
uint32_t HW_RTC_SetTimerContext( void )
{
 8006558:	b5b0      	push	{r4, r5, r7, lr}
 800655a:	af00      	add	r7, sp, #0
  RtcTimerContext.Rtc_Time = ( uint32_t ) HW_RTC_GetCalendarValue( &RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time );
 800655c:	4a07      	ldr	r2, [pc, #28]	; (800657c <HW_RTC_SetTimerContext+0x24>)
 800655e:	4b08      	ldr	r3, [pc, #32]	; (8006580 <HW_RTC_SetTimerContext+0x28>)
 8006560:	0011      	movs	r1, r2
 8006562:	0018      	movs	r0, r3
 8006564:	f000 f98c 	bl	8006880 <HW_RTC_GetCalendarValue>
 8006568:	0003      	movs	r3, r0
 800656a:	000c      	movs	r4, r1
 800656c:	001a      	movs	r2, r3
 800656e:	4b05      	ldr	r3, [pc, #20]	; (8006584 <HW_RTC_SetTimerContext+0x2c>)
 8006570:	601a      	str	r2, [r3, #0]
  return ( uint32_t ) RtcTimerContext.Rtc_Time;
 8006572:	4b04      	ldr	r3, [pc, #16]	; (8006584 <HW_RTC_SetTimerContext+0x2c>)
 8006574:	681b      	ldr	r3, [r3, #0]
}
 8006576:	0018      	movs	r0, r3
 8006578:	46bd      	mov	sp, r7
 800657a:	bdb0      	pop	{r4, r5, r7, pc}
 800657c:	2000076c 	.word	0x2000076c
 8006580:	20000780 	.word	0x20000780
 8006584:	20000768 	.word	0x20000768

08006588 <HW_RTC_StartWakeUpAlarm>:
 * @note  alarm in RtcTimerContext.Rtc_Time + timeoutValue
 * @param timeoutValue in ticks
 * @retval none
 */
static void HW_RTC_StartWakeUpAlarm( uint32_t timeoutValue )
{
 8006588:	b590      	push	{r4, r7, lr}
 800658a:	b08d      	sub	sp, #52	; 0x34
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  uint16_t rtcAlarmSubSeconds = 0;
 8006590:	232e      	movs	r3, #46	; 0x2e
 8006592:	18fb      	adds	r3, r7, r3
 8006594:	2200      	movs	r2, #0
 8006596:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmSeconds = 0;
 8006598:	232c      	movs	r3, #44	; 0x2c
 800659a:	18fb      	adds	r3, r7, r3
 800659c:	2200      	movs	r2, #0
 800659e:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmMinutes = 0;
 80065a0:	232a      	movs	r3, #42	; 0x2a
 80065a2:	18fb      	adds	r3, r7, r3
 80065a4:	2200      	movs	r2, #0
 80065a6:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmHours = 0;
 80065a8:	2328      	movs	r3, #40	; 0x28
 80065aa:	18fb      	adds	r3, r7, r3
 80065ac:	2200      	movs	r2, #0
 80065ae:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmDays = 0;
 80065b0:	2326      	movs	r3, #38	; 0x26
 80065b2:	18fb      	adds	r3, r7, r3
 80065b4:	2200      	movs	r2, #0
 80065b6:	801a      	strh	r2, [r3, #0]
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 80065b8:	2310      	movs	r3, #16
 80065ba:	18fa      	adds	r2, r7, r3
 80065bc:	4ba5      	ldr	r3, [pc, #660]	; (8006854 <HW_RTC_StartWakeUpAlarm+0x2cc>)
 80065be:	3304      	adds	r3, #4
 80065c0:	cb13      	ldmia	r3!, {r0, r1, r4}
 80065c2:	c213      	stmia	r2!, {r0, r1, r4}
 80065c4:	cb03      	ldmia	r3!, {r0, r1}
 80065c6:	c203      	stmia	r2!, {r0, r1}
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 80065c8:	230c      	movs	r3, #12
 80065ca:	18fb      	adds	r3, r7, r3
 80065cc:	4aa1      	ldr	r2, [pc, #644]	; (8006854 <HW_RTC_StartWakeUpAlarm+0x2cc>)
 80065ce:	6992      	ldr	r2, [r2, #24]
 80065d0:	601a      	str	r2, [r3, #0]

  HW_RTC_StopAlarm( );
 80065d2:	f7ff ffa1 	bl	8006518 <HW_RTC_StopAlarm>

  /*reverse counter */
  rtcAlarmSubSeconds =  PREDIV_S - RTC_TimeStruct.SubSeconds;
 80065d6:	2310      	movs	r3, #16
 80065d8:	18fb      	adds	r3, r7, r3
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	b29a      	uxth	r2, r3
 80065de:	232e      	movs	r3, #46	; 0x2e
 80065e0:	18fb      	adds	r3, r7, r3
 80065e2:	499d      	ldr	r1, [pc, #628]	; (8006858 <HW_RTC_StartWakeUpAlarm+0x2d0>)
 80065e4:	1a8a      	subs	r2, r1, r2
 80065e6:	801a      	strh	r2, [r3, #0]
  rtcAlarmSubSeconds += ( timeoutValue & PREDIV_S);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	059b      	lsls	r3, r3, #22
 80065ee:	0d9b      	lsrs	r3, r3, #22
 80065f0:	b299      	uxth	r1, r3
 80065f2:	232e      	movs	r3, #46	; 0x2e
 80065f4:	18fb      	adds	r3, r7, r3
 80065f6:	222e      	movs	r2, #46	; 0x2e
 80065f8:	18ba      	adds	r2, r7, r2
 80065fa:	8812      	ldrh	r2, [r2, #0]
 80065fc:	188a      	adds	r2, r1, r2
 80065fe:	801a      	strh	r2, [r3, #0]
  /* convert timeout  to seconds */
  timeoutValue >>= N_PREDIV_S;  /* convert timeout  in seconds */
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	0a9b      	lsrs	r3, r3, #10
 8006604:	607b      	str	r3, [r7, #4]

  /*convert microsecs to RTC format and add to 'Now' */
  rtcAlarmDays =  RTC_DateStruct.Date;
 8006606:	230c      	movs	r3, #12
 8006608:	18fb      	adds	r3, r7, r3
 800660a:	789a      	ldrb	r2, [r3, #2]
 800660c:	2326      	movs	r3, #38	; 0x26
 800660e:	18fb      	adds	r3, r7, r3
 8006610:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1DAY)
 8006612:	e00b      	b.n	800662c <HW_RTC_StartWakeUpAlarm+0xa4>
  {
    timeoutValue -= SECONDS_IN_1DAY;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a91      	ldr	r2, [pc, #580]	; (800685c <HW_RTC_StartWakeUpAlarm+0x2d4>)
 8006618:	4694      	mov	ip, r2
 800661a:	4463      	add	r3, ip
 800661c:	607b      	str	r3, [r7, #4]
    rtcAlarmDays++;
 800661e:	2326      	movs	r3, #38	; 0x26
 8006620:	18fb      	adds	r3, r7, r3
 8006622:	881a      	ldrh	r2, [r3, #0]
 8006624:	2326      	movs	r3, #38	; 0x26
 8006626:	18fb      	adds	r3, r7, r3
 8006628:	3201      	adds	r2, #1
 800662a:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1DAY)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a8c      	ldr	r2, [pc, #560]	; (8006860 <HW_RTC_StartWakeUpAlarm+0x2d8>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d8ef      	bhi.n	8006614 <HW_RTC_StartWakeUpAlarm+0x8c>
  }

  /* calc hours */
  rtcAlarmHours = RTC_TimeStruct.Hours;
 8006634:	2310      	movs	r3, #16
 8006636:	18fb      	adds	r3, r7, r3
 8006638:	781a      	ldrb	r2, [r3, #0]
 800663a:	2328      	movs	r3, #40	; 0x28
 800663c:	18fb      	adds	r3, r7, r3
 800663e:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1HOUR)
 8006640:	e00b      	b.n	800665a <HW_RTC_StartWakeUpAlarm+0xd2>
  {
    timeoutValue -= SECONDS_IN_1HOUR;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a87      	ldr	r2, [pc, #540]	; (8006864 <HW_RTC_StartWakeUpAlarm+0x2dc>)
 8006646:	4694      	mov	ip, r2
 8006648:	4463      	add	r3, ip
 800664a:	607b      	str	r3, [r7, #4]
    rtcAlarmHours++;
 800664c:	2328      	movs	r3, #40	; 0x28
 800664e:	18fb      	adds	r3, r7, r3
 8006650:	881a      	ldrh	r2, [r3, #0]
 8006652:	2328      	movs	r3, #40	; 0x28
 8006654:	18fb      	adds	r3, r7, r3
 8006656:	3201      	adds	r2, #1
 8006658:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1HOUR)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4a82      	ldr	r2, [pc, #520]	; (8006868 <HW_RTC_StartWakeUpAlarm+0x2e0>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d8ef      	bhi.n	8006642 <HW_RTC_StartWakeUpAlarm+0xba>
  }

  /* calc minutes */
  rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 8006662:	2310      	movs	r3, #16
 8006664:	18fb      	adds	r3, r7, r3
 8006666:	785a      	ldrb	r2, [r3, #1]
 8006668:	232a      	movs	r3, #42	; 0x2a
 800666a:	18fb      	adds	r3, r7, r3
 800666c:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 800666e:	e009      	b.n	8006684 <HW_RTC_StartWakeUpAlarm+0xfc>
  {
    timeoutValue -= SECONDS_IN_1MINUTE;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	3b3c      	subs	r3, #60	; 0x3c
 8006674:	607b      	str	r3, [r7, #4]
    rtcAlarmMinutes++;
 8006676:	232a      	movs	r3, #42	; 0x2a
 8006678:	18fb      	adds	r3, r7, r3
 800667a:	881a      	ldrh	r2, [r3, #0]
 800667c:	232a      	movs	r3, #42	; 0x2a
 800667e:	18fb      	adds	r3, r7, r3
 8006680:	3201      	adds	r2, #1
 8006682:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2b3b      	cmp	r3, #59	; 0x3b
 8006688:	d8f2      	bhi.n	8006670 <HW_RTC_StartWakeUpAlarm+0xe8>
  }

  /* calc seconds */
  rtcAlarmSeconds =  RTC_TimeStruct.Seconds + timeoutValue;
 800668a:	2310      	movs	r3, #16
 800668c:	18fb      	adds	r3, r7, r3
 800668e:	789b      	ldrb	r3, [r3, #2]
 8006690:	b299      	uxth	r1, r3
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	b29a      	uxth	r2, r3
 8006696:	232c      	movs	r3, #44	; 0x2c
 8006698:	18fb      	adds	r3, r7, r3
 800669a:	188a      	adds	r2, r1, r2
 800669c:	801a      	strh	r2, [r3, #0]

  /***** correct for modulo********/
  while (rtcAlarmSubSeconds >= (PREDIV_S+1))
 800669e:	e00f      	b.n	80066c0 <HW_RTC_StartWakeUpAlarm+0x138>
  {
    rtcAlarmSubSeconds -= (PREDIV_S+1);
 80066a0:	232e      	movs	r3, #46	; 0x2e
 80066a2:	18fb      	adds	r3, r7, r3
 80066a4:	222e      	movs	r2, #46	; 0x2e
 80066a6:	18ba      	adds	r2, r7, r2
 80066a8:	8812      	ldrh	r2, [r2, #0]
 80066aa:	4970      	ldr	r1, [pc, #448]	; (800686c <HW_RTC_StartWakeUpAlarm+0x2e4>)
 80066ac:	468c      	mov	ip, r1
 80066ae:	4462      	add	r2, ip
 80066b0:	801a      	strh	r2, [r3, #0]
    rtcAlarmSeconds++;
 80066b2:	232c      	movs	r3, #44	; 0x2c
 80066b4:	18fb      	adds	r3, r7, r3
 80066b6:	881a      	ldrh	r2, [r3, #0]
 80066b8:	232c      	movs	r3, #44	; 0x2c
 80066ba:	18fb      	adds	r3, r7, r3
 80066bc:	3201      	adds	r2, #1
 80066be:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmSubSeconds >= (PREDIV_S+1))
 80066c0:	232e      	movs	r3, #46	; 0x2e
 80066c2:	18fb      	adds	r3, r7, r3
 80066c4:	881b      	ldrh	r3, [r3, #0]
 80066c6:	4a64      	ldr	r2, [pc, #400]	; (8006858 <HW_RTC_StartWakeUpAlarm+0x2d0>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d8e9      	bhi.n	80066a0 <HW_RTC_StartWakeUpAlarm+0x118>
  }

  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 80066cc:	e00d      	b.n	80066ea <HW_RTC_StartWakeUpAlarm+0x162>
  {
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 80066ce:	232c      	movs	r3, #44	; 0x2c
 80066d0:	18fb      	adds	r3, r7, r3
 80066d2:	222c      	movs	r2, #44	; 0x2c
 80066d4:	18ba      	adds	r2, r7, r2
 80066d6:	8812      	ldrh	r2, [r2, #0]
 80066d8:	3a3c      	subs	r2, #60	; 0x3c
 80066da:	801a      	strh	r2, [r3, #0]
    rtcAlarmMinutes++;
 80066dc:	232a      	movs	r3, #42	; 0x2a
 80066de:	18fb      	adds	r3, r7, r3
 80066e0:	881a      	ldrh	r2, [r3, #0]
 80066e2:	232a      	movs	r3, #42	; 0x2a
 80066e4:	18fb      	adds	r3, r7, r3
 80066e6:	3201      	adds	r2, #1
 80066e8:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 80066ea:	232c      	movs	r3, #44	; 0x2c
 80066ec:	18fb      	adds	r3, r7, r3
 80066ee:	881b      	ldrh	r3, [r3, #0]
 80066f0:	2b3b      	cmp	r3, #59	; 0x3b
 80066f2:	d8ec      	bhi.n	80066ce <HW_RTC_StartWakeUpAlarm+0x146>
  }

  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 80066f4:	e00d      	b.n	8006712 <HW_RTC_StartWakeUpAlarm+0x18a>
  {
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 80066f6:	232a      	movs	r3, #42	; 0x2a
 80066f8:	18fb      	adds	r3, r7, r3
 80066fa:	222a      	movs	r2, #42	; 0x2a
 80066fc:	18ba      	adds	r2, r7, r2
 80066fe:	8812      	ldrh	r2, [r2, #0]
 8006700:	3a3c      	subs	r2, #60	; 0x3c
 8006702:	801a      	strh	r2, [r3, #0]
    rtcAlarmHours++;
 8006704:	2328      	movs	r3, #40	; 0x28
 8006706:	18fb      	adds	r3, r7, r3
 8006708:	881a      	ldrh	r2, [r3, #0]
 800670a:	2328      	movs	r3, #40	; 0x28
 800670c:	18fb      	adds	r3, r7, r3
 800670e:	3201      	adds	r2, #1
 8006710:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 8006712:	232a      	movs	r3, #42	; 0x2a
 8006714:	18fb      	adds	r3, r7, r3
 8006716:	881b      	ldrh	r3, [r3, #0]
 8006718:	2b3b      	cmp	r3, #59	; 0x3b
 800671a:	d8ec      	bhi.n	80066f6 <HW_RTC_StartWakeUpAlarm+0x16e>
  }

  while (rtcAlarmHours >= HOURS_IN_1DAY)
 800671c:	e00d      	b.n	800673a <HW_RTC_StartWakeUpAlarm+0x1b2>
  {
    rtcAlarmHours -= HOURS_IN_1DAY;
 800671e:	2328      	movs	r3, #40	; 0x28
 8006720:	18fb      	adds	r3, r7, r3
 8006722:	2228      	movs	r2, #40	; 0x28
 8006724:	18ba      	adds	r2, r7, r2
 8006726:	8812      	ldrh	r2, [r2, #0]
 8006728:	3a18      	subs	r2, #24
 800672a:	801a      	strh	r2, [r3, #0]
    rtcAlarmDays++;
 800672c:	2326      	movs	r3, #38	; 0x26
 800672e:	18fb      	adds	r3, r7, r3
 8006730:	881a      	ldrh	r2, [r3, #0]
 8006732:	2326      	movs	r3, #38	; 0x26
 8006734:	18fb      	adds	r3, r7, r3
 8006736:	3201      	adds	r2, #1
 8006738:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 800673a:	2328      	movs	r3, #40	; 0x28
 800673c:	18fb      	adds	r3, r7, r3
 800673e:	881b      	ldrh	r3, [r3, #0]
 8006740:	2b17      	cmp	r3, #23
 8006742:	d8ec      	bhi.n	800671e <HW_RTC_StartWakeUpAlarm+0x196>
  }

  if( RTC_DateStruct.Year % 4 == 0 )
 8006744:	230c      	movs	r3, #12
 8006746:	18fb      	adds	r3, r7, r3
 8006748:	78db      	ldrb	r3, [r3, #3]
 800674a:	2203      	movs	r2, #3
 800674c:	4013      	ands	r3, r2
 800674e:	b2db      	uxtb	r3, r3
 8006750:	2b00      	cmp	r3, #0
 8006752:	d11d      	bne.n	8006790 <HW_RTC_StartWakeUpAlarm+0x208>
  {
    if( rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ] )
 8006754:	230c      	movs	r3, #12
 8006756:	18fb      	adds	r3, r7, r3
 8006758:	785b      	ldrb	r3, [r3, #1]
 800675a:	3b01      	subs	r3, #1
 800675c:	4a44      	ldr	r2, [pc, #272]	; (8006870 <HW_RTC_StartWakeUpAlarm+0x2e8>)
 800675e:	5cd3      	ldrb	r3, [r2, r3]
 8006760:	b29b      	uxth	r3, r3
 8006762:	2226      	movs	r2, #38	; 0x26
 8006764:	18ba      	adds	r2, r7, r2
 8006766:	8812      	ldrh	r2, [r2, #0]
 8006768:	429a      	cmp	r2, r3
 800676a:	d92e      	bls.n	80067ca <HW_RTC_StartWakeUpAlarm+0x242>
    {
      rtcAlarmDays = rtcAlarmDays % DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ];
 800676c:	2326      	movs	r3, #38	; 0x26
 800676e:	18fb      	adds	r3, r7, r3
 8006770:	8818      	ldrh	r0, [r3, #0]
 8006772:	230c      	movs	r3, #12
 8006774:	18fb      	adds	r3, r7, r3
 8006776:	785b      	ldrb	r3, [r3, #1]
 8006778:	3b01      	subs	r3, #1
 800677a:	4a3d      	ldr	r2, [pc, #244]	; (8006870 <HW_RTC_StartWakeUpAlarm+0x2e8>)
 800677c:	5cd3      	ldrb	r3, [r2, r3]
 800677e:	0019      	movs	r1, r3
 8006780:	f7f9 fe4e 	bl	8000420 <__aeabi_idivmod>
 8006784:	000b      	movs	r3, r1
 8006786:	001a      	movs	r2, r3
 8006788:	2326      	movs	r3, #38	; 0x26
 800678a:	18fb      	adds	r3, r7, r3
 800678c:	801a      	strh	r2, [r3, #0]
 800678e:	e01c      	b.n	80067ca <HW_RTC_StartWakeUpAlarm+0x242>
    }
  }
  else
  {
    if( rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ] )
 8006790:	230c      	movs	r3, #12
 8006792:	18fb      	adds	r3, r7, r3
 8006794:	785b      	ldrb	r3, [r3, #1]
 8006796:	3b01      	subs	r3, #1
 8006798:	4a36      	ldr	r2, [pc, #216]	; (8006874 <HW_RTC_StartWakeUpAlarm+0x2ec>)
 800679a:	5cd3      	ldrb	r3, [r2, r3]
 800679c:	b29b      	uxth	r3, r3
 800679e:	2226      	movs	r2, #38	; 0x26
 80067a0:	18ba      	adds	r2, r7, r2
 80067a2:	8812      	ldrh	r2, [r2, #0]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d910      	bls.n	80067ca <HW_RTC_StartWakeUpAlarm+0x242>
    {
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 80067a8:	2326      	movs	r3, #38	; 0x26
 80067aa:	18fb      	adds	r3, r7, r3
 80067ac:	8818      	ldrh	r0, [r3, #0]
 80067ae:	230c      	movs	r3, #12
 80067b0:	18fb      	adds	r3, r7, r3
 80067b2:	785b      	ldrb	r3, [r3, #1]
 80067b4:	3b01      	subs	r3, #1
 80067b6:	4a2f      	ldr	r2, [pc, #188]	; (8006874 <HW_RTC_StartWakeUpAlarm+0x2ec>)
 80067b8:	5cd3      	ldrb	r3, [r2, r3]
 80067ba:	0019      	movs	r1, r3
 80067bc:	f7f9 fe30 	bl	8000420 <__aeabi_idivmod>
 80067c0:	000b      	movs	r3, r1
 80067c2:	001a      	movs	r2, r3
 80067c4:	2326      	movs	r3, #38	; 0x26
 80067c6:	18fb      	adds	r3, r7, r3
 80067c8:	801a      	strh	r2, [r3, #0]
    }
  }

  /* Set RTC_AlarmStructure with calculated values*/
  RTC_AlarmStructure.AlarmTime.SubSeconds = PREDIV_S-rtcAlarmSubSeconds;
 80067ca:	232e      	movs	r3, #46	; 0x2e
 80067cc:	18fb      	adds	r3, r7, r3
 80067ce:	881b      	ldrh	r3, [r3, #0]
 80067d0:	4a21      	ldr	r2, [pc, #132]	; (8006858 <HW_RTC_StartWakeUpAlarm+0x2d0>)
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	001a      	movs	r2, r3
 80067d6:	4b28      	ldr	r3, [pc, #160]	; (8006878 <HW_RTC_StartWakeUpAlarm+0x2f0>)
 80067d8:	605a      	str	r2, [r3, #4]
  RTC_AlarmStructure.AlarmSubSecondMask  = HW_RTC_ALARMSUBSECONDMASK;
 80067da:	4b27      	ldr	r3, [pc, #156]	; (8006878 <HW_RTC_StartWakeUpAlarm+0x2f0>)
 80067dc:	22a0      	movs	r2, #160	; 0xa0
 80067de:	0512      	lsls	r2, r2, #20
 80067e0:	619a      	str	r2, [r3, #24]
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 80067e2:	232c      	movs	r3, #44	; 0x2c
 80067e4:	18fb      	adds	r3, r7, r3
 80067e6:	881b      	ldrh	r3, [r3, #0]
 80067e8:	b2da      	uxtb	r2, r3
 80067ea:	4b23      	ldr	r3, [pc, #140]	; (8006878 <HW_RTC_StartWakeUpAlarm+0x2f0>)
 80067ec:	709a      	strb	r2, [r3, #2]
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 80067ee:	232a      	movs	r3, #42	; 0x2a
 80067f0:	18fb      	adds	r3, r7, r3
 80067f2:	881b      	ldrh	r3, [r3, #0]
 80067f4:	b2da      	uxtb	r2, r3
 80067f6:	4b20      	ldr	r3, [pc, #128]	; (8006878 <HW_RTC_StartWakeUpAlarm+0x2f0>)
 80067f8:	705a      	strb	r2, [r3, #1]
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 80067fa:	2328      	movs	r3, #40	; 0x28
 80067fc:	18fb      	adds	r3, r7, r3
 80067fe:	881b      	ldrh	r3, [r3, #0]
 8006800:	b2da      	uxtb	r2, r3
 8006802:	4b1d      	ldr	r3, [pc, #116]	; (8006878 <HW_RTC_StartWakeUpAlarm+0x2f0>)
 8006804:	701a      	strb	r2, [r3, #0]
  RTC_AlarmStructure.AlarmDateWeekDay    = ( uint8_t )rtcAlarmDays;
 8006806:	2326      	movs	r3, #38	; 0x26
 8006808:	18fb      	adds	r3, r7, r3
 800680a:	881b      	ldrh	r3, [r3, #0]
 800680c:	b2d9      	uxtb	r1, r3
 800680e:	4b1a      	ldr	r3, [pc, #104]	; (8006878 <HW_RTC_StartWakeUpAlarm+0x2f0>)
 8006810:	2220      	movs	r2, #32
 8006812:	5499      	strb	r1, [r3, r2]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 8006814:	2310      	movs	r3, #16
 8006816:	18fb      	adds	r3, r7, r3
 8006818:	78da      	ldrb	r2, [r3, #3]
 800681a:	4b17      	ldr	r3, [pc, #92]	; (8006878 <HW_RTC_StartWakeUpAlarm+0x2f0>)
 800681c:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800681e:	4b16      	ldr	r3, [pc, #88]	; (8006878 <HW_RTC_StartWakeUpAlarm+0x2f0>)
 8006820:	2200      	movs	r2, #0
 8006822:	61da      	str	r2, [r3, #28]
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 8006824:	4b14      	ldr	r3, [pc, #80]	; (8006878 <HW_RTC_StartWakeUpAlarm+0x2f0>)
 8006826:	2200      	movs	r2, #0
 8006828:	615a      	str	r2, [r3, #20]
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 800682a:	4b13      	ldr	r3, [pc, #76]	; (8006878 <HW_RTC_StartWakeUpAlarm+0x2f0>)
 800682c:	2280      	movs	r2, #128	; 0x80
 800682e:	0052      	lsls	r2, r2, #1
 8006830:	625a      	str	r2, [r3, #36]	; 0x24
  RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8006832:	4b11      	ldr	r3, [pc, #68]	; (8006878 <HW_RTC_StartWakeUpAlarm+0x2f0>)
 8006834:	2200      	movs	r2, #0
 8006836:	60da      	str	r2, [r3, #12]
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8006838:	4b0f      	ldr	r3, [pc, #60]	; (8006878 <HW_RTC_StartWakeUpAlarm+0x2f0>)
 800683a:	2200      	movs	r2, #0
 800683c:	611a      	str	r2, [r3, #16]

  /* Set RTC_Alarm */
  HAL_RTC_SetAlarm_IT( &RtcHandle, &RTC_AlarmStructure, RTC_FORMAT_BIN );
 800683e:	490e      	ldr	r1, [pc, #56]	; (8006878 <HW_RTC_StartWakeUpAlarm+0x2f0>)
 8006840:	4b0e      	ldr	r3, [pc, #56]	; (800687c <HW_RTC_StartWakeUpAlarm+0x2f4>)
 8006842:	2200      	movs	r2, #0
 8006844:	0018      	movs	r0, r3
 8006846:	f7fd fb45 	bl	8003ed4 <HAL_RTC_SetAlarm_IT>
}
 800684a:	46c0      	nop			; (mov r8, r8)
 800684c:	46bd      	mov	sp, r7
 800684e:	b00d      	add	sp, #52	; 0x34
 8006850:	bd90      	pop	{r4, r7, pc}
 8006852:	46c0      	nop			; (mov r8, r8)
 8006854:	20000768 	.word	0x20000768
 8006858:	000003ff 	.word	0x000003ff
 800685c:	fffeae80 	.word	0xfffeae80
 8006860:	0001517f 	.word	0x0001517f
 8006864:	fffff1f0 	.word	0xfffff1f0
 8006868:	00000e0f 	.word	0x00000e0f
 800686c:	fffffc00 	.word	0xfffffc00
 8006870:	0800d780 	.word	0x0800d780
 8006874:	0800d774 	.word	0x0800d774
 8006878:	20000740 	.word	0x20000740
 800687c:	2000071c 	.word	0x2000071c

08006880 <HW_RTC_GetCalendarValue>:
 * @param pointer to RTC_DateStruct
 * @param pointer to RTC_TimeStruct
 * @retval time in ticks
 */
static uint64_t HW_RTC_GetCalendarValue( RTC_DateTypeDef* RTC_DateStruct, RTC_TimeTypeDef* RTC_TimeStruct )
{
 8006880:	b5b0      	push	{r4, r5, r7, lr}
 8006882:	b08c      	sub	sp, #48	; 0x30
 8006884:	af00      	add	r7, sp, #0
 8006886:	6178      	str	r0, [r7, #20]
 8006888:	6139      	str	r1, [r7, #16]
  uint64_t calendarValue = 0;
 800688a:	2200      	movs	r2, #0
 800688c:	2300      	movs	r3, #0
 800688e:	62ba      	str	r2, [r7, #40]	; 0x28
 8006890:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t first_read;
  uint32_t correction;
  uint32_t seconds;

  /* Get Time and Date*/
  HAL_RTC_GetTime( &RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN );
 8006892:	6939      	ldr	r1, [r7, #16]
 8006894:	4b43      	ldr	r3, [pc, #268]	; (80069a4 <HW_RTC_GetCalendarValue+0x124>)
 8006896:	2200      	movs	r2, #0
 8006898:	0018      	movs	r0, r3
 800689a:	f7fd f9c3 	bl	8003c24 <HAL_RTC_GetTime>

   /* make sure it is correct due to asynchronus nature of RTC*/
  do {
    first_read = RTC_TimeStruct->SubSeconds;
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_RTC_GetDate( &RtcHandle, RTC_DateStruct, RTC_FORMAT_BIN );
 80068a4:	6979      	ldr	r1, [r7, #20]
 80068a6:	4b3f      	ldr	r3, [pc, #252]	; (80069a4 <HW_RTC_GetCalendarValue+0x124>)
 80068a8:	2200      	movs	r2, #0
 80068aa:	0018      	movs	r0, r3
 80068ac:	f7fd fac4 	bl	8003e38 <HAL_RTC_GetDate>
    HAL_RTC_GetTime( &RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN );
 80068b0:	6939      	ldr	r1, [r7, #16]
 80068b2:	4b3c      	ldr	r3, [pc, #240]	; (80069a4 <HW_RTC_GetCalendarValue+0x124>)
 80068b4:	2200      	movs	r2, #0
 80068b6:	0018      	movs	r0, r3
 80068b8:	f7fd f9b4 	bl	8003c24 <HAL_RTC_GetTime>
  } while (first_read != RTC_TimeStruct->SubSeconds);
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	685a      	ldr	r2, [r3, #4]
 80068c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d1eb      	bne.n	800689e <HW_RTC_GetCalendarValue+0x1e>

  /* calculte amount of elapsed days since 01/01/2000 */
  seconds= DIVC( (DAYS_IN_YEAR*3 + DAYS_IN_LEAP_YEAR)* RTC_DateStruct->Year , 4);
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	78db      	ldrb	r3, [r3, #3]
 80068ca:	001a      	movs	r2, r3
 80068cc:	4b36      	ldr	r3, [pc, #216]	; (80069a8 <HW_RTC_GetCalendarValue+0x128>)
 80068ce:	4353      	muls	r3, r2
 80068d0:	3303      	adds	r3, #3
 80068d2:	089b      	lsrs	r3, r3, #2
 80068d4:	623b      	str	r3, [r7, #32]

  correction = ( (RTC_DateStruct->Year % 4) == 0 ) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	78db      	ldrb	r3, [r3, #3]
 80068da:	2203      	movs	r2, #3
 80068dc:	4013      	ands	r3, r2
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d101      	bne.n	80068e8 <HW_RTC_GetCalendarValue+0x68>
 80068e4:	4b31      	ldr	r3, [pc, #196]	; (80069ac <HW_RTC_GetCalendarValue+0x12c>)
 80068e6:	e000      	b.n	80068ea <HW_RTC_GetCalendarValue+0x6a>
 80068e8:	4b31      	ldr	r3, [pc, #196]	; (80069b0 <HW_RTC_GetCalendarValue+0x130>)
 80068ea:	61fb      	str	r3, [r7, #28]

  seconds +=( DIVC( (RTC_DateStruct->Month-1)*(30+31) ,2 ) - (((correction>> ((RTC_DateStruct->Month-1)*2) )&0x3)));
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	785b      	ldrb	r3, [r3, #1]
 80068f0:	1e5a      	subs	r2, r3, #1
 80068f2:	0013      	movs	r3, r2
 80068f4:	011b      	lsls	r3, r3, #4
 80068f6:	1a9b      	subs	r3, r3, r2
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	189b      	adds	r3, r3, r2
 80068fc:	3301      	adds	r3, #1
 80068fe:	2b00      	cmp	r3, #0
 8006900:	da00      	bge.n	8006904 <HW_RTC_GetCalendarValue+0x84>
 8006902:	3301      	adds	r3, #1
 8006904:	105b      	asrs	r3, r3, #1
 8006906:	0019      	movs	r1, r3
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	785b      	ldrb	r3, [r3, #1]
 800690c:	3b01      	subs	r3, #1
 800690e:	005b      	lsls	r3, r3, #1
 8006910:	69fa      	ldr	r2, [r7, #28]
 8006912:	40da      	lsrs	r2, r3
 8006914:	0013      	movs	r3, r2
 8006916:	2203      	movs	r2, #3
 8006918:	4013      	ands	r3, r2
 800691a:	1acb      	subs	r3, r1, r3
 800691c:	6a3a      	ldr	r2, [r7, #32]
 800691e:	18d3      	adds	r3, r2, r3
 8006920:	623b      	str	r3, [r7, #32]

  seconds += (RTC_DateStruct->Date -1);
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	789b      	ldrb	r3, [r3, #2]
 8006926:	001a      	movs	r2, r3
 8006928:	6a3b      	ldr	r3, [r7, #32]
 800692a:	18d3      	adds	r3, r2, r3
 800692c:	3b01      	subs	r3, #1
 800692e:	623b      	str	r3, [r7, #32]

  /* convert from days to seconds */
  seconds *= SECONDS_IN_1DAY;
 8006930:	6a3b      	ldr	r3, [r7, #32]
 8006932:	4a20      	ldr	r2, [pc, #128]	; (80069b4 <HW_RTC_GetCalendarValue+0x134>)
 8006934:	4353      	muls	r3, r2
 8006936:	623b      	str	r3, [r7, #32]

  seconds += ( ( uint32_t )RTC_TimeStruct->Seconds +
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	789b      	ldrb	r3, [r3, #2]
 800693c:	0018      	movs	r0, r3
             ( ( uint32_t )RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE ) +
             ( ( uint32_t )RTC_TimeStruct->Hours * SECONDS_IN_1HOUR ) ) ;
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	001a      	movs	r2, r3
 8006944:	23e1      	movs	r3, #225	; 0xe1
 8006946:	011b      	lsls	r3, r3, #4
 8006948:	435a      	muls	r2, r3
             ( ( uint32_t )RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE ) +
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	785b      	ldrb	r3, [r3, #1]
 800694e:	0019      	movs	r1, r3
 8006950:	000b      	movs	r3, r1
 8006952:	011b      	lsls	r3, r3, #4
 8006954:	1a5b      	subs	r3, r3, r1
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	18d3      	adds	r3, r2, r3
 800695a:	18c3      	adds	r3, r0, r3
  seconds += ( ( uint32_t )RTC_TimeStruct->Seconds +
 800695c:	6a3a      	ldr	r2, [r7, #32]
 800695e:	18d3      	adds	r3, r2, r3
 8006960:	623b      	str	r3, [r7, #32]



  calendarValue = (((uint64_t) seconds)<<N_PREDIV_S) + ( PREDIV_S - RTC_TimeStruct->SubSeconds);
 8006962:	6a3b      	ldr	r3, [r7, #32]
 8006964:	60bb      	str	r3, [r7, #8]
 8006966:	2300      	movs	r3, #0
 8006968:	60fb      	str	r3, [r7, #12]
 800696a:	68ba      	ldr	r2, [r7, #8]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	0011      	movs	r1, r2
 8006970:	0d8d      	lsrs	r5, r1, #22
 8006972:	0013      	movs	r3, r2
 8006974:	029c      	lsls	r4, r3, #10
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	4a0f      	ldr	r2, [pc, #60]	; (80069b8 <HW_RTC_GetCalendarValue+0x138>)
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	603b      	str	r3, [r7, #0]
 8006980:	2300      	movs	r3, #0
 8006982:	607b      	str	r3, [r7, #4]
 8006984:	683a      	ldr	r2, [r7, #0]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	1912      	adds	r2, r2, r4
 800698a:	416b      	adcs	r3, r5
 800698c:	001c      	movs	r4, r3
 800698e:	0013      	movs	r3, r2
 8006990:	62bb      	str	r3, [r7, #40]	; 0x28
 8006992:	62fc      	str	r4, [r7, #44]	; 0x2c

  return( calendarValue );
 8006994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006996:	6afc      	ldr	r4, [r7, #44]	; 0x2c
}
 8006998:	0018      	movs	r0, r3
 800699a:	0021      	movs	r1, r4
 800699c:	46bd      	mov	sp, r7
 800699e:	b00c      	add	sp, #48	; 0x30
 80069a0:	bdb0      	pop	{r4, r5, r7, pc}
 80069a2:	46c0      	nop			; (mov r8, r8)
 80069a4:	2000071c 	.word	0x2000071c
 80069a8:	000005b5 	.word	0x000005b5
 80069ac:	00445550 	.word	0x00445550
 80069b0:	0099aaa0 	.word	0x0099aaa0
 80069b4:	00015180 	.word	0x00015180
 80069b8:	000003ff 	.word	0x000003ff

080069bc <HW_SPI_InOut>:
}FskBandwidth_t;


extern SPI_HandleTypeDef hspi1;
uint16_t HW_SPI_InOut( uint16_t txData )
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b086      	sub	sp, #24
 80069c0:	af02      	add	r7, sp, #8
 80069c2:	0002      	movs	r2, r0
 80069c4:	1dbb      	adds	r3, r7, #6
 80069c6:	801a      	strh	r2, [r3, #0]
  uint16_t rxData ;

  HAL_SPI_TransmitReceive( &hspi1, ( uint8_t * ) &txData, ( uint8_t* ) &rxData, 1, HAL_MAX_DELAY);
 80069c8:	230e      	movs	r3, #14
 80069ca:	18fa      	adds	r2, r7, r3
 80069cc:	1db9      	adds	r1, r7, #6
 80069ce:	4807      	ldr	r0, [pc, #28]	; (80069ec <HW_SPI_InOut+0x30>)
 80069d0:	2301      	movs	r3, #1
 80069d2:	425b      	negs	r3, r3
 80069d4:	9300      	str	r3, [sp, #0]
 80069d6:	2301      	movs	r3, #1
 80069d8:	f7fd fdc6 	bl	8004568 <HAL_SPI_TransmitReceive>

  return rxData;
 80069dc:	230e      	movs	r3, #14
 80069de:	18fb      	adds	r3, r7, r3
 80069e0:	881b      	ldrh	r3, [r3, #0]
}
 80069e2:	0018      	movs	r0, r3
 80069e4:	46bd      	mov	sp, r7
 80069e6:	b004      	add	sp, #16
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	46c0      	nop			; (mov r8, r8)
 80069ec:	2000124c 	.word	0x2000124c

080069f0 <SX1276BoardInit>:

/*
 * Radio driver functions implementation
 */
void SX1276BoardInit( LoRaBoardCallback_t *callbacks )
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b082      	sub	sp, #8
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
    LoRaBoardCallbacks =callbacks;
 80069f8:	4b03      	ldr	r3, [pc, #12]	; (8006a08 <SX1276BoardInit+0x18>)
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	601a      	str	r2, [r3, #0]
}
 80069fe:	46c0      	nop			; (mov r8, r8)
 8006a00:	46bd      	mov	sp, r7
 8006a02:	b002      	add	sp, #8
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	46c0      	nop			; (mov r8, r8)
 8006a08:	20000888 	.word	0x20000888

08006a0c <SX1276Init>:

uint32_t SX1276Init( RadioEvents_t *events )
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
    uint8_t i;

    RadioEvents = events;
 8006a14:	4b35      	ldr	r3, [pc, #212]	; (8006aec <SX1276Init+0xe0>)
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	601a      	str	r2, [r3, #0]

    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8006a1a:	4a35      	ldr	r2, [pc, #212]	; (8006af0 <SX1276Init+0xe4>)
 8006a1c:	4b35      	ldr	r3, [pc, #212]	; (8006af4 <SX1276Init+0xe8>)
 8006a1e:	0011      	movs	r1, r2
 8006a20:	0018      	movs	r0, r3
 8006a22:	f7ff fb07 	bl	8006034 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 8006a26:	4a32      	ldr	r2, [pc, #200]	; (8006af0 <SX1276Init+0xe4>)
 8006a28:	4b33      	ldr	r3, [pc, #204]	; (8006af8 <SX1276Init+0xec>)
 8006a2a:	0011      	movs	r1, r2
 8006a2c:	0018      	movs	r0, r3
 8006a2e:	f7ff fb01 	bl	8006034 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 8006a32:	4a2f      	ldr	r2, [pc, #188]	; (8006af0 <SX1276Init+0xe4>)
 8006a34:	4b31      	ldr	r3, [pc, #196]	; (8006afc <SX1276Init+0xf0>)
 8006a36:	0011      	movs	r1, r2
 8006a38:	0018      	movs	r0, r3
 8006a3a:	f7ff fafb 	bl	8006034 <TimerInit>

    LoRaBoardCallbacks->SX1276BoardSetXO( SET );
 8006a3e:	4b30      	ldr	r3, [pc, #192]	; (8006b00 <SX1276Init+0xf4>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2001      	movs	r0, #1
 8006a46:	4798      	blx	r3

    SX1276Reset( );
 8006a48:	f001 fb76 	bl	8008138 <SX1276Reset>

    RxChainCalibration( );
 8006a4c:	f000 f936 	bl	8006cbc <RxChainCalibration>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8006a50:	2000      	movs	r0, #0
 8006a52:	f001 fb8b 	bl	800816c <SX1276SetOpMode>

    LoRaBoardCallbacks->SX1276BoardIoIrqInit( DioIrq );
 8006a56:	4b2a      	ldr	r3, [pc, #168]	; (8006b00 <SX1276Init+0xf4>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	4a29      	ldr	r2, [pc, #164]	; (8006b04 <SX1276Init+0xf8>)
 8006a5e:	0010      	movs	r0, r2
 8006a60:	4798      	blx	r3

    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8006a62:	230f      	movs	r3, #15
 8006a64:	18fb      	adds	r3, r7, r3
 8006a66:	2200      	movs	r2, #0
 8006a68:	701a      	strb	r2, [r3, #0]
 8006a6a:	e029      	b.n	8006ac0 <SX1276Init+0xb4>
    {
        SX1276SetModem( RadioRegsInit[i].Modem );
 8006a6c:	230f      	movs	r3, #15
 8006a6e:	18fb      	adds	r3, r7, r3
 8006a70:	781a      	ldrb	r2, [r3, #0]
 8006a72:	4925      	ldr	r1, [pc, #148]	; (8006b08 <SX1276Init+0xfc>)
 8006a74:	0013      	movs	r3, r2
 8006a76:	005b      	lsls	r3, r3, #1
 8006a78:	189b      	adds	r3, r3, r2
 8006a7a:	5c5b      	ldrb	r3, [r3, r1]
 8006a7c:	0018      	movs	r0, r3
 8006a7e:	f001 fbc5 	bl	800820c <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8006a82:	230f      	movs	r3, #15
 8006a84:	18fb      	adds	r3, r7, r3
 8006a86:	781a      	ldrb	r2, [r3, #0]
 8006a88:	491f      	ldr	r1, [pc, #124]	; (8006b08 <SX1276Init+0xfc>)
 8006a8a:	0013      	movs	r3, r2
 8006a8c:	005b      	lsls	r3, r3, #1
 8006a8e:	189b      	adds	r3, r3, r2
 8006a90:	18cb      	adds	r3, r1, r3
 8006a92:	3301      	adds	r3, #1
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	b298      	uxth	r0, r3
 8006a98:	230f      	movs	r3, #15
 8006a9a:	18fb      	adds	r3, r7, r3
 8006a9c:	781a      	ldrb	r2, [r3, #0]
 8006a9e:	491a      	ldr	r1, [pc, #104]	; (8006b08 <SX1276Init+0xfc>)
 8006aa0:	0013      	movs	r3, r2
 8006aa2:	005b      	lsls	r3, r3, #1
 8006aa4:	189b      	adds	r3, r3, r2
 8006aa6:	18cb      	adds	r3, r1, r3
 8006aa8:	3302      	adds	r3, #2
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	0019      	movs	r1, r3
 8006aae:	f001 fc05 	bl	80082bc <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8006ab2:	230f      	movs	r3, #15
 8006ab4:	18fb      	adds	r3, r7, r3
 8006ab6:	781a      	ldrb	r2, [r3, #0]
 8006ab8:	230f      	movs	r3, #15
 8006aba:	18fb      	adds	r3, r7, r3
 8006abc:	3201      	adds	r2, #1
 8006abe:	701a      	strb	r2, [r3, #0]
 8006ac0:	230f      	movs	r3, #15
 8006ac2:	18fb      	adds	r3, r7, r3
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	2b0f      	cmp	r3, #15
 8006ac8:	d9d0      	bls.n	8006a6c <SX1276Init+0x60>
    }

    SX1276SetModem( MODEM_FSK );
 8006aca:	2000      	movs	r0, #0
 8006acc:	f001 fb9e 	bl	800820c <SX1276SetModem>

    SX1276.Settings.State = RF_IDLE;
 8006ad0:	4b0e      	ldr	r3, [pc, #56]	; (8006b0c <SX1276Init+0x100>)
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	711a      	strb	r2, [r3, #4]

    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 8006ad6:	4b0a      	ldr	r3, [pc, #40]	; (8006b00 <SX1276Init+0xf4>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	4798      	blx	r3
 8006ade:	0003      	movs	r3, r0
 8006ae0:	3302      	adds	r3, #2
}
 8006ae2:	0018      	movs	r0, r3
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	b004      	add	sp, #16
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	46c0      	nop			; (mov r8, r8)
 8006aec:	20000784 	.word	0x20000784
 8006af0:	08008565 	.word	0x08008565
 8006af4:	20000a04 	.word	0x20000a04
 8006af8:	20000a9c 	.word	0x20000a9c
 8006afc:	20000a1c 	.word	0x20000a1c
 8006b00:	20000888 	.word	0x20000888
 8006b04:	20000018 	.word	0x20000018
 8006b08:	0800d78c 	.word	0x0800d78c
 8006b0c:	20000a34 	.word	0x20000a34

08006b10 <SX1276GetStatus>:

RadioState_t SX1276GetStatus( void )
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	af00      	add	r7, sp, #0
    return SX1276.Settings.State;
 8006b14:	4b02      	ldr	r3, [pc, #8]	; (8006b20 <SX1276GetStatus+0x10>)
 8006b16:	791b      	ldrb	r3, [r3, #4]
}
 8006b18:	0018      	movs	r0, r3
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	46c0      	nop			; (mov r8, r8)
 8006b20:	20000a34 	.word	0x20000a34

08006b24 <SX1276SetChannel>:

void SX1276SetChannel( uint32_t freq )
{
 8006b24:	b590      	push	{r4, r7, lr}
 8006b26:	b087      	sub	sp, #28
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
    uint32_t channel;

    SX1276.Settings.Channel = freq;
 8006b2c:	4b1a      	ldr	r3, [pc, #104]	; (8006b98 <SX1276SetChannel+0x74>)
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	609a      	str	r2, [r3, #8]

    SX_FREQ_TO_CHANNEL( channel, freq );
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4919      	ldr	r1, [pc, #100]	; (8006b9c <SX1276SetChannel+0x78>)
 8006b36:	0018      	movs	r0, r3
 8006b38:	f7f9 fb02 	bl	8000140 <__udivsi3>
 8006b3c:	0003      	movs	r3, r0
 8006b3e:	617b      	str	r3, [r7, #20]
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	4a16      	ldr	r2, [pc, #88]	; (8006b9c <SX1276SetChannel+0x78>)
 8006b44:	4353      	muls	r3, r2
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	1ad3      	subs	r3, r2, r3
 8006b4a:	613b      	str	r3, [r7, #16]
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	021c      	lsls	r4, r3, #8
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	021b      	lsls	r3, r3, #8
 8006b54:	4a12      	ldr	r2, [pc, #72]	; (8006ba0 <SX1276SetChannel+0x7c>)
 8006b56:	4694      	mov	ip, r2
 8006b58:	4463      	add	r3, ip
 8006b5a:	4910      	ldr	r1, [pc, #64]	; (8006b9c <SX1276SetChannel+0x78>)
 8006b5c:	0018      	movs	r0, r3
 8006b5e:	f7f9 faef 	bl	8000140 <__udivsi3>
 8006b62:	0003      	movs	r3, r0
 8006b64:	18e3      	adds	r3, r4, r3
 8006b66:	60fb      	str	r3, [r7, #12]

    SX1276Write( REG_FRFMSB, ( uint8_t )( ( channel >> 16 ) & 0xFF ) );
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	0c1b      	lsrs	r3, r3, #16
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	0019      	movs	r1, r3
 8006b70:	2006      	movs	r0, #6
 8006b72:	f001 fba3 	bl	80082bc <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( channel >> 8 ) & 0xFF ) );
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	0a1b      	lsrs	r3, r3, #8
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	0019      	movs	r1, r3
 8006b7e:	2007      	movs	r0, #7
 8006b80:	f001 fb9c 	bl	80082bc <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	0019      	movs	r1, r3
 8006b8a:	2008      	movs	r0, #8
 8006b8c:	f001 fb96 	bl	80082bc <SX1276Write>
}
 8006b90:	46c0      	nop			; (mov r8, r8)
 8006b92:	46bd      	mov	sp, r7
 8006b94:	b007      	add	sp, #28
 8006b96:	bd90      	pop	{r4, r7, pc}
 8006b98:	20000a34 	.word	0x20000a34
 8006b9c:	00003d09 	.word	0x00003d09
 8006ba0:	00001e84 	.word	0x00001e84

08006ba4 <SX1276IsChannelFree>:

bool SX1276IsChannelFree( RadioModems_t modem, uint32_t freq, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8006ba4:	b590      	push	{r4, r7, lr}
 8006ba6:	b087      	sub	sp, #28
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60b9      	str	r1, [r7, #8]
 8006bac:	0011      	movs	r1, r2
 8006bae:	607b      	str	r3, [r7, #4]
 8006bb0:	230f      	movs	r3, #15
 8006bb2:	18fb      	adds	r3, r7, r3
 8006bb4:	1c02      	adds	r2, r0, #0
 8006bb6:	701a      	strb	r2, [r3, #0]
 8006bb8:	230c      	movs	r3, #12
 8006bba:	18fb      	adds	r3, r7, r3
 8006bbc:	1c0a      	adds	r2, r1, #0
 8006bbe:	801a      	strh	r2, [r3, #0]
    bool status = true;
 8006bc0:	2317      	movs	r3, #23
 8006bc2:	18fb      	adds	r3, r7, r3
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	701a      	strb	r2, [r3, #0]
    int16_t rssi = 0;
 8006bc8:	2314      	movs	r3, #20
 8006bca:	18fb      	adds	r3, r7, r3
 8006bcc:	2200      	movs	r2, #0
 8006bce:	801a      	strh	r2, [r3, #0]
    uint32_t carrierSenseTime = 0;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	613b      	str	r3, [r7, #16]

    SX1276SetModem( modem );
 8006bd4:	230f      	movs	r3, #15
 8006bd6:	18fb      	adds	r3, r7, r3
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	0018      	movs	r0, r3
 8006bdc:	f001 fb16 	bl	800820c <SX1276SetModem>

    SX1276SetChannel( freq );
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	0018      	movs	r0, r3
 8006be4:	f7ff ff9e 	bl	8006b24 <SX1276SetChannel>

    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8006be8:	2005      	movs	r0, #5
 8006bea:	f001 fabf 	bl	800816c <SX1276SetOpMode>

    DelayMs( 1 );
 8006bee:	2001      	movs	r0, #1
 8006bf0:	f7fb fb8a 	bl	8002308 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8006bf4:	f7ff fb2f 	bl	8006256 <TimerGetCurrentTime>
 8006bf8:	0003      	movs	r3, r0
 8006bfa:	613b      	str	r3, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8006bfc:	e018      	b.n	8006c30 <SX1276IsChannelFree+0x8c>
    {
        rssi = SX1276ReadRssi( modem );
 8006bfe:	2314      	movs	r3, #20
 8006c00:	18fc      	adds	r4, r7, r3
 8006c02:	230f      	movs	r3, #15
 8006c04:	18fb      	adds	r3, r7, r3
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	0018      	movs	r0, r3
 8006c0a:	f001 fa49 	bl	80080a0 <SX1276ReadRssi>
 8006c0e:	0003      	movs	r3, r0
 8006c10:	8023      	strh	r3, [r4, #0]

        if( rssi > rssiThresh )
 8006c12:	2314      	movs	r3, #20
 8006c14:	18fa      	adds	r2, r7, r3
 8006c16:	230c      	movs	r3, #12
 8006c18:	18fb      	adds	r3, r7, r3
 8006c1a:	2100      	movs	r1, #0
 8006c1c:	5e52      	ldrsh	r2, [r2, r1]
 8006c1e:	2100      	movs	r1, #0
 8006c20:	5e5b      	ldrsh	r3, [r3, r1]
 8006c22:	429a      	cmp	r2, r3
 8006c24:	dd04      	ble.n	8006c30 <SX1276IsChannelFree+0x8c>
        {
            status = false;
 8006c26:	2317      	movs	r3, #23
 8006c28:	18fb      	adds	r3, r7, r3
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	701a      	strb	r2, [r3, #0]
            break;
 8006c2e:	e007      	b.n	8006c40 <SX1276IsChannelFree+0x9c>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	0018      	movs	r0, r3
 8006c34:	f7ff fb1f 	bl	8006276 <TimerGetElapsedTime>
 8006c38:	0002      	movs	r2, r0
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d3de      	bcc.n	8006bfe <SX1276IsChannelFree+0x5a>
        }
    }
    SX1276SetSleep( );
 8006c40:	f000 ff6a 	bl	8007b18 <SX1276SetSleep>
    return status;
 8006c44:	2317      	movs	r3, #23
 8006c46:	18fb      	adds	r3, r7, r3
 8006c48:	781b      	ldrb	r3, [r3, #0]
}
 8006c4a:	0018      	movs	r0, r3
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	b007      	add	sp, #28
 8006c50:	bd90      	pop	{r4, r7, pc}

08006c52 <SX1276Random>:

uint32_t SX1276Random( void )
{
 8006c52:	b580      	push	{r7, lr}
 8006c54:	b082      	sub	sp, #8
 8006c56:	af00      	add	r7, sp, #0
    uint8_t i;
    uint32_t rnd = 0;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	603b      	str	r3, [r7, #0]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    SX1276SetModem( MODEM_LORA );
 8006c5c:	2001      	movs	r0, #1
 8006c5e:	f001 fad5 	bl	800820c <SX1276SetModem>

    // Disable LoRa modem interrupts
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8006c62:	21ff      	movs	r1, #255	; 0xff
 8006c64:	2011      	movs	r0, #17
 8006c66:	f001 fb29 	bl	80082bc <SX1276Write>
                  RFLR_IRQFLAGS_CADDONE |
                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                  RFLR_IRQFLAGS_CADDETECTED );

    // Set radio in continuous reception
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8006c6a:	2005      	movs	r0, #5
 8006c6c:	f001 fa7e 	bl	800816c <SX1276SetOpMode>

    for( i = 0; i < 32; i++ )
 8006c70:	1dfb      	adds	r3, r7, #7
 8006c72:	2200      	movs	r2, #0
 8006c74:	701a      	strb	r2, [r3, #0]
 8006c76:	e015      	b.n	8006ca4 <SX1276Random+0x52>
    {
        DelayMs( 1 );
 8006c78:	2001      	movs	r0, #1
 8006c7a:	f7fb fb45 	bl	8002308 <HAL_Delay>
        // Unfiltered RSSI value reading. Only takes the LSB value
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 8006c7e:	202c      	movs	r0, #44	; 0x2c
 8006c80:	f001 fb30 	bl	80082e4 <SX1276Read>
 8006c84:	0003      	movs	r3, r0
 8006c86:	001a      	movs	r2, r3
 8006c88:	2301      	movs	r3, #1
 8006c8a:	401a      	ands	r2, r3
 8006c8c:	1dfb      	adds	r3, r7, #7
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	409a      	lsls	r2, r3
 8006c92:	0013      	movs	r3, r2
 8006c94:	683a      	ldr	r2, [r7, #0]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 32; i++ )
 8006c9a:	1dfb      	adds	r3, r7, #7
 8006c9c:	781a      	ldrb	r2, [r3, #0]
 8006c9e:	1dfb      	adds	r3, r7, #7
 8006ca0:	3201      	adds	r2, #1
 8006ca2:	701a      	strb	r2, [r3, #0]
 8006ca4:	1dfb      	adds	r3, r7, #7
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	2b1f      	cmp	r3, #31
 8006caa:	d9e5      	bls.n	8006c78 <SX1276Random+0x26>
    }

    SX1276SetSleep( );
 8006cac:	f000 ff34 	bl	8007b18 <SX1276SetSleep>

    return rnd;
 8006cb0:	683b      	ldr	r3, [r7, #0]
}
 8006cb2:	0018      	movs	r0, r3
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	b002      	add	sp, #8
 8006cb8:	bd80      	pop	{r7, pc}
	...

08006cbc <RxChainCalibration>:
 * Performs the Rx chain calibration for LF and HF bands
 * \remark Must be called just after the reset so all registers are at their
 *         default values
 */
void RxChainCalibration( void )
{
 8006cbc:	b590      	push	{r4, r7, lr}
 8006cbe:	b087      	sub	sp, #28
 8006cc0:	af00      	add	r7, sp, #0
    uint8_t regPaConfigInitVal;
    uint32_t initialFreq;
    uint32_t channel;

    // Save context
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 8006cc2:	2317      	movs	r3, #23
 8006cc4:	18fc      	adds	r4, r7, r3
 8006cc6:	2009      	movs	r0, #9
 8006cc8:	f001 fb0c 	bl	80082e4 <SX1276Read>
 8006ccc:	0003      	movs	r3, r0
 8006cce:	7023      	strb	r3, [r4, #0]

    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8006cd0:	2006      	movs	r0, #6
 8006cd2:	f001 fb07 	bl	80082e4 <SX1276Read>
 8006cd6:	0003      	movs	r3, r0
 8006cd8:	041c      	lsls	r4, r3, #16
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 8006cda:	2007      	movs	r0, #7
 8006cdc:	f001 fb02 	bl	80082e4 <SX1276Read>
 8006ce0:	0003      	movs	r3, r0
 8006ce2:	021b      	lsls	r3, r3, #8
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8006ce4:	431c      	orrs	r4, r3
                ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) );
 8006ce6:	2008      	movs	r0, #8
 8006ce8:	f001 fafc 	bl	80082e4 <SX1276Read>
 8006cec:	0003      	movs	r3, r0
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8006cee:	4323      	orrs	r3, r4
 8006cf0:	613b      	str	r3, [r7, #16]

    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	0a1b      	lsrs	r3, r3, #8
 8006cf6:	60fb      	str	r3, [r7, #12]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	021b      	lsls	r3, r3, #8
 8006cfc:	693a      	ldr	r2, [r7, #16]
 8006cfe:	1ad3      	subs	r3, r2, r3
 8006d00:	60bb      	str	r3, [r7, #8]
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	4a25      	ldr	r2, [pc, #148]	; (8006d9c <RxChainCalibration+0xe0>)
 8006d06:	435a      	muls	r2, r3
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	4924      	ldr	r1, [pc, #144]	; (8006d9c <RxChainCalibration+0xe0>)
 8006d0c:	434b      	muls	r3, r1
 8006d0e:	3380      	adds	r3, #128	; 0x80
 8006d10:	0a1b      	lsrs	r3, r3, #8
 8006d12:	18d3      	adds	r3, r2, r3
 8006d14:	607b      	str	r3, [r7, #4]

    // Cut the PA just in case, RFO output, power = -1 dBm
    SX1276Write( REG_PACONFIG, 0x00 );
 8006d16:	2100      	movs	r1, #0
 8006d18:	2009      	movs	r0, #9
 8006d1a:	f001 facf 	bl	80082bc <SX1276Write>

    // Launch Rx chain calibration for LF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8006d1e:	203b      	movs	r0, #59	; 0x3b
 8006d20:	f001 fae0 	bl	80082e4 <SX1276Read>
 8006d24:	0003      	movs	r3, r0
 8006d26:	001a      	movs	r2, r3
 8006d28:	2340      	movs	r3, #64	; 0x40
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	0019      	movs	r1, r3
 8006d30:	203b      	movs	r0, #59	; 0x3b
 8006d32:	f001 fac3 	bl	80082bc <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8006d36:	46c0      	nop			; (mov r8, r8)
 8006d38:	203b      	movs	r0, #59	; 0x3b
 8006d3a:	f001 fad3 	bl	80082e4 <SX1276Read>
 8006d3e:	0003      	movs	r3, r0
 8006d40:	001a      	movs	r2, r3
 8006d42:	2320      	movs	r3, #32
 8006d44:	4013      	ands	r3, r2
 8006d46:	2b20      	cmp	r3, #32
 8006d48:	d0f6      	beq.n	8006d38 <RxChainCalibration+0x7c>
    {
    }

    // Sets a Frequency in HF band
    SX1276SetChannel( 868000000 );
 8006d4a:	4b15      	ldr	r3, [pc, #84]	; (8006da0 <RxChainCalibration+0xe4>)
 8006d4c:	0018      	movs	r0, r3
 8006d4e:	f7ff fee9 	bl	8006b24 <SX1276SetChannel>

    // Launch Rx chain calibration for HF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8006d52:	203b      	movs	r0, #59	; 0x3b
 8006d54:	f001 fac6 	bl	80082e4 <SX1276Read>
 8006d58:	0003      	movs	r3, r0
 8006d5a:	001a      	movs	r2, r3
 8006d5c:	2340      	movs	r3, #64	; 0x40
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	0019      	movs	r1, r3
 8006d64:	203b      	movs	r0, #59	; 0x3b
 8006d66:	f001 faa9 	bl	80082bc <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8006d6a:	46c0      	nop			; (mov r8, r8)
 8006d6c:	203b      	movs	r0, #59	; 0x3b
 8006d6e:	f001 fab9 	bl	80082e4 <SX1276Read>
 8006d72:	0003      	movs	r3, r0
 8006d74:	001a      	movs	r2, r3
 8006d76:	2320      	movs	r3, #32
 8006d78:	4013      	ands	r3, r2
 8006d7a:	2b20      	cmp	r3, #32
 8006d7c:	d0f6      	beq.n	8006d6c <RxChainCalibration+0xb0>
    {
    }

    // Restore context
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 8006d7e:	2317      	movs	r3, #23
 8006d80:	18fb      	adds	r3, r7, r3
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	0019      	movs	r1, r3
 8006d86:	2009      	movs	r0, #9
 8006d88:	f001 fa98 	bl	80082bc <SX1276Write>
    SX1276SetChannel( initialFreq );
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	0018      	movs	r0, r3
 8006d90:	f7ff fec8 	bl	8006b24 <SX1276SetChannel>
}
 8006d94:	46c0      	nop			; (mov r8, r8)
 8006d96:	46bd      	mov	sp, r7
 8006d98:	b007      	add	sp, #28
 8006d9a:	bd90      	pop	{r4, r7, pc}
 8006d9c:	00003d09 	.word	0x00003d09
 8006da0:	33bca100 	.word	0x33bca100

08006da4 <GetFskBandwidthRegValue>:
 *
 * \param [IN] bandwidth Bandwidth value in Hz
 * \retval regValue Bandwidth register value.
 */
static uint8_t GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8006dac:	230f      	movs	r3, #15
 8006dae:	18fb      	adds	r3, r7, r3
 8006db0:	2200      	movs	r2, #0
 8006db2:	701a      	strb	r2, [r3, #0]
 8006db4:	e022      	b.n	8006dfc <GetFskBandwidthRegValue+0x58>
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 8006db6:	230f      	movs	r3, #15
 8006db8:	18fb      	adds	r3, r7, r3
 8006dba:	781a      	ldrb	r2, [r3, #0]
 8006dbc:	4b14      	ldr	r3, [pc, #80]	; (8006e10 <GetFskBandwidthRegValue+0x6c>)
 8006dbe:	00d2      	lsls	r2, r2, #3
 8006dc0:	58d2      	ldr	r2, [r2, r3]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d812      	bhi.n	8006dee <GetFskBandwidthRegValue+0x4a>
 8006dc8:	230f      	movs	r3, #15
 8006dca:	18fb      	adds	r3, r7, r3
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	1c5a      	adds	r2, r3, #1
 8006dd0:	4b0f      	ldr	r3, [pc, #60]	; (8006e10 <GetFskBandwidthRegValue+0x6c>)
 8006dd2:	00d2      	lsls	r2, r2, #3
 8006dd4:	58d2      	ldr	r2, [r2, r3]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d908      	bls.n	8006dee <GetFskBandwidthRegValue+0x4a>
        {
            return FskBandwidths[i].RegValue;
 8006ddc:	230f      	movs	r3, #15
 8006dde:	18fb      	adds	r3, r7, r3
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	4a0b      	ldr	r2, [pc, #44]	; (8006e10 <GetFskBandwidthRegValue+0x6c>)
 8006de4:	00db      	lsls	r3, r3, #3
 8006de6:	18d3      	adds	r3, r2, r3
 8006de8:	3304      	adds	r3, #4
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	e00c      	b.n	8006e08 <GetFskBandwidthRegValue+0x64>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8006dee:	230f      	movs	r3, #15
 8006df0:	18fb      	adds	r3, r7, r3
 8006df2:	781a      	ldrb	r2, [r3, #0]
 8006df4:	230f      	movs	r3, #15
 8006df6:	18fb      	adds	r3, r7, r3
 8006df8:	3201      	adds	r2, #1
 8006dfa:	701a      	strb	r2, [r3, #0]
 8006dfc:	230f      	movs	r3, #15
 8006dfe:	18fb      	adds	r3, r7, r3
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	2b14      	cmp	r3, #20
 8006e04:	d9d7      	bls.n	8006db6 <GetFskBandwidthRegValue+0x12>
        }
    }
    // ERROR: Value not found
    while( 1 );
 8006e06:	e7fe      	b.n	8006e06 <GetFskBandwidthRegValue+0x62>
}
 8006e08:	0018      	movs	r0, r3
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	b004      	add	sp, #16
 8006e0e:	bd80      	pop	{r7, pc}
 8006e10:	0800d7bc 	.word	0x0800d7bc

08006e14 <SX1276SetRxConfig>:
                         uint32_t bandwidthAfc, uint16_t preambleLen,
                         uint16_t symbTimeout, bool fixLen,
                         uint8_t payloadLen,
                         bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                         bool iqInverted, bool rxContinuous )
{
 8006e14:	b5b0      	push	{r4, r5, r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60b9      	str	r1, [r7, #8]
 8006e1c:	607a      	str	r2, [r7, #4]
 8006e1e:	0019      	movs	r1, r3
 8006e20:	230f      	movs	r3, #15
 8006e22:	18fb      	adds	r3, r7, r3
 8006e24:	1c02      	adds	r2, r0, #0
 8006e26:	701a      	strb	r2, [r3, #0]
 8006e28:	230e      	movs	r3, #14
 8006e2a:	18fb      	adds	r3, r7, r3
 8006e2c:	1c0a      	adds	r2, r1, #0
 8006e2e:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
 8006e30:	230f      	movs	r3, #15
 8006e32:	18fb      	adds	r3, r7, r3
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	0018      	movs	r0, r3
 8006e38:	f001 f9e8 	bl	800820c <SX1276SetModem>

    switch( modem )
 8006e3c:	230f      	movs	r3, #15
 8006e3e:	18fb      	adds	r3, r7, r3
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d003      	beq.n	8006e4e <SX1276SetRxConfig+0x3a>
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d100      	bne.n	8006e4c <SX1276SetRxConfig+0x38>
 8006e4a:	e0e4      	b.n	8007016 <SX1276SetRxConfig+0x202>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 8006e4c:	e236      	b.n	80072bc <SX1276SetRxConfig+0x4a8>
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8006e4e:	4ba6      	ldr	r3, [pc, #664]	; (80070e8 <SX1276SetRxConfig+0x2d4>)
 8006e50:	68ba      	ldr	r2, [r7, #8]
 8006e52:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 8006e54:	4ba4      	ldr	r3, [pc, #656]	; (80070e8 <SX1276SetRxConfig+0x2d4>)
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 8006e5a:	4ba3      	ldr	r3, [pc, #652]	; (80070e8 <SX1276SetRxConfig+0x2d4>)
 8006e5c:	6a3a      	ldr	r2, [r7, #32]
 8006e5e:	619a      	str	r2, [r3, #24]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8006e60:	4ba1      	ldr	r3, [pc, #644]	; (80070e8 <SX1276SetRxConfig+0x2d4>)
 8006e62:	222c      	movs	r2, #44	; 0x2c
 8006e64:	18ba      	adds	r2, r7, r2
 8006e66:	2122      	movs	r1, #34	; 0x22
 8006e68:	7812      	ldrb	r2, [r2, #0]
 8006e6a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 8006e6c:	4b9e      	ldr	r3, [pc, #632]	; (80070e8 <SX1276SetRxConfig+0x2d4>)
 8006e6e:	2230      	movs	r2, #48	; 0x30
 8006e70:	18ba      	adds	r2, r7, r2
 8006e72:	2123      	movs	r1, #35	; 0x23
 8006e74:	7812      	ldrb	r2, [r2, #0]
 8006e76:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8006e78:	4b9b      	ldr	r3, [pc, #620]	; (80070e8 <SX1276SetRxConfig+0x2d4>)
 8006e7a:	2234      	movs	r2, #52	; 0x34
 8006e7c:	18ba      	adds	r2, r7, r2
 8006e7e:	2124      	movs	r1, #36	; 0x24
 8006e80:	7812      	ldrb	r2, [r2, #0]
 8006e82:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8006e84:	4b98      	ldr	r3, [pc, #608]	; (80070e8 <SX1276SetRxConfig+0x2d4>)
 8006e86:	2220      	movs	r2, #32
 8006e88:	2120      	movs	r1, #32
 8006e8a:	468c      	mov	ip, r1
 8006e8c:	44bc      	add	ip, r7
 8006e8e:	4462      	add	r2, ip
 8006e90:	2125      	movs	r1, #37	; 0x25
 8006e92:	7812      	ldrb	r2, [r2, #0]
 8006e94:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 8006e96:	4b94      	ldr	r3, [pc, #592]	; (80070e8 <SX1276SetRxConfig+0x2d4>)
 8006e98:	2224      	movs	r2, #36	; 0x24
 8006e9a:	2120      	movs	r1, #32
 8006e9c:	468c      	mov	ip, r1
 8006e9e:	44bc      	add	ip, r7
 8006ea0:	4462      	add	r2, ip
 8006ea2:	2126      	movs	r1, #38	; 0x26
 8006ea4:	7812      	ldrb	r2, [r2, #0]
 8006ea6:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8006ea8:	4b8f      	ldr	r3, [pc, #572]	; (80070e8 <SX1276SetRxConfig+0x2d4>)
 8006eaa:	2224      	movs	r2, #36	; 0x24
 8006eac:	18ba      	adds	r2, r7, r2
 8006eae:	8812      	ldrh	r2, [r2, #0]
 8006eb0:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 8006eb2:	2328      	movs	r3, #40	; 0x28
 8006eb4:	18fb      	adds	r3, r7, r3
 8006eb6:	881b      	ldrh	r3, [r3, #0]
 8006eb8:	0018      	movs	r0, r3
 8006eba:	f7fb f921 	bl	8002100 <__aeabi_i2d>
 8006ebe:	0004      	movs	r4, r0
 8006ec0:	000d      	movs	r5, r1
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f7fb f95e 	bl	8002184 <__aeabi_ui2d>
 8006ec8:	0002      	movs	r2, r0
 8006eca:	000b      	movs	r3, r1
 8006ecc:	2000      	movs	r0, #0
 8006ece:	4987      	ldr	r1, [pc, #540]	; (80070ec <SX1276SetRxConfig+0x2d8>)
 8006ed0:	f7f9 fef8 	bl	8000cc4 <__aeabi_ddiv>
 8006ed4:	0002      	movs	r2, r0
 8006ed6:	000b      	movs	r3, r1
 8006ed8:	0010      	movs	r0, r2
 8006eda:	0019      	movs	r1, r3
 8006edc:	2200      	movs	r2, #0
 8006ede:	4b84      	ldr	r3, [pc, #528]	; (80070f0 <SX1276SetRxConfig+0x2dc>)
 8006ee0:	f7fa fb24 	bl	800152c <__aeabi_dmul>
 8006ee4:	0002      	movs	r2, r0
 8006ee6:	000b      	movs	r3, r1
 8006ee8:	0020      	movs	r0, r4
 8006eea:	0029      	movs	r1, r5
 8006eec:	f7fa fb1e 	bl	800152c <__aeabi_dmul>
 8006ef0:	0003      	movs	r3, r0
 8006ef2:	000c      	movs	r4, r1
 8006ef4:	0018      	movs	r0, r3
 8006ef6:	0021      	movs	r1, r4
 8006ef8:	2200      	movs	r2, #0
 8006efa:	4b7e      	ldr	r3, [pc, #504]	; (80070f4 <SX1276SetRxConfig+0x2e0>)
 8006efc:	f7fa fb16 	bl	800152c <__aeabi_dmul>
 8006f00:	0003      	movs	r3, r0
 8006f02:	000c      	movs	r4, r1
 8006f04:	0018      	movs	r0, r3
 8006f06:	0021      	movs	r1, r4
 8006f08:	f7f9 faee 	bl	80004e8 <__aeabi_d2uiz>
 8006f0c:	0002      	movs	r2, r0
 8006f0e:	4b76      	ldr	r3, [pc, #472]	; (80070e8 <SX1276SetRxConfig+0x2d4>)
 8006f10:	62da      	str	r2, [r3, #44]	; 0x2c
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f7fb f936 	bl	8002184 <__aeabi_ui2d>
 8006f18:	0003      	movs	r3, r0
 8006f1a:	000c      	movs	r4, r1
 8006f1c:	001a      	movs	r2, r3
 8006f1e:	0023      	movs	r3, r4
 8006f20:	2000      	movs	r0, #0
 8006f22:	4975      	ldr	r1, [pc, #468]	; (80070f8 <SX1276SetRxConfig+0x2e4>)
 8006f24:	f7f9 fece 	bl	8000cc4 <__aeabi_ddiv>
 8006f28:	0003      	movs	r3, r0
 8006f2a:	000c      	movs	r4, r1
 8006f2c:	0018      	movs	r0, r3
 8006f2e:	0021      	movs	r1, r4
 8006f30:	f7f9 fada 	bl	80004e8 <__aeabi_d2uiz>
 8006f34:	0003      	movs	r3, r0
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	607b      	str	r3, [r7, #4]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	0a1b      	lsrs	r3, r3, #8
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	0019      	movs	r1, r3
 8006f42:	2002      	movs	r0, #2
 8006f44:	f001 f9ba 	bl	80082bc <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	0019      	movs	r1, r3
 8006f4e:	2003      	movs	r0, #3
 8006f50:	f001 f9b4 	bl	80082bc <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	0018      	movs	r0, r3
 8006f58:	f7ff ff24 	bl	8006da4 <GetFskBandwidthRegValue>
 8006f5c:	0003      	movs	r3, r0
 8006f5e:	0019      	movs	r1, r3
 8006f60:	2012      	movs	r0, #18
 8006f62:	f001 f9ab 	bl	80082bc <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 8006f66:	6a3b      	ldr	r3, [r7, #32]
 8006f68:	0018      	movs	r0, r3
 8006f6a:	f7ff ff1b 	bl	8006da4 <GetFskBandwidthRegValue>
 8006f6e:	0003      	movs	r3, r0
 8006f70:	0019      	movs	r1, r3
 8006f72:	2013      	movs	r0, #19
 8006f74:	f001 f9a2 	bl	80082bc <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8006f78:	2324      	movs	r3, #36	; 0x24
 8006f7a:	18fb      	adds	r3, r7, r3
 8006f7c:	881b      	ldrh	r3, [r3, #0]
 8006f7e:	0a1b      	lsrs	r3, r3, #8
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	0019      	movs	r1, r3
 8006f86:	2025      	movs	r0, #37	; 0x25
 8006f88:	f001 f998 	bl	80082bc <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8006f8c:	2324      	movs	r3, #36	; 0x24
 8006f8e:	18fb      	adds	r3, r7, r3
 8006f90:	881b      	ldrh	r3, [r3, #0]
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	0019      	movs	r1, r3
 8006f96:	2026      	movs	r0, #38	; 0x26
 8006f98:	f001 f990 	bl	80082bc <SX1276Write>
            if( fixLen == 1 )
 8006f9c:	232c      	movs	r3, #44	; 0x2c
 8006f9e:	18fb      	adds	r3, r7, r3
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d007      	beq.n	8006fb6 <SX1276SetRxConfig+0x1a2>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8006fa6:	2330      	movs	r3, #48	; 0x30
 8006fa8:	18fb      	adds	r3, r7, r3
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	0019      	movs	r1, r3
 8006fae:	2032      	movs	r0, #50	; 0x32
 8006fb0:	f001 f984 	bl	80082bc <SX1276Write>
 8006fb4:	e003      	b.n	8006fbe <SX1276SetRxConfig+0x1aa>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8006fb6:	21ff      	movs	r1, #255	; 0xff
 8006fb8:	2032      	movs	r0, #50	; 0x32
 8006fba:	f001 f97f 	bl	80082bc <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8006fbe:	2030      	movs	r0, #48	; 0x30
 8006fc0:	f001 f990 	bl	80082e4 <SX1276Read>
 8006fc4:	0003      	movs	r3, r0
 8006fc6:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 8006fc8:	226f      	movs	r2, #111	; 0x6f
 8006fca:	4013      	ands	r3, r2
 8006fcc:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8006fce:	232c      	movs	r3, #44	; 0x2c
 8006fd0:	18fb      	adds	r3, r7, r3
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d001      	beq.n	8006fdc <SX1276SetRxConfig+0x1c8>
 8006fd8:	2300      	movs	r3, #0
 8006fda:	e001      	b.n	8006fe0 <SX1276SetRxConfig+0x1cc>
 8006fdc:	2380      	movs	r3, #128	; 0x80
 8006fde:	425b      	negs	r3, r3
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8006fe4:	2334      	movs	r3, #52	; 0x34
 8006fe6:	18fb      	adds	r3, r7, r3
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8006fec:	b25b      	sxtb	r3, r3
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	0019      	movs	r1, r3
 8006ff6:	2030      	movs	r0, #48	; 0x30
 8006ff8:	f001 f960 	bl	80082bc <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8006ffc:	2031      	movs	r0, #49	; 0x31
 8006ffe:	f001 f971 	bl	80082e4 <SX1276Read>
 8007002:	0003      	movs	r3, r0
 8007004:	001a      	movs	r2, r3
 8007006:	2340      	movs	r3, #64	; 0x40
 8007008:	4313      	orrs	r3, r2
 800700a:	b2db      	uxtb	r3, r3
 800700c:	0019      	movs	r1, r3
 800700e:	2031      	movs	r0, #49	; 0x31
 8007010:	f001 f954 	bl	80082bc <SX1276Write>
        break;
 8007014:	e152      	b.n	80072bc <SX1276SetRxConfig+0x4a8>
            if( bandwidth > 2 )
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	2b02      	cmp	r3, #2
 800701a:	d900      	bls.n	800701e <SX1276SetRxConfig+0x20a>
                while( 1 );
 800701c:	e7fe      	b.n	800701c <SX1276SetRxConfig+0x208>
            bandwidth += 7;
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	3307      	adds	r3, #7
 8007022:	60bb      	str	r3, [r7, #8]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8007024:	4b30      	ldr	r3, [pc, #192]	; (80070e8 <SX1276SetRxConfig+0x2d4>)
 8007026:	68ba      	ldr	r2, [r7, #8]
 8007028:	645a      	str	r2, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 800702a:	4b2f      	ldr	r3, [pc, #188]	; (80070e8 <SX1276SetRxConfig+0x2d4>)
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	649a      	str	r2, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 8007030:	4b2d      	ldr	r3, [pc, #180]	; (80070e8 <SX1276SetRxConfig+0x2d4>)
 8007032:	220e      	movs	r2, #14
 8007034:	18ba      	adds	r2, r7, r2
 8007036:	214d      	movs	r1, #77	; 0x4d
 8007038:	7812      	ldrb	r2, [r2, #0]
 800703a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 800703c:	4b2a      	ldr	r3, [pc, #168]	; (80070e8 <SX1276SetRxConfig+0x2d4>)
 800703e:	2224      	movs	r2, #36	; 0x24
 8007040:	18ba      	adds	r2, r7, r2
 8007042:	214e      	movs	r1, #78	; 0x4e
 8007044:	8812      	ldrh	r2, [r2, #0]
 8007046:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 8007048:	4b27      	ldr	r3, [pc, #156]	; (80070e8 <SX1276SetRxConfig+0x2d4>)
 800704a:	222c      	movs	r2, #44	; 0x2c
 800704c:	18ba      	adds	r2, r7, r2
 800704e:	2150      	movs	r1, #80	; 0x50
 8007050:	7812      	ldrb	r2, [r2, #0]
 8007052:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 8007054:	4b24      	ldr	r3, [pc, #144]	; (80070e8 <SX1276SetRxConfig+0x2d4>)
 8007056:	2230      	movs	r2, #48	; 0x30
 8007058:	18ba      	adds	r2, r7, r2
 800705a:	2151      	movs	r1, #81	; 0x51
 800705c:	7812      	ldrb	r2, [r2, #0]
 800705e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8007060:	4b21      	ldr	r3, [pc, #132]	; (80070e8 <SX1276SetRxConfig+0x2d4>)
 8007062:	2234      	movs	r2, #52	; 0x34
 8007064:	18ba      	adds	r2, r7, r2
 8007066:	2152      	movs	r1, #82	; 0x52
 8007068:	7812      	ldrb	r2, [r2, #0]
 800706a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 800706c:	4b1e      	ldr	r3, [pc, #120]	; (80070e8 <SX1276SetRxConfig+0x2d4>)
 800706e:	2238      	movs	r2, #56	; 0x38
 8007070:	18ba      	adds	r2, r7, r2
 8007072:	2153      	movs	r1, #83	; 0x53
 8007074:	7812      	ldrb	r2, [r2, #0]
 8007076:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8007078:	4b1b      	ldr	r3, [pc, #108]	; (80070e8 <SX1276SetRxConfig+0x2d4>)
 800707a:	223c      	movs	r2, #60	; 0x3c
 800707c:	18ba      	adds	r2, r7, r2
 800707e:	2154      	movs	r1, #84	; 0x54
 8007080:	7812      	ldrb	r2, [r2, #0]
 8007082:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8007084:	4b18      	ldr	r3, [pc, #96]	; (80070e8 <SX1276SetRxConfig+0x2d4>)
 8007086:	2220      	movs	r2, #32
 8007088:	2120      	movs	r1, #32
 800708a:	468c      	mov	ip, r1
 800708c:	44bc      	add	ip, r7
 800708e:	4462      	add	r2, ip
 8007090:	2155      	movs	r1, #85	; 0x55
 8007092:	7812      	ldrb	r2, [r2, #0]
 8007094:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8007096:	4b14      	ldr	r3, [pc, #80]	; (80070e8 <SX1276SetRxConfig+0x2d4>)
 8007098:	2224      	movs	r2, #36	; 0x24
 800709a:	2120      	movs	r1, #32
 800709c:	468c      	mov	ip, r1
 800709e:	44bc      	add	ip, r7
 80070a0:	4462      	add	r2, ip
 80070a2:	2156      	movs	r1, #86	; 0x56
 80070a4:	7812      	ldrb	r2, [r2, #0]
 80070a6:	545a      	strb	r2, [r3, r1]
            if( datarate > 12 )
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2b0c      	cmp	r3, #12
 80070ac:	d902      	bls.n	80070b4 <SX1276SetRxConfig+0x2a0>
                datarate = 12;
 80070ae:	230c      	movs	r3, #12
 80070b0:	607b      	str	r3, [r7, #4]
 80070b2:	e004      	b.n	80070be <SX1276SetRxConfig+0x2aa>
            else if( datarate < 6 )
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2b05      	cmp	r3, #5
 80070b8:	d801      	bhi.n	80070be <SX1276SetRxConfig+0x2aa>
                datarate = 6;
 80070ba:	2306      	movs	r3, #6
 80070bc:	607b      	str	r3, [r7, #4]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	2b07      	cmp	r3, #7
 80070c2:	d105      	bne.n	80070d0 <SX1276SetRxConfig+0x2bc>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2b0b      	cmp	r3, #11
 80070c8:	d008      	beq.n	80070dc <SX1276SetRxConfig+0x2c8>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2b0c      	cmp	r3, #12
 80070ce:	d005      	beq.n	80070dc <SX1276SetRxConfig+0x2c8>
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	2b08      	cmp	r3, #8
 80070d4:	d112      	bne.n	80070fc <SX1276SetRxConfig+0x2e8>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2b0c      	cmp	r3, #12
 80070da:	d10f      	bne.n	80070fc <SX1276SetRxConfig+0x2e8>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 80070dc:	4b02      	ldr	r3, [pc, #8]	; (80070e8 <SX1276SetRxConfig+0x2d4>)
 80070de:	224c      	movs	r2, #76	; 0x4c
 80070e0:	2101      	movs	r1, #1
 80070e2:	5499      	strb	r1, [r3, r2]
 80070e4:	e00e      	b.n	8007104 <SX1276SetRxConfig+0x2f0>
 80070e6:	46c0      	nop			; (mov r8, r8)
 80070e8:	20000a34 	.word	0x20000a34
 80070ec:	3ff00000 	.word	0x3ff00000
 80070f0:	40200000 	.word	0x40200000
 80070f4:	408f4000 	.word	0x408f4000
 80070f8:	417e8480 	.word	0x417e8480
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 80070fc:	4b71      	ldr	r3, [pc, #452]	; (80072c4 <SX1276SetRxConfig+0x4b0>)
 80070fe:	224c      	movs	r2, #76	; 0x4c
 8007100:	2100      	movs	r1, #0
 8007102:	5499      	strb	r1, [r3, r2]
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8007104:	201d      	movs	r0, #29
 8007106:	f001 f8ed 	bl	80082e4 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	b2db      	uxtb	r3, r3
 800710e:	011b      	lsls	r3, r3, #4
 8007110:	b2da      	uxtb	r2, r3
 8007112:	230e      	movs	r3, #14
 8007114:	18fb      	adds	r3, r7, r3
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	18db      	adds	r3, r3, r3
 800711a:	b2db      	uxtb	r3, r3
 800711c:	4313      	orrs	r3, r2
 800711e:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8007120:	232c      	movs	r3, #44	; 0x2c
 8007122:	18fb      	adds	r3, r7, r3
 8007124:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8007126:	4313      	orrs	r3, r2
 8007128:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 800712a:	0019      	movs	r1, r3
 800712c:	201d      	movs	r0, #29
 800712e:	f001 f8c5 	bl	80082bc <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8007132:	201e      	movs	r0, #30
 8007134:	f001 f8d6 	bl	80082e4 <SX1276Read>
 8007138:	0003      	movs	r3, r0
 800713a:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 800713c:	2308      	movs	r3, #8
 800713e:	4013      	ands	r3, r2
 8007140:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	b2db      	uxtb	r3, r3
 8007146:	011b      	lsls	r3, r3, #4
 8007148:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 800714a:	4313      	orrs	r3, r2
 800714c:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 800714e:	2334      	movs	r3, #52	; 0x34
 8007150:	18fb      	adds	r3, r7, r3
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	b2db      	uxtb	r3, r3
 8007158:	4313      	orrs	r3, r2
 800715a:	b2da      	uxtb	r2, r3
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 800715c:	2328      	movs	r3, #40	; 0x28
 800715e:	18fb      	adds	r3, r7, r3
 8007160:	881b      	ldrh	r3, [r3, #0]
 8007162:	0a1b      	lsrs	r3, r3, #8
 8007164:	b29b      	uxth	r3, r3
 8007166:	b2db      	uxtb	r3, r3
 8007168:	2103      	movs	r1, #3
 800716a:	400b      	ands	r3, r1
 800716c:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 800716e:	4313      	orrs	r3, r2
 8007170:	b2db      	uxtb	r3, r3
 8007172:	0019      	movs	r1, r3
 8007174:	201e      	movs	r0, #30
 8007176:	f001 f8a1 	bl	80082bc <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800717a:	2026      	movs	r0, #38	; 0x26
 800717c:	f001 f8b2 	bl	80082e4 <SX1276Read>
 8007180:	0003      	movs	r3, r0
 8007182:	b25b      	sxtb	r3, r3
 8007184:	2208      	movs	r2, #8
 8007186:	4393      	bics	r3, r2
 8007188:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800718a:	4b4e      	ldr	r3, [pc, #312]	; (80072c4 <SX1276SetRxConfig+0x4b0>)
 800718c:	214c      	movs	r1, #76	; 0x4c
 800718e:	5c5b      	ldrb	r3, [r3, r1]
 8007190:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8007192:	b25b      	sxtb	r3, r3
 8007194:	4313      	orrs	r3, r2
 8007196:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8007198:	b2db      	uxtb	r3, r3
 800719a:	0019      	movs	r1, r3
 800719c:	2026      	movs	r0, #38	; 0x26
 800719e:	f001 f88d 	bl	80082bc <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 80071a2:	2328      	movs	r3, #40	; 0x28
 80071a4:	18fb      	adds	r3, r7, r3
 80071a6:	881b      	ldrh	r3, [r3, #0]
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	0019      	movs	r1, r3
 80071ac:	201f      	movs	r0, #31
 80071ae:	f001 f885 	bl	80082bc <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 80071b2:	2324      	movs	r3, #36	; 0x24
 80071b4:	18fb      	adds	r3, r7, r3
 80071b6:	881b      	ldrh	r3, [r3, #0]
 80071b8:	0a1b      	lsrs	r3, r3, #8
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	0019      	movs	r1, r3
 80071c0:	2020      	movs	r0, #32
 80071c2:	f001 f87b 	bl	80082bc <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 80071c6:	2324      	movs	r3, #36	; 0x24
 80071c8:	18fb      	adds	r3, r7, r3
 80071ca:	881b      	ldrh	r3, [r3, #0]
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	0019      	movs	r1, r3
 80071d0:	2021      	movs	r0, #33	; 0x21
 80071d2:	f001 f873 	bl	80082bc <SX1276Write>
            if( fixLen == 1 )
 80071d6:	232c      	movs	r3, #44	; 0x2c
 80071d8:	18fb      	adds	r3, r7, r3
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d006      	beq.n	80071ee <SX1276SetRxConfig+0x3da>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 80071e0:	2330      	movs	r3, #48	; 0x30
 80071e2:	18fb      	adds	r3, r7, r3
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	0019      	movs	r1, r3
 80071e8:	2022      	movs	r0, #34	; 0x22
 80071ea:	f001 f867 	bl	80082bc <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80071ee:	4b35      	ldr	r3, [pc, #212]	; (80072c4 <SX1276SetRxConfig+0x4b0>)
 80071f0:	2253      	movs	r2, #83	; 0x53
 80071f2:	5c9b      	ldrb	r3, [r3, r2]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d013      	beq.n	8007220 <SX1276SetRxConfig+0x40c>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 80071f8:	2044      	movs	r0, #68	; 0x44
 80071fa:	f001 f873 	bl	80082e4 <SX1276Read>
 80071fe:	0003      	movs	r3, r0
 8007200:	001a      	movs	r2, r3
 8007202:	2380      	movs	r3, #128	; 0x80
 8007204:	425b      	negs	r3, r3
 8007206:	4313      	orrs	r3, r2
 8007208:	b2db      	uxtb	r3, r3
 800720a:	0019      	movs	r1, r3
 800720c:	2044      	movs	r0, #68	; 0x44
 800720e:	f001 f855 	bl	80082bc <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8007212:	4b2c      	ldr	r3, [pc, #176]	; (80072c4 <SX1276SetRxConfig+0x4b0>)
 8007214:	2254      	movs	r2, #84	; 0x54
 8007216:	5c9b      	ldrb	r3, [r3, r2]
 8007218:	0019      	movs	r1, r3
 800721a:	2024      	movs	r0, #36	; 0x24
 800721c:	f001 f84e 	bl	80082bc <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	2b09      	cmp	r3, #9
 8007224:	d10d      	bne.n	8007242 <SX1276SetRxConfig+0x42e>
 8007226:	4b27      	ldr	r3, [pc, #156]	; (80072c4 <SX1276SetRxConfig+0x4b0>)
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	4a27      	ldr	r2, [pc, #156]	; (80072c8 <SX1276SetRxConfig+0x4b4>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d908      	bls.n	8007242 <SX1276SetRxConfig+0x42e>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8007230:	2102      	movs	r1, #2
 8007232:	2036      	movs	r0, #54	; 0x36
 8007234:	f001 f842 	bl	80082bc <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 8007238:	2164      	movs	r1, #100	; 0x64
 800723a:	203a      	movs	r0, #58	; 0x3a
 800723c:	f001 f83e 	bl	80082bc <SX1276Write>
 8007240:	e00f      	b.n	8007262 <SX1276SetRxConfig+0x44e>
            else if( bandwidth == 9 )
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	2b09      	cmp	r3, #9
 8007246:	d108      	bne.n	800725a <SX1276SetRxConfig+0x446>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8007248:	2102      	movs	r1, #2
 800724a:	2036      	movs	r0, #54	; 0x36
 800724c:	f001 f836 	bl	80082bc <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 8007250:	217f      	movs	r1, #127	; 0x7f
 8007252:	203a      	movs	r0, #58	; 0x3a
 8007254:	f001 f832 	bl	80082bc <SX1276Write>
 8007258:	e003      	b.n	8007262 <SX1276SetRxConfig+0x44e>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 800725a:	2103      	movs	r1, #3
 800725c:	2036      	movs	r0, #54	; 0x36
 800725e:	f001 f82d 	bl	80082bc <SX1276Write>
            if( datarate == 6 )
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2b06      	cmp	r3, #6
 8007266:	d114      	bne.n	8007292 <SX1276SetRxConfig+0x47e>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8007268:	2031      	movs	r0, #49	; 0x31
 800726a:	f001 f83b 	bl	80082e4 <SX1276Read>
 800726e:	0003      	movs	r3, r0
 8007270:	b25b      	sxtb	r3, r3
 8007272:	2207      	movs	r2, #7
 8007274:	4393      	bics	r3, r2
 8007276:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8007278:	2205      	movs	r2, #5
 800727a:	4313      	orrs	r3, r2
 800727c:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800727e:	b2db      	uxtb	r3, r3
 8007280:	0019      	movs	r1, r3
 8007282:	2031      	movs	r0, #49	; 0x31
 8007284:	f001 f81a 	bl	80082bc <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8007288:	210c      	movs	r1, #12
 800728a:	2037      	movs	r0, #55	; 0x37
 800728c:	f001 f816 	bl	80082bc <SX1276Write>
        break;
 8007290:	e013      	b.n	80072ba <SX1276SetRxConfig+0x4a6>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8007292:	2031      	movs	r0, #49	; 0x31
 8007294:	f001 f826 	bl	80082e4 <SX1276Read>
 8007298:	0003      	movs	r3, r0
 800729a:	b25b      	sxtb	r3, r3
 800729c:	2207      	movs	r2, #7
 800729e:	4393      	bics	r3, r2
 80072a0:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 80072a2:	2203      	movs	r2, #3
 80072a4:	4313      	orrs	r3, r2
 80072a6:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	0019      	movs	r1, r3
 80072ac:	2031      	movs	r0, #49	; 0x31
 80072ae:	f001 f805 	bl	80082bc <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80072b2:	210a      	movs	r1, #10
 80072b4:	2037      	movs	r0, #55	; 0x37
 80072b6:	f001 f801 	bl	80082bc <SX1276Write>
        break;
 80072ba:	46c0      	nop			; (mov r8, r8)
}
 80072bc:	46c0      	nop			; (mov r8, r8)
 80072be:	46bd      	mov	sp, r7
 80072c0:	b004      	add	sp, #16
 80072c2:	bdb0      	pop	{r4, r5, r7, pc}
 80072c4:	20000a34 	.word	0x20000a34
 80072c8:	1f4add40 	.word	0x1f4add40

080072cc <SX1276SetTxConfig>:
void SX1276SetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 80072cc:	b590      	push	{r4, r7, lr}
 80072ce:	b085      	sub	sp, #20
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	60ba      	str	r2, [r7, #8]
 80072d4:	607b      	str	r3, [r7, #4]
 80072d6:	230f      	movs	r3, #15
 80072d8:	18fb      	adds	r3, r7, r3
 80072da:	1c02      	adds	r2, r0, #0
 80072dc:	701a      	strb	r2, [r3, #0]
 80072de:	230e      	movs	r3, #14
 80072e0:	18fb      	adds	r3, r7, r3
 80072e2:	1c0a      	adds	r2, r1, #0
 80072e4:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
 80072e6:	230f      	movs	r3, #15
 80072e8:	18fb      	adds	r3, r7, r3
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	0018      	movs	r0, r3
 80072ee:	f000 ff8d 	bl	800820c <SX1276SetModem>

    LoRaBoardCallbacks->SX1276BoardSetRfTxPower( power );
 80072f2:	4bdc      	ldr	r3, [pc, #880]	; (8007664 <SX1276SetTxConfig+0x398>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	220e      	movs	r2, #14
 80072fa:	18ba      	adds	r2, r7, r2
 80072fc:	7812      	ldrb	r2, [r2, #0]
 80072fe:	b252      	sxtb	r2, r2
 8007300:	0010      	movs	r0, r2
 8007302:	4798      	blx	r3

    switch( modem )
 8007304:	230f      	movs	r3, #15
 8007306:	18fb      	adds	r3, r7, r3
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d003      	beq.n	8007316 <SX1276SetTxConfig+0x4a>
 800730e:	2b01      	cmp	r3, #1
 8007310:	d100      	bne.n	8007314 <SX1276SetTxConfig+0x48>
 8007312:	e0a4      	b.n	800745e <SX1276SetTxConfig+0x192>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 8007314:	e1a2      	b.n	800765c <SX1276SetTxConfig+0x390>
            SX1276.Settings.Fsk.Power = power;
 8007316:	4bd4      	ldr	r3, [pc, #848]	; (8007668 <SX1276SetTxConfig+0x39c>)
 8007318:	220e      	movs	r2, #14
 800731a:	18ba      	adds	r2, r7, r2
 800731c:	7812      	ldrb	r2, [r2, #0]
 800731e:	731a      	strb	r2, [r3, #12]
            SX1276.Settings.Fsk.Fdev = fdev;
 8007320:	4bd1      	ldr	r3, [pc, #836]	; (8007668 <SX1276SetTxConfig+0x39c>)
 8007322:	68ba      	ldr	r2, [r7, #8]
 8007324:	611a      	str	r2, [r3, #16]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8007326:	4bd0      	ldr	r3, [pc, #832]	; (8007668 <SX1276SetTxConfig+0x39c>)
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 800732c:	4bce      	ldr	r3, [pc, #824]	; (8007668 <SX1276SetTxConfig+0x39c>)
 800732e:	6a3a      	ldr	r2, [r7, #32]
 8007330:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8007332:	4bcd      	ldr	r3, [pc, #820]	; (8007668 <SX1276SetTxConfig+0x39c>)
 8007334:	2228      	movs	r2, #40	; 0x28
 8007336:	18ba      	adds	r2, r7, r2
 8007338:	8812      	ldrh	r2, [r2, #0]
 800733a:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 800733c:	4bca      	ldr	r3, [pc, #808]	; (8007668 <SX1276SetTxConfig+0x39c>)
 800733e:	222c      	movs	r2, #44	; 0x2c
 8007340:	18ba      	adds	r2, r7, r2
 8007342:	2122      	movs	r1, #34	; 0x22
 8007344:	7812      	ldrb	r2, [r2, #0]
 8007346:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8007348:	4bc7      	ldr	r3, [pc, #796]	; (8007668 <SX1276SetTxConfig+0x39c>)
 800734a:	2230      	movs	r2, #48	; 0x30
 800734c:	18ba      	adds	r2, r7, r2
 800734e:	2124      	movs	r1, #36	; 0x24
 8007350:	7812      	ldrb	r2, [r2, #0]
 8007352:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8007354:	4bc4      	ldr	r3, [pc, #784]	; (8007668 <SX1276SetTxConfig+0x39c>)
 8007356:	223c      	movs	r2, #60	; 0x3c
 8007358:	18ba      	adds	r2, r7, r2
 800735a:	2125      	movs	r1, #37	; 0x25
 800735c:	7812      	ldrb	r2, [r2, #0]
 800735e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8007360:	4bc1      	ldr	r3, [pc, #772]	; (8007668 <SX1276SetTxConfig+0x39c>)
 8007362:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007364:	629a      	str	r2, [r3, #40]	; 0x28
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 8007366:	68b8      	ldr	r0, [r7, #8]
 8007368:	f7fa ff0c 	bl	8002184 <__aeabi_ui2d>
 800736c:	2200      	movs	r2, #0
 800736e:	4bbf      	ldr	r3, [pc, #764]	; (800766c <SX1276SetTxConfig+0x3a0>)
 8007370:	f7f9 fca8 	bl	8000cc4 <__aeabi_ddiv>
 8007374:	0003      	movs	r3, r0
 8007376:	000c      	movs	r4, r1
 8007378:	0018      	movs	r0, r3
 800737a:	0021      	movs	r1, r4
 800737c:	f7f9 f8b4 	bl	80004e8 <__aeabi_d2uiz>
 8007380:	0003      	movs	r3, r0
 8007382:	b29b      	uxth	r3, r3
 8007384:	60bb      	str	r3, [r7, #8]
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	0a1b      	lsrs	r3, r3, #8
 800738a:	b2db      	uxtb	r3, r3
 800738c:	0019      	movs	r1, r3
 800738e:	2004      	movs	r0, #4
 8007390:	f000 ff94 	bl	80082bc <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	b2db      	uxtb	r3, r3
 8007398:	0019      	movs	r1, r3
 800739a:	2005      	movs	r0, #5
 800739c:	f000 ff8e 	bl	80082bc <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 80073a0:	6a38      	ldr	r0, [r7, #32]
 80073a2:	f7fa feef 	bl	8002184 <__aeabi_ui2d>
 80073a6:	0003      	movs	r3, r0
 80073a8:	000c      	movs	r4, r1
 80073aa:	001a      	movs	r2, r3
 80073ac:	0023      	movs	r3, r4
 80073ae:	2000      	movs	r0, #0
 80073b0:	49af      	ldr	r1, [pc, #700]	; (8007670 <SX1276SetTxConfig+0x3a4>)
 80073b2:	f7f9 fc87 	bl	8000cc4 <__aeabi_ddiv>
 80073b6:	0003      	movs	r3, r0
 80073b8:	000c      	movs	r4, r1
 80073ba:	0018      	movs	r0, r3
 80073bc:	0021      	movs	r1, r4
 80073be:	f7f9 f893 	bl	80004e8 <__aeabi_d2uiz>
 80073c2:	0003      	movs	r3, r0
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	623b      	str	r3, [r7, #32]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 80073c8:	6a3b      	ldr	r3, [r7, #32]
 80073ca:	0a1b      	lsrs	r3, r3, #8
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	0019      	movs	r1, r3
 80073d0:	2002      	movs	r0, #2
 80073d2:	f000 ff73 	bl	80082bc <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 80073d6:	6a3b      	ldr	r3, [r7, #32]
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	0019      	movs	r1, r3
 80073dc:	2003      	movs	r0, #3
 80073de:	f000 ff6d 	bl	80082bc <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 80073e2:	2328      	movs	r3, #40	; 0x28
 80073e4:	18fb      	adds	r3, r7, r3
 80073e6:	881b      	ldrh	r3, [r3, #0]
 80073e8:	0a1b      	lsrs	r3, r3, #8
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	0019      	movs	r1, r3
 80073f0:	2025      	movs	r0, #37	; 0x25
 80073f2:	f000 ff63 	bl	80082bc <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 80073f6:	2328      	movs	r3, #40	; 0x28
 80073f8:	18fb      	adds	r3, r7, r3
 80073fa:	881b      	ldrh	r3, [r3, #0]
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	0019      	movs	r1, r3
 8007400:	2026      	movs	r0, #38	; 0x26
 8007402:	f000 ff5b 	bl	80082bc <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8007406:	2030      	movs	r0, #48	; 0x30
 8007408:	f000 ff6c 	bl	80082e4 <SX1276Read>
 800740c:	0003      	movs	r3, r0
 800740e:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 8007410:	226f      	movs	r2, #111	; 0x6f
 8007412:	4013      	ands	r3, r2
 8007414:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8007416:	232c      	movs	r3, #44	; 0x2c
 8007418:	18fb      	adds	r3, r7, r3
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d001      	beq.n	8007424 <SX1276SetTxConfig+0x158>
 8007420:	2300      	movs	r3, #0
 8007422:	e001      	b.n	8007428 <SX1276SetTxConfig+0x15c>
 8007424:	2380      	movs	r3, #128	; 0x80
 8007426:	425b      	negs	r3, r3
 8007428:	4313      	orrs	r3, r2
 800742a:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 800742c:	2330      	movs	r3, #48	; 0x30
 800742e:	18fb      	adds	r3, r7, r3
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8007434:	b25b      	sxtb	r3, r3
 8007436:	4313      	orrs	r3, r2
 8007438:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 800743a:	b2db      	uxtb	r3, r3
 800743c:	0019      	movs	r1, r3
 800743e:	2030      	movs	r0, #48	; 0x30
 8007440:	f000 ff3c 	bl	80082bc <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8007444:	2031      	movs	r0, #49	; 0x31
 8007446:	f000 ff4d 	bl	80082e4 <SX1276Read>
 800744a:	0003      	movs	r3, r0
 800744c:	001a      	movs	r2, r3
 800744e:	2340      	movs	r3, #64	; 0x40
 8007450:	4313      	orrs	r3, r2
 8007452:	b2db      	uxtb	r3, r3
 8007454:	0019      	movs	r1, r3
 8007456:	2031      	movs	r0, #49	; 0x31
 8007458:	f000 ff30 	bl	80082bc <SX1276Write>
        break;
 800745c:	e0fe      	b.n	800765c <SX1276SetTxConfig+0x390>
            SX1276.Settings.LoRa.Power = power;
 800745e:	4b82      	ldr	r3, [pc, #520]	; (8007668 <SX1276SetTxConfig+0x39c>)
 8007460:	220e      	movs	r2, #14
 8007462:	18ba      	adds	r2, r7, r2
 8007464:	2140      	movs	r1, #64	; 0x40
 8007466:	7812      	ldrb	r2, [r2, #0]
 8007468:	545a      	strb	r2, [r3, r1]
            if( bandwidth > 2 )
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2b02      	cmp	r3, #2
 800746e:	d900      	bls.n	8007472 <SX1276SetTxConfig+0x1a6>
                while( 1 );
 8007470:	e7fe      	b.n	8007470 <SX1276SetTxConfig+0x1a4>
            bandwidth += 7;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	3307      	adds	r3, #7
 8007476:	607b      	str	r3, [r7, #4]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8007478:	4b7b      	ldr	r3, [pc, #492]	; (8007668 <SX1276SetTxConfig+0x39c>)
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	645a      	str	r2, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 800747e:	4b7a      	ldr	r3, [pc, #488]	; (8007668 <SX1276SetTxConfig+0x39c>)
 8007480:	6a3a      	ldr	r2, [r7, #32]
 8007482:	649a      	str	r2, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 8007484:	4b78      	ldr	r3, [pc, #480]	; (8007668 <SX1276SetTxConfig+0x39c>)
 8007486:	2224      	movs	r2, #36	; 0x24
 8007488:	18ba      	adds	r2, r7, r2
 800748a:	214d      	movs	r1, #77	; 0x4d
 800748c:	7812      	ldrb	r2, [r2, #0]
 800748e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8007490:	4b75      	ldr	r3, [pc, #468]	; (8007668 <SX1276SetTxConfig+0x39c>)
 8007492:	2228      	movs	r2, #40	; 0x28
 8007494:	18ba      	adds	r2, r7, r2
 8007496:	214e      	movs	r1, #78	; 0x4e
 8007498:	8812      	ldrh	r2, [r2, #0]
 800749a:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 800749c:	4b72      	ldr	r3, [pc, #456]	; (8007668 <SX1276SetTxConfig+0x39c>)
 800749e:	222c      	movs	r2, #44	; 0x2c
 80074a0:	18ba      	adds	r2, r7, r2
 80074a2:	2150      	movs	r1, #80	; 0x50
 80074a4:	7812      	ldrb	r2, [r2, #0]
 80074a6:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 80074a8:	4b6f      	ldr	r3, [pc, #444]	; (8007668 <SX1276SetTxConfig+0x39c>)
 80074aa:	2234      	movs	r2, #52	; 0x34
 80074ac:	18ba      	adds	r2, r7, r2
 80074ae:	2153      	movs	r1, #83	; 0x53
 80074b0:	7812      	ldrb	r2, [r2, #0]
 80074b2:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 80074b4:	4b6c      	ldr	r3, [pc, #432]	; (8007668 <SX1276SetTxConfig+0x39c>)
 80074b6:	2238      	movs	r2, #56	; 0x38
 80074b8:	18ba      	adds	r2, r7, r2
 80074ba:	2154      	movs	r1, #84	; 0x54
 80074bc:	7812      	ldrb	r2, [r2, #0]
 80074be:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 80074c0:	4b69      	ldr	r3, [pc, #420]	; (8007668 <SX1276SetTxConfig+0x39c>)
 80074c2:	2230      	movs	r2, #48	; 0x30
 80074c4:	18ba      	adds	r2, r7, r2
 80074c6:	2152      	movs	r1, #82	; 0x52
 80074c8:	7812      	ldrb	r2, [r2, #0]
 80074ca:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 80074cc:	4b66      	ldr	r3, [pc, #408]	; (8007668 <SX1276SetTxConfig+0x39c>)
 80074ce:	223c      	movs	r2, #60	; 0x3c
 80074d0:	18ba      	adds	r2, r7, r2
 80074d2:	2155      	movs	r1, #85	; 0x55
 80074d4:	7812      	ldrb	r2, [r2, #0]
 80074d6:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 80074d8:	4b63      	ldr	r3, [pc, #396]	; (8007668 <SX1276SetTxConfig+0x39c>)
 80074da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80074dc:	659a      	str	r2, [r3, #88]	; 0x58
            if( datarate > 12 )
 80074de:	6a3b      	ldr	r3, [r7, #32]
 80074e0:	2b0c      	cmp	r3, #12
 80074e2:	d902      	bls.n	80074ea <SX1276SetTxConfig+0x21e>
                datarate = 12;
 80074e4:	230c      	movs	r3, #12
 80074e6:	623b      	str	r3, [r7, #32]
 80074e8:	e004      	b.n	80074f4 <SX1276SetTxConfig+0x228>
            else if( datarate < 6 )
 80074ea:	6a3b      	ldr	r3, [r7, #32]
 80074ec:	2b05      	cmp	r3, #5
 80074ee:	d801      	bhi.n	80074f4 <SX1276SetTxConfig+0x228>
                datarate = 6;
 80074f0:	2306      	movs	r3, #6
 80074f2:	623b      	str	r3, [r7, #32]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2b07      	cmp	r3, #7
 80074f8:	d105      	bne.n	8007506 <SX1276SetTxConfig+0x23a>
 80074fa:	6a3b      	ldr	r3, [r7, #32]
 80074fc:	2b0b      	cmp	r3, #11
 80074fe:	d008      	beq.n	8007512 <SX1276SetTxConfig+0x246>
 8007500:	6a3b      	ldr	r3, [r7, #32]
 8007502:	2b0c      	cmp	r3, #12
 8007504:	d005      	beq.n	8007512 <SX1276SetTxConfig+0x246>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2b08      	cmp	r3, #8
 800750a:	d107      	bne.n	800751c <SX1276SetTxConfig+0x250>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 800750c:	6a3b      	ldr	r3, [r7, #32]
 800750e:	2b0c      	cmp	r3, #12
 8007510:	d104      	bne.n	800751c <SX1276SetTxConfig+0x250>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8007512:	4b55      	ldr	r3, [pc, #340]	; (8007668 <SX1276SetTxConfig+0x39c>)
 8007514:	224c      	movs	r2, #76	; 0x4c
 8007516:	2101      	movs	r1, #1
 8007518:	5499      	strb	r1, [r3, r2]
 800751a:	e003      	b.n	8007524 <SX1276SetTxConfig+0x258>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 800751c:	4b52      	ldr	r3, [pc, #328]	; (8007668 <SX1276SetTxConfig+0x39c>)
 800751e:	224c      	movs	r2, #76	; 0x4c
 8007520:	2100      	movs	r1, #0
 8007522:	5499      	strb	r1, [r3, r2]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8007524:	4b50      	ldr	r3, [pc, #320]	; (8007668 <SX1276SetTxConfig+0x39c>)
 8007526:	2253      	movs	r2, #83	; 0x53
 8007528:	5c9b      	ldrb	r3, [r3, r2]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d013      	beq.n	8007556 <SX1276SetTxConfig+0x28a>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 800752e:	2044      	movs	r0, #68	; 0x44
 8007530:	f000 fed8 	bl	80082e4 <SX1276Read>
 8007534:	0003      	movs	r3, r0
 8007536:	001a      	movs	r2, r3
 8007538:	2380      	movs	r3, #128	; 0x80
 800753a:	425b      	negs	r3, r3
 800753c:	4313      	orrs	r3, r2
 800753e:	b2db      	uxtb	r3, r3
 8007540:	0019      	movs	r1, r3
 8007542:	2044      	movs	r0, #68	; 0x44
 8007544:	f000 feba 	bl	80082bc <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8007548:	4b47      	ldr	r3, [pc, #284]	; (8007668 <SX1276SetTxConfig+0x39c>)
 800754a:	2254      	movs	r2, #84	; 0x54
 800754c:	5c9b      	ldrb	r3, [r3, r2]
 800754e:	0019      	movs	r1, r3
 8007550:	2024      	movs	r0, #36	; 0x24
 8007552:	f000 feb3 	bl	80082bc <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8007556:	201d      	movs	r0, #29
 8007558:	f000 fec4 	bl	80082e4 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	b2db      	uxtb	r3, r3
 8007560:	011b      	lsls	r3, r3, #4
 8007562:	b2da      	uxtb	r2, r3
 8007564:	2324      	movs	r3, #36	; 0x24
 8007566:	18fb      	adds	r3, r7, r3
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	18db      	adds	r3, r3, r3
 800756c:	b2db      	uxtb	r3, r3
 800756e:	4313      	orrs	r3, r2
 8007570:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8007572:	232c      	movs	r3, #44	; 0x2c
 8007574:	18fb      	adds	r3, r7, r3
 8007576:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8007578:	4313      	orrs	r3, r2
 800757a:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 800757c:	0019      	movs	r1, r3
 800757e:	201d      	movs	r0, #29
 8007580:	f000 fe9c 	bl	80082bc <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8007584:	201e      	movs	r0, #30
 8007586:	f000 fead 	bl	80082e4 <SX1276Read>
 800758a:	0003      	movs	r3, r0
 800758c:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_SF_MASK &
 800758e:	230b      	movs	r3, #11
 8007590:	4013      	ands	r3, r2
 8007592:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8007594:	6a3b      	ldr	r3, [r7, #32]
 8007596:	b2db      	uxtb	r3, r3
 8007598:	011b      	lsls	r3, r3, #4
 800759a:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 800759c:	4313      	orrs	r3, r2
 800759e:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 80075a0:	2330      	movs	r3, #48	; 0x30
 80075a2:	18fb      	adds	r3, r7, r3
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 80075aa:	4313      	orrs	r3, r2
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	0019      	movs	r1, r3
 80075b0:	201e      	movs	r0, #30
 80075b2:	f000 fe83 	bl	80082bc <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 80075b6:	2026      	movs	r0, #38	; 0x26
 80075b8:	f000 fe94 	bl	80082e4 <SX1276Read>
 80075bc:	0003      	movs	r3, r0
 80075be:	b25b      	sxtb	r3, r3
 80075c0:	2208      	movs	r2, #8
 80075c2:	4393      	bics	r3, r2
 80075c4:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 80075c6:	4b28      	ldr	r3, [pc, #160]	; (8007668 <SX1276SetTxConfig+0x39c>)
 80075c8:	214c      	movs	r1, #76	; 0x4c
 80075ca:	5c5b      	ldrb	r3, [r3, r1]
 80075cc:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 80075ce:	b25b      	sxtb	r3, r3
 80075d0:	4313      	orrs	r3, r2
 80075d2:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	0019      	movs	r1, r3
 80075d8:	2026      	movs	r0, #38	; 0x26
 80075da:	f000 fe6f 	bl	80082bc <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 80075de:	2328      	movs	r3, #40	; 0x28
 80075e0:	18fb      	adds	r3, r7, r3
 80075e2:	881b      	ldrh	r3, [r3, #0]
 80075e4:	0a1b      	lsrs	r3, r3, #8
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	0019      	movs	r1, r3
 80075ec:	2020      	movs	r0, #32
 80075ee:	f000 fe65 	bl	80082bc <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 80075f2:	2328      	movs	r3, #40	; 0x28
 80075f4:	18fb      	adds	r3, r7, r3
 80075f6:	881b      	ldrh	r3, [r3, #0]
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	0019      	movs	r1, r3
 80075fc:	2021      	movs	r0, #33	; 0x21
 80075fe:	f000 fe5d 	bl	80082bc <SX1276Write>
            if( datarate == 6 )
 8007602:	6a3b      	ldr	r3, [r7, #32]
 8007604:	2b06      	cmp	r3, #6
 8007606:	d114      	bne.n	8007632 <SX1276SetTxConfig+0x366>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8007608:	2031      	movs	r0, #49	; 0x31
 800760a:	f000 fe6b 	bl	80082e4 <SX1276Read>
 800760e:	0003      	movs	r3, r0
 8007610:	b25b      	sxtb	r3, r3
 8007612:	2207      	movs	r2, #7
 8007614:	4393      	bics	r3, r2
 8007616:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8007618:	2205      	movs	r2, #5
 800761a:	4313      	orrs	r3, r2
 800761c:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800761e:	b2db      	uxtb	r3, r3
 8007620:	0019      	movs	r1, r3
 8007622:	2031      	movs	r0, #49	; 0x31
 8007624:	f000 fe4a 	bl	80082bc <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8007628:	210c      	movs	r1, #12
 800762a:	2037      	movs	r0, #55	; 0x37
 800762c:	f000 fe46 	bl	80082bc <SX1276Write>
        break;
 8007630:	e013      	b.n	800765a <SX1276SetTxConfig+0x38e>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8007632:	2031      	movs	r0, #49	; 0x31
 8007634:	f000 fe56 	bl	80082e4 <SX1276Read>
 8007638:	0003      	movs	r3, r0
 800763a:	b25b      	sxtb	r3, r3
 800763c:	2207      	movs	r2, #7
 800763e:	4393      	bics	r3, r2
 8007640:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8007642:	2203      	movs	r2, #3
 8007644:	4313      	orrs	r3, r2
 8007646:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8007648:	b2db      	uxtb	r3, r3
 800764a:	0019      	movs	r1, r3
 800764c:	2031      	movs	r0, #49	; 0x31
 800764e:	f000 fe35 	bl	80082bc <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8007652:	210a      	movs	r1, #10
 8007654:	2037      	movs	r0, #55	; 0x37
 8007656:	f000 fe31 	bl	80082bc <SX1276Write>
        break;
 800765a:	46c0      	nop			; (mov r8, r8)
}
 800765c:	46c0      	nop			; (mov r8, r8)
 800765e:	46bd      	mov	sp, r7
 8007660:	b005      	add	sp, #20
 8007662:	bd90      	pop	{r4, r7, pc}
 8007664:	20000888 	.word	0x20000888
 8007668:	20000a34 	.word	0x20000a34
 800766c:	404e8480 	.word	0x404e8480
 8007670:	417e8480 	.word	0x417e8480

08007674 <SX1276GetTimeOnAir>:

uint32_t SX1276GetTimeOnAir( RadioModems_t modem, uint8_t pktLen )
{
 8007674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007676:	b095      	sub	sp, #84	; 0x54
 8007678:	af00      	add	r7, sp, #0
 800767a:	0002      	movs	r2, r0
 800767c:	1dfb      	adds	r3, r7, #7
 800767e:	701a      	strb	r2, [r3, #0]
 8007680:	1dbb      	adds	r3, r7, #6
 8007682:	1c0a      	adds	r2, r1, #0
 8007684:	701a      	strb	r2, [r3, #0]
    uint32_t airTime = 0;
 8007686:	2300      	movs	r3, #0
 8007688:	64fb      	str	r3, [r7, #76]	; 0x4c

    switch( modem )
 800768a:	1dfb      	adds	r3, r7, #7
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d003      	beq.n	800769a <SX1276GetTimeOnAir+0x26>
 8007692:	2b01      	cmp	r3, #1
 8007694:	d100      	bne.n	8007698 <SX1276GetTimeOnAir+0x24>
 8007696:	e086      	b.n	80077a6 <SX1276GetTimeOnAir+0x132>
 8007698:	e164      	b.n	8007964 <SX1276GetTimeOnAir+0x2f0>
    {
    case MODEM_FSK:
        {
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 800769a:	4bb5      	ldr	r3, [pc, #724]	; (8007970 <SX1276GetTimeOnAir+0x2fc>)
 800769c:	8c1b      	ldrh	r3, [r3, #32]
 800769e:	001c      	movs	r4, r3
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 80076a0:	2027      	movs	r0, #39	; 0x27
 80076a2:	f000 fe1f 	bl	80082e4 <SX1276Read>
 80076a6:	0003      	movs	r3, r0
 80076a8:	001a      	movs	r2, r3
 80076aa:	23f8      	movs	r3, #248	; 0xf8
 80076ac:	439a      	bics	r2, r3
 80076ae:	0013      	movs	r3, r2
 80076b0:	3301      	adds	r3, #1
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 80076b2:	18e3      	adds	r3, r4, r3
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 80076b4:	0018      	movs	r0, r3
 80076b6:	f7fa fd23 	bl	8002100 <__aeabi_i2d>
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 80076ba:	4bad      	ldr	r3, [pc, #692]	; (8007970 <SX1276GetTimeOnAir+0x2fc>)
 80076bc:	2222      	movs	r2, #34	; 0x22
 80076be:	5c9b      	ldrb	r3, [r3, r2]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d002      	beq.n	80076ca <SX1276GetTimeOnAir+0x56>
 80076c4:	2300      	movs	r3, #0
 80076c6:	2400      	movs	r4, #0
 80076c8:	e001      	b.n	80076ce <SX1276GetTimeOnAir+0x5a>
 80076ca:	2300      	movs	r3, #0
 80076cc:	4ca9      	ldr	r4, [pc, #676]	; (8007974 <SX1276GetTimeOnAir+0x300>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 80076ce:	001a      	movs	r2, r3
 80076d0:	0023      	movs	r3, r4
 80076d2:	f7f8 ffe7 	bl	80006a4 <__aeabi_dadd>
 80076d6:	0003      	movs	r3, r0
 80076d8:	000c      	movs	r4, r1
 80076da:	001d      	movs	r5, r3
 80076dc:	0026      	movs	r6, r4
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 80076de:	2030      	movs	r0, #48	; 0x30
 80076e0:	f000 fe00 	bl	80082e4 <SX1276Read>
 80076e4:	0003      	movs	r3, r0
 80076e6:	001a      	movs	r2, r3
 80076e8:	23f9      	movs	r3, #249	; 0xf9
 80076ea:	439a      	bics	r2, r3
 80076ec:	1e13      	subs	r3, r2, #0
 80076ee:	d002      	beq.n	80076f6 <SX1276GetTimeOnAir+0x82>
 80076f0:	2300      	movs	r3, #0
 80076f2:	4ca0      	ldr	r4, [pc, #640]	; (8007974 <SX1276GetTimeOnAir+0x300>)
 80076f4:	e001      	b.n	80076fa <SX1276GetTimeOnAir+0x86>
 80076f6:	2300      	movs	r3, #0
 80076f8:	2400      	movs	r4, #0
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 80076fa:	001a      	movs	r2, r3
 80076fc:	0023      	movs	r3, r4
 80076fe:	0028      	movs	r0, r5
 8007700:	0031      	movs	r1, r6
 8007702:	f7f8 ffcf 	bl	80006a4 <__aeabi_dadd>
 8007706:	0003      	movs	r3, r0
 8007708:	000c      	movs	r4, r1
 800770a:	0025      	movs	r5, r4
 800770c:	001c      	movs	r4, r3
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 800770e:	1dbb      	adds	r3, r7, #6
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	0018      	movs	r0, r3
 8007714:	f7fa fcf4 	bl	8002100 <__aeabi_i2d>
 8007718:	0002      	movs	r2, r0
 800771a:	000b      	movs	r3, r1
 800771c:	0020      	movs	r0, r4
 800771e:	0029      	movs	r1, r5
 8007720:	f7f8 ffc0 	bl	80006a4 <__aeabi_dadd>
 8007724:	0003      	movs	r3, r0
 8007726:	000c      	movs	r4, r1
 8007728:	0018      	movs	r0, r3
 800772a:	0021      	movs	r1, r4
                                     pktLen +
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 800772c:	4b90      	ldr	r3, [pc, #576]	; (8007970 <SX1276GetTimeOnAir+0x2fc>)
 800772e:	2224      	movs	r2, #36	; 0x24
 8007730:	5c9b      	ldrb	r3, [r3, r2]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d003      	beq.n	800773e <SX1276GetTimeOnAir+0xca>
 8007736:	2300      	movs	r3, #0
 8007738:	2480      	movs	r4, #128	; 0x80
 800773a:	05e4      	lsls	r4, r4, #23
 800773c:	e001      	b.n	8007742 <SX1276GetTimeOnAir+0xce>
 800773e:	2300      	movs	r3, #0
 8007740:	2400      	movs	r4, #0
                                     pktLen +
 8007742:	001a      	movs	r2, r3
 8007744:	0023      	movs	r3, r4
 8007746:	f7f8 ffad 	bl	80006a4 <__aeabi_dadd>
 800774a:	0003      	movs	r3, r0
 800774c:	000c      	movs	r4, r1
 800774e:	0018      	movs	r0, r3
 8007750:	0021      	movs	r1, r4
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8007752:	2200      	movs	r2, #0
 8007754:	4b88      	ldr	r3, [pc, #544]	; (8007978 <SX1276GetTimeOnAir+0x304>)
 8007756:	f7f9 fee9 	bl	800152c <__aeabi_dmul>
 800775a:	0003      	movs	r3, r0
 800775c:	000c      	movs	r4, r1
 800775e:	0025      	movs	r5, r4
 8007760:	001c      	movs	r4, r3
                                     SX1276.Settings.Fsk.Datarate ) * 1000 );
 8007762:	4b83      	ldr	r3, [pc, #524]	; (8007970 <SX1276GetTimeOnAir+0x2fc>)
 8007764:	69db      	ldr	r3, [r3, #28]
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8007766:	0018      	movs	r0, r3
 8007768:	f7fa fd0c 	bl	8002184 <__aeabi_ui2d>
 800776c:	0002      	movs	r2, r0
 800776e:	000b      	movs	r3, r1
 8007770:	0020      	movs	r0, r4
 8007772:	0029      	movs	r1, r5
 8007774:	f7f9 faa6 	bl	8000cc4 <__aeabi_ddiv>
 8007778:	0003      	movs	r3, r0
 800777a:	000c      	movs	r4, r1
 800777c:	0018      	movs	r0, r3
 800777e:	0021      	movs	r1, r4
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8007780:	2200      	movs	r2, #0
 8007782:	4b7e      	ldr	r3, [pc, #504]	; (800797c <SX1276GetTimeOnAir+0x308>)
 8007784:	f7f9 fed2 	bl	800152c <__aeabi_dmul>
 8007788:	0003      	movs	r3, r0
 800778a:	000c      	movs	r4, r1
 800778c:	0018      	movs	r0, r3
 800778e:	0021      	movs	r1, r4
 8007790:	f005 fe92 	bl	800d4b8 <round>
 8007794:	0003      	movs	r3, r0
 8007796:	000c      	movs	r4, r1
 8007798:	0018      	movs	r0, r3
 800779a:	0021      	movs	r1, r4
 800779c:	f7f8 fea4 	bl	80004e8 <__aeabi_d2uiz>
 80077a0:	0003      	movs	r3, r0
 80077a2:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
        break;
 80077a4:	e0de      	b.n	8007964 <SX1276GetTimeOnAir+0x2f0>
    case MODEM_LORA:
        {
            double bw = 0.0;
 80077a6:	2300      	movs	r3, #0
 80077a8:	2400      	movs	r4, #0
 80077aa:	643b      	str	r3, [r7, #64]	; 0x40
 80077ac:	647c      	str	r4, [r7, #68]	; 0x44
            // REMARK: When using LoRa modem only bandwidths 125, 250 and 500 kHz are supported
            switch( SX1276.Settings.LoRa.Bandwidth )
 80077ae:	4b70      	ldr	r3, [pc, #448]	; (8007970 <SX1276GetTimeOnAir+0x2fc>)
 80077b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077b2:	2b08      	cmp	r3, #8
 80077b4:	d008      	beq.n	80077c8 <SX1276GetTimeOnAir+0x154>
 80077b6:	2b09      	cmp	r3, #9
 80077b8:	d00b      	beq.n	80077d2 <SX1276GetTimeOnAir+0x15e>
 80077ba:	2b07      	cmp	r3, #7
 80077bc:	d10e      	bne.n	80077dc <SX1276GetTimeOnAir+0x168>
            //    break;
            //case 6: // 62.5 kHz
            //    bw = 62500;
            //    break;
            case 7: // 125 kHz
                bw = 125000;
 80077be:	2300      	movs	r3, #0
 80077c0:	4c6f      	ldr	r4, [pc, #444]	; (8007980 <SX1276GetTimeOnAir+0x30c>)
 80077c2:	643b      	str	r3, [r7, #64]	; 0x40
 80077c4:	647c      	str	r4, [r7, #68]	; 0x44
                break;
 80077c6:	e009      	b.n	80077dc <SX1276GetTimeOnAir+0x168>
            case 8: // 250 kHz
                bw = 250000;
 80077c8:	2300      	movs	r3, #0
 80077ca:	4c6e      	ldr	r4, [pc, #440]	; (8007984 <SX1276GetTimeOnAir+0x310>)
 80077cc:	643b      	str	r3, [r7, #64]	; 0x40
 80077ce:	647c      	str	r4, [r7, #68]	; 0x44
                break;
 80077d0:	e004      	b.n	80077dc <SX1276GetTimeOnAir+0x168>
            case 9: // 500 kHz
                bw = 500000;
 80077d2:	2300      	movs	r3, #0
 80077d4:	4c6c      	ldr	r4, [pc, #432]	; (8007988 <SX1276GetTimeOnAir+0x314>)
 80077d6:	643b      	str	r3, [r7, #64]	; 0x40
 80077d8:	647c      	str	r4, [r7, #68]	; 0x44
                break;
 80077da:	46c0      	nop			; (mov r8, r8)
            }

            // Symbol rate : time for one symbol (secs)
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
 80077dc:	4b64      	ldr	r3, [pc, #400]	; (8007970 <SX1276GetTimeOnAir+0x2fc>)
 80077de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077e0:	2201      	movs	r2, #1
 80077e2:	409a      	lsls	r2, r3
 80077e4:	0013      	movs	r3, r2
 80077e6:	0018      	movs	r0, r3
 80077e8:	f7fa fc8a 	bl	8002100 <__aeabi_i2d>
 80077ec:	0003      	movs	r3, r0
 80077ee:	000c      	movs	r4, r1
 80077f0:	001a      	movs	r2, r3
 80077f2:	0023      	movs	r3, r4
 80077f4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80077f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80077f8:	f7f9 fa64 	bl	8000cc4 <__aeabi_ddiv>
 80077fc:	0003      	movs	r3, r0
 80077fe:	000c      	movs	r4, r1
 8007800:	63bb      	str	r3, [r7, #56]	; 0x38
 8007802:	63fc      	str	r4, [r7, #60]	; 0x3c
            double ts = 1 / rs;
 8007804:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007808:	2000      	movs	r0, #0
 800780a:	495a      	ldr	r1, [pc, #360]	; (8007974 <SX1276GetTimeOnAir+0x300>)
 800780c:	f7f9 fa5a 	bl	8000cc4 <__aeabi_ddiv>
 8007810:	0003      	movs	r3, r0
 8007812:	000c      	movs	r4, r1
 8007814:	633b      	str	r3, [r7, #48]	; 0x30
 8007816:	637c      	str	r4, [r7, #52]	; 0x34
            // time of preamble
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 8007818:	4b55      	ldr	r3, [pc, #340]	; (8007970 <SX1276GetTimeOnAir+0x2fc>)
 800781a:	224e      	movs	r2, #78	; 0x4e
 800781c:	5a9b      	ldrh	r3, [r3, r2]
 800781e:	0018      	movs	r0, r3
 8007820:	f7fa fc6e 	bl	8002100 <__aeabi_i2d>
 8007824:	2200      	movs	r2, #0
 8007826:	4b59      	ldr	r3, [pc, #356]	; (800798c <SX1276GetTimeOnAir+0x318>)
 8007828:	f7f8 ff3c 	bl	80006a4 <__aeabi_dadd>
 800782c:	0003      	movs	r3, r0
 800782e:	000c      	movs	r4, r1
 8007830:	0018      	movs	r0, r3
 8007832:	0021      	movs	r1, r4
 8007834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007838:	f7f9 fe78 	bl	800152c <__aeabi_dmul>
 800783c:	0003      	movs	r3, r0
 800783e:	000c      	movs	r4, r1
 8007840:	62bb      	str	r3, [r7, #40]	; 0x28
 8007842:	62fc      	str	r4, [r7, #44]	; 0x2c
            // Symbol length of payload and time
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8007844:	1dbb      	adds	r3, r7, #6
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	00db      	lsls	r3, r3, #3
 800784a:	001a      	movs	r2, r3
 800784c:	4b48      	ldr	r3, [pc, #288]	; (8007970 <SX1276GetTimeOnAir+0x2fc>)
 800784e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	1ad3      	subs	r3, r2, r3
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 8007854:	4a46      	ldr	r2, [pc, #280]	; (8007970 <SX1276GetTimeOnAir+0x2fc>)
 8007856:	2152      	movs	r1, #82	; 0x52
 8007858:	5c52      	ldrb	r2, [r2, r1]
 800785a:	0112      	lsls	r2, r2, #4
 800785c:	189a      	adds	r2, r3, r2
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 800785e:	4b44      	ldr	r3, [pc, #272]	; (8007970 <SX1276GetTimeOnAir+0x2fc>)
 8007860:	2150      	movs	r1, #80	; 0x50
 8007862:	5c5b      	ldrb	r3, [r3, r1]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d001      	beq.n	800786c <SX1276GetTimeOnAir+0x1f8>
 8007868:	2314      	movs	r3, #20
 800786a:	e000      	b.n	800786e <SX1276GetTimeOnAir+0x1fa>
 800786c:	2300      	movs	r3, #0
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 800786e:	1ad3      	subs	r3, r2, r3
 8007870:	331c      	adds	r3, #28
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8007872:	0018      	movs	r0, r3
 8007874:	f7fa fc86 	bl	8002184 <__aeabi_ui2d>
 8007878:	0004      	movs	r4, r0
 800787a:	000d      	movs	r5, r1
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 800787c:	4b3c      	ldr	r3, [pc, #240]	; (8007970 <SX1276GetTimeOnAir+0x2fc>)
 800787e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8007880:	4b3b      	ldr	r3, [pc, #236]	; (8007970 <SX1276GetTimeOnAir+0x2fc>)
 8007882:	214c      	movs	r1, #76	; 0x4c
 8007884:	5c5b      	ldrb	r3, [r3, r1]
 8007886:	2b00      	cmp	r3, #0
 8007888:	dd01      	ble.n	800788e <SX1276GetTimeOnAir+0x21a>
 800788a:	2302      	movs	r3, #2
 800788c:	e000      	b.n	8007890 <SX1276GetTimeOnAir+0x21c>
 800788e:	2300      	movs	r3, #0
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 8007890:	1ad3      	subs	r3, r2, r3
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	0018      	movs	r0, r3
 8007896:	f7fa fc75 	bl	8002184 <__aeabi_ui2d>
 800789a:	0002      	movs	r2, r0
 800789c:	000b      	movs	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 800789e:	0020      	movs	r0, r4
 80078a0:	0029      	movs	r1, r5
 80078a2:	f7f9 fa0f 	bl	8000cc4 <__aeabi_ddiv>
 80078a6:	0003      	movs	r3, r0
 80078a8:	000c      	movs	r4, r1
 80078aa:	0018      	movs	r0, r3
 80078ac:	0021      	movs	r1, r4
 80078ae:	f005 fcff 	bl	800d2b0 <ceil>
 80078b2:	0004      	movs	r4, r0
 80078b4:	000d      	movs	r5, r1
                                 ( SX1276.Settings.LoRa.Coderate + 4 );
 80078b6:	4b2e      	ldr	r3, [pc, #184]	; (8007970 <SX1276GetTimeOnAir+0x2fc>)
 80078b8:	224d      	movs	r2, #77	; 0x4d
 80078ba:	5c9b      	ldrb	r3, [r3, r2]
 80078bc:	3304      	adds	r3, #4
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 80078be:	0018      	movs	r0, r3
 80078c0:	f7fa fc1e 	bl	8002100 <__aeabi_i2d>
 80078c4:	0002      	movs	r2, r0
 80078c6:	000b      	movs	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80078c8:	0020      	movs	r0, r4
 80078ca:	0029      	movs	r1, r5
 80078cc:	f7f9 fe2e 	bl	800152c <__aeabi_dmul>
 80078d0:	0003      	movs	r3, r0
 80078d2:	000c      	movs	r4, r1
 80078d4:	623b      	str	r3, [r7, #32]
 80078d6:	627c      	str	r4, [r7, #36]	; 0x24
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 80078d8:	2200      	movs	r2, #0
 80078da:	2300      	movs	r3, #0
 80078dc:	6a38      	ldr	r0, [r7, #32]
 80078de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80078e0:	f7f8 fdce 	bl	8000480 <__aeabi_dcmpgt>
 80078e4:	1e03      	subs	r3, r0, #0
 80078e6:	d008      	beq.n	80078fa <SX1276GetTimeOnAir+0x286>
 80078e8:	2200      	movs	r2, #0
 80078ea:	4b23      	ldr	r3, [pc, #140]	; (8007978 <SX1276GetTimeOnAir+0x304>)
 80078ec:	6a38      	ldr	r0, [r7, #32]
 80078ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80078f0:	f7f8 fed8 	bl	80006a4 <__aeabi_dadd>
 80078f4:	0003      	movs	r3, r0
 80078f6:	000c      	movs	r4, r1
 80078f8:	e001      	b.n	80078fe <SX1276GetTimeOnAir+0x28a>
 80078fa:	2300      	movs	r3, #0
 80078fc:	4c1e      	ldr	r4, [pc, #120]	; (8007978 <SX1276GetTimeOnAir+0x304>)
 80078fe:	61bb      	str	r3, [r7, #24]
 8007900:	61fc      	str	r4, [r7, #28]
            double tPayload = nPayload * ts;
 8007902:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007906:	69b8      	ldr	r0, [r7, #24]
 8007908:	69f9      	ldr	r1, [r7, #28]
 800790a:	f7f9 fe0f 	bl	800152c <__aeabi_dmul>
 800790e:	0003      	movs	r3, r0
 8007910:	000c      	movs	r4, r1
 8007912:	613b      	str	r3, [r7, #16]
 8007914:	617c      	str	r4, [r7, #20]
            // Time on air
            double tOnAir = tPreamble + tPayload;
 8007916:	693a      	ldr	r2, [r7, #16]
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800791c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800791e:	f7f8 fec1 	bl	80006a4 <__aeabi_dadd>
 8007922:	0003      	movs	r3, r0
 8007924:	000c      	movs	r4, r1
 8007926:	60bb      	str	r3, [r7, #8]
 8007928:	60fc      	str	r4, [r7, #12]
            // return ms secs
            airTime = (uint32_t) floor( tOnAir * 1000 + 0.999 );
 800792a:	2200      	movs	r2, #0
 800792c:	4b13      	ldr	r3, [pc, #76]	; (800797c <SX1276GetTimeOnAir+0x308>)
 800792e:	68b8      	ldr	r0, [r7, #8]
 8007930:	68f9      	ldr	r1, [r7, #12]
 8007932:	f7f9 fdfb 	bl	800152c <__aeabi_dmul>
 8007936:	0003      	movs	r3, r0
 8007938:	000c      	movs	r4, r1
 800793a:	0018      	movs	r0, r3
 800793c:	0021      	movs	r1, r4
 800793e:	4a14      	ldr	r2, [pc, #80]	; (8007990 <SX1276GetTimeOnAir+0x31c>)
 8007940:	4b14      	ldr	r3, [pc, #80]	; (8007994 <SX1276GetTimeOnAir+0x320>)
 8007942:	f7f8 feaf 	bl	80006a4 <__aeabi_dadd>
 8007946:	0003      	movs	r3, r0
 8007948:	000c      	movs	r4, r1
 800794a:	0018      	movs	r0, r3
 800794c:	0021      	movs	r1, r4
 800794e:	f005 fd31 	bl	800d3b4 <floor>
 8007952:	0003      	movs	r3, r0
 8007954:	000c      	movs	r4, r1
 8007956:	0018      	movs	r0, r3
 8007958:	0021      	movs	r1, r4
 800795a:	f7f8 fdc5 	bl	80004e8 <__aeabi_d2uiz>
 800795e:	0003      	movs	r3, r0
 8007960:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
        break;
 8007962:	46c0      	nop			; (mov r8, r8)
    }
    return airTime;
 8007964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8007966:	0018      	movs	r0, r3
 8007968:	46bd      	mov	sp, r7
 800796a:	b015      	add	sp, #84	; 0x54
 800796c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800796e:	46c0      	nop			; (mov r8, r8)
 8007970:	20000a34 	.word	0x20000a34
 8007974:	3ff00000 	.word	0x3ff00000
 8007978:	40200000 	.word	0x40200000
 800797c:	408f4000 	.word	0x408f4000
 8007980:	40fe8480 	.word	0x40fe8480
 8007984:	410e8480 	.word	0x410e8480
 8007988:	411e8480 	.word	0x411e8480
 800798c:	40110000 	.word	0x40110000
 8007990:	d916872b 	.word	0xd916872b
 8007994:	3feff7ce 	.word	0x3feff7ce

08007998 <SX1276Send>:

void SX1276Send( uint8_t *buffer, uint8_t size )
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	000a      	movs	r2, r1
 80079a2:	1cfb      	adds	r3, r7, #3
 80079a4:	701a      	strb	r2, [r3, #0]
    uint32_t txTimeout = 0;
 80079a6:	2300      	movs	r3, #0
 80079a8:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.Modem )
 80079aa:	4b59      	ldr	r3, [pc, #356]	; (8007b10 <SX1276Send+0x178>)
 80079ac:	795b      	ldrb	r3, [r3, #5]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d002      	beq.n	80079b8 <SX1276Send+0x20>
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d04c      	beq.n	8007a50 <SX1276Send+0xb8>
 80079b6:	e0a2      	b.n	8007afe <SX1276Send+0x166>
    {
    case MODEM_FSK:
        {
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80079b8:	4b55      	ldr	r3, [pc, #340]	; (8007b10 <SX1276Send+0x178>)
 80079ba:	2200      	movs	r2, #0
 80079bc:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = size;
 80079be:	1cfb      	adds	r3, r7, #3
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	b29a      	uxth	r2, r3
 80079c4:	4b52      	ldr	r3, [pc, #328]	; (8007b10 <SX1276Send+0x178>)
 80079c6:	875a      	strh	r2, [r3, #58]	; 0x3a

            if( SX1276.Settings.Fsk.FixLen == false )
 80079c8:	4b51      	ldr	r3, [pc, #324]	; (8007b10 <SX1276Send+0x178>)
 80079ca:	2222      	movs	r2, #34	; 0x22
 80079cc:	5c9b      	ldrb	r3, [r3, r2]
 80079ce:	2201      	movs	r2, #1
 80079d0:	4053      	eors	r3, r2
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d005      	beq.n	80079e4 <SX1276Send+0x4c>
            {
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 80079d8:	1cfb      	adds	r3, r7, #3
 80079da:	2101      	movs	r1, #1
 80079dc:	0018      	movs	r0, r3
 80079de:	f000 fd3b 	bl	8008458 <SX1276WriteFifo>
 80079e2:	e005      	b.n	80079f0 <SX1276Send+0x58>
            }
            else
            {
                SX1276Write( REG_PAYLOADLENGTH, size );
 80079e4:	1cfb      	adds	r3, r7, #3
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	0019      	movs	r1, r3
 80079ea:	2032      	movs	r0, #50	; 0x32
 80079ec:	f000 fc66 	bl	80082bc <SX1276Write>
            }

            if( ( size > 0 ) && ( size <= 64 ) )
 80079f0:	1cfb      	adds	r3, r7, #3
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d009      	beq.n	8007a0c <SX1276Send+0x74>
 80079f8:	1cfb      	adds	r3, r7, #3
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	2b40      	cmp	r3, #64	; 0x40
 80079fe:	d805      	bhi.n	8007a0c <SX1276Send+0x74>
            {
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 8007a00:	1cfb      	adds	r3, r7, #3
 8007a02:	7819      	ldrb	r1, [r3, #0]
 8007a04:	4b42      	ldr	r3, [pc, #264]	; (8007b10 <SX1276Send+0x178>)
 8007a06:	223f      	movs	r2, #63	; 0x3f
 8007a08:	5499      	strb	r1, [r3, r2]
 8007a0a:	e00b      	b.n	8007a24 <SX1276Send+0x8c>
            }
            else
            {
                memcpy1( RxTxBuffer, buffer, size );
 8007a0c:	1cfb      	adds	r3, r7, #3
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	b29a      	uxth	r2, r3
 8007a12:	6879      	ldr	r1, [r7, #4]
 8007a14:	4b3f      	ldr	r3, [pc, #252]	; (8007b14 <SX1276Send+0x17c>)
 8007a16:	0018      	movs	r0, r3
 8007a18:	f7fe fcd2 	bl	80063c0 <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 8007a1c:	4b3c      	ldr	r3, [pc, #240]	; (8007b10 <SX1276Send+0x178>)
 8007a1e:	223f      	movs	r2, #63	; 0x3f
 8007a20:	2120      	movs	r1, #32
 8007a22:	5499      	strb	r1, [r3, r2]
            }

            // Write payload buffer
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 8007a24:	4b3a      	ldr	r3, [pc, #232]	; (8007b10 <SX1276Send+0x178>)
 8007a26:	223f      	movs	r2, #63	; 0x3f
 8007a28:	5c9a      	ldrb	r2, [r3, r2]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	0011      	movs	r1, r2
 8007a2e:	0018      	movs	r0, r3
 8007a30:	f000 fd12 	bl	8008458 <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8007a34:	4b36      	ldr	r3, [pc, #216]	; (8007b10 <SX1276Send+0x178>)
 8007a36:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8007a38:	4b35      	ldr	r3, [pc, #212]	; (8007b10 <SX1276Send+0x178>)
 8007a3a:	213f      	movs	r1, #63	; 0x3f
 8007a3c:	5c5b      	ldrb	r3, [r3, r1]
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	18d3      	adds	r3, r2, r3
 8007a42:	b29a      	uxth	r2, r3
 8007a44:	4b32      	ldr	r3, [pc, #200]	; (8007b10 <SX1276Send+0x178>)
 8007a46:	879a      	strh	r2, [r3, #60]	; 0x3c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 8007a48:	4b31      	ldr	r3, [pc, #196]	; (8007b10 <SX1276Send+0x178>)
 8007a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a4c:	60fb      	str	r3, [r7, #12]
        }
        break;
 8007a4e:	e056      	b.n	8007afe <SX1276Send+0x166>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 8007a50:	4b2f      	ldr	r3, [pc, #188]	; (8007b10 <SX1276Send+0x178>)
 8007a52:	2255      	movs	r2, #85	; 0x55
 8007a54:	5c9b      	ldrb	r3, [r3, r2]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d011      	beq.n	8007a7e <SX1276Send+0xe6>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8007a5a:	2033      	movs	r0, #51	; 0x33
 8007a5c:	f000 fc42 	bl	80082e4 <SX1276Read>
 8007a60:	0003      	movs	r3, r0
 8007a62:	001a      	movs	r2, r3
 8007a64:	2341      	movs	r3, #65	; 0x41
 8007a66:	439a      	bics	r2, r3
 8007a68:	0013      	movs	r3, r2
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	0019      	movs	r1, r3
 8007a6e:	2033      	movs	r0, #51	; 0x33
 8007a70:	f000 fc24 	bl	80082bc <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8007a74:	2119      	movs	r1, #25
 8007a76:	203b      	movs	r0, #59	; 0x3b
 8007a78:	f000 fc20 	bl	80082bc <SX1276Write>
 8007a7c:	e013      	b.n	8007aa6 <SX1276Send+0x10e>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8007a7e:	2033      	movs	r0, #51	; 0x33
 8007a80:	f000 fc30 	bl	80082e4 <SX1276Read>
 8007a84:	0003      	movs	r3, r0
 8007a86:	b25b      	sxtb	r3, r3
 8007a88:	2241      	movs	r2, #65	; 0x41
 8007a8a:	4393      	bics	r3, r2
 8007a8c:	b25b      	sxtb	r3, r3
 8007a8e:	2201      	movs	r2, #1
 8007a90:	4313      	orrs	r3, r2
 8007a92:	b25b      	sxtb	r3, r3
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	0019      	movs	r1, r3
 8007a98:	2033      	movs	r0, #51	; 0x33
 8007a9a:	f000 fc0f 	bl	80082bc <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8007a9e:	211d      	movs	r1, #29
 8007aa0:	203b      	movs	r0, #59	; 0x3b
 8007aa2:	f000 fc0b 	bl	80082bc <SX1276Write>
            }

            SX1276.Settings.LoRaPacketHandler.Size = size;
 8007aa6:	1cfb      	adds	r3, r7, #3
 8007aa8:	7819      	ldrb	r1, [r3, #0]
 8007aaa:	4b19      	ldr	r3, [pc, #100]	; (8007b10 <SX1276Send+0x178>)
 8007aac:	2264      	movs	r2, #100	; 0x64
 8007aae:	5499      	strb	r1, [r3, r2]

            // Initializes the payload size
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 8007ab0:	1cfb      	adds	r3, r7, #3
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	0019      	movs	r1, r3
 8007ab6:	2022      	movs	r0, #34	; 0x22
 8007ab8:	f000 fc00 	bl	80082bc <SX1276Write>

            // Full buffer used for Tx
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 8007abc:	2100      	movs	r1, #0
 8007abe:	200e      	movs	r0, #14
 8007ac0:	f000 fbfc 	bl	80082bc <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8007ac4:	2100      	movs	r1, #0
 8007ac6:	200d      	movs	r0, #13
 8007ac8:	f000 fbf8 	bl	80082bc <SX1276Write>

            // FIFO operations can not take place in Sleep mode
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 8007acc:	2001      	movs	r0, #1
 8007ace:	f000 fc09 	bl	80082e4 <SX1276Read>
 8007ad2:	0003      	movs	r3, r0
 8007ad4:	001a      	movs	r2, r3
 8007ad6:	23f8      	movs	r3, #248	; 0xf8
 8007ad8:	439a      	bics	r2, r3
 8007ada:	1e13      	subs	r3, r2, #0
 8007adc:	d104      	bne.n	8007ae8 <SX1276Send+0x150>
            {
                SX1276SetStby( );
 8007ade:	f000 f835 	bl	8007b4c <SX1276SetStby>
                DelayMs( 1 );
 8007ae2:	2001      	movs	r0, #1
 8007ae4:	f7fa fc10 	bl	8002308 <HAL_Delay>
            }
            // Write payload buffer
            SX1276WriteFifo( buffer, size );
 8007ae8:	1cfb      	adds	r3, r7, #3
 8007aea:	781a      	ldrb	r2, [r3, #0]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	0011      	movs	r1, r2
 8007af0:	0018      	movs	r0, r3
 8007af2:	f000 fcb1 	bl	8008458 <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 8007af6:	4b06      	ldr	r3, [pc, #24]	; (8007b10 <SX1276Send+0x178>)
 8007af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007afa:	60fb      	str	r3, [r7, #12]
        }
        break;
 8007afc:	46c0      	nop			; (mov r8, r8)
    }

    SX1276SetTx( txTimeout );
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	0018      	movs	r0, r3
 8007b02:	f000 f9cd 	bl	8007ea0 <SX1276SetTx>
}
 8007b06:	46c0      	nop			; (mov r8, r8)
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	b004      	add	sp, #16
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	46c0      	nop			; (mov r8, r8)
 8007b10:	20000a34 	.word	0x20000a34
 8007b14:	20000788 	.word	0x20000788

08007b18 <SX1276SetSleep>:

void SX1276SetSleep( void )
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 8007b1c:	4b08      	ldr	r3, [pc, #32]	; (8007b40 <SX1276SetSleep+0x28>)
 8007b1e:	0018      	movs	r0, r3
 8007b20:	f7fe fafa 	bl	8006118 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8007b24:	4b07      	ldr	r3, [pc, #28]	; (8007b44 <SX1276SetSleep+0x2c>)
 8007b26:	0018      	movs	r0, r3
 8007b28:	f7fe faf6 	bl	8006118 <TimerStop>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8007b2c:	2000      	movs	r0, #0
 8007b2e:	f000 fb1d 	bl	800816c <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 8007b32:	4b05      	ldr	r3, [pc, #20]	; (8007b48 <SX1276SetSleep+0x30>)
 8007b34:	2200      	movs	r2, #0
 8007b36:	711a      	strb	r2, [r3, #4]
}
 8007b38:	46c0      	nop			; (mov r8, r8)
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	46c0      	nop			; (mov r8, r8)
 8007b40:	20000a9c 	.word	0x20000a9c
 8007b44:	20000a04 	.word	0x20000a04
 8007b48:	20000a34 	.word	0x20000a34

08007b4c <SX1276SetStby>:

void SX1276SetStby( void )
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 8007b50:	4b08      	ldr	r3, [pc, #32]	; (8007b74 <SX1276SetStby+0x28>)
 8007b52:	0018      	movs	r0, r3
 8007b54:	f7fe fae0 	bl	8006118 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8007b58:	4b07      	ldr	r3, [pc, #28]	; (8007b78 <SX1276SetStby+0x2c>)
 8007b5a:	0018      	movs	r0, r3
 8007b5c:	f7fe fadc 	bl	8006118 <TimerStop>

    SX1276SetOpMode( RF_OPMODE_STANDBY );
 8007b60:	2001      	movs	r0, #1
 8007b62:	f000 fb03 	bl	800816c <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 8007b66:	4b05      	ldr	r3, [pc, #20]	; (8007b7c <SX1276SetStby+0x30>)
 8007b68:	2200      	movs	r2, #0
 8007b6a:	711a      	strb	r2, [r3, #4]
}
 8007b6c:	46c0      	nop			; (mov r8, r8)
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
 8007b72:	46c0      	nop			; (mov r8, r8)
 8007b74:	20000a9c 	.word	0x20000a9c
 8007b78:	20000a04 	.word	0x20000a04
 8007b7c:	20000a34 	.word	0x20000a34

08007b80 <SX1276SetRx>:

void SX1276SetRx( uint32_t timeout )
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
    bool rxContinuous = false;
 8007b88:	230f      	movs	r3, #15
 8007b8a:	18fb      	adds	r3, r7, r3
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	701a      	strb	r2, [r3, #0]

    switch( SX1276.Settings.Modem )
 8007b90:	4bb8      	ldr	r3, [pc, #736]	; (8007e74 <SX1276SetRx+0x2f4>)
 8007b92:	795b      	ldrb	r3, [r3, #5]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d002      	beq.n	8007b9e <SX1276SetRx+0x1e>
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d041      	beq.n	8007c20 <SX1276SetRx+0xa0>
 8007b9c:	e128      	b.n	8007df0 <SX1276SetRx+0x270>
    {
    case MODEM_FSK:
        {
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 8007b9e:	230f      	movs	r3, #15
 8007ba0:	18fb      	adds	r3, r7, r3
 8007ba2:	4ab4      	ldr	r2, [pc, #720]	; (8007e74 <SX1276SetRx+0x2f4>)
 8007ba4:	2126      	movs	r1, #38	; 0x26
 8007ba6:	5c52      	ldrb	r2, [r2, r1]
 8007ba8:	701a      	strb	r2, [r3, #0]
            // DIO1=FifoLevel
            // DIO2=SyncAddr
            // DIO3=FifoEmpty
            // DIO4=Preamble
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8007baa:	2040      	movs	r0, #64	; 0x40
 8007bac:	f000 fb9a 	bl	80082e4 <SX1276Read>
 8007bb0:	0003      	movs	r3, r0
 8007bb2:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
                                                                            RF_DIOMAPPING1_DIO0_00 |
 8007bb4:	2203      	movs	r2, #3
 8007bb6:	4013      	ands	r3, r2
 8007bb8:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_00 |
 8007bba:	220c      	movs	r2, #12
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	0019      	movs	r1, r3
 8007bc4:	2040      	movs	r0, #64	; 0x40
 8007bc6:	f000 fb79 	bl	80082bc <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO2_11 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8007bca:	2041      	movs	r0, #65	; 0x41
 8007bcc:	f000 fb8a 	bl	80082e4 <SX1276Read>
 8007bd0:	0003      	movs	r3, r0
 8007bd2:	001a      	movs	r2, r3
 8007bd4:	233f      	movs	r3, #63	; 0x3f
 8007bd6:	425b      	negs	r3, r3
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	0019      	movs	r1, r3
 8007bde:	2041      	movs	r0, #65	; 0x41
 8007be0:	f000 fb6c 	bl	80082bc <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) |
                                                                            RF_DIOMAPPING2_DIO4_11 |
                                                                            RF_DIOMAPPING2_MAP_PREAMBLEDETECT );

            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8007be4:	2035      	movs	r0, #53	; 0x35
 8007be6:	f000 fb7d 	bl	80082e4 <SX1276Read>
 8007bea:	0003      	movs	r3, r0
 8007bec:	001a      	movs	r2, r3
 8007bee:	233f      	movs	r3, #63	; 0x3f
 8007bf0:	4013      	ands	r3, r2
 8007bf2:	b2d9      	uxtb	r1, r3
 8007bf4:	4b9f      	ldr	r3, [pc, #636]	; (8007e74 <SX1276SetRx+0x2f4>)
 8007bf6:	223e      	movs	r2, #62	; 0x3e
 8007bf8:	5499      	strb	r1, [r3, r2]

            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 8007bfa:	211e      	movs	r1, #30
 8007bfc:	200d      	movs	r0, #13
 8007bfe:	f000 fb5d 	bl	80082bc <SX1276Write>

            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8007c02:	4b9c      	ldr	r3, [pc, #624]	; (8007e74 <SX1276SetRx+0x2f4>)
 8007c04:	2230      	movs	r2, #48	; 0x30
 8007c06:	2100      	movs	r1, #0
 8007c08:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8007c0a:	4b9a      	ldr	r3, [pc, #616]	; (8007e74 <SX1276SetRx+0x2f4>)
 8007c0c:	2231      	movs	r2, #49	; 0x31
 8007c0e:	2100      	movs	r1, #0
 8007c10:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8007c12:	4b98      	ldr	r3, [pc, #608]	; (8007e74 <SX1276SetRx+0x2f4>)
 8007c14:	2200      	movs	r2, #0
 8007c16:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 8007c18:	4b96      	ldr	r3, [pc, #600]	; (8007e74 <SX1276SetRx+0x2f4>)
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	875a      	strh	r2, [r3, #58]	; 0x3a
        }
        break;
 8007c1e:	e0e7      	b.n	8007df0 <SX1276SetRx+0x270>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 8007c20:	4b94      	ldr	r3, [pc, #592]	; (8007e74 <SX1276SetRx+0x2f4>)
 8007c22:	2255      	movs	r2, #85	; 0x55
 8007c24:	5c9b      	ldrb	r3, [r3, r2]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d010      	beq.n	8007c4c <SX1276SetRx+0xcc>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8007c2a:	2033      	movs	r0, #51	; 0x33
 8007c2c:	f000 fb5a 	bl	80082e4 <SX1276Read>
 8007c30:	0003      	movs	r3, r0
 8007c32:	001a      	movs	r2, r3
 8007c34:	2341      	movs	r3, #65	; 0x41
 8007c36:	4313      	orrs	r3, r2
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	0019      	movs	r1, r3
 8007c3c:	2033      	movs	r0, #51	; 0x33
 8007c3e:	f000 fb3d 	bl	80082bc <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8007c42:	2119      	movs	r1, #25
 8007c44:	203b      	movs	r0, #59	; 0x3b
 8007c46:	f000 fb39 	bl	80082bc <SX1276Write>
 8007c4a:	e013      	b.n	8007c74 <SX1276SetRx+0xf4>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8007c4c:	2033      	movs	r0, #51	; 0x33
 8007c4e:	f000 fb49 	bl	80082e4 <SX1276Read>
 8007c52:	0003      	movs	r3, r0
 8007c54:	b25b      	sxtb	r3, r3
 8007c56:	2241      	movs	r2, #65	; 0x41
 8007c58:	4393      	bics	r3, r2
 8007c5a:	b25b      	sxtb	r3, r3
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	b25b      	sxtb	r3, r3
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	0019      	movs	r1, r3
 8007c66:	2033      	movs	r0, #51	; 0x33
 8007c68:	f000 fb28 	bl	80082bc <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8007c6c:	211d      	movs	r1, #29
 8007c6e:	203b      	movs	r0, #59	; 0x3b
 8007c70:	f000 fb24 	bl	80082bc <SX1276Write>
            }

            // ERRATA 2.3 - Receiver Spurious Reception of a LoRa Signal
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8007c74:	4b7f      	ldr	r3, [pc, #508]	; (8007e74 <SX1276SetRx+0x2f4>)
 8007c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c78:	2b08      	cmp	r3, #8
 8007c7a:	d900      	bls.n	8007c7e <SX1276SetRx+0xfe>
 8007c7c:	e076      	b.n	8007d6c <SX1276SetRx+0x1ec>
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8007c7e:	2031      	movs	r0, #49	; 0x31
 8007c80:	f000 fb30 	bl	80082e4 <SX1276Read>
 8007c84:	0003      	movs	r3, r0
 8007c86:	001a      	movs	r2, r3
 8007c88:	237f      	movs	r3, #127	; 0x7f
 8007c8a:	4013      	ands	r3, r2
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	0019      	movs	r1, r3
 8007c90:	2031      	movs	r0, #49	; 0x31
 8007c92:	f000 fb13 	bl	80082bc <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 8007c96:	2100      	movs	r1, #0
 8007c98:	2030      	movs	r0, #48	; 0x30
 8007c9a:	f000 fb0f 	bl	80082bc <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 8007c9e:	4b75      	ldr	r3, [pc, #468]	; (8007e74 <SX1276SetRx+0x2f4>)
 8007ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ca2:	2b08      	cmp	r3, #8
 8007ca4:	d86f      	bhi.n	8007d86 <SX1276SetRx+0x206>
 8007ca6:	009a      	lsls	r2, r3, #2
 8007ca8:	4b73      	ldr	r3, [pc, #460]	; (8007e78 <SX1276SetRx+0x2f8>)
 8007caa:	18d3      	adds	r3, r2, r3
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	469f      	mov	pc, r3
                {
                case 0: // 7.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 8007cb0:	2148      	movs	r1, #72	; 0x48
 8007cb2:	202f      	movs	r0, #47	; 0x2f
 8007cb4:	f000 fb02 	bl	80082bc <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 8007cb8:	4b6e      	ldr	r3, [pc, #440]	; (8007e74 <SX1276SetRx+0x2f4>)
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	4a6f      	ldr	r2, [pc, #444]	; (8007e7c <SX1276SetRx+0x2fc>)
 8007cbe:	4694      	mov	ip, r2
 8007cc0:	4463      	add	r3, ip
 8007cc2:	0018      	movs	r0, r3
 8007cc4:	f7fe ff2e 	bl	8006b24 <SX1276SetChannel>
                    break;
 8007cc8:	e05d      	b.n	8007d86 <SX1276SetRx+0x206>
                case 1: // 10.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8007cca:	2144      	movs	r1, #68	; 0x44
 8007ccc:	202f      	movs	r0, #47	; 0x2f
 8007cce:	f000 faf5 	bl	80082bc <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 8007cd2:	4b68      	ldr	r3, [pc, #416]	; (8007e74 <SX1276SetRx+0x2f4>)
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	4a6a      	ldr	r2, [pc, #424]	; (8007e80 <SX1276SetRx+0x300>)
 8007cd8:	4694      	mov	ip, r2
 8007cda:	4463      	add	r3, ip
 8007cdc:	0018      	movs	r0, r3
 8007cde:	f7fe ff21 	bl	8006b24 <SX1276SetChannel>
                    break;
 8007ce2:	e050      	b.n	8007d86 <SX1276SetRx+0x206>
                case 2: // 15.6 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8007ce4:	2144      	movs	r1, #68	; 0x44
 8007ce6:	202f      	movs	r0, #47	; 0x2f
 8007ce8:	f000 fae8 	bl	80082bc <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 8007cec:	4b61      	ldr	r3, [pc, #388]	; (8007e74 <SX1276SetRx+0x2f4>)
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	4a64      	ldr	r2, [pc, #400]	; (8007e84 <SX1276SetRx+0x304>)
 8007cf2:	4694      	mov	ip, r2
 8007cf4:	4463      	add	r3, ip
 8007cf6:	0018      	movs	r0, r3
 8007cf8:	f7fe ff14 	bl	8006b24 <SX1276SetChannel>
                    break;
 8007cfc:	e043      	b.n	8007d86 <SX1276SetRx+0x206>
                case 3: // 20.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8007cfe:	2144      	movs	r1, #68	; 0x44
 8007d00:	202f      	movs	r0, #47	; 0x2f
 8007d02:	f000 fadb 	bl	80082bc <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 8007d06:	4b5b      	ldr	r3, [pc, #364]	; (8007e74 <SX1276SetRx+0x2f4>)
 8007d08:	689b      	ldr	r3, [r3, #8]
 8007d0a:	4a5f      	ldr	r2, [pc, #380]	; (8007e88 <SX1276SetRx+0x308>)
 8007d0c:	4694      	mov	ip, r2
 8007d0e:	4463      	add	r3, ip
 8007d10:	0018      	movs	r0, r3
 8007d12:	f7fe ff07 	bl	8006b24 <SX1276SetChannel>
                    break;
 8007d16:	e036      	b.n	8007d86 <SX1276SetRx+0x206>
                case 4: // 31.2 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8007d18:	2144      	movs	r1, #68	; 0x44
 8007d1a:	202f      	movs	r0, #47	; 0x2f
 8007d1c:	f000 face 	bl	80082bc <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 8007d20:	4b54      	ldr	r3, [pc, #336]	; (8007e74 <SX1276SetRx+0x2f4>)
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	4a59      	ldr	r2, [pc, #356]	; (8007e8c <SX1276SetRx+0x30c>)
 8007d26:	4694      	mov	ip, r2
 8007d28:	4463      	add	r3, ip
 8007d2a:	0018      	movs	r0, r3
 8007d2c:	f7fe fefa 	bl	8006b24 <SX1276SetChannel>
                    break;
 8007d30:	e029      	b.n	8007d86 <SX1276SetRx+0x206>
                case 5: // 41.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8007d32:	2144      	movs	r1, #68	; 0x44
 8007d34:	202f      	movs	r0, #47	; 0x2f
 8007d36:	f000 fac1 	bl	80082bc <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 8007d3a:	4b4e      	ldr	r3, [pc, #312]	; (8007e74 <SX1276SetRx+0x2f4>)
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	4a54      	ldr	r2, [pc, #336]	; (8007e90 <SX1276SetRx+0x310>)
 8007d40:	4694      	mov	ip, r2
 8007d42:	4463      	add	r3, ip
 8007d44:	0018      	movs	r0, r3
 8007d46:	f7fe feed 	bl	8006b24 <SX1276SetChannel>
                    break;
 8007d4a:	e01c      	b.n	8007d86 <SX1276SetRx+0x206>
                case 6: // 62.5 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8007d4c:	2140      	movs	r1, #64	; 0x40
 8007d4e:	202f      	movs	r0, #47	; 0x2f
 8007d50:	f000 fab4 	bl	80082bc <SX1276Write>
                    break;
 8007d54:	e017      	b.n	8007d86 <SX1276SetRx+0x206>
                case 7: // 125 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8007d56:	2140      	movs	r1, #64	; 0x40
 8007d58:	202f      	movs	r0, #47	; 0x2f
 8007d5a:	f000 faaf 	bl	80082bc <SX1276Write>
                    break;
 8007d5e:	e012      	b.n	8007d86 <SX1276SetRx+0x206>
                case 8: // 250 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8007d60:	2140      	movs	r1, #64	; 0x40
 8007d62:	202f      	movs	r0, #47	; 0x2f
 8007d64:	f000 faaa 	bl	80082bc <SX1276Write>
                    break;
 8007d68:	46c0      	nop			; (mov r8, r8)
 8007d6a:	e00c      	b.n	8007d86 <SX1276SetRx+0x206>
                }
            }
            else
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 8007d6c:	2031      	movs	r0, #49	; 0x31
 8007d6e:	f000 fab9 	bl	80082e4 <SX1276Read>
 8007d72:	0003      	movs	r3, r0
 8007d74:	001a      	movs	r2, r3
 8007d76:	2380      	movs	r3, #128	; 0x80
 8007d78:	425b      	negs	r3, r3
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	0019      	movs	r1, r3
 8007d80:	2031      	movs	r0, #49	; 0x31
 8007d82:	f000 fa9b 	bl	80082bc <SX1276Write>
            }

            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 8007d86:	230f      	movs	r3, #15
 8007d88:	18fb      	adds	r3, r7, r3
 8007d8a:	4a3a      	ldr	r2, [pc, #232]	; (8007e74 <SX1276SetRx+0x2f4>)
 8007d8c:	2156      	movs	r1, #86	; 0x56
 8007d8e:	5c52      	ldrb	r2, [r2, r1]
 8007d90:	701a      	strb	r2, [r3, #0]

            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8007d92:	4b38      	ldr	r3, [pc, #224]	; (8007e74 <SX1276SetRx+0x2f4>)
 8007d94:	2253      	movs	r2, #83	; 0x53
 8007d96:	5c9b      	ldrb	r3, [r3, r2]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d010      	beq.n	8007dbe <SX1276SetRx+0x23e>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8007d9c:	211d      	movs	r1, #29
 8007d9e:	2011      	movs	r0, #17
 8007da0:	f000 fa8c 	bl	80082bc <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8007da4:	2040      	movs	r0, #64	; 0x40
 8007da6:	f000 fa9d 	bl	80082e4 <SX1276Read>
 8007daa:	0003      	movs	r3, r0
 8007dac:	001a      	movs	r2, r3
 8007dae:	2333      	movs	r3, #51	; 0x33
 8007db0:	4013      	ands	r3, r2
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	0019      	movs	r1, r3
 8007db6:	2040      	movs	r0, #64	; 0x40
 8007db8:	f000 fa80 	bl	80082bc <SX1276Write>
 8007dbc:	e00f      	b.n	8007dde <SX1276SetRx+0x25e>
            }
            else
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8007dbe:	211f      	movs	r1, #31
 8007dc0:	2011      	movs	r0, #17
 8007dc2:	f000 fa7b 	bl	80082bc <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8007dc6:	2040      	movs	r0, #64	; 0x40
 8007dc8:	f000 fa8c 	bl	80082e4 <SX1276Read>
 8007dcc:	0003      	movs	r3, r0
 8007dce:	001a      	movs	r2, r3
 8007dd0:	233f      	movs	r3, #63	; 0x3f
 8007dd2:	4013      	ands	r3, r2
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	0019      	movs	r1, r3
 8007dd8:	2040      	movs	r0, #64	; 0x40
 8007dda:	f000 fa6f 	bl	80082bc <SX1276Write>
            }
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 8007dde:	2100      	movs	r1, #0
 8007de0:	200f      	movs	r0, #15
 8007de2:	f000 fa6b 	bl	80082bc <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8007de6:	2100      	movs	r1, #0
 8007de8:	200d      	movs	r0, #13
 8007dea:	f000 fa67 	bl	80082bc <SX1276Write>
        }
        break;
 8007dee:	46c0      	nop			; (mov r8, r8)
    }

    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 8007df0:	2380      	movs	r3, #128	; 0x80
 8007df2:	005a      	lsls	r2, r3, #1
 8007df4:	4b27      	ldr	r3, [pc, #156]	; (8007e94 <SX1276SetRx+0x314>)
 8007df6:	2100      	movs	r1, #0
 8007df8:	0018      	movs	r0, r3
 8007dfa:	f002 fca2 	bl	800a742 <memset>

    SX1276.Settings.State = RF_RX_RUNNING;
 8007dfe:	4b1d      	ldr	r3, [pc, #116]	; (8007e74 <SX1276SetRx+0x2f4>)
 8007e00:	2201      	movs	r2, #1
 8007e02:	711a      	strb	r2, [r3, #4]
    if( timeout != 0 )
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d009      	beq.n	8007e1e <SX1276SetRx+0x29e>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	4b22      	ldr	r3, [pc, #136]	; (8007e98 <SX1276SetRx+0x318>)
 8007e0e:	0011      	movs	r1, r2
 8007e10:	0018      	movs	r0, r3
 8007e12:	f7fe f9fb 	bl	800620c <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 8007e16:	4b20      	ldr	r3, [pc, #128]	; (8007e98 <SX1276SetRx+0x318>)
 8007e18:	0018      	movs	r0, r3
 8007e1a:	f7fe f929 	bl	8006070 <TimerStart>
    }

    if( SX1276.Settings.Modem == MODEM_FSK )
 8007e1e:	4b15      	ldr	r3, [pc, #84]	; (8007e74 <SX1276SetRx+0x2f4>)
 8007e20:	795b      	ldrb	r3, [r3, #5]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d116      	bne.n	8007e54 <SX1276SetRx+0x2d4>
    {
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8007e26:	2005      	movs	r0, #5
 8007e28:	f000 f9a0 	bl	800816c <SX1276SetOpMode>

        if( rxContinuous == false )
 8007e2c:	230f      	movs	r3, #15
 8007e2e:	18fb      	adds	r3, r7, r3
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	2201      	movs	r2, #1
 8007e34:	4053      	eors	r3, r2
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d017      	beq.n	8007e6c <SX1276SetRx+0x2ec>
        {
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 8007e3c:	4b0d      	ldr	r3, [pc, #52]	; (8007e74 <SX1276SetRx+0x2f4>)
 8007e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e40:	4b16      	ldr	r3, [pc, #88]	; (8007e9c <SX1276SetRx+0x31c>)
 8007e42:	0011      	movs	r1, r2
 8007e44:	0018      	movs	r0, r3
 8007e46:	f7fe f9e1 	bl	800620c <TimerSetValue>
            TimerStart( &RxTimeoutSyncWord );
 8007e4a:	4b14      	ldr	r3, [pc, #80]	; (8007e9c <SX1276SetRx+0x31c>)
 8007e4c:	0018      	movs	r0, r3
 8007e4e:	f7fe f90f 	bl	8006070 <TimerStart>
        else
        {
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
        }
    }
}
 8007e52:	e00b      	b.n	8007e6c <SX1276SetRx+0x2ec>
        if( rxContinuous == true )
 8007e54:	230f      	movs	r3, #15
 8007e56:	18fb      	adds	r3, r7, r3
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d003      	beq.n	8007e66 <SX1276SetRx+0x2e6>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 8007e5e:	2005      	movs	r0, #5
 8007e60:	f000 f984 	bl	800816c <SX1276SetOpMode>
}
 8007e64:	e002      	b.n	8007e6c <SX1276SetRx+0x2ec>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 8007e66:	2006      	movs	r0, #6
 8007e68:	f000 f980 	bl	800816c <SX1276SetOpMode>
}
 8007e6c:	46c0      	nop			; (mov r8, r8)
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	b004      	add	sp, #16
 8007e72:	bd80      	pop	{r7, pc}
 8007e74:	20000a34 	.word	0x20000a34
 8007e78:	0800d86c 	.word	0x0800d86c
 8007e7c:	00001e82 	.word	0x00001e82
 8007e80:	000028b4 	.word	0x000028b4
 8007e84:	00003d04 	.word	0x00003d04
 8007e88:	0000515e 	.word	0x0000515e
 8007e8c:	00007a12 	.word	0x00007a12
 8007e90:	0000a2c6 	.word	0x0000a2c6
 8007e94:	20000788 	.word	0x20000788
 8007e98:	20000a9c 	.word	0x20000a9c
 8007e9c:	20000a1c 	.word	0x20000a1c

08007ea0 <SX1276SetTx>:

void SX1276SetTx( uint32_t timeout )
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
    TimerSetValue( &TxTimeoutTimer, timeout );
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	4b38      	ldr	r3, [pc, #224]	; (8007f8c <SX1276SetTx+0xec>)
 8007eac:	0011      	movs	r1, r2
 8007eae:	0018      	movs	r0, r3
 8007eb0:	f7fe f9ac 	bl	800620c <TimerSetValue>

    switch( SX1276.Settings.Modem )
 8007eb4:	4b36      	ldr	r3, [pc, #216]	; (8007f90 <SX1276SetTx+0xf0>)
 8007eb6:	795b      	ldrb	r3, [r3, #5]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d002      	beq.n	8007ec2 <SX1276SetTx+0x22>
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d028      	beq.n	8007f12 <SX1276SetTx+0x72>
 8007ec0:	e056      	b.n	8007f70 <SX1276SetTx+0xd0>
            // DIO1=FifoEmpty
            // DIO2=FifoFull
            // DIO3=FifoEmpty
            // DIO4=LowBat
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8007ec2:	2040      	movs	r0, #64	; 0x40
 8007ec4:	f000 fa0e 	bl	80082e4 <SX1276Read>
 8007ec8:	0003      	movs	r3, r0
 8007eca:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
 8007ecc:	2203      	movs	r2, #3
 8007ece:	4013      	ands	r3, r2
 8007ed0:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
 8007ed2:	2210      	movs	r2, #16
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	0019      	movs	r1, r3
 8007edc:	2040      	movs	r0, #64	; 0x40
 8007ede:	f000 f9ed 	bl	80082bc <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO1_01 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8007ee2:	2041      	movs	r0, #65	; 0x41
 8007ee4:	f000 f9fe 	bl	80082e4 <SX1276Read>
 8007ee8:	0003      	movs	r3, r0
 8007eea:	001a      	movs	r2, r3
 8007eec:	233e      	movs	r3, #62	; 0x3e
 8007eee:	4013      	ands	r3, r2
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	0019      	movs	r1, r3
 8007ef4:	2041      	movs	r0, #65	; 0x41
 8007ef6:	f000 f9e1 	bl	80082bc <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) );
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8007efa:	2035      	movs	r0, #53	; 0x35
 8007efc:	f000 f9f2 	bl	80082e4 <SX1276Read>
 8007f00:	0003      	movs	r3, r0
 8007f02:	001a      	movs	r2, r3
 8007f04:	233f      	movs	r3, #63	; 0x3f
 8007f06:	4013      	ands	r3, r2
 8007f08:	b2d9      	uxtb	r1, r3
 8007f0a:	4b21      	ldr	r3, [pc, #132]	; (8007f90 <SX1276SetTx+0xf0>)
 8007f0c:	223e      	movs	r2, #62	; 0x3e
 8007f0e:	5499      	strb	r1, [r3, r2]
        }
        break;
 8007f10:	e02e      	b.n	8007f70 <SX1276SetTx+0xd0>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8007f12:	4b1f      	ldr	r3, [pc, #124]	; (8007f90 <SX1276SetTx+0xf0>)
 8007f14:	2253      	movs	r2, #83	; 0x53
 8007f16:	5c9b      	ldrb	r3, [r3, r2]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d014      	beq.n	8007f46 <SX1276SetTx+0xa6>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8007f1c:	21f5      	movs	r1, #245	; 0xf5
 8007f1e:	2011      	movs	r0, #17
 8007f20:	f000 f9cc 	bl	80082bc <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=TxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 8007f24:	2040      	movs	r0, #64	; 0x40
 8007f26:	f000 f9dd 	bl	80082e4 <SX1276Read>
 8007f2a:	0003      	movs	r3, r0
 8007f2c:	b25b      	sxtb	r3, r3
 8007f2e:	2233      	movs	r2, #51	; 0x33
 8007f30:	4013      	ands	r3, r2
 8007f32:	b25b      	sxtb	r3, r3
 8007f34:	2240      	movs	r2, #64	; 0x40
 8007f36:	4313      	orrs	r3, r2
 8007f38:	b25b      	sxtb	r3, r3
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	0019      	movs	r1, r3
 8007f3e:	2040      	movs	r0, #64	; 0x40
 8007f40:	f000 f9bc 	bl	80082bc <SX1276Write>

                // DIO0=TxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
            }
        }
        break;
 8007f44:	e013      	b.n	8007f6e <SX1276SetTx+0xce>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8007f46:	21f7      	movs	r1, #247	; 0xf7
 8007f48:	2011      	movs	r0, #17
 8007f4a:	f000 f9b7 	bl	80082bc <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8007f4e:	2040      	movs	r0, #64	; 0x40
 8007f50:	f000 f9c8 	bl	80082e4 <SX1276Read>
 8007f54:	0003      	movs	r3, r0
 8007f56:	b25b      	sxtb	r3, r3
 8007f58:	223f      	movs	r2, #63	; 0x3f
 8007f5a:	4013      	ands	r3, r2
 8007f5c:	b25b      	sxtb	r3, r3
 8007f5e:	2240      	movs	r2, #64	; 0x40
 8007f60:	4313      	orrs	r3, r2
 8007f62:	b25b      	sxtb	r3, r3
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	0019      	movs	r1, r3
 8007f68:	2040      	movs	r0, #64	; 0x40
 8007f6a:	f000 f9a7 	bl	80082bc <SX1276Write>
        break;
 8007f6e:	46c0      	nop			; (mov r8, r8)
    }

    SX1276.Settings.State = RF_TX_RUNNING;
 8007f70:	4b07      	ldr	r3, [pc, #28]	; (8007f90 <SX1276SetTx+0xf0>)
 8007f72:	2202      	movs	r2, #2
 8007f74:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 8007f76:	4b05      	ldr	r3, [pc, #20]	; (8007f8c <SX1276SetTx+0xec>)
 8007f78:	0018      	movs	r0, r3
 8007f7a:	f7fe f879 	bl	8006070 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8007f7e:	2003      	movs	r0, #3
 8007f80:	f000 f8f4 	bl	800816c <SX1276SetOpMode>
}
 8007f84:	46c0      	nop			; (mov r8, r8)
 8007f86:	46bd      	mov	sp, r7
 8007f88:	b002      	add	sp, #8
 8007f8a:	bd80      	pop	{r7, pc}
 8007f8c:	20000a04 	.word	0x20000a04
 8007f90:	20000a34 	.word	0x20000a34

08007f94 <SX1276StartCad>:

void SX1276StartCad( void )
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 8007f98:	4b11      	ldr	r3, [pc, #68]	; (8007fe0 <SX1276StartCad+0x4c>)
 8007f9a:	795b      	ldrb	r3, [r3, #5]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d01a      	beq.n	8007fd6 <SX1276StartCad+0x42>
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d000      	beq.n	8007fa6 <SX1276StartCad+0x12>
            SX1276.Settings.State = RF_CAD;
            SX1276SetOpMode( RFLR_OPMODE_CAD );
        }
        break;
    default:
        break;
 8007fa4:	e018      	b.n	8007fd8 <SX1276StartCad+0x44>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8007fa6:	21fa      	movs	r1, #250	; 0xfa
 8007fa8:	2011      	movs	r0, #17
 8007faa:	f000 f987 	bl	80082bc <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 8007fae:	2040      	movs	r0, #64	; 0x40
 8007fb0:	f000 f998 	bl	80082e4 <SX1276Read>
 8007fb4:	0003      	movs	r3, r0
 8007fb6:	001a      	movs	r2, r3
 8007fb8:	2303      	movs	r3, #3
 8007fba:	439a      	bics	r2, r3
 8007fbc:	0013      	movs	r3, r2
 8007fbe:	b2db      	uxtb	r3, r3
 8007fc0:	0019      	movs	r1, r3
 8007fc2:	2040      	movs	r0, #64	; 0x40
 8007fc4:	f000 f97a 	bl	80082bc <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 8007fc8:	4b05      	ldr	r3, [pc, #20]	; (8007fe0 <SX1276StartCad+0x4c>)
 8007fca:	2203      	movs	r2, #3
 8007fcc:	711a      	strb	r2, [r3, #4]
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 8007fce:	2007      	movs	r0, #7
 8007fd0:	f000 f8cc 	bl	800816c <SX1276SetOpMode>
        break;
 8007fd4:	e000      	b.n	8007fd8 <SX1276StartCad+0x44>
        break;
 8007fd6:	46c0      	nop			; (mov r8, r8)
    }
}
 8007fd8:	46c0      	nop			; (mov r8, r8)
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	46c0      	nop			; (mov r8, r8)
 8007fe0:	20000a34 	.word	0x20000a34

08007fe4 <SX1276SetTxContinuousWave>:

void SX1276SetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b08e      	sub	sp, #56	; 0x38
 8007fe8:	af0a      	add	r7, sp, #40	; 0x28
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	0008      	movs	r0, r1
 8007fee:	0011      	movs	r1, r2
 8007ff0:	1cfb      	adds	r3, r7, #3
 8007ff2:	1c02      	adds	r2, r0, #0
 8007ff4:	701a      	strb	r2, [r3, #0]
 8007ff6:	003b      	movs	r3, r7
 8007ff8:	1c0a      	adds	r2, r1, #0
 8007ffa:	801a      	strh	r2, [r3, #0]
    uint32_t timeout = ( uint32_t )( time * 1000 );
 8007ffc:	003b      	movs	r3, r7
 8007ffe:	881b      	ldrh	r3, [r3, #0]
 8008000:	22fa      	movs	r2, #250	; 0xfa
 8008002:	0092      	lsls	r2, r2, #2
 8008004:	4353      	muls	r3, r2
 8008006:	60fb      	str	r3, [r7, #12]

    SX1276SetChannel( freq );
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	0018      	movs	r0, r3
 800800c:	f7fe fd8a 	bl	8006b24 <SX1276SetChannel>

    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 8008010:	1cfb      	adds	r3, r7, #3
 8008012:	2100      	movs	r1, #0
 8008014:	5659      	ldrsb	r1, [r3, r1]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	9308      	str	r3, [sp, #32]
 800801a:	2300      	movs	r3, #0
 800801c:	9307      	str	r3, [sp, #28]
 800801e:	2300      	movs	r3, #0
 8008020:	9306      	str	r3, [sp, #24]
 8008022:	2300      	movs	r3, #0
 8008024:	9305      	str	r3, [sp, #20]
 8008026:	2300      	movs	r3, #0
 8008028:	9304      	str	r3, [sp, #16]
 800802a:	2300      	movs	r3, #0
 800802c:	9303      	str	r3, [sp, #12]
 800802e:	2305      	movs	r3, #5
 8008030:	9302      	str	r3, [sp, #8]
 8008032:	2300      	movs	r3, #0
 8008034:	9301      	str	r3, [sp, #4]
 8008036:	2396      	movs	r3, #150	; 0x96
 8008038:	015b      	lsls	r3, r3, #5
 800803a:	9300      	str	r3, [sp, #0]
 800803c:	2300      	movs	r3, #0
 800803e:	2200      	movs	r2, #0
 8008040:	2000      	movs	r0, #0
 8008042:	f7ff f943 	bl	80072cc <SX1276SetTxConfig>

    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 8008046:	2031      	movs	r0, #49	; 0x31
 8008048:	f000 f94c 	bl	80082e4 <SX1276Read>
 800804c:	0003      	movs	r3, r0
 800804e:	001a      	movs	r2, r3
 8008050:	2340      	movs	r3, #64	; 0x40
 8008052:	439a      	bics	r2, r3
 8008054:	0013      	movs	r3, r2
 8008056:	b2db      	uxtb	r3, r3
 8008058:	0019      	movs	r1, r3
 800805a:	2031      	movs	r0, #49	; 0x31
 800805c:	f000 f92e 	bl	80082bc <SX1276Write>
    // Disable radio interrupts
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 8008060:	21f0      	movs	r1, #240	; 0xf0
 8008062:	2040      	movs	r0, #64	; 0x40
 8008064:	f000 f92a 	bl	80082bc <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 8008068:	21a0      	movs	r1, #160	; 0xa0
 800806a:	2041      	movs	r0, #65	; 0x41
 800806c:	f000 f926 	bl	80082bc <SX1276Write>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8008070:	68fa      	ldr	r2, [r7, #12]
 8008072:	4b09      	ldr	r3, [pc, #36]	; (8008098 <SX1276SetTxContinuousWave+0xb4>)
 8008074:	0011      	movs	r1, r2
 8008076:	0018      	movs	r0, r3
 8008078:	f7fe f8c8 	bl	800620c <TimerSetValue>

    SX1276.Settings.State = RF_TX_RUNNING;
 800807c:	4b07      	ldr	r3, [pc, #28]	; (800809c <SX1276SetTxContinuousWave+0xb8>)
 800807e:	2202      	movs	r2, #2
 8008080:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 8008082:	4b05      	ldr	r3, [pc, #20]	; (8008098 <SX1276SetTxContinuousWave+0xb4>)
 8008084:	0018      	movs	r0, r3
 8008086:	f7fd fff3 	bl	8006070 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 800808a:	2003      	movs	r0, #3
 800808c:	f000 f86e 	bl	800816c <SX1276SetOpMode>
}
 8008090:	46c0      	nop			; (mov r8, r8)
 8008092:	46bd      	mov	sp, r7
 8008094:	b004      	add	sp, #16
 8008096:	bd80      	pop	{r7, pc}
 8008098:	20000a04 	.word	0x20000a04
 800809c:	20000a34 	.word	0x20000a34

080080a0 <SX1276ReadRssi>:

int16_t SX1276ReadRssi( RadioModems_t modem )
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	0002      	movs	r2, r0
 80080a8:	1dfb      	adds	r3, r7, #7
 80080aa:	701a      	strb	r2, [r3, #0]
    int16_t rssi = 0;
 80080ac:	230e      	movs	r3, #14
 80080ae:	18fb      	adds	r3, r7, r3
 80080b0:	2200      	movs	r2, #0
 80080b2:	801a      	strh	r2, [r3, #0]

    switch( modem )
 80080b4:	1dfb      	adds	r3, r7, #7
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d002      	beq.n	80080c2 <SX1276ReadRssi+0x22>
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d00d      	beq.n	80080dc <SX1276ReadRssi+0x3c>
 80080c0:	e027      	b.n	8008112 <SX1276ReadRssi+0x72>
    {
    case MODEM_FSK:
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 80080c2:	2011      	movs	r0, #17
 80080c4:	f000 f90e 	bl	80082e4 <SX1276Read>
 80080c8:	0003      	movs	r3, r0
 80080ca:	085b      	lsrs	r3, r3, #1
 80080cc:	b2db      	uxtb	r3, r3
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	425b      	negs	r3, r3
 80080d2:	b29a      	uxth	r2, r3
 80080d4:	230e      	movs	r3, #14
 80080d6:	18fb      	adds	r3, r7, r3
 80080d8:	801a      	strh	r2, [r3, #0]
        break;
 80080da:	e020      	b.n	800811e <SX1276ReadRssi+0x7e>
    case MODEM_LORA:
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 80080dc:	4b14      	ldr	r3, [pc, #80]	; (8008130 <SX1276ReadRssi+0x90>)
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	4a14      	ldr	r2, [pc, #80]	; (8008134 <SX1276ReadRssi+0x94>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d90a      	bls.n	80080fc <SX1276ReadRssi+0x5c>
        {
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 80080e6:	201b      	movs	r0, #27
 80080e8:	f000 f8fc 	bl	80082e4 <SX1276Read>
 80080ec:	0003      	movs	r3, r0
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	3b9d      	subs	r3, #157	; 0x9d
 80080f2:	b29a      	uxth	r2, r3
 80080f4:	230e      	movs	r3, #14
 80080f6:	18fb      	adds	r3, r7, r3
 80080f8:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
        }
        break;
 80080fa:	e010      	b.n	800811e <SX1276ReadRssi+0x7e>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 80080fc:	201b      	movs	r0, #27
 80080fe:	f000 f8f1 	bl	80082e4 <SX1276Read>
 8008102:	0003      	movs	r3, r0
 8008104:	b29b      	uxth	r3, r3
 8008106:	3ba4      	subs	r3, #164	; 0xa4
 8008108:	b29a      	uxth	r2, r3
 800810a:	230e      	movs	r3, #14
 800810c:	18fb      	adds	r3, r7, r3
 800810e:	801a      	strh	r2, [r3, #0]
        break;
 8008110:	e005      	b.n	800811e <SX1276ReadRssi+0x7e>
    default:
        rssi = -1;
 8008112:	230e      	movs	r3, #14
 8008114:	18fb      	adds	r3, r7, r3
 8008116:	2201      	movs	r2, #1
 8008118:	4252      	negs	r2, r2
 800811a:	801a      	strh	r2, [r3, #0]
        break;
 800811c:	46c0      	nop			; (mov r8, r8)
    }
    return rssi;
 800811e:	230e      	movs	r3, #14
 8008120:	18fb      	adds	r3, r7, r3
 8008122:	2200      	movs	r2, #0
 8008124:	5e9b      	ldrsh	r3, [r3, r2]
}
 8008126:	0018      	movs	r0, r3
 8008128:	46bd      	mov	sp, r7
 800812a:	b004      	add	sp, #16
 800812c:	bd80      	pop	{r7, pc}
 800812e:	46c0      	nop			; (mov r8, r8)
 8008130:	20000a34 	.word	0x20000a34
 8008134:	1f4add40 	.word	0x1f4add40

08008138 <SX1276Reset>:

void SX1276Reset( void )
{
 8008138:	b580      	push	{r7, lr}
 800813a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin( GPIOC, GPIO_PIN_0, 0 );
 800813c:	4b0a      	ldr	r3, [pc, #40]	; (8008168 <SX1276Reset+0x30>)
 800813e:	2200      	movs	r2, #0
 8008140:	2101      	movs	r1, #1
 8008142:	0018      	movs	r0, r3
 8008144:	f7fa fcc6 	bl	8002ad4 <HAL_GPIO_WritePin>

    // Wait 1 ms
    DelayMs( 1 );
 8008148:	2001      	movs	r0, #1
 800814a:	f7fa f8dd 	bl	8002308 <HAL_Delay>

    HAL_GPIO_WritePin( GPIOC, GPIO_PIN_0, 1 );
 800814e:	4b06      	ldr	r3, [pc, #24]	; (8008168 <SX1276Reset+0x30>)
 8008150:	2201      	movs	r2, #1
 8008152:	2101      	movs	r1, #1
 8008154:	0018      	movs	r0, r3
 8008156:	f7fa fcbd 	bl	8002ad4 <HAL_GPIO_WritePin>

    // Wait 6 ms
    DelayMs( 6 );
 800815a:	2006      	movs	r0, #6
 800815c:	f7fa f8d4 	bl	8002308 <HAL_Delay>
}
 8008160:	46c0      	nop			; (mov r8, r8)
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	46c0      	nop			; (mov r8, r8)
 8008168:	50000800 	.word	0x50000800

0800816c <SX1276SetOpMode>:

void SX1276SetOpMode( uint8_t opMode )
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b082      	sub	sp, #8
 8008170:	af00      	add	r7, sp, #0
 8008172:	0002      	movs	r2, r0
 8008174:	1dfb      	adds	r3, r7, #7
 8008176:	701a      	strb	r2, [r3, #0]
    if( opMode == RF_OPMODE_SLEEP )
 8008178:	1dfb      	adds	r3, r7, #7
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d11c      	bne.n	80081ba <SX1276SetOpMode+0x4e>
    {
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8008180:	2001      	movs	r0, #1
 8008182:	f000 f8af 	bl	80082e4 <SX1276Read>
 8008186:	0003      	movs	r3, r0
 8008188:	b25b      	sxtb	r3, r3
 800818a:	2207      	movs	r2, #7
 800818c:	4393      	bics	r3, r2
 800818e:	b25a      	sxtb	r2, r3
 8008190:	1dfb      	adds	r3, r7, #7
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	b25b      	sxtb	r3, r3
 8008196:	4313      	orrs	r3, r2
 8008198:	b25b      	sxtb	r3, r3
 800819a:	b2db      	uxtb	r3, r3
 800819c:	0019      	movs	r1, r3
 800819e:	2001      	movs	r0, #1
 80081a0:	f000 f88c 	bl	80082bc <SX1276Write>
      
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( true );
 80081a4:	4b18      	ldr	r3, [pc, #96]	; (8008208 <SX1276SetOpMode+0x9c>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	691b      	ldr	r3, [r3, #16]
 80081aa:	2001      	movs	r0, #1
 80081ac:	4798      	blx	r3
      
      LoRaBoardCallbacks->SX1276BoardSetXO( RESET ); 
 80081ae:	4b16      	ldr	r3, [pc, #88]	; (8008208 <SX1276SetOpMode+0x9c>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	2000      	movs	r0, #0
 80081b6:	4798      	blx	r3
      
      LoRaBoardCallbacks->SX1276BoardSetAntSw( opMode );
      
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
    }
}
 80081b8:	e022      	b.n	8008200 <SX1276SetOpMode+0x94>
      LoRaBoardCallbacks->SX1276BoardSetXO( SET ); 
 80081ba:	4b13      	ldr	r3, [pc, #76]	; (8008208 <SX1276SetOpMode+0x9c>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	2001      	movs	r0, #1
 80081c2:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( false );
 80081c4:	4b10      	ldr	r3, [pc, #64]	; (8008208 <SX1276SetOpMode+0x9c>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	691b      	ldr	r3, [r3, #16]
 80081ca:	2000      	movs	r0, #0
 80081cc:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSw( opMode );
 80081ce:	4b0e      	ldr	r3, [pc, #56]	; (8008208 <SX1276SetOpMode+0x9c>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	695b      	ldr	r3, [r3, #20]
 80081d4:	1dfa      	adds	r2, r7, #7
 80081d6:	7812      	ldrb	r2, [r2, #0]
 80081d8:	0010      	movs	r0, r2
 80081da:	4798      	blx	r3
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 80081dc:	2001      	movs	r0, #1
 80081de:	f000 f881 	bl	80082e4 <SX1276Read>
 80081e2:	0003      	movs	r3, r0
 80081e4:	b25b      	sxtb	r3, r3
 80081e6:	2207      	movs	r2, #7
 80081e8:	4393      	bics	r3, r2
 80081ea:	b25a      	sxtb	r2, r3
 80081ec:	1dfb      	adds	r3, r7, #7
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	b25b      	sxtb	r3, r3
 80081f2:	4313      	orrs	r3, r2
 80081f4:	b25b      	sxtb	r3, r3
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	0019      	movs	r1, r3
 80081fa:	2001      	movs	r0, #1
 80081fc:	f000 f85e 	bl	80082bc <SX1276Write>
}
 8008200:	46c0      	nop			; (mov r8, r8)
 8008202:	46bd      	mov	sp, r7
 8008204:	b002      	add	sp, #8
 8008206:	bd80      	pop	{r7, pc}
 8008208:	20000888 	.word	0x20000888

0800820c <SX1276SetModem>:

void SX1276SetModem( RadioModems_t modem )
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b082      	sub	sp, #8
 8008210:	af00      	add	r7, sp, #0
 8008212:	0002      	movs	r2, r0
 8008214:	1dfb      	adds	r3, r7, #7
 8008216:	701a      	strb	r2, [r3, #0]
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 8008218:	2001      	movs	r0, #1
 800821a:	f000 f863 	bl	80082e4 <SX1276Read>
 800821e:	0003      	movs	r3, r0
 8008220:	b25b      	sxtb	r3, r3
 8008222:	2b00      	cmp	r3, #0
 8008224:	da03      	bge.n	800822e <SX1276SetModem+0x22>
    {
        SX1276.Settings.Modem = MODEM_LORA;
 8008226:	4b24      	ldr	r3, [pc, #144]	; (80082b8 <SX1276SetModem+0xac>)
 8008228:	2201      	movs	r2, #1
 800822a:	715a      	strb	r2, [r3, #5]
 800822c:	e002      	b.n	8008234 <SX1276SetModem+0x28>
    }
    else
    {
        SX1276.Settings.Modem = MODEM_FSK;
 800822e:	4b22      	ldr	r3, [pc, #136]	; (80082b8 <SX1276SetModem+0xac>)
 8008230:	2200      	movs	r2, #0
 8008232:	715a      	strb	r2, [r3, #5]
    }

    if( SX1276.Settings.Modem == modem )
 8008234:	4b20      	ldr	r3, [pc, #128]	; (80082b8 <SX1276SetModem+0xac>)
 8008236:	795b      	ldrb	r3, [r3, #5]
 8008238:	1dfa      	adds	r2, r7, #7
 800823a:	7812      	ldrb	r2, [r2, #0]
 800823c:	429a      	cmp	r2, r3
 800823e:	d037      	beq.n	80082b0 <SX1276SetModem+0xa4>
    {
        return;
    }

    SX1276.Settings.Modem = modem;
 8008240:	4b1d      	ldr	r3, [pc, #116]	; (80082b8 <SX1276SetModem+0xac>)
 8008242:	1dfa      	adds	r2, r7, #7
 8008244:	7812      	ldrb	r2, [r2, #0]
 8008246:	715a      	strb	r2, [r3, #5]
    switch( SX1276.Settings.Modem )
 8008248:	4b1b      	ldr	r3, [pc, #108]	; (80082b8 <SX1276SetModem+0xac>)
 800824a:	795b      	ldrb	r3, [r3, #5]
 800824c:	2b01      	cmp	r3, #1
 800824e:	d016      	beq.n	800827e <SX1276SetModem+0x72>
    {
    default:
    case MODEM_FSK:
        SX1276SetSleep( );
 8008250:	f7ff fc62 	bl	8007b18 <SX1276SetSleep>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 8008254:	2001      	movs	r0, #1
 8008256:	f000 f845 	bl	80082e4 <SX1276Read>
 800825a:	0003      	movs	r3, r0
 800825c:	001a      	movs	r2, r3
 800825e:	237f      	movs	r3, #127	; 0x7f
 8008260:	4013      	ands	r3, r2
 8008262:	b2db      	uxtb	r3, r3
 8008264:	0019      	movs	r1, r3
 8008266:	2001      	movs	r0, #1
 8008268:	f000 f828 	bl	80082bc <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 800826c:	2100      	movs	r1, #0
 800826e:	2040      	movs	r0, #64	; 0x40
 8008270:	f000 f824 	bl	80082bc <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 8008274:	2130      	movs	r1, #48	; 0x30
 8008276:	2041      	movs	r0, #65	; 0x41
 8008278:	f000 f820 	bl	80082bc <SX1276Write>
        break;
 800827c:	e019      	b.n	80082b2 <SX1276SetModem+0xa6>
    case MODEM_LORA:
        SX1276SetSleep( );
 800827e:	f7ff fc4b 	bl	8007b18 <SX1276SetSleep>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 8008282:	2001      	movs	r0, #1
 8008284:	f000 f82e 	bl	80082e4 <SX1276Read>
 8008288:	0003      	movs	r3, r0
 800828a:	001a      	movs	r2, r3
 800828c:	2380      	movs	r3, #128	; 0x80
 800828e:	425b      	negs	r3, r3
 8008290:	4313      	orrs	r3, r2
 8008292:	b2db      	uxtb	r3, r3
 8008294:	0019      	movs	r1, r3
 8008296:	2001      	movs	r0, #1
 8008298:	f000 f810 	bl	80082bc <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 800829c:	2100      	movs	r1, #0
 800829e:	2040      	movs	r0, #64	; 0x40
 80082a0:	f000 f80c 	bl	80082bc <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 80082a4:	2100      	movs	r1, #0
 80082a6:	2041      	movs	r0, #65	; 0x41
 80082a8:	f000 f808 	bl	80082bc <SX1276Write>
        break;
 80082ac:	46c0      	nop			; (mov r8, r8)
 80082ae:	e000      	b.n	80082b2 <SX1276SetModem+0xa6>
        return;
 80082b0:	46c0      	nop			; (mov r8, r8)
    }
}
 80082b2:	46bd      	mov	sp, r7
 80082b4:	b002      	add	sp, #8
 80082b6:	bd80      	pop	{r7, pc}
 80082b8:	20000a34 	.word	0x20000a34

080082bc <SX1276Write>:

void SX1276Write( uint16_t addr, uint8_t data )
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b082      	sub	sp, #8
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	0002      	movs	r2, r0
 80082c4:	1dbb      	adds	r3, r7, #6
 80082c6:	801a      	strh	r2, [r3, #0]
 80082c8:	1d7b      	adds	r3, r7, #5
 80082ca:	1c0a      	adds	r2, r1, #0
 80082cc:	701a      	strb	r2, [r3, #0]
    SX1276WriteBuffer( addr, &data, 1 );
 80082ce:	1d79      	adds	r1, r7, #5
 80082d0:	1dbb      	adds	r3, r7, #6
 80082d2:	881b      	ldrh	r3, [r3, #0]
 80082d4:	2201      	movs	r2, #1
 80082d6:	0018      	movs	r0, r3
 80082d8:	f000 f819 	bl	800830e <SX1276WriteBuffer>
}
 80082dc:	46c0      	nop			; (mov r8, r8)
 80082de:	46bd      	mov	sp, r7
 80082e0:	b002      	add	sp, #8
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <SX1276Read>:

uint8_t SX1276Read( uint16_t addr )
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b084      	sub	sp, #16
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	0002      	movs	r2, r0
 80082ec:	1dbb      	adds	r3, r7, #6
 80082ee:	801a      	strh	r2, [r3, #0]
    uint8_t data;
    SX1276ReadBuffer( addr, &data, 1 );
 80082f0:	230f      	movs	r3, #15
 80082f2:	18f9      	adds	r1, r7, r3
 80082f4:	1dbb      	adds	r3, r7, #6
 80082f6:	881b      	ldrh	r3, [r3, #0]
 80082f8:	2201      	movs	r2, #1
 80082fa:	0018      	movs	r0, r3
 80082fc:	f000 f84c 	bl	8008398 <SX1276ReadBuffer>
    return data;
 8008300:	230f      	movs	r3, #15
 8008302:	18fb      	adds	r3, r7, r3
 8008304:	781b      	ldrb	r3, [r3, #0]
}
 8008306:	0018      	movs	r0, r3
 8008308:	46bd      	mov	sp, r7
 800830a:	b004      	add	sp, #16
 800830c:	bd80      	pop	{r7, pc}

0800830e <SX1276WriteBuffer>:

void SX1276WriteBuffer( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800830e:	b580      	push	{r7, lr}
 8008310:	b084      	sub	sp, #16
 8008312:	af00      	add	r7, sp, #0
 8008314:	6039      	str	r1, [r7, #0]
 8008316:	0011      	movs	r1, r2
 8008318:	1dbb      	adds	r3, r7, #6
 800831a:	1c02      	adds	r2, r0, #0
 800831c:	801a      	strh	r2, [r3, #0]
 800831e:	1d7b      	adds	r3, r7, #5
 8008320:	1c0a      	adds	r2, r1, #0
 8008322:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    //NSS = 0;
    HAL_GPIO_WritePin( GPIOA, GPIO_PIN_15, 0 );
 8008324:	2380      	movs	r3, #128	; 0x80
 8008326:	0219      	lsls	r1, r3, #8
 8008328:	23a0      	movs	r3, #160	; 0xa0
 800832a:	05db      	lsls	r3, r3, #23
 800832c:	2200      	movs	r2, #0
 800832e:	0018      	movs	r0, r3
 8008330:	f7fa fbd0 	bl	8002ad4 <HAL_GPIO_WritePin>

    HW_SPI_InOut( addr | 0x80 );
 8008334:	1dbb      	adds	r3, r7, #6
 8008336:	881b      	ldrh	r3, [r3, #0]
 8008338:	2280      	movs	r2, #128	; 0x80
 800833a:	4313      	orrs	r3, r2
 800833c:	b29b      	uxth	r3, r3
 800833e:	0018      	movs	r0, r3
 8008340:	f7fe fb3c 	bl	80069bc <HW_SPI_InOut>
    for( i = 0; i < size; i++ )
 8008344:	230f      	movs	r3, #15
 8008346:	18fb      	adds	r3, r7, r3
 8008348:	2200      	movs	r2, #0
 800834a:	701a      	strb	r2, [r3, #0]
 800834c:	e010      	b.n	8008370 <SX1276WriteBuffer+0x62>
    {
        HW_SPI_InOut( buffer[i] );
 800834e:	230f      	movs	r3, #15
 8008350:	18fb      	adds	r3, r7, r3
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	683a      	ldr	r2, [r7, #0]
 8008356:	18d3      	adds	r3, r2, r3
 8008358:	781b      	ldrb	r3, [r3, #0]
 800835a:	b29b      	uxth	r3, r3
 800835c:	0018      	movs	r0, r3
 800835e:	f7fe fb2d 	bl	80069bc <HW_SPI_InOut>
    for( i = 0; i < size; i++ )
 8008362:	230f      	movs	r3, #15
 8008364:	18fb      	adds	r3, r7, r3
 8008366:	781a      	ldrb	r2, [r3, #0]
 8008368:	230f      	movs	r3, #15
 800836a:	18fb      	adds	r3, r7, r3
 800836c:	3201      	adds	r2, #1
 800836e:	701a      	strb	r2, [r3, #0]
 8008370:	230f      	movs	r3, #15
 8008372:	18fa      	adds	r2, r7, r3
 8008374:	1d7b      	adds	r3, r7, #5
 8008376:	7812      	ldrb	r2, [r2, #0]
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	429a      	cmp	r2, r3
 800837c:	d3e7      	bcc.n	800834e <SX1276WriteBuffer+0x40>
    }

    //NSS = 1;
    HAL_GPIO_WritePin( GPIOA, GPIO_PIN_15, 1 );
 800837e:	2380      	movs	r3, #128	; 0x80
 8008380:	0219      	lsls	r1, r3, #8
 8008382:	23a0      	movs	r3, #160	; 0xa0
 8008384:	05db      	lsls	r3, r3, #23
 8008386:	2201      	movs	r2, #1
 8008388:	0018      	movs	r0, r3
 800838a:	f7fa fba3 	bl	8002ad4 <HAL_GPIO_WritePin>
}
 800838e:	46c0      	nop			; (mov r8, r8)
 8008390:	46bd      	mov	sp, r7
 8008392:	b004      	add	sp, #16
 8008394:	bd80      	pop	{r7, pc}
	...

08008398 <SX1276ReadBuffer>:


void SX1276ReadBuffer( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b086      	sub	sp, #24
 800839c:	af02      	add	r7, sp, #8
 800839e:	6039      	str	r1, [r7, #0]
 80083a0:	0011      	movs	r1, r2
 80083a2:	1dbb      	adds	r3, r7, #6
 80083a4:	1c02      	adds	r2, r0, #0
 80083a6:	801a      	strh	r2, [r3, #0]
 80083a8:	1d7b      	adds	r3, r7, #5
 80083aa:	1c0a      	adds	r2, r1, #0
 80083ac:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    //NSS = 0;
    HAL_GPIO_WritePin( GPIOA, GPIO_PIN_15, 0 );
 80083ae:	2380      	movs	r3, #128	; 0x80
 80083b0:	0219      	lsls	r1, r3, #8
 80083b2:	23a0      	movs	r3, #160	; 0xa0
 80083b4:	05db      	lsls	r3, r3, #23
 80083b6:	2200      	movs	r2, #0
 80083b8:	0018      	movs	r0, r3
 80083ba:	f7fa fb8b 	bl	8002ad4 <HAL_GPIO_WritePin>

    uint8_t txData = addr & 0x7F;
 80083be:	1dbb      	adds	r3, r7, #6
 80083c0:	881b      	ldrh	r3, [r3, #0]
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	227f      	movs	r2, #127	; 0x7f
 80083c6:	4013      	ands	r3, r2
 80083c8:	b2da      	uxtb	r2, r3
 80083ca:	230e      	movs	r3, #14
 80083cc:	18fb      	adds	r3, r7, r3
 80083ce:	701a      	strb	r2, [r3, #0]
    uint8_t rxData ;
    HAL_SPI_TransmitReceive( &hspi1, &txData, &rxData, 1, HAL_MAX_DELAY);
 80083d0:	230d      	movs	r3, #13
 80083d2:	18fa      	adds	r2, r7, r3
 80083d4:	230e      	movs	r3, #14
 80083d6:	18f9      	adds	r1, r7, r3
 80083d8:	481e      	ldr	r0, [pc, #120]	; (8008454 <SX1276ReadBuffer+0xbc>)
 80083da:	2301      	movs	r3, #1
 80083dc:	425b      	negs	r3, r3
 80083de:	9300      	str	r3, [sp, #0]
 80083e0:	2301      	movs	r3, #1
 80083e2:	f7fc f8c1 	bl	8004568 <HAL_SPI_TransmitReceive>


    for( i = 0; i < size; i++ )
 80083e6:	230f      	movs	r3, #15
 80083e8:	18fb      	adds	r3, r7, r3
 80083ea:	2200      	movs	r2, #0
 80083ec:	701a      	strb	r2, [r3, #0]
 80083ee:	e01e      	b.n	800842e <SX1276ReadBuffer+0x96>
    {
    	txData = 0;
 80083f0:	230e      	movs	r3, #14
 80083f2:	18fb      	adds	r3, r7, r3
 80083f4:	2200      	movs	r2, #0
 80083f6:	701a      	strb	r2, [r3, #0]
        HAL_SPI_TransmitReceive( &hspi1, &txData, &rxData, 1, HAL_MAX_DELAY);
 80083f8:	230d      	movs	r3, #13
 80083fa:	18fa      	adds	r2, r7, r3
 80083fc:	230e      	movs	r3, #14
 80083fe:	18f9      	adds	r1, r7, r3
 8008400:	4814      	ldr	r0, [pc, #80]	; (8008454 <SX1276ReadBuffer+0xbc>)
 8008402:	2301      	movs	r3, #1
 8008404:	425b      	negs	r3, r3
 8008406:	9300      	str	r3, [sp, #0]
 8008408:	2301      	movs	r3, #1
 800840a:	f7fc f8ad 	bl	8004568 <HAL_SPI_TransmitReceive>
        buffer[i] = rxData;
 800840e:	230f      	movs	r3, #15
 8008410:	18fb      	adds	r3, r7, r3
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	683a      	ldr	r2, [r7, #0]
 8008416:	18d3      	adds	r3, r2, r3
 8008418:	220d      	movs	r2, #13
 800841a:	18ba      	adds	r2, r7, r2
 800841c:	7812      	ldrb	r2, [r2, #0]
 800841e:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8008420:	230f      	movs	r3, #15
 8008422:	18fb      	adds	r3, r7, r3
 8008424:	781a      	ldrb	r2, [r3, #0]
 8008426:	230f      	movs	r3, #15
 8008428:	18fb      	adds	r3, r7, r3
 800842a:	3201      	adds	r2, #1
 800842c:	701a      	strb	r2, [r3, #0]
 800842e:	230f      	movs	r3, #15
 8008430:	18fa      	adds	r2, r7, r3
 8008432:	1d7b      	adds	r3, r7, #5
 8008434:	7812      	ldrb	r2, [r2, #0]
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	429a      	cmp	r2, r3
 800843a:	d3d9      	bcc.n	80083f0 <SX1276ReadBuffer+0x58>
    }

    //NSS = 1;
    HAL_GPIO_WritePin( GPIOA, GPIO_PIN_15, 1 );
 800843c:	2380      	movs	r3, #128	; 0x80
 800843e:	0219      	lsls	r1, r3, #8
 8008440:	23a0      	movs	r3, #160	; 0xa0
 8008442:	05db      	lsls	r3, r3, #23
 8008444:	2201      	movs	r2, #1
 8008446:	0018      	movs	r0, r3
 8008448:	f7fa fb44 	bl	8002ad4 <HAL_GPIO_WritePin>
}
 800844c:	46c0      	nop			; (mov r8, r8)
 800844e:	46bd      	mov	sp, r7
 8008450:	b004      	add	sp, #16
 8008452:	bd80      	pop	{r7, pc}
 8008454:	2000124c 	.word	0x2000124c

08008458 <SX1276WriteFifo>:

void SX1276WriteFifo( uint8_t *buffer, uint8_t size )
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	000a      	movs	r2, r1
 8008462:	1cfb      	adds	r3, r7, #3
 8008464:	701a      	strb	r2, [r3, #0]
    SX1276WriteBuffer( 0, buffer, size );
 8008466:	1cfb      	adds	r3, r7, #3
 8008468:	781a      	ldrb	r2, [r3, #0]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	0019      	movs	r1, r3
 800846e:	2000      	movs	r0, #0
 8008470:	f7ff ff4d 	bl	800830e <SX1276WriteBuffer>
}
 8008474:	46c0      	nop			; (mov r8, r8)
 8008476:	46bd      	mov	sp, r7
 8008478:	b002      	add	sp, #8
 800847a:	bd80      	pop	{r7, pc}

0800847c <SX1276ReadFifo>:

void SX1276ReadFifo( uint8_t *buffer, uint8_t size )
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b082      	sub	sp, #8
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	000a      	movs	r2, r1
 8008486:	1cfb      	adds	r3, r7, #3
 8008488:	701a      	strb	r2, [r3, #0]
    SX1276ReadBuffer( 0, buffer, size );
 800848a:	1cfb      	adds	r3, r7, #3
 800848c:	781a      	ldrb	r2, [r3, #0]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	0019      	movs	r1, r3
 8008492:	2000      	movs	r0, #0
 8008494:	f7ff ff80 	bl	8008398 <SX1276ReadBuffer>
}
 8008498:	46c0      	nop			; (mov r8, r8)
 800849a:	46bd      	mov	sp, r7
 800849c:	b002      	add	sp, #8
 800849e:	bd80      	pop	{r7, pc}

080084a0 <SX1276SetMaxPayloadLength>:

void SX1276SetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	0002      	movs	r2, r0
 80084a8:	1dfb      	adds	r3, r7, #7
 80084aa:	701a      	strb	r2, [r3, #0]
 80084ac:	1dbb      	adds	r3, r7, #6
 80084ae:	1c0a      	adds	r2, r1, #0
 80084b0:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
 80084b2:	1dfb      	adds	r3, r7, #7
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	0018      	movs	r0, r3
 80084b8:	f7ff fea8 	bl	800820c <SX1276SetModem>

    switch( modem )
 80084bc:	1dfb      	adds	r3, r7, #7
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d002      	beq.n	80084ca <SX1276SetMaxPayloadLength+0x2a>
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d00f      	beq.n	80084e8 <SX1276SetMaxPayloadLength+0x48>
        break;
    case MODEM_LORA:
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
        break;
    }
}
 80084c8:	e016      	b.n	80084f8 <SX1276SetMaxPayloadLength+0x58>
        if( SX1276.Settings.Fsk.FixLen == false )
 80084ca:	4b0d      	ldr	r3, [pc, #52]	; (8008500 <SX1276SetMaxPayloadLength+0x60>)
 80084cc:	2222      	movs	r2, #34	; 0x22
 80084ce:	5c9b      	ldrb	r3, [r3, r2]
 80084d0:	2201      	movs	r2, #1
 80084d2:	4053      	eors	r3, r2
 80084d4:	b2db      	uxtb	r3, r3
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d00d      	beq.n	80084f6 <SX1276SetMaxPayloadLength+0x56>
            SX1276Write( REG_PAYLOADLENGTH, max );
 80084da:	1dbb      	adds	r3, r7, #6
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	0019      	movs	r1, r3
 80084e0:	2032      	movs	r0, #50	; 0x32
 80084e2:	f7ff feeb 	bl	80082bc <SX1276Write>
        break;
 80084e6:	e006      	b.n	80084f6 <SX1276SetMaxPayloadLength+0x56>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 80084e8:	1dbb      	adds	r3, r7, #6
 80084ea:	781b      	ldrb	r3, [r3, #0]
 80084ec:	0019      	movs	r1, r3
 80084ee:	2023      	movs	r0, #35	; 0x23
 80084f0:	f7ff fee4 	bl	80082bc <SX1276Write>
        break;
 80084f4:	e000      	b.n	80084f8 <SX1276SetMaxPayloadLength+0x58>
        break;
 80084f6:	46c0      	nop			; (mov r8, r8)
}
 80084f8:	46c0      	nop			; (mov r8, r8)
 80084fa:	46bd      	mov	sp, r7
 80084fc:	b002      	add	sp, #8
 80084fe:	bd80      	pop	{r7, pc}
 8008500:	20000a34 	.word	0x20000a34

08008504 <SX1276SetPublicNetwork>:

void SX1276SetPublicNetwork( bool enable )
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b082      	sub	sp, #8
 8008508:	af00      	add	r7, sp, #0
 800850a:	0002      	movs	r2, r0
 800850c:	1dfb      	adds	r3, r7, #7
 800850e:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( MODEM_LORA );
 8008510:	2001      	movs	r0, #1
 8008512:	f7ff fe7b 	bl	800820c <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 8008516:	4b0b      	ldr	r3, [pc, #44]	; (8008544 <SX1276SetPublicNetwork+0x40>)
 8008518:	1dfa      	adds	r2, r7, #7
 800851a:	215c      	movs	r1, #92	; 0x5c
 800851c:	7812      	ldrb	r2, [r2, #0]
 800851e:	545a      	strb	r2, [r3, r1]
    if( enable == true )
 8008520:	1dfb      	adds	r3, r7, #7
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d004      	beq.n	8008532 <SX1276SetPublicNetwork+0x2e>
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 8008528:	2134      	movs	r1, #52	; 0x34
 800852a:	2039      	movs	r0, #57	; 0x39
 800852c:	f7ff fec6 	bl	80082bc <SX1276Write>
    else
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
    }
}
 8008530:	e003      	b.n	800853a <SX1276SetPublicNetwork+0x36>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 8008532:	2112      	movs	r1, #18
 8008534:	2039      	movs	r0, #57	; 0x39
 8008536:	f7ff fec1 	bl	80082bc <SX1276Write>
}
 800853a:	46c0      	nop			; (mov r8, r8)
 800853c:	46bd      	mov	sp, r7
 800853e:	b002      	add	sp, #8
 8008540:	bd80      	pop	{r7, pc}
 8008542:	46c0      	nop			; (mov r8, r8)
 8008544:	20000a34 	.word	0x20000a34

08008548 <SX1276GetWakeupTime>:

uint32_t SX1276GetWakeupTime( void )
{
 8008548:	b580      	push	{r7, lr}
 800854a:	af00      	add	r7, sp, #0
    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 800854c:	4b04      	ldr	r3, [pc, #16]	; (8008560 <SX1276GetWakeupTime+0x18>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	4798      	blx	r3
 8008554:	0003      	movs	r3, r0
 8008556:	3302      	adds	r3, #2
}
 8008558:	0018      	movs	r0, r3
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	46c0      	nop			; (mov r8, r8)
 8008560:	20000888 	.word	0x20000888

08008564 <SX1276OnTimeoutIrq>:

void SX1276OnTimeoutIrq( void* context )
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b084      	sub	sp, #16
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.State )
 800856c:	4b53      	ldr	r3, [pc, #332]	; (80086bc <SX1276OnTimeoutIrq+0x158>)
 800856e:	791b      	ldrb	r3, [r3, #4]
 8008570:	2b01      	cmp	r3, #1
 8008572:	d002      	beq.n	800857a <SX1276OnTimeoutIrq+0x16>
 8008574:	2b02      	cmp	r3, #2
 8008576:	d045      	beq.n	8008604 <SX1276OnTimeoutIrq+0xa0>
        {
            RadioEvents->TxTimeout( );
        }
        break;
    default:
        break;
 8008578:	e09c      	b.n	80086b4 <SX1276OnTimeoutIrq+0x150>
        if( SX1276.Settings.Modem == MODEM_FSK )
 800857a:	4b50      	ldr	r3, [pc, #320]	; (80086bc <SX1276OnTimeoutIrq+0x158>)
 800857c:	795b      	ldrb	r3, [r3, #5]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d132      	bne.n	80085e8 <SX1276OnTimeoutIrq+0x84>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8008582:	4b4e      	ldr	r3, [pc, #312]	; (80086bc <SX1276OnTimeoutIrq+0x158>)
 8008584:	2230      	movs	r2, #48	; 0x30
 8008586:	2100      	movs	r1, #0
 8008588:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 800858a:	4b4c      	ldr	r3, [pc, #304]	; (80086bc <SX1276OnTimeoutIrq+0x158>)
 800858c:	2231      	movs	r2, #49	; 0x31
 800858e:	2100      	movs	r1, #0
 8008590:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8008592:	4b4a      	ldr	r3, [pc, #296]	; (80086bc <SX1276OnTimeoutIrq+0x158>)
 8008594:	2200      	movs	r2, #0
 8008596:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 8008598:	4b48      	ldr	r3, [pc, #288]	; (80086bc <SX1276OnTimeoutIrq+0x158>)
 800859a:	2200      	movs	r2, #0
 800859c:	875a      	strh	r2, [r3, #58]	; 0x3a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 800859e:	210b      	movs	r1, #11
 80085a0:	203e      	movs	r0, #62	; 0x3e
 80085a2:	f7ff fe8b 	bl	80082bc <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 80085a6:	2110      	movs	r1, #16
 80085a8:	203f      	movs	r0, #63	; 0x3f
 80085aa:	f7ff fe87 	bl	80082bc <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 80085ae:	4b43      	ldr	r3, [pc, #268]	; (80086bc <SX1276OnTimeoutIrq+0x158>)
 80085b0:	2226      	movs	r2, #38	; 0x26
 80085b2:	5c9b      	ldrb	r3, [r3, r2]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d010      	beq.n	80085da <SX1276OnTimeoutIrq+0x76>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80085b8:	200d      	movs	r0, #13
 80085ba:	f7ff fe93 	bl	80082e4 <SX1276Read>
 80085be:	0003      	movs	r3, r0
 80085c0:	001a      	movs	r2, r3
 80085c2:	2340      	movs	r3, #64	; 0x40
 80085c4:	4313      	orrs	r3, r2
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	0019      	movs	r1, r3
 80085ca:	200d      	movs	r0, #13
 80085cc:	f7ff fe76 	bl	80082bc <SX1276Write>
                TimerStart( &RxTimeoutSyncWord );
 80085d0:	4b3b      	ldr	r3, [pc, #236]	; (80086c0 <SX1276OnTimeoutIrq+0x15c>)
 80085d2:	0018      	movs	r0, r3
 80085d4:	f7fd fd4c 	bl	8006070 <TimerStart>
 80085d8:	e006      	b.n	80085e8 <SX1276OnTimeoutIrq+0x84>
                SX1276.Settings.State = RF_IDLE;
 80085da:	4b38      	ldr	r3, [pc, #224]	; (80086bc <SX1276OnTimeoutIrq+0x158>)
 80085dc:	2200      	movs	r2, #0
 80085de:	711a      	strb	r2, [r3, #4]
                TimerStop( &RxTimeoutSyncWord );
 80085e0:	4b37      	ldr	r3, [pc, #220]	; (80086c0 <SX1276OnTimeoutIrq+0x15c>)
 80085e2:	0018      	movs	r0, r3
 80085e4:	f7fd fd98 	bl	8006118 <TimerStop>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80085e8:	4b36      	ldr	r3, [pc, #216]	; (80086c4 <SX1276OnTimeoutIrq+0x160>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d05e      	beq.n	80086ae <SX1276OnTimeoutIrq+0x14a>
 80085f0:	4b34      	ldr	r3, [pc, #208]	; (80086c4 <SX1276OnTimeoutIrq+0x160>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	68db      	ldr	r3, [r3, #12]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d059      	beq.n	80086ae <SX1276OnTimeoutIrq+0x14a>
            RadioEvents->RxTimeout( );
 80085fa:	4b32      	ldr	r3, [pc, #200]	; (80086c4 <SX1276OnTimeoutIrq+0x160>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	4798      	blx	r3
        break;
 8008602:	e054      	b.n	80086ae <SX1276OnTimeoutIrq+0x14a>
        SX1276Reset( );
 8008604:	f7ff fd98 	bl	8008138 <SX1276Reset>
        RxChainCalibration( );
 8008608:	f7fe fb58 	bl	8006cbc <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 800860c:	2000      	movs	r0, #0
 800860e:	f7ff fdad 	bl	800816c <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8008612:	230f      	movs	r3, #15
 8008614:	18fb      	adds	r3, r7, r3
 8008616:	2200      	movs	r2, #0
 8008618:	701a      	strb	r2, [r3, #0]
 800861a:	e029      	b.n	8008670 <SX1276OnTimeoutIrq+0x10c>
            SX1276SetModem( RadioRegsInit[i].Modem );
 800861c:	230f      	movs	r3, #15
 800861e:	18fb      	adds	r3, r7, r3
 8008620:	781a      	ldrb	r2, [r3, #0]
 8008622:	4929      	ldr	r1, [pc, #164]	; (80086c8 <SX1276OnTimeoutIrq+0x164>)
 8008624:	0013      	movs	r3, r2
 8008626:	005b      	lsls	r3, r3, #1
 8008628:	189b      	adds	r3, r3, r2
 800862a:	5c5b      	ldrb	r3, [r3, r1]
 800862c:	0018      	movs	r0, r3
 800862e:	f7ff fded 	bl	800820c <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8008632:	230f      	movs	r3, #15
 8008634:	18fb      	adds	r3, r7, r3
 8008636:	781a      	ldrb	r2, [r3, #0]
 8008638:	4923      	ldr	r1, [pc, #140]	; (80086c8 <SX1276OnTimeoutIrq+0x164>)
 800863a:	0013      	movs	r3, r2
 800863c:	005b      	lsls	r3, r3, #1
 800863e:	189b      	adds	r3, r3, r2
 8008640:	18cb      	adds	r3, r1, r3
 8008642:	3301      	adds	r3, #1
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	b298      	uxth	r0, r3
 8008648:	230f      	movs	r3, #15
 800864a:	18fb      	adds	r3, r7, r3
 800864c:	781a      	ldrb	r2, [r3, #0]
 800864e:	491e      	ldr	r1, [pc, #120]	; (80086c8 <SX1276OnTimeoutIrq+0x164>)
 8008650:	0013      	movs	r3, r2
 8008652:	005b      	lsls	r3, r3, #1
 8008654:	189b      	adds	r3, r3, r2
 8008656:	18cb      	adds	r3, r1, r3
 8008658:	3302      	adds	r3, #2
 800865a:	781b      	ldrb	r3, [r3, #0]
 800865c:	0019      	movs	r1, r3
 800865e:	f7ff fe2d 	bl	80082bc <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8008662:	230f      	movs	r3, #15
 8008664:	18fb      	adds	r3, r7, r3
 8008666:	781a      	ldrb	r2, [r3, #0]
 8008668:	230f      	movs	r3, #15
 800866a:	18fb      	adds	r3, r7, r3
 800866c:	3201      	adds	r2, #1
 800866e:	701a      	strb	r2, [r3, #0]
 8008670:	230f      	movs	r3, #15
 8008672:	18fb      	adds	r3, r7, r3
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	2b0f      	cmp	r3, #15
 8008678:	d9d0      	bls.n	800861c <SX1276OnTimeoutIrq+0xb8>
        SX1276SetModem( MODEM_FSK );
 800867a:	2000      	movs	r0, #0
 800867c:	f7ff fdc6 	bl	800820c <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 8008680:	4b0e      	ldr	r3, [pc, #56]	; (80086bc <SX1276OnTimeoutIrq+0x158>)
 8008682:	225c      	movs	r2, #92	; 0x5c
 8008684:	5c9b      	ldrb	r3, [r3, r2]
 8008686:	0018      	movs	r0, r3
 8008688:	f7ff ff3c 	bl	8008504 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 800868c:	4b0b      	ldr	r3, [pc, #44]	; (80086bc <SX1276OnTimeoutIrq+0x158>)
 800868e:	2200      	movs	r2, #0
 8008690:	711a      	strb	r2, [r3, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8008692:	4b0c      	ldr	r3, [pc, #48]	; (80086c4 <SX1276OnTimeoutIrq+0x160>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d00b      	beq.n	80086b2 <SX1276OnTimeoutIrq+0x14e>
 800869a:	4b0a      	ldr	r3, [pc, #40]	; (80086c4 <SX1276OnTimeoutIrq+0x160>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d006      	beq.n	80086b2 <SX1276OnTimeoutIrq+0x14e>
            RadioEvents->TxTimeout( );
 80086a4:	4b07      	ldr	r3, [pc, #28]	; (80086c4 <SX1276OnTimeoutIrq+0x160>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	4798      	blx	r3
        break;
 80086ac:	e001      	b.n	80086b2 <SX1276OnTimeoutIrq+0x14e>
        break;
 80086ae:	46c0      	nop			; (mov r8, r8)
 80086b0:	e000      	b.n	80086b4 <SX1276OnTimeoutIrq+0x150>
        break;
 80086b2:	46c0      	nop			; (mov r8, r8)
    }
}
 80086b4:	46c0      	nop			; (mov r8, r8)
 80086b6:	46bd      	mov	sp, r7
 80086b8:	b004      	add	sp, #16
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	20000a34 	.word	0x20000a34
 80086c0:	20000a1c 	.word	0x20000a1c
 80086c4:	20000784 	.word	0x20000784
 80086c8:	0800d78c 	.word	0x0800d78c

080086cc <SX1276OnDio0Irq>:

void SX1276OnDio0Irq( void* context )
{
 80086cc:	b5b0      	push	{r4, r5, r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
    volatile uint8_t irqFlags = 0;
 80086d4:	230d      	movs	r3, #13
 80086d6:	18fb      	adds	r3, r7, r3
 80086d8:	2200      	movs	r2, #0
 80086da:	701a      	strb	r2, [r3, #0]

    switch( SX1276.Settings.State )
 80086dc:	4bcd      	ldr	r3, [pc, #820]	; (8008a14 <SX1276OnDio0Irq+0x348>)
 80086de:	791b      	ldrb	r3, [r3, #4]
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d003      	beq.n	80086ec <SX1276OnDio0Irq+0x20>
 80086e4:	2b02      	cmp	r3, #2
 80086e6:	d100      	bne.n	80086ea <SX1276OnDio0Irq+0x1e>
 80086e8:	e1f9      	b.n	8008ade <SX1276OnDio0Irq+0x412>
                }
                break;
            }
            break;
        default:
            break;
 80086ea:	e216      	b.n	8008b1a <SX1276OnDio0Irq+0x44e>
            switch( SX1276.Settings.Modem )
 80086ec:	4bc9      	ldr	r3, [pc, #804]	; (8008a14 <SX1276OnDio0Irq+0x348>)
 80086ee:	795b      	ldrb	r3, [r3, #5]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d003      	beq.n	80086fc <SX1276OnDio0Irq+0x30>
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d100      	bne.n	80086fa <SX1276OnDio0Irq+0x2e>
 80086f8:	e0ec      	b.n	80088d4 <SX1276OnDio0Irq+0x208>
                break;
 80086fa:	e1ef      	b.n	8008adc <SX1276OnDio0Irq+0x410>
                if( SX1276.Settings.Fsk.CrcOn == true )
 80086fc:	4bc5      	ldr	r3, [pc, #788]	; (8008a14 <SX1276OnDio0Irq+0x348>)
 80086fe:	2224      	movs	r2, #36	; 0x24
 8008700:	5c9b      	ldrb	r3, [r3, r2]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d058      	beq.n	80087b8 <SX1276OnDio0Irq+0xec>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 8008706:	203f      	movs	r0, #63	; 0x3f
 8008708:	f7ff fdec 	bl	80082e4 <SX1276Read>
 800870c:	0003      	movs	r3, r0
 800870e:	001a      	movs	r2, r3
 8008710:	230d      	movs	r3, #13
 8008712:	18fb      	adds	r3, r7, r3
 8008714:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 8008716:	230d      	movs	r3, #13
 8008718:	18fb      	adds	r3, r7, r3
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	b2db      	uxtb	r3, r3
 800871e:	001a      	movs	r2, r3
 8008720:	2302      	movs	r3, #2
 8008722:	4013      	ands	r3, r2
 8008724:	2b02      	cmp	r3, #2
 8008726:	d047      	beq.n	80087b8 <SX1276OnDio0Irq+0xec>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8008728:	210b      	movs	r1, #11
 800872a:	203e      	movs	r0, #62	; 0x3e
 800872c:	f7ff fdc6 	bl	80082bc <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8008730:	2110      	movs	r1, #16
 8008732:	203f      	movs	r0, #63	; 0x3f
 8008734:	f7ff fdc2 	bl	80082bc <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 8008738:	4bb7      	ldr	r3, [pc, #732]	; (8008a18 <SX1276OnDio0Irq+0x34c>)
 800873a:	0018      	movs	r0, r3
 800873c:	f7fd fcec 	bl	8006118 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 8008740:	4bb4      	ldr	r3, [pc, #720]	; (8008a14 <SX1276OnDio0Irq+0x348>)
 8008742:	2226      	movs	r2, #38	; 0x26
 8008744:	5c9b      	ldrb	r3, [r3, r2]
 8008746:	2201      	movs	r2, #1
 8008748:	4053      	eors	r3, r2
 800874a:	b2db      	uxtb	r3, r3
 800874c:	2b00      	cmp	r3, #0
 800874e:	d007      	beq.n	8008760 <SX1276OnDio0Irq+0x94>
                            TimerStop( &RxTimeoutSyncWord );
 8008750:	4bb2      	ldr	r3, [pc, #712]	; (8008a1c <SX1276OnDio0Irq+0x350>)
 8008752:	0018      	movs	r0, r3
 8008754:	f7fd fce0 	bl	8006118 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 8008758:	4bae      	ldr	r3, [pc, #696]	; (8008a14 <SX1276OnDio0Irq+0x348>)
 800875a:	2200      	movs	r2, #0
 800875c:	711a      	strb	r2, [r3, #4]
 800875e:	e00f      	b.n	8008780 <SX1276OnDio0Irq+0xb4>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8008760:	200d      	movs	r0, #13
 8008762:	f7ff fdbf 	bl	80082e4 <SX1276Read>
 8008766:	0003      	movs	r3, r0
 8008768:	001a      	movs	r2, r3
 800876a:	2340      	movs	r3, #64	; 0x40
 800876c:	4313      	orrs	r3, r2
 800876e:	b2db      	uxtb	r3, r3
 8008770:	0019      	movs	r1, r3
 8008772:	200d      	movs	r0, #13
 8008774:	f7ff fda2 	bl	80082bc <SX1276Write>
                            TimerStart( &RxTimeoutSyncWord );
 8008778:	4ba8      	ldr	r3, [pc, #672]	; (8008a1c <SX1276OnDio0Irq+0x350>)
 800877a:	0018      	movs	r0, r3
 800877c:	f7fd fc78 	bl	8006070 <TimerStart>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8008780:	4ba7      	ldr	r3, [pc, #668]	; (8008a20 <SX1276OnDio0Irq+0x354>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d008      	beq.n	800879a <SX1276OnDio0Irq+0xce>
 8008788:	4ba5      	ldr	r3, [pc, #660]	; (8008a20 <SX1276OnDio0Irq+0x354>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	691b      	ldr	r3, [r3, #16]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d003      	beq.n	800879a <SX1276OnDio0Irq+0xce>
                            RadioEvents->RxError( );
 8008792:	4ba3      	ldr	r3, [pc, #652]	; (8008a20 <SX1276OnDio0Irq+0x354>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	691b      	ldr	r3, [r3, #16]
 8008798:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800879a:	4b9e      	ldr	r3, [pc, #632]	; (8008a14 <SX1276OnDio0Irq+0x348>)
 800879c:	2230      	movs	r2, #48	; 0x30
 800879e:	2100      	movs	r1, #0
 80087a0:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 80087a2:	4b9c      	ldr	r3, [pc, #624]	; (8008a14 <SX1276OnDio0Irq+0x348>)
 80087a4:	2231      	movs	r2, #49	; 0x31
 80087a6:	2100      	movs	r1, #0
 80087a8:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80087aa:	4b9a      	ldr	r3, [pc, #616]	; (8008a14 <SX1276OnDio0Irq+0x348>)
 80087ac:	2200      	movs	r2, #0
 80087ae:	879a      	strh	r2, [r3, #60]	; 0x3c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 80087b0:	4b98      	ldr	r3, [pc, #608]	; (8008a14 <SX1276OnDio0Irq+0x348>)
 80087b2:	2200      	movs	r2, #0
 80087b4:	875a      	strh	r2, [r3, #58]	; 0x3a
                        break;
 80087b6:	e191      	b.n	8008adc <SX1276OnDio0Irq+0x410>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 80087b8:	4b96      	ldr	r3, [pc, #600]	; (8008a14 <SX1276OnDio0Irq+0x348>)
 80087ba:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d12d      	bne.n	800881c <SX1276OnDio0Irq+0x150>
 80087c0:	4b94      	ldr	r3, [pc, #592]	; (8008a14 <SX1276OnDio0Irq+0x348>)
 80087c2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d129      	bne.n	800881c <SX1276OnDio0Irq+0x150>
                    if( SX1276.Settings.Fsk.FixLen == false )
 80087c8:	4b92      	ldr	r3, [pc, #584]	; (8008a14 <SX1276OnDio0Irq+0x348>)
 80087ca:	2222      	movs	r2, #34	; 0x22
 80087cc:	5c9b      	ldrb	r3, [r3, r2]
 80087ce:	2201      	movs	r2, #1
 80087d0:	4053      	eors	r3, r2
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d005      	beq.n	80087e4 <SX1276OnDio0Irq+0x118>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 80087d8:	4b92      	ldr	r3, [pc, #584]	; (8008a24 <SX1276OnDio0Irq+0x358>)
 80087da:	2101      	movs	r1, #1
 80087dc:	0018      	movs	r0, r3
 80087de:	f7ff fe4d 	bl	800847c <SX1276ReadFifo>
 80087e2:	e006      	b.n	80087f2 <SX1276OnDio0Irq+0x126>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 80087e4:	2032      	movs	r0, #50	; 0x32
 80087e6:	f7ff fd7d 	bl	80082e4 <SX1276Read>
 80087ea:	0003      	movs	r3, r0
 80087ec:	b29a      	uxth	r2, r3
 80087ee:	4b89      	ldr	r3, [pc, #548]	; (8008a14 <SX1276OnDio0Irq+0x348>)
 80087f0:	875a      	strh	r2, [r3, #58]	; 0x3a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80087f2:	4b88      	ldr	r3, [pc, #544]	; (8008a14 <SX1276OnDio0Irq+0x348>)
 80087f4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80087f6:	001a      	movs	r2, r3
 80087f8:	4b8b      	ldr	r3, [pc, #556]	; (8008a28 <SX1276OnDio0Irq+0x35c>)
 80087fa:	18d0      	adds	r0, r2, r3
 80087fc:	4b85      	ldr	r3, [pc, #532]	; (8008a14 <SX1276OnDio0Irq+0x348>)
 80087fe:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8008800:	b2da      	uxtb	r2, r3
 8008802:	4b84      	ldr	r3, [pc, #528]	; (8008a14 <SX1276OnDio0Irq+0x348>)
 8008804:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8008806:	b2db      	uxtb	r3, r3
 8008808:	1ad3      	subs	r3, r2, r3
 800880a:	b2db      	uxtb	r3, r3
 800880c:	0019      	movs	r1, r3
 800880e:	f7ff fe35 	bl	800847c <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8008812:	4b80      	ldr	r3, [pc, #512]	; (8008a14 <SX1276OnDio0Irq+0x348>)
 8008814:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8008816:	4b7f      	ldr	r3, [pc, #508]	; (8008a14 <SX1276OnDio0Irq+0x348>)
 8008818:	879a      	strh	r2, [r3, #60]	; 0x3c
 800881a:	e013      	b.n	8008844 <SX1276OnDio0Irq+0x178>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800881c:	4b7d      	ldr	r3, [pc, #500]	; (8008a14 <SX1276OnDio0Irq+0x348>)
 800881e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8008820:	001a      	movs	r2, r3
 8008822:	4b81      	ldr	r3, [pc, #516]	; (8008a28 <SX1276OnDio0Irq+0x35c>)
 8008824:	18d0      	adds	r0, r2, r3
 8008826:	4b7b      	ldr	r3, [pc, #492]	; (8008a14 <SX1276OnDio0Irq+0x348>)
 8008828:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800882a:	b2da      	uxtb	r2, r3
 800882c:	4b79      	ldr	r3, [pc, #484]	; (8008a14 <SX1276OnDio0Irq+0x348>)
 800882e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8008830:	b2db      	uxtb	r3, r3
 8008832:	1ad3      	subs	r3, r2, r3
 8008834:	b2db      	uxtb	r3, r3
 8008836:	0019      	movs	r1, r3
 8008838:	f7ff fe20 	bl	800847c <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800883c:	4b75      	ldr	r3, [pc, #468]	; (8008a14 <SX1276OnDio0Irq+0x348>)
 800883e:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8008840:	4b74      	ldr	r3, [pc, #464]	; (8008a14 <SX1276OnDio0Irq+0x348>)
 8008842:	879a      	strh	r2, [r3, #60]	; 0x3c
                TimerStop( &RxTimeoutTimer );
 8008844:	4b74      	ldr	r3, [pc, #464]	; (8008a18 <SX1276OnDio0Irq+0x34c>)
 8008846:	0018      	movs	r0, r3
 8008848:	f7fd fc66 	bl	8006118 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 800884c:	4b71      	ldr	r3, [pc, #452]	; (8008a14 <SX1276OnDio0Irq+0x348>)
 800884e:	2226      	movs	r2, #38	; 0x26
 8008850:	5c9b      	ldrb	r3, [r3, r2]
 8008852:	2201      	movs	r2, #1
 8008854:	4053      	eors	r3, r2
 8008856:	b2db      	uxtb	r3, r3
 8008858:	2b00      	cmp	r3, #0
 800885a:	d007      	beq.n	800886c <SX1276OnDio0Irq+0x1a0>
                    SX1276.Settings.State = RF_IDLE;
 800885c:	4b6d      	ldr	r3, [pc, #436]	; (8008a14 <SX1276OnDio0Irq+0x348>)
 800885e:	2200      	movs	r2, #0
 8008860:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutSyncWord );
 8008862:	4b6e      	ldr	r3, [pc, #440]	; (8008a1c <SX1276OnDio0Irq+0x350>)
 8008864:	0018      	movs	r0, r3
 8008866:	f7fd fc57 	bl	8006118 <TimerStop>
 800886a:	e00f      	b.n	800888c <SX1276OnDio0Irq+0x1c0>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800886c:	200d      	movs	r0, #13
 800886e:	f7ff fd39 	bl	80082e4 <SX1276Read>
 8008872:	0003      	movs	r3, r0
 8008874:	001a      	movs	r2, r3
 8008876:	2340      	movs	r3, #64	; 0x40
 8008878:	4313      	orrs	r3, r2
 800887a:	b2db      	uxtb	r3, r3
 800887c:	0019      	movs	r1, r3
 800887e:	200d      	movs	r0, #13
 8008880:	f7ff fd1c 	bl	80082bc <SX1276Write>
                    TimerStart( &RxTimeoutSyncWord );
 8008884:	4b65      	ldr	r3, [pc, #404]	; (8008a1c <SX1276OnDio0Irq+0x350>)
 8008886:	0018      	movs	r0, r3
 8008888:	f7fd fbf2 	bl	8006070 <TimerStart>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800888c:	4b64      	ldr	r3, [pc, #400]	; (8008a20 <SX1276OnDio0Irq+0x354>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d010      	beq.n	80088b6 <SX1276OnDio0Irq+0x1ea>
 8008894:	4b62      	ldr	r3, [pc, #392]	; (8008a20 <SX1276OnDio0Irq+0x354>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d00b      	beq.n	80088b6 <SX1276OnDio0Irq+0x1ea>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 800889e:	4b60      	ldr	r3, [pc, #384]	; (8008a20 <SX1276OnDio0Irq+0x354>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	689c      	ldr	r4, [r3, #8]
 80088a4:	4b5b      	ldr	r3, [pc, #364]	; (8008a14 <SX1276OnDio0Irq+0x348>)
 80088a6:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
 80088a8:	4b5a      	ldr	r3, [pc, #360]	; (8008a14 <SX1276OnDio0Irq+0x348>)
 80088aa:	2232      	movs	r2, #50	; 0x32
 80088ac:	569b      	ldrsb	r3, [r3, r2]
 80088ae:	b21a      	sxth	r2, r3
 80088b0:	485d      	ldr	r0, [pc, #372]	; (8008a28 <SX1276OnDio0Irq+0x35c>)
 80088b2:	2300      	movs	r3, #0
 80088b4:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80088b6:	4b57      	ldr	r3, [pc, #348]	; (8008a14 <SX1276OnDio0Irq+0x348>)
 80088b8:	2230      	movs	r2, #48	; 0x30
 80088ba:	2100      	movs	r1, #0
 80088bc:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 80088be:	4b55      	ldr	r3, [pc, #340]	; (8008a14 <SX1276OnDio0Irq+0x348>)
 80088c0:	2231      	movs	r2, #49	; 0x31
 80088c2:	2100      	movs	r1, #0
 80088c4:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80088c6:	4b53      	ldr	r3, [pc, #332]	; (8008a14 <SX1276OnDio0Irq+0x348>)
 80088c8:	2200      	movs	r2, #0
 80088ca:	879a      	strh	r2, [r3, #60]	; 0x3c
                SX1276.Settings.FskPacketHandler.Size = 0;
 80088cc:	4b51      	ldr	r3, [pc, #324]	; (8008a14 <SX1276OnDio0Irq+0x348>)
 80088ce:	2200      	movs	r2, #0
 80088d0:	875a      	strh	r2, [r3, #58]	; 0x3a
                break;
 80088d2:	e103      	b.n	8008adc <SX1276OnDio0Irq+0x410>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 80088d4:	2140      	movs	r1, #64	; 0x40
 80088d6:	2012      	movs	r0, #18
 80088d8:	f7ff fcf0 	bl	80082bc <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 80088dc:	2012      	movs	r0, #18
 80088de:	f7ff fd01 	bl	80082e4 <SX1276Read>
 80088e2:	0003      	movs	r3, r0
 80088e4:	001a      	movs	r2, r3
 80088e6:	230d      	movs	r3, #13
 80088e8:	18fb      	adds	r3, r7, r3
 80088ea:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 80088ec:	230d      	movs	r3, #13
 80088ee:	18fb      	adds	r3, r7, r3
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	001a      	movs	r2, r3
 80088f6:	2320      	movs	r3, #32
 80088f8:	4013      	ands	r3, r2
 80088fa:	2b20      	cmp	r3, #32
 80088fc:	d122      	bne.n	8008944 <SX1276OnDio0Irq+0x278>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 80088fe:	2120      	movs	r1, #32
 8008900:	2012      	movs	r0, #18
 8008902:	f7ff fcdb 	bl	80082bc <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 8008906:	4b43      	ldr	r3, [pc, #268]	; (8008a14 <SX1276OnDio0Irq+0x348>)
 8008908:	2256      	movs	r2, #86	; 0x56
 800890a:	5c9b      	ldrb	r3, [r3, r2]
 800890c:	2201      	movs	r2, #1
 800890e:	4053      	eors	r3, r2
 8008910:	b2db      	uxtb	r3, r3
 8008912:	2b00      	cmp	r3, #0
 8008914:	d002      	beq.n	800891c <SX1276OnDio0Irq+0x250>
                            SX1276.Settings.State = RF_IDLE;
 8008916:	4b3f      	ldr	r3, [pc, #252]	; (8008a14 <SX1276OnDio0Irq+0x348>)
 8008918:	2200      	movs	r2, #0
 800891a:	711a      	strb	r2, [r3, #4]
                        TimerStop( &RxTimeoutTimer );
 800891c:	4b3e      	ldr	r3, [pc, #248]	; (8008a18 <SX1276OnDio0Irq+0x34c>)
 800891e:	0018      	movs	r0, r3
 8008920:	f7fd fbfa 	bl	8006118 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8008924:	4b3e      	ldr	r3, [pc, #248]	; (8008a20 <SX1276OnDio0Irq+0x354>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d100      	bne.n	800892e <SX1276OnDio0Irq+0x262>
 800892c:	e0d3      	b.n	8008ad6 <SX1276OnDio0Irq+0x40a>
 800892e:	4b3c      	ldr	r3, [pc, #240]	; (8008a20 <SX1276OnDio0Irq+0x354>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	691b      	ldr	r3, [r3, #16]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d100      	bne.n	800893a <SX1276OnDio0Irq+0x26e>
 8008938:	e0cd      	b.n	8008ad6 <SX1276OnDio0Irq+0x40a>
                            RadioEvents->RxError( );
 800893a:	4b39      	ldr	r3, [pc, #228]	; (8008a20 <SX1276OnDio0Irq+0x354>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	691b      	ldr	r3, [r3, #16]
 8008940:	4798      	blx	r3
                        break;
 8008942:	e0c8      	b.n	8008ad6 <SX1276OnDio0Irq+0x40a>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 8008944:	2019      	movs	r0, #25
 8008946:	f7ff fccd 	bl	80082e4 <SX1276Read>
 800894a:	0003      	movs	r3, r0
 800894c:	b25b      	sxtb	r3, r3
 800894e:	3302      	adds	r3, #2
 8008950:	109b      	asrs	r3, r3, #2
 8008952:	b259      	sxtb	r1, r3
 8008954:	4b2f      	ldr	r3, [pc, #188]	; (8008a14 <SX1276OnDio0Irq+0x348>)
 8008956:	2260      	movs	r2, #96	; 0x60
 8008958:	5499      	strb	r1, [r3, r2]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 800895a:	201a      	movs	r0, #26
 800895c:	f7ff fcc2 	bl	80082e4 <SX1276Read>
 8008960:	0003      	movs	r3, r0
 8008962:	001a      	movs	r2, r3
 8008964:	230e      	movs	r3, #14
 8008966:	18fb      	adds	r3, r7, r3
 8008968:	801a      	strh	r2, [r3, #0]
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 800896a:	4b2a      	ldr	r3, [pc, #168]	; (8008a14 <SX1276OnDio0Irq+0x348>)
 800896c:	2260      	movs	r2, #96	; 0x60
 800896e:	569b      	ldrsb	r3, [r3, r2]
 8008970:	2b00      	cmp	r3, #0
 8008972:	da36      	bge.n	80089e2 <SX1276OnDio0Irq+0x316>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8008974:	4b27      	ldr	r3, [pc, #156]	; (8008a14 <SX1276OnDio0Irq+0x348>)
 8008976:	689b      	ldr	r3, [r3, #8]
 8008978:	4a2c      	ldr	r2, [pc, #176]	; (8008a2c <SX1276OnDio0Irq+0x360>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d918      	bls.n	80089b0 <SX1276OnDio0Irq+0x2e4>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 800897e:	230e      	movs	r3, #14
 8008980:	18fb      	adds	r3, r7, r3
 8008982:	2200      	movs	r2, #0
 8008984:	5e9b      	ldrsh	r3, [r3, r2]
 8008986:	111b      	asrs	r3, r3, #4
 8008988:	b21b      	sxth	r3, r3
 800898a:	b29a      	uxth	r2, r3
 800898c:	230e      	movs	r3, #14
 800898e:	18fb      	adds	r3, r7, r3
 8008990:	881b      	ldrh	r3, [r3, #0]
 8008992:	18d3      	adds	r3, r2, r3
 8008994:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 8008996:	4b1f      	ldr	r3, [pc, #124]	; (8008a14 <SX1276OnDio0Irq+0x348>)
 8008998:	2160      	movs	r1, #96	; 0x60
 800899a:	565b      	ldrsb	r3, [r3, r1]
 800899c:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 800899e:	18d3      	adds	r3, r2, r3
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	3b9d      	subs	r3, #157	; 0x9d
 80089a4:	b29b      	uxth	r3, r3
 80089a6:	b219      	sxth	r1, r3
 80089a8:	4b1a      	ldr	r3, [pc, #104]	; (8008a14 <SX1276OnDio0Irq+0x348>)
 80089aa:	2262      	movs	r2, #98	; 0x62
 80089ac:	5299      	strh	r1, [r3, r2]
 80089ae:	e051      	b.n	8008a54 <SX1276OnDio0Irq+0x388>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 80089b0:	230e      	movs	r3, #14
 80089b2:	18fb      	adds	r3, r7, r3
 80089b4:	2200      	movs	r2, #0
 80089b6:	5e9b      	ldrsh	r3, [r3, r2]
 80089b8:	111b      	asrs	r3, r3, #4
 80089ba:	b21b      	sxth	r3, r3
 80089bc:	b29a      	uxth	r2, r3
 80089be:	230e      	movs	r3, #14
 80089c0:	18fb      	adds	r3, r7, r3
 80089c2:	881b      	ldrh	r3, [r3, #0]
 80089c4:	18d3      	adds	r3, r2, r3
 80089c6:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 80089c8:	4b12      	ldr	r3, [pc, #72]	; (8008a14 <SX1276OnDio0Irq+0x348>)
 80089ca:	2160      	movs	r1, #96	; 0x60
 80089cc:	565b      	ldrsb	r3, [r3, r1]
 80089ce:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 80089d0:	18d3      	adds	r3, r2, r3
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	3ba4      	subs	r3, #164	; 0xa4
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	b219      	sxth	r1, r3
 80089da:	4b0e      	ldr	r3, [pc, #56]	; (8008a14 <SX1276OnDio0Irq+0x348>)
 80089dc:	2262      	movs	r2, #98	; 0x62
 80089de:	5299      	strh	r1, [r3, r2]
 80089e0:	e038      	b.n	8008a54 <SX1276OnDio0Irq+0x388>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 80089e2:	4b0c      	ldr	r3, [pc, #48]	; (8008a14 <SX1276OnDio0Irq+0x348>)
 80089e4:	689b      	ldr	r3, [r3, #8]
 80089e6:	4a11      	ldr	r2, [pc, #68]	; (8008a2c <SX1276OnDio0Irq+0x360>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d921      	bls.n	8008a30 <SX1276OnDio0Irq+0x364>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 80089ec:	230e      	movs	r3, #14
 80089ee:	18fb      	adds	r3, r7, r3
 80089f0:	2200      	movs	r2, #0
 80089f2:	5e9b      	ldrsh	r3, [r3, r2]
 80089f4:	111b      	asrs	r3, r3, #4
 80089f6:	b21b      	sxth	r3, r3
 80089f8:	b29a      	uxth	r2, r3
 80089fa:	230e      	movs	r3, #14
 80089fc:	18fb      	adds	r3, r7, r3
 80089fe:	881b      	ldrh	r3, [r3, #0]
 8008a00:	18d3      	adds	r3, r2, r3
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	3b9d      	subs	r3, #157	; 0x9d
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	b219      	sxth	r1, r3
 8008a0a:	4b02      	ldr	r3, [pc, #8]	; (8008a14 <SX1276OnDio0Irq+0x348>)
 8008a0c:	2262      	movs	r2, #98	; 0x62
 8008a0e:	5299      	strh	r1, [r3, r2]
 8008a10:	e020      	b.n	8008a54 <SX1276OnDio0Irq+0x388>
 8008a12:	46c0      	nop			; (mov r8, r8)
 8008a14:	20000a34 	.word	0x20000a34
 8008a18:	20000a9c 	.word	0x20000a9c
 8008a1c:	20000a1c 	.word	0x20000a1c
 8008a20:	20000784 	.word	0x20000784
 8008a24:	20000a6e 	.word	0x20000a6e
 8008a28:	20000788 	.word	0x20000788
 8008a2c:	1f4add40 	.word	0x1f4add40
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 8008a30:	230e      	movs	r3, #14
 8008a32:	18fb      	adds	r3, r7, r3
 8008a34:	2200      	movs	r2, #0
 8008a36:	5e9b      	ldrsh	r3, [r3, r2]
 8008a38:	111b      	asrs	r3, r3, #4
 8008a3a:	b21b      	sxth	r3, r3
 8008a3c:	b29a      	uxth	r2, r3
 8008a3e:	230e      	movs	r3, #14
 8008a40:	18fb      	adds	r3, r7, r3
 8008a42:	881b      	ldrh	r3, [r3, #0]
 8008a44:	18d3      	adds	r3, r2, r3
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	3ba4      	subs	r3, #164	; 0xa4
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	b219      	sxth	r1, r3
 8008a4e:	4b35      	ldr	r3, [pc, #212]	; (8008b24 <SX1276OnDio0Irq+0x458>)
 8008a50:	2262      	movs	r2, #98	; 0x62
 8008a52:	5299      	strh	r1, [r3, r2]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 8008a54:	2013      	movs	r0, #19
 8008a56:	f7ff fc45 	bl	80082e4 <SX1276Read>
 8008a5a:	0003      	movs	r3, r0
 8008a5c:	0019      	movs	r1, r3
 8008a5e:	4b31      	ldr	r3, [pc, #196]	; (8008b24 <SX1276OnDio0Irq+0x458>)
 8008a60:	2264      	movs	r2, #100	; 0x64
 8008a62:	5499      	strb	r1, [r3, r2]
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 8008a64:	2010      	movs	r0, #16
 8008a66:	f7ff fc3d 	bl	80082e4 <SX1276Read>
 8008a6a:	0003      	movs	r3, r0
 8008a6c:	0019      	movs	r1, r3
 8008a6e:	200d      	movs	r0, #13
 8008a70:	f7ff fc24 	bl	80082bc <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 8008a74:	4b2b      	ldr	r3, [pc, #172]	; (8008b24 <SX1276OnDio0Irq+0x458>)
 8008a76:	2264      	movs	r2, #100	; 0x64
 8008a78:	5c9a      	ldrb	r2, [r3, r2]
 8008a7a:	4b2b      	ldr	r3, [pc, #172]	; (8008b28 <SX1276OnDio0Irq+0x45c>)
 8008a7c:	0011      	movs	r1, r2
 8008a7e:	0018      	movs	r0, r3
 8008a80:	f7ff fcfc 	bl	800847c <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 8008a84:	4b27      	ldr	r3, [pc, #156]	; (8008b24 <SX1276OnDio0Irq+0x458>)
 8008a86:	2256      	movs	r2, #86	; 0x56
 8008a88:	5c9b      	ldrb	r3, [r3, r2]
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	4053      	eors	r3, r2
 8008a8e:	b2db      	uxtb	r3, r3
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d002      	beq.n	8008a9a <SX1276OnDio0Irq+0x3ce>
                        SX1276.Settings.State = RF_IDLE;
 8008a94:	4b23      	ldr	r3, [pc, #140]	; (8008b24 <SX1276OnDio0Irq+0x458>)
 8008a96:	2200      	movs	r2, #0
 8008a98:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutTimer );
 8008a9a:	4b24      	ldr	r3, [pc, #144]	; (8008b2c <SX1276OnDio0Irq+0x460>)
 8008a9c:	0018      	movs	r0, r3
 8008a9e:	f7fd fb3b 	bl	8006118 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8008aa2:	4b23      	ldr	r3, [pc, #140]	; (8008b30 <SX1276OnDio0Irq+0x464>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d017      	beq.n	8008ada <SX1276OnDio0Irq+0x40e>
 8008aaa:	4b21      	ldr	r3, [pc, #132]	; (8008b30 <SX1276OnDio0Irq+0x464>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d012      	beq.n	8008ada <SX1276OnDio0Irq+0x40e>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 8008ab4:	4b1e      	ldr	r3, [pc, #120]	; (8008b30 <SX1276OnDio0Irq+0x464>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	689c      	ldr	r4, [r3, #8]
 8008aba:	4b1a      	ldr	r3, [pc, #104]	; (8008b24 <SX1276OnDio0Irq+0x458>)
 8008abc:	2264      	movs	r2, #100	; 0x64
 8008abe:	5c9b      	ldrb	r3, [r3, r2]
 8008ac0:	b299      	uxth	r1, r3
 8008ac2:	4b18      	ldr	r3, [pc, #96]	; (8008b24 <SX1276OnDio0Irq+0x458>)
 8008ac4:	2262      	movs	r2, #98	; 0x62
 8008ac6:	5e9d      	ldrsh	r5, [r3, r2]
 8008ac8:	4b16      	ldr	r3, [pc, #88]	; (8008b24 <SX1276OnDio0Irq+0x458>)
 8008aca:	2260      	movs	r2, #96	; 0x60
 8008acc:	569b      	ldrsb	r3, [r3, r2]
 8008ace:	4816      	ldr	r0, [pc, #88]	; (8008b28 <SX1276OnDio0Irq+0x45c>)
 8008ad0:	002a      	movs	r2, r5
 8008ad2:	47a0      	blx	r4
                break;
 8008ad4:	e001      	b.n	8008ada <SX1276OnDio0Irq+0x40e>
                        break;
 8008ad6:	46c0      	nop			; (mov r8, r8)
 8008ad8:	e01f      	b.n	8008b1a <SX1276OnDio0Irq+0x44e>
                break;
 8008ada:	46c0      	nop			; (mov r8, r8)
            break;
 8008adc:	e01d      	b.n	8008b1a <SX1276OnDio0Irq+0x44e>
            TimerStop( &TxTimeoutTimer );
 8008ade:	4b15      	ldr	r3, [pc, #84]	; (8008b34 <SX1276OnDio0Irq+0x468>)
 8008ae0:	0018      	movs	r0, r3
 8008ae2:	f7fd fb19 	bl	8006118 <TimerStop>
            switch( SX1276.Settings.Modem )
 8008ae6:	4b0f      	ldr	r3, [pc, #60]	; (8008b24 <SX1276OnDio0Irq+0x458>)
 8008ae8:	795b      	ldrb	r3, [r3, #5]
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d103      	bne.n	8008af6 <SX1276OnDio0Irq+0x42a>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 8008aee:	2108      	movs	r1, #8
 8008af0:	2012      	movs	r0, #18
 8008af2:	f7ff fbe3 	bl	80082bc <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8008af6:	4b0b      	ldr	r3, [pc, #44]	; (8008b24 <SX1276OnDio0Irq+0x458>)
 8008af8:	2200      	movs	r2, #0
 8008afa:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8008afc:	4b0c      	ldr	r3, [pc, #48]	; (8008b30 <SX1276OnDio0Irq+0x464>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d008      	beq.n	8008b16 <SX1276OnDio0Irq+0x44a>
 8008b04:	4b0a      	ldr	r3, [pc, #40]	; (8008b30 <SX1276OnDio0Irq+0x464>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d003      	beq.n	8008b16 <SX1276OnDio0Irq+0x44a>
                    RadioEvents->TxDone( );
 8008b0e:	4b08      	ldr	r3, [pc, #32]	; (8008b30 <SX1276OnDio0Irq+0x464>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4798      	blx	r3
                break;
 8008b16:	46c0      	nop			; (mov r8, r8)
            break;
 8008b18:	46c0      	nop			; (mov r8, r8)
    }
}
 8008b1a:	46c0      	nop			; (mov r8, r8)
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	b004      	add	sp, #16
 8008b20:	bdb0      	pop	{r4, r5, r7, pc}
 8008b22:	46c0      	nop			; (mov r8, r8)
 8008b24:	20000a34 	.word	0x20000a34
 8008b28:	20000788 	.word	0x20000788
 8008b2c:	20000a9c 	.word	0x20000a9c
 8008b30:	20000784 	.word	0x20000784
 8008b34:	20000a04 	.word	0x20000a04

08008b38 <SX1276OnDio1Irq>:

void SX1276OnDio1Irq( void* context )
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b082      	sub	sp, #8
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.State )
 8008b40:	4b61      	ldr	r3, [pc, #388]	; (8008cc8 <SX1276OnDio1Irq+0x190>)
 8008b42:	791b      	ldrb	r3, [r3, #4]
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	d003      	beq.n	8008b50 <SX1276OnDio1Irq+0x18>
 8008b48:	2b02      	cmp	r3, #2
 8008b4a:	d100      	bne.n	8008b4e <SX1276OnDio1Irq+0x16>
 8008b4c:	e078      	b.n	8008c40 <SX1276OnDio1Irq+0x108>
            default:
                break;
            }
            break;
        default:
            break;
 8008b4e:	e0b6      	b.n	8008cbe <SX1276OnDio1Irq+0x186>
            switch( SX1276.Settings.Modem )
 8008b50:	4b5d      	ldr	r3, [pc, #372]	; (8008cc8 <SX1276OnDio1Irq+0x190>)
 8008b52:	795b      	ldrb	r3, [r3, #5]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d002      	beq.n	8008b5e <SX1276OnDio1Irq+0x26>
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d057      	beq.n	8008c0c <SX1276OnDio1Irq+0xd4>
                break;
 8008b5c:	e06f      	b.n	8008c3e <SX1276OnDio1Irq+0x106>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8008b5e:	4b5a      	ldr	r3, [pc, #360]	; (8008cc8 <SX1276OnDio1Irq+0x190>)
 8008b60:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d118      	bne.n	8008b98 <SX1276OnDio1Irq+0x60>
 8008b66:	4b58      	ldr	r3, [pc, #352]	; (8008cc8 <SX1276OnDio1Irq+0x190>)
 8008b68:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d114      	bne.n	8008b98 <SX1276OnDio1Irq+0x60>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8008b6e:	4b56      	ldr	r3, [pc, #344]	; (8008cc8 <SX1276OnDio1Irq+0x190>)
 8008b70:	2222      	movs	r2, #34	; 0x22
 8008b72:	5c9b      	ldrb	r3, [r3, r2]
 8008b74:	2201      	movs	r2, #1
 8008b76:	4053      	eors	r3, r2
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d005      	beq.n	8008b8a <SX1276OnDio1Irq+0x52>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8008b7e:	4b53      	ldr	r3, [pc, #332]	; (8008ccc <SX1276OnDio1Irq+0x194>)
 8008b80:	2101      	movs	r1, #1
 8008b82:	0018      	movs	r0, r3
 8008b84:	f7ff fc7a 	bl	800847c <SX1276ReadFifo>
 8008b88:	e006      	b.n	8008b98 <SX1276OnDio1Irq+0x60>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8008b8a:	2032      	movs	r0, #50	; 0x32
 8008b8c:	f7ff fbaa 	bl	80082e4 <SX1276Read>
 8008b90:	0003      	movs	r3, r0
 8008b92:	b29a      	uxth	r2, r3
 8008b94:	4b4c      	ldr	r3, [pc, #304]	; (8008cc8 <SX1276OnDio1Irq+0x190>)
 8008b96:	875a      	strh	r2, [r3, #58]	; 0x3a
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 8008b98:	4b4b      	ldr	r3, [pc, #300]	; (8008cc8 <SX1276OnDio1Irq+0x190>)
 8008b9a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8008b9c:	001a      	movs	r2, r3
 8008b9e:	4b4a      	ldr	r3, [pc, #296]	; (8008cc8 <SX1276OnDio1Irq+0x190>)
 8008ba0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8008ba2:	1ad3      	subs	r3, r2, r3
 8008ba4:	4a48      	ldr	r2, [pc, #288]	; (8008cc8 <SX1276OnDio1Irq+0x190>)
 8008ba6:	213e      	movs	r1, #62	; 0x3e
 8008ba8:	5c52      	ldrb	r2, [r2, r1]
 8008baa:	4293      	cmp	r3, r2
 8008bac:	db19      	blt.n	8008be2 <SX1276OnDio1Irq+0xaa>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 8008bae:	4b46      	ldr	r3, [pc, #280]	; (8008cc8 <SX1276OnDio1Irq+0x190>)
 8008bb0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8008bb2:	001a      	movs	r2, r3
 8008bb4:	4b46      	ldr	r3, [pc, #280]	; (8008cd0 <SX1276OnDio1Irq+0x198>)
 8008bb6:	18d0      	adds	r0, r2, r3
 8008bb8:	4b43      	ldr	r3, [pc, #268]	; (8008cc8 <SX1276OnDio1Irq+0x190>)
 8008bba:	223e      	movs	r2, #62	; 0x3e
 8008bbc:	5c9b      	ldrb	r3, [r3, r2]
 8008bbe:	3b01      	subs	r3, #1
 8008bc0:	b2db      	uxtb	r3, r3
 8008bc2:	0019      	movs	r1, r3
 8008bc4:	f7ff fc5a 	bl	800847c <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 8008bc8:	4b3f      	ldr	r3, [pc, #252]	; (8008cc8 <SX1276OnDio1Irq+0x190>)
 8008bca:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8008bcc:	4b3e      	ldr	r3, [pc, #248]	; (8008cc8 <SX1276OnDio1Irq+0x190>)
 8008bce:	213e      	movs	r1, #62	; 0x3e
 8008bd0:	5c5b      	ldrb	r3, [r3, r1]
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	18d3      	adds	r3, r2, r3
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	3b01      	subs	r3, #1
 8008bda:	b29a      	uxth	r2, r3
 8008bdc:	4b3a      	ldr	r3, [pc, #232]	; (8008cc8 <SX1276OnDio1Irq+0x190>)
 8008bde:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 8008be0:	e02d      	b.n	8008c3e <SX1276OnDio1Irq+0x106>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8008be2:	4b39      	ldr	r3, [pc, #228]	; (8008cc8 <SX1276OnDio1Irq+0x190>)
 8008be4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8008be6:	001a      	movs	r2, r3
 8008be8:	4b39      	ldr	r3, [pc, #228]	; (8008cd0 <SX1276OnDio1Irq+0x198>)
 8008bea:	18d0      	adds	r0, r2, r3
 8008bec:	4b36      	ldr	r3, [pc, #216]	; (8008cc8 <SX1276OnDio1Irq+0x190>)
 8008bee:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8008bf0:	b2da      	uxtb	r2, r3
 8008bf2:	4b35      	ldr	r3, [pc, #212]	; (8008cc8 <SX1276OnDio1Irq+0x190>)
 8008bf4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8008bf6:	b2db      	uxtb	r3, r3
 8008bf8:	1ad3      	subs	r3, r2, r3
 8008bfa:	b2db      	uxtb	r3, r3
 8008bfc:	0019      	movs	r1, r3
 8008bfe:	f7ff fc3d 	bl	800847c <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8008c02:	4b31      	ldr	r3, [pc, #196]	; (8008cc8 <SX1276OnDio1Irq+0x190>)
 8008c04:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8008c06:	4b30      	ldr	r3, [pc, #192]	; (8008cc8 <SX1276OnDio1Irq+0x190>)
 8008c08:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 8008c0a:	e018      	b.n	8008c3e <SX1276OnDio1Irq+0x106>
                TimerStop( &RxTimeoutTimer );
 8008c0c:	4b31      	ldr	r3, [pc, #196]	; (8008cd4 <SX1276OnDio1Irq+0x19c>)
 8008c0e:	0018      	movs	r0, r3
 8008c10:	f7fd fa82 	bl	8006118 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 8008c14:	2180      	movs	r1, #128	; 0x80
 8008c16:	2012      	movs	r0, #18
 8008c18:	f7ff fb50 	bl	80082bc <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8008c1c:	4b2a      	ldr	r3, [pc, #168]	; (8008cc8 <SX1276OnDio1Irq+0x190>)
 8008c1e:	2200      	movs	r2, #0
 8008c20:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8008c22:	4b2d      	ldr	r3, [pc, #180]	; (8008cd8 <SX1276OnDio1Irq+0x1a0>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d008      	beq.n	8008c3c <SX1276OnDio1Irq+0x104>
 8008c2a:	4b2b      	ldr	r3, [pc, #172]	; (8008cd8 <SX1276OnDio1Irq+0x1a0>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	68db      	ldr	r3, [r3, #12]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d003      	beq.n	8008c3c <SX1276OnDio1Irq+0x104>
                    RadioEvents->RxTimeout( );
 8008c34:	4b28      	ldr	r3, [pc, #160]	; (8008cd8 <SX1276OnDio1Irq+0x1a0>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	68db      	ldr	r3, [r3, #12]
 8008c3a:	4798      	blx	r3
                break;
 8008c3c:	46c0      	nop			; (mov r8, r8)
            break;
 8008c3e:	e03e      	b.n	8008cbe <SX1276OnDio1Irq+0x186>
            switch( SX1276.Settings.Modem )
 8008c40:	4b21      	ldr	r3, [pc, #132]	; (8008cc8 <SX1276OnDio1Irq+0x190>)
 8008c42:	795b      	ldrb	r3, [r3, #5]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d002      	beq.n	8008c4e <SX1276OnDio1Irq+0x116>
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d036      	beq.n	8008cba <SX1276OnDio1Irq+0x182>
                break;
 8008c4c:	e036      	b.n	8008cbc <SX1276OnDio1Irq+0x184>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 8008c4e:	4b1e      	ldr	r3, [pc, #120]	; (8008cc8 <SX1276OnDio1Irq+0x190>)
 8008c50:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8008c52:	001a      	movs	r2, r3
 8008c54:	4b1c      	ldr	r3, [pc, #112]	; (8008cc8 <SX1276OnDio1Irq+0x190>)
 8008c56:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8008c58:	1ad3      	subs	r3, r2, r3
 8008c5a:	4a1b      	ldr	r2, [pc, #108]	; (8008cc8 <SX1276OnDio1Irq+0x190>)
 8008c5c:	213f      	movs	r1, #63	; 0x3f
 8008c5e:	5c52      	ldrb	r2, [r2, r1]
 8008c60:	4293      	cmp	r3, r2
 8008c62:	dd15      	ble.n	8008c90 <SX1276OnDio1Irq+0x158>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 8008c64:	4b18      	ldr	r3, [pc, #96]	; (8008cc8 <SX1276OnDio1Irq+0x190>)
 8008c66:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8008c68:	001a      	movs	r2, r3
 8008c6a:	4b19      	ldr	r3, [pc, #100]	; (8008cd0 <SX1276OnDio1Irq+0x198>)
 8008c6c:	18d0      	adds	r0, r2, r3
 8008c6e:	4b16      	ldr	r3, [pc, #88]	; (8008cc8 <SX1276OnDio1Irq+0x190>)
 8008c70:	223f      	movs	r2, #63	; 0x3f
 8008c72:	5c9b      	ldrb	r3, [r3, r2]
 8008c74:	0019      	movs	r1, r3
 8008c76:	f7ff fbef 	bl	8008458 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8008c7a:	4b13      	ldr	r3, [pc, #76]	; (8008cc8 <SX1276OnDio1Irq+0x190>)
 8008c7c:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8008c7e:	4b12      	ldr	r3, [pc, #72]	; (8008cc8 <SX1276OnDio1Irq+0x190>)
 8008c80:	213f      	movs	r1, #63	; 0x3f
 8008c82:	5c5b      	ldrb	r3, [r3, r1]
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	18d3      	adds	r3, r2, r3
 8008c88:	b29a      	uxth	r2, r3
 8008c8a:	4b0f      	ldr	r3, [pc, #60]	; (8008cc8 <SX1276OnDio1Irq+0x190>)
 8008c8c:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 8008c8e:	e015      	b.n	8008cbc <SX1276OnDio1Irq+0x184>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8008c90:	4b0d      	ldr	r3, [pc, #52]	; (8008cc8 <SX1276OnDio1Irq+0x190>)
 8008c92:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8008c94:	001a      	movs	r2, r3
 8008c96:	4b0e      	ldr	r3, [pc, #56]	; (8008cd0 <SX1276OnDio1Irq+0x198>)
 8008c98:	18d0      	adds	r0, r2, r3
 8008c9a:	4b0b      	ldr	r3, [pc, #44]	; (8008cc8 <SX1276OnDio1Irq+0x190>)
 8008c9c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8008c9e:	b2da      	uxtb	r2, r3
 8008ca0:	4b09      	ldr	r3, [pc, #36]	; (8008cc8 <SX1276OnDio1Irq+0x190>)
 8008ca2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	1ad3      	subs	r3, r2, r3
 8008ca8:	b2db      	uxtb	r3, r3
 8008caa:	0019      	movs	r1, r3
 8008cac:	f7ff fbd4 	bl	8008458 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 8008cb0:	4b05      	ldr	r3, [pc, #20]	; (8008cc8 <SX1276OnDio1Irq+0x190>)
 8008cb2:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8008cb4:	4b04      	ldr	r3, [pc, #16]	; (8008cc8 <SX1276OnDio1Irq+0x190>)
 8008cb6:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 8008cb8:	e000      	b.n	8008cbc <SX1276OnDio1Irq+0x184>
                break;
 8008cba:	46c0      	nop			; (mov r8, r8)
            break;
 8008cbc:	46c0      	nop			; (mov r8, r8)
    }
}
 8008cbe:	46c0      	nop			; (mov r8, r8)
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	b002      	add	sp, #8
 8008cc4:	bd80      	pop	{r7, pc}
 8008cc6:	46c0      	nop			; (mov r8, r8)
 8008cc8:	20000a34 	.word	0x20000a34
 8008ccc:	20000a6e 	.word	0x20000a6e
 8008cd0:	20000788 	.word	0x20000788
 8008cd4:	20000a9c 	.word	0x20000a9c
 8008cd8:	20000784 	.word	0x20000784

08008cdc <SX1276OnDio2Irq>:

void SX1276OnDio2Irq( void* context )
{
 8008cdc:	b590      	push	{r4, r7, lr}
 8008cde:	b087      	sub	sp, #28
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
    uint32_t afcChannel = 0;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	617b      	str	r3, [r7, #20]

    switch( SX1276.Settings.State )
 8008ce8:	4b57      	ldr	r3, [pc, #348]	; (8008e48 <SX1276OnDio2Irq+0x16c>)
 8008cea:	791b      	ldrb	r3, [r3, #4]
 8008cec:	2b01      	cmp	r3, #1
 8008cee:	d003      	beq.n	8008cf8 <SX1276OnDio2Irq+0x1c>
 8008cf0:	2b02      	cmp	r3, #2
 8008cf2:	d100      	bne.n	8008cf6 <SX1276OnDio2Irq+0x1a>
 8008cf4:	e079      	b.n	8008dea <SX1276OnDio2Irq+0x10e>
            default:
                break;
            }
            break;
        default:
            break;
 8008cf6:	e0a3      	b.n	8008e40 <SX1276OnDio2Irq+0x164>
            switch( SX1276.Settings.Modem )
 8008cf8:	4b53      	ldr	r3, [pc, #332]	; (8008e48 <SX1276OnDio2Irq+0x16c>)
 8008cfa:	795b      	ldrb	r3, [r3, #5]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d002      	beq.n	8008d06 <SX1276OnDio2Irq+0x2a>
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d04e      	beq.n	8008da2 <SX1276OnDio2Irq+0xc6>
                break;
 8008d04:	e070      	b.n	8008de8 <SX1276OnDio2Irq+0x10c>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8008d06:	4b50      	ldr	r3, [pc, #320]	; (8008e48 <SX1276OnDio2Irq+0x16c>)
 8008d08:	2230      	movs	r2, #48	; 0x30
 8008d0a:	2101      	movs	r1, #1
 8008d0c:	5499      	strb	r1, [r3, r2]
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == false ) )
 8008d0e:	4b4e      	ldr	r3, [pc, #312]	; (8008e48 <SX1276OnDio2Irq+0x16c>)
 8008d10:	2230      	movs	r2, #48	; 0x30
 8008d12:	5c9b      	ldrb	r3, [r3, r2]
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d164      	bne.n	8008de2 <SX1276OnDio2Irq+0x106>
 8008d18:	4b4b      	ldr	r3, [pc, #300]	; (8008e48 <SX1276OnDio2Irq+0x16c>)
 8008d1a:	2231      	movs	r2, #49	; 0x31
 8008d1c:	5c9b      	ldrb	r3, [r3, r2]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d15f      	bne.n	8008de2 <SX1276OnDio2Irq+0x106>
                    TimerStop( &RxTimeoutSyncWord );
 8008d22:	4b4a      	ldr	r3, [pc, #296]	; (8008e4c <SX1276OnDio2Irq+0x170>)
 8008d24:	0018      	movs	r0, r3
 8008d26:	f7fd f9f7 	bl	8006118 <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 8008d2a:	4b47      	ldr	r3, [pc, #284]	; (8008e48 <SX1276OnDio2Irq+0x16c>)
 8008d2c:	2231      	movs	r2, #49	; 0x31
 8008d2e:	2101      	movs	r1, #1
 8008d30:	5499      	strb	r1, [r3, r2]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8008d32:	2011      	movs	r0, #17
 8008d34:	f7ff fad6 	bl	80082e4 <SX1276Read>
 8008d38:	0003      	movs	r3, r0
 8008d3a:	085b      	lsrs	r3, r3, #1
 8008d3c:	b2db      	uxtb	r3, r3
 8008d3e:	425b      	negs	r3, r3
 8008d40:	b2db      	uxtb	r3, r3
 8008d42:	b259      	sxtb	r1, r3
 8008d44:	4b40      	ldr	r3, [pc, #256]	; (8008e48 <SX1276OnDio2Irq+0x16c>)
 8008d46:	2232      	movs	r2, #50	; 0x32
 8008d48:	5499      	strb	r1, [r3, r2]
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8008d4a:	201b      	movs	r0, #27
 8008d4c:	f7ff faca 	bl	80082e4 <SX1276Read>
 8008d50:	0003      	movs	r3, r0
 8008d52:	021c      	lsls	r4, r3, #8
                                     ( uint16_t )SX1276Read( REG_AFCLSB ) );
 8008d54:	201c      	movs	r0, #28
 8008d56:	f7ff fac5 	bl	80082e4 <SX1276Read>
 8008d5a:	0003      	movs	r3, r0
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8008d5c:	4323      	orrs	r3, r4
 8008d5e:	617b      	str	r3, [r7, #20]
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	0a1b      	lsrs	r3, r3, #8
 8008d64:	613b      	str	r3, [r7, #16]
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	021b      	lsls	r3, r3, #8
 8008d6a:	697a      	ldr	r2, [r7, #20]
 8008d6c:	1ad3      	subs	r3, r2, r3
 8008d6e:	60fb      	str	r3, [r7, #12]
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	4a37      	ldr	r2, [pc, #220]	; (8008e50 <SX1276OnDio2Irq+0x174>)
 8008d74:	435a      	muls	r2, r3
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	4935      	ldr	r1, [pc, #212]	; (8008e50 <SX1276OnDio2Irq+0x174>)
 8008d7a:	434b      	muls	r3, r1
 8008d7c:	3380      	adds	r3, #128	; 0x80
 8008d7e:	0a1b      	lsrs	r3, r3, #8
 8008d80:	18d3      	adds	r3, r2, r3
 8008d82:	001a      	movs	r2, r3
 8008d84:	4b30      	ldr	r3, [pc, #192]	; (8008e48 <SX1276OnDio2Irq+0x16c>)
 8008d86:	635a      	str	r2, [r3, #52]	; 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 8008d88:	200c      	movs	r0, #12
 8008d8a:	f7ff faab 	bl	80082e4 <SX1276Read>
 8008d8e:	0003      	movs	r3, r0
 8008d90:	095b      	lsrs	r3, r3, #5
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	2207      	movs	r2, #7
 8008d96:	4013      	ands	r3, r2
 8008d98:	b2d9      	uxtb	r1, r3
 8008d9a:	4b2b      	ldr	r3, [pc, #172]	; (8008e48 <SX1276OnDio2Irq+0x16c>)
 8008d9c:	2238      	movs	r2, #56	; 0x38
 8008d9e:	5499      	strb	r1, [r3, r2]
                break;
 8008da0:	e01f      	b.n	8008de2 <SX1276OnDio2Irq+0x106>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8008da2:	4b29      	ldr	r3, [pc, #164]	; (8008e48 <SX1276OnDio2Irq+0x16c>)
 8008da4:	2253      	movs	r2, #83	; 0x53
 8008da6:	5c9b      	ldrb	r3, [r3, r2]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d01c      	beq.n	8008de6 <SX1276OnDio2Irq+0x10a>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8008dac:	2102      	movs	r1, #2
 8008dae:	2012      	movs	r0, #18
 8008db0:	f7ff fa84 	bl	80082bc <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8008db4:	4b27      	ldr	r3, [pc, #156]	; (8008e54 <SX1276OnDio2Irq+0x178>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d014      	beq.n	8008de6 <SX1276OnDio2Irq+0x10a>
 8008dbc:	4b25      	ldr	r3, [pc, #148]	; (8008e54 <SX1276OnDio2Irq+0x178>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	695b      	ldr	r3, [r3, #20]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d00f      	beq.n	8008de6 <SX1276OnDio2Irq+0x10a>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8008dc6:	4b23      	ldr	r3, [pc, #140]	; (8008e54 <SX1276OnDio2Irq+0x178>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	695c      	ldr	r4, [r3, #20]
 8008dcc:	201c      	movs	r0, #28
 8008dce:	f7ff fa89 	bl	80082e4 <SX1276Read>
 8008dd2:	0003      	movs	r3, r0
 8008dd4:	001a      	movs	r2, r3
 8008dd6:	233f      	movs	r3, #63	; 0x3f
 8008dd8:	4013      	ands	r3, r2
 8008dda:	b2db      	uxtb	r3, r3
 8008ddc:	0018      	movs	r0, r3
 8008dde:	47a0      	blx	r4
                break;
 8008de0:	e001      	b.n	8008de6 <SX1276OnDio2Irq+0x10a>
                break;
 8008de2:	46c0      	nop			; (mov r8, r8)
 8008de4:	e02c      	b.n	8008e40 <SX1276OnDio2Irq+0x164>
                break;
 8008de6:	46c0      	nop			; (mov r8, r8)
            break;
 8008de8:	e02a      	b.n	8008e40 <SX1276OnDio2Irq+0x164>
            switch( SX1276.Settings.Modem )
 8008dea:	4b17      	ldr	r3, [pc, #92]	; (8008e48 <SX1276OnDio2Irq+0x16c>)
 8008dec:	795b      	ldrb	r3, [r3, #5]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d022      	beq.n	8008e38 <SX1276OnDio2Irq+0x15c>
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d000      	beq.n	8008df8 <SX1276OnDio2Irq+0x11c>
                break;
 8008df6:	e022      	b.n	8008e3e <SX1276OnDio2Irq+0x162>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8008df8:	4b13      	ldr	r3, [pc, #76]	; (8008e48 <SX1276OnDio2Irq+0x16c>)
 8008dfa:	2253      	movs	r2, #83	; 0x53
 8008dfc:	5c9b      	ldrb	r3, [r3, r2]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d01c      	beq.n	8008e3c <SX1276OnDio2Irq+0x160>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8008e02:	2102      	movs	r1, #2
 8008e04:	2012      	movs	r0, #18
 8008e06:	f7ff fa59 	bl	80082bc <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8008e0a:	4b12      	ldr	r3, [pc, #72]	; (8008e54 <SX1276OnDio2Irq+0x178>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d014      	beq.n	8008e3c <SX1276OnDio2Irq+0x160>
 8008e12:	4b10      	ldr	r3, [pc, #64]	; (8008e54 <SX1276OnDio2Irq+0x178>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	695b      	ldr	r3, [r3, #20]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d00f      	beq.n	8008e3c <SX1276OnDio2Irq+0x160>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8008e1c:	4b0d      	ldr	r3, [pc, #52]	; (8008e54 <SX1276OnDio2Irq+0x178>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	695c      	ldr	r4, [r3, #20]
 8008e22:	201c      	movs	r0, #28
 8008e24:	f7ff fa5e 	bl	80082e4 <SX1276Read>
 8008e28:	0003      	movs	r3, r0
 8008e2a:	001a      	movs	r2, r3
 8008e2c:	233f      	movs	r3, #63	; 0x3f
 8008e2e:	4013      	ands	r3, r2
 8008e30:	b2db      	uxtb	r3, r3
 8008e32:	0018      	movs	r0, r3
 8008e34:	47a0      	blx	r4
                break;
 8008e36:	e001      	b.n	8008e3c <SX1276OnDio2Irq+0x160>
                break;
 8008e38:	46c0      	nop			; (mov r8, r8)
 8008e3a:	e000      	b.n	8008e3e <SX1276OnDio2Irq+0x162>
                break;
 8008e3c:	46c0      	nop			; (mov r8, r8)
            break;
 8008e3e:	46c0      	nop			; (mov r8, r8)
    }
}
 8008e40:	46c0      	nop			; (mov r8, r8)
 8008e42:	46bd      	mov	sp, r7
 8008e44:	b007      	add	sp, #28
 8008e46:	bd90      	pop	{r4, r7, pc}
 8008e48:	20000a34 	.word	0x20000a34
 8008e4c:	20000a1c 	.word	0x20000a1c
 8008e50:	00003d09 	.word	0x00003d09
 8008e54:	20000784 	.word	0x20000784

08008e58 <SX1276OnDio3Irq>:

void SX1276OnDio3Irq( void* context )
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b082      	sub	sp, #8
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.Modem )
 8008e60:	4b1e      	ldr	r3, [pc, #120]	; (8008edc <SX1276OnDio3Irq+0x84>)
 8008e62:	795b      	ldrb	r3, [r3, #5]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d031      	beq.n	8008ecc <SX1276OnDio3Irq+0x74>
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d000      	beq.n	8008e6e <SX1276OnDio3Irq+0x16>
                RadioEvents->CadDone( false );
            }
        }
        break;
    default:
        break;
 8008e6c:	e031      	b.n	8008ed2 <SX1276OnDio3Irq+0x7a>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 8008e6e:	2012      	movs	r0, #18
 8008e70:	f7ff fa38 	bl	80082e4 <SX1276Read>
 8008e74:	0003      	movs	r3, r0
 8008e76:	001a      	movs	r2, r3
 8008e78:	2301      	movs	r3, #1
 8008e7a:	4013      	ands	r3, r2
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d112      	bne.n	8008ea6 <SX1276OnDio3Irq+0x4e>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 8008e80:	2105      	movs	r1, #5
 8008e82:	2012      	movs	r0, #18
 8008e84:	f7ff fa1a 	bl	80082bc <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8008e88:	4b15      	ldr	r3, [pc, #84]	; (8008ee0 <SX1276OnDio3Irq+0x88>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d01f      	beq.n	8008ed0 <SX1276OnDio3Irq+0x78>
 8008e90:	4b13      	ldr	r3, [pc, #76]	; (8008ee0 <SX1276OnDio3Irq+0x88>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	699b      	ldr	r3, [r3, #24]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d01a      	beq.n	8008ed0 <SX1276OnDio3Irq+0x78>
                RadioEvents->CadDone( true );
 8008e9a:	4b11      	ldr	r3, [pc, #68]	; (8008ee0 <SX1276OnDio3Irq+0x88>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	699b      	ldr	r3, [r3, #24]
 8008ea0:	2001      	movs	r0, #1
 8008ea2:	4798      	blx	r3
        break;
 8008ea4:	e014      	b.n	8008ed0 <SX1276OnDio3Irq+0x78>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 8008ea6:	2104      	movs	r1, #4
 8008ea8:	2012      	movs	r0, #18
 8008eaa:	f7ff fa07 	bl	80082bc <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8008eae:	4b0c      	ldr	r3, [pc, #48]	; (8008ee0 <SX1276OnDio3Irq+0x88>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d00c      	beq.n	8008ed0 <SX1276OnDio3Irq+0x78>
 8008eb6:	4b0a      	ldr	r3, [pc, #40]	; (8008ee0 <SX1276OnDio3Irq+0x88>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	699b      	ldr	r3, [r3, #24]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d007      	beq.n	8008ed0 <SX1276OnDio3Irq+0x78>
                RadioEvents->CadDone( false );
 8008ec0:	4b07      	ldr	r3, [pc, #28]	; (8008ee0 <SX1276OnDio3Irq+0x88>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	699b      	ldr	r3, [r3, #24]
 8008ec6:	2000      	movs	r0, #0
 8008ec8:	4798      	blx	r3
        break;
 8008eca:	e001      	b.n	8008ed0 <SX1276OnDio3Irq+0x78>
        break;
 8008ecc:	46c0      	nop			; (mov r8, r8)
 8008ece:	e000      	b.n	8008ed2 <SX1276OnDio3Irq+0x7a>
        break;
 8008ed0:	46c0      	nop			; (mov r8, r8)
    }
}
 8008ed2:	46c0      	nop			; (mov r8, r8)
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	b002      	add	sp, #8
 8008ed8:	bd80      	pop	{r7, pc}
 8008eda:	46c0      	nop			; (mov r8, r8)
 8008edc:	20000a34 	.word	0x20000a34
 8008ee0:	20000784 	.word	0x20000784

08008ee4 <SX1276OnDio4Irq>:

void SX1276OnDio4Irq( void* context )
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b082      	sub	sp, #8
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.Modem )
 8008eec:	4b0b      	ldr	r3, [pc, #44]	; (8008f1c <SX1276OnDio4Irq+0x38>)
 8008eee:	795b      	ldrb	r3, [r3, #5]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d002      	beq.n	8008efa <SX1276OnDio4Irq+0x16>
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d00a      	beq.n	8008f0e <SX1276OnDio4Irq+0x2a>
        }
        break;
    case MODEM_LORA:
        break;
    default:
        break;
 8008ef8:	e00c      	b.n	8008f14 <SX1276OnDio4Irq+0x30>
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 8008efa:	4b08      	ldr	r3, [pc, #32]	; (8008f1c <SX1276OnDio4Irq+0x38>)
 8008efc:	2230      	movs	r2, #48	; 0x30
 8008efe:	5c9b      	ldrb	r3, [r3, r2]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d106      	bne.n	8008f12 <SX1276OnDio4Irq+0x2e>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8008f04:	4b05      	ldr	r3, [pc, #20]	; (8008f1c <SX1276OnDio4Irq+0x38>)
 8008f06:	2230      	movs	r2, #48	; 0x30
 8008f08:	2101      	movs	r1, #1
 8008f0a:	5499      	strb	r1, [r3, r2]
        break;
 8008f0c:	e001      	b.n	8008f12 <SX1276OnDio4Irq+0x2e>
        break;
 8008f0e:	46c0      	nop			; (mov r8, r8)
 8008f10:	e000      	b.n	8008f14 <SX1276OnDio4Irq+0x30>
        break;
 8008f12:	46c0      	nop			; (mov r8, r8)
    }
}
 8008f14:	46c0      	nop			; (mov r8, r8)
 8008f16:	46bd      	mov	sp, r7
 8008f18:	b002      	add	sp, #8
 8008f1a:	bd80      	pop	{r7, pc}
 8008f1c:	20000a34 	.word	0x20000a34

08008f20 <PRINTF>:
{
	HAL_SPI_Transmit_DMA(&hspi2, data, length);
}

void PRINTF(const char *strFormat, ...)
{
 8008f20:	b40f      	push	{r0, r1, r2, r3}
 8008f22:	b590      	push	{r4, r7, lr}
 8008f24:	b083      	sub	sp, #12
 8008f26:	af00      	add	r7, sp, #0
	static char buf[256];
	va_list vaArgs;
	va_start( vaArgs, strFormat);
 8008f28:	231c      	movs	r3, #28
 8008f2a:	18fb      	adds	r3, r7, r3
 8008f2c:	603b      	str	r3, [r7, #0]
	uint16_t bufSize=vsnprintf(buf,sizeof(buf),strFormat, vaArgs);
 8008f2e:	683c      	ldr	r4, [r7, #0]
 8008f30:	69ba      	ldr	r2, [r7, #24]
 8008f32:	2380      	movs	r3, #128	; 0x80
 8008f34:	0059      	lsls	r1, r3, #1
 8008f36:	480b      	ldr	r0, [pc, #44]	; (8008f64 <PRINTF+0x44>)
 8008f38:	0023      	movs	r3, r4
 8008f3a:	f002 fd13 	bl	800b964 <vsnprintf>
 8008f3e:	0002      	movs	r2, r0
 8008f40:	1dbb      	adds	r3, r7, #6
 8008f42:	801a      	strh	r2, [r3, #0]
	va_end(vaArgs);

	HAL_UART_Transmit(&huart1, (uint8_t*)buf, bufSize, 1000);
 8008f44:	23fa      	movs	r3, #250	; 0xfa
 8008f46:	009c      	lsls	r4, r3, #2
 8008f48:	1dbb      	adds	r3, r7, #6
 8008f4a:	881a      	ldrh	r2, [r3, #0]
 8008f4c:	4905      	ldr	r1, [pc, #20]	; (8008f64 <PRINTF+0x44>)
 8008f4e:	4806      	ldr	r0, [pc, #24]	; (8008f68 <PRINTF+0x48>)
 8008f50:	0023      	movs	r3, r4
 8008f52:	f7fb fed1 	bl	8004cf8 <HAL_UART_Transmit>
}
 8008f56:	46c0      	nop			; (mov r8, r8)
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	b003      	add	sp, #12
 8008f5c:	bc90      	pop	{r4, r7}
 8008f5e:	bc08      	pop	{r3}
 8008f60:	b004      	add	sp, #16
 8008f62:	4718      	bx	r3
 8008f64:	200008a8 	.word	0x200008a8
 8008f68:	20000da0 	.word	0x20000da0

08008f6c <OnTxDone>:
int8_t SnrValue = 0;
int LORA_SPREADING_FACTOR = 12;
static  TimerEvent_t timerLed;

void OnTxDone( void )
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	af00      	add	r7, sp, #0
    Radio.Sleep( );
 8008f70:	4b06      	ldr	r3, [pc, #24]	; (8008f8c <OnTxDone+0x20>)
 8008f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f74:	4798      	blx	r3
    State = TX;
 8008f76:	4b06      	ldr	r3, [pc, #24]	; (8008f90 <OnTxDone+0x24>)
 8008f78:	2204      	movs	r2, #4
 8008f7a:	701a      	strb	r2, [r3, #0]
    PRINTF("OnTxDone\n\r");
 8008f7c:	4b05      	ldr	r3, [pc, #20]	; (8008f94 <OnTxDone+0x28>)
 8008f7e:	0018      	movs	r0, r3
 8008f80:	f7ff ffce 	bl	8008f20 <PRINTF>
}
 8008f84:	46c0      	nop			; (mov r8, r8)
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}
 8008f8a:	46c0      	nop			; (mov r8, r8)
 8008f8c:	0800d700 	.word	0x0800d700
 8008f90:	20000030 	.word	0x20000030
 8008f94:	0800d580 	.word	0x0800d580

08008f98 <OnRxDone>:

void OnRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 8008f98:	b590      	push	{r4, r7, lr}
 8008f9a:	b085      	sub	sp, #20
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	60f8      	str	r0, [r7, #12]
 8008fa0:	000c      	movs	r4, r1
 8008fa2:	0010      	movs	r0, r2
 8008fa4:	0019      	movs	r1, r3
 8008fa6:	230a      	movs	r3, #10
 8008fa8:	18fb      	adds	r3, r7, r3
 8008faa:	1c22      	adds	r2, r4, #0
 8008fac:	801a      	strh	r2, [r3, #0]
 8008fae:	2308      	movs	r3, #8
 8008fb0:	18fb      	adds	r3, r7, r3
 8008fb2:	1c02      	adds	r2, r0, #0
 8008fb4:	801a      	strh	r2, [r3, #0]
 8008fb6:	1dfb      	adds	r3, r7, #7
 8008fb8:	1c0a      	adds	r2, r1, #0
 8008fba:	701a      	strb	r2, [r3, #0]
    Radio.Sleep( );
 8008fbc:	4b18      	ldr	r3, [pc, #96]	; (8009020 <OnRxDone+0x88>)
 8008fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fc0:	4798      	blx	r3
    BufferSize = size;
 8008fc2:	4b18      	ldr	r3, [pc, #96]	; (8009024 <OnRxDone+0x8c>)
 8008fc4:	220a      	movs	r2, #10
 8008fc6:	18ba      	adds	r2, r7, r2
 8008fc8:	8812      	ldrh	r2, [r2, #0]
 8008fca:	801a      	strh	r2, [r3, #0]
    memcpy( Buffer, payload, BufferSize );
 8008fcc:	4b15      	ldr	r3, [pc, #84]	; (8009024 <OnRxDone+0x8c>)
 8008fce:	881b      	ldrh	r3, [r3, #0]
 8008fd0:	001a      	movs	r2, r3
 8008fd2:	68f9      	ldr	r1, [r7, #12]
 8008fd4:	4b14      	ldr	r3, [pc, #80]	; (8009028 <OnRxDone+0x90>)
 8008fd6:	0018      	movs	r0, r3
 8008fd8:	f001 fbaa 	bl	800a730 <memcpy>
    RssiValue = rssi;
 8008fdc:	2308      	movs	r3, #8
 8008fde:	18fb      	adds	r3, r7, r3
 8008fe0:	881b      	ldrh	r3, [r3, #0]
 8008fe2:	b25a      	sxtb	r2, r3
 8008fe4:	4b11      	ldr	r3, [pc, #68]	; (800902c <OnRxDone+0x94>)
 8008fe6:	701a      	strb	r2, [r3, #0]
    SnrValue = snr;
 8008fe8:	4b11      	ldr	r3, [pc, #68]	; (8009030 <OnRxDone+0x98>)
 8008fea:	1dfa      	adds	r2, r7, #7
 8008fec:	7812      	ldrb	r2, [r2, #0]
 8008fee:	701a      	strb	r2, [r3, #0]
    State = RX;
 8008ff0:	4b10      	ldr	r3, [pc, #64]	; (8009034 <OnRxDone+0x9c>)
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	701a      	strb	r2, [r3, #0]

    PRINTF("OnRxDone\n\r");
 8008ff6:	4b10      	ldr	r3, [pc, #64]	; (8009038 <OnRxDone+0xa0>)
 8008ff8:	0018      	movs	r0, r3
 8008ffa:	f7ff ff91 	bl	8008f20 <PRINTF>
    PRINTF("RssiValue=%d dBm, SnrValue=%d\n\r,   %d", rssi, snr,LORA_SPREADING_FACTOR);
 8008ffe:	2308      	movs	r3, #8
 8009000:	18fb      	adds	r3, r7, r3
 8009002:	2100      	movs	r1, #0
 8009004:	5e59      	ldrsh	r1, [r3, r1]
 8009006:	1dfb      	adds	r3, r7, #7
 8009008:	2200      	movs	r2, #0
 800900a:	569a      	ldrsb	r2, [r3, r2]
 800900c:	4b0b      	ldr	r3, [pc, #44]	; (800903c <OnRxDone+0xa4>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	480b      	ldr	r0, [pc, #44]	; (8009040 <OnRxDone+0xa8>)
 8009012:	f7ff ff85 	bl	8008f20 <PRINTF>
}
 8009016:	46c0      	nop			; (mov r8, r8)
 8009018:	46bd      	mov	sp, r7
 800901a:	b005      	add	sp, #20
 800901c:	bd90      	pop	{r4, r7, pc}
 800901e:	46c0      	nop			; (mov r8, r8)
 8009020:	0800d700 	.word	0x0800d700
 8009024:	20000032 	.word	0x20000032
 8009028:	20001244 	.word	0x20001244
 800902c:	2000088c 	.word	0x2000088c
 8009030:	2000088d 	.word	0x2000088d
 8009034:	20000030 	.word	0x20000030
 8009038:	0800d58c 	.word	0x0800d58c
 800903c:	20000034 	.word	0x20000034
 8009040:	0800d598 	.word	0x0800d598

08009044 <OnTxTimeout>:

void OnTxTimeout( void )
{
 8009044:	b580      	push	{r7, lr}
 8009046:	af00      	add	r7, sp, #0
    Radio.Sleep( );
 8009048:	4b06      	ldr	r3, [pc, #24]	; (8009064 <OnTxTimeout+0x20>)
 800904a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800904c:	4798      	blx	r3
    State = TX_TIMEOUT;
 800904e:	4b06      	ldr	r3, [pc, #24]	; (8009068 <OnTxTimeout+0x24>)
 8009050:	2205      	movs	r2, #5
 8009052:	701a      	strb	r2, [r3, #0]

    PRINTF("OnTxTimeout\n\r");
 8009054:	4b05      	ldr	r3, [pc, #20]	; (800906c <OnTxTimeout+0x28>)
 8009056:	0018      	movs	r0, r3
 8009058:	f7ff ff62 	bl	8008f20 <PRINTF>
}
 800905c:	46c0      	nop			; (mov r8, r8)
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}
 8009062:	46c0      	nop			; (mov r8, r8)
 8009064:	0800d700 	.word	0x0800d700
 8009068:	20000030 	.word	0x20000030
 800906c:	0800d5c0 	.word	0x0800d5c0

08009070 <OnRxTimeout>:

void OnRxTimeout( void )
{
 8009070:	b580      	push	{r7, lr}
 8009072:	af00      	add	r7, sp, #0
    Radio.Sleep( );
 8009074:	4b07      	ldr	r3, [pc, #28]	; (8009094 <OnRxTimeout+0x24>)
 8009076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009078:	4798      	blx	r3
    State = RX_TIMEOUT;
 800907a:	4b07      	ldr	r3, [pc, #28]	; (8009098 <OnRxTimeout+0x28>)
 800907c:	2202      	movs	r2, #2
 800907e:	701a      	strb	r2, [r3, #0]
    PRINTF("OnRxTimeout\n\r,  %d",LORA_SPREADING_FACTOR);
 8009080:	4b06      	ldr	r3, [pc, #24]	; (800909c <OnRxTimeout+0x2c>)
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	4b06      	ldr	r3, [pc, #24]	; (80090a0 <OnRxTimeout+0x30>)
 8009086:	0011      	movs	r1, r2
 8009088:	0018      	movs	r0, r3
 800908a:	f7ff ff49 	bl	8008f20 <PRINTF>
}
 800908e:	46c0      	nop			; (mov r8, r8)
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}
 8009094:	0800d700 	.word	0x0800d700
 8009098:	20000030 	.word	0x20000030
 800909c:	20000034 	.word	0x20000034
 80090a0:	0800d5d0 	.word	0x0800d5d0

080090a4 <OnRxError>:

void OnRxError( void )
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	af00      	add	r7, sp, #0
    Radio.Sleep( );
 80090a8:	4b06      	ldr	r3, [pc, #24]	; (80090c4 <OnRxError+0x20>)
 80090aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090ac:	4798      	blx	r3
    State = RX_ERROR;
 80090ae:	4b06      	ldr	r3, [pc, #24]	; (80090c8 <OnRxError+0x24>)
 80090b0:	2203      	movs	r2, #3
 80090b2:	701a      	strb	r2, [r3, #0]
    PRINTF("OnRxError\n\r");
 80090b4:	4b05      	ldr	r3, [pc, #20]	; (80090cc <OnRxError+0x28>)
 80090b6:	0018      	movs	r0, r3
 80090b8:	f7ff ff32 	bl	8008f20 <PRINTF>
}
 80090bc:	46c0      	nop			; (mov r8, r8)
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	46c0      	nop			; (mov r8, r8)
 80090c4:	0800d700 	.word	0x0800d700
 80090c8:	20000030 	.word	0x20000030
 80090cc:	0800d5e4 	.word	0x0800d5e4

080090d0 <OnledEvent>:

static void OnledEvent( void* context )
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b082      	sub	sp, #8
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
    HAL_GPIO_TogglePin(LD4_RED_GPIO_Port, LD4_RED_Pin);
 80090d8:	4b0e      	ldr	r3, [pc, #56]	; (8009114 <OnledEvent+0x44>)
 80090da:	2180      	movs	r1, #128	; 0x80
 80090dc:	0018      	movs	r0, r3
 80090de:	f7f9 fd16 	bl	8002b0e <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(LD2_RED_GPIO_Port, LD2_RED_Pin);
 80090e2:	23a0      	movs	r3, #160	; 0xa0
 80090e4:	05db      	lsls	r3, r3, #23
 80090e6:	2120      	movs	r1, #32
 80090e8:	0018      	movs	r0, r3
 80090ea:	f7f9 fd10 	bl	8002b0e <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(LD1_GREEN_GPIO_Port, LD1_GREEN_Pin);
 80090ee:	4b09      	ldr	r3, [pc, #36]	; (8009114 <OnledEvent+0x44>)
 80090f0:	2120      	movs	r1, #32
 80090f2:	0018      	movs	r0, r3
 80090f4:	f7f9 fd0b 	bl	8002b0e <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(LD3_BLUE_GPIO_Port, LD3_BLUE_Pin);
 80090f8:	4b06      	ldr	r3, [pc, #24]	; (8009114 <OnledEvent+0x44>)
 80090fa:	2140      	movs	r1, #64	; 0x40
 80090fc:	0018      	movs	r0, r3
 80090fe:	f7f9 fd06 	bl	8002b0e <HAL_GPIO_TogglePin>

  TimerStart(&timerLed );
 8009102:	4b05      	ldr	r3, [pc, #20]	; (8009118 <OnledEvent+0x48>)
 8009104:	0018      	movs	r0, r3
 8009106:	f7fc ffb3 	bl	8006070 <TimerStart>
}
 800910a:	46c0      	nop			; (mov r8, r8)
 800910c:	46bd      	mov	sp, r7
 800910e:	b002      	add	sp, #8
 8009110:	bd80      	pop	{r7, pc}
 8009112:	46c0      	nop			; (mov r8, r8)
 8009114:	50000400 	.word	0x50000400
 8009118:	20000890 	.word	0x20000890

0800911c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800911c:	b590      	push	{r4, r7, lr}
 800911e:	b097      	sub	sp, #92	; 0x5c
 8009120:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE BEGIN 1 */
	bool isMaster = true;
 8009122:	232f      	movs	r3, #47	; 0x2f
 8009124:	18fb      	adds	r3, r7, r3
 8009126:	2201      	movs	r2, #1
 8009128:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800912a:	f7f9 f88d 	bl	8002248 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800912e:	f000 fa6d 	bl	800960c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009132:	f000 fc93 	bl	8009a5c <MX_GPIO_Init>
  MX_DMA_Init();
 8009136:	f000 fc6b 	bl	8009a10 <MX_DMA_Init>
  MX_RTC_Init();
 800913a:	f000 faf1 	bl	8009720 <MX_RTC_Init>
  MX_SPI1_Init();
 800913e:	f000 fb97 	bl	8009870 <MX_SPI1_Init>
  MX_SPI2_Init();
 8009142:	f000 fbcd 	bl	80098e0 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8009146:	f000 fc33 	bl	80099b0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800914a:	f000 fc01 	bl	8009950 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

while(0)
 800914e:	46c0      	nop			; (mov r8, r8)
	}


static RadioEvents_t RadioEvents;
// Radio initialization
RadioEvents.TxDone = OnTxDone;
 8009150:	4be7      	ldr	r3, [pc, #924]	; (80094f0 <main+0x3d4>)
 8009152:	4ae8      	ldr	r2, [pc, #928]	; (80094f4 <main+0x3d8>)
 8009154:	601a      	str	r2, [r3, #0]
RadioEvents.RxDone = OnRxDone;
 8009156:	4be6      	ldr	r3, [pc, #920]	; (80094f0 <main+0x3d4>)
 8009158:	4ae7      	ldr	r2, [pc, #924]	; (80094f8 <main+0x3dc>)
 800915a:	609a      	str	r2, [r3, #8]
RadioEvents.TxTimeout = OnTxTimeout;
 800915c:	4be4      	ldr	r3, [pc, #912]	; (80094f0 <main+0x3d4>)
 800915e:	4ae7      	ldr	r2, [pc, #924]	; (80094fc <main+0x3e0>)
 8009160:	605a      	str	r2, [r3, #4]
RadioEvents.RxTimeout = OnRxTimeout;
 8009162:	4be3      	ldr	r3, [pc, #908]	; (80094f0 <main+0x3d4>)
 8009164:	4ae6      	ldr	r2, [pc, #920]	; (8009500 <main+0x3e4>)
 8009166:	60da      	str	r2, [r3, #12]
RadioEvents.RxError = OnRxError;
 8009168:	4be1      	ldr	r3, [pc, #900]	; (80094f0 <main+0x3d4>)
 800916a:	4ae6      	ldr	r2, [pc, #920]	; (8009504 <main+0x3e8>)
 800916c:	611a      	str	r2, [r3, #16]

Radio.IoInit( );
 800916e:	4be6      	ldr	r3, [pc, #920]	; (8009508 <main+0x3ec>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4798      	blx	r3

/* Led Timers*/
TimerInit(&timerLed, OnledEvent);
 8009174:	4ae5      	ldr	r2, [pc, #916]	; (800950c <main+0x3f0>)
 8009176:	4be6      	ldr	r3, [pc, #920]	; (8009510 <main+0x3f4>)
 8009178:	0011      	movs	r1, r2
 800917a:	0018      	movs	r0, r3
 800917c:	f7fc ff5a 	bl	8006034 <TimerInit>
#define LED_PERIOD_MS               				200
TimerSetValue( &timerLed, LED_PERIOD_MS);
 8009180:	4be3      	ldr	r3, [pc, #908]	; (8009510 <main+0x3f4>)
 8009182:	21c8      	movs	r1, #200	; 0xc8
 8009184:	0018      	movs	r0, r3
 8009186:	f7fd f841 	bl	800620c <TimerSetValue>

TimerStart(&timerLed );
 800918a:	4be1      	ldr	r3, [pc, #900]	; (8009510 <main+0x3f4>)
 800918c:	0018      	movs	r0, r3
 800918e:	f7fc ff6f 	bl	8006070 <TimerStart>

Radio.Init( &RadioEvents );
 8009192:	4bdd      	ldr	r3, [pc, #884]	; (8009508 <main+0x3ec>)
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	4ad6      	ldr	r2, [pc, #856]	; (80094f0 <main+0x3d4>)
 8009198:	0010      	movs	r0, r2
 800919a:	4798      	blx	r3

	static uint8_t rxData[2];
	static uint8_t txData[2] = { 0xFF, 0x0};

	char *regstext = "SX1276 registers:\r\n";
 800919c:	4bdd      	ldr	r3, [pc, #884]	; (8009514 <main+0x3f8>)
 800919e:	61fb      	str	r3, [r7, #28]
	HAL_UART_Transmit(&huart1, (uint8_t*)regstext, strlen(regstext), 1000);
 80091a0:	69fb      	ldr	r3, [r7, #28]
 80091a2:	0018      	movs	r0, r3
 80091a4:	f7f6 ffb0 	bl	8000108 <strlen>
 80091a8:	0003      	movs	r3, r0
 80091aa:	b29a      	uxth	r2, r3
 80091ac:	23fa      	movs	r3, #250	; 0xfa
 80091ae:	009b      	lsls	r3, r3, #2
 80091b0:	69f9      	ldr	r1, [r7, #28]
 80091b2:	48d9      	ldr	r0, [pc, #868]	; (8009518 <main+0x3fc>)
 80091b4:	f7fb fda0 	bl	8004cf8 <HAL_UART_Transmit>
	for (uint16_t i=0; i<=0x70 ; i++)
 80091b8:	232c      	movs	r3, #44	; 0x2c
 80091ba:	18fb      	adds	r3, r7, r3
 80091bc:	2200      	movs	r2, #0
 80091be:	801a      	strh	r2, [r3, #0]
 80091c0:	e047      	b.n	8009252 <main+0x136>
	{
		if (i%16==0)
 80091c2:	232c      	movs	r3, #44	; 0x2c
 80091c4:	18fb      	adds	r3, r7, r3
 80091c6:	881b      	ldrh	r3, [r3, #0]
 80091c8:	220f      	movs	r2, #15
 80091ca:	4013      	ands	r3, r2
 80091cc:	b29b      	uxth	r3, r3
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d106      	bne.n	80091e0 <main+0xc4>
		{
			HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, 1000);
 80091d2:	23fa      	movs	r3, #250	; 0xfa
 80091d4:	009b      	lsls	r3, r3, #2
 80091d6:	49d1      	ldr	r1, [pc, #836]	; (800951c <main+0x400>)
 80091d8:	48cf      	ldr	r0, [pc, #828]	; (8009518 <main+0x3fc>)
 80091da:	2202      	movs	r2, #2
 80091dc:	f7fb fd8c 	bl	8004cf8 <HAL_UART_Transmit>
		}

		//config =  SX1276Read( i );

		txData[0] = i & 0x7F;
 80091e0:	232c      	movs	r3, #44	; 0x2c
 80091e2:	18fb      	adds	r3, r7, r3
 80091e4:	881b      	ldrh	r3, [r3, #0]
 80091e6:	b2db      	uxtb	r3, r3
 80091e8:	227f      	movs	r2, #127	; 0x7f
 80091ea:	4013      	ands	r3, r2
 80091ec:	b2da      	uxtb	r2, r3
 80091ee:	4bcc      	ldr	r3, [pc, #816]	; (8009520 <main+0x404>)
 80091f0:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin( RADIO_NSS_GPIO_Port, RADIO_NSS_Pin, 0 );
 80091f2:	2380      	movs	r3, #128	; 0x80
 80091f4:	0219      	lsls	r1, r3, #8
 80091f6:	23a0      	movs	r3, #160	; 0xa0
 80091f8:	05db      	lsls	r3, r3, #23
 80091fa:	2200      	movs	r2, #0
 80091fc:	0018      	movs	r0, r3
 80091fe:	f7f9 fc69 	bl	8002ad4 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive( &hspi1, txData, rxData, 2, HAL_MAX_DELAY);
 8009202:	4ac8      	ldr	r2, [pc, #800]	; (8009524 <main+0x408>)
 8009204:	49c6      	ldr	r1, [pc, #792]	; (8009520 <main+0x404>)
 8009206:	48c8      	ldr	r0, [pc, #800]	; (8009528 <main+0x40c>)
 8009208:	2301      	movs	r3, #1
 800920a:	425b      	negs	r3, r3
 800920c:	9300      	str	r3, [sp, #0]
 800920e:	2302      	movs	r3, #2
 8009210:	f7fb f9aa 	bl	8004568 <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin( RADIO_NSS_GPIO_Port, RADIO_NSS_Pin, 1 );
 8009214:	2380      	movs	r3, #128	; 0x80
 8009216:	0219      	lsls	r1, r3, #8
 8009218:	23a0      	movs	r3, #160	; 0xa0
 800921a:	05db      	lsls	r3, r3, #23
 800921c:	2201      	movs	r2, #1
 800921e:	0018      	movs	r0, r3
 8009220:	f7f9 fc58 	bl	8002ad4 <HAL_GPIO_WritePin>

		char text[8];
		snprintf (text, sizeof(text), "%02X ", rxData[1]);
 8009224:	4bbf      	ldr	r3, [pc, #764]	; (8009524 <main+0x408>)
 8009226:	785b      	ldrb	r3, [r3, #1]
 8009228:	4ac0      	ldr	r2, [pc, #768]	; (800952c <main+0x410>)
 800922a:	2114      	movs	r1, #20
 800922c:	1878      	adds	r0, r7, r1
 800922e:	2108      	movs	r1, #8
 8009230:	f001 fab2 	bl	800a798 <snprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)text, 3, 1000);
 8009234:	23fa      	movs	r3, #250	; 0xfa
 8009236:	009b      	lsls	r3, r3, #2
 8009238:	2214      	movs	r2, #20
 800923a:	18b9      	adds	r1, r7, r2
 800923c:	48b6      	ldr	r0, [pc, #728]	; (8009518 <main+0x3fc>)
 800923e:	2203      	movs	r2, #3
 8009240:	f7fb fd5a 	bl	8004cf8 <HAL_UART_Transmit>
	for (uint16_t i=0; i<=0x70 ; i++)
 8009244:	232c      	movs	r3, #44	; 0x2c
 8009246:	18fb      	adds	r3, r7, r3
 8009248:	881a      	ldrh	r2, [r3, #0]
 800924a:	232c      	movs	r3, #44	; 0x2c
 800924c:	18fb      	adds	r3, r7, r3
 800924e:	3201      	adds	r2, #1
 8009250:	801a      	strh	r2, [r3, #0]
 8009252:	232c      	movs	r3, #44	; 0x2c
 8009254:	18fb      	adds	r3, r7, r3
 8009256:	881b      	ldrh	r3, [r3, #0]
 8009258:	2b70      	cmp	r3, #112	; 0x70
 800925a:	d9b2      	bls.n	80091c2 <main+0xa6>
	}
	HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n_________\r\n", 13, 1000);
 800925c:	23fa      	movs	r3, #250	; 0xfa
 800925e:	009b      	lsls	r3, r3, #2
 8009260:	49b3      	ldr	r1, [pc, #716]	; (8009530 <main+0x414>)
 8009262:	48ad      	ldr	r0, [pc, #692]	; (8009518 <main+0x3fc>)
 8009264:	220d      	movs	r2, #13
 8009266:	f7fb fd47 	bl	8004cf8 <HAL_UART_Transmit>
	#define LORA_SYMBOL_TIMEOUT                         100       // Symbols
	#define LORA_FIX_LENGTH_PAYLOAD_ON                  false
	#define LORA_IQ_INVERSION_ON                        false


    Radio.SetMaxPayloadLength(MODEM_LORA, 6);
 800926a:	4ba7      	ldr	r3, [pc, #668]	; (8009508 <main+0x3ec>)
 800926c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800926e:	2106      	movs	r1, #6
 8009270:	2001      	movs	r0, #1
 8009272:	4798      	blx	r3

    Radio.SetChannel( RF_FREQUENCY );
 8009274:	4ba4      	ldr	r3, [pc, #656]	; (8009508 <main+0x3ec>)
 8009276:	695b      	ldr	r3, [r3, #20]
 8009278:	4aae      	ldr	r2, [pc, #696]	; (8009534 <main+0x418>)
 800927a:	0010      	movs	r0, r2
 800927c:	4798      	blx	r3
    Radio.SetTxConfig( MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 800927e:	4ba2      	ldr	r3, [pc, #648]	; (8009508 <main+0x3ec>)
 8009280:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8009282:	4bad      	ldr	r3, [pc, #692]	; (8009538 <main+0x41c>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	001a      	movs	r2, r3
 8009288:	4bac      	ldr	r3, [pc, #688]	; (800953c <main+0x420>)
 800928a:	9308      	str	r3, [sp, #32]
 800928c:	2300      	movs	r3, #0
 800928e:	9307      	str	r3, [sp, #28]
 8009290:	2300      	movs	r3, #0
 8009292:	9306      	str	r3, [sp, #24]
 8009294:	2300      	movs	r3, #0
 8009296:	9305      	str	r3, [sp, #20]
 8009298:	2301      	movs	r3, #1
 800929a:	9304      	str	r3, [sp, #16]
 800929c:	2300      	movs	r3, #0
 800929e:	9303      	str	r3, [sp, #12]
 80092a0:	2308      	movs	r3, #8
 80092a2:	9302      	str	r3, [sp, #8]
 80092a4:	2304      	movs	r3, #4
 80092a6:	9301      	str	r3, [sp, #4]
 80092a8:	9200      	str	r2, [sp, #0]
 80092aa:	2300      	movs	r3, #0
 80092ac:	2200      	movs	r2, #0
 80092ae:	2114      	movs	r1, #20
 80092b0:	2001      	movs	r0, #1
 80092b2:	47a0      	blx	r4
    								LORA_SPREADING_FACTOR, LORA_CODINGRATE,
                                   LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
                                   true, 0, 0, LORA_IQ_INVERSION_ON, 3000 );
    Radio.SetRxConfig( MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 80092b4:	4b94      	ldr	r3, [pc, #592]	; (8009508 <main+0x3ec>)
 80092b6:	6a1c      	ldr	r4, [r3, #32]
 80092b8:	4b9f      	ldr	r3, [pc, #636]	; (8009538 <main+0x41c>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	001a      	movs	r2, r3
 80092be:	2301      	movs	r3, #1
 80092c0:	9309      	str	r3, [sp, #36]	; 0x24
 80092c2:	2300      	movs	r3, #0
 80092c4:	9308      	str	r3, [sp, #32]
 80092c6:	2300      	movs	r3, #0
 80092c8:	9307      	str	r3, [sp, #28]
 80092ca:	2300      	movs	r3, #0
 80092cc:	9306      	str	r3, [sp, #24]
 80092ce:	2301      	movs	r3, #1
 80092d0:	9305      	str	r3, [sp, #20]
 80092d2:	2300      	movs	r3, #0
 80092d4:	9304      	str	r3, [sp, #16]
 80092d6:	2300      	movs	r3, #0
 80092d8:	9303      	str	r3, [sp, #12]
 80092da:	2364      	movs	r3, #100	; 0x64
 80092dc:	9302      	str	r3, [sp, #8]
 80092de:	2308      	movs	r3, #8
 80092e0:	9301      	str	r3, [sp, #4]
 80092e2:	2300      	movs	r3, #0
 80092e4:	9300      	str	r3, [sp, #0]
 80092e6:	2304      	movs	r3, #4
 80092e8:	2100      	movs	r1, #0
 80092ea:	2001      	movs	r0, #1
 80092ec:	47a0      	blx	r4
                                   LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH,
                                   LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON,
                                   0, true, 0, 0, LORA_IQ_INVERSION_ON, true );

    Radio.Rx( RX_TIMEOUT_VALUE );
 80092ee:	4b86      	ldr	r3, [pc, #536]	; (8009508 <main+0x3ec>)
 80092f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092f2:	4a93      	ldr	r2, [pc, #588]	; (8009540 <main+0x424>)
 80092f4:	0010      	movs	r0, r2
 80092f6:	4798      	blx	r3


    while( 1 )
    {
        switch( State )
 80092f8:	4b92      	ldr	r3, [pc, #584]	; (8009544 <main+0x428>)
 80092fa:	781b      	ldrb	r3, [r3, #0]
 80092fc:	2b05      	cmp	r3, #5
 80092fe:	d900      	bls.n	8009302 <main+0x1e6>
 8009300:	e176      	b.n	80095f0 <main+0x4d4>
 8009302:	009a      	lsls	r2, r3, #2
 8009304:	4b90      	ldr	r3, [pc, #576]	; (8009548 <main+0x42c>)
 8009306:	18d3      	adds	r3, r2, r3
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	469f      	mov	pc, r3
        {
        case RX:
            if( isMaster == true )
 800930c:	232f      	movs	r3, #47	; 0x2f
 800930e:	18fb      	adds	r3, r7, r3
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d100      	bne.n	8009318 <main+0x1fc>
 8009316:	e078      	b.n	800940a <main+0x2ee>
            {
                if( BufferSize > 0 )
 8009318:	4b8c      	ldr	r3, [pc, #560]	; (800954c <main+0x430>)
 800931a:	881b      	ldrh	r3, [r3, #0]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d100      	bne.n	8009322 <main+0x206>
 8009320:	e0d9      	b.n	80094d6 <main+0x3ba>
                {
                    if( strncmp( ( const char* )Buffer, ( const char* )PongMsg, 4 ) == 0 )
 8009322:	498b      	ldr	r1, [pc, #556]	; (8009550 <main+0x434>)
 8009324:	4b8b      	ldr	r3, [pc, #556]	; (8009554 <main+0x438>)
 8009326:	2204      	movs	r2, #4
 8009328:	0018      	movs	r0, r3
 800932a:	f001 fa67 	bl	800a7fc <strncmp>
 800932e:	1e03      	subs	r3, r0, #0
 8009330:	d14f      	bne.n	80093d2 <main+0x2b6>
                    {
                        TimerStop(&timerLed );
 8009332:	4b77      	ldr	r3, [pc, #476]	; (8009510 <main+0x3f4>)
 8009334:	0018      	movs	r0, r3
 8009336:	f7fc feef 	bl	8006118 <TimerStop>


                        HAL_GPIO_WritePin(LD4_RED_GPIO_Port, LD4_RED_Pin, 0);
 800933a:	4b87      	ldr	r3, [pc, #540]	; (8009558 <main+0x43c>)
 800933c:	2200      	movs	r2, #0
 800933e:	2180      	movs	r1, #128	; 0x80
 8009340:	0018      	movs	r0, r3
 8009342:	f7f9 fbc7 	bl	8002ad4 <HAL_GPIO_WritePin>
                        HAL_GPIO_WritePin(LD1_GREEN_GPIO_Port, LD1_GREEN_Pin, 0);
 8009346:	4b84      	ldr	r3, [pc, #528]	; (8009558 <main+0x43c>)
 8009348:	2200      	movs	r2, #0
 800934a:	2120      	movs	r1, #32
 800934c:	0018      	movs	r0, r3
 800934e:	f7f9 fbc1 	bl	8002ad4 <HAL_GPIO_WritePin>
                        HAL_GPIO_WritePin(LD3_BLUE_GPIO_Port, LD3_BLUE_Pin, 0);
 8009352:	4b81      	ldr	r3, [pc, #516]	; (8009558 <main+0x43c>)
 8009354:	2200      	movs	r2, #0
 8009356:	2140      	movs	r1, #64	; 0x40
 8009358:	0018      	movs	r0, r3
 800935a:	f7f9 fbbb 	bl	8002ad4 <HAL_GPIO_WritePin>
                        // Indicates on a LED that the received frame is a PONG
                        HAL_GPIO_TogglePin(LD2_RED_GPIO_Port, LD2_RED_Pin);
 800935e:	23a0      	movs	r3, #160	; 0xa0
 8009360:	05db      	lsls	r3, r3, #23
 8009362:	2120      	movs	r1, #32
 8009364:	0018      	movs	r0, r3
 8009366:	f7f9 fbd2 	bl	8002b0e <HAL_GPIO_TogglePin>

                        // Send the next PING frame
                        Buffer[0] = 'P';
 800936a:	4b7a      	ldr	r3, [pc, #488]	; (8009554 <main+0x438>)
 800936c:	2250      	movs	r2, #80	; 0x50
 800936e:	701a      	strb	r2, [r3, #0]
                        Buffer[1] = 'I';
 8009370:	4b78      	ldr	r3, [pc, #480]	; (8009554 <main+0x438>)
 8009372:	2249      	movs	r2, #73	; 0x49
 8009374:	705a      	strb	r2, [r3, #1]
                        Buffer[2] = 'N';
 8009376:	4b77      	ldr	r3, [pc, #476]	; (8009554 <main+0x438>)
 8009378:	224e      	movs	r2, #78	; 0x4e
 800937a:	709a      	strb	r2, [r3, #2]
                        Buffer[3] = 'G';
 800937c:	4b75      	ldr	r3, [pc, #468]	; (8009554 <main+0x438>)
 800937e:	2247      	movs	r2, #71	; 0x47
 8009380:	70da      	strb	r2, [r3, #3]
                        // We fill the buffer with numbers for the payload
                        for(int i = 4; i < BufferSize; i++ )
 8009382:	2304      	movs	r3, #4
 8009384:	62bb      	str	r3, [r7, #40]	; 0x28
 8009386:	e00b      	b.n	80093a0 <main+0x284>
                        {
                            Buffer[i] = i - 4;
 8009388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800938a:	b2db      	uxtb	r3, r3
 800938c:	3b04      	subs	r3, #4
 800938e:	b2d9      	uxtb	r1, r3
 8009390:	4a70      	ldr	r2, [pc, #448]	; (8009554 <main+0x438>)
 8009392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009394:	18d3      	adds	r3, r2, r3
 8009396:	1c0a      	adds	r2, r1, #0
 8009398:	701a      	strb	r2, [r3, #0]
                        for(int i = 4; i < BufferSize; i++ )
 800939a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800939c:	3301      	adds	r3, #1
 800939e:	62bb      	str	r3, [r7, #40]	; 0x28
 80093a0:	4b6a      	ldr	r3, [pc, #424]	; (800954c <main+0x430>)
 80093a2:	881b      	ldrh	r3, [r3, #0]
 80093a4:	001a      	movs	r2, r3
 80093a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a8:	429a      	cmp	r2, r3
 80093aa:	dced      	bgt.n	8009388 <main+0x26c>
                        }
                    	HAL_UART_Transmit(&huart1, (uint8_t*)"...PING\n\r", 9, 1000);
 80093ac:	23fa      	movs	r3, #250	; 0xfa
 80093ae:	009b      	lsls	r3, r3, #2
 80093b0:	496a      	ldr	r1, [pc, #424]	; (800955c <main+0x440>)
 80093b2:	4859      	ldr	r0, [pc, #356]	; (8009518 <main+0x3fc>)
 80093b4:	2209      	movs	r2, #9
 80093b6:	f7fb fc9f 	bl	8004cf8 <HAL_UART_Transmit>
                        //PRINTF("...PING\n\r");

                        DelayMs( 1 );
 80093ba:	2001      	movs	r0, #1
 80093bc:	f7f8 ffa4 	bl	8002308 <HAL_Delay>
                        Radio.Send( Buffer, BufferSize );
 80093c0:	4b51      	ldr	r3, [pc, #324]	; (8009508 <main+0x3ec>)
 80093c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093c4:	4a61      	ldr	r2, [pc, #388]	; (800954c <main+0x430>)
 80093c6:	8812      	ldrh	r2, [r2, #0]
 80093c8:	b2d1      	uxtb	r1, r2
 80093ca:	4a62      	ldr	r2, [pc, #392]	; (8009554 <main+0x438>)
 80093cc:	0010      	movs	r0, r2
 80093ce:	4798      	blx	r3
 80093d0:	e081      	b.n	80094d6 <main+0x3ba>
                    }
                    else if( strncmp( ( const char* )Buffer, ( const char* )PingMsg, 4 ) == 0 )
 80093d2:	4963      	ldr	r1, [pc, #396]	; (8009560 <main+0x444>)
 80093d4:	4b5f      	ldr	r3, [pc, #380]	; (8009554 <main+0x438>)
 80093d6:	2204      	movs	r2, #4
 80093d8:	0018      	movs	r0, r3
 80093da:	f001 fa0f 	bl	800a7fc <strncmp>
 80093de:	1e03      	subs	r3, r0, #0
 80093e0:	d109      	bne.n	80093f6 <main+0x2da>
                    { // A master already exists then become a slave
                        isMaster = false;
 80093e2:	232f      	movs	r3, #47	; 0x2f
 80093e4:	18fb      	adds	r3, r7, r3
 80093e6:	2200      	movs	r2, #0
 80093e8:	701a      	strb	r2, [r3, #0]
                        //GpioWrite( &Led2, 1 ); // Set LED off
                        Radio.Rx( RX_TIMEOUT_VALUE );
 80093ea:	4b47      	ldr	r3, [pc, #284]	; (8009508 <main+0x3ec>)
 80093ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093ee:	4a54      	ldr	r2, [pc, #336]	; (8009540 <main+0x424>)
 80093f0:	0010      	movs	r0, r2
 80093f2:	4798      	blx	r3
 80093f4:	e06f      	b.n	80094d6 <main+0x3ba>
                    }
                    else // valid reception but neither a PING or a PONG message
                    {    // Set device as master ans start again
                        isMaster = true;
 80093f6:	232f      	movs	r3, #47	; 0x2f
 80093f8:	18fb      	adds	r3, r7, r3
 80093fa:	2201      	movs	r2, #1
 80093fc:	701a      	strb	r2, [r3, #0]
                        Radio.Rx( RX_TIMEOUT_VALUE );
 80093fe:	4b42      	ldr	r3, [pc, #264]	; (8009508 <main+0x3ec>)
 8009400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009402:	4a4f      	ldr	r2, [pc, #316]	; (8009540 <main+0x424>)
 8009404:	0010      	movs	r0, r2
 8009406:	4798      	blx	r3
 8009408:	e065      	b.n	80094d6 <main+0x3ba>
                    }
                }
            }
            else
            {
                if( BufferSize > 0 )
 800940a:	4b50      	ldr	r3, [pc, #320]	; (800954c <main+0x430>)
 800940c:	881b      	ldrh	r3, [r3, #0]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d061      	beq.n	80094d6 <main+0x3ba>
                {
                    if( strncmp( ( const char* )Buffer, ( const char* )PingMsg, 4 ) == 0 )
 8009412:	4953      	ldr	r1, [pc, #332]	; (8009560 <main+0x444>)
 8009414:	4b4f      	ldr	r3, [pc, #316]	; (8009554 <main+0x438>)
 8009416:	2204      	movs	r2, #4
 8009418:	0018      	movs	r0, r3
 800941a:	f001 f9ef 	bl	800a7fc <strncmp>
 800941e:	1e03      	subs	r3, r0, #0
 8009420:	d150      	bne.n	80094c4 <main+0x3a8>
                    {
                        // Indicates on a LED that the received frame is a PING
                        TimerStop(&timerLed );
 8009422:	4b3b      	ldr	r3, [pc, #236]	; (8009510 <main+0x3f4>)
 8009424:	0018      	movs	r0, r3
 8009426:	f7fc fe77 	bl	8006118 <TimerStop>
                        HAL_GPIO_WritePin(LD4_RED_GPIO_Port, LD4_RED_Pin, 0);
 800942a:	4b4b      	ldr	r3, [pc, #300]	; (8009558 <main+0x43c>)
 800942c:	2200      	movs	r2, #0
 800942e:	2180      	movs	r1, #128	; 0x80
 8009430:	0018      	movs	r0, r3
 8009432:	f7f9 fb4f 	bl	8002ad4 <HAL_GPIO_WritePin>
                        HAL_GPIO_WritePin(LD2_RED_GPIO_Port, LD2_RED_Pin, 0);
 8009436:	23a0      	movs	r3, #160	; 0xa0
 8009438:	05db      	lsls	r3, r3, #23
 800943a:	2200      	movs	r2, #0
 800943c:	2120      	movs	r1, #32
 800943e:	0018      	movs	r0, r3
 8009440:	f7f9 fb48 	bl	8002ad4 <HAL_GPIO_WritePin>
                        HAL_GPIO_WritePin(LD1_GREEN_GPIO_Port, LD1_GREEN_Pin, 0);
 8009444:	4b44      	ldr	r3, [pc, #272]	; (8009558 <main+0x43c>)
 8009446:	2200      	movs	r2, #0
 8009448:	2120      	movs	r1, #32
 800944a:	0018      	movs	r0, r3
 800944c:	f7f9 fb42 	bl	8002ad4 <HAL_GPIO_WritePin>
                        HAL_GPIO_WritePin(LD3_BLUE_GPIO_Port, LD3_BLUE_Pin, 0);
 8009450:	4b41      	ldr	r3, [pc, #260]	; (8009558 <main+0x43c>)
 8009452:	2200      	movs	r2, #0
 8009454:	2140      	movs	r1, #64	; 0x40
 8009456:	0018      	movs	r0, r3
 8009458:	f7f9 fb3c 	bl	8002ad4 <HAL_GPIO_WritePin>

                        // Send the reply to the PONG string
                        Buffer[0] = 'P';
 800945c:	4b3d      	ldr	r3, [pc, #244]	; (8009554 <main+0x438>)
 800945e:	2250      	movs	r2, #80	; 0x50
 8009460:	701a      	strb	r2, [r3, #0]
                        Buffer[1] = 'O';
 8009462:	4b3c      	ldr	r3, [pc, #240]	; (8009554 <main+0x438>)
 8009464:	224f      	movs	r2, #79	; 0x4f
 8009466:	705a      	strb	r2, [r3, #1]
                        Buffer[2] = 'N';
 8009468:	4b3a      	ldr	r3, [pc, #232]	; (8009554 <main+0x438>)
 800946a:	224e      	movs	r2, #78	; 0x4e
 800946c:	709a      	strb	r2, [r3, #2]
                        Buffer[3] = 'G';
 800946e:	4b39      	ldr	r3, [pc, #228]	; (8009554 <main+0x438>)
 8009470:	2247      	movs	r2, #71	; 0x47
 8009472:	70da      	strb	r2, [r3, #3]
                        // We fill the buffer with numbers for the payload
                        for(int i = 4; i < BufferSize; i++ )
 8009474:	2304      	movs	r3, #4
 8009476:	627b      	str	r3, [r7, #36]	; 0x24
 8009478:	e00b      	b.n	8009492 <main+0x376>
                        {
                            Buffer[i] = i - 4;
 800947a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800947c:	b2db      	uxtb	r3, r3
 800947e:	3b04      	subs	r3, #4
 8009480:	b2d9      	uxtb	r1, r3
 8009482:	4a34      	ldr	r2, [pc, #208]	; (8009554 <main+0x438>)
 8009484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009486:	18d3      	adds	r3, r2, r3
 8009488:	1c0a      	adds	r2, r1, #0
 800948a:	701a      	strb	r2, [r3, #0]
                        for(int i = 4; i < BufferSize; i++ )
 800948c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948e:	3301      	adds	r3, #1
 8009490:	627b      	str	r3, [r7, #36]	; 0x24
 8009492:	4b2e      	ldr	r3, [pc, #184]	; (800954c <main+0x430>)
 8009494:	881b      	ldrh	r3, [r3, #0]
 8009496:	001a      	movs	r2, r3
 8009498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800949a:	429a      	cmp	r2, r3
 800949c:	dced      	bgt.n	800947a <main+0x35e>
                        }
                        DelayMs( 1 );
 800949e:	2001      	movs	r0, #1
 80094a0:	f7f8 ff32 	bl	8002308 <HAL_Delay>
                        Radio.Send( Buffer, BufferSize );
 80094a4:	4b18      	ldr	r3, [pc, #96]	; (8009508 <main+0x3ec>)
 80094a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094a8:	4a28      	ldr	r2, [pc, #160]	; (800954c <main+0x430>)
 80094aa:	8812      	ldrh	r2, [r2, #0]
 80094ac:	b2d1      	uxtb	r1, r2
 80094ae:	4a29      	ldr	r2, [pc, #164]	; (8009554 <main+0x438>)
 80094b0:	0010      	movs	r0, r2
 80094b2:	4798      	blx	r3

                    	HAL_UART_Transmit(&huart1, (uint8_t*)"...PONG\n\r", 9, 1000);
 80094b4:	23fa      	movs	r3, #250	; 0xfa
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	492a      	ldr	r1, [pc, #168]	; (8009564 <main+0x448>)
 80094ba:	4817      	ldr	r0, [pc, #92]	; (8009518 <main+0x3fc>)
 80094bc:	2209      	movs	r2, #9
 80094be:	f7fb fc1b 	bl	8004cf8 <HAL_UART_Transmit>
 80094c2:	e008      	b.n	80094d6 <main+0x3ba>
                        //PRINTF("...PONG\n\r");
                    }
                    else // valid reception but not a PING as expected
                    {    // Set device as master and start again
                        isMaster = true;
 80094c4:	232f      	movs	r3, #47	; 0x2f
 80094c6:	18fb      	adds	r3, r7, r3
 80094c8:	2201      	movs	r2, #1
 80094ca:	701a      	strb	r2, [r3, #0]
                        Radio.Rx( RX_TIMEOUT_VALUE );
 80094cc:	4b0e      	ldr	r3, [pc, #56]	; (8009508 <main+0x3ec>)
 80094ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094d0:	4a1b      	ldr	r2, [pc, #108]	; (8009540 <main+0x424>)
 80094d2:	0010      	movs	r0, r2
 80094d4:	4798      	blx	r3
                    }
                }
            }
            State = LOWPOWER;
 80094d6:	4b1b      	ldr	r3, [pc, #108]	; (8009544 <main+0x428>)
 80094d8:	2200      	movs	r2, #0
 80094da:	701a      	strb	r2, [r3, #0]
            break;
 80094dc:	e089      	b.n	80095f2 <main+0x4d6>
        case TX:
            // Indicates on a LED that we have sent a PING [Master]
            // Indicates on a LED that we have sent a PONG [Slave]
            //GpioWrite( &Led2, GpioRead( &Led2 ) ^ 1 );
            Radio.Rx( RX_TIMEOUT_VALUE );
 80094de:	4b0a      	ldr	r3, [pc, #40]	; (8009508 <main+0x3ec>)
 80094e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094e2:	4a17      	ldr	r2, [pc, #92]	; (8009540 <main+0x424>)
 80094e4:	0010      	movs	r0, r2
 80094e6:	4798      	blx	r3
            State = LOWPOWER;
 80094e8:	4b16      	ldr	r3, [pc, #88]	; (8009544 <main+0x428>)
 80094ea:	2200      	movs	r2, #0
 80094ec:	701a      	strb	r2, [r3, #0]
            break;
 80094ee:	e080      	b.n	80095f2 <main+0x4d6>
 80094f0:	200009a8 	.word	0x200009a8
 80094f4:	08008f6d 	.word	0x08008f6d
 80094f8:	08008f99 	.word	0x08008f99
 80094fc:	08009045 	.word	0x08009045
 8009500:	08009071 	.word	0x08009071
 8009504:	080090a5 	.word	0x080090a5
 8009508:	0800d700 	.word	0x0800d700
 800950c:	080090d1 	.word	0x080090d1
 8009510:	20000890 	.word	0x20000890
 8009514:	0800d5f0 	.word	0x0800d5f0
 8009518:	20000da0 	.word	0x20000da0
 800951c:	0800d604 	.word	0x0800d604
 8009520:	20000038 	.word	0x20000038
 8009524:	200009c4 	.word	0x200009c4
 8009528:	2000124c 	.word	0x2000124c
 800952c:	0800d608 	.word	0x0800d608
 8009530:	0800d610 	.word	0x0800d610
 8009534:	33bca100 	.word	0x33bca100
 8009538:	20000034 	.word	0x20000034
 800953c:	00000bb8 	.word	0x00000bb8
 8009540:	00002710 	.word	0x00002710
 8009544:	20000030 	.word	0x20000030
 8009548:	0800d8a0 	.word	0x0800d8a0
 800954c:	20000032 	.word	0x20000032
 8009550:	0800d898 	.word	0x0800d898
 8009554:	20001244 	.word	0x20001244
 8009558:	50000400 	.word	0x50000400
 800955c:	0800d620 	.word	0x0800d620
 8009560:	0800d890 	.word	0x0800d890
 8009564:	0800d62c 	.word	0x0800d62c
        case RX_TIMEOUT:
        case RX_ERROR:
            if( isMaster == true )
 8009568:	232f      	movs	r3, #47	; 0x2f
 800956a:	18fb      	adds	r3, r7, r3
 800956c:	781b      	ldrb	r3, [r3, #0]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d02c      	beq.n	80095cc <main+0x4b0>
            {
                // Send the next PING frame
                Buffer[0] = 'P';
 8009572:	4b21      	ldr	r3, [pc, #132]	; (80095f8 <main+0x4dc>)
 8009574:	2250      	movs	r2, #80	; 0x50
 8009576:	701a      	strb	r2, [r3, #0]
                Buffer[1] = 'I';
 8009578:	4b1f      	ldr	r3, [pc, #124]	; (80095f8 <main+0x4dc>)
 800957a:	2249      	movs	r2, #73	; 0x49
 800957c:	705a      	strb	r2, [r3, #1]
                Buffer[2] = 'N';
 800957e:	4b1e      	ldr	r3, [pc, #120]	; (80095f8 <main+0x4dc>)
 8009580:	224e      	movs	r2, #78	; 0x4e
 8009582:	709a      	strb	r2, [r3, #2]
                Buffer[3] = 'G';
 8009584:	4b1c      	ldr	r3, [pc, #112]	; (80095f8 <main+0x4dc>)
 8009586:	2247      	movs	r2, #71	; 0x47
 8009588:	70da      	strb	r2, [r3, #3]
                for(int i = 4; i < BufferSize; i++ )
 800958a:	2304      	movs	r3, #4
 800958c:	623b      	str	r3, [r7, #32]
 800958e:	e00b      	b.n	80095a8 <main+0x48c>
                {
                    Buffer[i] = i - 4;
 8009590:	6a3b      	ldr	r3, [r7, #32]
 8009592:	b2db      	uxtb	r3, r3
 8009594:	3b04      	subs	r3, #4
 8009596:	b2d9      	uxtb	r1, r3
 8009598:	4a17      	ldr	r2, [pc, #92]	; (80095f8 <main+0x4dc>)
 800959a:	6a3b      	ldr	r3, [r7, #32]
 800959c:	18d3      	adds	r3, r2, r3
 800959e:	1c0a      	adds	r2, r1, #0
 80095a0:	701a      	strb	r2, [r3, #0]
                for(int i = 4; i < BufferSize; i++ )
 80095a2:	6a3b      	ldr	r3, [r7, #32]
 80095a4:	3301      	adds	r3, #1
 80095a6:	623b      	str	r3, [r7, #32]
 80095a8:	4b14      	ldr	r3, [pc, #80]	; (80095fc <main+0x4e0>)
 80095aa:	881b      	ldrh	r3, [r3, #0]
 80095ac:	001a      	movs	r2, r3
 80095ae:	6a3b      	ldr	r3, [r7, #32]
 80095b0:	429a      	cmp	r2, r3
 80095b2:	dced      	bgt.n	8009590 <main+0x474>
                }
                DelayMs( 1 );
 80095b4:	2001      	movs	r0, #1
 80095b6:	f7f8 fea7 	bl	8002308 <HAL_Delay>
                Radio.Send( Buffer, BufferSize );
 80095ba:	4b11      	ldr	r3, [pc, #68]	; (8009600 <main+0x4e4>)
 80095bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095be:	4a0f      	ldr	r2, [pc, #60]	; (80095fc <main+0x4e0>)
 80095c0:	8812      	ldrh	r2, [r2, #0]
 80095c2:	b2d1      	uxtb	r1, r2
 80095c4:	4a0c      	ldr	r2, [pc, #48]	; (80095f8 <main+0x4dc>)
 80095c6:	0010      	movs	r0, r2
 80095c8:	4798      	blx	r3
 80095ca:	e004      	b.n	80095d6 <main+0x4ba>
            }
            else
            {
                Radio.Rx( RX_TIMEOUT_VALUE );
 80095cc:	4b0c      	ldr	r3, [pc, #48]	; (8009600 <main+0x4e4>)
 80095ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095d0:	4a0c      	ldr	r2, [pc, #48]	; (8009604 <main+0x4e8>)
 80095d2:	0010      	movs	r0, r2
 80095d4:	4798      	blx	r3
            }
            State = LOWPOWER;
 80095d6:	4b0c      	ldr	r3, [pc, #48]	; (8009608 <main+0x4ec>)
 80095d8:	2200      	movs	r2, #0
 80095da:	701a      	strb	r2, [r3, #0]
            break;
 80095dc:	e009      	b.n	80095f2 <main+0x4d6>
        case TX_TIMEOUT:
            Radio.Rx( RX_TIMEOUT_VALUE );
 80095de:	4b08      	ldr	r3, [pc, #32]	; (8009600 <main+0x4e4>)
 80095e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095e2:	4a08      	ldr	r2, [pc, #32]	; (8009604 <main+0x4e8>)
 80095e4:	0010      	movs	r0, r2
 80095e6:	4798      	blx	r3
            State = LOWPOWER;
 80095e8:	4b07      	ldr	r3, [pc, #28]	; (8009608 <main+0x4ec>)
 80095ea:	2200      	movs	r2, #0
 80095ec:	701a      	strb	r2, [r3, #0]
            break;
 80095ee:	e000      	b.n	80095f2 <main+0x4d6>
        case LOWPOWER:
        default:
            // Set low power
            break;
 80095f0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("cpsid i" : : : "memory");
 80095f2:	b672      	cpsid	i
  __ASM volatile ("cpsie i" : : : "memory");
 80095f4:	b662      	cpsie	i
        switch( State )
 80095f6:	e67f      	b.n	80092f8 <main+0x1dc>
 80095f8:	20001244 	.word	0x20001244
 80095fc:	20000032 	.word	0x20000032
 8009600:	0800d700 	.word	0x0800d700
 8009604:	00002710 	.word	0x00002710
 8009608:	20000030 	.word	0x20000030

0800960c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b09c      	sub	sp, #112	; 0x70
 8009610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009612:	2338      	movs	r3, #56	; 0x38
 8009614:	18fb      	adds	r3, r7, r3
 8009616:	0018      	movs	r0, r3
 8009618:	2338      	movs	r3, #56	; 0x38
 800961a:	001a      	movs	r2, r3
 800961c:	2100      	movs	r1, #0
 800961e:	f001 f890 	bl	800a742 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009622:	2324      	movs	r3, #36	; 0x24
 8009624:	18fb      	adds	r3, r7, r3
 8009626:	0018      	movs	r0, r3
 8009628:	2314      	movs	r3, #20
 800962a:	001a      	movs	r2, r3
 800962c:	2100      	movs	r1, #0
 800962e:	f001 f888 	bl	800a742 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009632:	003b      	movs	r3, r7
 8009634:	0018      	movs	r0, r3
 8009636:	2324      	movs	r3, #36	; 0x24
 8009638:	001a      	movs	r2, r3
 800963a:	2100      	movs	r1, #0
 800963c:	f001 f881 	bl	800a742 <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009640:	4b35      	ldr	r3, [pc, #212]	; (8009718 <SystemClock_Config+0x10c>)
 8009642:	4a35      	ldr	r2, [pc, #212]	; (8009718 <SystemClock_Config+0x10c>)
 8009644:	6812      	ldr	r2, [r2, #0]
 8009646:	4935      	ldr	r1, [pc, #212]	; (800971c <SystemClock_Config+0x110>)
 8009648:	400a      	ands	r2, r1
 800964a:	2180      	movs	r1, #128	; 0x80
 800964c:	0109      	lsls	r1, r1, #4
 800964e:	430a      	orrs	r2, r1
 8009650:	601a      	str	r2, [r3, #0]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8009652:	2338      	movs	r3, #56	; 0x38
 8009654:	18fb      	adds	r3, r7, r3
 8009656:	220a      	movs	r2, #10
 8009658:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800965a:	2338      	movs	r3, #56	; 0x38
 800965c:	18fb      	adds	r3, r7, r3
 800965e:	2201      	movs	r2, #1
 8009660:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8009662:	2338      	movs	r3, #56	; 0x38
 8009664:	18fb      	adds	r3, r7, r3
 8009666:	2210      	movs	r2, #16
 8009668:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800966a:	2338      	movs	r3, #56	; 0x38
 800966c:	18fb      	adds	r3, r7, r3
 800966e:	2201      	movs	r2, #1
 8009670:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009672:	2338      	movs	r3, #56	; 0x38
 8009674:	18fb      	adds	r3, r7, r3
 8009676:	2202      	movs	r2, #2
 8009678:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800967a:	2338      	movs	r3, #56	; 0x38
 800967c:	18fb      	adds	r3, r7, r3
 800967e:	2200      	movs	r2, #0
 8009680:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 8009682:	2338      	movs	r3, #56	; 0x38
 8009684:	18fb      	adds	r3, r7, r3
 8009686:	2280      	movs	r2, #128	; 0x80
 8009688:	0312      	lsls	r2, r2, #12
 800968a:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 800968c:	2338      	movs	r3, #56	; 0x38
 800968e:	18fb      	adds	r3, r7, r3
 8009690:	2280      	movs	r2, #128	; 0x80
 8009692:	0412      	lsls	r2, r2, #16
 8009694:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009696:	2338      	movs	r3, #56	; 0x38
 8009698:	18fb      	adds	r3, r7, r3
 800969a:	0018      	movs	r0, r3
 800969c:	f7f9 fa70 	bl	8002b80 <HAL_RCC_OscConfig>
 80096a0:	1e03      	subs	r3, r0, #0
 80096a2:	d001      	beq.n	80096a8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80096a4:	f000 fad6 	bl	8009c54 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80096a8:	2324      	movs	r3, #36	; 0x24
 80096aa:	18fb      	adds	r3, r7, r3
 80096ac:	220f      	movs	r2, #15
 80096ae:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80096b0:	2324      	movs	r3, #36	; 0x24
 80096b2:	18fb      	adds	r3, r7, r3
 80096b4:	2203      	movs	r2, #3
 80096b6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80096b8:	2324      	movs	r3, #36	; 0x24
 80096ba:	18fb      	adds	r3, r7, r3
 80096bc:	2200      	movs	r2, #0
 80096be:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80096c0:	2324      	movs	r3, #36	; 0x24
 80096c2:	18fb      	adds	r3, r7, r3
 80096c4:	2200      	movs	r2, #0
 80096c6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80096c8:	2324      	movs	r3, #36	; 0x24
 80096ca:	18fb      	adds	r3, r7, r3
 80096cc:	2200      	movs	r2, #0
 80096ce:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80096d0:	2324      	movs	r3, #36	; 0x24
 80096d2:	18fb      	adds	r3, r7, r3
 80096d4:	2101      	movs	r1, #1
 80096d6:	0018      	movs	r0, r3
 80096d8:	f7f9 fe1e 	bl	8003318 <HAL_RCC_ClockConfig>
 80096dc:	1e03      	subs	r3, r0, #0
 80096de:	d001      	beq.n	80096e4 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80096e0:	f000 fab8 	bl	8009c54 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80096e4:	003b      	movs	r3, r7
 80096e6:	2223      	movs	r2, #35	; 0x23
 80096e8:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80096ea:	003b      	movs	r3, r7
 80096ec:	2200      	movs	r2, #0
 80096ee:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80096f0:	003b      	movs	r3, r7
 80096f2:	2200      	movs	r2, #0
 80096f4:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80096f6:	003b      	movs	r3, r7
 80096f8:	2280      	movs	r2, #128	; 0x80
 80096fa:	0292      	lsls	r2, r2, #10
 80096fc:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80096fe:	003b      	movs	r3, r7
 8009700:	0018      	movs	r0, r3
 8009702:	f7f9 ffdb 	bl	80036bc <HAL_RCCEx_PeriphCLKConfig>
 8009706:	1e03      	subs	r3, r0, #0
 8009708:	d001      	beq.n	800970e <SystemClock_Config+0x102>
  {
    Error_Handler();
 800970a:	f000 faa3 	bl	8009c54 <Error_Handler>
  }
}
 800970e:	46c0      	nop			; (mov r8, r8)
 8009710:	46bd      	mov	sp, r7
 8009712:	b01c      	add	sp, #112	; 0x70
 8009714:	bd80      	pop	{r7, pc}
 8009716:	46c0      	nop			; (mov r8, r8)
 8009718:	40007000 	.word	0x40007000
 800971c:	ffffe7ff 	.word	0xffffe7ff

08009720 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b090      	sub	sp, #64	; 0x40
 8009724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8009726:	232c      	movs	r3, #44	; 0x2c
 8009728:	18fb      	adds	r3, r7, r3
 800972a:	0018      	movs	r0, r3
 800972c:	2314      	movs	r3, #20
 800972e:	001a      	movs	r2, r3
 8009730:	2100      	movs	r1, #0
 8009732:	f001 f806 	bl	800a742 <memset>
  RTC_DateTypeDef sDate = {0};
 8009736:	2328      	movs	r3, #40	; 0x28
 8009738:	18fb      	adds	r3, r7, r3
 800973a:	2200      	movs	r2, #0
 800973c:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 800973e:	003b      	movs	r3, r7
 8009740:	0018      	movs	r0, r3
 8009742:	2328      	movs	r3, #40	; 0x28
 8009744:	001a      	movs	r2, r3
 8009746:	2100      	movs	r1, #0
 8009748:	f000 fffb 	bl	800a742 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /**Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800974c:	4b45      	ldr	r3, [pc, #276]	; (8009864 <MX_RTC_Init+0x144>)
 800974e:	4a46      	ldr	r2, [pc, #280]	; (8009868 <MX_RTC_Init+0x148>)
 8009750:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8009752:	4b44      	ldr	r3, [pc, #272]	; (8009864 <MX_RTC_Init+0x144>)
 8009754:	2200      	movs	r2, #0
 8009756:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 31;
 8009758:	4b42      	ldr	r3, [pc, #264]	; (8009864 <MX_RTC_Init+0x144>)
 800975a:	221f      	movs	r2, #31
 800975c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 1023;
 800975e:	4b41      	ldr	r3, [pc, #260]	; (8009864 <MX_RTC_Init+0x144>)
 8009760:	4a42      	ldr	r2, [pc, #264]	; (800986c <MX_RTC_Init+0x14c>)
 8009762:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8009764:	4b3f      	ldr	r3, [pc, #252]	; (8009864 <MX_RTC_Init+0x144>)
 8009766:	2200      	movs	r2, #0
 8009768:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800976a:	4b3e      	ldr	r3, [pc, #248]	; (8009864 <MX_RTC_Init+0x144>)
 800976c:	2200      	movs	r2, #0
 800976e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8009770:	4b3c      	ldr	r3, [pc, #240]	; (8009864 <MX_RTC_Init+0x144>)
 8009772:	2200      	movs	r2, #0
 8009774:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8009776:	4b3b      	ldr	r3, [pc, #236]	; (8009864 <MX_RTC_Init+0x144>)
 8009778:	2200      	movs	r2, #0
 800977a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800977c:	4b39      	ldr	r3, [pc, #228]	; (8009864 <MX_RTC_Init+0x144>)
 800977e:	0018      	movs	r0, r3
 8009780:	f7fa f8ee 	bl	8003960 <HAL_RTC_Init>
 8009784:	1e03      	subs	r3, r0, #0
 8009786:	d001      	beq.n	800978c <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8009788:	f000 fa64 	bl	8009c54 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /**Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0;
 800978c:	232c      	movs	r3, #44	; 0x2c
 800978e:	18fb      	adds	r3, r7, r3
 8009790:	2200      	movs	r2, #0
 8009792:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8009794:	232c      	movs	r3, #44	; 0x2c
 8009796:	18fb      	adds	r3, r7, r3
 8009798:	2200      	movs	r2, #0
 800979a:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 800979c:	232c      	movs	r3, #44	; 0x2c
 800979e:	18fb      	adds	r3, r7, r3
 80097a0:	2200      	movs	r2, #0
 80097a2:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80097a4:	232c      	movs	r3, #44	; 0x2c
 80097a6:	18fb      	adds	r3, r7, r3
 80097a8:	2200      	movs	r2, #0
 80097aa:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80097ac:	232c      	movs	r3, #44	; 0x2c
 80097ae:	18fb      	adds	r3, r7, r3
 80097b0:	2200      	movs	r2, #0
 80097b2:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80097b4:	232c      	movs	r3, #44	; 0x2c
 80097b6:	18f9      	adds	r1, r7, r3
 80097b8:	4b2a      	ldr	r3, [pc, #168]	; (8009864 <MX_RTC_Init+0x144>)
 80097ba:	2200      	movs	r2, #0
 80097bc:	0018      	movs	r0, r3
 80097be:	f7fa f96d 	bl	8003a9c <HAL_RTC_SetTime>
 80097c2:	1e03      	subs	r3, r0, #0
 80097c4:	d001      	beq.n	80097ca <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 80097c6:	f000 fa45 	bl	8009c54 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80097ca:	2328      	movs	r3, #40	; 0x28
 80097cc:	18fb      	adds	r3, r7, r3
 80097ce:	2201      	movs	r2, #1
 80097d0:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80097d2:	2328      	movs	r3, #40	; 0x28
 80097d4:	18fb      	adds	r3, r7, r3
 80097d6:	2201      	movs	r2, #1
 80097d8:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 80097da:	2328      	movs	r3, #40	; 0x28
 80097dc:	18fb      	adds	r3, r7, r3
 80097de:	2201      	movs	r2, #1
 80097e0:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 80097e2:	2328      	movs	r3, #40	; 0x28
 80097e4:	18fb      	adds	r3, r7, r3
 80097e6:	2200      	movs	r2, #0
 80097e8:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80097ea:	2328      	movs	r3, #40	; 0x28
 80097ec:	18f9      	adds	r1, r7, r3
 80097ee:	4b1d      	ldr	r3, [pc, #116]	; (8009864 <MX_RTC_Init+0x144>)
 80097f0:	2200      	movs	r2, #0
 80097f2:	0018      	movs	r0, r3
 80097f4:	f7fa fa72 	bl	8003cdc <HAL_RTC_SetDate>
 80097f8:	1e03      	subs	r3, r0, #0
 80097fa:	d001      	beq.n	8009800 <MX_RTC_Init+0xe0>
  {
    Error_Handler();
 80097fc:	f000 fa2a 	bl	8009c54 <Error_Handler>
  }
  /**Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0;
 8009800:	003b      	movs	r3, r7
 8009802:	2200      	movs	r2, #0
 8009804:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8009806:	003b      	movs	r3, r7
 8009808:	2200      	movs	r2, #0
 800980a:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 800980c:	003b      	movs	r3, r7
 800980e:	2200      	movs	r2, #0
 8009810:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8009812:	003b      	movs	r3, r7
 8009814:	2200      	movs	r2, #0
 8009816:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8009818:	003b      	movs	r3, r7
 800981a:	2200      	movs	r2, #0
 800981c:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800981e:	003b      	movs	r3, r7
 8009820:	2200      	movs	r2, #0
 8009822:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8009824:	003b      	movs	r3, r7
 8009826:	2200      	movs	r2, #0
 8009828:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 800982a:	003b      	movs	r3, r7
 800982c:	22f0      	movs	r2, #240	; 0xf0
 800982e:	0512      	lsls	r2, r2, #20
 8009830:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8009832:	003b      	movs	r3, r7
 8009834:	2200      	movs	r2, #0
 8009836:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8009838:	003b      	movs	r3, r7
 800983a:	2220      	movs	r2, #32
 800983c:	2101      	movs	r1, #1
 800983e:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8009840:	003b      	movs	r3, r7
 8009842:	2280      	movs	r2, #128	; 0x80
 8009844:	0052      	lsls	r2, r2, #1
 8009846:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8009848:	0039      	movs	r1, r7
 800984a:	4b06      	ldr	r3, [pc, #24]	; (8009864 <MX_RTC_Init+0x144>)
 800984c:	2200      	movs	r2, #0
 800984e:	0018      	movs	r0, r3
 8009850:	f7fa fb40 	bl	8003ed4 <HAL_RTC_SetAlarm_IT>
 8009854:	1e03      	subs	r3, r0, #0
 8009856:	d001      	beq.n	800985c <MX_RTC_Init+0x13c>
  {
    Error_Handler();
 8009858:	f000 f9fc 	bl	8009c54 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800985c:	46c0      	nop			; (mov r8, r8)
 800985e:	46bd      	mov	sp, r7
 8009860:	b010      	add	sp, #64	; 0x40
 8009862:	bd80      	pop	{r7, pc}
 8009864:	20001220 	.word	0x20001220
 8009868:	40002800 	.word	0x40002800
 800986c:	000003ff 	.word	0x000003ff

08009870 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8009874:	4b18      	ldr	r3, [pc, #96]	; (80098d8 <MX_SPI1_Init+0x68>)
 8009876:	4a19      	ldr	r2, [pc, #100]	; (80098dc <MX_SPI1_Init+0x6c>)
 8009878:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800987a:	4b17      	ldr	r3, [pc, #92]	; (80098d8 <MX_SPI1_Init+0x68>)
 800987c:	2282      	movs	r2, #130	; 0x82
 800987e:	0052      	lsls	r2, r2, #1
 8009880:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8009882:	4b15      	ldr	r3, [pc, #84]	; (80098d8 <MX_SPI1_Init+0x68>)
 8009884:	2200      	movs	r2, #0
 8009886:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8009888:	4b13      	ldr	r3, [pc, #76]	; (80098d8 <MX_SPI1_Init+0x68>)
 800988a:	2200      	movs	r2, #0
 800988c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800988e:	4b12      	ldr	r3, [pc, #72]	; (80098d8 <MX_SPI1_Init+0x68>)
 8009890:	2200      	movs	r2, #0
 8009892:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009894:	4b10      	ldr	r3, [pc, #64]	; (80098d8 <MX_SPI1_Init+0x68>)
 8009896:	2200      	movs	r2, #0
 8009898:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800989a:	4b0f      	ldr	r3, [pc, #60]	; (80098d8 <MX_SPI1_Init+0x68>)
 800989c:	2280      	movs	r2, #128	; 0x80
 800989e:	0092      	lsls	r2, r2, #2
 80098a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80098a2:	4b0d      	ldr	r3, [pc, #52]	; (80098d8 <MX_SPI1_Init+0x68>)
 80098a4:	2208      	movs	r2, #8
 80098a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80098a8:	4b0b      	ldr	r3, [pc, #44]	; (80098d8 <MX_SPI1_Init+0x68>)
 80098aa:	2200      	movs	r2, #0
 80098ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80098ae:	4b0a      	ldr	r3, [pc, #40]	; (80098d8 <MX_SPI1_Init+0x68>)
 80098b0:	2200      	movs	r2, #0
 80098b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80098b4:	4b08      	ldr	r3, [pc, #32]	; (80098d8 <MX_SPI1_Init+0x68>)
 80098b6:	2200      	movs	r2, #0
 80098b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80098ba:	4b07      	ldr	r3, [pc, #28]	; (80098d8 <MX_SPI1_Init+0x68>)
 80098bc:	2207      	movs	r2, #7
 80098be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80098c0:	4b05      	ldr	r3, [pc, #20]	; (80098d8 <MX_SPI1_Init+0x68>)
 80098c2:	0018      	movs	r0, r3
 80098c4:	f7fa fde8 	bl	8004498 <HAL_SPI_Init>
 80098c8:	1e03      	subs	r3, r0, #0
 80098ca:	d001      	beq.n	80098d0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80098cc:	f000 f9c2 	bl	8009c54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80098d0:	46c0      	nop			; (mov r8, r8)
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}
 80098d6:	46c0      	nop			; (mov r8, r8)
 80098d8:	2000124c 	.word	0x2000124c
 80098dc:	40013000 	.word	0x40013000

080098e0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80098e4:	4b18      	ldr	r3, [pc, #96]	; (8009948 <MX_SPI2_Init+0x68>)
 80098e6:	4a19      	ldr	r2, [pc, #100]	; (800994c <MX_SPI2_Init+0x6c>)
 80098e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80098ea:	4b17      	ldr	r3, [pc, #92]	; (8009948 <MX_SPI2_Init+0x68>)
 80098ec:	2282      	movs	r2, #130	; 0x82
 80098ee:	0052      	lsls	r2, r2, #1
 80098f0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80098f2:	4b15      	ldr	r3, [pc, #84]	; (8009948 <MX_SPI2_Init+0x68>)
 80098f4:	2200      	movs	r2, #0
 80098f6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80098f8:	4b13      	ldr	r3, [pc, #76]	; (8009948 <MX_SPI2_Init+0x68>)
 80098fa:	2200      	movs	r2, #0
 80098fc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80098fe:	4b12      	ldr	r3, [pc, #72]	; (8009948 <MX_SPI2_Init+0x68>)
 8009900:	2200      	movs	r2, #0
 8009902:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009904:	4b10      	ldr	r3, [pc, #64]	; (8009948 <MX_SPI2_Init+0x68>)
 8009906:	2200      	movs	r2, #0
 8009908:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800990a:	4b0f      	ldr	r3, [pc, #60]	; (8009948 <MX_SPI2_Init+0x68>)
 800990c:	2280      	movs	r2, #128	; 0x80
 800990e:	0092      	lsls	r2, r2, #2
 8009910:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8009912:	4b0d      	ldr	r3, [pc, #52]	; (8009948 <MX_SPI2_Init+0x68>)
 8009914:	2230      	movs	r2, #48	; 0x30
 8009916:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009918:	4b0b      	ldr	r3, [pc, #44]	; (8009948 <MX_SPI2_Init+0x68>)
 800991a:	2200      	movs	r2, #0
 800991c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800991e:	4b0a      	ldr	r3, [pc, #40]	; (8009948 <MX_SPI2_Init+0x68>)
 8009920:	2200      	movs	r2, #0
 8009922:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009924:	4b08      	ldr	r3, [pc, #32]	; (8009948 <MX_SPI2_Init+0x68>)
 8009926:	2200      	movs	r2, #0
 8009928:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800992a:	4b07      	ldr	r3, [pc, #28]	; (8009948 <MX_SPI2_Init+0x68>)
 800992c:	2207      	movs	r2, #7
 800992e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8009930:	4b05      	ldr	r3, [pc, #20]	; (8009948 <MX_SPI2_Init+0x68>)
 8009932:	0018      	movs	r0, r3
 8009934:	f7fa fdb0 	bl	8004498 <HAL_SPI_Init>
 8009938:	1e03      	subs	r3, r0, #0
 800993a:	d001      	beq.n	8009940 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800993c:	f000 f98a 	bl	8009c54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8009940:	46c0      	nop			; (mov r8, r8)
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
 8009946:	46c0      	nop			; (mov r8, r8)
 8009948:	20000ab8 	.word	0x20000ab8
 800994c:	40003800 	.word	0x40003800

08009950 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009954:	4b14      	ldr	r3, [pc, #80]	; (80099a8 <MX_USART1_UART_Init+0x58>)
 8009956:	4a15      	ldr	r2, [pc, #84]	; (80099ac <MX_USART1_UART_Init+0x5c>)
 8009958:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800995a:	4b13      	ldr	r3, [pc, #76]	; (80099a8 <MX_USART1_UART_Init+0x58>)
 800995c:	2296      	movs	r2, #150	; 0x96
 800995e:	0192      	lsls	r2, r2, #6
 8009960:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009962:	4b11      	ldr	r3, [pc, #68]	; (80099a8 <MX_USART1_UART_Init+0x58>)
 8009964:	2200      	movs	r2, #0
 8009966:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009968:	4b0f      	ldr	r3, [pc, #60]	; (80099a8 <MX_USART1_UART_Init+0x58>)
 800996a:	2200      	movs	r2, #0
 800996c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800996e:	4b0e      	ldr	r3, [pc, #56]	; (80099a8 <MX_USART1_UART_Init+0x58>)
 8009970:	2200      	movs	r2, #0
 8009972:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009974:	4b0c      	ldr	r3, [pc, #48]	; (80099a8 <MX_USART1_UART_Init+0x58>)
 8009976:	220c      	movs	r2, #12
 8009978:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800997a:	4b0b      	ldr	r3, [pc, #44]	; (80099a8 <MX_USART1_UART_Init+0x58>)
 800997c:	2200      	movs	r2, #0
 800997e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009980:	4b09      	ldr	r3, [pc, #36]	; (80099a8 <MX_USART1_UART_Init+0x58>)
 8009982:	2200      	movs	r2, #0
 8009984:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009986:	4b08      	ldr	r3, [pc, #32]	; (80099a8 <MX_USART1_UART_Init+0x58>)
 8009988:	2200      	movs	r2, #0
 800998a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800998c:	4b06      	ldr	r3, [pc, #24]	; (80099a8 <MX_USART1_UART_Init+0x58>)
 800998e:	2200      	movs	r2, #0
 8009990:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009992:	4b05      	ldr	r3, [pc, #20]	; (80099a8 <MX_USART1_UART_Init+0x58>)
 8009994:	0018      	movs	r0, r3
 8009996:	f7fb f95b 	bl	8004c50 <HAL_UART_Init>
 800999a:	1e03      	subs	r3, r0, #0
 800999c:	d001      	beq.n	80099a2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800999e:	f000 f959 	bl	8009c54 <Error_Handler>
  /* USER CODE BEGIN USART1_Init 2 */


  /* USER CODE END USART1_Init 2 */

}
 80099a2:	46c0      	nop			; (mov r8, r8)
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}
 80099a8:	20000da0 	.word	0x20000da0
 80099ac:	40013800 	.word	0x40013800

080099b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80099b4:	4b14      	ldr	r3, [pc, #80]	; (8009a08 <MX_USART2_UART_Init+0x58>)
 80099b6:	4a15      	ldr	r2, [pc, #84]	; (8009a0c <MX_USART2_UART_Init+0x5c>)
 80099b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80099ba:	4b13      	ldr	r3, [pc, #76]	; (8009a08 <MX_USART2_UART_Init+0x58>)
 80099bc:	22e1      	movs	r2, #225	; 0xe1
 80099be:	0252      	lsls	r2, r2, #9
 80099c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80099c2:	4b11      	ldr	r3, [pc, #68]	; (8009a08 <MX_USART2_UART_Init+0x58>)
 80099c4:	2200      	movs	r2, #0
 80099c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80099c8:	4b0f      	ldr	r3, [pc, #60]	; (8009a08 <MX_USART2_UART_Init+0x58>)
 80099ca:	2200      	movs	r2, #0
 80099cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80099ce:	4b0e      	ldr	r3, [pc, #56]	; (8009a08 <MX_USART2_UART_Init+0x58>)
 80099d0:	2200      	movs	r2, #0
 80099d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80099d4:	4b0c      	ldr	r3, [pc, #48]	; (8009a08 <MX_USART2_UART_Init+0x58>)
 80099d6:	220c      	movs	r2, #12
 80099d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80099da:	4b0b      	ldr	r3, [pc, #44]	; (8009a08 <MX_USART2_UART_Init+0x58>)
 80099dc:	2200      	movs	r2, #0
 80099de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80099e0:	4b09      	ldr	r3, [pc, #36]	; (8009a08 <MX_USART2_UART_Init+0x58>)
 80099e2:	2200      	movs	r2, #0
 80099e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80099e6:	4b08      	ldr	r3, [pc, #32]	; (8009a08 <MX_USART2_UART_Init+0x58>)
 80099e8:	2200      	movs	r2, #0
 80099ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80099ec:	4b06      	ldr	r3, [pc, #24]	; (8009a08 <MX_USART2_UART_Init+0x58>)
 80099ee:	2200      	movs	r2, #0
 80099f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80099f2:	4b05      	ldr	r3, [pc, #20]	; (8009a08 <MX_USART2_UART_Init+0x58>)
 80099f4:	0018      	movs	r0, r3
 80099f6:	f7fb f92b 	bl	8004c50 <HAL_UART_Init>
 80099fa:	1e03      	subs	r3, r0, #0
 80099fc:	d001      	beq.n	8009a02 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80099fe:	f000 f929 	bl	8009c54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8009a02:	46c0      	nop			; (mov r8, r8)
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}
 8009a08:	200012a4 	.word	0x200012a4
 8009a0c:	40004400 	.word	0x40004400

08009a10 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b082      	sub	sp, #8
 8009a14:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8009a16:	4b10      	ldr	r3, [pc, #64]	; (8009a58 <MX_DMA_Init+0x48>)
 8009a18:	4a0f      	ldr	r2, [pc, #60]	; (8009a58 <MX_DMA_Init+0x48>)
 8009a1a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009a1c:	2101      	movs	r1, #1
 8009a1e:	430a      	orrs	r2, r1
 8009a20:	631a      	str	r2, [r3, #48]	; 0x30
 8009a22:	4b0d      	ldr	r3, [pc, #52]	; (8009a58 <MX_DMA_Init+0x48>)
 8009a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a26:	2201      	movs	r2, #1
 8009a28:	4013      	ands	r3, r2
 8009a2a:	607b      	str	r3, [r7, #4]
 8009a2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8009a2e:	2200      	movs	r2, #0
 8009a30:	2100      	movs	r1, #0
 8009a32:	200a      	movs	r0, #10
 8009a34:	f7f8 fd2e 	bl	8002494 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8009a38:	200a      	movs	r0, #10
 8009a3a:	f7f8 fd41 	bl	80024c0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8009a3e:	2200      	movs	r2, #0
 8009a40:	2100      	movs	r1, #0
 8009a42:	200b      	movs	r0, #11
 8009a44:	f7f8 fd26 	bl	8002494 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8009a48:	200b      	movs	r0, #11
 8009a4a:	f7f8 fd39 	bl	80024c0 <HAL_NVIC_EnableIRQ>

}
 8009a4e:	46c0      	nop			; (mov r8, r8)
 8009a50:	46bd      	mov	sp, r7
 8009a52:	b002      	add	sp, #8
 8009a54:	bd80      	pop	{r7, pc}
 8009a56:	46c0      	nop			; (mov r8, r8)
 8009a58:	40021000 	.word	0x40021000

08009a5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b08a      	sub	sp, #40	; 0x28
 8009a60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a62:	2314      	movs	r3, #20
 8009a64:	18fb      	adds	r3, r7, r3
 8009a66:	0018      	movs	r0, r3
 8009a68:	2314      	movs	r3, #20
 8009a6a:	001a      	movs	r2, r3
 8009a6c:	2100      	movs	r1, #0
 8009a6e:	f000 fe68 	bl	800a742 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009a72:	4b72      	ldr	r3, [pc, #456]	; (8009c3c <MX_GPIO_Init+0x1e0>)
 8009a74:	4a71      	ldr	r2, [pc, #452]	; (8009c3c <MX_GPIO_Init+0x1e0>)
 8009a76:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009a78:	2101      	movs	r1, #1
 8009a7a:	430a      	orrs	r2, r1
 8009a7c:	62da      	str	r2, [r3, #44]	; 0x2c
 8009a7e:	4b6f      	ldr	r3, [pc, #444]	; (8009c3c <MX_GPIO_Init+0x1e0>)
 8009a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a82:	2201      	movs	r2, #1
 8009a84:	4013      	ands	r3, r2
 8009a86:	613b      	str	r3, [r7, #16]
 8009a88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009a8a:	4b6c      	ldr	r3, [pc, #432]	; (8009c3c <MX_GPIO_Init+0x1e0>)
 8009a8c:	4a6b      	ldr	r2, [pc, #428]	; (8009c3c <MX_GPIO_Init+0x1e0>)
 8009a8e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009a90:	2102      	movs	r1, #2
 8009a92:	430a      	orrs	r2, r1
 8009a94:	62da      	str	r2, [r3, #44]	; 0x2c
 8009a96:	4b69      	ldr	r3, [pc, #420]	; (8009c3c <MX_GPIO_Init+0x1e0>)
 8009a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a9a:	2202      	movs	r2, #2
 8009a9c:	4013      	ands	r3, r2
 8009a9e:	60fb      	str	r3, [r7, #12]
 8009aa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009aa2:	4b66      	ldr	r3, [pc, #408]	; (8009c3c <MX_GPIO_Init+0x1e0>)
 8009aa4:	4a65      	ldr	r2, [pc, #404]	; (8009c3c <MX_GPIO_Init+0x1e0>)
 8009aa6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009aa8:	2104      	movs	r1, #4
 8009aaa:	430a      	orrs	r2, r1
 8009aac:	62da      	str	r2, [r3, #44]	; 0x2c
 8009aae:	4b63      	ldr	r3, [pc, #396]	; (8009c3c <MX_GPIO_Init+0x1e0>)
 8009ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ab2:	2204      	movs	r2, #4
 8009ab4:	4013      	ands	r3, r2
 8009ab6:	60bb      	str	r3, [r7, #8]
 8009ab8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009aba:	4b60      	ldr	r3, [pc, #384]	; (8009c3c <MX_GPIO_Init+0x1e0>)
 8009abc:	4a5f      	ldr	r2, [pc, #380]	; (8009c3c <MX_GPIO_Init+0x1e0>)
 8009abe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009ac0:	2180      	movs	r1, #128	; 0x80
 8009ac2:	430a      	orrs	r2, r1
 8009ac4:	62da      	str	r2, [r3, #44]	; 0x2c
 8009ac6:	4b5d      	ldr	r3, [pc, #372]	; (8009c3c <MX_GPIO_Init+0x1e0>)
 8009ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aca:	2280      	movs	r2, #128	; 0x80
 8009acc:	4013      	ands	r3, r2
 8009ace:	607b      	str	r3, [r7, #4]
 8009ad0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RADIO_NSS_GPIO_Port, RADIO_NSS_Pin, GPIO_PIN_SET);
 8009ad2:	2380      	movs	r3, #128	; 0x80
 8009ad4:	0219      	lsls	r1, r3, #8
 8009ad6:	23a0      	movs	r3, #160	; 0xa0
 8009ad8:	05db      	lsls	r3, r3, #23
 8009ada:	2201      	movs	r2, #1
 8009adc:	0018      	movs	r0, r3
 8009ade:	f7f8 fff9 	bl	8002ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_GREEN_Pin|LD3_BLUE_Pin|LD4_RED_Pin, GPIO_PIN_RESET);
 8009ae2:	4b57      	ldr	r3, [pc, #348]	; (8009c40 <MX_GPIO_Init+0x1e4>)
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	21e0      	movs	r1, #224	; 0xe0
 8009ae8:	0018      	movs	r0, r3
 8009aea:	f7f8 fff3 	bl	8002ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RADIO_TCXO_VCC_Pin|N5110_nCS_Pin|RADIO_ANT_SWITCH_RX_Pin|N5110_DATA_nCMD_Pin 
 8009aee:	4955      	ldr	r1, [pc, #340]	; (8009c44 <MX_GPIO_Init+0x1e8>)
 8009af0:	23a0      	movs	r3, #160	; 0xa0
 8009af2:	05db      	lsls	r3, r3, #23
 8009af4:	2200      	movs	r2, #0
 8009af6:	0018      	movs	r0, r3
 8009af8:	f7f8 ffec 	bl	8002ad4 <HAL_GPIO_WritePin>
                          |N5110_nRST_Pin|LD2_RED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RADIO_ANT_SWITCH_TX_BOOST_Pin|RADIO_RESET_Pin|RADIO_ANT_SWITCH_TX_RFO_Pin, GPIO_PIN_RESET);
 8009afc:	4b52      	ldr	r3, [pc, #328]	; (8009c48 <MX_GPIO_Init+0x1ec>)
 8009afe:	2200      	movs	r2, #0
 8009b00:	2107      	movs	r1, #7
 8009b02:	0018      	movs	r0, r3
 8009b04:	f7f8 ffe6 	bl	8002ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RADIO_NSS_Pin RADIO_TCXO_VCC_Pin RADIO_ANT_SWITCH_RX_Pin */
  GPIO_InitStruct.Pin = RADIO_NSS_Pin|RADIO_TCXO_VCC_Pin|RADIO_ANT_SWITCH_RX_Pin;
 8009b08:	2314      	movs	r3, #20
 8009b0a:	18fb      	adds	r3, r7, r3
 8009b0c:	4a4f      	ldr	r2, [pc, #316]	; (8009c4c <MX_GPIO_Init+0x1f0>)
 8009b0e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009b10:	2314      	movs	r3, #20
 8009b12:	18fb      	adds	r3, r7, r3
 8009b14:	2201      	movs	r2, #1
 8009b16:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b18:	2314      	movs	r3, #20
 8009b1a:	18fb      	adds	r3, r7, r3
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009b20:	2314      	movs	r3, #20
 8009b22:	18fb      	adds	r3, r7, r3
 8009b24:	2202      	movs	r2, #2
 8009b26:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b28:	2314      	movs	r3, #20
 8009b2a:	18fa      	adds	r2, r7, r3
 8009b2c:	23a0      	movs	r3, #160	; 0xa0
 8009b2e:	05db      	lsls	r3, r3, #23
 8009b30:	0011      	movs	r1, r2
 8009b32:	0018      	movs	r0, r3
 8009b34:	f7f8 fe50 	bl	80027d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_GREEN_Pin LD3_BLUE_Pin LD4_RED_Pin */
  GPIO_InitStruct.Pin = LD1_GREEN_Pin|LD3_BLUE_Pin|LD4_RED_Pin;
 8009b38:	2314      	movs	r3, #20
 8009b3a:	18fb      	adds	r3, r7, r3
 8009b3c:	22e0      	movs	r2, #224	; 0xe0
 8009b3e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009b40:	2314      	movs	r3, #20
 8009b42:	18fb      	adds	r3, r7, r3
 8009b44:	2201      	movs	r2, #1
 8009b46:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b48:	2314      	movs	r3, #20
 8009b4a:	18fb      	adds	r3, r7, r3
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b50:	2314      	movs	r3, #20
 8009b52:	18fb      	adds	r3, r7, r3
 8009b54:	2200      	movs	r2, #0
 8009b56:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009b58:	2314      	movs	r3, #20
 8009b5a:	18fb      	adds	r3, r7, r3
 8009b5c:	4a38      	ldr	r2, [pc, #224]	; (8009c40 <MX_GPIO_Init+0x1e4>)
 8009b5e:	0019      	movs	r1, r3
 8009b60:	0010      	movs	r0, r2
 8009b62:	f7f8 fe39 	bl	80027d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RADIO_DIO_0_Pin RADIO_DIO_1_Pin RADIO_DIO_2_Pin */
  GPIO_InitStruct.Pin = RADIO_DIO_0_Pin|RADIO_DIO_1_Pin|RADIO_DIO_2_Pin;
 8009b66:	2314      	movs	r3, #20
 8009b68:	18fb      	adds	r3, r7, r3
 8009b6a:	2213      	movs	r2, #19
 8009b6c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009b6e:	2314      	movs	r3, #20
 8009b70:	18fb      	adds	r3, r7, r3
 8009b72:	4a37      	ldr	r2, [pc, #220]	; (8009c50 <MX_GPIO_Init+0x1f4>)
 8009b74:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8009b76:	2314      	movs	r3, #20
 8009b78:	18fb      	adds	r3, r7, r3
 8009b7a:	2202      	movs	r2, #2
 8009b7c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009b7e:	2314      	movs	r3, #20
 8009b80:	18fb      	adds	r3, r7, r3
 8009b82:	4a2f      	ldr	r2, [pc, #188]	; (8009c40 <MX_GPIO_Init+0x1e4>)
 8009b84:	0019      	movs	r1, r3
 8009b86:	0010      	movs	r0, r2
 8009b88:	f7f8 fe26 	bl	80027d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RADIO_DIO_3_Pin */
  GPIO_InitStruct.Pin = RADIO_DIO_3_Pin;
 8009b8c:	2314      	movs	r3, #20
 8009b8e:	18fb      	adds	r3, r7, r3
 8009b90:	2280      	movs	r2, #128	; 0x80
 8009b92:	0192      	lsls	r2, r2, #6
 8009b94:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009b96:	2314      	movs	r3, #20
 8009b98:	18fb      	adds	r3, r7, r3
 8009b9a:	4a2d      	ldr	r2, [pc, #180]	; (8009c50 <MX_GPIO_Init+0x1f4>)
 8009b9c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8009b9e:	2314      	movs	r3, #20
 8009ba0:	18fb      	adds	r3, r7, r3
 8009ba2:	2202      	movs	r2, #2
 8009ba4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(RADIO_DIO_3_GPIO_Port, &GPIO_InitStruct);
 8009ba6:	2314      	movs	r3, #20
 8009ba8:	18fb      	adds	r3, r7, r3
 8009baa:	4a27      	ldr	r2, [pc, #156]	; (8009c48 <MX_GPIO_Init+0x1ec>)
 8009bac:	0019      	movs	r1, r3
 8009bae:	0010      	movs	r0, r2
 8009bb0:	f7f8 fe12 	bl	80027d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RADIO_ANT_SWITCH_TX_BOOST_Pin RADIO_RESET_Pin RADIO_ANT_SWITCH_TX_RFO_Pin */
  GPIO_InitStruct.Pin = RADIO_ANT_SWITCH_TX_BOOST_Pin|RADIO_RESET_Pin|RADIO_ANT_SWITCH_TX_RFO_Pin;
 8009bb4:	2314      	movs	r3, #20
 8009bb6:	18fb      	adds	r3, r7, r3
 8009bb8:	2207      	movs	r2, #7
 8009bba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009bbc:	2314      	movs	r3, #20
 8009bbe:	18fb      	adds	r3, r7, r3
 8009bc0:	2201      	movs	r2, #1
 8009bc2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bc4:	2314      	movs	r3, #20
 8009bc6:	18fb      	adds	r3, r7, r3
 8009bc8:	2200      	movs	r2, #0
 8009bca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009bcc:	2314      	movs	r3, #20
 8009bce:	18fb      	adds	r3, r7, r3
 8009bd0:	2202      	movs	r2, #2
 8009bd2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009bd4:	2314      	movs	r3, #20
 8009bd6:	18fb      	adds	r3, r7, r3
 8009bd8:	4a1b      	ldr	r2, [pc, #108]	; (8009c48 <MX_GPIO_Init+0x1ec>)
 8009bda:	0019      	movs	r1, r3
 8009bdc:	0010      	movs	r0, r2
 8009bde:	f7f8 fdfb 	bl	80027d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : N5110_nCS_Pin N5110_DATA_nCMD_Pin N5110_nRST_Pin LD2_RED_Pin */
  GPIO_InitStruct.Pin = N5110_nCS_Pin|N5110_DATA_nCMD_Pin|N5110_nRST_Pin|LD2_RED_Pin;
 8009be2:	2314      	movs	r3, #20
 8009be4:	18fb      	adds	r3, r7, r3
 8009be6:	2232      	movs	r2, #50	; 0x32
 8009be8:	32ff      	adds	r2, #255	; 0xff
 8009bea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009bec:	2314      	movs	r3, #20
 8009bee:	18fb      	adds	r3, r7, r3
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bf4:	2314      	movs	r3, #20
 8009bf6:	18fb      	adds	r3, r7, r3
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009bfc:	2314      	movs	r3, #20
 8009bfe:	18fb      	adds	r3, r7, r3
 8009c00:	2200      	movs	r2, #0
 8009c02:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c04:	2314      	movs	r3, #20
 8009c06:	18fa      	adds	r2, r7, r3
 8009c08:	23a0      	movs	r3, #160	; 0xa0
 8009c0a:	05db      	lsls	r3, r3, #23
 8009c0c:	0011      	movs	r1, r2
 8009c0e:	0018      	movs	r0, r3
 8009c10:	f7f8 fde2 	bl	80027d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8009c14:	2200      	movs	r2, #0
 8009c16:	2100      	movs	r1, #0
 8009c18:	2005      	movs	r0, #5
 8009c1a:	f7f8 fc3b 	bl	8002494 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8009c1e:	2005      	movs	r0, #5
 8009c20:	f7f8 fc4e 	bl	80024c0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8009c24:	2200      	movs	r2, #0
 8009c26:	2100      	movs	r1, #0
 8009c28:	2007      	movs	r0, #7
 8009c2a:	f7f8 fc33 	bl	8002494 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8009c2e:	2007      	movs	r0, #7
 8009c30:	f7f8 fc46 	bl	80024c0 <HAL_NVIC_EnableIRQ>

}
 8009c34:	46c0      	nop			; (mov r8, r8)
 8009c36:	46bd      	mov	sp, r7
 8009c38:	b00a      	add	sp, #40	; 0x28
 8009c3a:	bd80      	pop	{r7, pc}
 8009c3c:	40021000 	.word	0x40021000
 8009c40:	50000400 	.word	0x50000400
 8009c44:	00001133 	.word	0x00001133
 8009c48:	50000800 	.word	0x50000800
 8009c4c:	00009002 	.word	0x00009002
 8009c50:	10110000 	.word	0x10110000

08009c54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8009c58:	46c0      	nop			; (mov r8, r8)
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}
	...

08009c60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009c64:	4b07      	ldr	r3, [pc, #28]	; (8009c84 <HAL_MspInit+0x24>)
 8009c66:	4a07      	ldr	r2, [pc, #28]	; (8009c84 <HAL_MspInit+0x24>)
 8009c68:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009c6a:	2101      	movs	r1, #1
 8009c6c:	430a      	orrs	r2, r1
 8009c6e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8009c70:	4b04      	ldr	r3, [pc, #16]	; (8009c84 <HAL_MspInit+0x24>)
 8009c72:	4a04      	ldr	r2, [pc, #16]	; (8009c84 <HAL_MspInit+0x24>)
 8009c74:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009c76:	2180      	movs	r1, #128	; 0x80
 8009c78:	0549      	lsls	r1, r1, #21
 8009c7a:	430a      	orrs	r2, r1
 8009c7c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009c7e:	46c0      	nop			; (mov r8, r8)
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}
 8009c84:	40021000 	.word	0x40021000

08009c88 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b082      	sub	sp, #8
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]

  if(hrtc->Instance==RTC)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	4a0a      	ldr	r2, [pc, #40]	; (8009cc0 <HAL_RTC_MspInit+0x38>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d10e      	bne.n	8009cb8 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8009c9a:	4b0a      	ldr	r3, [pc, #40]	; (8009cc4 <HAL_RTC_MspInit+0x3c>)
 8009c9c:	4a09      	ldr	r2, [pc, #36]	; (8009cc4 <HAL_RTC_MspInit+0x3c>)
 8009c9e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009ca0:	2180      	movs	r1, #128	; 0x80
 8009ca2:	02c9      	lsls	r1, r1, #11
 8009ca4:	430a      	orrs	r2, r1
 8009ca6:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8009ca8:	2200      	movs	r2, #0
 8009caa:	2100      	movs	r1, #0
 8009cac:	2002      	movs	r0, #2
 8009cae:	f7f8 fbf1 	bl	8002494 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8009cb2:	2002      	movs	r0, #2
 8009cb4:	f7f8 fc04 	bl	80024c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8009cb8:	46c0      	nop			; (mov r8, r8)
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	b002      	add	sp, #8
 8009cbe:	bd80      	pop	{r7, pc}
 8009cc0:	40002800 	.word	0x40002800
 8009cc4:	40021000 	.word	0x40021000

08009cc8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b08a      	sub	sp, #40	; 0x28
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009cd0:	2314      	movs	r3, #20
 8009cd2:	18fb      	adds	r3, r7, r3
 8009cd4:	0018      	movs	r0, r3
 8009cd6:	2314      	movs	r3, #20
 8009cd8:	001a      	movs	r2, r3
 8009cda:	2100      	movs	r1, #0
 8009cdc:	f000 fd31 	bl	800a742 <memset>
  if(hspi->Instance==SPI1)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4a65      	ldr	r2, [pc, #404]	; (8009e7c <HAL_SPI_MspInit+0x1b4>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d15e      	bne.n	8009da8 <HAL_SPI_MspInit+0xe0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8009cea:	4b65      	ldr	r3, [pc, #404]	; (8009e80 <HAL_SPI_MspInit+0x1b8>)
 8009cec:	4a64      	ldr	r2, [pc, #400]	; (8009e80 <HAL_SPI_MspInit+0x1b8>)
 8009cee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009cf0:	2180      	movs	r1, #128	; 0x80
 8009cf2:	0149      	lsls	r1, r1, #5
 8009cf4:	430a      	orrs	r2, r1
 8009cf6:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009cf8:	4b61      	ldr	r3, [pc, #388]	; (8009e80 <HAL_SPI_MspInit+0x1b8>)
 8009cfa:	4a61      	ldr	r2, [pc, #388]	; (8009e80 <HAL_SPI_MspInit+0x1b8>)
 8009cfc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009cfe:	2102      	movs	r1, #2
 8009d00:	430a      	orrs	r2, r1
 8009d02:	62da      	str	r2, [r3, #44]	; 0x2c
 8009d04:	4b5e      	ldr	r3, [pc, #376]	; (8009e80 <HAL_SPI_MspInit+0x1b8>)
 8009d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d08:	2202      	movs	r2, #2
 8009d0a:	4013      	ands	r3, r2
 8009d0c:	613b      	str	r3, [r7, #16]
 8009d0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009d10:	4b5b      	ldr	r3, [pc, #364]	; (8009e80 <HAL_SPI_MspInit+0x1b8>)
 8009d12:	4a5b      	ldr	r2, [pc, #364]	; (8009e80 <HAL_SPI_MspInit+0x1b8>)
 8009d14:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009d16:	2101      	movs	r1, #1
 8009d18:	430a      	orrs	r2, r1
 8009d1a:	62da      	str	r2, [r3, #44]	; 0x2c
 8009d1c:	4b58      	ldr	r3, [pc, #352]	; (8009e80 <HAL_SPI_MspInit+0x1b8>)
 8009d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d20:	2201      	movs	r2, #1
 8009d22:	4013      	ands	r3, r2
 8009d24:	60fb      	str	r3, [r7, #12]
 8009d26:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO 
    */
    GPIO_InitStruct.Pin = RADIO_SCLK_Pin;
 8009d28:	2314      	movs	r3, #20
 8009d2a:	18fb      	adds	r3, r7, r3
 8009d2c:	2208      	movs	r2, #8
 8009d2e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d30:	2314      	movs	r3, #20
 8009d32:	18fb      	adds	r3, r7, r3
 8009d34:	2202      	movs	r2, #2
 8009d36:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d38:	2314      	movs	r3, #20
 8009d3a:	18fb      	adds	r3, r7, r3
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009d40:	2314      	movs	r3, #20
 8009d42:	18fb      	adds	r3, r7, r3
 8009d44:	2203      	movs	r2, #3
 8009d46:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8009d48:	2314      	movs	r3, #20
 8009d4a:	18fb      	adds	r3, r7, r3
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(RADIO_SCLK_GPIO_Port, &GPIO_InitStruct);
 8009d50:	2314      	movs	r3, #20
 8009d52:	18fb      	adds	r3, r7, r3
 8009d54:	4a4b      	ldr	r2, [pc, #300]	; (8009e84 <HAL_SPI_MspInit+0x1bc>)
 8009d56:	0019      	movs	r1, r3
 8009d58:	0010      	movs	r0, r2
 8009d5a:	f7f8 fd3d 	bl	80027d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RADIO_MOSI_Pin|RADIO_MISO_Pin;
 8009d5e:	2314      	movs	r3, #20
 8009d60:	18fb      	adds	r3, r7, r3
 8009d62:	22c0      	movs	r2, #192	; 0xc0
 8009d64:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d66:	2314      	movs	r3, #20
 8009d68:	18fb      	adds	r3, r7, r3
 8009d6a:	2202      	movs	r2, #2
 8009d6c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d6e:	2314      	movs	r3, #20
 8009d70:	18fb      	adds	r3, r7, r3
 8009d72:	2200      	movs	r2, #0
 8009d74:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009d76:	2314      	movs	r3, #20
 8009d78:	18fb      	adds	r3, r7, r3
 8009d7a:	2203      	movs	r2, #3
 8009d7c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8009d7e:	2314      	movs	r3, #20
 8009d80:	18fb      	adds	r3, r7, r3
 8009d82:	2200      	movs	r2, #0
 8009d84:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009d86:	2314      	movs	r3, #20
 8009d88:	18fa      	adds	r2, r7, r3
 8009d8a:	23a0      	movs	r3, #160	; 0xa0
 8009d8c:	05db      	lsls	r3, r3, #23
 8009d8e:	0011      	movs	r1, r2
 8009d90:	0018      	movs	r0, r3
 8009d92:	f7f8 fd21 	bl	80027d8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8009d96:	2200      	movs	r2, #0
 8009d98:	2100      	movs	r1, #0
 8009d9a:	2019      	movs	r0, #25
 8009d9c:	f7f8 fb7a 	bl	8002494 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8009da0:	2019      	movs	r0, #25
 8009da2:	f7f8 fb8d 	bl	80024c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8009da6:	e064      	b.n	8009e72 <HAL_SPI_MspInit+0x1aa>
  else if(hspi->Instance==SPI2)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	4a36      	ldr	r2, [pc, #216]	; (8009e88 <HAL_SPI_MspInit+0x1c0>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d15f      	bne.n	8009e72 <HAL_SPI_MspInit+0x1aa>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8009db2:	4b33      	ldr	r3, [pc, #204]	; (8009e80 <HAL_SPI_MspInit+0x1b8>)
 8009db4:	4a32      	ldr	r2, [pc, #200]	; (8009e80 <HAL_SPI_MspInit+0x1b8>)
 8009db6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009db8:	2180      	movs	r1, #128	; 0x80
 8009dba:	01c9      	lsls	r1, r1, #7
 8009dbc:	430a      	orrs	r2, r1
 8009dbe:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009dc0:	4b2f      	ldr	r3, [pc, #188]	; (8009e80 <HAL_SPI_MspInit+0x1b8>)
 8009dc2:	4a2f      	ldr	r2, [pc, #188]	; (8009e80 <HAL_SPI_MspInit+0x1b8>)
 8009dc4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009dc6:	2102      	movs	r1, #2
 8009dc8:	430a      	orrs	r2, r1
 8009dca:	62da      	str	r2, [r3, #44]	; 0x2c
 8009dcc:	4b2c      	ldr	r3, [pc, #176]	; (8009e80 <HAL_SPI_MspInit+0x1b8>)
 8009dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dd0:	2202      	movs	r2, #2
 8009dd2:	4013      	ands	r3, r2
 8009dd4:	60bb      	str	r3, [r7, #8]
 8009dd6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12;
 8009dd8:	2314      	movs	r3, #20
 8009dda:	18fb      	adds	r3, r7, r3
 8009ddc:	22f0      	movs	r2, #240	; 0xf0
 8009dde:	0212      	lsls	r2, r2, #8
 8009de0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009de2:	2314      	movs	r3, #20
 8009de4:	18fb      	adds	r3, r7, r3
 8009de6:	2202      	movs	r2, #2
 8009de8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009dea:	2314      	movs	r3, #20
 8009dec:	18fb      	adds	r3, r7, r3
 8009dee:	2200      	movs	r2, #0
 8009df0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009df2:	2314      	movs	r3, #20
 8009df4:	18fb      	adds	r3, r7, r3
 8009df6:	2203      	movs	r2, #3
 8009df8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8009dfa:	2314      	movs	r3, #20
 8009dfc:	18fb      	adds	r3, r7, r3
 8009dfe:	2200      	movs	r2, #0
 8009e00:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009e02:	2314      	movs	r3, #20
 8009e04:	18fb      	adds	r3, r7, r3
 8009e06:	4a1f      	ldr	r2, [pc, #124]	; (8009e84 <HAL_SPI_MspInit+0x1bc>)
 8009e08:	0019      	movs	r1, r3
 8009e0a:	0010      	movs	r0, r2
 8009e0c:	f7f8 fce4 	bl	80027d8 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8009e10:	4b1e      	ldr	r3, [pc, #120]	; (8009e8c <HAL_SPI_MspInit+0x1c4>)
 8009e12:	4a1f      	ldr	r2, [pc, #124]	; (8009e90 <HAL_SPI_MspInit+0x1c8>)
 8009e14:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_2;
 8009e16:	4b1d      	ldr	r3, [pc, #116]	; (8009e8c <HAL_SPI_MspInit+0x1c4>)
 8009e18:	2202      	movs	r2, #2
 8009e1a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009e1c:	4b1b      	ldr	r3, [pc, #108]	; (8009e8c <HAL_SPI_MspInit+0x1c4>)
 8009e1e:	2210      	movs	r2, #16
 8009e20:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009e22:	4b1a      	ldr	r3, [pc, #104]	; (8009e8c <HAL_SPI_MspInit+0x1c4>)
 8009e24:	2200      	movs	r2, #0
 8009e26:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009e28:	4b18      	ldr	r3, [pc, #96]	; (8009e8c <HAL_SPI_MspInit+0x1c4>)
 8009e2a:	2280      	movs	r2, #128	; 0x80
 8009e2c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009e2e:	4b17      	ldr	r3, [pc, #92]	; (8009e8c <HAL_SPI_MspInit+0x1c4>)
 8009e30:	2200      	movs	r2, #0
 8009e32:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009e34:	4b15      	ldr	r3, [pc, #84]	; (8009e8c <HAL_SPI_MspInit+0x1c4>)
 8009e36:	2200      	movs	r2, #0
 8009e38:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8009e3a:	4b14      	ldr	r3, [pc, #80]	; (8009e8c <HAL_SPI_MspInit+0x1c4>)
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009e40:	4b12      	ldr	r3, [pc, #72]	; (8009e8c <HAL_SPI_MspInit+0x1c4>)
 8009e42:	2200      	movs	r2, #0
 8009e44:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8009e46:	4b11      	ldr	r3, [pc, #68]	; (8009e8c <HAL_SPI_MspInit+0x1c4>)
 8009e48:	0018      	movs	r0, r3
 8009e4a:	f7f8 fb57 	bl	80024fc <HAL_DMA_Init>
 8009e4e:	1e03      	subs	r3, r0, #0
 8009e50:	d001      	beq.n	8009e56 <HAL_SPI_MspInit+0x18e>
      Error_Handler();
 8009e52:	f7ff feff 	bl	8009c54 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	4a0c      	ldr	r2, [pc, #48]	; (8009e8c <HAL_SPI_MspInit+0x1c4>)
 8009e5a:	649a      	str	r2, [r3, #72]	; 0x48
 8009e5c:	4b0b      	ldr	r3, [pc, #44]	; (8009e8c <HAL_SPI_MspInit+0x1c4>)
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8009e62:	2200      	movs	r2, #0
 8009e64:	2100      	movs	r1, #0
 8009e66:	201a      	movs	r0, #26
 8009e68:	f7f8 fb14 	bl	8002494 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8009e6c:	201a      	movs	r0, #26
 8009e6e:	f7f8 fb27 	bl	80024c0 <HAL_NVIC_EnableIRQ>
}
 8009e72:	46c0      	nop			; (mov r8, r8)
 8009e74:	46bd      	mov	sp, r7
 8009e76:	b00a      	add	sp, #40	; 0x28
 8009e78:	bd80      	pop	{r7, pc}
 8009e7a:	46c0      	nop			; (mov r8, r8)
 8009e7c:	40013000 	.word	0x40013000
 8009e80:	40021000 	.word	0x40021000
 8009e84:	50000400 	.word	0x50000400
 8009e88:	40003800 	.word	0x40003800
 8009e8c:	20001324 	.word	0x20001324
 8009e90:	40020058 	.word	0x40020058

08009e94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b08a      	sub	sp, #40	; 0x28
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e9c:	2314      	movs	r3, #20
 8009e9e:	18fb      	adds	r3, r7, r3
 8009ea0:	0018      	movs	r0, r3
 8009ea2:	2314      	movs	r3, #20
 8009ea4:	001a      	movs	r2, r3
 8009ea6:	2100      	movs	r1, #0
 8009ea8:	f000 fc4b 	bl	800a742 <memset>
  if(huart->Instance==USART1)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	4a67      	ldr	r2, [pc, #412]	; (800a050 <HAL_UART_MspInit+0x1bc>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d000      	beq.n	8009eb8 <HAL_UART_MspInit+0x24>
 8009eb6:	e08a      	b.n	8009fce <HAL_UART_MspInit+0x13a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009eb8:	4b66      	ldr	r3, [pc, #408]	; (800a054 <HAL_UART_MspInit+0x1c0>)
 8009eba:	4a66      	ldr	r2, [pc, #408]	; (800a054 <HAL_UART_MspInit+0x1c0>)
 8009ebc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009ebe:	2180      	movs	r1, #128	; 0x80
 8009ec0:	01c9      	lsls	r1, r1, #7
 8009ec2:	430a      	orrs	r2, r1
 8009ec4:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009ec6:	4b63      	ldr	r3, [pc, #396]	; (800a054 <HAL_UART_MspInit+0x1c0>)
 8009ec8:	4a62      	ldr	r2, [pc, #392]	; (800a054 <HAL_UART_MspInit+0x1c0>)
 8009eca:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009ecc:	2101      	movs	r1, #1
 8009ece:	430a      	orrs	r2, r1
 8009ed0:	62da      	str	r2, [r3, #44]	; 0x2c
 8009ed2:	4b60      	ldr	r3, [pc, #384]	; (800a054 <HAL_UART_MspInit+0x1c0>)
 8009ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	4013      	ands	r3, r2
 8009eda:	613b      	str	r3, [r7, #16]
 8009edc:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8009ede:	2314      	movs	r3, #20
 8009ee0:	18fb      	adds	r3, r7, r3
 8009ee2:	22c0      	movs	r2, #192	; 0xc0
 8009ee4:	00d2      	lsls	r2, r2, #3
 8009ee6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ee8:	2314      	movs	r3, #20
 8009eea:	18fb      	adds	r3, r7, r3
 8009eec:	2202      	movs	r2, #2
 8009eee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ef0:	2314      	movs	r3, #20
 8009ef2:	18fb      	adds	r3, r7, r3
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ef8:	2314      	movs	r3, #20
 8009efa:	18fb      	adds	r3, r7, r3
 8009efc:	2203      	movs	r2, #3
 8009efe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8009f00:	2314      	movs	r3, #20
 8009f02:	18fb      	adds	r3, r7, r3
 8009f04:	2204      	movs	r2, #4
 8009f06:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009f08:	2314      	movs	r3, #20
 8009f0a:	18fa      	adds	r2, r7, r3
 8009f0c:	23a0      	movs	r3, #160	; 0xa0
 8009f0e:	05db      	lsls	r3, r3, #23
 8009f10:	0011      	movs	r1, r2
 8009f12:	0018      	movs	r0, r3
 8009f14:	f7f8 fc60 	bl	80027d8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8009f18:	4b4f      	ldr	r3, [pc, #316]	; (800a058 <HAL_UART_MspInit+0x1c4>)
 8009f1a:	4a50      	ldr	r2, [pc, #320]	; (800a05c <HAL_UART_MspInit+0x1c8>)
 8009f1c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_3;
 8009f1e:	4b4e      	ldr	r3, [pc, #312]	; (800a058 <HAL_UART_MspInit+0x1c4>)
 8009f20:	2203      	movs	r2, #3
 8009f22:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009f24:	4b4c      	ldr	r3, [pc, #304]	; (800a058 <HAL_UART_MspInit+0x1c4>)
 8009f26:	2200      	movs	r2, #0
 8009f28:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009f2a:	4b4b      	ldr	r3, [pc, #300]	; (800a058 <HAL_UART_MspInit+0x1c4>)
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009f30:	4b49      	ldr	r3, [pc, #292]	; (800a058 <HAL_UART_MspInit+0x1c4>)
 8009f32:	2280      	movs	r2, #128	; 0x80
 8009f34:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009f36:	4b48      	ldr	r3, [pc, #288]	; (800a058 <HAL_UART_MspInit+0x1c4>)
 8009f38:	2200      	movs	r2, #0
 8009f3a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009f3c:	4b46      	ldr	r3, [pc, #280]	; (800a058 <HAL_UART_MspInit+0x1c4>)
 8009f3e:	2200      	movs	r2, #0
 8009f40:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8009f42:	4b45      	ldr	r3, [pc, #276]	; (800a058 <HAL_UART_MspInit+0x1c4>)
 8009f44:	2220      	movs	r2, #32
 8009f46:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009f48:	4b43      	ldr	r3, [pc, #268]	; (800a058 <HAL_UART_MspInit+0x1c4>)
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8009f4e:	4b42      	ldr	r3, [pc, #264]	; (800a058 <HAL_UART_MspInit+0x1c4>)
 8009f50:	0018      	movs	r0, r3
 8009f52:	f7f8 fad3 	bl	80024fc <HAL_DMA_Init>
 8009f56:	1e03      	subs	r3, r0, #0
 8009f58:	d001      	beq.n	8009f5e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8009f5a:	f7ff fe7b 	bl	8009c54 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	4a3d      	ldr	r2, [pc, #244]	; (800a058 <HAL_UART_MspInit+0x1c4>)
 8009f62:	66da      	str	r2, [r3, #108]	; 0x6c
 8009f64:	4b3c      	ldr	r3, [pc, #240]	; (800a058 <HAL_UART_MspInit+0x1c4>)
 8009f66:	687a      	ldr	r2, [r7, #4]
 8009f68:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8009f6a:	4b3d      	ldr	r3, [pc, #244]	; (800a060 <HAL_UART_MspInit+0x1cc>)
 8009f6c:	4a3d      	ldr	r2, [pc, #244]	; (800a064 <HAL_UART_MspInit+0x1d0>)
 8009f6e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_3;
 8009f70:	4b3b      	ldr	r3, [pc, #236]	; (800a060 <HAL_UART_MspInit+0x1cc>)
 8009f72:	2203      	movs	r2, #3
 8009f74:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009f76:	4b3a      	ldr	r3, [pc, #232]	; (800a060 <HAL_UART_MspInit+0x1cc>)
 8009f78:	2210      	movs	r2, #16
 8009f7a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009f7c:	4b38      	ldr	r3, [pc, #224]	; (800a060 <HAL_UART_MspInit+0x1cc>)
 8009f7e:	2200      	movs	r2, #0
 8009f80:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009f82:	4b37      	ldr	r3, [pc, #220]	; (800a060 <HAL_UART_MspInit+0x1cc>)
 8009f84:	2280      	movs	r2, #128	; 0x80
 8009f86:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009f88:	4b35      	ldr	r3, [pc, #212]	; (800a060 <HAL_UART_MspInit+0x1cc>)
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009f8e:	4b34      	ldr	r3, [pc, #208]	; (800a060 <HAL_UART_MspInit+0x1cc>)
 8009f90:	2200      	movs	r2, #0
 8009f92:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8009f94:	4b32      	ldr	r3, [pc, #200]	; (800a060 <HAL_UART_MspInit+0x1cc>)
 8009f96:	2200      	movs	r2, #0
 8009f98:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009f9a:	4b31      	ldr	r3, [pc, #196]	; (800a060 <HAL_UART_MspInit+0x1cc>)
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8009fa0:	4b2f      	ldr	r3, [pc, #188]	; (800a060 <HAL_UART_MspInit+0x1cc>)
 8009fa2:	0018      	movs	r0, r3
 8009fa4:	f7f8 faaa 	bl	80024fc <HAL_DMA_Init>
 8009fa8:	1e03      	subs	r3, r0, #0
 8009faa:	d001      	beq.n	8009fb0 <HAL_UART_MspInit+0x11c>
    {
      Error_Handler();
 8009fac:	f7ff fe52 	bl	8009c54 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	4a2b      	ldr	r2, [pc, #172]	; (800a060 <HAL_UART_MspInit+0x1cc>)
 8009fb4:	669a      	str	r2, [r3, #104]	; 0x68
 8009fb6:	4b2a      	ldr	r3, [pc, #168]	; (800a060 <HAL_UART_MspInit+0x1cc>)
 8009fb8:	687a      	ldr	r2, [r7, #4]
 8009fba:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	2100      	movs	r1, #0
 8009fc0:	201b      	movs	r0, #27
 8009fc2:	f7f8 fa67 	bl	8002494 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8009fc6:	201b      	movs	r0, #27
 8009fc8:	f7f8 fa7a 	bl	80024c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8009fcc:	e03b      	b.n	800a046 <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART2)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	4a25      	ldr	r2, [pc, #148]	; (800a068 <HAL_UART_MspInit+0x1d4>)
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d136      	bne.n	800a046 <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8009fd8:	4b1e      	ldr	r3, [pc, #120]	; (800a054 <HAL_UART_MspInit+0x1c0>)
 8009fda:	4a1e      	ldr	r2, [pc, #120]	; (800a054 <HAL_UART_MspInit+0x1c0>)
 8009fdc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009fde:	2180      	movs	r1, #128	; 0x80
 8009fe0:	0289      	lsls	r1, r1, #10
 8009fe2:	430a      	orrs	r2, r1
 8009fe4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009fe6:	4b1b      	ldr	r3, [pc, #108]	; (800a054 <HAL_UART_MspInit+0x1c0>)
 8009fe8:	4a1a      	ldr	r2, [pc, #104]	; (800a054 <HAL_UART_MspInit+0x1c0>)
 8009fea:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009fec:	2101      	movs	r1, #1
 8009fee:	430a      	orrs	r2, r1
 8009ff0:	62da      	str	r2, [r3, #44]	; 0x2c
 8009ff2:	4b18      	ldr	r3, [pc, #96]	; (800a054 <HAL_UART_MspInit+0x1c0>)
 8009ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	4013      	ands	r3, r2
 8009ffa:	60fb      	str	r3, [r7, #12]
 8009ffc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8009ffe:	2314      	movs	r3, #20
 800a000:	18fb      	adds	r3, r7, r3
 800a002:	220c      	movs	r2, #12
 800a004:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a006:	2314      	movs	r3, #20
 800a008:	18fb      	adds	r3, r7, r3
 800a00a:	2202      	movs	r2, #2
 800a00c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a00e:	2314      	movs	r3, #20
 800a010:	18fb      	adds	r3, r7, r3
 800a012:	2200      	movs	r2, #0
 800a014:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a016:	2314      	movs	r3, #20
 800a018:	18fb      	adds	r3, r7, r3
 800a01a:	2203      	movs	r2, #3
 800a01c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800a01e:	2314      	movs	r3, #20
 800a020:	18fb      	adds	r3, r7, r3
 800a022:	2204      	movs	r2, #4
 800a024:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a026:	2314      	movs	r3, #20
 800a028:	18fa      	adds	r2, r7, r3
 800a02a:	23a0      	movs	r3, #160	; 0xa0
 800a02c:	05db      	lsls	r3, r3, #23
 800a02e:	0011      	movs	r1, r2
 800a030:	0018      	movs	r0, r3
 800a032:	f7f8 fbd1 	bl	80027d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800a036:	2200      	movs	r2, #0
 800a038:	2100      	movs	r1, #0
 800a03a:	201c      	movs	r0, #28
 800a03c:	f7f8 fa2a 	bl	8002494 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800a040:	201c      	movs	r0, #28
 800a042:	f7f8 fa3d 	bl	80024c0 <HAL_NVIC_EnableIRQ>
}
 800a046:	46c0      	nop			; (mov r8, r8)
 800a048:	46bd      	mov	sp, r7
 800a04a:	b00a      	add	sp, #40	; 0x28
 800a04c:	bd80      	pop	{r7, pc}
 800a04e:	46c0      	nop			; (mov r8, r8)
 800a050:	40013800 	.word	0x40013800
 800a054:	40021000 	.word	0x40021000
 800a058:	20000d58 	.word	0x20000d58
 800a05c:	40020030 	.word	0x40020030
 800a060:	20000d10 	.word	0x20000d10
 800a064:	4002001c 	.word	0x4002001c
 800a068:	40004400 	.word	0x40004400

0800a06c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a070:	46c0      	nop			; (mov r8, r8)
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}

0800a076 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a076:	b580      	push	{r7, lr}
 800a078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a07a:	e7fe      	b.n	800a07a <HardFault_Handler+0x4>

0800a07c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800a080:	46c0      	nop			; (mov r8, r8)
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}

0800a086 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a086:	b580      	push	{r7, lr}
 800a088:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a08a:	46c0      	nop			; (mov r8, r8)
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}

0800a090 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a094:	f7f8 f922 	bl	80022dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a098:	46c0      	nop			; (mov r8, r8)
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
	...

0800a0a0 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800a0a4:	4b03      	ldr	r3, [pc, #12]	; (800a0b4 <RTC_IRQHandler+0x14>)
 800a0a6:	0018      	movs	r0, r3
 800a0a8:	f7fa f900 	bl	80042ac <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800a0ac:	46c0      	nop			; (mov r8, r8)
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
 800a0b2:	46c0      	nop			; (mov r8, r8)
 800a0b4:	20001220 	.word	0x20001220

0800a0b8 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800a0bc:	2001      	movs	r0, #1
 800a0be:	f7f8 fd39 	bl	8002b34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800a0c2:	2002      	movs	r0, #2
 800a0c4:	f7f8 fd36 	bl	8002b34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800a0c8:	46c0      	nop			; (mov r8, r8)
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}

0800a0ce <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800a0ce:	b580      	push	{r7, lr}
 800a0d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800a0d2:	2010      	movs	r0, #16
 800a0d4:	f7f8 fd2e 	bl	8002b34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800a0d8:	2380      	movs	r3, #128	; 0x80
 800a0da:	019b      	lsls	r3, r3, #6
 800a0dc:	0018      	movs	r0, r3
 800a0de:	f7f8 fd29 	bl	8002b34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800a0e2:	46c0      	nop			; (mov r8, r8)
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800a0ec:	4b05      	ldr	r3, [pc, #20]	; (800a104 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800a0ee:	0018      	movs	r0, r3
 800a0f0:	f7f8 fac4 	bl	800267c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800a0f4:	4b04      	ldr	r3, [pc, #16]	; (800a108 <DMA1_Channel2_3_IRQHandler+0x20>)
 800a0f6:	0018      	movs	r0, r3
 800a0f8:	f7f8 fac0 	bl	800267c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800a0fc:	46c0      	nop			; (mov r8, r8)
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}
 800a102:	46c0      	nop			; (mov r8, r8)
 800a104:	20000d10 	.word	0x20000d10
 800a108:	20000d58 	.word	0x20000d58

0800a10c <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800a110:	4b03      	ldr	r3, [pc, #12]	; (800a120 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 800a112:	0018      	movs	r0, r3
 800a114:	f7f8 fab2 	bl	800267c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 800a118:	46c0      	nop			; (mov r8, r8)
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
 800a11e:	46c0      	nop			; (mov r8, r8)
 800a120:	20001324 	.word	0x20001324

0800a124 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800a128:	4b03      	ldr	r3, [pc, #12]	; (800a138 <SPI1_IRQHandler+0x14>)
 800a12a:	0018      	movs	r0, r3
 800a12c:	f7fa fbda 	bl	80048e4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800a130:	46c0      	nop			; (mov r8, r8)
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}
 800a136:	46c0      	nop			; (mov r8, r8)
 800a138:	2000124c 	.word	0x2000124c

0800a13c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800a140:	4b03      	ldr	r3, [pc, #12]	; (800a150 <SPI2_IRQHandler+0x14>)
 800a142:	0018      	movs	r0, r3
 800a144:	f7fa fbce 	bl	80048e4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800a148:	46c0      	nop			; (mov r8, r8)
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}
 800a14e:	46c0      	nop			; (mov r8, r8)
 800a150:	20000ab8 	.word	0x20000ab8

0800a154 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	if(__HAL_UART_GET_IT(&huart1, UART_IT_IDLE))
 800a158:	4b0a      	ldr	r3, [pc, #40]	; (800a184 <USART1_IRQHandler+0x30>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	69db      	ldr	r3, [r3, #28]
 800a15e:	2210      	movs	r2, #16
 800a160:	4013      	ands	r3, r2
 800a162:	d008      	beq.n	800a176 <USART1_IRQHandler+0x22>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart1);
 800a164:	4b07      	ldr	r3, [pc, #28]	; (800a184 <USART1_IRQHandler+0x30>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	2210      	movs	r2, #16
 800a16a:	621a      	str	r2, [r3, #32]

		HAL_GPIO_TogglePin(LD1_GREEN_GPIO_Port, LD1_GREEN_Pin);
 800a16c:	4b06      	ldr	r3, [pc, #24]	; (800a188 <USART1_IRQHandler+0x34>)
 800a16e:	2120      	movs	r1, #32
 800a170:	0018      	movs	r0, r3
 800a172:	f7f8 fccc 	bl	8002b0e <HAL_GPIO_TogglePin>
			HAL_UART_Receive_DMA(&huart1, DMA_buffer1, UARTDMA_BUFFER_SIZE);
		}*/

	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800a176:	4b03      	ldr	r3, [pc, #12]	; (800a184 <USART1_IRQHandler+0x30>)
 800a178:	0018      	movs	r0, r3
 800a17a:	f7fa fe63 	bl	8004e44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800a17e:	46c0      	nop			; (mov r8, r8)
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}
 800a184:	20000da0 	.word	0x20000da0
 800a188:	50000400 	.word	0x50000400

0800a18c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800a190:	4b03      	ldr	r3, [pc, #12]	; (800a1a0 <USART2_IRQHandler+0x14>)
 800a192:	0018      	movs	r0, r3
 800a194:	f7fa fe56 	bl	8004e44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800a198:	46c0      	nop			; (mov r8, r8)
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}
 800a19e:	46c0      	nop			; (mov r8, r8)
 800a1a0:	200012a4 	.word	0x200012a4

0800a1a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 800a1a8:	4b17      	ldr	r3, [pc, #92]	; (800a208 <SystemInit+0x64>)
 800a1aa:	4a17      	ldr	r2, [pc, #92]	; (800a208 <SystemInit+0x64>)
 800a1ac:	6812      	ldr	r2, [r2, #0]
 800a1ae:	2180      	movs	r1, #128	; 0x80
 800a1b0:	0049      	lsls	r1, r1, #1
 800a1b2:	430a      	orrs	r2, r1
 800a1b4:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 800a1b6:	4b14      	ldr	r3, [pc, #80]	; (800a208 <SystemInit+0x64>)
 800a1b8:	4a13      	ldr	r2, [pc, #76]	; (800a208 <SystemInit+0x64>)
 800a1ba:	68d2      	ldr	r2, [r2, #12]
 800a1bc:	4913      	ldr	r1, [pc, #76]	; (800a20c <SystemInit+0x68>)
 800a1be:	400a      	ands	r2, r1
 800a1c0:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800a1c2:	4b11      	ldr	r3, [pc, #68]	; (800a208 <SystemInit+0x64>)
 800a1c4:	4a10      	ldr	r2, [pc, #64]	; (800a208 <SystemInit+0x64>)
 800a1c6:	6812      	ldr	r2, [r2, #0]
 800a1c8:	4911      	ldr	r1, [pc, #68]	; (800a210 <SystemInit+0x6c>)
 800a1ca:	400a      	ands	r2, r1
 800a1cc:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800a1ce:	4b0e      	ldr	r3, [pc, #56]	; (800a208 <SystemInit+0x64>)
 800a1d0:	4a0d      	ldr	r2, [pc, #52]	; (800a208 <SystemInit+0x64>)
 800a1d2:	6892      	ldr	r2, [r2, #8]
 800a1d4:	2101      	movs	r1, #1
 800a1d6:	438a      	bics	r2, r1
 800a1d8:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800a1da:	4b0b      	ldr	r3, [pc, #44]	; (800a208 <SystemInit+0x64>)
 800a1dc:	4a0a      	ldr	r2, [pc, #40]	; (800a208 <SystemInit+0x64>)
 800a1de:	6812      	ldr	r2, [r2, #0]
 800a1e0:	490c      	ldr	r1, [pc, #48]	; (800a214 <SystemInit+0x70>)
 800a1e2:	400a      	ands	r2, r1
 800a1e4:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 800a1e6:	4b08      	ldr	r3, [pc, #32]	; (800a208 <SystemInit+0x64>)
 800a1e8:	4a07      	ldr	r2, [pc, #28]	; (800a208 <SystemInit+0x64>)
 800a1ea:	68d2      	ldr	r2, [r2, #12]
 800a1ec:	490a      	ldr	r1, [pc, #40]	; (800a218 <SystemInit+0x74>)
 800a1ee:	400a      	ands	r2, r1
 800a1f0:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800a1f2:	4b05      	ldr	r3, [pc, #20]	; (800a208 <SystemInit+0x64>)
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a1f8:	4b08      	ldr	r3, [pc, #32]	; (800a21c <SystemInit+0x78>)
 800a1fa:	2280      	movs	r2, #128	; 0x80
 800a1fc:	0512      	lsls	r2, r2, #20
 800a1fe:	609a      	str	r2, [r3, #8]
#endif
}
 800a200:	46c0      	nop			; (mov r8, r8)
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
 800a206:	46c0      	nop			; (mov r8, r8)
 800a208:	40021000 	.word	0x40021000
 800a20c:	88ff400c 	.word	0x88ff400c
 800a210:	fef6fff6 	.word	0xfef6fff6
 800a214:	fffbffff 	.word	0xfffbffff
 800a218:	ff02ffff 	.word	0xff02ffff
 800a21c:	e000ed00 	.word	0xe000ed00

0800a220 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800a220:	480d      	ldr	r0, [pc, #52]	; (800a258 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800a222:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800a224:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800a226:	e003      	b.n	800a230 <LoopCopyDataInit>

0800a228 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800a228:	4b0c      	ldr	r3, [pc, #48]	; (800a25c <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 800a22a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800a22c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800a22e:	3104      	adds	r1, #4

0800a230 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 800a230:	480b      	ldr	r0, [pc, #44]	; (800a260 <LoopForever+0xa>)
  ldr  r3, =_edata
 800a232:	4b0c      	ldr	r3, [pc, #48]	; (800a264 <LoopForever+0xe>)
  adds  r2, r0, r1
 800a234:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800a236:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800a238:	d3f6      	bcc.n	800a228 <CopyDataInit>
  ldr  r2, =_sbss
 800a23a:	4a0b      	ldr	r2, [pc, #44]	; (800a268 <LoopForever+0x12>)
  b  LoopFillZerobss
 800a23c:	e002      	b.n	800a244 <LoopFillZerobss>

0800a23e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800a23e:	2300      	movs	r3, #0
  str  r3, [r2]
 800a240:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a242:	3204      	adds	r2, #4

0800a244 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 800a244:	4b09      	ldr	r3, [pc, #36]	; (800a26c <LoopForever+0x16>)
  cmp  r2, r3
 800a246:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800a248:	d3f9      	bcc.n	800a23e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800a24a:	f7ff ffab 	bl	800a1a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a24e:	f000 f83d 	bl	800a2cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a252:	f7fe ff63 	bl	800911c <main>

0800a256 <LoopForever>:

LoopForever:
    b LoopForever
 800a256:	e7fe      	b.n	800a256 <LoopForever>
   ldr   r0, =_estack
 800a258:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 800a25c:	0800db58 	.word	0x0800db58
  ldr  r0, =_sdata
 800a260:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800a264:	200006b0 	.word	0x200006b0
  ldr  r2, =_sbss
 800a268:	200006b0 	.word	0x200006b0
  ldr  r3, = _ebss
 800a26c:	2000137c 	.word	0x2000137c

0800a270 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a270:	e7fe      	b.n	800a270 <ADC1_COMP_IRQHandler>

0800a272 <_calloc_r>:
 800a272:	b510      	push	{r4, lr}
 800a274:	4351      	muls	r1, r2
 800a276:	f000 f857 	bl	800a328 <_malloc_r>
 800a27a:	1e04      	subs	r4, r0, #0
 800a27c:	d01a      	beq.n	800a2b4 <_calloc_r+0x42>
 800a27e:	0003      	movs	r3, r0
 800a280:	3b08      	subs	r3, #8
 800a282:	685a      	ldr	r2, [r3, #4]
 800a284:	2303      	movs	r3, #3
 800a286:	439a      	bics	r2, r3
 800a288:	3a04      	subs	r2, #4
 800a28a:	2a24      	cmp	r2, #36	; 0x24
 800a28c:	d819      	bhi.n	800a2c2 <_calloc_r+0x50>
 800a28e:	0003      	movs	r3, r0
 800a290:	2a13      	cmp	r2, #19
 800a292:	d90b      	bls.n	800a2ac <_calloc_r+0x3a>
 800a294:	2100      	movs	r1, #0
 800a296:	3308      	adds	r3, #8
 800a298:	6001      	str	r1, [r0, #0]
 800a29a:	6041      	str	r1, [r0, #4]
 800a29c:	2a1b      	cmp	r2, #27
 800a29e:	d905      	bls.n	800a2ac <_calloc_r+0x3a>
 800a2a0:	6081      	str	r1, [r0, #8]
 800a2a2:	60c1      	str	r1, [r0, #12]
 800a2a4:	2a24      	cmp	r2, #36	; 0x24
 800a2a6:	d007      	beq.n	800a2b8 <_calloc_r+0x46>
 800a2a8:	0003      	movs	r3, r0
 800a2aa:	3310      	adds	r3, #16
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	601a      	str	r2, [r3, #0]
 800a2b0:	605a      	str	r2, [r3, #4]
 800a2b2:	609a      	str	r2, [r3, #8]
 800a2b4:	0020      	movs	r0, r4
 800a2b6:	bd10      	pop	{r4, pc}
 800a2b8:	0003      	movs	r3, r0
 800a2ba:	6101      	str	r1, [r0, #16]
 800a2bc:	3318      	adds	r3, #24
 800a2be:	6141      	str	r1, [r0, #20]
 800a2c0:	e7f4      	b.n	800a2ac <_calloc_r+0x3a>
 800a2c2:	2100      	movs	r1, #0
 800a2c4:	f000 fa3d 	bl	800a742 <memset>
 800a2c8:	e7f4      	b.n	800a2b4 <_calloc_r+0x42>
	...

0800a2cc <__libc_init_array>:
 800a2cc:	b570      	push	{r4, r5, r6, lr}
 800a2ce:	2600      	movs	r6, #0
 800a2d0:	4d0c      	ldr	r5, [pc, #48]	; (800a304 <__libc_init_array+0x38>)
 800a2d2:	4c0d      	ldr	r4, [pc, #52]	; (800a308 <__libc_init_array+0x3c>)
 800a2d4:	1b64      	subs	r4, r4, r5
 800a2d6:	10a4      	asrs	r4, r4, #2
 800a2d8:	42a6      	cmp	r6, r4
 800a2da:	d109      	bne.n	800a2f0 <__libc_init_array+0x24>
 800a2dc:	2600      	movs	r6, #0
 800a2de:	f003 f941 	bl	800d564 <_init>
 800a2e2:	4d0a      	ldr	r5, [pc, #40]	; (800a30c <__libc_init_array+0x40>)
 800a2e4:	4c0a      	ldr	r4, [pc, #40]	; (800a310 <__libc_init_array+0x44>)
 800a2e6:	1b64      	subs	r4, r4, r5
 800a2e8:	10a4      	asrs	r4, r4, #2
 800a2ea:	42a6      	cmp	r6, r4
 800a2ec:	d105      	bne.n	800a2fa <__libc_init_array+0x2e>
 800a2ee:	bd70      	pop	{r4, r5, r6, pc}
 800a2f0:	00b3      	lsls	r3, r6, #2
 800a2f2:	58eb      	ldr	r3, [r5, r3]
 800a2f4:	4798      	blx	r3
 800a2f6:	3601      	adds	r6, #1
 800a2f8:	e7ee      	b.n	800a2d8 <__libc_init_array+0xc>
 800a2fa:	00b3      	lsls	r3, r6, #2
 800a2fc:	58eb      	ldr	r3, [r5, r3]
 800a2fe:	4798      	blx	r3
 800a300:	3601      	adds	r6, #1
 800a302:	e7f2      	b.n	800a2ea <__libc_init_array+0x1e>
 800a304:	0800db50 	.word	0x0800db50
 800a308:	0800db50 	.word	0x0800db50
 800a30c:	0800db50 	.word	0x0800db50
 800a310:	0800db54 	.word	0x0800db54

0800a314 <malloc>:
 800a314:	b510      	push	{r4, lr}
 800a316:	4b03      	ldr	r3, [pc, #12]	; (800a324 <malloc+0x10>)
 800a318:	0001      	movs	r1, r0
 800a31a:	6818      	ldr	r0, [r3, #0]
 800a31c:	f000 f804 	bl	800a328 <_malloc_r>
 800a320:	bd10      	pop	{r4, pc}
 800a322:	46c0      	nop			; (mov r8, r8)
 800a324:	20000040 	.word	0x20000040

0800a328 <_malloc_r>:
 800a328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a32a:	000d      	movs	r5, r1
 800a32c:	b085      	sub	sp, #20
 800a32e:	350b      	adds	r5, #11
 800a330:	9001      	str	r0, [sp, #4]
 800a332:	2d16      	cmp	r5, #22
 800a334:	d908      	bls.n	800a348 <_malloc_r+0x20>
 800a336:	2307      	movs	r3, #7
 800a338:	439d      	bics	r5, r3
 800a33a:	d506      	bpl.n	800a34a <_malloc_r+0x22>
 800a33c:	230c      	movs	r3, #12
 800a33e:	9a01      	ldr	r2, [sp, #4]
 800a340:	6013      	str	r3, [r2, #0]
 800a342:	2000      	movs	r0, #0
 800a344:	b005      	add	sp, #20
 800a346:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a348:	2510      	movs	r5, #16
 800a34a:	428d      	cmp	r5, r1
 800a34c:	d3f6      	bcc.n	800a33c <_malloc_r+0x14>
 800a34e:	9801      	ldr	r0, [sp, #4]
 800a350:	f000 fa00 	bl	800a754 <__malloc_lock>
 800a354:	23f8      	movs	r3, #248	; 0xf8
 800a356:	33ff      	adds	r3, #255	; 0xff
 800a358:	48ba      	ldr	r0, [pc, #744]	; (800a644 <_malloc_r+0x31c>)
 800a35a:	429d      	cmp	r5, r3
 800a35c:	d81f      	bhi.n	800a39e <_malloc_r+0x76>
 800a35e:	002a      	movs	r2, r5
 800a360:	3208      	adds	r2, #8
 800a362:	1882      	adds	r2, r0, r2
 800a364:	0011      	movs	r1, r2
 800a366:	6854      	ldr	r4, [r2, #4]
 800a368:	3908      	subs	r1, #8
 800a36a:	08eb      	lsrs	r3, r5, #3
 800a36c:	428c      	cmp	r4, r1
 800a36e:	d103      	bne.n	800a378 <_malloc_r+0x50>
 800a370:	68d4      	ldr	r4, [r2, #12]
 800a372:	3302      	adds	r3, #2
 800a374:	42a2      	cmp	r2, r4
 800a376:	d029      	beq.n	800a3cc <_malloc_r+0xa4>
 800a378:	2303      	movs	r3, #3
 800a37a:	6862      	ldr	r2, [r4, #4]
 800a37c:	68a1      	ldr	r1, [r4, #8]
 800a37e:	439a      	bics	r2, r3
 800a380:	0013      	movs	r3, r2
 800a382:	68e2      	ldr	r2, [r4, #12]
 800a384:	18e3      	adds	r3, r4, r3
 800a386:	60ca      	str	r2, [r1, #12]
 800a388:	6091      	str	r1, [r2, #8]
 800a38a:	2201      	movs	r2, #1
 800a38c:	6859      	ldr	r1, [r3, #4]
 800a38e:	430a      	orrs	r2, r1
 800a390:	605a      	str	r2, [r3, #4]
 800a392:	9801      	ldr	r0, [sp, #4]
 800a394:	f000 f9e6 	bl	800a764 <__malloc_unlock>
 800a398:	0020      	movs	r0, r4
 800a39a:	3008      	adds	r0, #8
 800a39c:	e7d2      	b.n	800a344 <_malloc_r+0x1c>
 800a39e:	0a6a      	lsrs	r2, r5, #9
 800a3a0:	233f      	movs	r3, #63	; 0x3f
 800a3a2:	2a00      	cmp	r2, #0
 800a3a4:	d003      	beq.n	800a3ae <_malloc_r+0x86>
 800a3a6:	2a04      	cmp	r2, #4
 800a3a8:	d828      	bhi.n	800a3fc <_malloc_r+0xd4>
 800a3aa:	09ab      	lsrs	r3, r5, #6
 800a3ac:	3338      	adds	r3, #56	; 0x38
 800a3ae:	2203      	movs	r2, #3
 800a3b0:	4694      	mov	ip, r2
 800a3b2:	00d9      	lsls	r1, r3, #3
 800a3b4:	1809      	adds	r1, r1, r0
 800a3b6:	68cc      	ldr	r4, [r1, #12]
 800a3b8:	428c      	cmp	r4, r1
 800a3ba:	d006      	beq.n	800a3ca <_malloc_r+0xa2>
 800a3bc:	4666      	mov	r6, ip
 800a3be:	6862      	ldr	r2, [r4, #4]
 800a3c0:	43b2      	bics	r2, r6
 800a3c2:	1b57      	subs	r7, r2, r5
 800a3c4:	2f0f      	cmp	r7, #15
 800a3c6:	dd31      	ble.n	800a42c <_malloc_r+0x104>
 800a3c8:	3b01      	subs	r3, #1
 800a3ca:	3301      	adds	r3, #1
 800a3cc:	0001      	movs	r1, r0
 800a3ce:	6904      	ldr	r4, [r0, #16]
 800a3d0:	3108      	adds	r1, #8
 800a3d2:	428c      	cmp	r4, r1
 800a3d4:	d04e      	beq.n	800a474 <_malloc_r+0x14c>
 800a3d6:	2203      	movs	r2, #3
 800a3d8:	6866      	ldr	r6, [r4, #4]
 800a3da:	4396      	bics	r6, r2
 800a3dc:	0032      	movs	r2, r6
 800a3de:	1b76      	subs	r6, r6, r5
 800a3e0:	2e0f      	cmp	r6, #15
 800a3e2:	dd31      	ble.n	800a448 <_malloc_r+0x120>
 800a3e4:	2701      	movs	r7, #1
 800a3e6:	1963      	adds	r3, r4, r5
 800a3e8:	433d      	orrs	r5, r7
 800a3ea:	4337      	orrs	r7, r6
 800a3ec:	6065      	str	r5, [r4, #4]
 800a3ee:	6143      	str	r3, [r0, #20]
 800a3f0:	6103      	str	r3, [r0, #16]
 800a3f2:	60d9      	str	r1, [r3, #12]
 800a3f4:	6099      	str	r1, [r3, #8]
 800a3f6:	605f      	str	r7, [r3, #4]
 800a3f8:	50a6      	str	r6, [r4, r2]
 800a3fa:	e7ca      	b.n	800a392 <_malloc_r+0x6a>
 800a3fc:	2a14      	cmp	r2, #20
 800a3fe:	d802      	bhi.n	800a406 <_malloc_r+0xde>
 800a400:	0013      	movs	r3, r2
 800a402:	335b      	adds	r3, #91	; 0x5b
 800a404:	e7d3      	b.n	800a3ae <_malloc_r+0x86>
 800a406:	2a54      	cmp	r2, #84	; 0x54
 800a408:	d802      	bhi.n	800a410 <_malloc_r+0xe8>
 800a40a:	0b2b      	lsrs	r3, r5, #12
 800a40c:	336e      	adds	r3, #110	; 0x6e
 800a40e:	e7ce      	b.n	800a3ae <_malloc_r+0x86>
 800a410:	23aa      	movs	r3, #170	; 0xaa
 800a412:	005b      	lsls	r3, r3, #1
 800a414:	429a      	cmp	r2, r3
 800a416:	d802      	bhi.n	800a41e <_malloc_r+0xf6>
 800a418:	0beb      	lsrs	r3, r5, #15
 800a41a:	3377      	adds	r3, #119	; 0x77
 800a41c:	e7c7      	b.n	800a3ae <_malloc_r+0x86>
 800a41e:	498a      	ldr	r1, [pc, #552]	; (800a648 <_malloc_r+0x320>)
 800a420:	237e      	movs	r3, #126	; 0x7e
 800a422:	428a      	cmp	r2, r1
 800a424:	d8c3      	bhi.n	800a3ae <_malloc_r+0x86>
 800a426:	0cab      	lsrs	r3, r5, #18
 800a428:	337c      	adds	r3, #124	; 0x7c
 800a42a:	e7c0      	b.n	800a3ae <_malloc_r+0x86>
 800a42c:	68e6      	ldr	r6, [r4, #12]
 800a42e:	2f00      	cmp	r7, #0
 800a430:	db08      	blt.n	800a444 <_malloc_r+0x11c>
 800a432:	68a3      	ldr	r3, [r4, #8]
 800a434:	60de      	str	r6, [r3, #12]
 800a436:	60b3      	str	r3, [r6, #8]
 800a438:	2301      	movs	r3, #1
 800a43a:	18a2      	adds	r2, r4, r2
 800a43c:	6851      	ldr	r1, [r2, #4]
 800a43e:	430b      	orrs	r3, r1
 800a440:	6053      	str	r3, [r2, #4]
 800a442:	e7a6      	b.n	800a392 <_malloc_r+0x6a>
 800a444:	0034      	movs	r4, r6
 800a446:	e7b7      	b.n	800a3b8 <_malloc_r+0x90>
 800a448:	6141      	str	r1, [r0, #20]
 800a44a:	6101      	str	r1, [r0, #16]
 800a44c:	2e00      	cmp	r6, #0
 800a44e:	daf3      	bge.n	800a438 <_malloc_r+0x110>
 800a450:	497e      	ldr	r1, [pc, #504]	; (800a64c <_malloc_r+0x324>)
 800a452:	428a      	cmp	r2, r1
 800a454:	d842      	bhi.n	800a4dc <_malloc_r+0x1b4>
 800a456:	08d2      	lsrs	r2, r2, #3
 800a458:	39ff      	subs	r1, #255	; 0xff
 800a45a:	1096      	asrs	r6, r2, #2
 800a45c:	39ff      	subs	r1, #255	; 0xff
 800a45e:	40b1      	lsls	r1, r6
 800a460:	6846      	ldr	r6, [r0, #4]
 800a462:	00d2      	lsls	r2, r2, #3
 800a464:	4331      	orrs	r1, r6
 800a466:	6041      	str	r1, [r0, #4]
 800a468:	1810      	adds	r0, r2, r0
 800a46a:	6882      	ldr	r2, [r0, #8]
 800a46c:	60e0      	str	r0, [r4, #12]
 800a46e:	60a2      	str	r2, [r4, #8]
 800a470:	6084      	str	r4, [r0, #8]
 800a472:	60d4      	str	r4, [r2, #12]
 800a474:	2201      	movs	r2, #1
 800a476:	1099      	asrs	r1, r3, #2
 800a478:	408a      	lsls	r2, r1
 800a47a:	4972      	ldr	r1, [pc, #456]	; (800a644 <_malloc_r+0x31c>)
 800a47c:	6848      	ldr	r0, [r1, #4]
 800a47e:	4282      	cmp	r2, r0
 800a480:	d900      	bls.n	800a484 <_malloc_r+0x15c>
 800a482:	e097      	b.n	800a5b4 <_malloc_r+0x28c>
 800a484:	4210      	tst	r0, r2
 800a486:	d105      	bne.n	800a494 <_malloc_r+0x16c>
 800a488:	2403      	movs	r4, #3
 800a48a:	43a3      	bics	r3, r4
 800a48c:	0052      	lsls	r2, r2, #1
 800a48e:	3304      	adds	r3, #4
 800a490:	4210      	tst	r0, r2
 800a492:	d0fb      	beq.n	800a48c <_malloc_r+0x164>
 800a494:	469c      	mov	ip, r3
 800a496:	00d8      	lsls	r0, r3, #3
 800a498:	1808      	adds	r0, r1, r0
 800a49a:	9002      	str	r0, [sp, #8]
 800a49c:	9c02      	ldr	r4, [sp, #8]
 800a49e:	68e4      	ldr	r4, [r4, #12]
 800a4a0:	9e02      	ldr	r6, [sp, #8]
 800a4a2:	42b4      	cmp	r4, r6
 800a4a4:	d158      	bne.n	800a558 <_malloc_r+0x230>
 800a4a6:	0034      	movs	r4, r6
 800a4a8:	3408      	adds	r4, #8
 800a4aa:	9402      	str	r4, [sp, #8]
 800a4ac:	2401      	movs	r4, #1
 800a4ae:	44a4      	add	ip, r4
 800a4b0:	4664      	mov	r4, ip
 800a4b2:	2603      	movs	r6, #3
 800a4b4:	4234      	tst	r4, r6
 800a4b6:	d1f1      	bne.n	800a49c <_malloc_r+0x174>
 800a4b8:	2403      	movs	r4, #3
 800a4ba:	4223      	tst	r3, r4
 800a4bc:	d174      	bne.n	800a5a8 <_malloc_r+0x280>
 800a4be:	684b      	ldr	r3, [r1, #4]
 800a4c0:	4393      	bics	r3, r2
 800a4c2:	604b      	str	r3, [r1, #4]
 800a4c4:	6848      	ldr	r0, [r1, #4]
 800a4c6:	0052      	lsls	r2, r2, #1
 800a4c8:	4282      	cmp	r2, r0
 800a4ca:	d873      	bhi.n	800a5b4 <_malloc_r+0x28c>
 800a4cc:	2a00      	cmp	r2, #0
 800a4ce:	d071      	beq.n	800a5b4 <_malloc_r+0x28c>
 800a4d0:	4663      	mov	r3, ip
 800a4d2:	4210      	tst	r0, r2
 800a4d4:	d1de      	bne.n	800a494 <_malloc_r+0x16c>
 800a4d6:	3304      	adds	r3, #4
 800a4d8:	0052      	lsls	r2, r2, #1
 800a4da:	e7fa      	b.n	800a4d2 <_malloc_r+0x1aa>
 800a4dc:	0a56      	lsrs	r6, r2, #9
 800a4de:	2e04      	cmp	r6, #4
 800a4e0:	d816      	bhi.n	800a510 <_malloc_r+0x1e8>
 800a4e2:	0991      	lsrs	r1, r2, #6
 800a4e4:	3138      	adds	r1, #56	; 0x38
 800a4e6:	00cf      	lsls	r7, r1, #3
 800a4e8:	183e      	adds	r6, r7, r0
 800a4ea:	2703      	movs	r7, #3
 800a4ec:	9602      	str	r6, [sp, #8]
 800a4ee:	46bc      	mov	ip, r7
 800a4f0:	68b6      	ldr	r6, [r6, #8]
 800a4f2:	9f02      	ldr	r7, [sp, #8]
 800a4f4:	42b7      	cmp	r7, r6
 800a4f6:	d127      	bne.n	800a548 <_malloc_r+0x220>
 800a4f8:	2201      	movs	r2, #1
 800a4fa:	1089      	asrs	r1, r1, #2
 800a4fc:	408a      	lsls	r2, r1
 800a4fe:	6841      	ldr	r1, [r0, #4]
 800a500:	430a      	orrs	r2, r1
 800a502:	6042      	str	r2, [r0, #4]
 800a504:	9a02      	ldr	r2, [sp, #8]
 800a506:	60a6      	str	r6, [r4, #8]
 800a508:	60e2      	str	r2, [r4, #12]
 800a50a:	6094      	str	r4, [r2, #8]
 800a50c:	60f4      	str	r4, [r6, #12]
 800a50e:	e7b1      	b.n	800a474 <_malloc_r+0x14c>
 800a510:	2e14      	cmp	r6, #20
 800a512:	d802      	bhi.n	800a51a <_malloc_r+0x1f2>
 800a514:	0031      	movs	r1, r6
 800a516:	315b      	adds	r1, #91	; 0x5b
 800a518:	e7e5      	b.n	800a4e6 <_malloc_r+0x1be>
 800a51a:	2e54      	cmp	r6, #84	; 0x54
 800a51c:	d802      	bhi.n	800a524 <_malloc_r+0x1fc>
 800a51e:	0b11      	lsrs	r1, r2, #12
 800a520:	316e      	adds	r1, #110	; 0x6e
 800a522:	e7e0      	b.n	800a4e6 <_malloc_r+0x1be>
 800a524:	21aa      	movs	r1, #170	; 0xaa
 800a526:	0049      	lsls	r1, r1, #1
 800a528:	428e      	cmp	r6, r1
 800a52a:	d802      	bhi.n	800a532 <_malloc_r+0x20a>
 800a52c:	0bd1      	lsrs	r1, r2, #15
 800a52e:	3177      	adds	r1, #119	; 0x77
 800a530:	e7d9      	b.n	800a4e6 <_malloc_r+0x1be>
 800a532:	4f45      	ldr	r7, [pc, #276]	; (800a648 <_malloc_r+0x320>)
 800a534:	217e      	movs	r1, #126	; 0x7e
 800a536:	42be      	cmp	r6, r7
 800a538:	d8d5      	bhi.n	800a4e6 <_malloc_r+0x1be>
 800a53a:	0c91      	lsrs	r1, r2, #18
 800a53c:	317c      	adds	r1, #124	; 0x7c
 800a53e:	e7d2      	b.n	800a4e6 <_malloc_r+0x1be>
 800a540:	68b6      	ldr	r6, [r6, #8]
 800a542:	9902      	ldr	r1, [sp, #8]
 800a544:	42b1      	cmp	r1, r6
 800a546:	d004      	beq.n	800a552 <_malloc_r+0x22a>
 800a548:	4660      	mov	r0, ip
 800a54a:	6871      	ldr	r1, [r6, #4]
 800a54c:	4381      	bics	r1, r0
 800a54e:	428a      	cmp	r2, r1
 800a550:	d3f6      	bcc.n	800a540 <_malloc_r+0x218>
 800a552:	68f2      	ldr	r2, [r6, #12]
 800a554:	9202      	str	r2, [sp, #8]
 800a556:	e7d5      	b.n	800a504 <_malloc_r+0x1dc>
 800a558:	2603      	movs	r6, #3
 800a55a:	6867      	ldr	r7, [r4, #4]
 800a55c:	43b7      	bics	r7, r6
 800a55e:	9703      	str	r7, [sp, #12]
 800a560:	1b7e      	subs	r6, r7, r5
 800a562:	2e0f      	cmp	r6, #15
 800a564:	dd11      	ble.n	800a58a <_malloc_r+0x262>
 800a566:	2201      	movs	r2, #1
 800a568:	1963      	adds	r3, r4, r5
 800a56a:	4315      	orrs	r5, r2
 800a56c:	6065      	str	r5, [r4, #4]
 800a56e:	68e0      	ldr	r0, [r4, #12]
 800a570:	68a5      	ldr	r5, [r4, #8]
 800a572:	3108      	adds	r1, #8
 800a574:	60e8      	str	r0, [r5, #12]
 800a576:	4332      	orrs	r2, r6
 800a578:	6085      	str	r5, [r0, #8]
 800a57a:	60cb      	str	r3, [r1, #12]
 800a57c:	608b      	str	r3, [r1, #8]
 800a57e:	60d9      	str	r1, [r3, #12]
 800a580:	6099      	str	r1, [r3, #8]
 800a582:	605a      	str	r2, [r3, #4]
 800a584:	003b      	movs	r3, r7
 800a586:	50e6      	str	r6, [r4, r3]
 800a588:	e703      	b.n	800a392 <_malloc_r+0x6a>
 800a58a:	68e7      	ldr	r7, [r4, #12]
 800a58c:	2e00      	cmp	r6, #0
 800a58e:	db09      	blt.n	800a5a4 <_malloc_r+0x27c>
 800a590:	2201      	movs	r2, #1
 800a592:	9b03      	ldr	r3, [sp, #12]
 800a594:	18e3      	adds	r3, r4, r3
 800a596:	6859      	ldr	r1, [r3, #4]
 800a598:	430a      	orrs	r2, r1
 800a59a:	605a      	str	r2, [r3, #4]
 800a59c:	68a3      	ldr	r3, [r4, #8]
 800a59e:	60df      	str	r7, [r3, #12]
 800a5a0:	60bb      	str	r3, [r7, #8]
 800a5a2:	e6f6      	b.n	800a392 <_malloc_r+0x6a>
 800a5a4:	003c      	movs	r4, r7
 800a5a6:	e77b      	b.n	800a4a0 <_malloc_r+0x178>
 800a5a8:	3808      	subs	r0, #8
 800a5aa:	6884      	ldr	r4, [r0, #8]
 800a5ac:	3b01      	subs	r3, #1
 800a5ae:	42a0      	cmp	r0, r4
 800a5b0:	d082      	beq.n	800a4b8 <_malloc_r+0x190>
 800a5b2:	e787      	b.n	800a4c4 <_malloc_r+0x19c>
 800a5b4:	2303      	movs	r3, #3
 800a5b6:	688f      	ldr	r7, [r1, #8]
 800a5b8:	687a      	ldr	r2, [r7, #4]
 800a5ba:	439a      	bics	r2, r3
 800a5bc:	9202      	str	r2, [sp, #8]
 800a5be:	4295      	cmp	r5, r2
 800a5c0:	d803      	bhi.n	800a5ca <_malloc_r+0x2a2>
 800a5c2:	1b52      	subs	r2, r2, r5
 800a5c4:	2a0f      	cmp	r2, #15
 800a5c6:	dd00      	ble.n	800a5ca <_malloc_r+0x2a2>
 800a5c8:	e09f      	b.n	800a70a <_malloc_r+0x3e2>
 800a5ca:	9b02      	ldr	r3, [sp, #8]
 800a5cc:	18fb      	adds	r3, r7, r3
 800a5ce:	9303      	str	r3, [sp, #12]
 800a5d0:	4b1f      	ldr	r3, [pc, #124]	; (800a650 <_malloc_r+0x328>)
 800a5d2:	681e      	ldr	r6, [r3, #0]
 800a5d4:	4b1f      	ldr	r3, [pc, #124]	; (800a654 <_malloc_r+0x32c>)
 800a5d6:	3610      	adds	r6, #16
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	1976      	adds	r6, r6, r5
 800a5dc:	3301      	adds	r3, #1
 800a5de:	d005      	beq.n	800a5ec <_malloc_r+0x2c4>
 800a5e0:	4b1d      	ldr	r3, [pc, #116]	; (800a658 <_malloc_r+0x330>)
 800a5e2:	3b01      	subs	r3, #1
 800a5e4:	199e      	adds	r6, r3, r6
 800a5e6:	4b1c      	ldr	r3, [pc, #112]	; (800a658 <_malloc_r+0x330>)
 800a5e8:	425b      	negs	r3, r3
 800a5ea:	401e      	ands	r6, r3
 800a5ec:	0031      	movs	r1, r6
 800a5ee:	9801      	ldr	r0, [sp, #4]
 800a5f0:	f000 f8c0 	bl	800a774 <_sbrk_r>
 800a5f4:	0004      	movs	r4, r0
 800a5f6:	1c43      	adds	r3, r0, #1
 800a5f8:	d05f      	beq.n	800a6ba <_malloc_r+0x392>
 800a5fa:	9b03      	ldr	r3, [sp, #12]
 800a5fc:	4283      	cmp	r3, r0
 800a5fe:	d902      	bls.n	800a606 <_malloc_r+0x2de>
 800a600:	4b10      	ldr	r3, [pc, #64]	; (800a644 <_malloc_r+0x31c>)
 800a602:	429f      	cmp	r7, r3
 800a604:	d159      	bne.n	800a6ba <_malloc_r+0x392>
 800a606:	4b15      	ldr	r3, [pc, #84]	; (800a65c <_malloc_r+0x334>)
 800a608:	681a      	ldr	r2, [r3, #0]
 800a60a:	18b1      	adds	r1, r6, r2
 800a60c:	6019      	str	r1, [r3, #0]
 800a60e:	4b12      	ldr	r3, [pc, #72]	; (800a658 <_malloc_r+0x330>)
 800a610:	1e5a      	subs	r2, r3, #1
 800a612:	9b03      	ldr	r3, [sp, #12]
 800a614:	42a3      	cmp	r3, r4
 800a616:	d127      	bne.n	800a668 <_malloc_r+0x340>
 800a618:	4213      	tst	r3, r2
 800a61a:	d125      	bne.n	800a668 <_malloc_r+0x340>
 800a61c:	9a02      	ldr	r2, [sp, #8]
 800a61e:	4b09      	ldr	r3, [pc, #36]	; (800a644 <_malloc_r+0x31c>)
 800a620:	1992      	adds	r2, r2, r6
 800a622:	2601      	movs	r6, #1
 800a624:	689b      	ldr	r3, [r3, #8]
 800a626:	4316      	orrs	r6, r2
 800a628:	605e      	str	r6, [r3, #4]
 800a62a:	4b0c      	ldr	r3, [pc, #48]	; (800a65c <_malloc_r+0x334>)
 800a62c:	4a0c      	ldr	r2, [pc, #48]	; (800a660 <_malloc_r+0x338>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	6811      	ldr	r1, [r2, #0]
 800a632:	428b      	cmp	r3, r1
 800a634:	d900      	bls.n	800a638 <_malloc_r+0x310>
 800a636:	6013      	str	r3, [r2, #0]
 800a638:	4a0a      	ldr	r2, [pc, #40]	; (800a664 <_malloc_r+0x33c>)
 800a63a:	6811      	ldr	r1, [r2, #0]
 800a63c:	428b      	cmp	r3, r1
 800a63e:	d93c      	bls.n	800a6ba <_malloc_r+0x392>
 800a640:	6013      	str	r3, [r2, #0]
 800a642:	e03a      	b.n	800a6ba <_malloc_r+0x392>
 800a644:	20000134 	.word	0x20000134
 800a648:	00000554 	.word	0x00000554
 800a64c:	000001ff 	.word	0x000001ff
 800a650:	200009f8 	.word	0x200009f8
 800a654:	2000053c 	.word	0x2000053c
 800a658:	00000080 	.word	0x00000080
 800a65c:	200009c8 	.word	0x200009c8
 800a660:	200009f0 	.word	0x200009f0
 800a664:	200009f4 	.word	0x200009f4
 800a668:	4b2d      	ldr	r3, [pc, #180]	; (800a720 <_malloc_r+0x3f8>)
 800a66a:	6818      	ldr	r0, [r3, #0]
 800a66c:	3001      	adds	r0, #1
 800a66e:	d132      	bne.n	800a6d6 <_malloc_r+0x3ae>
 800a670:	601c      	str	r4, [r3, #0]
 800a672:	2007      	movs	r0, #7
 800a674:	4020      	ands	r0, r4
 800a676:	d002      	beq.n	800a67e <_malloc_r+0x356>
 800a678:	2308      	movs	r3, #8
 800a67a:	1a18      	subs	r0, r3, r0
 800a67c:	1824      	adds	r4, r4, r0
 800a67e:	4b29      	ldr	r3, [pc, #164]	; (800a724 <_malloc_r+0x3fc>)
 800a680:	19a6      	adds	r6, r4, r6
 800a682:	1818      	adds	r0, r3, r0
 800a684:	4016      	ands	r6, r2
 800a686:	1b86      	subs	r6, r0, r6
 800a688:	0031      	movs	r1, r6
 800a68a:	9801      	ldr	r0, [sp, #4]
 800a68c:	f000 f872 	bl	800a774 <_sbrk_r>
 800a690:	1c43      	adds	r3, r0, #1
 800a692:	d101      	bne.n	800a698 <_malloc_r+0x370>
 800a694:	0020      	movs	r0, r4
 800a696:	2600      	movs	r6, #0
 800a698:	4a23      	ldr	r2, [pc, #140]	; (800a728 <_malloc_r+0x400>)
 800a69a:	1b00      	subs	r0, r0, r4
 800a69c:	6813      	ldr	r3, [r2, #0]
 800a69e:	199b      	adds	r3, r3, r6
 800a6a0:	6013      	str	r3, [r2, #0]
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	4a21      	ldr	r2, [pc, #132]	; (800a72c <_malloc_r+0x404>)
 800a6a6:	1986      	adds	r6, r0, r6
 800a6a8:	431e      	orrs	r6, r3
 800a6aa:	6094      	str	r4, [r2, #8]
 800a6ac:	6066      	str	r6, [r4, #4]
 800a6ae:	4297      	cmp	r7, r2
 800a6b0:	d0bb      	beq.n	800a62a <_malloc_r+0x302>
 800a6b2:	9a02      	ldr	r2, [sp, #8]
 800a6b4:	2a0f      	cmp	r2, #15
 800a6b6:	d814      	bhi.n	800a6e2 <_malloc_r+0x3ba>
 800a6b8:	6063      	str	r3, [r4, #4]
 800a6ba:	2203      	movs	r2, #3
 800a6bc:	4b1b      	ldr	r3, [pc, #108]	; (800a72c <_malloc_r+0x404>)
 800a6be:	689b      	ldr	r3, [r3, #8]
 800a6c0:	685b      	ldr	r3, [r3, #4]
 800a6c2:	4393      	bics	r3, r2
 800a6c4:	1b5a      	subs	r2, r3, r5
 800a6c6:	429d      	cmp	r5, r3
 800a6c8:	d801      	bhi.n	800a6ce <_malloc_r+0x3a6>
 800a6ca:	2a0f      	cmp	r2, #15
 800a6cc:	dc1d      	bgt.n	800a70a <_malloc_r+0x3e2>
 800a6ce:	9801      	ldr	r0, [sp, #4]
 800a6d0:	f000 f848 	bl	800a764 <__malloc_unlock>
 800a6d4:	e635      	b.n	800a342 <_malloc_r+0x1a>
 800a6d6:	9b03      	ldr	r3, [sp, #12]
 800a6d8:	1ae3      	subs	r3, r4, r3
 800a6da:	185b      	adds	r3, r3, r1
 800a6dc:	4912      	ldr	r1, [pc, #72]	; (800a728 <_malloc_r+0x400>)
 800a6de:	600b      	str	r3, [r1, #0]
 800a6e0:	e7c7      	b.n	800a672 <_malloc_r+0x34a>
 800a6e2:	2207      	movs	r2, #7
 800a6e4:	9e02      	ldr	r6, [sp, #8]
 800a6e6:	3e0c      	subs	r6, #12
 800a6e8:	4396      	bics	r6, r2
 800a6ea:	687a      	ldr	r2, [r7, #4]
 800a6ec:	4013      	ands	r3, r2
 800a6ee:	2205      	movs	r2, #5
 800a6f0:	4333      	orrs	r3, r6
 800a6f2:	607b      	str	r3, [r7, #4]
 800a6f4:	19bb      	adds	r3, r7, r6
 800a6f6:	605a      	str	r2, [r3, #4]
 800a6f8:	609a      	str	r2, [r3, #8]
 800a6fa:	2e0f      	cmp	r6, #15
 800a6fc:	d995      	bls.n	800a62a <_malloc_r+0x302>
 800a6fe:	0039      	movs	r1, r7
 800a700:	9801      	ldr	r0, [sp, #4]
 800a702:	3108      	adds	r1, #8
 800a704:	f001 fffa 	bl	800c6fc <_free_r>
 800a708:	e78f      	b.n	800a62a <_malloc_r+0x302>
 800a70a:	2301      	movs	r3, #1
 800a70c:	0018      	movs	r0, r3
 800a70e:	4907      	ldr	r1, [pc, #28]	; (800a72c <_malloc_r+0x404>)
 800a710:	4328      	orrs	r0, r5
 800a712:	688c      	ldr	r4, [r1, #8]
 800a714:	4313      	orrs	r3, r2
 800a716:	1965      	adds	r5, r4, r5
 800a718:	6060      	str	r0, [r4, #4]
 800a71a:	608d      	str	r5, [r1, #8]
 800a71c:	606b      	str	r3, [r5, #4]
 800a71e:	e638      	b.n	800a392 <_malloc_r+0x6a>
 800a720:	2000053c 	.word	0x2000053c
 800a724:	00000080 	.word	0x00000080
 800a728:	200009c8 	.word	0x200009c8
 800a72c:	20000134 	.word	0x20000134

0800a730 <memcpy>:
 800a730:	2300      	movs	r3, #0
 800a732:	b510      	push	{r4, lr}
 800a734:	429a      	cmp	r2, r3
 800a736:	d100      	bne.n	800a73a <memcpy+0xa>
 800a738:	bd10      	pop	{r4, pc}
 800a73a:	5ccc      	ldrb	r4, [r1, r3]
 800a73c:	54c4      	strb	r4, [r0, r3]
 800a73e:	3301      	adds	r3, #1
 800a740:	e7f8      	b.n	800a734 <memcpy+0x4>

0800a742 <memset>:
 800a742:	0003      	movs	r3, r0
 800a744:	1882      	adds	r2, r0, r2
 800a746:	4293      	cmp	r3, r2
 800a748:	d100      	bne.n	800a74c <memset+0xa>
 800a74a:	4770      	bx	lr
 800a74c:	7019      	strb	r1, [r3, #0]
 800a74e:	3301      	adds	r3, #1
 800a750:	e7f9      	b.n	800a746 <memset+0x4>
	...

0800a754 <__malloc_lock>:
 800a754:	b510      	push	{r4, lr}
 800a756:	4802      	ldr	r0, [pc, #8]	; (800a760 <__malloc_lock+0xc>)
 800a758:	f002 f890 	bl	800c87c <__retarget_lock_acquire_recursive>
 800a75c:	bd10      	pop	{r4, pc}
 800a75e:	46c0      	nop			; (mov r8, r8)
 800a760:	20001370 	.word	0x20001370

0800a764 <__malloc_unlock>:
 800a764:	b510      	push	{r4, lr}
 800a766:	4802      	ldr	r0, [pc, #8]	; (800a770 <__malloc_unlock+0xc>)
 800a768:	f002 f889 	bl	800c87e <__retarget_lock_release_recursive>
 800a76c:	bd10      	pop	{r4, pc}
 800a76e:	46c0      	nop			; (mov r8, r8)
 800a770:	20001370 	.word	0x20001370

0800a774 <_sbrk_r>:
 800a774:	2300      	movs	r3, #0
 800a776:	b570      	push	{r4, r5, r6, lr}
 800a778:	4c06      	ldr	r4, [pc, #24]	; (800a794 <_sbrk_r+0x20>)
 800a77a:	0005      	movs	r5, r0
 800a77c:	0008      	movs	r0, r1
 800a77e:	6023      	str	r3, [r4, #0]
 800a780:	f002 fee0 	bl	800d544 <_sbrk>
 800a784:	1c43      	adds	r3, r0, #1
 800a786:	d103      	bne.n	800a790 <_sbrk_r+0x1c>
 800a788:	6823      	ldr	r3, [r4, #0]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d000      	beq.n	800a790 <_sbrk_r+0x1c>
 800a78e:	602b      	str	r3, [r5, #0]
 800a790:	bd70      	pop	{r4, r5, r6, pc}
 800a792:	46c0      	nop			; (mov r8, r8)
 800a794:	20001378 	.word	0x20001378

0800a798 <snprintf>:
 800a798:	b40c      	push	{r2, r3}
 800a79a:	b530      	push	{r4, r5, lr}
 800a79c:	4b16      	ldr	r3, [pc, #88]	; (800a7f8 <snprintf+0x60>)
 800a79e:	b09d      	sub	sp, #116	; 0x74
 800a7a0:	1e0c      	subs	r4, r1, #0
 800a7a2:	681d      	ldr	r5, [r3, #0]
 800a7a4:	da08      	bge.n	800a7b8 <snprintf+0x20>
 800a7a6:	238b      	movs	r3, #139	; 0x8b
 800a7a8:	2001      	movs	r0, #1
 800a7aa:	602b      	str	r3, [r5, #0]
 800a7ac:	4240      	negs	r0, r0
 800a7ae:	b01d      	add	sp, #116	; 0x74
 800a7b0:	bc30      	pop	{r4, r5}
 800a7b2:	bc08      	pop	{r3}
 800a7b4:	b002      	add	sp, #8
 800a7b6:	4718      	bx	r3
 800a7b8:	2382      	movs	r3, #130	; 0x82
 800a7ba:	a902      	add	r1, sp, #8
 800a7bc:	009b      	lsls	r3, r3, #2
 800a7be:	818b      	strh	r3, [r1, #12]
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	9002      	str	r0, [sp, #8]
 800a7c4:	6108      	str	r0, [r1, #16]
 800a7c6:	429c      	cmp	r4, r3
 800a7c8:	d000      	beq.n	800a7cc <snprintf+0x34>
 800a7ca:	1e63      	subs	r3, r4, #1
 800a7cc:	608b      	str	r3, [r1, #8]
 800a7ce:	614b      	str	r3, [r1, #20]
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	425b      	negs	r3, r3
 800a7d4:	81cb      	strh	r3, [r1, #14]
 800a7d6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a7d8:	ab21      	add	r3, sp, #132	; 0x84
 800a7da:	0028      	movs	r0, r5
 800a7dc:	9301      	str	r3, [sp, #4]
 800a7de:	f000 f81f 	bl	800a820 <_svfprintf_r>
 800a7e2:	1c43      	adds	r3, r0, #1
 800a7e4:	da01      	bge.n	800a7ea <snprintf+0x52>
 800a7e6:	238b      	movs	r3, #139	; 0x8b
 800a7e8:	602b      	str	r3, [r5, #0]
 800a7ea:	2c00      	cmp	r4, #0
 800a7ec:	d0df      	beq.n	800a7ae <snprintf+0x16>
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	9a02      	ldr	r2, [sp, #8]
 800a7f2:	7013      	strb	r3, [r2, #0]
 800a7f4:	e7db      	b.n	800a7ae <snprintf+0x16>
 800a7f6:	46c0      	nop			; (mov r8, r8)
 800a7f8:	20000040 	.word	0x20000040

0800a7fc <strncmp>:
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	b530      	push	{r4, r5, lr}
 800a800:	429a      	cmp	r2, r3
 800a802:	d00a      	beq.n	800a81a <strncmp+0x1e>
 800a804:	3a01      	subs	r2, #1
 800a806:	5cc4      	ldrb	r4, [r0, r3]
 800a808:	5ccd      	ldrb	r5, [r1, r3]
 800a80a:	42ac      	cmp	r4, r5
 800a80c:	d104      	bne.n	800a818 <strncmp+0x1c>
 800a80e:	429a      	cmp	r2, r3
 800a810:	d002      	beq.n	800a818 <strncmp+0x1c>
 800a812:	3301      	adds	r3, #1
 800a814:	2c00      	cmp	r4, #0
 800a816:	d1f6      	bne.n	800a806 <strncmp+0xa>
 800a818:	1b63      	subs	r3, r4, r5
 800a81a:	0018      	movs	r0, r3
 800a81c:	bd30      	pop	{r4, r5, pc}
	...

0800a820 <_svfprintf_r>:
 800a820:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a822:	b0c5      	sub	sp, #276	; 0x114
 800a824:	9109      	str	r1, [sp, #36]	; 0x24
 800a826:	0014      	movs	r4, r2
 800a828:	001d      	movs	r5, r3
 800a82a:	900a      	str	r0, [sp, #40]	; 0x28
 800a82c:	f002 f81a 	bl	800c864 <_localeconv_r>
 800a830:	6803      	ldr	r3, [r0, #0]
 800a832:	0018      	movs	r0, r3
 800a834:	9318      	str	r3, [sp, #96]	; 0x60
 800a836:	f7f5 fc67 	bl	8000108 <strlen>
 800a83a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a83c:	9012      	str	r0, [sp, #72]	; 0x48
 800a83e:	899b      	ldrh	r3, [r3, #12]
 800a840:	061b      	lsls	r3, r3, #24
 800a842:	d518      	bpl.n	800a876 <_svfprintf_r+0x56>
 800a844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a846:	691b      	ldr	r3, [r3, #16]
 800a848:	930b      	str	r3, [sp, #44]	; 0x2c
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d113      	bne.n	800a876 <_svfprintf_r+0x56>
 800a84e:	2140      	movs	r1, #64	; 0x40
 800a850:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a852:	f7ff fd69 	bl	800a328 <_malloc_r>
 800a856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a858:	6018      	str	r0, [r3, #0]
 800a85a:	6118      	str	r0, [r3, #16]
 800a85c:	2800      	cmp	r0, #0
 800a85e:	d107      	bne.n	800a870 <_svfprintf_r+0x50>
 800a860:	230c      	movs	r3, #12
 800a862:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a864:	6013      	str	r3, [r2, #0]
 800a866:	3b0d      	subs	r3, #13
 800a868:	9313      	str	r3, [sp, #76]	; 0x4c
 800a86a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800a86c:	b045      	add	sp, #276	; 0x114
 800a86e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a870:	2340      	movs	r3, #64	; 0x40
 800a872:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a874:	6153      	str	r3, [r2, #20]
 800a876:	2300      	movs	r3, #0
 800a878:	af34      	add	r7, sp, #208	; 0xd0
 800a87a:	9727      	str	r7, [sp, #156]	; 0x9c
 800a87c:	9329      	str	r3, [sp, #164]	; 0xa4
 800a87e:	9328      	str	r3, [sp, #160]	; 0xa0
 800a880:	9411      	str	r4, [sp, #68]	; 0x44
 800a882:	930e      	str	r3, [sp, #56]	; 0x38
 800a884:	9316      	str	r3, [sp, #88]	; 0x58
 800a886:	9317      	str	r3, [sp, #92]	; 0x5c
 800a888:	931a      	str	r3, [sp, #104]	; 0x68
 800a88a:	9319      	str	r3, [sp, #100]	; 0x64
 800a88c:	9313      	str	r3, [sp, #76]	; 0x4c
 800a88e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800a890:	7823      	ldrb	r3, [r4, #0]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d002      	beq.n	800a89c <_svfprintf_r+0x7c>
 800a896:	2b25      	cmp	r3, #37	; 0x25
 800a898:	d000      	beq.n	800a89c <_svfprintf_r+0x7c>
 800a89a:	e091      	b.n	800a9c0 <_svfprintf_r+0x1a0>
 800a89c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a89e:	1ae6      	subs	r6, r4, r3
 800a8a0:	d018      	beq.n	800a8d4 <_svfprintf_r+0xb4>
 800a8a2:	603b      	str	r3, [r7, #0]
 800a8a4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800a8a6:	607e      	str	r6, [r7, #4]
 800a8a8:	199b      	adds	r3, r3, r6
 800a8aa:	9329      	str	r3, [sp, #164]	; 0xa4
 800a8ac:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800a8ae:	3708      	adds	r7, #8
 800a8b0:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8b2:	3301      	adds	r3, #1
 800a8b4:	9328      	str	r3, [sp, #160]	; 0xa0
 800a8b6:	2b07      	cmp	r3, #7
 800a8b8:	dd09      	ble.n	800a8ce <_svfprintf_r+0xae>
 800a8ba:	aa27      	add	r2, sp, #156	; 0x9c
 800a8bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a8be:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a8c0:	f002 fade 	bl	800ce80 <__ssprint_r>
 800a8c4:	2800      	cmp	r0, #0
 800a8c6:	d001      	beq.n	800a8cc <_svfprintf_r+0xac>
 800a8c8:	f000 ffa8 	bl	800b81c <_svfprintf_r+0xffc>
 800a8cc:	af34      	add	r7, sp, #208	; 0xd0
 800a8ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a8d0:	199b      	adds	r3, r3, r6
 800a8d2:	9313      	str	r3, [sp, #76]	; 0x4c
 800a8d4:	7823      	ldrb	r3, [r4, #0]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d101      	bne.n	800a8de <_svfprintf_r+0xbe>
 800a8da:	f000 ffbe 	bl	800b85a <_svfprintf_r+0x103a>
 800a8de:	221f      	movs	r2, #31
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	a918      	add	r1, sp, #96	; 0x60
 800a8e4:	1852      	adds	r2, r2, r1
 800a8e6:	2101      	movs	r1, #1
 800a8e8:	7013      	strb	r3, [r2, #0]
 800a8ea:	001e      	movs	r6, r3
 800a8ec:	001a      	movs	r2, r3
 800a8ee:	4249      	negs	r1, r1
 800a8f0:	3401      	adds	r4, #1
 800a8f2:	910b      	str	r1, [sp, #44]	; 0x2c
 800a8f4:	9314      	str	r3, [sp, #80]	; 0x50
 800a8f6:	1c61      	adds	r1, r4, #1
 800a8f8:	9111      	str	r1, [sp, #68]	; 0x44
 800a8fa:	7821      	ldrb	r1, [r4, #0]
 800a8fc:	910d      	str	r1, [sp, #52]	; 0x34
 800a8fe:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a900:	3820      	subs	r0, #32
 800a902:	2858      	cmp	r0, #88	; 0x58
 800a904:	d901      	bls.n	800a90a <_svfprintf_r+0xea>
 800a906:	f000 fca7 	bl	800b258 <_svfprintf_r+0xa38>
 800a90a:	f7f5 fc0f 	bl	800012c <__gnu_thumb1_case_uhi>
 800a90e:	00cc      	.short	0x00cc
 800a910:	04a504a5 	.word	0x04a504a5
 800a914:	04a500d1 	.word	0x04a500d1
 800a918:	04a504a5 	.word	0x04a504a5
 800a91c:	04a504a5 	.word	0x04a504a5
 800a920:	00d404a5 	.word	0x00d404a5
 800a924:	04a5005b 	.word	0x04a5005b
 800a928:	00de00dc 	.word	0x00de00dc
 800a92c:	010304a5 	.word	0x010304a5
 800a930:	01050105 	.word	0x01050105
 800a934:	01050105 	.word	0x01050105
 800a938:	01050105 	.word	0x01050105
 800a93c:	01050105 	.word	0x01050105
 800a940:	04a50105 	.word	0x04a50105
 800a944:	04a504a5 	.word	0x04a504a5
 800a948:	04a504a5 	.word	0x04a504a5
 800a94c:	04a504a5 	.word	0x04a504a5
 800a950:	04a504a5 	.word	0x04a504a5
 800a954:	013504a5 	.word	0x013504a5
 800a958:	04a5014d 	.word	0x04a5014d
 800a95c:	04a5014d 	.word	0x04a5014d
 800a960:	04a504a5 	.word	0x04a504a5
 800a964:	011704a5 	.word	0x011704a5
 800a968:	04a504a5 	.word	0x04a504a5
 800a96c:	04a503ad 	.word	0x04a503ad
 800a970:	04a504a5 	.word	0x04a504a5
 800a974:	04a504a5 	.word	0x04a504a5
 800a978:	04a50407 	.word	0x04a50407
 800a97c:	00a304a5 	.word	0x00a304a5
 800a980:	04a504a5 	.word	0x04a504a5
 800a984:	04a504a5 	.word	0x04a504a5
 800a988:	04a504a5 	.word	0x04a504a5
 800a98c:	04a504a5 	.word	0x04a504a5
 800a990:	04a504a5 	.word	0x04a504a5
 800a994:	005f0126 	.word	0x005f0126
 800a998:	014d014d 	.word	0x014d014d
 800a99c:	0119014d 	.word	0x0119014d
 800a9a0:	04a5005f 	.word	0x04a5005f
 800a9a4:	011b04a5 	.word	0x011b04a5
 800a9a8:	038e04a5 	.word	0x038e04a5
 800a9ac:	03d903af 	.word	0x03d903af
 800a9b0:	04a50122 	.word	0x04a50122
 800a9b4:	04a503ea 	.word	0x04a503ea
 800a9b8:	04a50409 	.word	0x04a50409
 800a9bc:	043004a5 	.word	0x043004a5
 800a9c0:	3401      	adds	r4, #1
 800a9c2:	e765      	b.n	800a890 <_svfprintf_r+0x70>
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	222b      	movs	r2, #43	; 0x2b
 800a9c8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800a9ca:	e794      	b.n	800a8f6 <_svfprintf_r+0xd6>
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d003      	beq.n	800a9d8 <_svfprintf_r+0x1b8>
 800a9d0:	231f      	movs	r3, #31
 800a9d2:	a918      	add	r1, sp, #96	; 0x60
 800a9d4:	185b      	adds	r3, r3, r1
 800a9d6:	701a      	strb	r2, [r3, #0]
 800a9d8:	06b3      	lsls	r3, r6, #26
 800a9da:	d400      	bmi.n	800a9de <_svfprintf_r+0x1be>
 800a9dc:	e0d5      	b.n	800ab8a <_svfprintf_r+0x36a>
 800a9de:	2307      	movs	r3, #7
 800a9e0:	3507      	adds	r5, #7
 800a9e2:	439d      	bics	r5, r3
 800a9e4:	002b      	movs	r3, r5
 800a9e6:	3308      	adds	r3, #8
 800a9e8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a9ea:	682b      	ldr	r3, [r5, #0]
 800a9ec:	686c      	ldr	r4, [r5, #4]
 800a9ee:	9306      	str	r3, [sp, #24]
 800a9f0:	9407      	str	r4, [sp, #28]
 800a9f2:	9a07      	ldr	r2, [sp, #28]
 800a9f4:	2301      	movs	r3, #1
 800a9f6:	2a00      	cmp	r2, #0
 800a9f8:	da0c      	bge.n	800aa14 <_svfprintf_r+0x1f4>
 800a9fa:	9906      	ldr	r1, [sp, #24]
 800a9fc:	9a07      	ldr	r2, [sp, #28]
 800a9fe:	2400      	movs	r4, #0
 800aa00:	424b      	negs	r3, r1
 800aa02:	4194      	sbcs	r4, r2
 800aa04:	9306      	str	r3, [sp, #24]
 800aa06:	9407      	str	r4, [sp, #28]
 800aa08:	231f      	movs	r3, #31
 800aa0a:	222d      	movs	r2, #45	; 0x2d
 800aa0c:	a918      	add	r1, sp, #96	; 0x60
 800aa0e:	185b      	adds	r3, r3, r1
 800aa10:	701a      	strb	r2, [r3, #0]
 800aa12:	2301      	movs	r3, #1
 800aa14:	9907      	ldr	r1, [sp, #28]
 800aa16:	9a06      	ldr	r2, [sp, #24]
 800aa18:	430a      	orrs	r2, r1
 800aa1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aa1c:	3101      	adds	r1, #1
 800aa1e:	d101      	bne.n	800aa24 <_svfprintf_r+0x204>
 800aa20:	f000 ff3f 	bl	800b8a2 <_svfprintf_r+0x1082>
 800aa24:	2180      	movs	r1, #128	; 0x80
 800aa26:	0035      	movs	r5, r6
 800aa28:	438d      	bics	r5, r1
 800aa2a:	2a00      	cmp	r2, #0
 800aa2c:	d001      	beq.n	800aa32 <_svfprintf_r+0x212>
 800aa2e:	f000 ff3d 	bl	800b8ac <_svfprintf_r+0x108c>
 800aa32:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aa34:	2a00      	cmp	r2, #0
 800aa36:	d101      	bne.n	800aa3c <_svfprintf_r+0x21c>
 800aa38:	f000 fc04 	bl	800b244 <_svfprintf_r+0xa24>
 800aa3c:	2b01      	cmp	r3, #1
 800aa3e:	d100      	bne.n	800aa42 <_svfprintf_r+0x222>
 800aa40:	e3b7      	b.n	800b1b2 <_svfprintf_r+0x992>
 800aa42:	2b02      	cmp	r3, #2
 800aa44:	d100      	bne.n	800aa48 <_svfprintf_r+0x228>
 800aa46:	e3df      	b.n	800b208 <_svfprintf_r+0x9e8>
 800aa48:	2300      	movs	r3, #0
 800aa4a:	2400      	movs	r4, #0
 800aa4c:	9306      	str	r3, [sp, #24]
 800aa4e:	9407      	str	r4, [sp, #28]
 800aa50:	f000 ff32 	bl	800b8b8 <_svfprintf_r+0x1098>
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d003      	beq.n	800aa60 <_svfprintf_r+0x240>
 800aa58:	231f      	movs	r3, #31
 800aa5a:	a918      	add	r1, sp, #96	; 0x60
 800aa5c:	185b      	adds	r3, r3, r1
 800aa5e:	701a      	strb	r2, [r3, #0]
 800aa60:	4b8c      	ldr	r3, [pc, #560]	; (800ac94 <_svfprintf_r+0x474>)
 800aa62:	931a      	str	r3, [sp, #104]	; 0x68
 800aa64:	2320      	movs	r3, #32
 800aa66:	4033      	ands	r3, r6
 800aa68:	d100      	bne.n	800aa6c <_svfprintf_r+0x24c>
 800aa6a:	e388      	b.n	800b17e <_svfprintf_r+0x95e>
 800aa6c:	2307      	movs	r3, #7
 800aa6e:	3507      	adds	r5, #7
 800aa70:	439d      	bics	r5, r3
 800aa72:	002b      	movs	r3, r5
 800aa74:	3308      	adds	r3, #8
 800aa76:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa78:	682b      	ldr	r3, [r5, #0]
 800aa7a:	686c      	ldr	r4, [r5, #4]
 800aa7c:	9306      	str	r3, [sp, #24]
 800aa7e:	9407      	str	r4, [sp, #28]
 800aa80:	2302      	movs	r3, #2
 800aa82:	07f2      	lsls	r2, r6, #31
 800aa84:	d400      	bmi.n	800aa88 <_svfprintf_r+0x268>
 800aa86:	e2ff      	b.n	800b088 <_svfprintf_r+0x868>
 800aa88:	9a06      	ldr	r2, [sp, #24]
 800aa8a:	9907      	ldr	r1, [sp, #28]
 800aa8c:	430a      	orrs	r2, r1
 800aa8e:	d100      	bne.n	800aa92 <_svfprintf_r+0x272>
 800aa90:	e2fa      	b.n	800b088 <_svfprintf_r+0x868>
 800aa92:	2130      	movs	r1, #48	; 0x30
 800aa94:	aa20      	add	r2, sp, #128	; 0x80
 800aa96:	7011      	strb	r1, [r2, #0]
 800aa98:	2034      	movs	r0, #52	; 0x34
 800aa9a:	4669      	mov	r1, sp
 800aa9c:	1809      	adds	r1, r1, r0
 800aa9e:	7809      	ldrb	r1, [r1, #0]
 800aaa0:	431e      	orrs	r6, r3
 800aaa2:	7051      	strb	r1, [r2, #1]
 800aaa4:	e2f0      	b.n	800b088 <_svfprintf_r+0x868>
 800aaa6:	2a00      	cmp	r2, #0
 800aaa8:	d18e      	bne.n	800a9c8 <_svfprintf_r+0x1a8>
 800aaaa:	2301      	movs	r3, #1
 800aaac:	2220      	movs	r2, #32
 800aaae:	e78b      	b.n	800a9c8 <_svfprintf_r+0x1a8>
 800aab0:	2101      	movs	r1, #1
 800aab2:	430e      	orrs	r6, r1
 800aab4:	e788      	b.n	800a9c8 <_svfprintf_r+0x1a8>
 800aab6:	6829      	ldr	r1, [r5, #0]
 800aab8:	3504      	adds	r5, #4
 800aaba:	9114      	str	r1, [sp, #80]	; 0x50
 800aabc:	2900      	cmp	r1, #0
 800aabe:	db00      	blt.n	800aac2 <_svfprintf_r+0x2a2>
 800aac0:	e782      	b.n	800a9c8 <_svfprintf_r+0x1a8>
 800aac2:	4249      	negs	r1, r1
 800aac4:	9114      	str	r1, [sp, #80]	; 0x50
 800aac6:	2104      	movs	r1, #4
 800aac8:	e7f3      	b.n	800aab2 <_svfprintf_r+0x292>
 800aaca:	9811      	ldr	r0, [sp, #68]	; 0x44
 800aacc:	9911      	ldr	r1, [sp, #68]	; 0x44
 800aace:	7800      	ldrb	r0, [r0, #0]
 800aad0:	3101      	adds	r1, #1
 800aad2:	900d      	str	r0, [sp, #52]	; 0x34
 800aad4:	282a      	cmp	r0, #42	; 0x2a
 800aad6:	d009      	beq.n	800aaec <_svfprintf_r+0x2cc>
 800aad8:	2000      	movs	r0, #0
 800aada:	900b      	str	r0, [sp, #44]	; 0x2c
 800aadc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800aade:	0008      	movs	r0, r1
 800aae0:	3c30      	subs	r4, #48	; 0x30
 800aae2:	46a4      	mov	ip, r4
 800aae4:	2c09      	cmp	r4, #9
 800aae6:	d90c      	bls.n	800ab02 <_svfprintf_r+0x2e2>
 800aae8:	9011      	str	r0, [sp, #68]	; 0x44
 800aaea:	e708      	b.n	800a8fe <_svfprintf_r+0xde>
 800aaec:	682c      	ldr	r4, [r5, #0]
 800aaee:	1d28      	adds	r0, r5, #4
 800aaf0:	940b      	str	r4, [sp, #44]	; 0x2c
 800aaf2:	2c00      	cmp	r4, #0
 800aaf4:	da02      	bge.n	800aafc <_svfprintf_r+0x2dc>
 800aaf6:	2401      	movs	r4, #1
 800aaf8:	4264      	negs	r4, r4
 800aafa:	940b      	str	r4, [sp, #44]	; 0x2c
 800aafc:	0005      	movs	r5, r0
 800aafe:	9111      	str	r1, [sp, #68]	; 0x44
 800ab00:	e762      	b.n	800a9c8 <_svfprintf_r+0x1a8>
 800ab02:	240a      	movs	r4, #10
 800ab04:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ab06:	4360      	muls	r0, r4
 800ab08:	4460      	add	r0, ip
 800ab0a:	900b      	str	r0, [sp, #44]	; 0x2c
 800ab0c:	7808      	ldrb	r0, [r1, #0]
 800ab0e:	3101      	adds	r1, #1
 800ab10:	900d      	str	r0, [sp, #52]	; 0x34
 800ab12:	e7e3      	b.n	800aadc <_svfprintf_r+0x2bc>
 800ab14:	2180      	movs	r1, #128	; 0x80
 800ab16:	e7cc      	b.n	800aab2 <_svfprintf_r+0x292>
 800ab18:	2100      	movs	r1, #0
 800ab1a:	9114      	str	r1, [sp, #80]	; 0x50
 800ab1c:	200a      	movs	r0, #10
 800ab1e:	9914      	ldr	r1, [sp, #80]	; 0x50
 800ab20:	4341      	muls	r1, r0
 800ab22:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ab24:	3830      	subs	r0, #48	; 0x30
 800ab26:	1841      	adds	r1, r0, r1
 800ab28:	9114      	str	r1, [sp, #80]	; 0x50
 800ab2a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ab2c:	1c48      	adds	r0, r1, #1
 800ab2e:	7809      	ldrb	r1, [r1, #0]
 800ab30:	9011      	str	r0, [sp, #68]	; 0x44
 800ab32:	910d      	str	r1, [sp, #52]	; 0x34
 800ab34:	3930      	subs	r1, #48	; 0x30
 800ab36:	2909      	cmp	r1, #9
 800ab38:	d9f0      	bls.n	800ab1c <_svfprintf_r+0x2fc>
 800ab3a:	e7d5      	b.n	800aae8 <_svfprintf_r+0x2c8>
 800ab3c:	2108      	movs	r1, #8
 800ab3e:	e7b8      	b.n	800aab2 <_svfprintf_r+0x292>
 800ab40:	2140      	movs	r1, #64	; 0x40
 800ab42:	e7b6      	b.n	800aab2 <_svfprintf_r+0x292>
 800ab44:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ab46:	7809      	ldrb	r1, [r1, #0]
 800ab48:	296c      	cmp	r1, #108	; 0x6c
 800ab4a:	d104      	bne.n	800ab56 <_svfprintf_r+0x336>
 800ab4c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ab4e:	3101      	adds	r1, #1
 800ab50:	9111      	str	r1, [sp, #68]	; 0x44
 800ab52:	2120      	movs	r1, #32
 800ab54:	e7ad      	b.n	800aab2 <_svfprintf_r+0x292>
 800ab56:	2110      	movs	r1, #16
 800ab58:	e7ab      	b.n	800aab2 <_svfprintf_r+0x292>
 800ab5a:	1d2b      	adds	r3, r5, #4
 800ab5c:	682a      	ldr	r2, [r5, #0]
 800ab5e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab60:	ab2a      	add	r3, sp, #168	; 0xa8
 800ab62:	701a      	strb	r2, [r3, #0]
 800ab64:	221f      	movs	r2, #31
 800ab66:	2400      	movs	r4, #0
 800ab68:	a918      	add	r1, sp, #96	; 0x60
 800ab6a:	1852      	adds	r2, r2, r1
 800ab6c:	7014      	strb	r4, [r2, #0]
 800ab6e:	2201      	movs	r2, #1
 800ab70:	9410      	str	r4, [sp, #64]	; 0x40
 800ab72:	920b      	str	r2, [sp, #44]	; 0x2c
 800ab74:	930c      	str	r3, [sp, #48]	; 0x30
 800ab76:	e134      	b.n	800ade2 <_svfprintf_r+0x5c2>
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d003      	beq.n	800ab84 <_svfprintf_r+0x364>
 800ab7c:	231f      	movs	r3, #31
 800ab7e:	a918      	add	r1, sp, #96	; 0x60
 800ab80:	185b      	adds	r3, r3, r1
 800ab82:	701a      	strb	r2, [r3, #0]
 800ab84:	2310      	movs	r3, #16
 800ab86:	431e      	orrs	r6, r3
 800ab88:	e726      	b.n	800a9d8 <_svfprintf_r+0x1b8>
 800ab8a:	1d2a      	adds	r2, r5, #4
 800ab8c:	06f3      	lsls	r3, r6, #27
 800ab8e:	d505      	bpl.n	800ab9c <_svfprintf_r+0x37c>
 800ab90:	682b      	ldr	r3, [r5, #0]
 800ab92:	920f      	str	r2, [sp, #60]	; 0x3c
 800ab94:	9306      	str	r3, [sp, #24]
 800ab96:	17db      	asrs	r3, r3, #31
 800ab98:	9307      	str	r3, [sp, #28]
 800ab9a:	e72a      	b.n	800a9f2 <_svfprintf_r+0x1d2>
 800ab9c:	682b      	ldr	r3, [r5, #0]
 800ab9e:	920f      	str	r2, [sp, #60]	; 0x3c
 800aba0:	0671      	lsls	r1, r6, #25
 800aba2:	d5f7      	bpl.n	800ab94 <_svfprintf_r+0x374>
 800aba4:	b21b      	sxth	r3, r3
 800aba6:	e7f5      	b.n	800ab94 <_svfprintf_r+0x374>
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d003      	beq.n	800abb4 <_svfprintf_r+0x394>
 800abac:	231f      	movs	r3, #31
 800abae:	a918      	add	r1, sp, #96	; 0x60
 800abb0:	185b      	adds	r3, r3, r1
 800abb2:	701a      	strb	r2, [r3, #0]
 800abb4:	2307      	movs	r3, #7
 800abb6:	3507      	adds	r5, #7
 800abb8:	439d      	bics	r5, r3
 800abba:	002b      	movs	r3, r5
 800abbc:	2201      	movs	r2, #1
 800abbe:	3308      	adds	r3, #8
 800abc0:	930f      	str	r3, [sp, #60]	; 0x3c
 800abc2:	682b      	ldr	r3, [r5, #0]
 800abc4:	4252      	negs	r2, r2
 800abc6:	9316      	str	r3, [sp, #88]	; 0x58
 800abc8:	686b      	ldr	r3, [r5, #4]
 800abca:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800abcc:	9317      	str	r3, [sp, #92]	; 0x5c
 800abce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800abd0:	0028      	movs	r0, r5
 800abd2:	005c      	lsls	r4, r3, #1
 800abd4:	0864      	lsrs	r4, r4, #1
 800abd6:	4b30      	ldr	r3, [pc, #192]	; (800ac98 <_svfprintf_r+0x478>)
 800abd8:	0021      	movs	r1, r4
 800abda:	f7f7 fa3d 	bl	8002058 <__aeabi_dcmpun>
 800abde:	2800      	cmp	r0, #0
 800abe0:	d001      	beq.n	800abe6 <_svfprintf_r+0x3c6>
 800abe2:	f000 fe44 	bl	800b86e <_svfprintf_r+0x104e>
 800abe6:	2201      	movs	r2, #1
 800abe8:	4b2b      	ldr	r3, [pc, #172]	; (800ac98 <_svfprintf_r+0x478>)
 800abea:	4252      	negs	r2, r2
 800abec:	0028      	movs	r0, r5
 800abee:	0021      	movs	r1, r4
 800abf0:	f7f5 fc3c 	bl	800046c <__aeabi_dcmple>
 800abf4:	2800      	cmp	r0, #0
 800abf6:	d001      	beq.n	800abfc <_svfprintf_r+0x3dc>
 800abf8:	f000 fe39 	bl	800b86e <_svfprintf_r+0x104e>
 800abfc:	2200      	movs	r2, #0
 800abfe:	2300      	movs	r3, #0
 800ac00:	9816      	ldr	r0, [sp, #88]	; 0x58
 800ac02:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800ac04:	f7f5 fc28 	bl	8000458 <__aeabi_dcmplt>
 800ac08:	2800      	cmp	r0, #0
 800ac0a:	d004      	beq.n	800ac16 <_svfprintf_r+0x3f6>
 800ac0c:	231f      	movs	r3, #31
 800ac0e:	222d      	movs	r2, #45	; 0x2d
 800ac10:	a918      	add	r1, sp, #96	; 0x60
 800ac12:	185b      	adds	r3, r3, r1
 800ac14:	701a      	strb	r2, [r3, #0]
 800ac16:	4b21      	ldr	r3, [pc, #132]	; (800ac9c <_svfprintf_r+0x47c>)
 800ac18:	930c      	str	r3, [sp, #48]	; 0x30
 800ac1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac1c:	2b47      	cmp	r3, #71	; 0x47
 800ac1e:	dc01      	bgt.n	800ac24 <_svfprintf_r+0x404>
 800ac20:	4b1f      	ldr	r3, [pc, #124]	; (800aca0 <_svfprintf_r+0x480>)
 800ac22:	930c      	str	r3, [sp, #48]	; 0x30
 800ac24:	2380      	movs	r3, #128	; 0x80
 800ac26:	2400      	movs	r4, #0
 800ac28:	439e      	bics	r6, r3
 800ac2a:	3b7d      	subs	r3, #125	; 0x7d
 800ac2c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac2e:	9410      	str	r4, [sp, #64]	; 0x40
 800ac30:	e0d7      	b.n	800ade2 <_svfprintf_r+0x5c2>
 800ac32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac34:	3301      	adds	r3, #1
 800ac36:	d024      	beq.n	800ac82 <_svfprintf_r+0x462>
 800ac38:	2320      	movs	r3, #32
 800ac3a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ac3c:	439a      	bics	r2, r3
 800ac3e:	2a47      	cmp	r2, #71	; 0x47
 800ac40:	d102      	bne.n	800ac48 <_svfprintf_r+0x428>
 800ac42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d01f      	beq.n	800ac88 <_svfprintf_r+0x468>
 800ac48:	2380      	movs	r3, #128	; 0x80
 800ac4a:	005b      	lsls	r3, r3, #1
 800ac4c:	4333      	orrs	r3, r6
 800ac4e:	931c      	str	r3, [sp, #112]	; 0x70
 800ac50:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800ac52:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ac54:	9310      	str	r3, [sp, #64]	; 0x40
 800ac56:	2c00      	cmp	r4, #0
 800ac58:	da18      	bge.n	800ac8c <_svfprintf_r+0x46c>
 800ac5a:	2280      	movs	r2, #128	; 0x80
 800ac5c:	0612      	lsls	r2, r2, #24
 800ac5e:	0023      	movs	r3, r4
 800ac60:	4694      	mov	ip, r2
 800ac62:	4463      	add	r3, ip
 800ac64:	9315      	str	r3, [sp, #84]	; 0x54
 800ac66:	232d      	movs	r3, #45	; 0x2d
 800ac68:	931b      	str	r3, [sp, #108]	; 0x6c
 800ac6a:	2320      	movs	r3, #32
 800ac6c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800ac6e:	439c      	bics	r4, r3
 800ac70:	2c46      	cmp	r4, #70	; 0x46
 800ac72:	d017      	beq.n	800aca4 <_svfprintf_r+0x484>
 800ac74:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800ac76:	2c45      	cmp	r4, #69	; 0x45
 800ac78:	d101      	bne.n	800ac7e <_svfprintf_r+0x45e>
 800ac7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac7c:	1c5d      	adds	r5, r3, #1
 800ac7e:	2302      	movs	r3, #2
 800ac80:	e012      	b.n	800aca8 <_svfprintf_r+0x488>
 800ac82:	2306      	movs	r3, #6
 800ac84:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac86:	e7df      	b.n	800ac48 <_svfprintf_r+0x428>
 800ac88:	2301      	movs	r3, #1
 800ac8a:	e7fb      	b.n	800ac84 <_svfprintf_r+0x464>
 800ac8c:	9415      	str	r4, [sp, #84]	; 0x54
 800ac8e:	2300      	movs	r3, #0
 800ac90:	e7ea      	b.n	800ac68 <_svfprintf_r+0x448>
 800ac92:	46c0      	nop			; (mov r8, r8)
 800ac94:	0800d8e9 	.word	0x0800d8e9
 800ac98:	7fefffff 	.word	0x7fefffff
 800ac9c:	0800d8dd 	.word	0x0800d8dd
 800aca0:	0800d8d9 	.word	0x0800d8d9
 800aca4:	2303      	movs	r3, #3
 800aca6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800aca8:	aa25      	add	r2, sp, #148	; 0x94
 800acaa:	9204      	str	r2, [sp, #16]
 800acac:	aa22      	add	r2, sp, #136	; 0x88
 800acae:	9203      	str	r2, [sp, #12]
 800acb0:	aa21      	add	r2, sp, #132	; 0x84
 800acb2:	9202      	str	r2, [sp, #8]
 800acb4:	9300      	str	r3, [sp, #0]
 800acb6:	9501      	str	r5, [sp, #4]
 800acb8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800acba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800acbc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800acbe:	f000 fee1 	bl	800ba84 <_dtoa_r>
 800acc2:	900c      	str	r0, [sp, #48]	; 0x30
 800acc4:	2c47      	cmp	r4, #71	; 0x47
 800acc6:	d103      	bne.n	800acd0 <_svfprintf_r+0x4b0>
 800acc8:	07f3      	lsls	r3, r6, #31
 800acca:	d401      	bmi.n	800acd0 <_svfprintf_r+0x4b0>
 800accc:	f000 fde3 	bl	800b896 <_svfprintf_r+0x1076>
 800acd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800acd2:	195b      	adds	r3, r3, r5
 800acd4:	930e      	str	r3, [sp, #56]	; 0x38
 800acd6:	2c46      	cmp	r4, #70	; 0x46
 800acd8:	d113      	bne.n	800ad02 <_svfprintf_r+0x4e2>
 800acda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	2b30      	cmp	r3, #48	; 0x30
 800ace0:	d10a      	bne.n	800acf8 <_svfprintf_r+0x4d8>
 800ace2:	2200      	movs	r2, #0
 800ace4:	2300      	movs	r3, #0
 800ace6:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ace8:	9915      	ldr	r1, [sp, #84]	; 0x54
 800acea:	f7f5 fbaf 	bl	800044c <__aeabi_dcmpeq>
 800acee:	2800      	cmp	r0, #0
 800acf0:	d102      	bne.n	800acf8 <_svfprintf_r+0x4d8>
 800acf2:	2301      	movs	r3, #1
 800acf4:	1b5d      	subs	r5, r3, r5
 800acf6:	9521      	str	r5, [sp, #132]	; 0x84
 800acf8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800acfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800acfc:	4694      	mov	ip, r2
 800acfe:	4463      	add	r3, ip
 800ad00:	930e      	str	r3, [sp, #56]	; 0x38
 800ad02:	2200      	movs	r2, #0
 800ad04:	2300      	movs	r3, #0
 800ad06:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ad08:	9915      	ldr	r1, [sp, #84]	; 0x54
 800ad0a:	f7f5 fb9f 	bl	800044c <__aeabi_dcmpeq>
 800ad0e:	2230      	movs	r2, #48	; 0x30
 800ad10:	2800      	cmp	r0, #0
 800ad12:	d100      	bne.n	800ad16 <_svfprintf_r+0x4f6>
 800ad14:	e13d      	b.n	800af92 <_svfprintf_r+0x772>
 800ad16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad18:	9325      	str	r3, [sp, #148]	; 0x94
 800ad1a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800ad1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ad1e:	1a9b      	subs	r3, r3, r2
 800ad20:	930e      	str	r3, [sp, #56]	; 0x38
 800ad22:	2c47      	cmp	r4, #71	; 0x47
 800ad24:	d000      	beq.n	800ad28 <_svfprintf_r+0x508>
 800ad26:	e139      	b.n	800af9c <_svfprintf_r+0x77c>
 800ad28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad2a:	1cda      	adds	r2, r3, #3
 800ad2c:	db03      	blt.n	800ad36 <_svfprintf_r+0x516>
 800ad2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ad30:	429a      	cmp	r2, r3
 800ad32:	db00      	blt.n	800ad36 <_svfprintf_r+0x516>
 800ad34:	e162      	b.n	800affc <_svfprintf_r+0x7dc>
 800ad36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad38:	3b02      	subs	r3, #2
 800ad3a:	930d      	str	r3, [sp, #52]	; 0x34
 800ad3c:	4669      	mov	r1, sp
 800ad3e:	2034      	movs	r0, #52	; 0x34
 800ad40:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ad42:	1809      	adds	r1, r1, r0
 800ad44:	7809      	ldrb	r1, [r1, #0]
 800ad46:	1e54      	subs	r4, r2, #1
 800ad48:	ab23      	add	r3, sp, #140	; 0x8c
 800ad4a:	9421      	str	r4, [sp, #132]	; 0x84
 800ad4c:	7019      	strb	r1, [r3, #0]
 800ad4e:	2c00      	cmp	r4, #0
 800ad50:	db00      	blt.n	800ad54 <_svfprintf_r+0x534>
 800ad52:	e13a      	b.n	800afca <_svfprintf_r+0x7aa>
 800ad54:	2401      	movs	r4, #1
 800ad56:	1aa4      	subs	r4, r4, r2
 800ad58:	222d      	movs	r2, #45	; 0x2d
 800ad5a:	705a      	strb	r2, [r3, #1]
 800ad5c:	2c09      	cmp	r4, #9
 800ad5e:	dc00      	bgt.n	800ad62 <_svfprintf_r+0x542>
 800ad60:	e13c      	b.n	800afdc <_svfprintf_r+0x7bc>
 800ad62:	253b      	movs	r5, #59	; 0x3b
 800ad64:	ab18      	add	r3, sp, #96	; 0x60
 800ad66:	18ed      	adds	r5, r5, r3
 800ad68:	1e6b      	subs	r3, r5, #1
 800ad6a:	0020      	movs	r0, r4
 800ad6c:	210a      	movs	r1, #10
 800ad6e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad70:	f7f5 fb56 	bl	8000420 <__aeabi_idivmod>
 800ad74:	1e6b      	subs	r3, r5, #1
 800ad76:	3130      	adds	r1, #48	; 0x30
 800ad78:	7019      	strb	r1, [r3, #0]
 800ad7a:	0020      	movs	r0, r4
 800ad7c:	210a      	movs	r1, #10
 800ad7e:	f7f5 fa69 	bl	8000254 <__divsi3>
 800ad82:	0004      	movs	r4, r0
 800ad84:	2809      	cmp	r0, #9
 800ad86:	dd00      	ble.n	800ad8a <_svfprintf_r+0x56a>
 800ad88:	e121      	b.n	800afce <_svfprintf_r+0x7ae>
 800ad8a:	232e      	movs	r3, #46	; 0x2e
 800ad8c:	213b      	movs	r1, #59	; 0x3b
 800ad8e:	aa18      	add	r2, sp, #96	; 0x60
 800ad90:	3d02      	subs	r5, #2
 800ad92:	3430      	adds	r4, #48	; 0x30
 800ad94:	702c      	strb	r4, [r5, #0]
 800ad96:	189b      	adds	r3, r3, r2
 800ad98:	1889      	adds	r1, r1, r2
 800ad9a:	001a      	movs	r2, r3
 800ad9c:	428d      	cmp	r5, r1
 800ad9e:	d200      	bcs.n	800ada2 <_svfprintf_r+0x582>
 800ada0:	e117      	b.n	800afd2 <_svfprintf_r+0x7b2>
 800ada2:	ab23      	add	r3, sp, #140	; 0x8c
 800ada4:	1ad3      	subs	r3, r2, r3
 800ada6:	9319      	str	r3, [sp, #100]	; 0x64
 800ada8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800adaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800adac:	4694      	mov	ip, r2
 800adae:	4463      	add	r3, ip
 800adb0:	930b      	str	r3, [sp, #44]	; 0x2c
 800adb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800adb4:	2b01      	cmp	r3, #1
 800adb6:	dc03      	bgt.n	800adc0 <_svfprintf_r+0x5a0>
 800adb8:	2301      	movs	r3, #1
 800adba:	401e      	ands	r6, r3
 800adbc:	9610      	str	r6, [sp, #64]	; 0x40
 800adbe:	d006      	beq.n	800adce <_svfprintf_r+0x5ae>
 800adc0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800adc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800adc4:	4694      	mov	ip, r2
 800adc6:	4463      	add	r3, ip
 800adc8:	930b      	str	r3, [sp, #44]	; 0x2c
 800adca:	2300      	movs	r3, #0
 800adcc:	9310      	str	r3, [sp, #64]	; 0x40
 800adce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800add0:	2b00      	cmp	r3, #0
 800add2:	d004      	beq.n	800adde <_svfprintf_r+0x5be>
 800add4:	231f      	movs	r3, #31
 800add6:	222d      	movs	r2, #45	; 0x2d
 800add8:	a918      	add	r1, sp, #96	; 0x60
 800adda:	185b      	adds	r3, r3, r1
 800addc:	701a      	strb	r2, [r3, #0]
 800adde:	2400      	movs	r4, #0
 800ade0:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800ade2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ade4:	9415      	str	r4, [sp, #84]	; 0x54
 800ade6:	429c      	cmp	r4, r3
 800ade8:	da00      	bge.n	800adec <_svfprintf_r+0x5cc>
 800adea:	9315      	str	r3, [sp, #84]	; 0x54
 800adec:	231f      	movs	r3, #31
 800adee:	aa18      	add	r2, sp, #96	; 0x60
 800adf0:	189b      	adds	r3, r3, r2
 800adf2:	781b      	ldrb	r3, [r3, #0]
 800adf4:	1e5a      	subs	r2, r3, #1
 800adf6:	4193      	sbcs	r3, r2
 800adf8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800adfa:	18d3      	adds	r3, r2, r3
 800adfc:	9315      	str	r3, [sp, #84]	; 0x54
 800adfe:	2302      	movs	r3, #2
 800ae00:	4033      	ands	r3, r6
 800ae02:	931b      	str	r3, [sp, #108]	; 0x6c
 800ae04:	d002      	beq.n	800ae0c <_svfprintf_r+0x5ec>
 800ae06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae08:	3302      	adds	r3, #2
 800ae0a:	9315      	str	r3, [sp, #84]	; 0x54
 800ae0c:	2384      	movs	r3, #132	; 0x84
 800ae0e:	4033      	ands	r3, r6
 800ae10:	931c      	str	r3, [sp, #112]	; 0x70
 800ae12:	d11e      	bne.n	800ae52 <_svfprintf_r+0x632>
 800ae14:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ae16:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ae18:	1a9d      	subs	r5, r3, r2
 800ae1a:	2d00      	cmp	r5, #0
 800ae1c:	dd19      	ble.n	800ae52 <_svfprintf_r+0x632>
 800ae1e:	4bcc      	ldr	r3, [pc, #816]	; (800b150 <_svfprintf_r+0x930>)
 800ae20:	603b      	str	r3, [r7, #0]
 800ae22:	2d10      	cmp	r5, #16
 800ae24:	dd00      	ble.n	800ae28 <_svfprintf_r+0x608>
 800ae26:	e230      	b.n	800b28a <_svfprintf_r+0xa6a>
 800ae28:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800ae2a:	607d      	str	r5, [r7, #4]
 800ae2c:	195d      	adds	r5, r3, r5
 800ae2e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800ae30:	9529      	str	r5, [sp, #164]	; 0xa4
 800ae32:	931d      	str	r3, [sp, #116]	; 0x74
 800ae34:	3301      	adds	r3, #1
 800ae36:	9328      	str	r3, [sp, #160]	; 0xa0
 800ae38:	3708      	adds	r7, #8
 800ae3a:	2b07      	cmp	r3, #7
 800ae3c:	dd09      	ble.n	800ae52 <_svfprintf_r+0x632>
 800ae3e:	aa27      	add	r2, sp, #156	; 0x9c
 800ae40:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ae42:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ae44:	f002 f81c 	bl	800ce80 <__ssprint_r>
 800ae48:	2800      	cmp	r0, #0
 800ae4a:	d001      	beq.n	800ae50 <_svfprintf_r+0x630>
 800ae4c:	f000 fce6 	bl	800b81c <_svfprintf_r+0xffc>
 800ae50:	af34      	add	r7, sp, #208	; 0xd0
 800ae52:	231f      	movs	r3, #31
 800ae54:	aa18      	add	r2, sp, #96	; 0x60
 800ae56:	189b      	adds	r3, r3, r2
 800ae58:	781a      	ldrb	r2, [r3, #0]
 800ae5a:	2a00      	cmp	r2, #0
 800ae5c:	d016      	beq.n	800ae8c <_svfprintf_r+0x66c>
 800ae5e:	603b      	str	r3, [r7, #0]
 800ae60:	2301      	movs	r3, #1
 800ae62:	607b      	str	r3, [r7, #4]
 800ae64:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800ae66:	3708      	adds	r7, #8
 800ae68:	3301      	adds	r3, #1
 800ae6a:	9329      	str	r3, [sp, #164]	; 0xa4
 800ae6c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800ae6e:	931d      	str	r3, [sp, #116]	; 0x74
 800ae70:	3301      	adds	r3, #1
 800ae72:	9328      	str	r3, [sp, #160]	; 0xa0
 800ae74:	2b07      	cmp	r3, #7
 800ae76:	dd09      	ble.n	800ae8c <_svfprintf_r+0x66c>
 800ae78:	aa27      	add	r2, sp, #156	; 0x9c
 800ae7a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ae7c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ae7e:	f001 ffff 	bl	800ce80 <__ssprint_r>
 800ae82:	2800      	cmp	r0, #0
 800ae84:	d001      	beq.n	800ae8a <_svfprintf_r+0x66a>
 800ae86:	f000 fcc9 	bl	800b81c <_svfprintf_r+0xffc>
 800ae8a:	af34      	add	r7, sp, #208	; 0xd0
 800ae8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d017      	beq.n	800aec2 <_svfprintf_r+0x6a2>
 800ae92:	ab20      	add	r3, sp, #128	; 0x80
 800ae94:	603b      	str	r3, [r7, #0]
 800ae96:	2302      	movs	r3, #2
 800ae98:	607b      	str	r3, [r7, #4]
 800ae9a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800ae9c:	3708      	adds	r7, #8
 800ae9e:	3302      	adds	r3, #2
 800aea0:	9329      	str	r3, [sp, #164]	; 0xa4
 800aea2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800aea4:	931b      	str	r3, [sp, #108]	; 0x6c
 800aea6:	3301      	adds	r3, #1
 800aea8:	9328      	str	r3, [sp, #160]	; 0xa0
 800aeaa:	2b07      	cmp	r3, #7
 800aeac:	dd09      	ble.n	800aec2 <_svfprintf_r+0x6a2>
 800aeae:	aa27      	add	r2, sp, #156	; 0x9c
 800aeb0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aeb2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aeb4:	f001 ffe4 	bl	800ce80 <__ssprint_r>
 800aeb8:	2800      	cmp	r0, #0
 800aeba:	d001      	beq.n	800aec0 <_svfprintf_r+0x6a0>
 800aebc:	f000 fcae 	bl	800b81c <_svfprintf_r+0xffc>
 800aec0:	af34      	add	r7, sp, #208	; 0xd0
 800aec2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800aec4:	2b80      	cmp	r3, #128	; 0x80
 800aec6:	d11e      	bne.n	800af06 <_svfprintf_r+0x6e6>
 800aec8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aeca:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800aecc:	1a9d      	subs	r5, r3, r2
 800aece:	2d00      	cmp	r5, #0
 800aed0:	dd19      	ble.n	800af06 <_svfprintf_r+0x6e6>
 800aed2:	4ba0      	ldr	r3, [pc, #640]	; (800b154 <_svfprintf_r+0x934>)
 800aed4:	603b      	str	r3, [r7, #0]
 800aed6:	2d10      	cmp	r5, #16
 800aed8:	dd00      	ble.n	800aedc <_svfprintf_r+0x6bc>
 800aeda:	e1ed      	b.n	800b2b8 <_svfprintf_r+0xa98>
 800aedc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800aede:	607d      	str	r5, [r7, #4]
 800aee0:	195d      	adds	r5, r3, r5
 800aee2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800aee4:	9529      	str	r5, [sp, #164]	; 0xa4
 800aee6:	931b      	str	r3, [sp, #108]	; 0x6c
 800aee8:	3301      	adds	r3, #1
 800aeea:	9328      	str	r3, [sp, #160]	; 0xa0
 800aeec:	3708      	adds	r7, #8
 800aeee:	2b07      	cmp	r3, #7
 800aef0:	dd09      	ble.n	800af06 <_svfprintf_r+0x6e6>
 800aef2:	aa27      	add	r2, sp, #156	; 0x9c
 800aef4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aef6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aef8:	f001 ffc2 	bl	800ce80 <__ssprint_r>
 800aefc:	2800      	cmp	r0, #0
 800aefe:	d001      	beq.n	800af04 <_svfprintf_r+0x6e4>
 800af00:	f000 fc8c 	bl	800b81c <_svfprintf_r+0xffc>
 800af04:	af34      	add	r7, sp, #208	; 0xd0
 800af06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af08:	2510      	movs	r5, #16
 800af0a:	1ae4      	subs	r4, r4, r3
 800af0c:	2c00      	cmp	r4, #0
 800af0e:	dd00      	ble.n	800af12 <_svfprintf_r+0x6f2>
 800af10:	e1fe      	b.n	800b310 <_svfprintf_r+0xaf0>
 800af12:	05f3      	lsls	r3, r6, #23
 800af14:	d500      	bpl.n	800af18 <_svfprintf_r+0x6f8>
 800af16:	e215      	b.n	800b344 <_svfprintf_r+0xb24>
 800af18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af1a:	603b      	str	r3, [r7, #0]
 800af1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af1e:	607b      	str	r3, [r7, #4]
 800af20:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800af22:	3708      	adds	r7, #8
 800af24:	930c      	str	r3, [sp, #48]	; 0x30
 800af26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af2a:	4694      	mov	ip, r2
 800af2c:	4463      	add	r3, ip
 800af2e:	9329      	str	r3, [sp, #164]	; 0xa4
 800af30:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800af32:	930b      	str	r3, [sp, #44]	; 0x2c
 800af34:	3301      	adds	r3, #1
 800af36:	9328      	str	r3, [sp, #160]	; 0xa0
 800af38:	2b07      	cmp	r3, #7
 800af3a:	dd09      	ble.n	800af50 <_svfprintf_r+0x730>
 800af3c:	aa27      	add	r2, sp, #156	; 0x9c
 800af3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af40:	980a      	ldr	r0, [sp, #40]	; 0x28
 800af42:	f001 ff9d 	bl	800ce80 <__ssprint_r>
 800af46:	2800      	cmp	r0, #0
 800af48:	d001      	beq.n	800af4e <_svfprintf_r+0x72e>
 800af4a:	f000 fc67 	bl	800b81c <_svfprintf_r+0xffc>
 800af4e:	af34      	add	r7, sp, #208	; 0xd0
 800af50:	0773      	lsls	r3, r6, #29
 800af52:	d501      	bpl.n	800af58 <_svfprintf_r+0x738>
 800af54:	f000 fc41 	bl	800b7da <_svfprintf_r+0xfba>
 800af58:	9914      	ldr	r1, [sp, #80]	; 0x50
 800af5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af5c:	4299      	cmp	r1, r3
 800af5e:	da00      	bge.n	800af62 <_svfprintf_r+0x742>
 800af60:	0019      	movs	r1, r3
 800af62:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800af64:	185b      	adds	r3, r3, r1
 800af66:	9313      	str	r3, [sp, #76]	; 0x4c
 800af68:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800af6a:	930b      	str	r3, [sp, #44]	; 0x2c
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d008      	beq.n	800af82 <_svfprintf_r+0x762>
 800af70:	aa27      	add	r2, sp, #156	; 0x9c
 800af72:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af74:	980a      	ldr	r0, [sp, #40]	; 0x28
 800af76:	f001 ff83 	bl	800ce80 <__ssprint_r>
 800af7a:	2800      	cmp	r0, #0
 800af7c:	d001      	beq.n	800af82 <_svfprintf_r+0x762>
 800af7e:	f000 fc4d 	bl	800b81c <_svfprintf_r+0xffc>
 800af82:	2300      	movs	r3, #0
 800af84:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800af86:	9328      	str	r3, [sp, #160]	; 0xa0
 800af88:	af34      	add	r7, sp, #208	; 0xd0
 800af8a:	e480      	b.n	800a88e <_svfprintf_r+0x6e>
 800af8c:	1c59      	adds	r1, r3, #1
 800af8e:	9125      	str	r1, [sp, #148]	; 0x94
 800af90:	701a      	strb	r2, [r3, #0]
 800af92:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800af94:	990e      	ldr	r1, [sp, #56]	; 0x38
 800af96:	4299      	cmp	r1, r3
 800af98:	d8f8      	bhi.n	800af8c <_svfprintf_r+0x76c>
 800af9a:	e6be      	b.n	800ad1a <_svfprintf_r+0x4fa>
 800af9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af9e:	2b65      	cmp	r3, #101	; 0x65
 800afa0:	dc00      	bgt.n	800afa4 <_svfprintf_r+0x784>
 800afa2:	e6cb      	b.n	800ad3c <_svfprintf_r+0x51c>
 800afa4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800afa6:	2b66      	cmp	r3, #102	; 0x66
 800afa8:	d128      	bne.n	800affc <_svfprintf_r+0x7dc>
 800afaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800afac:	2b00      	cmp	r3, #0
 800afae:	dd1c      	ble.n	800afea <_svfprintf_r+0x7ca>
 800afb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800afb2:	2a00      	cmp	r2, #0
 800afb4:	d101      	bne.n	800afba <_svfprintf_r+0x79a>
 800afb6:	07f2      	lsls	r2, r6, #31
 800afb8:	d503      	bpl.n	800afc2 <_svfprintf_r+0x7a2>
 800afba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800afbc:	189b      	adds	r3, r3, r2
 800afbe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800afc0:	189b      	adds	r3, r3, r2
 800afc2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800afc4:	930b      	str	r3, [sp, #44]	; 0x2c
 800afc6:	9210      	str	r2, [sp, #64]	; 0x40
 800afc8:	e701      	b.n	800adce <_svfprintf_r+0x5ae>
 800afca:	222b      	movs	r2, #43	; 0x2b
 800afcc:	e6c5      	b.n	800ad5a <_svfprintf_r+0x53a>
 800afce:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800afd0:	e6ca      	b.n	800ad68 <_svfprintf_r+0x548>
 800afd2:	782a      	ldrb	r2, [r5, #0]
 800afd4:	3501      	adds	r5, #1
 800afd6:	701a      	strb	r2, [r3, #0]
 800afd8:	3301      	adds	r3, #1
 800afda:	e6de      	b.n	800ad9a <_svfprintf_r+0x57a>
 800afdc:	2230      	movs	r2, #48	; 0x30
 800afde:	ab23      	add	r3, sp, #140	; 0x8c
 800afe0:	18a4      	adds	r4, r4, r2
 800afe2:	709a      	strb	r2, [r3, #2]
 800afe4:	70dc      	strb	r4, [r3, #3]
 800afe6:	aa24      	add	r2, sp, #144	; 0x90
 800afe8:	e6db      	b.n	800ada2 <_svfprintf_r+0x582>
 800afea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afec:	2b00      	cmp	r3, #0
 800afee:	d102      	bne.n	800aff6 <_svfprintf_r+0x7d6>
 800aff0:	3301      	adds	r3, #1
 800aff2:	421e      	tst	r6, r3
 800aff4:	d0e5      	beq.n	800afc2 <_svfprintf_r+0x7a2>
 800aff6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aff8:	3301      	adds	r3, #1
 800affa:	e7e0      	b.n	800afbe <_svfprintf_r+0x79e>
 800affc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800affe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b000:	429a      	cmp	r2, r3
 800b002:	db06      	blt.n	800b012 <_svfprintf_r+0x7f2>
 800b004:	07f3      	lsls	r3, r6, #31
 800b006:	d50e      	bpl.n	800b026 <_svfprintf_r+0x806>
 800b008:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b00a:	18d3      	adds	r3, r2, r3
 800b00c:	2267      	movs	r2, #103	; 0x67
 800b00e:	920d      	str	r2, [sp, #52]	; 0x34
 800b010:	e7d7      	b.n	800afc2 <_svfprintf_r+0x7a2>
 800b012:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b014:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b016:	185b      	adds	r3, r3, r1
 800b018:	2167      	movs	r1, #103	; 0x67
 800b01a:	910d      	str	r1, [sp, #52]	; 0x34
 800b01c:	2a00      	cmp	r2, #0
 800b01e:	dcd0      	bgt.n	800afc2 <_svfprintf_r+0x7a2>
 800b020:	1a9b      	subs	r3, r3, r2
 800b022:	3301      	adds	r3, #1
 800b024:	e7cd      	b.n	800afc2 <_svfprintf_r+0x7a2>
 800b026:	0013      	movs	r3, r2
 800b028:	e7f0      	b.n	800b00c <_svfprintf_r+0x7ec>
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d003      	beq.n	800b036 <_svfprintf_r+0x816>
 800b02e:	231f      	movs	r3, #31
 800b030:	a918      	add	r1, sp, #96	; 0x60
 800b032:	185b      	adds	r3, r3, r1
 800b034:	701a      	strb	r2, [r3, #0]
 800b036:	1d2b      	adds	r3, r5, #4
 800b038:	06b2      	lsls	r2, r6, #26
 800b03a:	d506      	bpl.n	800b04a <_svfprintf_r+0x82a>
 800b03c:	682a      	ldr	r2, [r5, #0]
 800b03e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b040:	6011      	str	r1, [r2, #0]
 800b042:	17c9      	asrs	r1, r1, #31
 800b044:	6051      	str	r1, [r2, #4]
 800b046:	001d      	movs	r5, r3
 800b048:	e421      	b.n	800a88e <_svfprintf_r+0x6e>
 800b04a:	06f2      	lsls	r2, r6, #27
 800b04c:	d503      	bpl.n	800b056 <_svfprintf_r+0x836>
 800b04e:	682a      	ldr	r2, [r5, #0]
 800b050:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b052:	6011      	str	r1, [r2, #0]
 800b054:	e7f7      	b.n	800b046 <_svfprintf_r+0x826>
 800b056:	0672      	lsls	r2, r6, #25
 800b058:	d5f9      	bpl.n	800b04e <_svfprintf_r+0x82e>
 800b05a:	4669      	mov	r1, sp
 800b05c:	204c      	movs	r0, #76	; 0x4c
 800b05e:	1809      	adds	r1, r1, r0
 800b060:	682a      	ldr	r2, [r5, #0]
 800b062:	8809      	ldrh	r1, [r1, #0]
 800b064:	8011      	strh	r1, [r2, #0]
 800b066:	e7ee      	b.n	800b046 <_svfprintf_r+0x826>
 800b068:	2310      	movs	r3, #16
 800b06a:	431e      	orrs	r6, r3
 800b06c:	2120      	movs	r1, #32
 800b06e:	4031      	ands	r1, r6
 800b070:	d010      	beq.n	800b094 <_svfprintf_r+0x874>
 800b072:	2307      	movs	r3, #7
 800b074:	3507      	adds	r5, #7
 800b076:	439d      	bics	r5, r3
 800b078:	002b      	movs	r3, r5
 800b07a:	3308      	adds	r3, #8
 800b07c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b07e:	682b      	ldr	r3, [r5, #0]
 800b080:	686c      	ldr	r4, [r5, #4]
 800b082:	9306      	str	r3, [sp, #24]
 800b084:	9407      	str	r4, [sp, #28]
 800b086:	2300      	movs	r3, #0
 800b088:	221f      	movs	r2, #31
 800b08a:	2100      	movs	r1, #0
 800b08c:	a818      	add	r0, sp, #96	; 0x60
 800b08e:	1812      	adds	r2, r2, r0
 800b090:	7011      	strb	r1, [r2, #0]
 800b092:	e4bf      	b.n	800aa14 <_svfprintf_r+0x1f4>
 800b094:	2210      	movs	r2, #16
 800b096:	1d28      	adds	r0, r5, #4
 800b098:	4032      	ands	r2, r6
 800b09a:	d004      	beq.n	800b0a6 <_svfprintf_r+0x886>
 800b09c:	682b      	ldr	r3, [r5, #0]
 800b09e:	900f      	str	r0, [sp, #60]	; 0x3c
 800b0a0:	9306      	str	r3, [sp, #24]
 800b0a2:	9107      	str	r1, [sp, #28]
 800b0a4:	e7ef      	b.n	800b086 <_svfprintf_r+0x866>
 800b0a6:	2340      	movs	r3, #64	; 0x40
 800b0a8:	900f      	str	r0, [sp, #60]	; 0x3c
 800b0aa:	4033      	ands	r3, r6
 800b0ac:	d004      	beq.n	800b0b8 <_svfprintf_r+0x898>
 800b0ae:	682b      	ldr	r3, [r5, #0]
 800b0b0:	9207      	str	r2, [sp, #28]
 800b0b2:	b29b      	uxth	r3, r3
 800b0b4:	9306      	str	r3, [sp, #24]
 800b0b6:	e7e6      	b.n	800b086 <_svfprintf_r+0x866>
 800b0b8:	682a      	ldr	r2, [r5, #0]
 800b0ba:	9307      	str	r3, [sp, #28]
 800b0bc:	9206      	str	r2, [sp, #24]
 800b0be:	e7e3      	b.n	800b088 <_svfprintf_r+0x868>
 800b0c0:	1d2b      	adds	r3, r5, #4
 800b0c2:	930f      	str	r3, [sp, #60]	; 0x3c
 800b0c4:	682b      	ldr	r3, [r5, #0]
 800b0c6:	2078      	movs	r0, #120	; 0x78
 800b0c8:	2130      	movs	r1, #48	; 0x30
 800b0ca:	9306      	str	r3, [sp, #24]
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	aa20      	add	r2, sp, #128	; 0x80
 800b0d0:	7011      	strb	r1, [r2, #0]
 800b0d2:	7050      	strb	r0, [r2, #1]
 800b0d4:	4a20      	ldr	r2, [pc, #128]	; (800b158 <_svfprintf_r+0x938>)
 800b0d6:	9307      	str	r3, [sp, #28]
 800b0d8:	3302      	adds	r3, #2
 800b0da:	431e      	orrs	r6, r3
 800b0dc:	921a      	str	r2, [sp, #104]	; 0x68
 800b0de:	900d      	str	r0, [sp, #52]	; 0x34
 800b0e0:	e7d2      	b.n	800b088 <_svfprintf_r+0x868>
 800b0e2:	1d2b      	adds	r3, r5, #4
 800b0e4:	930f      	str	r3, [sp, #60]	; 0x3c
 800b0e6:	682b      	ldr	r3, [r5, #0]
 800b0e8:	2400      	movs	r4, #0
 800b0ea:	930c      	str	r3, [sp, #48]	; 0x30
 800b0ec:	231f      	movs	r3, #31
 800b0ee:	aa18      	add	r2, sp, #96	; 0x60
 800b0f0:	189b      	adds	r3, r3, r2
 800b0f2:	701c      	strb	r4, [r3, #0]
 800b0f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0f6:	3301      	adds	r3, #1
 800b0f8:	d00b      	beq.n	800b112 <_svfprintf_r+0x8f2>
 800b0fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b0fc:	0021      	movs	r1, r4
 800b0fe:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b100:	f001 fbd0 	bl	800c8a4 <memchr>
 800b104:	42a0      	cmp	r0, r4
 800b106:	d100      	bne.n	800b10a <_svfprintf_r+0x8ea>
 800b108:	e0bd      	b.n	800b286 <_svfprintf_r+0xa66>
 800b10a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b10c:	1ac3      	subs	r3, r0, r3
 800b10e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b110:	e58d      	b.n	800ac2e <_svfprintf_r+0x40e>
 800b112:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b114:	f7f4 fff8 	bl	8000108 <strlen>
 800b118:	900b      	str	r0, [sp, #44]	; 0x2c
 800b11a:	e588      	b.n	800ac2e <_svfprintf_r+0x40e>
 800b11c:	2310      	movs	r3, #16
 800b11e:	431e      	orrs	r6, r3
 800b120:	2320      	movs	r3, #32
 800b122:	4033      	ands	r3, r6
 800b124:	d00b      	beq.n	800b13e <_svfprintf_r+0x91e>
 800b126:	2307      	movs	r3, #7
 800b128:	3507      	adds	r5, #7
 800b12a:	439d      	bics	r5, r3
 800b12c:	002b      	movs	r3, r5
 800b12e:	3308      	adds	r3, #8
 800b130:	930f      	str	r3, [sp, #60]	; 0x3c
 800b132:	682b      	ldr	r3, [r5, #0]
 800b134:	686c      	ldr	r4, [r5, #4]
 800b136:	9306      	str	r3, [sp, #24]
 800b138:	9407      	str	r4, [sp, #28]
 800b13a:	2301      	movs	r3, #1
 800b13c:	e7a4      	b.n	800b088 <_svfprintf_r+0x868>
 800b13e:	2210      	movs	r2, #16
 800b140:	1d29      	adds	r1, r5, #4
 800b142:	4032      	ands	r2, r6
 800b144:	d00a      	beq.n	800b15c <_svfprintf_r+0x93c>
 800b146:	910f      	str	r1, [sp, #60]	; 0x3c
 800b148:	682a      	ldr	r2, [r5, #0]
 800b14a:	9307      	str	r3, [sp, #28]
 800b14c:	9206      	str	r2, [sp, #24]
 800b14e:	e7f4      	b.n	800b13a <_svfprintf_r+0x91a>
 800b150:	0800d90d 	.word	0x0800d90d
 800b154:	0800d91d 	.word	0x0800d91d
 800b158:	0800d8fa 	.word	0x0800d8fa
 800b15c:	2340      	movs	r3, #64	; 0x40
 800b15e:	910f      	str	r1, [sp, #60]	; 0x3c
 800b160:	4033      	ands	r3, r6
 800b162:	d0f1      	beq.n	800b148 <_svfprintf_r+0x928>
 800b164:	682b      	ldr	r3, [r5, #0]
 800b166:	9207      	str	r2, [sp, #28]
 800b168:	b29b      	uxth	r3, r3
 800b16a:	9306      	str	r3, [sp, #24]
 800b16c:	e7e5      	b.n	800b13a <_svfprintf_r+0x91a>
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d003      	beq.n	800b17a <_svfprintf_r+0x95a>
 800b172:	231f      	movs	r3, #31
 800b174:	a918      	add	r1, sp, #96	; 0x60
 800b176:	185b      	adds	r3, r3, r1
 800b178:	701a      	strb	r2, [r3, #0]
 800b17a:	4baa      	ldr	r3, [pc, #680]	; (800b424 <_svfprintf_r+0xc04>)
 800b17c:	e471      	b.n	800aa62 <_svfprintf_r+0x242>
 800b17e:	2210      	movs	r2, #16
 800b180:	1d29      	adds	r1, r5, #4
 800b182:	4032      	ands	r2, r6
 800b184:	d004      	beq.n	800b190 <_svfprintf_r+0x970>
 800b186:	910f      	str	r1, [sp, #60]	; 0x3c
 800b188:	682a      	ldr	r2, [r5, #0]
 800b18a:	9307      	str	r3, [sp, #28]
 800b18c:	9206      	str	r2, [sp, #24]
 800b18e:	e477      	b.n	800aa80 <_svfprintf_r+0x260>
 800b190:	2340      	movs	r3, #64	; 0x40
 800b192:	910f      	str	r1, [sp, #60]	; 0x3c
 800b194:	4033      	ands	r3, r6
 800b196:	d0f7      	beq.n	800b188 <_svfprintf_r+0x968>
 800b198:	682b      	ldr	r3, [r5, #0]
 800b19a:	9207      	str	r2, [sp, #28]
 800b19c:	b29b      	uxth	r3, r3
 800b19e:	9306      	str	r3, [sp, #24]
 800b1a0:	e46e      	b.n	800aa80 <_svfprintf_r+0x260>
 800b1a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b1a4:	e38a      	b.n	800b8bc <_svfprintf_r+0x109c>
 800b1a6:	9b07      	ldr	r3, [sp, #28]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d10a      	bne.n	800b1c2 <_svfprintf_r+0x9a2>
 800b1ac:	9b06      	ldr	r3, [sp, #24]
 800b1ae:	2b09      	cmp	r3, #9
 800b1b0:	d807      	bhi.n	800b1c2 <_svfprintf_r+0x9a2>
 800b1b2:	9b06      	ldr	r3, [sp, #24]
 800b1b4:	aa2c      	add	r2, sp, #176	; 0xb0
 800b1b6:	3330      	adds	r3, #48	; 0x30
 800b1b8:	77d3      	strb	r3, [r2, #31]
 800b1ba:	236f      	movs	r3, #111	; 0x6f
 800b1bc:	aa18      	add	r2, sp, #96	; 0x60
 800b1be:	189b      	adds	r3, r3, r2
 800b1c0:	e39a      	b.n	800b8f8 <_svfprintf_r+0x10d8>
 800b1c2:	ab34      	add	r3, sp, #208	; 0xd0
 800b1c4:	930c      	str	r3, [sp, #48]	; 0x30
 800b1c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b1c8:	9806      	ldr	r0, [sp, #24]
 800b1ca:	9907      	ldr	r1, [sp, #28]
 800b1cc:	3b01      	subs	r3, #1
 800b1ce:	930c      	str	r3, [sp, #48]	; 0x30
 800b1d0:	220a      	movs	r2, #10
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	f7f5 f968 	bl	80004a8 <__aeabi_uldivmod>
 800b1d8:	9806      	ldr	r0, [sp, #24]
 800b1da:	9907      	ldr	r1, [sp, #28]
 800b1dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b1de:	3230      	adds	r2, #48	; 0x30
 800b1e0:	701a      	strb	r2, [r3, #0]
 800b1e2:	220a      	movs	r2, #10
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	f7f5 f95f 	bl	80004a8 <__aeabi_uldivmod>
 800b1ea:	9006      	str	r0, [sp, #24]
 800b1ec:	9107      	str	r1, [sp, #28]
 800b1ee:	9b06      	ldr	r3, [sp, #24]
 800b1f0:	9a07      	ldr	r2, [sp, #28]
 800b1f2:	4313      	orrs	r3, r2
 800b1f4:	d1e7      	bne.n	800b1c6 <_svfprintf_r+0x9a6>
 800b1f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b1f8:	ab34      	add	r3, sp, #208	; 0xd0
 800b1fa:	1a9b      	subs	r3, r3, r2
 800b1fc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800b1fe:	930b      	str	r3, [sp, #44]	; 0x2c
 800b200:	2300      	movs	r3, #0
 800b202:	002e      	movs	r6, r5
 800b204:	9310      	str	r3, [sp, #64]	; 0x40
 800b206:	e5ec      	b.n	800ade2 <_svfprintf_r+0x5c2>
 800b208:	2300      	movs	r3, #0
 800b20a:	2400      	movs	r4, #0
 800b20c:	9306      	str	r3, [sp, #24]
 800b20e:	9407      	str	r4, [sp, #28]
 800b210:	200f      	movs	r0, #15
 800b212:	ab34      	add	r3, sp, #208	; 0xd0
 800b214:	930c      	str	r3, [sp, #48]	; 0x30
 800b216:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b218:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b21a:	3b01      	subs	r3, #1
 800b21c:	930c      	str	r3, [sp, #48]	; 0x30
 800b21e:	9b06      	ldr	r3, [sp, #24]
 800b220:	4003      	ands	r3, r0
 800b222:	5cd3      	ldrb	r3, [r2, r3]
 800b224:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b226:	7013      	strb	r3, [r2, #0]
 800b228:	9b07      	ldr	r3, [sp, #28]
 800b22a:	0719      	lsls	r1, r3, #28
 800b22c:	9b06      	ldr	r3, [sp, #24]
 800b22e:	091a      	lsrs	r2, r3, #4
 800b230:	9b07      	ldr	r3, [sp, #28]
 800b232:	4311      	orrs	r1, r2
 800b234:	091b      	lsrs	r3, r3, #4
 800b236:	9307      	str	r3, [sp, #28]
 800b238:	000b      	movs	r3, r1
 800b23a:	9a07      	ldr	r2, [sp, #28]
 800b23c:	9106      	str	r1, [sp, #24]
 800b23e:	4313      	orrs	r3, r2
 800b240:	d1e9      	bne.n	800b216 <_svfprintf_r+0x9f6>
 800b242:	e7d8      	b.n	800b1f6 <_svfprintf_r+0x9d6>
 800b244:	aa34      	add	r2, sp, #208	; 0xd0
 800b246:	920c      	str	r2, [sp, #48]	; 0x30
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d1d4      	bne.n	800b1f6 <_svfprintf_r+0x9d6>
 800b24c:	07f3      	lsls	r3, r6, #31
 800b24e:	d5d2      	bpl.n	800b1f6 <_svfprintf_r+0x9d6>
 800b250:	2230      	movs	r2, #48	; 0x30
 800b252:	ab2c      	add	r3, sp, #176	; 0xb0
 800b254:	77da      	strb	r2, [r3, #31]
 800b256:	e7b0      	b.n	800b1ba <_svfprintf_r+0x99a>
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d003      	beq.n	800b264 <_svfprintf_r+0xa44>
 800b25c:	231f      	movs	r3, #31
 800b25e:	a918      	add	r1, sp, #96	; 0x60
 800b260:	185b      	adds	r3, r3, r1
 800b262:	701a      	strb	r2, [r3, #0]
 800b264:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b266:	2b00      	cmp	r3, #0
 800b268:	d100      	bne.n	800b26c <_svfprintf_r+0xa4c>
 800b26a:	e2f6      	b.n	800b85a <_svfprintf_r+0x103a>
 800b26c:	2134      	movs	r1, #52	; 0x34
 800b26e:	466a      	mov	r2, sp
 800b270:	1852      	adds	r2, r2, r1
 800b272:	7812      	ldrb	r2, [r2, #0]
 800b274:	ab2a      	add	r3, sp, #168	; 0xa8
 800b276:	701a      	strb	r2, [r3, #0]
 800b278:	221f      	movs	r2, #31
 800b27a:	2400      	movs	r4, #0
 800b27c:	a918      	add	r1, sp, #96	; 0x60
 800b27e:	1852      	adds	r2, r2, r1
 800b280:	7014      	strb	r4, [r2, #0]
 800b282:	950f      	str	r5, [sp, #60]	; 0x3c
 800b284:	e473      	b.n	800ab6e <_svfprintf_r+0x34e>
 800b286:	0004      	movs	r4, r0
 800b288:	e4d1      	b.n	800ac2e <_svfprintf_r+0x40e>
 800b28a:	2310      	movs	r3, #16
 800b28c:	607b      	str	r3, [r7, #4]
 800b28e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800b290:	3708      	adds	r7, #8
 800b292:	3310      	adds	r3, #16
 800b294:	9329      	str	r3, [sp, #164]	; 0xa4
 800b296:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b298:	931d      	str	r3, [sp, #116]	; 0x74
 800b29a:	3301      	adds	r3, #1
 800b29c:	9328      	str	r3, [sp, #160]	; 0xa0
 800b29e:	2b07      	cmp	r3, #7
 800b2a0:	dd08      	ble.n	800b2b4 <_svfprintf_r+0xa94>
 800b2a2:	aa27      	add	r2, sp, #156	; 0x9c
 800b2a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b2a6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b2a8:	f001 fdea 	bl	800ce80 <__ssprint_r>
 800b2ac:	2800      	cmp	r0, #0
 800b2ae:	d000      	beq.n	800b2b2 <_svfprintf_r+0xa92>
 800b2b0:	e2b4      	b.n	800b81c <_svfprintf_r+0xffc>
 800b2b2:	af34      	add	r7, sp, #208	; 0xd0
 800b2b4:	3d10      	subs	r5, #16
 800b2b6:	e5b2      	b.n	800ae1e <_svfprintf_r+0x5fe>
 800b2b8:	2310      	movs	r3, #16
 800b2ba:	607b      	str	r3, [r7, #4]
 800b2bc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800b2be:	3708      	adds	r7, #8
 800b2c0:	3310      	adds	r3, #16
 800b2c2:	9329      	str	r3, [sp, #164]	; 0xa4
 800b2c4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b2c6:	931b      	str	r3, [sp, #108]	; 0x6c
 800b2c8:	3301      	adds	r3, #1
 800b2ca:	9328      	str	r3, [sp, #160]	; 0xa0
 800b2cc:	2b07      	cmp	r3, #7
 800b2ce:	dd08      	ble.n	800b2e2 <_svfprintf_r+0xac2>
 800b2d0:	aa27      	add	r2, sp, #156	; 0x9c
 800b2d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b2d4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b2d6:	f001 fdd3 	bl	800ce80 <__ssprint_r>
 800b2da:	2800      	cmp	r0, #0
 800b2dc:	d000      	beq.n	800b2e0 <_svfprintf_r+0xac0>
 800b2de:	e29d      	b.n	800b81c <_svfprintf_r+0xffc>
 800b2e0:	af34      	add	r7, sp, #208	; 0xd0
 800b2e2:	3d10      	subs	r5, #16
 800b2e4:	e5f5      	b.n	800aed2 <_svfprintf_r+0x6b2>
 800b2e6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800b2e8:	607d      	str	r5, [r7, #4]
 800b2ea:	3310      	adds	r3, #16
 800b2ec:	9329      	str	r3, [sp, #164]	; 0xa4
 800b2ee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b2f0:	3708      	adds	r7, #8
 800b2f2:	931b      	str	r3, [sp, #108]	; 0x6c
 800b2f4:	3301      	adds	r3, #1
 800b2f6:	9328      	str	r3, [sp, #160]	; 0xa0
 800b2f8:	2b07      	cmp	r3, #7
 800b2fa:	dd08      	ble.n	800b30e <_svfprintf_r+0xaee>
 800b2fc:	aa27      	add	r2, sp, #156	; 0x9c
 800b2fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b300:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b302:	f001 fdbd 	bl	800ce80 <__ssprint_r>
 800b306:	2800      	cmp	r0, #0
 800b308:	d000      	beq.n	800b30c <_svfprintf_r+0xaec>
 800b30a:	e287      	b.n	800b81c <_svfprintf_r+0xffc>
 800b30c:	af34      	add	r7, sp, #208	; 0xd0
 800b30e:	3c10      	subs	r4, #16
 800b310:	4b45      	ldr	r3, [pc, #276]	; (800b428 <_svfprintf_r+0xc08>)
 800b312:	603b      	str	r3, [r7, #0]
 800b314:	2c10      	cmp	r4, #16
 800b316:	dce6      	bgt.n	800b2e6 <_svfprintf_r+0xac6>
 800b318:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800b31a:	607c      	str	r4, [r7, #4]
 800b31c:	191c      	adds	r4, r3, r4
 800b31e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b320:	9429      	str	r4, [sp, #164]	; 0xa4
 800b322:	931b      	str	r3, [sp, #108]	; 0x6c
 800b324:	3301      	adds	r3, #1
 800b326:	9328      	str	r3, [sp, #160]	; 0xa0
 800b328:	3708      	adds	r7, #8
 800b32a:	2b07      	cmp	r3, #7
 800b32c:	dc00      	bgt.n	800b330 <_svfprintf_r+0xb10>
 800b32e:	e5f0      	b.n	800af12 <_svfprintf_r+0x6f2>
 800b330:	aa27      	add	r2, sp, #156	; 0x9c
 800b332:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b334:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b336:	f001 fda3 	bl	800ce80 <__ssprint_r>
 800b33a:	2800      	cmp	r0, #0
 800b33c:	d000      	beq.n	800b340 <_svfprintf_r+0xb20>
 800b33e:	e26d      	b.n	800b81c <_svfprintf_r+0xffc>
 800b340:	af34      	add	r7, sp, #208	; 0xd0
 800b342:	e5e6      	b.n	800af12 <_svfprintf_r+0x6f2>
 800b344:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b346:	2b65      	cmp	r3, #101	; 0x65
 800b348:	dc00      	bgt.n	800b34c <_svfprintf_r+0xb2c>
 800b34a:	e1b0      	b.n	800b6ae <_svfprintf_r+0xe8e>
 800b34c:	2200      	movs	r2, #0
 800b34e:	2300      	movs	r3, #0
 800b350:	9816      	ldr	r0, [sp, #88]	; 0x58
 800b352:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800b354:	f7f5 f87a 	bl	800044c <__aeabi_dcmpeq>
 800b358:	2800      	cmp	r0, #0
 800b35a:	d069      	beq.n	800b430 <_svfprintf_r+0xc10>
 800b35c:	4b33      	ldr	r3, [pc, #204]	; (800b42c <_svfprintf_r+0xc0c>)
 800b35e:	603b      	str	r3, [r7, #0]
 800b360:	2301      	movs	r3, #1
 800b362:	607b      	str	r3, [r7, #4]
 800b364:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800b366:	3708      	adds	r7, #8
 800b368:	3301      	adds	r3, #1
 800b36a:	9329      	str	r3, [sp, #164]	; 0xa4
 800b36c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b36e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b370:	3301      	adds	r3, #1
 800b372:	9328      	str	r3, [sp, #160]	; 0xa0
 800b374:	2b07      	cmp	r3, #7
 800b376:	dd08      	ble.n	800b38a <_svfprintf_r+0xb6a>
 800b378:	aa27      	add	r2, sp, #156	; 0x9c
 800b37a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b37c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b37e:	f001 fd7f 	bl	800ce80 <__ssprint_r>
 800b382:	2800      	cmp	r0, #0
 800b384:	d000      	beq.n	800b388 <_svfprintf_r+0xb68>
 800b386:	e249      	b.n	800b81c <_svfprintf_r+0xffc>
 800b388:	af34      	add	r7, sp, #208	; 0xd0
 800b38a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b38c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b38e:	4293      	cmp	r3, r2
 800b390:	db02      	blt.n	800b398 <_svfprintf_r+0xb78>
 800b392:	07f3      	lsls	r3, r6, #31
 800b394:	d400      	bmi.n	800b398 <_svfprintf_r+0xb78>
 800b396:	e5db      	b.n	800af50 <_svfprintf_r+0x730>
 800b398:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b39a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b39c:	4694      	mov	ip, r2
 800b39e:	603b      	str	r3, [r7, #0]
 800b3a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b3a2:	607b      	str	r3, [r7, #4]
 800b3a4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800b3a6:	3708      	adds	r7, #8
 800b3a8:	4463      	add	r3, ip
 800b3aa:	9329      	str	r3, [sp, #164]	; 0xa4
 800b3ac:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b3ae:	930b      	str	r3, [sp, #44]	; 0x2c
 800b3b0:	3301      	adds	r3, #1
 800b3b2:	9328      	str	r3, [sp, #160]	; 0xa0
 800b3b4:	2b07      	cmp	r3, #7
 800b3b6:	dd08      	ble.n	800b3ca <_svfprintf_r+0xbaa>
 800b3b8:	aa27      	add	r2, sp, #156	; 0x9c
 800b3ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b3bc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b3be:	f001 fd5f 	bl	800ce80 <__ssprint_r>
 800b3c2:	2800      	cmp	r0, #0
 800b3c4:	d000      	beq.n	800b3c8 <_svfprintf_r+0xba8>
 800b3c6:	e229      	b.n	800b81c <_svfprintf_r+0xffc>
 800b3c8:	af34      	add	r7, sp, #208	; 0xd0
 800b3ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b3cc:	2510      	movs	r5, #16
 800b3ce:	1e5c      	subs	r4, r3, #1
 800b3d0:	2c00      	cmp	r4, #0
 800b3d2:	dc00      	bgt.n	800b3d6 <_svfprintf_r+0xbb6>
 800b3d4:	e5bc      	b.n	800af50 <_svfprintf_r+0x730>
 800b3d6:	4b14      	ldr	r3, [pc, #80]	; (800b428 <_svfprintf_r+0xc08>)
 800b3d8:	603b      	str	r3, [r7, #0]
 800b3da:	2c10      	cmp	r4, #16
 800b3dc:	dc0b      	bgt.n	800b3f6 <_svfprintf_r+0xbd6>
 800b3de:	607c      	str	r4, [r7, #4]
 800b3e0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800b3e2:	191c      	adds	r4, r3, r4
 800b3e4:	9429      	str	r4, [sp, #164]	; 0xa4
 800b3e6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b3e8:	930b      	str	r3, [sp, #44]	; 0x2c
 800b3ea:	3301      	adds	r3, #1
 800b3ec:	9328      	str	r3, [sp, #160]	; 0xa0
 800b3ee:	2b07      	cmp	r3, #7
 800b3f0:	dc00      	bgt.n	800b3f4 <_svfprintf_r+0xbd4>
 800b3f2:	e086      	b.n	800b502 <_svfprintf_r+0xce2>
 800b3f4:	e5a2      	b.n	800af3c <_svfprintf_r+0x71c>
 800b3f6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800b3f8:	607d      	str	r5, [r7, #4]
 800b3fa:	3310      	adds	r3, #16
 800b3fc:	9329      	str	r3, [sp, #164]	; 0xa4
 800b3fe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b400:	3708      	adds	r7, #8
 800b402:	930b      	str	r3, [sp, #44]	; 0x2c
 800b404:	3301      	adds	r3, #1
 800b406:	9328      	str	r3, [sp, #160]	; 0xa0
 800b408:	2b07      	cmp	r3, #7
 800b40a:	dd08      	ble.n	800b41e <_svfprintf_r+0xbfe>
 800b40c:	aa27      	add	r2, sp, #156	; 0x9c
 800b40e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b410:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b412:	f001 fd35 	bl	800ce80 <__ssprint_r>
 800b416:	2800      	cmp	r0, #0
 800b418:	d000      	beq.n	800b41c <_svfprintf_r+0xbfc>
 800b41a:	e1ff      	b.n	800b81c <_svfprintf_r+0xffc>
 800b41c:	af34      	add	r7, sp, #208	; 0xd0
 800b41e:	3c10      	subs	r4, #16
 800b420:	e7d9      	b.n	800b3d6 <_svfprintf_r+0xbb6>
 800b422:	46c0      	nop			; (mov r8, r8)
 800b424:	0800d8fa 	.word	0x0800d8fa
 800b428:	0800d91d 	.word	0x0800d91d
 800b42c:	0800d90b 	.word	0x0800d90b
 800b430:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b432:	2b00      	cmp	r3, #0
 800b434:	dc7e      	bgt.n	800b534 <_svfprintf_r+0xd14>
 800b436:	4bcf      	ldr	r3, [pc, #828]	; (800b774 <_svfprintf_r+0xf54>)
 800b438:	603b      	str	r3, [r7, #0]
 800b43a:	2301      	movs	r3, #1
 800b43c:	607b      	str	r3, [r7, #4]
 800b43e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800b440:	3708      	adds	r7, #8
 800b442:	3301      	adds	r3, #1
 800b444:	9329      	str	r3, [sp, #164]	; 0xa4
 800b446:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b448:	930b      	str	r3, [sp, #44]	; 0x2c
 800b44a:	3301      	adds	r3, #1
 800b44c:	9328      	str	r3, [sp, #160]	; 0xa0
 800b44e:	2b07      	cmp	r3, #7
 800b450:	dd08      	ble.n	800b464 <_svfprintf_r+0xc44>
 800b452:	aa27      	add	r2, sp, #156	; 0x9c
 800b454:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b456:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b458:	f001 fd12 	bl	800ce80 <__ssprint_r>
 800b45c:	2800      	cmp	r0, #0
 800b45e:	d000      	beq.n	800b462 <_svfprintf_r+0xc42>
 800b460:	e1dc      	b.n	800b81c <_svfprintf_r+0xffc>
 800b462:	af34      	add	r7, sp, #208	; 0xd0
 800b464:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b466:	2b00      	cmp	r3, #0
 800b468:	d105      	bne.n	800b476 <_svfprintf_r+0xc56>
 800b46a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d102      	bne.n	800b476 <_svfprintf_r+0xc56>
 800b470:	07f3      	lsls	r3, r6, #31
 800b472:	d400      	bmi.n	800b476 <_svfprintf_r+0xc56>
 800b474:	e56c      	b.n	800af50 <_svfprintf_r+0x730>
 800b476:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b478:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b47a:	4694      	mov	ip, r2
 800b47c:	603b      	str	r3, [r7, #0]
 800b47e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b480:	607b      	str	r3, [r7, #4]
 800b482:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800b484:	3708      	adds	r7, #8
 800b486:	4463      	add	r3, ip
 800b488:	9329      	str	r3, [sp, #164]	; 0xa4
 800b48a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b48c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b48e:	3301      	adds	r3, #1
 800b490:	9328      	str	r3, [sp, #160]	; 0xa0
 800b492:	2b07      	cmp	r3, #7
 800b494:	dd08      	ble.n	800b4a8 <_svfprintf_r+0xc88>
 800b496:	aa27      	add	r2, sp, #156	; 0x9c
 800b498:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b49a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b49c:	f001 fcf0 	bl	800ce80 <__ssprint_r>
 800b4a0:	2800      	cmp	r0, #0
 800b4a2:	d000      	beq.n	800b4a6 <_svfprintf_r+0xc86>
 800b4a4:	e1ba      	b.n	800b81c <_svfprintf_r+0xffc>
 800b4a6:	af34      	add	r7, sp, #208	; 0xd0
 800b4a8:	9c21      	ldr	r4, [sp, #132]	; 0x84
 800b4aa:	2c00      	cmp	r4, #0
 800b4ac:	da19      	bge.n	800b4e2 <_svfprintf_r+0xcc2>
 800b4ae:	2510      	movs	r5, #16
 800b4b0:	4264      	negs	r4, r4
 800b4b2:	4ab1      	ldr	r2, [pc, #708]	; (800b778 <_svfprintf_r+0xf58>)
 800b4b4:	603a      	str	r2, [r7, #0]
 800b4b6:	2c10      	cmp	r4, #16
 800b4b8:	dc25      	bgt.n	800b506 <_svfprintf_r+0xce6>
 800b4ba:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800b4bc:	607c      	str	r4, [r7, #4]
 800b4be:	191c      	adds	r4, r3, r4
 800b4c0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b4c2:	9429      	str	r4, [sp, #164]	; 0xa4
 800b4c4:	1c5a      	adds	r2, r3, #1
 800b4c6:	3708      	adds	r7, #8
 800b4c8:	930b      	str	r3, [sp, #44]	; 0x2c
 800b4ca:	9228      	str	r2, [sp, #160]	; 0xa0
 800b4cc:	2a07      	cmp	r2, #7
 800b4ce:	dd08      	ble.n	800b4e2 <_svfprintf_r+0xcc2>
 800b4d0:	aa27      	add	r2, sp, #156	; 0x9c
 800b4d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b4d4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b4d6:	f001 fcd3 	bl	800ce80 <__ssprint_r>
 800b4da:	2800      	cmp	r0, #0
 800b4dc:	d000      	beq.n	800b4e0 <_svfprintf_r+0xcc0>
 800b4de:	e19d      	b.n	800b81c <_svfprintf_r+0xffc>
 800b4e0:	af34      	add	r7, sp, #208	; 0xd0
 800b4e2:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b4e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b4e6:	468c      	mov	ip, r1
 800b4e8:	603b      	str	r3, [r7, #0]
 800b4ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b4ec:	607b      	str	r3, [r7, #4]
 800b4ee:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800b4f0:	4463      	add	r3, ip
 800b4f2:	9329      	str	r3, [sp, #164]	; 0xa4
 800b4f4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b4f6:	1c5a      	adds	r2, r3, #1
 800b4f8:	930b      	str	r3, [sp, #44]	; 0x2c
 800b4fa:	9228      	str	r2, [sp, #160]	; 0xa0
 800b4fc:	2a07      	cmp	r2, #7
 800b4fe:	dd00      	ble.n	800b502 <_svfprintf_r+0xce2>
 800b500:	e51c      	b.n	800af3c <_svfprintf_r+0x71c>
 800b502:	3708      	adds	r7, #8
 800b504:	e524      	b.n	800af50 <_svfprintf_r+0x730>
 800b506:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800b508:	607d      	str	r5, [r7, #4]
 800b50a:	001a      	movs	r2, r3
 800b50c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b50e:	3210      	adds	r2, #16
 800b510:	9229      	str	r2, [sp, #164]	; 0xa4
 800b512:	1c5a      	adds	r2, r3, #1
 800b514:	930b      	str	r3, [sp, #44]	; 0x2c
 800b516:	9228      	str	r2, [sp, #160]	; 0xa0
 800b518:	3708      	adds	r7, #8
 800b51a:	2a07      	cmp	r2, #7
 800b51c:	dd08      	ble.n	800b530 <_svfprintf_r+0xd10>
 800b51e:	aa27      	add	r2, sp, #156	; 0x9c
 800b520:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b522:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b524:	f001 fcac 	bl	800ce80 <__ssprint_r>
 800b528:	2800      	cmp	r0, #0
 800b52a:	d000      	beq.n	800b52e <_svfprintf_r+0xd0e>
 800b52c:	e176      	b.n	800b81c <_svfprintf_r+0xffc>
 800b52e:	af34      	add	r7, sp, #208	; 0xd0
 800b530:	3c10      	subs	r4, #16
 800b532:	e7be      	b.n	800b4b2 <_svfprintf_r+0xc92>
 800b534:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800b536:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b538:	4294      	cmp	r4, r2
 800b53a:	dd00      	ble.n	800b53e <_svfprintf_r+0xd1e>
 800b53c:	0014      	movs	r4, r2
 800b53e:	2c00      	cmp	r4, #0
 800b540:	dd15      	ble.n	800b56e <_svfprintf_r+0xd4e>
 800b542:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b544:	607c      	str	r4, [r7, #4]
 800b546:	603b      	str	r3, [r7, #0]
 800b548:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800b54a:	3708      	adds	r7, #8
 800b54c:	191b      	adds	r3, r3, r4
 800b54e:	9329      	str	r3, [sp, #164]	; 0xa4
 800b550:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b552:	930b      	str	r3, [sp, #44]	; 0x2c
 800b554:	3301      	adds	r3, #1
 800b556:	9328      	str	r3, [sp, #160]	; 0xa0
 800b558:	2b07      	cmp	r3, #7
 800b55a:	dd08      	ble.n	800b56e <_svfprintf_r+0xd4e>
 800b55c:	aa27      	add	r2, sp, #156	; 0x9c
 800b55e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b560:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b562:	f001 fc8d 	bl	800ce80 <__ssprint_r>
 800b566:	2800      	cmp	r0, #0
 800b568:	d000      	beq.n	800b56c <_svfprintf_r+0xd4c>
 800b56a:	e157      	b.n	800b81c <_svfprintf_r+0xffc>
 800b56c:	af34      	add	r7, sp, #208	; 0xd0
 800b56e:	43e3      	mvns	r3, r4
 800b570:	17db      	asrs	r3, r3, #31
 800b572:	401c      	ands	r4, r3
 800b574:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b576:	2510      	movs	r5, #16
 800b578:	1b1c      	subs	r4, r3, r4
 800b57a:	2c00      	cmp	r4, #0
 800b57c:	dc7d      	bgt.n	800b67a <_svfprintf_r+0xe5a>
 800b57e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b580:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b582:	4293      	cmp	r3, r2
 800b584:	db01      	blt.n	800b58a <_svfprintf_r+0xd6a>
 800b586:	07f3      	lsls	r3, r6, #31
 800b588:	d518      	bpl.n	800b5bc <_svfprintf_r+0xd9c>
 800b58a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b58c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b58e:	4694      	mov	ip, r2
 800b590:	603b      	str	r3, [r7, #0]
 800b592:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b594:	607b      	str	r3, [r7, #4]
 800b596:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800b598:	3708      	adds	r7, #8
 800b59a:	4463      	add	r3, ip
 800b59c:	9329      	str	r3, [sp, #164]	; 0xa4
 800b59e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b5a0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b5a2:	3301      	adds	r3, #1
 800b5a4:	9328      	str	r3, [sp, #160]	; 0xa0
 800b5a6:	2b07      	cmp	r3, #7
 800b5a8:	dd08      	ble.n	800b5bc <_svfprintf_r+0xd9c>
 800b5aa:	aa27      	add	r2, sp, #156	; 0x9c
 800b5ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b5ae:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b5b0:	f001 fc66 	bl	800ce80 <__ssprint_r>
 800b5b4:	2800      	cmp	r0, #0
 800b5b6:	d000      	beq.n	800b5ba <_svfprintf_r+0xd9a>
 800b5b8:	e130      	b.n	800b81c <_svfprintf_r+0xffc>
 800b5ba:	af34      	add	r7, sp, #208	; 0xd0
 800b5bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b5be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b5c0:	9921      	ldr	r1, [sp, #132]	; 0x84
 800b5c2:	1a9b      	subs	r3, r3, r2
 800b5c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b5c6:	1a54      	subs	r4, r2, r1
 800b5c8:	429c      	cmp	r4, r3
 800b5ca:	dd00      	ble.n	800b5ce <_svfprintf_r+0xdae>
 800b5cc:	001c      	movs	r4, r3
 800b5ce:	2c00      	cmp	r4, #0
 800b5d0:	dd18      	ble.n	800b604 <_svfprintf_r+0xde4>
 800b5d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b5d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b5d6:	4694      	mov	ip, r2
 800b5d8:	4463      	add	r3, ip
 800b5da:	603b      	str	r3, [r7, #0]
 800b5dc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800b5de:	607c      	str	r4, [r7, #4]
 800b5e0:	191b      	adds	r3, r3, r4
 800b5e2:	9329      	str	r3, [sp, #164]	; 0xa4
 800b5e4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b5e6:	3708      	adds	r7, #8
 800b5e8:	930b      	str	r3, [sp, #44]	; 0x2c
 800b5ea:	3301      	adds	r3, #1
 800b5ec:	9328      	str	r3, [sp, #160]	; 0xa0
 800b5ee:	2b07      	cmp	r3, #7
 800b5f0:	dd08      	ble.n	800b604 <_svfprintf_r+0xde4>
 800b5f2:	aa27      	add	r2, sp, #156	; 0x9c
 800b5f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b5f6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b5f8:	f001 fc42 	bl	800ce80 <__ssprint_r>
 800b5fc:	2800      	cmp	r0, #0
 800b5fe:	d000      	beq.n	800b602 <_svfprintf_r+0xde2>
 800b600:	e10c      	b.n	800b81c <_svfprintf_r+0xffc>
 800b602:	af34      	add	r7, sp, #208	; 0xd0
 800b604:	43e3      	mvns	r3, r4
 800b606:	17db      	asrs	r3, r3, #31
 800b608:	401c      	ands	r4, r3
 800b60a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b60c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b60e:	2510      	movs	r5, #16
 800b610:	1a9b      	subs	r3, r3, r2
 800b612:	1b1c      	subs	r4, r3, r4
 800b614:	2c00      	cmp	r4, #0
 800b616:	dc00      	bgt.n	800b61a <_svfprintf_r+0xdfa>
 800b618:	e49a      	b.n	800af50 <_svfprintf_r+0x730>
 800b61a:	4b57      	ldr	r3, [pc, #348]	; (800b778 <_svfprintf_r+0xf58>)
 800b61c:	603b      	str	r3, [r7, #0]
 800b61e:	2c10      	cmp	r4, #16
 800b620:	dc00      	bgt.n	800b624 <_svfprintf_r+0xe04>
 800b622:	e6dc      	b.n	800b3de <_svfprintf_r+0xbbe>
 800b624:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800b626:	607d      	str	r5, [r7, #4]
 800b628:	3310      	adds	r3, #16
 800b62a:	9329      	str	r3, [sp, #164]	; 0xa4
 800b62c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b62e:	3708      	adds	r7, #8
 800b630:	930b      	str	r3, [sp, #44]	; 0x2c
 800b632:	3301      	adds	r3, #1
 800b634:	9328      	str	r3, [sp, #160]	; 0xa0
 800b636:	2b07      	cmp	r3, #7
 800b638:	dd08      	ble.n	800b64c <_svfprintf_r+0xe2c>
 800b63a:	aa27      	add	r2, sp, #156	; 0x9c
 800b63c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b63e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b640:	f001 fc1e 	bl	800ce80 <__ssprint_r>
 800b644:	2800      	cmp	r0, #0
 800b646:	d000      	beq.n	800b64a <_svfprintf_r+0xe2a>
 800b648:	e0e8      	b.n	800b81c <_svfprintf_r+0xffc>
 800b64a:	af34      	add	r7, sp, #208	; 0xd0
 800b64c:	3c10      	subs	r4, #16
 800b64e:	e7e4      	b.n	800b61a <_svfprintf_r+0xdfa>
 800b650:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800b652:	607d      	str	r5, [r7, #4]
 800b654:	3310      	adds	r3, #16
 800b656:	9329      	str	r3, [sp, #164]	; 0xa4
 800b658:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b65a:	3708      	adds	r7, #8
 800b65c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b65e:	3301      	adds	r3, #1
 800b660:	9328      	str	r3, [sp, #160]	; 0xa0
 800b662:	2b07      	cmp	r3, #7
 800b664:	dd08      	ble.n	800b678 <_svfprintf_r+0xe58>
 800b666:	aa27      	add	r2, sp, #156	; 0x9c
 800b668:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b66a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b66c:	f001 fc08 	bl	800ce80 <__ssprint_r>
 800b670:	2800      	cmp	r0, #0
 800b672:	d000      	beq.n	800b676 <_svfprintf_r+0xe56>
 800b674:	e0d2      	b.n	800b81c <_svfprintf_r+0xffc>
 800b676:	af34      	add	r7, sp, #208	; 0xd0
 800b678:	3c10      	subs	r4, #16
 800b67a:	4b3f      	ldr	r3, [pc, #252]	; (800b778 <_svfprintf_r+0xf58>)
 800b67c:	603b      	str	r3, [r7, #0]
 800b67e:	2c10      	cmp	r4, #16
 800b680:	dce6      	bgt.n	800b650 <_svfprintf_r+0xe30>
 800b682:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800b684:	607c      	str	r4, [r7, #4]
 800b686:	191c      	adds	r4, r3, r4
 800b688:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b68a:	9429      	str	r4, [sp, #164]	; 0xa4
 800b68c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b68e:	3301      	adds	r3, #1
 800b690:	9328      	str	r3, [sp, #160]	; 0xa0
 800b692:	3708      	adds	r7, #8
 800b694:	2b07      	cmp	r3, #7
 800b696:	dc00      	bgt.n	800b69a <_svfprintf_r+0xe7a>
 800b698:	e771      	b.n	800b57e <_svfprintf_r+0xd5e>
 800b69a:	aa27      	add	r2, sp, #156	; 0x9c
 800b69c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b69e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b6a0:	f001 fbee 	bl	800ce80 <__ssprint_r>
 800b6a4:	2800      	cmp	r0, #0
 800b6a6:	d000      	beq.n	800b6aa <_svfprintf_r+0xe8a>
 800b6a8:	e0b8      	b.n	800b81c <_svfprintf_r+0xffc>
 800b6aa:	af34      	add	r7, sp, #208	; 0xd0
 800b6ac:	e767      	b.n	800b57e <_svfprintf_r+0xd5e>
 800b6ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b6b0:	2b01      	cmp	r3, #1
 800b6b2:	dc03      	bgt.n	800b6bc <_svfprintf_r+0xe9c>
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	421e      	tst	r6, r3
 800b6b8:	d100      	bne.n	800b6bc <_svfprintf_r+0xe9c>
 800b6ba:	e087      	b.n	800b7cc <_svfprintf_r+0xfac>
 800b6bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b6be:	603b      	str	r3, [r7, #0]
 800b6c0:	2301      	movs	r3, #1
 800b6c2:	607b      	str	r3, [r7, #4]
 800b6c4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800b6c6:	3708      	adds	r7, #8
 800b6c8:	3301      	adds	r3, #1
 800b6ca:	9329      	str	r3, [sp, #164]	; 0xa4
 800b6cc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b6ce:	930b      	str	r3, [sp, #44]	; 0x2c
 800b6d0:	3301      	adds	r3, #1
 800b6d2:	9328      	str	r3, [sp, #160]	; 0xa0
 800b6d4:	2b07      	cmp	r3, #7
 800b6d6:	dd08      	ble.n	800b6ea <_svfprintf_r+0xeca>
 800b6d8:	aa27      	add	r2, sp, #156	; 0x9c
 800b6da:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b6dc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b6de:	f001 fbcf 	bl	800ce80 <__ssprint_r>
 800b6e2:	2800      	cmp	r0, #0
 800b6e4:	d000      	beq.n	800b6e8 <_svfprintf_r+0xec8>
 800b6e6:	e099      	b.n	800b81c <_svfprintf_r+0xffc>
 800b6e8:	af34      	add	r7, sp, #208	; 0xd0
 800b6ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b6ec:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b6ee:	4694      	mov	ip, r2
 800b6f0:	603b      	str	r3, [r7, #0]
 800b6f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b6f4:	607b      	str	r3, [r7, #4]
 800b6f6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800b6f8:	3708      	adds	r7, #8
 800b6fa:	4463      	add	r3, ip
 800b6fc:	9329      	str	r3, [sp, #164]	; 0xa4
 800b6fe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b700:	930b      	str	r3, [sp, #44]	; 0x2c
 800b702:	3301      	adds	r3, #1
 800b704:	9328      	str	r3, [sp, #160]	; 0xa0
 800b706:	2b07      	cmp	r3, #7
 800b708:	dd08      	ble.n	800b71c <_svfprintf_r+0xefc>
 800b70a:	aa27      	add	r2, sp, #156	; 0x9c
 800b70c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b70e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b710:	f001 fbb6 	bl	800ce80 <__ssprint_r>
 800b714:	2800      	cmp	r0, #0
 800b716:	d000      	beq.n	800b71a <_svfprintf_r+0xefa>
 800b718:	e080      	b.n	800b81c <_svfprintf_r+0xffc>
 800b71a:	af34      	add	r7, sp, #208	; 0xd0
 800b71c:	2300      	movs	r3, #0
 800b71e:	2200      	movs	r2, #0
 800b720:	9816      	ldr	r0, [sp, #88]	; 0x58
 800b722:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800b724:	f7f4 fe92 	bl	800044c <__aeabi_dcmpeq>
 800b728:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b72a:	1e5d      	subs	r5, r3, #1
 800b72c:	2800      	cmp	r0, #0
 800b72e:	d125      	bne.n	800b77c <_svfprintf_r+0xf5c>
 800b730:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b732:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b734:	3301      	adds	r3, #1
 800b736:	603b      	str	r3, [r7, #0]
 800b738:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800b73a:	607d      	str	r5, [r7, #4]
 800b73c:	3b01      	subs	r3, #1
 800b73e:	189b      	adds	r3, r3, r2
 800b740:	9329      	str	r3, [sp, #164]	; 0xa4
 800b742:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b744:	3708      	adds	r7, #8
 800b746:	930b      	str	r3, [sp, #44]	; 0x2c
 800b748:	3301      	adds	r3, #1
 800b74a:	9328      	str	r3, [sp, #160]	; 0xa0
 800b74c:	2b07      	cmp	r3, #7
 800b74e:	dd07      	ble.n	800b760 <_svfprintf_r+0xf40>
 800b750:	aa27      	add	r2, sp, #156	; 0x9c
 800b752:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b754:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b756:	f001 fb93 	bl	800ce80 <__ssprint_r>
 800b75a:	2800      	cmp	r0, #0
 800b75c:	d15e      	bne.n	800b81c <_svfprintf_r+0xffc>
 800b75e:	af34      	add	r7, sp, #208	; 0xd0
 800b760:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b762:	ab23      	add	r3, sp, #140	; 0x8c
 800b764:	4694      	mov	ip, r2
 800b766:	603b      	str	r3, [r7, #0]
 800b768:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b76a:	607b      	str	r3, [r7, #4]
 800b76c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800b76e:	4463      	add	r3, ip
 800b770:	9329      	str	r3, [sp, #164]	; 0xa4
 800b772:	e638      	b.n	800b3e6 <_svfprintf_r+0xbc6>
 800b774:	0800d90b 	.word	0x0800d90b
 800b778:	0800d91d 	.word	0x0800d91d
 800b77c:	2410      	movs	r4, #16
 800b77e:	2d00      	cmp	r5, #0
 800b780:	ddee      	ble.n	800b760 <_svfprintf_r+0xf40>
 800b782:	4b5e      	ldr	r3, [pc, #376]	; (800b8fc <_svfprintf_r+0x10dc>)
 800b784:	603b      	str	r3, [r7, #0]
 800b786:	2d10      	cmp	r5, #16
 800b788:	dc0b      	bgt.n	800b7a2 <_svfprintf_r+0xf82>
 800b78a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800b78c:	607d      	str	r5, [r7, #4]
 800b78e:	195d      	adds	r5, r3, r5
 800b790:	9529      	str	r5, [sp, #164]	; 0xa4
 800b792:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b794:	930b      	str	r3, [sp, #44]	; 0x2c
 800b796:	3301      	adds	r3, #1
 800b798:	9328      	str	r3, [sp, #160]	; 0xa0
 800b79a:	2b07      	cmp	r3, #7
 800b79c:	dcd8      	bgt.n	800b750 <_svfprintf_r+0xf30>
 800b79e:	3708      	adds	r7, #8
 800b7a0:	e7de      	b.n	800b760 <_svfprintf_r+0xf40>
 800b7a2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800b7a4:	607c      	str	r4, [r7, #4]
 800b7a6:	3310      	adds	r3, #16
 800b7a8:	9329      	str	r3, [sp, #164]	; 0xa4
 800b7aa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b7ac:	3708      	adds	r7, #8
 800b7ae:	930b      	str	r3, [sp, #44]	; 0x2c
 800b7b0:	3301      	adds	r3, #1
 800b7b2:	9328      	str	r3, [sp, #160]	; 0xa0
 800b7b4:	2b07      	cmp	r3, #7
 800b7b6:	dd07      	ble.n	800b7c8 <_svfprintf_r+0xfa8>
 800b7b8:	aa27      	add	r2, sp, #156	; 0x9c
 800b7ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b7bc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b7be:	f001 fb5f 	bl	800ce80 <__ssprint_r>
 800b7c2:	2800      	cmp	r0, #0
 800b7c4:	d12a      	bne.n	800b81c <_svfprintf_r+0xffc>
 800b7c6:	af34      	add	r7, sp, #208	; 0xd0
 800b7c8:	3d10      	subs	r5, #16
 800b7ca:	e7da      	b.n	800b782 <_svfprintf_r+0xf62>
 800b7cc:	607b      	str	r3, [r7, #4]
 800b7ce:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800b7d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b7d2:	3301      	adds	r3, #1
 800b7d4:	603a      	str	r2, [r7, #0]
 800b7d6:	9329      	str	r3, [sp, #164]	; 0xa4
 800b7d8:	e7db      	b.n	800b792 <_svfprintf_r+0xf72>
 800b7da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b7dc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b7de:	2510      	movs	r5, #16
 800b7e0:	1a9c      	subs	r4, r3, r2
 800b7e2:	2c00      	cmp	r4, #0
 800b7e4:	dc01      	bgt.n	800b7ea <_svfprintf_r+0xfca>
 800b7e6:	f7ff fbb7 	bl	800af58 <_svfprintf_r+0x738>
 800b7ea:	4b45      	ldr	r3, [pc, #276]	; (800b900 <_svfprintf_r+0x10e0>)
 800b7ec:	603b      	str	r3, [r7, #0]
 800b7ee:	2c10      	cmp	r4, #16
 800b7f0:	dc1e      	bgt.n	800b830 <_svfprintf_r+0x1010>
 800b7f2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800b7f4:	607c      	str	r4, [r7, #4]
 800b7f6:	191c      	adds	r4, r3, r4
 800b7f8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b7fa:	9429      	str	r4, [sp, #164]	; 0xa4
 800b7fc:	930b      	str	r3, [sp, #44]	; 0x2c
 800b7fe:	3301      	adds	r3, #1
 800b800:	9328      	str	r3, [sp, #160]	; 0xa0
 800b802:	2b07      	cmp	r3, #7
 800b804:	dc01      	bgt.n	800b80a <_svfprintf_r+0xfea>
 800b806:	f7ff fba7 	bl	800af58 <_svfprintf_r+0x738>
 800b80a:	aa27      	add	r2, sp, #156	; 0x9c
 800b80c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b80e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b810:	f001 fb36 	bl	800ce80 <__ssprint_r>
 800b814:	2800      	cmp	r0, #0
 800b816:	d101      	bne.n	800b81c <_svfprintf_r+0xffc>
 800b818:	f7ff fb9e 	bl	800af58 <_svfprintf_r+0x738>
 800b81c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b81e:	899b      	ldrh	r3, [r3, #12]
 800b820:	065b      	lsls	r3, r3, #25
 800b822:	d401      	bmi.n	800b828 <_svfprintf_r+0x1008>
 800b824:	f7ff f821 	bl	800a86a <_svfprintf_r+0x4a>
 800b828:	2301      	movs	r3, #1
 800b82a:	425b      	negs	r3, r3
 800b82c:	f7ff f81c 	bl	800a868 <_svfprintf_r+0x48>
 800b830:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800b832:	607d      	str	r5, [r7, #4]
 800b834:	3310      	adds	r3, #16
 800b836:	9329      	str	r3, [sp, #164]	; 0xa4
 800b838:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b83a:	3708      	adds	r7, #8
 800b83c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b83e:	3301      	adds	r3, #1
 800b840:	9328      	str	r3, [sp, #160]	; 0xa0
 800b842:	2b07      	cmp	r3, #7
 800b844:	dd07      	ble.n	800b856 <_svfprintf_r+0x1036>
 800b846:	aa27      	add	r2, sp, #156	; 0x9c
 800b848:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b84a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b84c:	f001 fb18 	bl	800ce80 <__ssprint_r>
 800b850:	2800      	cmp	r0, #0
 800b852:	d1e3      	bne.n	800b81c <_svfprintf_r+0xffc>
 800b854:	af34      	add	r7, sp, #208	; 0xd0
 800b856:	3c10      	subs	r4, #16
 800b858:	e7c7      	b.n	800b7ea <_svfprintf_r+0xfca>
 800b85a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800b85c:	9306      	str	r3, [sp, #24]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d0dc      	beq.n	800b81c <_svfprintf_r+0xffc>
 800b862:	aa27      	add	r2, sp, #156	; 0x9c
 800b864:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b866:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b868:	f001 fb0a 	bl	800ce80 <__ssprint_r>
 800b86c:	e7d6      	b.n	800b81c <_svfprintf_r+0xffc>
 800b86e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b870:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b872:	9816      	ldr	r0, [sp, #88]	; 0x58
 800b874:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800b876:	f7f6 fbef 	bl	8002058 <__aeabi_dcmpun>
 800b87a:	2800      	cmp	r0, #0
 800b87c:	d101      	bne.n	800b882 <_svfprintf_r+0x1062>
 800b87e:	f7ff f9d8 	bl	800ac32 <_svfprintf_r+0x412>
 800b882:	4b20      	ldr	r3, [pc, #128]	; (800b904 <_svfprintf_r+0x10e4>)
 800b884:	930c      	str	r3, [sp, #48]	; 0x30
 800b886:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b888:	2b47      	cmp	r3, #71	; 0x47
 800b88a:	dd01      	ble.n	800b890 <_svfprintf_r+0x1070>
 800b88c:	f7ff f9ca 	bl	800ac24 <_svfprintf_r+0x404>
 800b890:	4b1d      	ldr	r3, [pc, #116]	; (800b908 <_svfprintf_r+0x10e8>)
 800b892:	f7ff f9c6 	bl	800ac22 <_svfprintf_r+0x402>
 800b896:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800b898:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b89a:	1a9b      	subs	r3, r3, r2
 800b89c:	930e      	str	r3, [sp, #56]	; 0x38
 800b89e:	f7ff fa43 	bl	800ad28 <_svfprintf_r+0x508>
 800b8a2:	0035      	movs	r5, r6
 800b8a4:	2a00      	cmp	r2, #0
 800b8a6:	d101      	bne.n	800b8ac <_svfprintf_r+0x108c>
 800b8a8:	f7ff f8c8 	bl	800aa3c <_svfprintf_r+0x21c>
 800b8ac:	2b01      	cmp	r3, #1
 800b8ae:	d100      	bne.n	800b8b2 <_svfprintf_r+0x1092>
 800b8b0:	e479      	b.n	800b1a6 <_svfprintf_r+0x986>
 800b8b2:	2b02      	cmp	r3, #2
 800b8b4:	d100      	bne.n	800b8b8 <_svfprintf_r+0x1098>
 800b8b6:	e4ab      	b.n	800b210 <_svfprintf_r+0x9f0>
 800b8b8:	2607      	movs	r6, #7
 800b8ba:	ab34      	add	r3, sp, #208	; 0xd0
 800b8bc:	1e5a      	subs	r2, r3, #1
 800b8be:	920c      	str	r2, [sp, #48]	; 0x30
 800b8c0:	9a06      	ldr	r2, [sp, #24]
 800b8c2:	1e59      	subs	r1, r3, #1
 800b8c4:	4032      	ands	r2, r6
 800b8c6:	3230      	adds	r2, #48	; 0x30
 800b8c8:	700a      	strb	r2, [r1, #0]
 800b8ca:	9907      	ldr	r1, [sp, #28]
 800b8cc:	074c      	lsls	r4, r1, #29
 800b8ce:	9906      	ldr	r1, [sp, #24]
 800b8d0:	08c8      	lsrs	r0, r1, #3
 800b8d2:	9907      	ldr	r1, [sp, #28]
 800b8d4:	4304      	orrs	r4, r0
 800b8d6:	08c9      	lsrs	r1, r1, #3
 800b8d8:	9107      	str	r1, [sp, #28]
 800b8da:	0021      	movs	r1, r4
 800b8dc:	9807      	ldr	r0, [sp, #28]
 800b8de:	9406      	str	r4, [sp, #24]
 800b8e0:	4301      	orrs	r1, r0
 800b8e2:	d000      	beq.n	800b8e6 <_svfprintf_r+0x10c6>
 800b8e4:	e45d      	b.n	800b1a2 <_svfprintf_r+0x982>
 800b8e6:	07e9      	lsls	r1, r5, #31
 800b8e8:	d400      	bmi.n	800b8ec <_svfprintf_r+0x10cc>
 800b8ea:	e484      	b.n	800b1f6 <_svfprintf_r+0x9d6>
 800b8ec:	2a30      	cmp	r2, #48	; 0x30
 800b8ee:	d100      	bne.n	800b8f2 <_svfprintf_r+0x10d2>
 800b8f0:	e481      	b.n	800b1f6 <_svfprintf_r+0x9d6>
 800b8f2:	2230      	movs	r2, #48	; 0x30
 800b8f4:	3b02      	subs	r3, #2
 800b8f6:	701a      	strb	r2, [r3, #0]
 800b8f8:	930c      	str	r3, [sp, #48]	; 0x30
 800b8fa:	e47c      	b.n	800b1f6 <_svfprintf_r+0x9d6>
 800b8fc:	0800d91d 	.word	0x0800d91d
 800b900:	0800d90d 	.word	0x0800d90d
 800b904:	0800d8e5 	.word	0x0800d8e5
 800b908:	0800d8e1 	.word	0x0800d8e1

0800b90c <_vsnprintf_r>:
 800b90c:	b530      	push	{r4, r5, lr}
 800b90e:	0014      	movs	r4, r2
 800b910:	b09b      	sub	sp, #108	; 0x6c
 800b912:	0005      	movs	r5, r0
 800b914:	001a      	movs	r2, r3
 800b916:	2c00      	cmp	r4, #0
 800b918:	da05      	bge.n	800b926 <_vsnprintf_r+0x1a>
 800b91a:	238b      	movs	r3, #139	; 0x8b
 800b91c:	6003      	str	r3, [r0, #0]
 800b91e:	2001      	movs	r0, #1
 800b920:	4240      	negs	r0, r0
 800b922:	b01b      	add	sp, #108	; 0x6c
 800b924:	bd30      	pop	{r4, r5, pc}
 800b926:	2382      	movs	r3, #130	; 0x82
 800b928:	4668      	mov	r0, sp
 800b92a:	009b      	lsls	r3, r3, #2
 800b92c:	8183      	strh	r3, [r0, #12]
 800b92e:	2300      	movs	r3, #0
 800b930:	9100      	str	r1, [sp, #0]
 800b932:	9104      	str	r1, [sp, #16]
 800b934:	429c      	cmp	r4, r3
 800b936:	d000      	beq.n	800b93a <_vsnprintf_r+0x2e>
 800b938:	1e63      	subs	r3, r4, #1
 800b93a:	9302      	str	r3, [sp, #8]
 800b93c:	9305      	str	r3, [sp, #20]
 800b93e:	2301      	movs	r3, #1
 800b940:	4669      	mov	r1, sp
 800b942:	425b      	negs	r3, r3
 800b944:	81cb      	strh	r3, [r1, #14]
 800b946:	0028      	movs	r0, r5
 800b948:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b94a:	f7fe ff69 	bl	800a820 <_svfprintf_r>
 800b94e:	1c43      	adds	r3, r0, #1
 800b950:	da01      	bge.n	800b956 <_vsnprintf_r+0x4a>
 800b952:	238b      	movs	r3, #139	; 0x8b
 800b954:	602b      	str	r3, [r5, #0]
 800b956:	2c00      	cmp	r4, #0
 800b958:	d0e3      	beq.n	800b922 <_vsnprintf_r+0x16>
 800b95a:	2300      	movs	r3, #0
 800b95c:	9a00      	ldr	r2, [sp, #0]
 800b95e:	7013      	strb	r3, [r2, #0]
 800b960:	e7df      	b.n	800b922 <_vsnprintf_r+0x16>
	...

0800b964 <vsnprintf>:
 800b964:	b507      	push	{r0, r1, r2, lr}
 800b966:	9300      	str	r3, [sp, #0]
 800b968:	0013      	movs	r3, r2
 800b96a:	000a      	movs	r2, r1
 800b96c:	0001      	movs	r1, r0
 800b96e:	4802      	ldr	r0, [pc, #8]	; (800b978 <vsnprintf+0x14>)
 800b970:	6800      	ldr	r0, [r0, #0]
 800b972:	f7ff ffcb 	bl	800b90c <_vsnprintf_r>
 800b976:	bd0e      	pop	{r1, r2, r3, pc}
 800b978:	20000040 	.word	0x20000040

0800b97c <quorem>:
 800b97c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b97e:	6903      	ldr	r3, [r0, #16]
 800b980:	690c      	ldr	r4, [r1, #16]
 800b982:	b089      	sub	sp, #36	; 0x24
 800b984:	0007      	movs	r7, r0
 800b986:	9105      	str	r1, [sp, #20]
 800b988:	2600      	movs	r6, #0
 800b98a:	429c      	cmp	r4, r3
 800b98c:	dc6d      	bgt.n	800ba6a <quorem+0xee>
 800b98e:	000b      	movs	r3, r1
 800b990:	3c01      	subs	r4, #1
 800b992:	3314      	adds	r3, #20
 800b994:	00a5      	lsls	r5, r4, #2
 800b996:	9303      	str	r3, [sp, #12]
 800b998:	195b      	adds	r3, r3, r5
 800b99a:	9304      	str	r3, [sp, #16]
 800b99c:	0003      	movs	r3, r0
 800b99e:	3314      	adds	r3, #20
 800b9a0:	9302      	str	r3, [sp, #8]
 800b9a2:	195d      	adds	r5, r3, r5
 800b9a4:	9b04      	ldr	r3, [sp, #16]
 800b9a6:	6828      	ldr	r0, [r5, #0]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	1c59      	adds	r1, r3, #1
 800b9ac:	9301      	str	r3, [sp, #4]
 800b9ae:	f7f4 fbc7 	bl	8000140 <__udivsi3>
 800b9b2:	9001      	str	r0, [sp, #4]
 800b9b4:	42b0      	cmp	r0, r6
 800b9b6:	d02d      	beq.n	800ba14 <quorem+0x98>
 800b9b8:	9b03      	ldr	r3, [sp, #12]
 800b9ba:	9802      	ldr	r0, [sp, #8]
 800b9bc:	469c      	mov	ip, r3
 800b9be:	9606      	str	r6, [sp, #24]
 800b9c0:	4662      	mov	r2, ip
 800b9c2:	ca08      	ldmia	r2!, {r3}
 800b9c4:	4694      	mov	ip, r2
 800b9c6:	9a01      	ldr	r2, [sp, #4]
 800b9c8:	b299      	uxth	r1, r3
 800b9ca:	4351      	muls	r1, r2
 800b9cc:	0c1b      	lsrs	r3, r3, #16
 800b9ce:	4353      	muls	r3, r2
 800b9d0:	1989      	adds	r1, r1, r6
 800b9d2:	0c0a      	lsrs	r2, r1, #16
 800b9d4:	189b      	adds	r3, r3, r2
 800b9d6:	9307      	str	r3, [sp, #28]
 800b9d8:	8802      	ldrh	r2, [r0, #0]
 800b9da:	0c1e      	lsrs	r6, r3, #16
 800b9dc:	9b06      	ldr	r3, [sp, #24]
 800b9de:	b289      	uxth	r1, r1
 800b9e0:	18d2      	adds	r2, r2, r3
 800b9e2:	6803      	ldr	r3, [r0, #0]
 800b9e4:	1a52      	subs	r2, r2, r1
 800b9e6:	0c19      	lsrs	r1, r3, #16
 800b9e8:	466b      	mov	r3, sp
 800b9ea:	8b9b      	ldrh	r3, [r3, #28]
 800b9ec:	1acb      	subs	r3, r1, r3
 800b9ee:	1411      	asrs	r1, r2, #16
 800b9f0:	185b      	adds	r3, r3, r1
 800b9f2:	1419      	asrs	r1, r3, #16
 800b9f4:	b292      	uxth	r2, r2
 800b9f6:	041b      	lsls	r3, r3, #16
 800b9f8:	431a      	orrs	r2, r3
 800b9fa:	9b04      	ldr	r3, [sp, #16]
 800b9fc:	9106      	str	r1, [sp, #24]
 800b9fe:	c004      	stmia	r0!, {r2}
 800ba00:	4563      	cmp	r3, ip
 800ba02:	d2dd      	bcs.n	800b9c0 <quorem+0x44>
 800ba04:	682b      	ldr	r3, [r5, #0]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d104      	bne.n	800ba14 <quorem+0x98>
 800ba0a:	9b02      	ldr	r3, [sp, #8]
 800ba0c:	3d04      	subs	r5, #4
 800ba0e:	42ab      	cmp	r3, r5
 800ba10:	d32e      	bcc.n	800ba70 <quorem+0xf4>
 800ba12:	613c      	str	r4, [r7, #16]
 800ba14:	9905      	ldr	r1, [sp, #20]
 800ba16:	0038      	movs	r0, r7
 800ba18:	f001 f961 	bl	800ccde <__mcmp>
 800ba1c:	2800      	cmp	r0, #0
 800ba1e:	db23      	blt.n	800ba68 <quorem+0xec>
 800ba20:	2500      	movs	r5, #0
 800ba22:	9b01      	ldr	r3, [sp, #4]
 800ba24:	9802      	ldr	r0, [sp, #8]
 800ba26:	3301      	adds	r3, #1
 800ba28:	9903      	ldr	r1, [sp, #12]
 800ba2a:	9301      	str	r3, [sp, #4]
 800ba2c:	c908      	ldmia	r1!, {r3}
 800ba2e:	8802      	ldrh	r2, [r0, #0]
 800ba30:	1955      	adds	r5, r2, r5
 800ba32:	b29a      	uxth	r2, r3
 800ba34:	1aaa      	subs	r2, r5, r2
 800ba36:	6805      	ldr	r5, [r0, #0]
 800ba38:	0c1b      	lsrs	r3, r3, #16
 800ba3a:	0c2d      	lsrs	r5, r5, #16
 800ba3c:	1aeb      	subs	r3, r5, r3
 800ba3e:	1415      	asrs	r5, r2, #16
 800ba40:	195b      	adds	r3, r3, r5
 800ba42:	141d      	asrs	r5, r3, #16
 800ba44:	b292      	uxth	r2, r2
 800ba46:	041b      	lsls	r3, r3, #16
 800ba48:	4313      	orrs	r3, r2
 800ba4a:	c008      	stmia	r0!, {r3}
 800ba4c:	9b04      	ldr	r3, [sp, #16]
 800ba4e:	428b      	cmp	r3, r1
 800ba50:	d2ec      	bcs.n	800ba2c <quorem+0xb0>
 800ba52:	9a02      	ldr	r2, [sp, #8]
 800ba54:	00a3      	lsls	r3, r4, #2
 800ba56:	18d3      	adds	r3, r2, r3
 800ba58:	681a      	ldr	r2, [r3, #0]
 800ba5a:	2a00      	cmp	r2, #0
 800ba5c:	d104      	bne.n	800ba68 <quorem+0xec>
 800ba5e:	9a02      	ldr	r2, [sp, #8]
 800ba60:	3b04      	subs	r3, #4
 800ba62:	429a      	cmp	r2, r3
 800ba64:	d309      	bcc.n	800ba7a <quorem+0xfe>
 800ba66:	613c      	str	r4, [r7, #16]
 800ba68:	9e01      	ldr	r6, [sp, #4]
 800ba6a:	0030      	movs	r0, r6
 800ba6c:	b009      	add	sp, #36	; 0x24
 800ba6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba70:	682b      	ldr	r3, [r5, #0]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d1cd      	bne.n	800ba12 <quorem+0x96>
 800ba76:	3c01      	subs	r4, #1
 800ba78:	e7c7      	b.n	800ba0a <quorem+0x8e>
 800ba7a:	681a      	ldr	r2, [r3, #0]
 800ba7c:	2a00      	cmp	r2, #0
 800ba7e:	d1f2      	bne.n	800ba66 <quorem+0xea>
 800ba80:	3c01      	subs	r4, #1
 800ba82:	e7ec      	b.n	800ba5e <quorem+0xe2>

0800ba84 <_dtoa_r>:
 800ba84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba86:	0016      	movs	r6, r2
 800ba88:	001f      	movs	r7, r3
 800ba8a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ba8c:	b09d      	sub	sp, #116	; 0x74
 800ba8e:	9004      	str	r0, [sp, #16]
 800ba90:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800ba92:	9606      	str	r6, [sp, #24]
 800ba94:	9707      	str	r7, [sp, #28]
 800ba96:	2c00      	cmp	r4, #0
 800ba98:	d108      	bne.n	800baac <_dtoa_r+0x28>
 800ba9a:	2010      	movs	r0, #16
 800ba9c:	f7fe fc3a 	bl	800a314 <malloc>
 800baa0:	9b04      	ldr	r3, [sp, #16]
 800baa2:	6258      	str	r0, [r3, #36]	; 0x24
 800baa4:	6044      	str	r4, [r0, #4]
 800baa6:	6084      	str	r4, [r0, #8]
 800baa8:	6004      	str	r4, [r0, #0]
 800baaa:	60c4      	str	r4, [r0, #12]
 800baac:	9b04      	ldr	r3, [sp, #16]
 800baae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bab0:	6819      	ldr	r1, [r3, #0]
 800bab2:	2900      	cmp	r1, #0
 800bab4:	d00b      	beq.n	800bace <_dtoa_r+0x4a>
 800bab6:	685a      	ldr	r2, [r3, #4]
 800bab8:	2301      	movs	r3, #1
 800baba:	4093      	lsls	r3, r2
 800babc:	604a      	str	r2, [r1, #4]
 800babe:	608b      	str	r3, [r1, #8]
 800bac0:	9804      	ldr	r0, [sp, #16]
 800bac2:	f000 ff32 	bl	800c92a <_Bfree>
 800bac6:	2200      	movs	r2, #0
 800bac8:	9b04      	ldr	r3, [sp, #16]
 800baca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bacc:	601a      	str	r2, [r3, #0]
 800bace:	9b07      	ldr	r3, [sp, #28]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	da1f      	bge.n	800bb14 <_dtoa_r+0x90>
 800bad4:	2301      	movs	r3, #1
 800bad6:	602b      	str	r3, [r5, #0]
 800bad8:	007b      	lsls	r3, r7, #1
 800bada:	085b      	lsrs	r3, r3, #1
 800badc:	9307      	str	r3, [sp, #28]
 800bade:	9c07      	ldr	r4, [sp, #28]
 800bae0:	4bb7      	ldr	r3, [pc, #732]	; (800bdc0 <_dtoa_r+0x33c>)
 800bae2:	0022      	movs	r2, r4
 800bae4:	9319      	str	r3, [sp, #100]	; 0x64
 800bae6:	401a      	ands	r2, r3
 800bae8:	429a      	cmp	r2, r3
 800baea:	d116      	bne.n	800bb1a <_dtoa_r+0x96>
 800baec:	4bb5      	ldr	r3, [pc, #724]	; (800bdc4 <_dtoa_r+0x340>)
 800baee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800baf0:	6013      	str	r3, [r2, #0]
 800baf2:	9b06      	ldr	r3, [sp, #24]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d103      	bne.n	800bb00 <_dtoa_r+0x7c>
 800baf8:	0324      	lsls	r4, r4, #12
 800bafa:	d101      	bne.n	800bb00 <_dtoa_r+0x7c>
 800bafc:	f000 fd91 	bl	800c622 <_dtoa_r+0xb9e>
 800bb00:	4bb1      	ldr	r3, [pc, #708]	; (800bdc8 <_dtoa_r+0x344>)
 800bb02:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800bb04:	930a      	str	r3, [sp, #40]	; 0x28
 800bb06:	4bb1      	ldr	r3, [pc, #708]	; (800bdcc <_dtoa_r+0x348>)
 800bb08:	2a00      	cmp	r2, #0
 800bb0a:	d001      	beq.n	800bb10 <_dtoa_r+0x8c>
 800bb0c:	f000 fd8f 	bl	800c62e <_dtoa_r+0xbaa>
 800bb10:	f000 fd8f 	bl	800c632 <_dtoa_r+0xbae>
 800bb14:	2300      	movs	r3, #0
 800bb16:	602b      	str	r3, [r5, #0]
 800bb18:	e7e1      	b.n	800bade <_dtoa_r+0x5a>
 800bb1a:	9e06      	ldr	r6, [sp, #24]
 800bb1c:	9f07      	ldr	r7, [sp, #28]
 800bb1e:	2200      	movs	r2, #0
 800bb20:	2300      	movs	r3, #0
 800bb22:	0030      	movs	r0, r6
 800bb24:	0039      	movs	r1, r7
 800bb26:	f7f4 fc91 	bl	800044c <__aeabi_dcmpeq>
 800bb2a:	1e05      	subs	r5, r0, #0
 800bb2c:	d00e      	beq.n	800bb4c <_dtoa_r+0xc8>
 800bb2e:	2301      	movs	r3, #1
 800bb30:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bb32:	6013      	str	r3, [r2, #0]
 800bb34:	4ba6      	ldr	r3, [pc, #664]	; (800bdd0 <_dtoa_r+0x34c>)
 800bb36:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800bb38:	930a      	str	r3, [sp, #40]	; 0x28
 800bb3a:	2a00      	cmp	r2, #0
 800bb3c:	d101      	bne.n	800bb42 <_dtoa_r+0xbe>
 800bb3e:	f000 fd78 	bl	800c632 <_dtoa_r+0xbae>
 800bb42:	4aa4      	ldr	r2, [pc, #656]	; (800bdd4 <_dtoa_r+0x350>)
 800bb44:	9926      	ldr	r1, [sp, #152]	; 0x98
 800bb46:	600a      	str	r2, [r1, #0]
 800bb48:	f000 fd73 	bl	800c632 <_dtoa_r+0xbae>
 800bb4c:	ab1a      	add	r3, sp, #104	; 0x68
 800bb4e:	9301      	str	r3, [sp, #4]
 800bb50:	ab1b      	add	r3, sp, #108	; 0x6c
 800bb52:	9300      	str	r3, [sp, #0]
 800bb54:	0032      	movs	r2, r6
 800bb56:	003b      	movs	r3, r7
 800bb58:	9804      	ldr	r0, [sp, #16]
 800bb5a:	f001 f93d 	bl	800cdd8 <__d2b>
 800bb5e:	0063      	lsls	r3, r4, #1
 800bb60:	9005      	str	r0, [sp, #20]
 800bb62:	0d5b      	lsrs	r3, r3, #21
 800bb64:	d100      	bne.n	800bb68 <_dtoa_r+0xe4>
 800bb66:	e07f      	b.n	800bc68 <_dtoa_r+0x1e4>
 800bb68:	033a      	lsls	r2, r7, #12
 800bb6a:	4c9b      	ldr	r4, [pc, #620]	; (800bdd8 <_dtoa_r+0x354>)
 800bb6c:	0b12      	lsrs	r2, r2, #12
 800bb6e:	4314      	orrs	r4, r2
 800bb70:	0021      	movs	r1, r4
 800bb72:	4a9a      	ldr	r2, [pc, #616]	; (800bddc <_dtoa_r+0x358>)
 800bb74:	0030      	movs	r0, r6
 800bb76:	9518      	str	r5, [sp, #96]	; 0x60
 800bb78:	189e      	adds	r6, r3, r2
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	4b98      	ldr	r3, [pc, #608]	; (800bde0 <_dtoa_r+0x35c>)
 800bb7e:	f7f5 ff55 	bl	8001a2c <__aeabi_dsub>
 800bb82:	4a98      	ldr	r2, [pc, #608]	; (800bde4 <_dtoa_r+0x360>)
 800bb84:	4b98      	ldr	r3, [pc, #608]	; (800bde8 <_dtoa_r+0x364>)
 800bb86:	f7f5 fcd1 	bl	800152c <__aeabi_dmul>
 800bb8a:	4a98      	ldr	r2, [pc, #608]	; (800bdec <_dtoa_r+0x368>)
 800bb8c:	4b98      	ldr	r3, [pc, #608]	; (800bdf0 <_dtoa_r+0x36c>)
 800bb8e:	f7f4 fd89 	bl	80006a4 <__aeabi_dadd>
 800bb92:	0004      	movs	r4, r0
 800bb94:	0030      	movs	r0, r6
 800bb96:	000d      	movs	r5, r1
 800bb98:	f7f6 fab2 	bl	8002100 <__aeabi_i2d>
 800bb9c:	4a95      	ldr	r2, [pc, #596]	; (800bdf4 <_dtoa_r+0x370>)
 800bb9e:	4b96      	ldr	r3, [pc, #600]	; (800bdf8 <_dtoa_r+0x374>)
 800bba0:	f7f5 fcc4 	bl	800152c <__aeabi_dmul>
 800bba4:	0002      	movs	r2, r0
 800bba6:	000b      	movs	r3, r1
 800bba8:	0020      	movs	r0, r4
 800bbaa:	0029      	movs	r1, r5
 800bbac:	f7f4 fd7a 	bl	80006a4 <__aeabi_dadd>
 800bbb0:	0004      	movs	r4, r0
 800bbb2:	000d      	movs	r5, r1
 800bbb4:	f7f6 fa70 	bl	8002098 <__aeabi_d2iz>
 800bbb8:	2200      	movs	r2, #0
 800bbba:	9003      	str	r0, [sp, #12]
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	0020      	movs	r0, r4
 800bbc0:	0029      	movs	r1, r5
 800bbc2:	f7f4 fc49 	bl	8000458 <__aeabi_dcmplt>
 800bbc6:	2800      	cmp	r0, #0
 800bbc8:	d00e      	beq.n	800bbe8 <_dtoa_r+0x164>
 800bbca:	9803      	ldr	r0, [sp, #12]
 800bbcc:	f7f6 fa98 	bl	8002100 <__aeabi_i2d>
 800bbd0:	000b      	movs	r3, r1
 800bbd2:	0002      	movs	r2, r0
 800bbd4:	0029      	movs	r1, r5
 800bbd6:	0020      	movs	r0, r4
 800bbd8:	f7f4 fc38 	bl	800044c <__aeabi_dcmpeq>
 800bbdc:	0003      	movs	r3, r0
 800bbde:	4258      	negs	r0, r3
 800bbe0:	4158      	adcs	r0, r3
 800bbe2:	9b03      	ldr	r3, [sp, #12]
 800bbe4:	1a1b      	subs	r3, r3, r0
 800bbe6:	9303      	str	r3, [sp, #12]
 800bbe8:	2301      	movs	r3, #1
 800bbea:	9316      	str	r3, [sp, #88]	; 0x58
 800bbec:	9b03      	ldr	r3, [sp, #12]
 800bbee:	2b16      	cmp	r3, #22
 800bbf0:	d80f      	bhi.n	800bc12 <_dtoa_r+0x18e>
 800bbf2:	4982      	ldr	r1, [pc, #520]	; (800bdfc <_dtoa_r+0x378>)
 800bbf4:	00db      	lsls	r3, r3, #3
 800bbf6:	18c9      	adds	r1, r1, r3
 800bbf8:	6808      	ldr	r0, [r1, #0]
 800bbfa:	6849      	ldr	r1, [r1, #4]
 800bbfc:	9a06      	ldr	r2, [sp, #24]
 800bbfe:	9b07      	ldr	r3, [sp, #28]
 800bc00:	f7f4 fc3e 	bl	8000480 <__aeabi_dcmpgt>
 800bc04:	2800      	cmp	r0, #0
 800bc06:	d04b      	beq.n	800bca0 <_dtoa_r+0x21c>
 800bc08:	9b03      	ldr	r3, [sp, #12]
 800bc0a:	3b01      	subs	r3, #1
 800bc0c:	9303      	str	r3, [sp, #12]
 800bc0e:	2300      	movs	r3, #0
 800bc10:	9316      	str	r3, [sp, #88]	; 0x58
 800bc12:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800bc14:	1b9e      	subs	r6, r3, r6
 800bc16:	2300      	movs	r3, #0
 800bc18:	930b      	str	r3, [sp, #44]	; 0x2c
 800bc1a:	0033      	movs	r3, r6
 800bc1c:	3b01      	subs	r3, #1
 800bc1e:	930c      	str	r3, [sp, #48]	; 0x30
 800bc20:	d504      	bpl.n	800bc2c <_dtoa_r+0x1a8>
 800bc22:	2301      	movs	r3, #1
 800bc24:	1b9b      	subs	r3, r3, r6
 800bc26:	930b      	str	r3, [sp, #44]	; 0x2c
 800bc28:	2300      	movs	r3, #0
 800bc2a:	930c      	str	r3, [sp, #48]	; 0x30
 800bc2c:	9b03      	ldr	r3, [sp, #12]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	db38      	blt.n	800bca4 <_dtoa_r+0x220>
 800bc32:	9a03      	ldr	r2, [sp, #12]
 800bc34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bc36:	4694      	mov	ip, r2
 800bc38:	4463      	add	r3, ip
 800bc3a:	930c      	str	r3, [sp, #48]	; 0x30
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	920f      	str	r2, [sp, #60]	; 0x3c
 800bc40:	9308      	str	r3, [sp, #32]
 800bc42:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bc44:	2501      	movs	r5, #1
 800bc46:	2b09      	cmp	r3, #9
 800bc48:	d900      	bls.n	800bc4c <_dtoa_r+0x1c8>
 800bc4a:	e091      	b.n	800bd70 <_dtoa_r+0x2ec>
 800bc4c:	2b05      	cmp	r3, #5
 800bc4e:	dd02      	ble.n	800bc56 <_dtoa_r+0x1d2>
 800bc50:	2500      	movs	r5, #0
 800bc52:	3b04      	subs	r3, #4
 800bc54:	9322      	str	r3, [sp, #136]	; 0x88
 800bc56:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bc58:	1e98      	subs	r0, r3, #2
 800bc5a:	2803      	cmp	r0, #3
 800bc5c:	d900      	bls.n	800bc60 <_dtoa_r+0x1dc>
 800bc5e:	e091      	b.n	800bd84 <_dtoa_r+0x300>
 800bc60:	f7f4 fa5a 	bl	8000118 <__gnu_thumb1_case_uqi>
 800bc64:	76298482 	.word	0x76298482
 800bc68:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800bc6a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800bc6c:	189e      	adds	r6, r3, r2
 800bc6e:	4b64      	ldr	r3, [pc, #400]	; (800be00 <_dtoa_r+0x37c>)
 800bc70:	18f2      	adds	r2, r6, r3
 800bc72:	2a20      	cmp	r2, #32
 800bc74:	dd0f      	ble.n	800bc96 <_dtoa_r+0x212>
 800bc76:	4b63      	ldr	r3, [pc, #396]	; (800be04 <_dtoa_r+0x380>)
 800bc78:	9806      	ldr	r0, [sp, #24]
 800bc7a:	18f3      	adds	r3, r6, r3
 800bc7c:	40d8      	lsrs	r0, r3
 800bc7e:	2340      	movs	r3, #64	; 0x40
 800bc80:	1a9b      	subs	r3, r3, r2
 800bc82:	409c      	lsls	r4, r3
 800bc84:	4320      	orrs	r0, r4
 800bc86:	f7f6 fa7d 	bl	8002184 <__aeabi_ui2d>
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	4c5e      	ldr	r4, [pc, #376]	; (800be08 <_dtoa_r+0x384>)
 800bc8e:	3e01      	subs	r6, #1
 800bc90:	1909      	adds	r1, r1, r4
 800bc92:	9318      	str	r3, [sp, #96]	; 0x60
 800bc94:	e771      	b.n	800bb7a <_dtoa_r+0xf6>
 800bc96:	2320      	movs	r3, #32
 800bc98:	9806      	ldr	r0, [sp, #24]
 800bc9a:	1a9b      	subs	r3, r3, r2
 800bc9c:	4098      	lsls	r0, r3
 800bc9e:	e7f2      	b.n	800bc86 <_dtoa_r+0x202>
 800bca0:	9016      	str	r0, [sp, #88]	; 0x58
 800bca2:	e7b6      	b.n	800bc12 <_dtoa_r+0x18e>
 800bca4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bca6:	9a03      	ldr	r2, [sp, #12]
 800bca8:	1a9b      	subs	r3, r3, r2
 800bcaa:	930b      	str	r3, [sp, #44]	; 0x2c
 800bcac:	4253      	negs	r3, r2
 800bcae:	9308      	str	r3, [sp, #32]
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	930f      	str	r3, [sp, #60]	; 0x3c
 800bcb4:	e7c5      	b.n	800bc42 <_dtoa_r+0x1be>
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	930e      	str	r3, [sp, #56]	; 0x38
 800bcba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	dd65      	ble.n	800bd8c <_dtoa_r+0x308>
 800bcc0:	001f      	movs	r7, r3
 800bcc2:	930d      	str	r3, [sp, #52]	; 0x34
 800bcc4:	9a04      	ldr	r2, [sp, #16]
 800bcc6:	6a54      	ldr	r4, [r2, #36]	; 0x24
 800bcc8:	2200      	movs	r2, #0
 800bcca:	6062      	str	r2, [r4, #4]
 800bccc:	3204      	adds	r2, #4
 800bcce:	0011      	movs	r1, r2
 800bcd0:	3114      	adds	r1, #20
 800bcd2:	4299      	cmp	r1, r3
 800bcd4:	d95f      	bls.n	800bd96 <_dtoa_r+0x312>
 800bcd6:	6861      	ldr	r1, [r4, #4]
 800bcd8:	9804      	ldr	r0, [sp, #16]
 800bcda:	f000 fdee 	bl	800c8ba <_Balloc>
 800bcde:	9b04      	ldr	r3, [sp, #16]
 800bce0:	6020      	str	r0, [r4, #0]
 800bce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	930a      	str	r3, [sp, #40]	; 0x28
 800bce8:	2f0e      	cmp	r7, #14
 800bcea:	d900      	bls.n	800bcee <_dtoa_r+0x26a>
 800bcec:	e105      	b.n	800befa <_dtoa_r+0x476>
 800bcee:	2d00      	cmp	r5, #0
 800bcf0:	d100      	bne.n	800bcf4 <_dtoa_r+0x270>
 800bcf2:	e102      	b.n	800befa <_dtoa_r+0x476>
 800bcf4:	9b06      	ldr	r3, [sp, #24]
 800bcf6:	9c07      	ldr	r4, [sp, #28]
 800bcf8:	9314      	str	r3, [sp, #80]	; 0x50
 800bcfa:	9415      	str	r4, [sp, #84]	; 0x54
 800bcfc:	9b03      	ldr	r3, [sp, #12]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	dc00      	bgt.n	800bd04 <_dtoa_r+0x280>
 800bd02:	e085      	b.n	800be10 <_dtoa_r+0x38c>
 800bd04:	001a      	movs	r2, r3
 800bd06:	210f      	movs	r1, #15
 800bd08:	4b3c      	ldr	r3, [pc, #240]	; (800bdfc <_dtoa_r+0x378>)
 800bd0a:	400a      	ands	r2, r1
 800bd0c:	00d2      	lsls	r2, r2, #3
 800bd0e:	189b      	adds	r3, r3, r2
 800bd10:	685c      	ldr	r4, [r3, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	9310      	str	r3, [sp, #64]	; 0x40
 800bd16:	9411      	str	r4, [sp, #68]	; 0x44
 800bd18:	9b03      	ldr	r3, [sp, #12]
 800bd1a:	2402      	movs	r4, #2
 800bd1c:	111d      	asrs	r5, r3, #4
 800bd1e:	06eb      	lsls	r3, r5, #27
 800bd20:	d50a      	bpl.n	800bd38 <_dtoa_r+0x2b4>
 800bd22:	4b3a      	ldr	r3, [pc, #232]	; (800be0c <_dtoa_r+0x388>)
 800bd24:	400d      	ands	r5, r1
 800bd26:	6a1a      	ldr	r2, [r3, #32]
 800bd28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd2a:	9814      	ldr	r0, [sp, #80]	; 0x50
 800bd2c:	9915      	ldr	r1, [sp, #84]	; 0x54
 800bd2e:	f7f4 ffc9 	bl	8000cc4 <__aeabi_ddiv>
 800bd32:	9006      	str	r0, [sp, #24]
 800bd34:	9107      	str	r1, [sp, #28]
 800bd36:	3401      	adds	r4, #1
 800bd38:	4e34      	ldr	r6, [pc, #208]	; (800be0c <_dtoa_r+0x388>)
 800bd3a:	2d00      	cmp	r5, #0
 800bd3c:	d130      	bne.n	800bda0 <_dtoa_r+0x31c>
 800bd3e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bd40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bd42:	9806      	ldr	r0, [sp, #24]
 800bd44:	9907      	ldr	r1, [sp, #28]
 800bd46:	f7f4 ffbd 	bl	8000cc4 <__aeabi_ddiv>
 800bd4a:	9006      	str	r0, [sp, #24]
 800bd4c:	9107      	str	r1, [sp, #28]
 800bd4e:	e07a      	b.n	800be46 <_dtoa_r+0x3c2>
 800bd50:	2301      	movs	r3, #1
 800bd52:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800bd54:	930e      	str	r3, [sp, #56]	; 0x38
 800bd56:	4694      	mov	ip, r2
 800bd58:	9b03      	ldr	r3, [sp, #12]
 800bd5a:	4463      	add	r3, ip
 800bd5c:	1c5f      	adds	r7, r3, #1
 800bd5e:	930d      	str	r3, [sp, #52]	; 0x34
 800bd60:	1e3b      	subs	r3, r7, #0
 800bd62:	dcaf      	bgt.n	800bcc4 <_dtoa_r+0x240>
 800bd64:	2301      	movs	r3, #1
 800bd66:	e7ad      	b.n	800bcc4 <_dtoa_r+0x240>
 800bd68:	2300      	movs	r3, #0
 800bd6a:	e7a5      	b.n	800bcb8 <_dtoa_r+0x234>
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	e7f0      	b.n	800bd52 <_dtoa_r+0x2ce>
 800bd70:	2300      	movs	r3, #0
 800bd72:	950e      	str	r5, [sp, #56]	; 0x38
 800bd74:	9322      	str	r3, [sp, #136]	; 0x88
 800bd76:	3b01      	subs	r3, #1
 800bd78:	2200      	movs	r2, #0
 800bd7a:	930d      	str	r3, [sp, #52]	; 0x34
 800bd7c:	001f      	movs	r7, r3
 800bd7e:	3313      	adds	r3, #19
 800bd80:	9223      	str	r2, [sp, #140]	; 0x8c
 800bd82:	e79f      	b.n	800bcc4 <_dtoa_r+0x240>
 800bd84:	2301      	movs	r3, #1
 800bd86:	930e      	str	r3, [sp, #56]	; 0x38
 800bd88:	3b02      	subs	r3, #2
 800bd8a:	e7f5      	b.n	800bd78 <_dtoa_r+0x2f4>
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	930d      	str	r3, [sp, #52]	; 0x34
 800bd90:	001f      	movs	r7, r3
 800bd92:	001a      	movs	r2, r3
 800bd94:	e7f4      	b.n	800bd80 <_dtoa_r+0x2fc>
 800bd96:	6861      	ldr	r1, [r4, #4]
 800bd98:	0052      	lsls	r2, r2, #1
 800bd9a:	3101      	adds	r1, #1
 800bd9c:	6061      	str	r1, [r4, #4]
 800bd9e:	e796      	b.n	800bcce <_dtoa_r+0x24a>
 800bda0:	2301      	movs	r3, #1
 800bda2:	421d      	tst	r5, r3
 800bda4:	d008      	beq.n	800bdb8 <_dtoa_r+0x334>
 800bda6:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bda8:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bdaa:	18e4      	adds	r4, r4, r3
 800bdac:	6832      	ldr	r2, [r6, #0]
 800bdae:	6873      	ldr	r3, [r6, #4]
 800bdb0:	f7f5 fbbc 	bl	800152c <__aeabi_dmul>
 800bdb4:	9010      	str	r0, [sp, #64]	; 0x40
 800bdb6:	9111      	str	r1, [sp, #68]	; 0x44
 800bdb8:	106d      	asrs	r5, r5, #1
 800bdba:	3608      	adds	r6, #8
 800bdbc:	e7bd      	b.n	800bd3a <_dtoa_r+0x2b6>
 800bdbe:	46c0      	nop			; (mov r8, r8)
 800bdc0:	7ff00000 	.word	0x7ff00000
 800bdc4:	0000270f 	.word	0x0000270f
 800bdc8:	0800d936 	.word	0x0800d936
 800bdcc:	0800d939 	.word	0x0800d939
 800bdd0:	0800d90b 	.word	0x0800d90b
 800bdd4:	0800d90c 	.word	0x0800d90c
 800bdd8:	3ff00000 	.word	0x3ff00000
 800bddc:	fffffc01 	.word	0xfffffc01
 800bde0:	3ff80000 	.word	0x3ff80000
 800bde4:	636f4361 	.word	0x636f4361
 800bde8:	3fd287a7 	.word	0x3fd287a7
 800bdec:	8b60c8b3 	.word	0x8b60c8b3
 800bdf0:	3fc68a28 	.word	0x3fc68a28
 800bdf4:	509f79fb 	.word	0x509f79fb
 800bdf8:	3fd34413 	.word	0x3fd34413
 800bdfc:	0800d970 	.word	0x0800d970
 800be00:	00000432 	.word	0x00000432
 800be04:	00000412 	.word	0x00000412
 800be08:	fe100000 	.word	0xfe100000
 800be0c:	0800d948 	.word	0x0800d948
 800be10:	9b03      	ldr	r3, [sp, #12]
 800be12:	2402      	movs	r4, #2
 800be14:	2b00      	cmp	r3, #0
 800be16:	d016      	beq.n	800be46 <_dtoa_r+0x3c2>
 800be18:	9814      	ldr	r0, [sp, #80]	; 0x50
 800be1a:	9915      	ldr	r1, [sp, #84]	; 0x54
 800be1c:	425d      	negs	r5, r3
 800be1e:	230f      	movs	r3, #15
 800be20:	4aca      	ldr	r2, [pc, #808]	; (800c14c <_dtoa_r+0x6c8>)
 800be22:	402b      	ands	r3, r5
 800be24:	00db      	lsls	r3, r3, #3
 800be26:	18d3      	adds	r3, r2, r3
 800be28:	681a      	ldr	r2, [r3, #0]
 800be2a:	685b      	ldr	r3, [r3, #4]
 800be2c:	f7f5 fb7e 	bl	800152c <__aeabi_dmul>
 800be30:	2300      	movs	r3, #0
 800be32:	9006      	str	r0, [sp, #24]
 800be34:	9107      	str	r1, [sp, #28]
 800be36:	4ec6      	ldr	r6, [pc, #792]	; (800c150 <_dtoa_r+0x6cc>)
 800be38:	112d      	asrs	r5, r5, #4
 800be3a:	2d00      	cmp	r5, #0
 800be3c:	d000      	beq.n	800be40 <_dtoa_r+0x3bc>
 800be3e:	e08c      	b.n	800bf5a <_dtoa_r+0x4d6>
 800be40:	2b00      	cmp	r3, #0
 800be42:	d000      	beq.n	800be46 <_dtoa_r+0x3c2>
 800be44:	e781      	b.n	800bd4a <_dtoa_r+0x2c6>
 800be46:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d100      	bne.n	800be4e <_dtoa_r+0x3ca>
 800be4c:	e091      	b.n	800bf72 <_dtoa_r+0x4ee>
 800be4e:	9a06      	ldr	r2, [sp, #24]
 800be50:	9b07      	ldr	r3, [sp, #28]
 800be52:	9210      	str	r2, [sp, #64]	; 0x40
 800be54:	9311      	str	r3, [sp, #68]	; 0x44
 800be56:	9810      	ldr	r0, [sp, #64]	; 0x40
 800be58:	9911      	ldr	r1, [sp, #68]	; 0x44
 800be5a:	2200      	movs	r2, #0
 800be5c:	4bbd      	ldr	r3, [pc, #756]	; (800c154 <_dtoa_r+0x6d0>)
 800be5e:	f7f4 fafb 	bl	8000458 <__aeabi_dcmplt>
 800be62:	2800      	cmp	r0, #0
 800be64:	d100      	bne.n	800be68 <_dtoa_r+0x3e4>
 800be66:	e084      	b.n	800bf72 <_dtoa_r+0x4ee>
 800be68:	2f00      	cmp	r7, #0
 800be6a:	d100      	bne.n	800be6e <_dtoa_r+0x3ea>
 800be6c:	e081      	b.n	800bf72 <_dtoa_r+0x4ee>
 800be6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be70:	2b00      	cmp	r3, #0
 800be72:	dd3e      	ble.n	800bef2 <_dtoa_r+0x46e>
 800be74:	9810      	ldr	r0, [sp, #64]	; 0x40
 800be76:	9911      	ldr	r1, [sp, #68]	; 0x44
 800be78:	9b03      	ldr	r3, [sp, #12]
 800be7a:	2200      	movs	r2, #0
 800be7c:	1e5e      	subs	r6, r3, #1
 800be7e:	4bb6      	ldr	r3, [pc, #728]	; (800c158 <_dtoa_r+0x6d4>)
 800be80:	f7f5 fb54 	bl	800152c <__aeabi_dmul>
 800be84:	9006      	str	r0, [sp, #24]
 800be86:	9107      	str	r1, [sp, #28]
 800be88:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800be8a:	3401      	adds	r4, #1
 800be8c:	0020      	movs	r0, r4
 800be8e:	f7f6 f937 	bl	8002100 <__aeabi_i2d>
 800be92:	9a06      	ldr	r2, [sp, #24]
 800be94:	9b07      	ldr	r3, [sp, #28]
 800be96:	f7f5 fb49 	bl	800152c <__aeabi_dmul>
 800be9a:	2200      	movs	r2, #0
 800be9c:	4baf      	ldr	r3, [pc, #700]	; (800c15c <_dtoa_r+0x6d8>)
 800be9e:	f7f4 fc01 	bl	80006a4 <__aeabi_dadd>
 800bea2:	9012      	str	r0, [sp, #72]	; 0x48
 800bea4:	9113      	str	r1, [sp, #76]	; 0x4c
 800bea6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bea8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800beaa:	4aad      	ldr	r2, [pc, #692]	; (800c160 <_dtoa_r+0x6dc>)
 800beac:	9310      	str	r3, [sp, #64]	; 0x40
 800beae:	9411      	str	r4, [sp, #68]	; 0x44
 800beb0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800beb2:	189c      	adds	r4, r3, r2
 800beb4:	9411      	str	r4, [sp, #68]	; 0x44
 800beb6:	2d00      	cmp	r5, #0
 800beb8:	d15e      	bne.n	800bf78 <_dtoa_r+0x4f4>
 800beba:	9806      	ldr	r0, [sp, #24]
 800bebc:	9907      	ldr	r1, [sp, #28]
 800bebe:	2200      	movs	r2, #0
 800bec0:	4ba8      	ldr	r3, [pc, #672]	; (800c164 <_dtoa_r+0x6e0>)
 800bec2:	f7f5 fdb3 	bl	8001a2c <__aeabi_dsub>
 800bec6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bec8:	0023      	movs	r3, r4
 800beca:	9006      	str	r0, [sp, #24]
 800becc:	9107      	str	r1, [sp, #28]
 800bece:	f7f4 fad7 	bl	8000480 <__aeabi_dcmpgt>
 800bed2:	2800      	cmp	r0, #0
 800bed4:	d000      	beq.n	800bed8 <_dtoa_r+0x454>
 800bed6:	e301      	b.n	800c4dc <_dtoa_r+0xa58>
 800bed8:	48a3      	ldr	r0, [pc, #652]	; (800c168 <_dtoa_r+0x6e4>)
 800beda:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800bedc:	4684      	mov	ip, r0
 800bede:	4461      	add	r1, ip
 800bee0:	000b      	movs	r3, r1
 800bee2:	9806      	ldr	r0, [sp, #24]
 800bee4:	9907      	ldr	r1, [sp, #28]
 800bee6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bee8:	f7f4 fab6 	bl	8000458 <__aeabi_dcmplt>
 800beec:	2800      	cmp	r0, #0
 800beee:	d000      	beq.n	800bef2 <_dtoa_r+0x46e>
 800bef0:	e2e8      	b.n	800c4c4 <_dtoa_r+0xa40>
 800bef2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bef4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800bef6:	9306      	str	r3, [sp, #24]
 800bef8:	9407      	str	r4, [sp, #28]
 800befa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800befc:	2b00      	cmp	r3, #0
 800befe:	da00      	bge.n	800bf02 <_dtoa_r+0x47e>
 800bf00:	e157      	b.n	800c1b2 <_dtoa_r+0x72e>
 800bf02:	9a03      	ldr	r2, [sp, #12]
 800bf04:	2a0e      	cmp	r2, #14
 800bf06:	dd00      	ble.n	800bf0a <_dtoa_r+0x486>
 800bf08:	e153      	b.n	800c1b2 <_dtoa_r+0x72e>
 800bf0a:	4b90      	ldr	r3, [pc, #576]	; (800c14c <_dtoa_r+0x6c8>)
 800bf0c:	00d2      	lsls	r2, r2, #3
 800bf0e:	189b      	adds	r3, r3, r2
 800bf10:	685c      	ldr	r4, [r3, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	9308      	str	r3, [sp, #32]
 800bf16:	9409      	str	r4, [sp, #36]	; 0x24
 800bf18:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	db00      	blt.n	800bf20 <_dtoa_r+0x49c>
 800bf1e:	e0ce      	b.n	800c0be <_dtoa_r+0x63a>
 800bf20:	2f00      	cmp	r7, #0
 800bf22:	dd00      	ble.n	800bf26 <_dtoa_r+0x4a2>
 800bf24:	e0cb      	b.n	800c0be <_dtoa_r+0x63a>
 800bf26:	d000      	beq.n	800bf2a <_dtoa_r+0x4a6>
 800bf28:	e2cf      	b.n	800c4ca <_dtoa_r+0xa46>
 800bf2a:	9808      	ldr	r0, [sp, #32]
 800bf2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bf2e:	2200      	movs	r2, #0
 800bf30:	4b8c      	ldr	r3, [pc, #560]	; (800c164 <_dtoa_r+0x6e0>)
 800bf32:	f7f5 fafb 	bl	800152c <__aeabi_dmul>
 800bf36:	9a06      	ldr	r2, [sp, #24]
 800bf38:	9b07      	ldr	r3, [sp, #28]
 800bf3a:	f7f4 faab 	bl	8000494 <__aeabi_dcmpge>
 800bf3e:	003e      	movs	r6, r7
 800bf40:	9708      	str	r7, [sp, #32]
 800bf42:	2800      	cmp	r0, #0
 800bf44:	d000      	beq.n	800bf48 <_dtoa_r+0x4c4>
 800bf46:	e2a4      	b.n	800c492 <_dtoa_r+0xa0e>
 800bf48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf4c:	1c5d      	adds	r5, r3, #1
 800bf4e:	2331      	movs	r3, #49	; 0x31
 800bf50:	7013      	strb	r3, [r2, #0]
 800bf52:	9b03      	ldr	r3, [sp, #12]
 800bf54:	3301      	adds	r3, #1
 800bf56:	9303      	str	r3, [sp, #12]
 800bf58:	e29f      	b.n	800c49a <_dtoa_r+0xa16>
 800bf5a:	2201      	movs	r2, #1
 800bf5c:	4215      	tst	r5, r2
 800bf5e:	d005      	beq.n	800bf6c <_dtoa_r+0x4e8>
 800bf60:	18a4      	adds	r4, r4, r2
 800bf62:	6832      	ldr	r2, [r6, #0]
 800bf64:	6873      	ldr	r3, [r6, #4]
 800bf66:	f7f5 fae1 	bl	800152c <__aeabi_dmul>
 800bf6a:	2301      	movs	r3, #1
 800bf6c:	106d      	asrs	r5, r5, #1
 800bf6e:	3608      	adds	r6, #8
 800bf70:	e763      	b.n	800be3a <_dtoa_r+0x3b6>
 800bf72:	9e03      	ldr	r6, [sp, #12]
 800bf74:	003d      	movs	r5, r7
 800bf76:	e789      	b.n	800be8c <_dtoa_r+0x408>
 800bf78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf7a:	1e69      	subs	r1, r5, #1
 800bf7c:	1952      	adds	r2, r2, r5
 800bf7e:	9217      	str	r2, [sp, #92]	; 0x5c
 800bf80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bf82:	4b72      	ldr	r3, [pc, #456]	; (800c14c <_dtoa_r+0x6c8>)
 800bf84:	00c9      	lsls	r1, r1, #3
 800bf86:	2a00      	cmp	r2, #0
 800bf88:	d04a      	beq.n	800c020 <_dtoa_r+0x59c>
 800bf8a:	185b      	adds	r3, r3, r1
 800bf8c:	681a      	ldr	r2, [r3, #0]
 800bf8e:	685b      	ldr	r3, [r3, #4]
 800bf90:	2000      	movs	r0, #0
 800bf92:	4976      	ldr	r1, [pc, #472]	; (800c16c <_dtoa_r+0x6e8>)
 800bf94:	f7f4 fe96 	bl	8000cc4 <__aeabi_ddiv>
 800bf98:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bf9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bf9c:	f7f5 fd46 	bl	8001a2c <__aeabi_dsub>
 800bfa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfa2:	9010      	str	r0, [sp, #64]	; 0x40
 800bfa4:	9111      	str	r1, [sp, #68]	; 0x44
 800bfa6:	9312      	str	r3, [sp, #72]	; 0x48
 800bfa8:	9806      	ldr	r0, [sp, #24]
 800bfaa:	9907      	ldr	r1, [sp, #28]
 800bfac:	f7f6 f874 	bl	8002098 <__aeabi_d2iz>
 800bfb0:	0004      	movs	r4, r0
 800bfb2:	f7f6 f8a5 	bl	8002100 <__aeabi_i2d>
 800bfb6:	0002      	movs	r2, r0
 800bfb8:	000b      	movs	r3, r1
 800bfba:	9806      	ldr	r0, [sp, #24]
 800bfbc:	9907      	ldr	r1, [sp, #28]
 800bfbe:	f7f5 fd35 	bl	8001a2c <__aeabi_dsub>
 800bfc2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bfc4:	3430      	adds	r4, #48	; 0x30
 800bfc6:	1c5d      	adds	r5, r3, #1
 800bfc8:	701c      	strb	r4, [r3, #0]
 800bfca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bfcc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bfce:	9006      	str	r0, [sp, #24]
 800bfd0:	9107      	str	r1, [sp, #28]
 800bfd2:	f7f4 fa41 	bl	8000458 <__aeabi_dcmplt>
 800bfd6:	2800      	cmp	r0, #0
 800bfd8:	d165      	bne.n	800c0a6 <_dtoa_r+0x622>
 800bfda:	9a06      	ldr	r2, [sp, #24]
 800bfdc:	9b07      	ldr	r3, [sp, #28]
 800bfde:	2000      	movs	r0, #0
 800bfe0:	495c      	ldr	r1, [pc, #368]	; (800c154 <_dtoa_r+0x6d0>)
 800bfe2:	f7f5 fd23 	bl	8001a2c <__aeabi_dsub>
 800bfe6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bfe8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bfea:	f7f4 fa35 	bl	8000458 <__aeabi_dcmplt>
 800bfee:	2800      	cmp	r0, #0
 800bff0:	d000      	beq.n	800bff4 <_dtoa_r+0x570>
 800bff2:	e0be      	b.n	800c172 <_dtoa_r+0x6ee>
 800bff4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bff6:	429d      	cmp	r5, r3
 800bff8:	d100      	bne.n	800bffc <_dtoa_r+0x578>
 800bffa:	e77a      	b.n	800bef2 <_dtoa_r+0x46e>
 800bffc:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bffe:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c000:	2200      	movs	r2, #0
 800c002:	4b55      	ldr	r3, [pc, #340]	; (800c158 <_dtoa_r+0x6d4>)
 800c004:	f7f5 fa92 	bl	800152c <__aeabi_dmul>
 800c008:	2200      	movs	r2, #0
 800c00a:	9010      	str	r0, [sp, #64]	; 0x40
 800c00c:	9111      	str	r1, [sp, #68]	; 0x44
 800c00e:	9806      	ldr	r0, [sp, #24]
 800c010:	9907      	ldr	r1, [sp, #28]
 800c012:	4b51      	ldr	r3, [pc, #324]	; (800c158 <_dtoa_r+0x6d4>)
 800c014:	f7f5 fa8a 	bl	800152c <__aeabi_dmul>
 800c018:	9512      	str	r5, [sp, #72]	; 0x48
 800c01a:	9006      	str	r0, [sp, #24]
 800c01c:	9107      	str	r1, [sp, #28]
 800c01e:	e7c3      	b.n	800bfa8 <_dtoa_r+0x524>
 800c020:	1859      	adds	r1, r3, r1
 800c022:	6808      	ldr	r0, [r1, #0]
 800c024:	6849      	ldr	r1, [r1, #4]
 800c026:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c028:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c02a:	f7f5 fa7f 	bl	800152c <__aeabi_dmul>
 800c02e:	9010      	str	r0, [sp, #64]	; 0x40
 800c030:	9111      	str	r1, [sp, #68]	; 0x44
 800c032:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c034:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800c036:	9806      	ldr	r0, [sp, #24]
 800c038:	9907      	ldr	r1, [sp, #28]
 800c03a:	f7f6 f82d 	bl	8002098 <__aeabi_d2iz>
 800c03e:	9012      	str	r0, [sp, #72]	; 0x48
 800c040:	f7f6 f85e 	bl	8002100 <__aeabi_i2d>
 800c044:	0002      	movs	r2, r0
 800c046:	000b      	movs	r3, r1
 800c048:	9806      	ldr	r0, [sp, #24]
 800c04a:	9907      	ldr	r1, [sp, #28]
 800c04c:	f7f5 fcee 	bl	8001a2c <__aeabi_dsub>
 800c050:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c052:	9006      	str	r0, [sp, #24]
 800c054:	9107      	str	r1, [sp, #28]
 800c056:	3330      	adds	r3, #48	; 0x30
 800c058:	7023      	strb	r3, [r4, #0]
 800c05a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c05c:	3401      	adds	r4, #1
 800c05e:	2200      	movs	r2, #0
 800c060:	42a3      	cmp	r3, r4
 800c062:	d124      	bne.n	800c0ae <_dtoa_r+0x62a>
 800c064:	4b41      	ldr	r3, [pc, #260]	; (800c16c <_dtoa_r+0x6e8>)
 800c066:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c068:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c06a:	f7f4 fb1b 	bl	80006a4 <__aeabi_dadd>
 800c06e:	0002      	movs	r2, r0
 800c070:	000b      	movs	r3, r1
 800c072:	9806      	ldr	r0, [sp, #24]
 800c074:	9907      	ldr	r1, [sp, #28]
 800c076:	f7f4 fa03 	bl	8000480 <__aeabi_dcmpgt>
 800c07a:	2800      	cmp	r0, #0
 800c07c:	d000      	beq.n	800c080 <_dtoa_r+0x5fc>
 800c07e:	e078      	b.n	800c172 <_dtoa_r+0x6ee>
 800c080:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c082:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c084:	2000      	movs	r0, #0
 800c086:	4939      	ldr	r1, [pc, #228]	; (800c16c <_dtoa_r+0x6e8>)
 800c088:	f7f5 fcd0 	bl	8001a2c <__aeabi_dsub>
 800c08c:	0002      	movs	r2, r0
 800c08e:	000b      	movs	r3, r1
 800c090:	9806      	ldr	r0, [sp, #24]
 800c092:	9907      	ldr	r1, [sp, #28]
 800c094:	f7f4 f9e0 	bl	8000458 <__aeabi_dcmplt>
 800c098:	2800      	cmp	r0, #0
 800c09a:	d100      	bne.n	800c09e <_dtoa_r+0x61a>
 800c09c:	e729      	b.n	800bef2 <_dtoa_r+0x46e>
 800c09e:	1e6b      	subs	r3, r5, #1
 800c0a0:	781a      	ldrb	r2, [r3, #0]
 800c0a2:	2a30      	cmp	r2, #48	; 0x30
 800c0a4:	d001      	beq.n	800c0aa <_dtoa_r+0x626>
 800c0a6:	9603      	str	r6, [sp, #12]
 800c0a8:	e03f      	b.n	800c12a <_dtoa_r+0x6a6>
 800c0aa:	001d      	movs	r5, r3
 800c0ac:	e7f7      	b.n	800c09e <_dtoa_r+0x61a>
 800c0ae:	9806      	ldr	r0, [sp, #24]
 800c0b0:	9907      	ldr	r1, [sp, #28]
 800c0b2:	4b29      	ldr	r3, [pc, #164]	; (800c158 <_dtoa_r+0x6d4>)
 800c0b4:	f7f5 fa3a 	bl	800152c <__aeabi_dmul>
 800c0b8:	9006      	str	r0, [sp, #24]
 800c0ba:	9107      	str	r1, [sp, #28]
 800c0bc:	e7bb      	b.n	800c036 <_dtoa_r+0x5b2>
 800c0be:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800c0c0:	9a08      	ldr	r2, [sp, #32]
 800c0c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0c4:	9806      	ldr	r0, [sp, #24]
 800c0c6:	9907      	ldr	r1, [sp, #28]
 800c0c8:	f7f4 fdfc 	bl	8000cc4 <__aeabi_ddiv>
 800c0cc:	f7f5 ffe4 	bl	8002098 <__aeabi_d2iz>
 800c0d0:	0004      	movs	r4, r0
 800c0d2:	f7f6 f815 	bl	8002100 <__aeabi_i2d>
 800c0d6:	9a08      	ldr	r2, [sp, #32]
 800c0d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0da:	f7f5 fa27 	bl	800152c <__aeabi_dmul>
 800c0de:	000b      	movs	r3, r1
 800c0e0:	0002      	movs	r2, r0
 800c0e2:	9806      	ldr	r0, [sp, #24]
 800c0e4:	9907      	ldr	r1, [sp, #28]
 800c0e6:	f7f5 fca1 	bl	8001a2c <__aeabi_dsub>
 800c0ea:	0023      	movs	r3, r4
 800c0ec:	3330      	adds	r3, #48	; 0x30
 800c0ee:	7033      	strb	r3, [r6, #0]
 800c0f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0f2:	1c75      	adds	r5, r6, #1
 800c0f4:	1aeb      	subs	r3, r5, r3
 800c0f6:	429f      	cmp	r7, r3
 800c0f8:	d14c      	bne.n	800c194 <_dtoa_r+0x710>
 800c0fa:	0002      	movs	r2, r0
 800c0fc:	000b      	movs	r3, r1
 800c0fe:	f7f4 fad1 	bl	80006a4 <__aeabi_dadd>
 800c102:	0006      	movs	r6, r0
 800c104:	000f      	movs	r7, r1
 800c106:	0002      	movs	r2, r0
 800c108:	000b      	movs	r3, r1
 800c10a:	9808      	ldr	r0, [sp, #32]
 800c10c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c10e:	f7f4 f9a3 	bl	8000458 <__aeabi_dcmplt>
 800c112:	2800      	cmp	r0, #0
 800c114:	d12c      	bne.n	800c170 <_dtoa_r+0x6ec>
 800c116:	9808      	ldr	r0, [sp, #32]
 800c118:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c11a:	0032      	movs	r2, r6
 800c11c:	003b      	movs	r3, r7
 800c11e:	f7f4 f995 	bl	800044c <__aeabi_dcmpeq>
 800c122:	2800      	cmp	r0, #0
 800c124:	d001      	beq.n	800c12a <_dtoa_r+0x6a6>
 800c126:	07e3      	lsls	r3, r4, #31
 800c128:	d422      	bmi.n	800c170 <_dtoa_r+0x6ec>
 800c12a:	9905      	ldr	r1, [sp, #20]
 800c12c:	9804      	ldr	r0, [sp, #16]
 800c12e:	f000 fbfc 	bl	800c92a <_Bfree>
 800c132:	2300      	movs	r3, #0
 800c134:	702b      	strb	r3, [r5, #0]
 800c136:	9b03      	ldr	r3, [sp, #12]
 800c138:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c13a:	3301      	adds	r3, #1
 800c13c:	6013      	str	r3, [r2, #0]
 800c13e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c140:	2b00      	cmp	r3, #0
 800c142:	d100      	bne.n	800c146 <_dtoa_r+0x6c2>
 800c144:	e275      	b.n	800c632 <_dtoa_r+0xbae>
 800c146:	601d      	str	r5, [r3, #0]
 800c148:	e273      	b.n	800c632 <_dtoa_r+0xbae>
 800c14a:	46c0      	nop			; (mov r8, r8)
 800c14c:	0800d970 	.word	0x0800d970
 800c150:	0800d948 	.word	0x0800d948
 800c154:	3ff00000 	.word	0x3ff00000
 800c158:	40240000 	.word	0x40240000
 800c15c:	401c0000 	.word	0x401c0000
 800c160:	fcc00000 	.word	0xfcc00000
 800c164:	40140000 	.word	0x40140000
 800c168:	7cc00000 	.word	0x7cc00000
 800c16c:	3fe00000 	.word	0x3fe00000
 800c170:	9e03      	ldr	r6, [sp, #12]
 800c172:	1e6b      	subs	r3, r5, #1
 800c174:	781a      	ldrb	r2, [r3, #0]
 800c176:	2a39      	cmp	r2, #57	; 0x39
 800c178:	d106      	bne.n	800c188 <_dtoa_r+0x704>
 800c17a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c17c:	429a      	cmp	r2, r3
 800c17e:	d107      	bne.n	800c190 <_dtoa_r+0x70c>
 800c180:	2330      	movs	r3, #48	; 0x30
 800c182:	7013      	strb	r3, [r2, #0]
 800c184:	0013      	movs	r3, r2
 800c186:	3601      	adds	r6, #1
 800c188:	781a      	ldrb	r2, [r3, #0]
 800c18a:	3201      	adds	r2, #1
 800c18c:	701a      	strb	r2, [r3, #0]
 800c18e:	e78a      	b.n	800c0a6 <_dtoa_r+0x622>
 800c190:	001d      	movs	r5, r3
 800c192:	e7ee      	b.n	800c172 <_dtoa_r+0x6ee>
 800c194:	2200      	movs	r2, #0
 800c196:	4bcf      	ldr	r3, [pc, #828]	; (800c4d4 <_dtoa_r+0xa50>)
 800c198:	f7f5 f9c8 	bl	800152c <__aeabi_dmul>
 800c19c:	2200      	movs	r2, #0
 800c19e:	2300      	movs	r3, #0
 800c1a0:	9006      	str	r0, [sp, #24]
 800c1a2:	9107      	str	r1, [sp, #28]
 800c1a4:	002e      	movs	r6, r5
 800c1a6:	f7f4 f951 	bl	800044c <__aeabi_dcmpeq>
 800c1aa:	2800      	cmp	r0, #0
 800c1ac:	d100      	bne.n	800c1b0 <_dtoa_r+0x72c>
 800c1ae:	e787      	b.n	800c0c0 <_dtoa_r+0x63c>
 800c1b0:	e7bb      	b.n	800c12a <_dtoa_r+0x6a6>
 800c1b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c1b4:	2a00      	cmp	r2, #0
 800c1b6:	d100      	bne.n	800c1ba <_dtoa_r+0x736>
 800c1b8:	e087      	b.n	800c2ca <_dtoa_r+0x846>
 800c1ba:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c1bc:	2a01      	cmp	r2, #1
 800c1be:	dc6e      	bgt.n	800c29e <_dtoa_r+0x81a>
 800c1c0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c1c2:	2a00      	cmp	r2, #0
 800c1c4:	d067      	beq.n	800c296 <_dtoa_r+0x812>
 800c1c6:	4ac4      	ldr	r2, [pc, #784]	; (800c4d8 <_dtoa_r+0xa54>)
 800c1c8:	189b      	adds	r3, r3, r2
 800c1ca:	9d08      	ldr	r5, [sp, #32]
 800c1cc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800c1ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c1d0:	2101      	movs	r1, #1
 800c1d2:	18d2      	adds	r2, r2, r3
 800c1d4:	920b      	str	r2, [sp, #44]	; 0x2c
 800c1d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c1d8:	9804      	ldr	r0, [sp, #16]
 800c1da:	18d3      	adds	r3, r2, r3
 800c1dc:	930c      	str	r3, [sp, #48]	; 0x30
 800c1de:	f000 fc42 	bl	800ca66 <__i2b>
 800c1e2:	0006      	movs	r6, r0
 800c1e4:	2c00      	cmp	r4, #0
 800c1e6:	dd0e      	ble.n	800c206 <_dtoa_r+0x782>
 800c1e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	dd0b      	ble.n	800c206 <_dtoa_r+0x782>
 800c1ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c1f0:	0023      	movs	r3, r4
 800c1f2:	4294      	cmp	r4, r2
 800c1f4:	dd00      	ble.n	800c1f8 <_dtoa_r+0x774>
 800c1f6:	0013      	movs	r3, r2
 800c1f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c1fa:	1ae4      	subs	r4, r4, r3
 800c1fc:	1ad2      	subs	r2, r2, r3
 800c1fe:	920b      	str	r2, [sp, #44]	; 0x2c
 800c200:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c202:	1ad3      	subs	r3, r2, r3
 800c204:	930c      	str	r3, [sp, #48]	; 0x30
 800c206:	9b08      	ldr	r3, [sp, #32]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d01e      	beq.n	800c24a <_dtoa_r+0x7c6>
 800c20c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d05f      	beq.n	800c2d2 <_dtoa_r+0x84e>
 800c212:	2d00      	cmp	r5, #0
 800c214:	dd11      	ble.n	800c23a <_dtoa_r+0x7b6>
 800c216:	0031      	movs	r1, r6
 800c218:	002a      	movs	r2, r5
 800c21a:	9804      	ldr	r0, [sp, #16]
 800c21c:	f000 fcbc 	bl	800cb98 <__pow5mult>
 800c220:	9a05      	ldr	r2, [sp, #20]
 800c222:	0001      	movs	r1, r0
 800c224:	0006      	movs	r6, r0
 800c226:	9804      	ldr	r0, [sp, #16]
 800c228:	f000 fc26 	bl	800ca78 <__multiply>
 800c22c:	9905      	ldr	r1, [sp, #20]
 800c22e:	9010      	str	r0, [sp, #64]	; 0x40
 800c230:	9804      	ldr	r0, [sp, #16]
 800c232:	f000 fb7a 	bl	800c92a <_Bfree>
 800c236:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c238:	9305      	str	r3, [sp, #20]
 800c23a:	9b08      	ldr	r3, [sp, #32]
 800c23c:	1b5a      	subs	r2, r3, r5
 800c23e:	d004      	beq.n	800c24a <_dtoa_r+0x7c6>
 800c240:	9905      	ldr	r1, [sp, #20]
 800c242:	9804      	ldr	r0, [sp, #16]
 800c244:	f000 fca8 	bl	800cb98 <__pow5mult>
 800c248:	9005      	str	r0, [sp, #20]
 800c24a:	2101      	movs	r1, #1
 800c24c:	9804      	ldr	r0, [sp, #16]
 800c24e:	f000 fc0a 	bl	800ca66 <__i2b>
 800c252:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c254:	9008      	str	r0, [sp, #32]
 800c256:	2b00      	cmp	r3, #0
 800c258:	dd3d      	ble.n	800c2d6 <_dtoa_r+0x852>
 800c25a:	001a      	movs	r2, r3
 800c25c:	0001      	movs	r1, r0
 800c25e:	9804      	ldr	r0, [sp, #16]
 800c260:	f000 fc9a 	bl	800cb98 <__pow5mult>
 800c264:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c266:	9008      	str	r0, [sp, #32]
 800c268:	2500      	movs	r5, #0
 800c26a:	2b01      	cmp	r3, #1
 800c26c:	dc3b      	bgt.n	800c2e6 <_dtoa_r+0x862>
 800c26e:	2500      	movs	r5, #0
 800c270:	9b06      	ldr	r3, [sp, #24]
 800c272:	42ab      	cmp	r3, r5
 800c274:	d133      	bne.n	800c2de <_dtoa_r+0x85a>
 800c276:	9b07      	ldr	r3, [sp, #28]
 800c278:	031b      	lsls	r3, r3, #12
 800c27a:	42ab      	cmp	r3, r5
 800c27c:	d12f      	bne.n	800c2de <_dtoa_r+0x85a>
 800c27e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c280:	9a07      	ldr	r2, [sp, #28]
 800c282:	4213      	tst	r3, r2
 800c284:	d02b      	beq.n	800c2de <_dtoa_r+0x85a>
 800c286:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c288:	3501      	adds	r5, #1
 800c28a:	3301      	adds	r3, #1
 800c28c:	930b      	str	r3, [sp, #44]	; 0x2c
 800c28e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c290:	3301      	adds	r3, #1
 800c292:	930c      	str	r3, [sp, #48]	; 0x30
 800c294:	e023      	b.n	800c2de <_dtoa_r+0x85a>
 800c296:	2336      	movs	r3, #54	; 0x36
 800c298:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c29a:	1a9b      	subs	r3, r3, r2
 800c29c:	e795      	b.n	800c1ca <_dtoa_r+0x746>
 800c29e:	9b08      	ldr	r3, [sp, #32]
 800c2a0:	1e7d      	subs	r5, r7, #1
 800c2a2:	42ab      	cmp	r3, r5
 800c2a4:	db06      	blt.n	800c2b4 <_dtoa_r+0x830>
 800c2a6:	1b5d      	subs	r5, r3, r5
 800c2a8:	2f00      	cmp	r7, #0
 800c2aa:	da0b      	bge.n	800c2c4 <_dtoa_r+0x840>
 800c2ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c2ae:	1bdc      	subs	r4, r3, r7
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	e78c      	b.n	800c1ce <_dtoa_r+0x74a>
 800c2b4:	9b08      	ldr	r3, [sp, #32]
 800c2b6:	9508      	str	r5, [sp, #32]
 800c2b8:	1aea      	subs	r2, r5, r3
 800c2ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c2bc:	2500      	movs	r5, #0
 800c2be:	189b      	adds	r3, r3, r2
 800c2c0:	930f      	str	r3, [sp, #60]	; 0x3c
 800c2c2:	e7f1      	b.n	800c2a8 <_dtoa_r+0x824>
 800c2c4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800c2c6:	003b      	movs	r3, r7
 800c2c8:	e781      	b.n	800c1ce <_dtoa_r+0x74a>
 800c2ca:	9d08      	ldr	r5, [sp, #32]
 800c2cc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800c2ce:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800c2d0:	e788      	b.n	800c1e4 <_dtoa_r+0x760>
 800c2d2:	9a08      	ldr	r2, [sp, #32]
 800c2d4:	e7b4      	b.n	800c240 <_dtoa_r+0x7bc>
 800c2d6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c2d8:	2500      	movs	r5, #0
 800c2da:	2b01      	cmp	r3, #1
 800c2dc:	ddc7      	ble.n	800c26e <_dtoa_r+0x7ea>
 800c2de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c2e0:	2001      	movs	r0, #1
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d00b      	beq.n	800c2fe <_dtoa_r+0x87a>
 800c2e6:	9b08      	ldr	r3, [sp, #32]
 800c2e8:	9a08      	ldr	r2, [sp, #32]
 800c2ea:	691b      	ldr	r3, [r3, #16]
 800c2ec:	930f      	str	r3, [sp, #60]	; 0x3c
 800c2ee:	3303      	adds	r3, #3
 800c2f0:	009b      	lsls	r3, r3, #2
 800c2f2:	18d3      	adds	r3, r2, r3
 800c2f4:	6858      	ldr	r0, [r3, #4]
 800c2f6:	f000 fb6d 	bl	800c9d4 <__hi0bits>
 800c2fa:	2320      	movs	r3, #32
 800c2fc:	1a18      	subs	r0, r3, r0
 800c2fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c300:	18c0      	adds	r0, r0, r3
 800c302:	231f      	movs	r3, #31
 800c304:	4018      	ands	r0, r3
 800c306:	d100      	bne.n	800c30a <_dtoa_r+0x886>
 800c308:	e0ab      	b.n	800c462 <_dtoa_r+0x9de>
 800c30a:	3301      	adds	r3, #1
 800c30c:	1a1b      	subs	r3, r3, r0
 800c30e:	2b04      	cmp	r3, #4
 800c310:	dc00      	bgt.n	800c314 <_dtoa_r+0x890>
 800c312:	e09b      	b.n	800c44c <_dtoa_r+0x9c8>
 800c314:	231c      	movs	r3, #28
 800c316:	1a18      	subs	r0, r3, r0
 800c318:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c31a:	1824      	adds	r4, r4, r0
 800c31c:	181b      	adds	r3, r3, r0
 800c31e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c320:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c322:	181b      	adds	r3, r3, r0
 800c324:	930c      	str	r3, [sp, #48]	; 0x30
 800c326:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c328:	2b00      	cmp	r3, #0
 800c32a:	dd05      	ble.n	800c338 <_dtoa_r+0x8b4>
 800c32c:	001a      	movs	r2, r3
 800c32e:	9905      	ldr	r1, [sp, #20]
 800c330:	9804      	ldr	r0, [sp, #16]
 800c332:	f000 fc83 	bl	800cc3c <__lshift>
 800c336:	9005      	str	r0, [sp, #20]
 800c338:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	dd05      	ble.n	800c34a <_dtoa_r+0x8c6>
 800c33e:	001a      	movs	r2, r3
 800c340:	9908      	ldr	r1, [sp, #32]
 800c342:	9804      	ldr	r0, [sp, #16]
 800c344:	f000 fc7a 	bl	800cc3c <__lshift>
 800c348:	9008      	str	r0, [sp, #32]
 800c34a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d100      	bne.n	800c352 <_dtoa_r+0x8ce>
 800c350:	e089      	b.n	800c466 <_dtoa_r+0x9e2>
 800c352:	9908      	ldr	r1, [sp, #32]
 800c354:	9805      	ldr	r0, [sp, #20]
 800c356:	f000 fcc2 	bl	800ccde <__mcmp>
 800c35a:	2800      	cmp	r0, #0
 800c35c:	db00      	blt.n	800c360 <_dtoa_r+0x8dc>
 800c35e:	e082      	b.n	800c466 <_dtoa_r+0x9e2>
 800c360:	9b03      	ldr	r3, [sp, #12]
 800c362:	220a      	movs	r2, #10
 800c364:	3b01      	subs	r3, #1
 800c366:	9303      	str	r3, [sp, #12]
 800c368:	9905      	ldr	r1, [sp, #20]
 800c36a:	2300      	movs	r3, #0
 800c36c:	9804      	ldr	r0, [sp, #16]
 800c36e:	f000 faf5 	bl	800c95c <__multadd>
 800c372:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c374:	9005      	str	r0, [sp, #20]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d100      	bne.n	800c37c <_dtoa_r+0x8f8>
 800c37a:	e15d      	b.n	800c638 <_dtoa_r+0xbb4>
 800c37c:	2300      	movs	r3, #0
 800c37e:	0031      	movs	r1, r6
 800c380:	220a      	movs	r2, #10
 800c382:	9804      	ldr	r0, [sp, #16]
 800c384:	f000 faea 	bl	800c95c <__multadd>
 800c388:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c38a:	0006      	movs	r6, r0
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	dc02      	bgt.n	800c396 <_dtoa_r+0x912>
 800c390:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c392:	2b02      	cmp	r3, #2
 800c394:	dc6d      	bgt.n	800c472 <_dtoa_r+0x9ee>
 800c396:	2c00      	cmp	r4, #0
 800c398:	dd05      	ble.n	800c3a6 <_dtoa_r+0x922>
 800c39a:	0031      	movs	r1, r6
 800c39c:	0022      	movs	r2, r4
 800c39e:	9804      	ldr	r0, [sp, #16]
 800c3a0:	f000 fc4c 	bl	800cc3c <__lshift>
 800c3a4:	0006      	movs	r6, r0
 800c3a6:	0030      	movs	r0, r6
 800c3a8:	2d00      	cmp	r5, #0
 800c3aa:	d011      	beq.n	800c3d0 <_dtoa_r+0x94c>
 800c3ac:	6871      	ldr	r1, [r6, #4]
 800c3ae:	9804      	ldr	r0, [sp, #16]
 800c3b0:	f000 fa83 	bl	800c8ba <_Balloc>
 800c3b4:	0031      	movs	r1, r6
 800c3b6:	0004      	movs	r4, r0
 800c3b8:	6933      	ldr	r3, [r6, #16]
 800c3ba:	310c      	adds	r1, #12
 800c3bc:	1c9a      	adds	r2, r3, #2
 800c3be:	0092      	lsls	r2, r2, #2
 800c3c0:	300c      	adds	r0, #12
 800c3c2:	f7fe f9b5 	bl	800a730 <memcpy>
 800c3c6:	2201      	movs	r2, #1
 800c3c8:	0021      	movs	r1, r4
 800c3ca:	9804      	ldr	r0, [sp, #16]
 800c3cc:	f000 fc36 	bl	800cc3c <__lshift>
 800c3d0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800c3d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3d4:	3f01      	subs	r7, #1
 800c3d6:	930b      	str	r3, [sp, #44]	; 0x2c
 800c3d8:	19db      	adds	r3, r3, r7
 800c3da:	0037      	movs	r7, r6
 800c3dc:	0006      	movs	r6, r0
 800c3de:	930f      	str	r3, [sp, #60]	; 0x3c
 800c3e0:	9908      	ldr	r1, [sp, #32]
 800c3e2:	9805      	ldr	r0, [sp, #20]
 800c3e4:	f7ff faca 	bl	800b97c <quorem>
 800c3e8:	0039      	movs	r1, r7
 800c3ea:	900d      	str	r0, [sp, #52]	; 0x34
 800c3ec:	0004      	movs	r4, r0
 800c3ee:	9805      	ldr	r0, [sp, #20]
 800c3f0:	f000 fc75 	bl	800ccde <__mcmp>
 800c3f4:	0032      	movs	r2, r6
 800c3f6:	900e      	str	r0, [sp, #56]	; 0x38
 800c3f8:	9908      	ldr	r1, [sp, #32]
 800c3fa:	9804      	ldr	r0, [sp, #16]
 800c3fc:	f000 fc88 	bl	800cd10 <__mdiff>
 800c400:	2301      	movs	r3, #1
 800c402:	930c      	str	r3, [sp, #48]	; 0x30
 800c404:	68c3      	ldr	r3, [r0, #12]
 800c406:	3430      	adds	r4, #48	; 0x30
 800c408:	0005      	movs	r5, r0
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d104      	bne.n	800c418 <_dtoa_r+0x994>
 800c40e:	0001      	movs	r1, r0
 800c410:	9805      	ldr	r0, [sp, #20]
 800c412:	f000 fc64 	bl	800ccde <__mcmp>
 800c416:	900c      	str	r0, [sp, #48]	; 0x30
 800c418:	0029      	movs	r1, r5
 800c41a:	9804      	ldr	r0, [sp, #16]
 800c41c:	f000 fa85 	bl	800c92a <_Bfree>
 800c420:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c422:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c424:	4313      	orrs	r3, r2
 800c426:	d000      	beq.n	800c42a <_dtoa_r+0x9a6>
 800c428:	e089      	b.n	800c53e <_dtoa_r+0xaba>
 800c42a:	9a06      	ldr	r2, [sp, #24]
 800c42c:	3301      	adds	r3, #1
 800c42e:	4213      	tst	r3, r2
 800c430:	d000      	beq.n	800c434 <_dtoa_r+0x9b0>
 800c432:	e084      	b.n	800c53e <_dtoa_r+0xaba>
 800c434:	2c39      	cmp	r4, #57	; 0x39
 800c436:	d100      	bne.n	800c43a <_dtoa_r+0x9b6>
 800c438:	e0a3      	b.n	800c582 <_dtoa_r+0xafe>
 800c43a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	dd01      	ble.n	800c444 <_dtoa_r+0x9c0>
 800c440:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800c442:	3431      	adds	r4, #49	; 0x31
 800c444:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c446:	1c5d      	adds	r5, r3, #1
 800c448:	701c      	strb	r4, [r3, #0]
 800c44a:	e027      	b.n	800c49c <_dtoa_r+0xa18>
 800c44c:	2b04      	cmp	r3, #4
 800c44e:	d100      	bne.n	800c452 <_dtoa_r+0x9ce>
 800c450:	e769      	b.n	800c326 <_dtoa_r+0x8a2>
 800c452:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c454:	331c      	adds	r3, #28
 800c456:	18d2      	adds	r2, r2, r3
 800c458:	920b      	str	r2, [sp, #44]	; 0x2c
 800c45a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c45c:	18e4      	adds	r4, r4, r3
 800c45e:	18d3      	adds	r3, r2, r3
 800c460:	e760      	b.n	800c324 <_dtoa_r+0x8a0>
 800c462:	0003      	movs	r3, r0
 800c464:	e7f5      	b.n	800c452 <_dtoa_r+0x9ce>
 800c466:	2f00      	cmp	r7, #0
 800c468:	dc3c      	bgt.n	800c4e4 <_dtoa_r+0xa60>
 800c46a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c46c:	2b02      	cmp	r3, #2
 800c46e:	dd39      	ble.n	800c4e4 <_dtoa_r+0xa60>
 800c470:	970d      	str	r7, [sp, #52]	; 0x34
 800c472:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c474:	2b00      	cmp	r3, #0
 800c476:	d10c      	bne.n	800c492 <_dtoa_r+0xa0e>
 800c478:	9908      	ldr	r1, [sp, #32]
 800c47a:	2205      	movs	r2, #5
 800c47c:	9804      	ldr	r0, [sp, #16]
 800c47e:	f000 fa6d 	bl	800c95c <__multadd>
 800c482:	9008      	str	r0, [sp, #32]
 800c484:	0001      	movs	r1, r0
 800c486:	9805      	ldr	r0, [sp, #20]
 800c488:	f000 fc29 	bl	800ccde <__mcmp>
 800c48c:	2800      	cmp	r0, #0
 800c48e:	dd00      	ble.n	800c492 <_dtoa_r+0xa0e>
 800c490:	e55a      	b.n	800bf48 <_dtoa_r+0x4c4>
 800c492:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c494:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c496:	43db      	mvns	r3, r3
 800c498:	9303      	str	r3, [sp, #12]
 800c49a:	2700      	movs	r7, #0
 800c49c:	9908      	ldr	r1, [sp, #32]
 800c49e:	9804      	ldr	r0, [sp, #16]
 800c4a0:	f000 fa43 	bl	800c92a <_Bfree>
 800c4a4:	2e00      	cmp	r6, #0
 800c4a6:	d100      	bne.n	800c4aa <_dtoa_r+0xa26>
 800c4a8:	e63f      	b.n	800c12a <_dtoa_r+0x6a6>
 800c4aa:	2f00      	cmp	r7, #0
 800c4ac:	d005      	beq.n	800c4ba <_dtoa_r+0xa36>
 800c4ae:	42b7      	cmp	r7, r6
 800c4b0:	d003      	beq.n	800c4ba <_dtoa_r+0xa36>
 800c4b2:	0039      	movs	r1, r7
 800c4b4:	9804      	ldr	r0, [sp, #16]
 800c4b6:	f000 fa38 	bl	800c92a <_Bfree>
 800c4ba:	0031      	movs	r1, r6
 800c4bc:	9804      	ldr	r0, [sp, #16]
 800c4be:	f000 fa34 	bl	800c92a <_Bfree>
 800c4c2:	e632      	b.n	800c12a <_dtoa_r+0x6a6>
 800c4c4:	9508      	str	r5, [sp, #32]
 800c4c6:	002e      	movs	r6, r5
 800c4c8:	e7e3      	b.n	800c492 <_dtoa_r+0xa0e>
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	9308      	str	r3, [sp, #32]
 800c4ce:	001e      	movs	r6, r3
 800c4d0:	e7df      	b.n	800c492 <_dtoa_r+0xa0e>
 800c4d2:	46c0      	nop			; (mov r8, r8)
 800c4d4:	40240000 	.word	0x40240000
 800c4d8:	00000433 	.word	0x00000433
 800c4dc:	9603      	str	r6, [sp, #12]
 800c4de:	9508      	str	r5, [sp, #32]
 800c4e0:	002e      	movs	r6, r5
 800c4e2:	e531      	b.n	800bf48 <_dtoa_r+0x4c4>
 800c4e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c4e6:	970d      	str	r7, [sp, #52]	; 0x34
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d000      	beq.n	800c4ee <_dtoa_r+0xa6a>
 800c4ec:	e753      	b.n	800c396 <_dtoa_r+0x912>
 800c4ee:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c4f0:	9908      	ldr	r1, [sp, #32]
 800c4f2:	9805      	ldr	r0, [sp, #20]
 800c4f4:	f7ff fa42 	bl	800b97c <quorem>
 800c4f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4fa:	3030      	adds	r0, #48	; 0x30
 800c4fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c4fe:	7028      	strb	r0, [r5, #0]
 800c500:	3501      	adds	r5, #1
 800c502:	0004      	movs	r4, r0
 800c504:	1aeb      	subs	r3, r5, r3
 800c506:	429a      	cmp	r2, r3
 800c508:	dc78      	bgt.n	800c5fc <_dtoa_r+0xb78>
 800c50a:	1e15      	subs	r5, r2, #0
 800c50c:	dc00      	bgt.n	800c510 <_dtoa_r+0xa8c>
 800c50e:	2501      	movs	r5, #1
 800c510:	2700      	movs	r7, #0
 800c512:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c514:	195d      	adds	r5, r3, r5
 800c516:	9905      	ldr	r1, [sp, #20]
 800c518:	2201      	movs	r2, #1
 800c51a:	9804      	ldr	r0, [sp, #16]
 800c51c:	f000 fb8e 	bl	800cc3c <__lshift>
 800c520:	9908      	ldr	r1, [sp, #32]
 800c522:	9005      	str	r0, [sp, #20]
 800c524:	f000 fbdb 	bl	800ccde <__mcmp>
 800c528:	2800      	cmp	r0, #0
 800c52a:	dc2f      	bgt.n	800c58c <_dtoa_r+0xb08>
 800c52c:	d101      	bne.n	800c532 <_dtoa_r+0xaae>
 800c52e:	07e3      	lsls	r3, r4, #31
 800c530:	d42c      	bmi.n	800c58c <_dtoa_r+0xb08>
 800c532:	1e6b      	subs	r3, r5, #1
 800c534:	781a      	ldrb	r2, [r3, #0]
 800c536:	2a30      	cmp	r2, #48	; 0x30
 800c538:	d1b0      	bne.n	800c49c <_dtoa_r+0xa18>
 800c53a:	001d      	movs	r5, r3
 800c53c:	e7f9      	b.n	800c532 <_dtoa_r+0xaae>
 800c53e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c540:	2b00      	cmp	r3, #0
 800c542:	db07      	blt.n	800c554 <_dtoa_r+0xad0>
 800c544:	001d      	movs	r5, r3
 800c546:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c548:	431d      	orrs	r5, r3
 800c54a:	d126      	bne.n	800c59a <_dtoa_r+0xb16>
 800c54c:	2301      	movs	r3, #1
 800c54e:	9a06      	ldr	r2, [sp, #24]
 800c550:	4213      	tst	r3, r2
 800c552:	d122      	bne.n	800c59a <_dtoa_r+0xb16>
 800c554:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c556:	2b00      	cmp	r3, #0
 800c558:	dc00      	bgt.n	800c55c <_dtoa_r+0xad8>
 800c55a:	e773      	b.n	800c444 <_dtoa_r+0x9c0>
 800c55c:	9905      	ldr	r1, [sp, #20]
 800c55e:	2201      	movs	r2, #1
 800c560:	9804      	ldr	r0, [sp, #16]
 800c562:	f000 fb6b 	bl	800cc3c <__lshift>
 800c566:	9908      	ldr	r1, [sp, #32]
 800c568:	9005      	str	r0, [sp, #20]
 800c56a:	f000 fbb8 	bl	800ccde <__mcmp>
 800c56e:	2800      	cmp	r0, #0
 800c570:	dc04      	bgt.n	800c57c <_dtoa_r+0xaf8>
 800c572:	d000      	beq.n	800c576 <_dtoa_r+0xaf2>
 800c574:	e766      	b.n	800c444 <_dtoa_r+0x9c0>
 800c576:	07e3      	lsls	r3, r4, #31
 800c578:	d400      	bmi.n	800c57c <_dtoa_r+0xaf8>
 800c57a:	e763      	b.n	800c444 <_dtoa_r+0x9c0>
 800c57c:	2c39      	cmp	r4, #57	; 0x39
 800c57e:	d000      	beq.n	800c582 <_dtoa_r+0xafe>
 800c580:	e75e      	b.n	800c440 <_dtoa_r+0x9bc>
 800c582:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c584:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c586:	1c5d      	adds	r5, r3, #1
 800c588:	2339      	movs	r3, #57	; 0x39
 800c58a:	7013      	strb	r3, [r2, #0]
 800c58c:	1e6b      	subs	r3, r5, #1
 800c58e:	781a      	ldrb	r2, [r3, #0]
 800c590:	2a39      	cmp	r2, #57	; 0x39
 800c592:	d03b      	beq.n	800c60c <_dtoa_r+0xb88>
 800c594:	3201      	adds	r2, #1
 800c596:	701a      	strb	r2, [r3, #0]
 800c598:	e780      	b.n	800c49c <_dtoa_r+0xa18>
 800c59a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c59c:	3301      	adds	r3, #1
 800c59e:	930d      	str	r3, [sp, #52]	; 0x34
 800c5a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	dd05      	ble.n	800c5b2 <_dtoa_r+0xb2e>
 800c5a6:	2c39      	cmp	r4, #57	; 0x39
 800c5a8:	d0eb      	beq.n	800c582 <_dtoa_r+0xafe>
 800c5aa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800c5ac:	3401      	adds	r4, #1
 800c5ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5b0:	e74a      	b.n	800c448 <_dtoa_r+0x9c4>
 800c5b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c5b6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800c5b8:	701c      	strb	r4, [r3, #0]
 800c5ba:	4293      	cmp	r3, r2
 800c5bc:	d0ab      	beq.n	800c516 <_dtoa_r+0xa92>
 800c5be:	2300      	movs	r3, #0
 800c5c0:	220a      	movs	r2, #10
 800c5c2:	9905      	ldr	r1, [sp, #20]
 800c5c4:	9804      	ldr	r0, [sp, #16]
 800c5c6:	f000 f9c9 	bl	800c95c <__multadd>
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	9005      	str	r0, [sp, #20]
 800c5ce:	220a      	movs	r2, #10
 800c5d0:	0039      	movs	r1, r7
 800c5d2:	9804      	ldr	r0, [sp, #16]
 800c5d4:	42b7      	cmp	r7, r6
 800c5d6:	d106      	bne.n	800c5e6 <_dtoa_r+0xb62>
 800c5d8:	f000 f9c0 	bl	800c95c <__multadd>
 800c5dc:	0007      	movs	r7, r0
 800c5de:	0006      	movs	r6, r0
 800c5e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c5e2:	930b      	str	r3, [sp, #44]	; 0x2c
 800c5e4:	e6fc      	b.n	800c3e0 <_dtoa_r+0x95c>
 800c5e6:	f000 f9b9 	bl	800c95c <__multadd>
 800c5ea:	0031      	movs	r1, r6
 800c5ec:	0007      	movs	r7, r0
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	220a      	movs	r2, #10
 800c5f2:	9804      	ldr	r0, [sp, #16]
 800c5f4:	f000 f9b2 	bl	800c95c <__multadd>
 800c5f8:	0006      	movs	r6, r0
 800c5fa:	e7f1      	b.n	800c5e0 <_dtoa_r+0xb5c>
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	220a      	movs	r2, #10
 800c600:	9905      	ldr	r1, [sp, #20]
 800c602:	9804      	ldr	r0, [sp, #16]
 800c604:	f000 f9aa 	bl	800c95c <__multadd>
 800c608:	9005      	str	r0, [sp, #20]
 800c60a:	e771      	b.n	800c4f0 <_dtoa_r+0xa6c>
 800c60c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c60e:	429a      	cmp	r2, r3
 800c610:	d105      	bne.n	800c61e <_dtoa_r+0xb9a>
 800c612:	9b03      	ldr	r3, [sp, #12]
 800c614:	3301      	adds	r3, #1
 800c616:	9303      	str	r3, [sp, #12]
 800c618:	2331      	movs	r3, #49	; 0x31
 800c61a:	7013      	strb	r3, [r2, #0]
 800c61c:	e73e      	b.n	800c49c <_dtoa_r+0xa18>
 800c61e:	001d      	movs	r5, r3
 800c620:	e7b4      	b.n	800c58c <_dtoa_r+0xb08>
 800c622:	4b0a      	ldr	r3, [pc, #40]	; (800c64c <_dtoa_r+0xbc8>)
 800c624:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800c626:	930a      	str	r3, [sp, #40]	; 0x28
 800c628:	4b09      	ldr	r3, [pc, #36]	; (800c650 <_dtoa_r+0xbcc>)
 800c62a:	2a00      	cmp	r2, #0
 800c62c:	d001      	beq.n	800c632 <_dtoa_r+0xbae>
 800c62e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800c630:	6013      	str	r3, [r2, #0]
 800c632:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c634:	b01d      	add	sp, #116	; 0x74
 800c636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c638:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	dd00      	ble.n	800c640 <_dtoa_r+0xbbc>
 800c63e:	e756      	b.n	800c4ee <_dtoa_r+0xa6a>
 800c640:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c642:	2b02      	cmp	r3, #2
 800c644:	dc00      	bgt.n	800c648 <_dtoa_r+0xbc4>
 800c646:	e752      	b.n	800c4ee <_dtoa_r+0xa6a>
 800c648:	e713      	b.n	800c472 <_dtoa_r+0x9ee>
 800c64a:	46c0      	nop			; (mov r8, r8)
 800c64c:	0800d92d 	.word	0x0800d92d
 800c650:	0800d935 	.word	0x0800d935

0800c654 <_malloc_trim_r>:
 800c654:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c656:	4f25      	ldr	r7, [pc, #148]	; (800c6ec <_malloc_trim_r+0x98>)
 800c658:	000c      	movs	r4, r1
 800c65a:	0005      	movs	r5, r0
 800c65c:	f7fe f87a 	bl	800a754 <__malloc_lock>
 800c660:	0038      	movs	r0, r7
 800c662:	2203      	movs	r2, #3
 800c664:	4e22      	ldr	r6, [pc, #136]	; (800c6f0 <_malloc_trim_r+0x9c>)
 800c666:	3811      	subs	r0, #17
 800c668:	68b3      	ldr	r3, [r6, #8]
 800c66a:	1b00      	subs	r0, r0, r4
 800c66c:	685b      	ldr	r3, [r3, #4]
 800c66e:	0039      	movs	r1, r7
 800c670:	4393      	bics	r3, r2
 800c672:	18c0      	adds	r0, r0, r3
 800c674:	9301      	str	r3, [sp, #4]
 800c676:	f7f3 fd63 	bl	8000140 <__udivsi3>
 800c67a:	1e44      	subs	r4, r0, #1
 800c67c:	437c      	muls	r4, r7
 800c67e:	42bc      	cmp	r4, r7
 800c680:	da04      	bge.n	800c68c <_malloc_trim_r+0x38>
 800c682:	0028      	movs	r0, r5
 800c684:	f7fe f86e 	bl	800a764 <__malloc_unlock>
 800c688:	2000      	movs	r0, #0
 800c68a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c68c:	2100      	movs	r1, #0
 800c68e:	0028      	movs	r0, r5
 800c690:	f7fe f870 	bl	800a774 <_sbrk_r>
 800c694:	68b3      	ldr	r3, [r6, #8]
 800c696:	9a01      	ldr	r2, [sp, #4]
 800c698:	189b      	adds	r3, r3, r2
 800c69a:	4298      	cmp	r0, r3
 800c69c:	d1f1      	bne.n	800c682 <_malloc_trim_r+0x2e>
 800c69e:	4261      	negs	r1, r4
 800c6a0:	0028      	movs	r0, r5
 800c6a2:	f7fe f867 	bl	800a774 <_sbrk_r>
 800c6a6:	1c43      	adds	r3, r0, #1
 800c6a8:	d110      	bne.n	800c6cc <_malloc_trim_r+0x78>
 800c6aa:	2100      	movs	r1, #0
 800c6ac:	0028      	movs	r0, r5
 800c6ae:	f7fe f861 	bl	800a774 <_sbrk_r>
 800c6b2:	68b2      	ldr	r2, [r6, #8]
 800c6b4:	1a81      	subs	r1, r0, r2
 800c6b6:	290f      	cmp	r1, #15
 800c6b8:	dde3      	ble.n	800c682 <_malloc_trim_r+0x2e>
 800c6ba:	4b0e      	ldr	r3, [pc, #56]	; (800c6f4 <_malloc_trim_r+0xa0>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	1ac0      	subs	r0, r0, r3
 800c6c0:	4b0d      	ldr	r3, [pc, #52]	; (800c6f8 <_malloc_trim_r+0xa4>)
 800c6c2:	6018      	str	r0, [r3, #0]
 800c6c4:	2301      	movs	r3, #1
 800c6c6:	430b      	orrs	r3, r1
 800c6c8:	6053      	str	r3, [r2, #4]
 800c6ca:	e7da      	b.n	800c682 <_malloc_trim_r+0x2e>
 800c6cc:	68b2      	ldr	r2, [r6, #8]
 800c6ce:	2601      	movs	r6, #1
 800c6d0:	9b01      	ldr	r3, [sp, #4]
 800c6d2:	0028      	movs	r0, r5
 800c6d4:	1b1b      	subs	r3, r3, r4
 800c6d6:	4333      	orrs	r3, r6
 800c6d8:	6053      	str	r3, [r2, #4]
 800c6da:	4b07      	ldr	r3, [pc, #28]	; (800c6f8 <_malloc_trim_r+0xa4>)
 800c6dc:	681a      	ldr	r2, [r3, #0]
 800c6de:	1b14      	subs	r4, r2, r4
 800c6e0:	601c      	str	r4, [r3, #0]
 800c6e2:	f7fe f83f 	bl	800a764 <__malloc_unlock>
 800c6e6:	0030      	movs	r0, r6
 800c6e8:	e7cf      	b.n	800c68a <_malloc_trim_r+0x36>
 800c6ea:	46c0      	nop			; (mov r8, r8)
 800c6ec:	00000080 	.word	0x00000080
 800c6f0:	20000134 	.word	0x20000134
 800c6f4:	2000053c 	.word	0x2000053c
 800c6f8:	200009c8 	.word	0x200009c8

0800c6fc <_free_r>:
 800c6fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c6fe:	1e0d      	subs	r5, r1, #0
 800c700:	9001      	str	r0, [sp, #4]
 800c702:	d02d      	beq.n	800c760 <_free_r+0x64>
 800c704:	f7fe f826 	bl	800a754 <__malloc_lock>
 800c708:	2301      	movs	r3, #1
 800c70a:	0029      	movs	r1, r5
 800c70c:	469c      	mov	ip, r3
 800c70e:	3908      	subs	r1, #8
 800c710:	684f      	ldr	r7, [r1, #4]
 800c712:	4662      	mov	r2, ip
 800c714:	003b      	movs	r3, r7
 800c716:	4666      	mov	r6, ip
 800c718:	4393      	bics	r3, r2
 800c71a:	18c8      	adds	r0, r1, r3
 800c71c:	6845      	ldr	r5, [r0, #4]
 800c71e:	3202      	adds	r2, #2
 800c720:	4395      	bics	r5, r2
 800c722:	4a4a      	ldr	r2, [pc, #296]	; (800c84c <_free_r+0x150>)
 800c724:	4037      	ands	r7, r6
 800c726:	6896      	ldr	r6, [r2, #8]
 800c728:	42b0      	cmp	r0, r6
 800c72a:	d11a      	bne.n	800c762 <_free_r+0x66>
 800c72c:	195b      	adds	r3, r3, r5
 800c72e:	2f00      	cmp	r7, #0
 800c730:	d106      	bne.n	800c740 <_free_r+0x44>
 800c732:	6808      	ldr	r0, [r1, #0]
 800c734:	1a09      	subs	r1, r1, r0
 800c736:	688d      	ldr	r5, [r1, #8]
 800c738:	181b      	adds	r3, r3, r0
 800c73a:	68c8      	ldr	r0, [r1, #12]
 800c73c:	60e8      	str	r0, [r5, #12]
 800c73e:	6085      	str	r5, [r0, #8]
 800c740:	2001      	movs	r0, #1
 800c742:	4318      	orrs	r0, r3
 800c744:	6048      	str	r0, [r1, #4]
 800c746:	6091      	str	r1, [r2, #8]
 800c748:	4a41      	ldr	r2, [pc, #260]	; (800c850 <_free_r+0x154>)
 800c74a:	6812      	ldr	r2, [r2, #0]
 800c74c:	4293      	cmp	r3, r2
 800c74e:	d304      	bcc.n	800c75a <_free_r+0x5e>
 800c750:	4b40      	ldr	r3, [pc, #256]	; (800c854 <_free_r+0x158>)
 800c752:	9801      	ldr	r0, [sp, #4]
 800c754:	6819      	ldr	r1, [r3, #0]
 800c756:	f7ff ff7d 	bl	800c654 <_malloc_trim_r>
 800c75a:	9801      	ldr	r0, [sp, #4]
 800c75c:	f7fe f802 	bl	800a764 <__malloc_unlock>
 800c760:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800c762:	2600      	movs	r6, #0
 800c764:	6045      	str	r5, [r0, #4]
 800c766:	42b7      	cmp	r7, r6
 800c768:	d109      	bne.n	800c77e <_free_r+0x82>
 800c76a:	680f      	ldr	r7, [r1, #0]
 800c76c:	4c3a      	ldr	r4, [pc, #232]	; (800c858 <_free_r+0x15c>)
 800c76e:	1bc9      	subs	r1, r1, r7
 800c770:	19db      	adds	r3, r3, r7
 800c772:	688f      	ldr	r7, [r1, #8]
 800c774:	42a7      	cmp	r7, r4
 800c776:	d02b      	beq.n	800c7d0 <_free_r+0xd4>
 800c778:	68cc      	ldr	r4, [r1, #12]
 800c77a:	60fc      	str	r4, [r7, #12]
 800c77c:	60a7      	str	r7, [r4, #8]
 800c77e:	1947      	adds	r7, r0, r5
 800c780:	687c      	ldr	r4, [r7, #4]
 800c782:	2701      	movs	r7, #1
 800c784:	423c      	tst	r4, r7
 800c786:	d10b      	bne.n	800c7a0 <_free_r+0xa4>
 800c788:	195b      	adds	r3, r3, r5
 800c78a:	6885      	ldr	r5, [r0, #8]
 800c78c:	2e00      	cmp	r6, #0
 800c78e:	d121      	bne.n	800c7d4 <_free_r+0xd8>
 800c790:	4c31      	ldr	r4, [pc, #196]	; (800c858 <_free_r+0x15c>)
 800c792:	42a5      	cmp	r5, r4
 800c794:	d11e      	bne.n	800c7d4 <_free_r+0xd8>
 800c796:	003e      	movs	r6, r7
 800c798:	6151      	str	r1, [r2, #20]
 800c79a:	6111      	str	r1, [r2, #16]
 800c79c:	60cd      	str	r5, [r1, #12]
 800c79e:	608d      	str	r5, [r1, #8]
 800c7a0:	2001      	movs	r0, #1
 800c7a2:	0005      	movs	r5, r0
 800c7a4:	431d      	orrs	r5, r3
 800c7a6:	604d      	str	r5, [r1, #4]
 800c7a8:	50cb      	str	r3, [r1, r3]
 800c7aa:	2e00      	cmp	r6, #0
 800c7ac:	d1d5      	bne.n	800c75a <_free_r+0x5e>
 800c7ae:	4d2b      	ldr	r5, [pc, #172]	; (800c85c <_free_r+0x160>)
 800c7b0:	42ab      	cmp	r3, r5
 800c7b2:	d813      	bhi.n	800c7dc <_free_r+0xe0>
 800c7b4:	08db      	lsrs	r3, r3, #3
 800c7b6:	109d      	asrs	r5, r3, #2
 800c7b8:	40a8      	lsls	r0, r5
 800c7ba:	6854      	ldr	r4, [r2, #4]
 800c7bc:	00db      	lsls	r3, r3, #3
 800c7be:	4320      	orrs	r0, r4
 800c7c0:	6050      	str	r0, [r2, #4]
 800c7c2:	189a      	adds	r2, r3, r2
 800c7c4:	6893      	ldr	r3, [r2, #8]
 800c7c6:	60ca      	str	r2, [r1, #12]
 800c7c8:	608b      	str	r3, [r1, #8]
 800c7ca:	6091      	str	r1, [r2, #8]
 800c7cc:	60d9      	str	r1, [r3, #12]
 800c7ce:	e7c4      	b.n	800c75a <_free_r+0x5e>
 800c7d0:	4666      	mov	r6, ip
 800c7d2:	e7d4      	b.n	800c77e <_free_r+0x82>
 800c7d4:	68c0      	ldr	r0, [r0, #12]
 800c7d6:	60e8      	str	r0, [r5, #12]
 800c7d8:	6085      	str	r5, [r0, #8]
 800c7da:	e7e1      	b.n	800c7a0 <_free_r+0xa4>
 800c7dc:	0a5d      	lsrs	r5, r3, #9
 800c7de:	2d04      	cmp	r5, #4
 800c7e0:	d812      	bhi.n	800c808 <_free_r+0x10c>
 800c7e2:	0998      	lsrs	r0, r3, #6
 800c7e4:	3038      	adds	r0, #56	; 0x38
 800c7e6:	00c6      	lsls	r6, r0, #3
 800c7e8:	18b6      	adds	r6, r6, r2
 800c7ea:	68b5      	ldr	r5, [r6, #8]
 800c7ec:	2703      	movs	r7, #3
 800c7ee:	42ae      	cmp	r6, r5
 800c7f0:	d125      	bne.n	800c83e <_free_r+0x142>
 800c7f2:	2301      	movs	r3, #1
 800c7f4:	1080      	asrs	r0, r0, #2
 800c7f6:	4083      	lsls	r3, r0
 800c7f8:	6850      	ldr	r0, [r2, #4]
 800c7fa:	4303      	orrs	r3, r0
 800c7fc:	6053      	str	r3, [r2, #4]
 800c7fe:	60ce      	str	r6, [r1, #12]
 800c800:	608d      	str	r5, [r1, #8]
 800c802:	60b1      	str	r1, [r6, #8]
 800c804:	60e9      	str	r1, [r5, #12]
 800c806:	e7a8      	b.n	800c75a <_free_r+0x5e>
 800c808:	2d14      	cmp	r5, #20
 800c80a:	d802      	bhi.n	800c812 <_free_r+0x116>
 800c80c:	0028      	movs	r0, r5
 800c80e:	305b      	adds	r0, #91	; 0x5b
 800c810:	e7e9      	b.n	800c7e6 <_free_r+0xea>
 800c812:	2d54      	cmp	r5, #84	; 0x54
 800c814:	d802      	bhi.n	800c81c <_free_r+0x120>
 800c816:	0b18      	lsrs	r0, r3, #12
 800c818:	306e      	adds	r0, #110	; 0x6e
 800c81a:	e7e4      	b.n	800c7e6 <_free_r+0xea>
 800c81c:	20aa      	movs	r0, #170	; 0xaa
 800c81e:	0040      	lsls	r0, r0, #1
 800c820:	4285      	cmp	r5, r0
 800c822:	d802      	bhi.n	800c82a <_free_r+0x12e>
 800c824:	0bd8      	lsrs	r0, r3, #15
 800c826:	3077      	adds	r0, #119	; 0x77
 800c828:	e7dd      	b.n	800c7e6 <_free_r+0xea>
 800c82a:	4e0d      	ldr	r6, [pc, #52]	; (800c860 <_free_r+0x164>)
 800c82c:	207e      	movs	r0, #126	; 0x7e
 800c82e:	42b5      	cmp	r5, r6
 800c830:	d8d9      	bhi.n	800c7e6 <_free_r+0xea>
 800c832:	0c98      	lsrs	r0, r3, #18
 800c834:	307c      	adds	r0, #124	; 0x7c
 800c836:	e7d6      	b.n	800c7e6 <_free_r+0xea>
 800c838:	68ad      	ldr	r5, [r5, #8]
 800c83a:	42ae      	cmp	r6, r5
 800c83c:	d003      	beq.n	800c846 <_free_r+0x14a>
 800c83e:	686a      	ldr	r2, [r5, #4]
 800c840:	43ba      	bics	r2, r7
 800c842:	4293      	cmp	r3, r2
 800c844:	d3f8      	bcc.n	800c838 <_free_r+0x13c>
 800c846:	68ee      	ldr	r6, [r5, #12]
 800c848:	e7d9      	b.n	800c7fe <_free_r+0x102>
 800c84a:	46c0      	nop			; (mov r8, r8)
 800c84c:	20000134 	.word	0x20000134
 800c850:	20000540 	.word	0x20000540
 800c854:	200009f8 	.word	0x200009f8
 800c858:	2000013c 	.word	0x2000013c
 800c85c:	000001ff 	.word	0x000001ff
 800c860:	00000554 	.word	0x00000554

0800c864 <_localeconv_r>:
 800c864:	4b03      	ldr	r3, [pc, #12]	; (800c874 <_localeconv_r+0x10>)
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	6a18      	ldr	r0, [r3, #32]
 800c86a:	2800      	cmp	r0, #0
 800c86c:	d100      	bne.n	800c870 <_localeconv_r+0xc>
 800c86e:	4802      	ldr	r0, [pc, #8]	; (800c878 <_localeconv_r+0x14>)
 800c870:	30f0      	adds	r0, #240	; 0xf0
 800c872:	4770      	bx	lr
 800c874:	20000040 	.word	0x20000040
 800c878:	20000544 	.word	0x20000544

0800c87c <__retarget_lock_acquire_recursive>:
 800c87c:	4770      	bx	lr

0800c87e <__retarget_lock_release_recursive>:
 800c87e:	4770      	bx	lr

0800c880 <__ascii_mbtowc>:
 800c880:	b082      	sub	sp, #8
 800c882:	2900      	cmp	r1, #0
 800c884:	d100      	bne.n	800c888 <__ascii_mbtowc+0x8>
 800c886:	a901      	add	r1, sp, #4
 800c888:	1e10      	subs	r0, r2, #0
 800c88a:	d006      	beq.n	800c89a <__ascii_mbtowc+0x1a>
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d006      	beq.n	800c89e <__ascii_mbtowc+0x1e>
 800c890:	7813      	ldrb	r3, [r2, #0]
 800c892:	600b      	str	r3, [r1, #0]
 800c894:	7810      	ldrb	r0, [r2, #0]
 800c896:	1e43      	subs	r3, r0, #1
 800c898:	4198      	sbcs	r0, r3
 800c89a:	b002      	add	sp, #8
 800c89c:	4770      	bx	lr
 800c89e:	2002      	movs	r0, #2
 800c8a0:	4240      	negs	r0, r0
 800c8a2:	e7fa      	b.n	800c89a <__ascii_mbtowc+0x1a>

0800c8a4 <memchr>:
 800c8a4:	b2c9      	uxtb	r1, r1
 800c8a6:	1882      	adds	r2, r0, r2
 800c8a8:	4290      	cmp	r0, r2
 800c8aa:	d101      	bne.n	800c8b0 <memchr+0xc>
 800c8ac:	2000      	movs	r0, #0
 800c8ae:	4770      	bx	lr
 800c8b0:	7803      	ldrb	r3, [r0, #0]
 800c8b2:	428b      	cmp	r3, r1
 800c8b4:	d0fb      	beq.n	800c8ae <memchr+0xa>
 800c8b6:	3001      	adds	r0, #1
 800c8b8:	e7f6      	b.n	800c8a8 <memchr+0x4>

0800c8ba <_Balloc>:
 800c8ba:	b570      	push	{r4, r5, r6, lr}
 800c8bc:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c8be:	0004      	movs	r4, r0
 800c8c0:	000d      	movs	r5, r1
 800c8c2:	2e00      	cmp	r6, #0
 800c8c4:	d107      	bne.n	800c8d6 <_Balloc+0x1c>
 800c8c6:	2010      	movs	r0, #16
 800c8c8:	f7fd fd24 	bl	800a314 <malloc>
 800c8cc:	6260      	str	r0, [r4, #36]	; 0x24
 800c8ce:	6046      	str	r6, [r0, #4]
 800c8d0:	6086      	str	r6, [r0, #8]
 800c8d2:	6006      	str	r6, [r0, #0]
 800c8d4:	60c6      	str	r6, [r0, #12]
 800c8d6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c8d8:	68f3      	ldr	r3, [r6, #12]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d013      	beq.n	800c906 <_Balloc+0x4c>
 800c8de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c8e0:	00aa      	lsls	r2, r5, #2
 800c8e2:	68db      	ldr	r3, [r3, #12]
 800c8e4:	189b      	adds	r3, r3, r2
 800c8e6:	6818      	ldr	r0, [r3, #0]
 800c8e8:	2800      	cmp	r0, #0
 800c8ea:	d118      	bne.n	800c91e <_Balloc+0x64>
 800c8ec:	2101      	movs	r1, #1
 800c8ee:	000e      	movs	r6, r1
 800c8f0:	40ae      	lsls	r6, r5
 800c8f2:	1d72      	adds	r2, r6, #5
 800c8f4:	0092      	lsls	r2, r2, #2
 800c8f6:	0020      	movs	r0, r4
 800c8f8:	f7fd fcbb 	bl	800a272 <_calloc_r>
 800c8fc:	2800      	cmp	r0, #0
 800c8fe:	d00c      	beq.n	800c91a <_Balloc+0x60>
 800c900:	6045      	str	r5, [r0, #4]
 800c902:	6086      	str	r6, [r0, #8]
 800c904:	e00d      	b.n	800c922 <_Balloc+0x68>
 800c906:	2221      	movs	r2, #33	; 0x21
 800c908:	2104      	movs	r1, #4
 800c90a:	0020      	movs	r0, r4
 800c90c:	f7fd fcb1 	bl	800a272 <_calloc_r>
 800c910:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c912:	60f0      	str	r0, [r6, #12]
 800c914:	68db      	ldr	r3, [r3, #12]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d1e1      	bne.n	800c8de <_Balloc+0x24>
 800c91a:	2000      	movs	r0, #0
 800c91c:	bd70      	pop	{r4, r5, r6, pc}
 800c91e:	6802      	ldr	r2, [r0, #0]
 800c920:	601a      	str	r2, [r3, #0]
 800c922:	2300      	movs	r3, #0
 800c924:	6103      	str	r3, [r0, #16]
 800c926:	60c3      	str	r3, [r0, #12]
 800c928:	e7f8      	b.n	800c91c <_Balloc+0x62>

0800c92a <_Bfree>:
 800c92a:	b570      	push	{r4, r5, r6, lr}
 800c92c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c92e:	0006      	movs	r6, r0
 800c930:	000d      	movs	r5, r1
 800c932:	2c00      	cmp	r4, #0
 800c934:	d107      	bne.n	800c946 <_Bfree+0x1c>
 800c936:	2010      	movs	r0, #16
 800c938:	f7fd fcec 	bl	800a314 <malloc>
 800c93c:	6270      	str	r0, [r6, #36]	; 0x24
 800c93e:	6044      	str	r4, [r0, #4]
 800c940:	6084      	str	r4, [r0, #8]
 800c942:	6004      	str	r4, [r0, #0]
 800c944:	60c4      	str	r4, [r0, #12]
 800c946:	2d00      	cmp	r5, #0
 800c948:	d007      	beq.n	800c95a <_Bfree+0x30>
 800c94a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c94c:	686a      	ldr	r2, [r5, #4]
 800c94e:	68db      	ldr	r3, [r3, #12]
 800c950:	0092      	lsls	r2, r2, #2
 800c952:	189b      	adds	r3, r3, r2
 800c954:	681a      	ldr	r2, [r3, #0]
 800c956:	602a      	str	r2, [r5, #0]
 800c958:	601d      	str	r5, [r3, #0]
 800c95a:	bd70      	pop	{r4, r5, r6, pc}

0800c95c <__multadd>:
 800c95c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c95e:	001e      	movs	r6, r3
 800c960:	2314      	movs	r3, #20
 800c962:	469c      	mov	ip, r3
 800c964:	0007      	movs	r7, r0
 800c966:	000c      	movs	r4, r1
 800c968:	2000      	movs	r0, #0
 800c96a:	690d      	ldr	r5, [r1, #16]
 800c96c:	448c      	add	ip, r1
 800c96e:	4663      	mov	r3, ip
 800c970:	8819      	ldrh	r1, [r3, #0]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	4351      	muls	r1, r2
 800c976:	0c1b      	lsrs	r3, r3, #16
 800c978:	4353      	muls	r3, r2
 800c97a:	1989      	adds	r1, r1, r6
 800c97c:	0c0e      	lsrs	r6, r1, #16
 800c97e:	199b      	adds	r3, r3, r6
 800c980:	b289      	uxth	r1, r1
 800c982:	0c1e      	lsrs	r6, r3, #16
 800c984:	041b      	lsls	r3, r3, #16
 800c986:	185b      	adds	r3, r3, r1
 800c988:	4661      	mov	r1, ip
 800c98a:	3001      	adds	r0, #1
 800c98c:	c108      	stmia	r1!, {r3}
 800c98e:	468c      	mov	ip, r1
 800c990:	4285      	cmp	r5, r0
 800c992:	dcec      	bgt.n	800c96e <__multadd+0x12>
 800c994:	2e00      	cmp	r6, #0
 800c996:	d01b      	beq.n	800c9d0 <__multadd+0x74>
 800c998:	68a3      	ldr	r3, [r4, #8]
 800c99a:	429d      	cmp	r5, r3
 800c99c:	db12      	blt.n	800c9c4 <__multadd+0x68>
 800c99e:	6863      	ldr	r3, [r4, #4]
 800c9a0:	0038      	movs	r0, r7
 800c9a2:	1c59      	adds	r1, r3, #1
 800c9a4:	f7ff ff89 	bl	800c8ba <_Balloc>
 800c9a8:	0021      	movs	r1, r4
 800c9aa:	6923      	ldr	r3, [r4, #16]
 800c9ac:	9001      	str	r0, [sp, #4]
 800c9ae:	1c9a      	adds	r2, r3, #2
 800c9b0:	0092      	lsls	r2, r2, #2
 800c9b2:	310c      	adds	r1, #12
 800c9b4:	300c      	adds	r0, #12
 800c9b6:	f7fd febb 	bl	800a730 <memcpy>
 800c9ba:	0021      	movs	r1, r4
 800c9bc:	0038      	movs	r0, r7
 800c9be:	f7ff ffb4 	bl	800c92a <_Bfree>
 800c9c2:	9c01      	ldr	r4, [sp, #4]
 800c9c4:	1d2b      	adds	r3, r5, #4
 800c9c6:	009b      	lsls	r3, r3, #2
 800c9c8:	18e3      	adds	r3, r4, r3
 800c9ca:	3501      	adds	r5, #1
 800c9cc:	605e      	str	r6, [r3, #4]
 800c9ce:	6125      	str	r5, [r4, #16]
 800c9d0:	0020      	movs	r0, r4
 800c9d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800c9d4 <__hi0bits>:
 800c9d4:	0003      	movs	r3, r0
 800c9d6:	0c02      	lsrs	r2, r0, #16
 800c9d8:	2000      	movs	r0, #0
 800c9da:	4282      	cmp	r2, r0
 800c9dc:	d101      	bne.n	800c9e2 <__hi0bits+0xe>
 800c9de:	041b      	lsls	r3, r3, #16
 800c9e0:	3010      	adds	r0, #16
 800c9e2:	0e1a      	lsrs	r2, r3, #24
 800c9e4:	d101      	bne.n	800c9ea <__hi0bits+0x16>
 800c9e6:	3008      	adds	r0, #8
 800c9e8:	021b      	lsls	r3, r3, #8
 800c9ea:	0f1a      	lsrs	r2, r3, #28
 800c9ec:	d101      	bne.n	800c9f2 <__hi0bits+0x1e>
 800c9ee:	3004      	adds	r0, #4
 800c9f0:	011b      	lsls	r3, r3, #4
 800c9f2:	0f9a      	lsrs	r2, r3, #30
 800c9f4:	d101      	bne.n	800c9fa <__hi0bits+0x26>
 800c9f6:	3002      	adds	r0, #2
 800c9f8:	009b      	lsls	r3, r3, #2
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	db03      	blt.n	800ca06 <__hi0bits+0x32>
 800c9fe:	3001      	adds	r0, #1
 800ca00:	005b      	lsls	r3, r3, #1
 800ca02:	d400      	bmi.n	800ca06 <__hi0bits+0x32>
 800ca04:	2020      	movs	r0, #32
 800ca06:	4770      	bx	lr

0800ca08 <__lo0bits>:
 800ca08:	2207      	movs	r2, #7
 800ca0a:	6803      	ldr	r3, [r0, #0]
 800ca0c:	b510      	push	{r4, lr}
 800ca0e:	0001      	movs	r1, r0
 800ca10:	401a      	ands	r2, r3
 800ca12:	d00d      	beq.n	800ca30 <__lo0bits+0x28>
 800ca14:	2401      	movs	r4, #1
 800ca16:	2000      	movs	r0, #0
 800ca18:	4223      	tst	r3, r4
 800ca1a:	d105      	bne.n	800ca28 <__lo0bits+0x20>
 800ca1c:	3002      	adds	r0, #2
 800ca1e:	4203      	tst	r3, r0
 800ca20:	d003      	beq.n	800ca2a <__lo0bits+0x22>
 800ca22:	40e3      	lsrs	r3, r4
 800ca24:	0020      	movs	r0, r4
 800ca26:	600b      	str	r3, [r1, #0]
 800ca28:	bd10      	pop	{r4, pc}
 800ca2a:	089b      	lsrs	r3, r3, #2
 800ca2c:	600b      	str	r3, [r1, #0]
 800ca2e:	e7fb      	b.n	800ca28 <__lo0bits+0x20>
 800ca30:	b29c      	uxth	r4, r3
 800ca32:	0010      	movs	r0, r2
 800ca34:	2c00      	cmp	r4, #0
 800ca36:	d101      	bne.n	800ca3c <__lo0bits+0x34>
 800ca38:	2010      	movs	r0, #16
 800ca3a:	0c1b      	lsrs	r3, r3, #16
 800ca3c:	b2da      	uxtb	r2, r3
 800ca3e:	2a00      	cmp	r2, #0
 800ca40:	d101      	bne.n	800ca46 <__lo0bits+0x3e>
 800ca42:	3008      	adds	r0, #8
 800ca44:	0a1b      	lsrs	r3, r3, #8
 800ca46:	071a      	lsls	r2, r3, #28
 800ca48:	d101      	bne.n	800ca4e <__lo0bits+0x46>
 800ca4a:	3004      	adds	r0, #4
 800ca4c:	091b      	lsrs	r3, r3, #4
 800ca4e:	079a      	lsls	r2, r3, #30
 800ca50:	d101      	bne.n	800ca56 <__lo0bits+0x4e>
 800ca52:	3002      	adds	r0, #2
 800ca54:	089b      	lsrs	r3, r3, #2
 800ca56:	07da      	lsls	r2, r3, #31
 800ca58:	d4e8      	bmi.n	800ca2c <__lo0bits+0x24>
 800ca5a:	085b      	lsrs	r3, r3, #1
 800ca5c:	d001      	beq.n	800ca62 <__lo0bits+0x5a>
 800ca5e:	3001      	adds	r0, #1
 800ca60:	e7e4      	b.n	800ca2c <__lo0bits+0x24>
 800ca62:	2020      	movs	r0, #32
 800ca64:	e7e0      	b.n	800ca28 <__lo0bits+0x20>

0800ca66 <__i2b>:
 800ca66:	b510      	push	{r4, lr}
 800ca68:	000c      	movs	r4, r1
 800ca6a:	2101      	movs	r1, #1
 800ca6c:	f7ff ff25 	bl	800c8ba <_Balloc>
 800ca70:	2301      	movs	r3, #1
 800ca72:	6144      	str	r4, [r0, #20]
 800ca74:	6103      	str	r3, [r0, #16]
 800ca76:	bd10      	pop	{r4, pc}

0800ca78 <__multiply>:
 800ca78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca7a:	690b      	ldr	r3, [r1, #16]
 800ca7c:	0015      	movs	r5, r2
 800ca7e:	6912      	ldr	r2, [r2, #16]
 800ca80:	b089      	sub	sp, #36	; 0x24
 800ca82:	000c      	movs	r4, r1
 800ca84:	4293      	cmp	r3, r2
 800ca86:	da01      	bge.n	800ca8c <__multiply+0x14>
 800ca88:	002c      	movs	r4, r5
 800ca8a:	000d      	movs	r5, r1
 800ca8c:	6927      	ldr	r7, [r4, #16]
 800ca8e:	692e      	ldr	r6, [r5, #16]
 800ca90:	68a2      	ldr	r2, [r4, #8]
 800ca92:	19bb      	adds	r3, r7, r6
 800ca94:	6861      	ldr	r1, [r4, #4]
 800ca96:	9301      	str	r3, [sp, #4]
 800ca98:	4293      	cmp	r3, r2
 800ca9a:	dd00      	ble.n	800ca9e <__multiply+0x26>
 800ca9c:	3101      	adds	r1, #1
 800ca9e:	f7ff ff0c 	bl	800c8ba <_Balloc>
 800caa2:	0003      	movs	r3, r0
 800caa4:	3314      	adds	r3, #20
 800caa6:	9300      	str	r3, [sp, #0]
 800caa8:	9a00      	ldr	r2, [sp, #0]
 800caaa:	19bb      	adds	r3, r7, r6
 800caac:	4694      	mov	ip, r2
 800caae:	009b      	lsls	r3, r3, #2
 800cab0:	449c      	add	ip, r3
 800cab2:	0013      	movs	r3, r2
 800cab4:	2200      	movs	r2, #0
 800cab6:	9004      	str	r0, [sp, #16]
 800cab8:	4563      	cmp	r3, ip
 800caba:	d31c      	bcc.n	800caf6 <__multiply+0x7e>
 800cabc:	002a      	movs	r2, r5
 800cabe:	3414      	adds	r4, #20
 800cac0:	00bf      	lsls	r7, r7, #2
 800cac2:	19e3      	adds	r3, r4, r7
 800cac4:	3214      	adds	r2, #20
 800cac6:	00b6      	lsls	r6, r6, #2
 800cac8:	9305      	str	r3, [sp, #20]
 800caca:	1993      	adds	r3, r2, r6
 800cacc:	9402      	str	r4, [sp, #8]
 800cace:	9306      	str	r3, [sp, #24]
 800cad0:	9b06      	ldr	r3, [sp, #24]
 800cad2:	429a      	cmp	r2, r3
 800cad4:	d311      	bcc.n	800cafa <__multiply+0x82>
 800cad6:	9b01      	ldr	r3, [sp, #4]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	dd06      	ble.n	800caea <__multiply+0x72>
 800cadc:	2304      	movs	r3, #4
 800cade:	425b      	negs	r3, r3
 800cae0:	449c      	add	ip, r3
 800cae2:	4663      	mov	r3, ip
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d051      	beq.n	800cb8e <__multiply+0x116>
 800caea:	9b04      	ldr	r3, [sp, #16]
 800caec:	9a01      	ldr	r2, [sp, #4]
 800caee:	0018      	movs	r0, r3
 800caf0:	611a      	str	r2, [r3, #16]
 800caf2:	b009      	add	sp, #36	; 0x24
 800caf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800caf6:	c304      	stmia	r3!, {r2}
 800caf8:	e7de      	b.n	800cab8 <__multiply+0x40>
 800cafa:	8814      	ldrh	r4, [r2, #0]
 800cafc:	2c00      	cmp	r4, #0
 800cafe:	d01e      	beq.n	800cb3e <__multiply+0xc6>
 800cb00:	2600      	movs	r6, #0
 800cb02:	9d00      	ldr	r5, [sp, #0]
 800cb04:	9f02      	ldr	r7, [sp, #8]
 800cb06:	cf01      	ldmia	r7!, {r0}
 800cb08:	9507      	str	r5, [sp, #28]
 800cb0a:	cd08      	ldmia	r5!, {r3}
 800cb0c:	9303      	str	r3, [sp, #12]
 800cb0e:	b283      	uxth	r3, r0
 800cb10:	4363      	muls	r3, r4
 800cb12:	0019      	movs	r1, r3
 800cb14:	466b      	mov	r3, sp
 800cb16:	0c00      	lsrs	r0, r0, #16
 800cb18:	899b      	ldrh	r3, [r3, #12]
 800cb1a:	4360      	muls	r0, r4
 800cb1c:	18cb      	adds	r3, r1, r3
 800cb1e:	9903      	ldr	r1, [sp, #12]
 800cb20:	199b      	adds	r3, r3, r6
 800cb22:	0c09      	lsrs	r1, r1, #16
 800cb24:	1841      	adds	r1, r0, r1
 800cb26:	0c18      	lsrs	r0, r3, #16
 800cb28:	1809      	adds	r1, r1, r0
 800cb2a:	0c0e      	lsrs	r6, r1, #16
 800cb2c:	b29b      	uxth	r3, r3
 800cb2e:	0409      	lsls	r1, r1, #16
 800cb30:	430b      	orrs	r3, r1
 800cb32:	9907      	ldr	r1, [sp, #28]
 800cb34:	600b      	str	r3, [r1, #0]
 800cb36:	9b05      	ldr	r3, [sp, #20]
 800cb38:	42bb      	cmp	r3, r7
 800cb3a:	d8e4      	bhi.n	800cb06 <__multiply+0x8e>
 800cb3c:	602e      	str	r6, [r5, #0]
 800cb3e:	6813      	ldr	r3, [r2, #0]
 800cb40:	0c1b      	lsrs	r3, r3, #16
 800cb42:	9303      	str	r3, [sp, #12]
 800cb44:	d01e      	beq.n	800cb84 <__multiply+0x10c>
 800cb46:	2600      	movs	r6, #0
 800cb48:	9b00      	ldr	r3, [sp, #0]
 800cb4a:	9c02      	ldr	r4, [sp, #8]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	9800      	ldr	r0, [sp, #0]
 800cb50:	0007      	movs	r7, r0
 800cb52:	8821      	ldrh	r1, [r4, #0]
 800cb54:	9d03      	ldr	r5, [sp, #12]
 800cb56:	b29b      	uxth	r3, r3
 800cb58:	4369      	muls	r1, r5
 800cb5a:	c820      	ldmia	r0!, {r5}
 800cb5c:	0c2d      	lsrs	r5, r5, #16
 800cb5e:	1949      	adds	r1, r1, r5
 800cb60:	198e      	adds	r6, r1, r6
 800cb62:	0431      	lsls	r1, r6, #16
 800cb64:	430b      	orrs	r3, r1
 800cb66:	603b      	str	r3, [r7, #0]
 800cb68:	cc08      	ldmia	r4!, {r3}
 800cb6a:	9903      	ldr	r1, [sp, #12]
 800cb6c:	0c1b      	lsrs	r3, r3, #16
 800cb6e:	434b      	muls	r3, r1
 800cb70:	6879      	ldr	r1, [r7, #4]
 800cb72:	0c36      	lsrs	r6, r6, #16
 800cb74:	b289      	uxth	r1, r1
 800cb76:	185b      	adds	r3, r3, r1
 800cb78:	9905      	ldr	r1, [sp, #20]
 800cb7a:	199b      	adds	r3, r3, r6
 800cb7c:	0c1e      	lsrs	r6, r3, #16
 800cb7e:	42a1      	cmp	r1, r4
 800cb80:	d8e6      	bhi.n	800cb50 <__multiply+0xd8>
 800cb82:	6003      	str	r3, [r0, #0]
 800cb84:	9b00      	ldr	r3, [sp, #0]
 800cb86:	3204      	adds	r2, #4
 800cb88:	3304      	adds	r3, #4
 800cb8a:	9300      	str	r3, [sp, #0]
 800cb8c:	e7a0      	b.n	800cad0 <__multiply+0x58>
 800cb8e:	9b01      	ldr	r3, [sp, #4]
 800cb90:	3b01      	subs	r3, #1
 800cb92:	9301      	str	r3, [sp, #4]
 800cb94:	e79f      	b.n	800cad6 <__multiply+0x5e>
	...

0800cb98 <__pow5mult>:
 800cb98:	2303      	movs	r3, #3
 800cb9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb9c:	4013      	ands	r3, r2
 800cb9e:	0005      	movs	r5, r0
 800cba0:	000e      	movs	r6, r1
 800cba2:	0014      	movs	r4, r2
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d008      	beq.n	800cbba <__pow5mult+0x22>
 800cba8:	4922      	ldr	r1, [pc, #136]	; (800cc34 <__pow5mult+0x9c>)
 800cbaa:	3b01      	subs	r3, #1
 800cbac:	009a      	lsls	r2, r3, #2
 800cbae:	5852      	ldr	r2, [r2, r1]
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	0031      	movs	r1, r6
 800cbb4:	f7ff fed2 	bl	800c95c <__multadd>
 800cbb8:	0006      	movs	r6, r0
 800cbba:	10a3      	asrs	r3, r4, #2
 800cbbc:	9301      	str	r3, [sp, #4]
 800cbbe:	d036      	beq.n	800cc2e <__pow5mult+0x96>
 800cbc0:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800cbc2:	2c00      	cmp	r4, #0
 800cbc4:	d107      	bne.n	800cbd6 <__pow5mult+0x3e>
 800cbc6:	2010      	movs	r0, #16
 800cbc8:	f7fd fba4 	bl	800a314 <malloc>
 800cbcc:	6268      	str	r0, [r5, #36]	; 0x24
 800cbce:	6044      	str	r4, [r0, #4]
 800cbd0:	6084      	str	r4, [r0, #8]
 800cbd2:	6004      	str	r4, [r0, #0]
 800cbd4:	60c4      	str	r4, [r0, #12]
 800cbd6:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800cbd8:	68bc      	ldr	r4, [r7, #8]
 800cbda:	2c00      	cmp	r4, #0
 800cbdc:	d107      	bne.n	800cbee <__pow5mult+0x56>
 800cbde:	4916      	ldr	r1, [pc, #88]	; (800cc38 <__pow5mult+0xa0>)
 800cbe0:	0028      	movs	r0, r5
 800cbe2:	f7ff ff40 	bl	800ca66 <__i2b>
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	0004      	movs	r4, r0
 800cbea:	60b8      	str	r0, [r7, #8]
 800cbec:	6003      	str	r3, [r0, #0]
 800cbee:	2201      	movs	r2, #1
 800cbf0:	9b01      	ldr	r3, [sp, #4]
 800cbf2:	4213      	tst	r3, r2
 800cbf4:	d00a      	beq.n	800cc0c <__pow5mult+0x74>
 800cbf6:	0031      	movs	r1, r6
 800cbf8:	0022      	movs	r2, r4
 800cbfa:	0028      	movs	r0, r5
 800cbfc:	f7ff ff3c 	bl	800ca78 <__multiply>
 800cc00:	0007      	movs	r7, r0
 800cc02:	0031      	movs	r1, r6
 800cc04:	0028      	movs	r0, r5
 800cc06:	f7ff fe90 	bl	800c92a <_Bfree>
 800cc0a:	003e      	movs	r6, r7
 800cc0c:	9b01      	ldr	r3, [sp, #4]
 800cc0e:	105b      	asrs	r3, r3, #1
 800cc10:	9301      	str	r3, [sp, #4]
 800cc12:	d00c      	beq.n	800cc2e <__pow5mult+0x96>
 800cc14:	6820      	ldr	r0, [r4, #0]
 800cc16:	2800      	cmp	r0, #0
 800cc18:	d107      	bne.n	800cc2a <__pow5mult+0x92>
 800cc1a:	0022      	movs	r2, r4
 800cc1c:	0021      	movs	r1, r4
 800cc1e:	0028      	movs	r0, r5
 800cc20:	f7ff ff2a 	bl	800ca78 <__multiply>
 800cc24:	2300      	movs	r3, #0
 800cc26:	6020      	str	r0, [r4, #0]
 800cc28:	6003      	str	r3, [r0, #0]
 800cc2a:	0004      	movs	r4, r0
 800cc2c:	e7df      	b.n	800cbee <__pow5mult+0x56>
 800cc2e:	0030      	movs	r0, r6
 800cc30:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cc32:	46c0      	nop			; (mov r8, r8)
 800cc34:	0800da38 	.word	0x0800da38
 800cc38:	00000271 	.word	0x00000271

0800cc3c <__lshift>:
 800cc3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc3e:	000d      	movs	r5, r1
 800cc40:	0017      	movs	r7, r2
 800cc42:	692b      	ldr	r3, [r5, #16]
 800cc44:	1154      	asrs	r4, r2, #5
 800cc46:	b085      	sub	sp, #20
 800cc48:	18e3      	adds	r3, r4, r3
 800cc4a:	9302      	str	r3, [sp, #8]
 800cc4c:	3301      	adds	r3, #1
 800cc4e:	9301      	str	r3, [sp, #4]
 800cc50:	6849      	ldr	r1, [r1, #4]
 800cc52:	68ab      	ldr	r3, [r5, #8]
 800cc54:	9003      	str	r0, [sp, #12]
 800cc56:	9a01      	ldr	r2, [sp, #4]
 800cc58:	4293      	cmp	r3, r2
 800cc5a:	db34      	blt.n	800ccc6 <__lshift+0x8a>
 800cc5c:	9803      	ldr	r0, [sp, #12]
 800cc5e:	f7ff fe2c 	bl	800c8ba <_Balloc>
 800cc62:	2300      	movs	r3, #0
 800cc64:	0002      	movs	r2, r0
 800cc66:	0006      	movs	r6, r0
 800cc68:	0019      	movs	r1, r3
 800cc6a:	3214      	adds	r2, #20
 800cc6c:	42a3      	cmp	r3, r4
 800cc6e:	db2d      	blt.n	800cccc <__lshift+0x90>
 800cc70:	43e3      	mvns	r3, r4
 800cc72:	17db      	asrs	r3, r3, #31
 800cc74:	401c      	ands	r4, r3
 800cc76:	002b      	movs	r3, r5
 800cc78:	211f      	movs	r1, #31
 800cc7a:	00a4      	lsls	r4, r4, #2
 800cc7c:	1914      	adds	r4, r2, r4
 800cc7e:	692a      	ldr	r2, [r5, #16]
 800cc80:	3314      	adds	r3, #20
 800cc82:	0092      	lsls	r2, r2, #2
 800cc84:	189a      	adds	r2, r3, r2
 800cc86:	400f      	ands	r7, r1
 800cc88:	d024      	beq.n	800ccd4 <__lshift+0x98>
 800cc8a:	3101      	adds	r1, #1
 800cc8c:	1bc9      	subs	r1, r1, r7
 800cc8e:	468c      	mov	ip, r1
 800cc90:	2100      	movs	r1, #0
 800cc92:	6818      	ldr	r0, [r3, #0]
 800cc94:	40b8      	lsls	r0, r7
 800cc96:	4301      	orrs	r1, r0
 800cc98:	4660      	mov	r0, ip
 800cc9a:	6021      	str	r1, [r4, #0]
 800cc9c:	cb02      	ldmia	r3!, {r1}
 800cc9e:	3404      	adds	r4, #4
 800cca0:	40c1      	lsrs	r1, r0
 800cca2:	429a      	cmp	r2, r3
 800cca4:	d8f5      	bhi.n	800cc92 <__lshift+0x56>
 800cca6:	6021      	str	r1, [r4, #0]
 800cca8:	2900      	cmp	r1, #0
 800ccaa:	d002      	beq.n	800ccb2 <__lshift+0x76>
 800ccac:	9b02      	ldr	r3, [sp, #8]
 800ccae:	3302      	adds	r3, #2
 800ccb0:	9301      	str	r3, [sp, #4]
 800ccb2:	9b01      	ldr	r3, [sp, #4]
 800ccb4:	9803      	ldr	r0, [sp, #12]
 800ccb6:	3b01      	subs	r3, #1
 800ccb8:	6133      	str	r3, [r6, #16]
 800ccba:	0029      	movs	r1, r5
 800ccbc:	f7ff fe35 	bl	800c92a <_Bfree>
 800ccc0:	0030      	movs	r0, r6
 800ccc2:	b005      	add	sp, #20
 800ccc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccc6:	3101      	adds	r1, #1
 800ccc8:	005b      	lsls	r3, r3, #1
 800ccca:	e7c4      	b.n	800cc56 <__lshift+0x1a>
 800cccc:	0098      	lsls	r0, r3, #2
 800ccce:	5011      	str	r1, [r2, r0]
 800ccd0:	3301      	adds	r3, #1
 800ccd2:	e7cb      	b.n	800cc6c <__lshift+0x30>
 800ccd4:	cb02      	ldmia	r3!, {r1}
 800ccd6:	c402      	stmia	r4!, {r1}
 800ccd8:	429a      	cmp	r2, r3
 800ccda:	d8fb      	bhi.n	800ccd4 <__lshift+0x98>
 800ccdc:	e7e9      	b.n	800ccb2 <__lshift+0x76>

0800ccde <__mcmp>:
 800ccde:	690a      	ldr	r2, [r1, #16]
 800cce0:	6903      	ldr	r3, [r0, #16]
 800cce2:	b530      	push	{r4, r5, lr}
 800cce4:	1a9b      	subs	r3, r3, r2
 800cce6:	d10e      	bne.n	800cd06 <__mcmp+0x28>
 800cce8:	0092      	lsls	r2, r2, #2
 800ccea:	3014      	adds	r0, #20
 800ccec:	3114      	adds	r1, #20
 800ccee:	1884      	adds	r4, r0, r2
 800ccf0:	1889      	adds	r1, r1, r2
 800ccf2:	3c04      	subs	r4, #4
 800ccf4:	3904      	subs	r1, #4
 800ccf6:	6822      	ldr	r2, [r4, #0]
 800ccf8:	680d      	ldr	r5, [r1, #0]
 800ccfa:	42aa      	cmp	r2, r5
 800ccfc:	d005      	beq.n	800cd0a <__mcmp+0x2c>
 800ccfe:	42aa      	cmp	r2, r5
 800cd00:	4192      	sbcs	r2, r2
 800cd02:	2301      	movs	r3, #1
 800cd04:	4313      	orrs	r3, r2
 800cd06:	0018      	movs	r0, r3
 800cd08:	bd30      	pop	{r4, r5, pc}
 800cd0a:	42a0      	cmp	r0, r4
 800cd0c:	d3f1      	bcc.n	800ccf2 <__mcmp+0x14>
 800cd0e:	e7fa      	b.n	800cd06 <__mcmp+0x28>

0800cd10 <__mdiff>:
 800cd10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd12:	000d      	movs	r5, r1
 800cd14:	b085      	sub	sp, #20
 800cd16:	0007      	movs	r7, r0
 800cd18:	0011      	movs	r1, r2
 800cd1a:	0028      	movs	r0, r5
 800cd1c:	0014      	movs	r4, r2
 800cd1e:	f7ff ffde 	bl	800ccde <__mcmp>
 800cd22:	1e06      	subs	r6, r0, #0
 800cd24:	d108      	bne.n	800cd38 <__mdiff+0x28>
 800cd26:	0001      	movs	r1, r0
 800cd28:	0038      	movs	r0, r7
 800cd2a:	f7ff fdc6 	bl	800c8ba <_Balloc>
 800cd2e:	2301      	movs	r3, #1
 800cd30:	6146      	str	r6, [r0, #20]
 800cd32:	6103      	str	r3, [r0, #16]
 800cd34:	b005      	add	sp, #20
 800cd36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd38:	2301      	movs	r3, #1
 800cd3a:	9301      	str	r3, [sp, #4]
 800cd3c:	2800      	cmp	r0, #0
 800cd3e:	db04      	blt.n	800cd4a <__mdiff+0x3a>
 800cd40:	0023      	movs	r3, r4
 800cd42:	002c      	movs	r4, r5
 800cd44:	001d      	movs	r5, r3
 800cd46:	2300      	movs	r3, #0
 800cd48:	9301      	str	r3, [sp, #4]
 800cd4a:	6861      	ldr	r1, [r4, #4]
 800cd4c:	0038      	movs	r0, r7
 800cd4e:	f7ff fdb4 	bl	800c8ba <_Balloc>
 800cd52:	002f      	movs	r7, r5
 800cd54:	2200      	movs	r2, #0
 800cd56:	9b01      	ldr	r3, [sp, #4]
 800cd58:	6926      	ldr	r6, [r4, #16]
 800cd5a:	60c3      	str	r3, [r0, #12]
 800cd5c:	3414      	adds	r4, #20
 800cd5e:	00b3      	lsls	r3, r6, #2
 800cd60:	18e3      	adds	r3, r4, r3
 800cd62:	9302      	str	r3, [sp, #8]
 800cd64:	692b      	ldr	r3, [r5, #16]
 800cd66:	3714      	adds	r7, #20
 800cd68:	009b      	lsls	r3, r3, #2
 800cd6a:	18fb      	adds	r3, r7, r3
 800cd6c:	9303      	str	r3, [sp, #12]
 800cd6e:	0003      	movs	r3, r0
 800cd70:	4694      	mov	ip, r2
 800cd72:	3314      	adds	r3, #20
 800cd74:	cc20      	ldmia	r4!, {r5}
 800cd76:	cf04      	ldmia	r7!, {r2}
 800cd78:	9201      	str	r2, [sp, #4]
 800cd7a:	b2aa      	uxth	r2, r5
 800cd7c:	4494      	add	ip, r2
 800cd7e:	466a      	mov	r2, sp
 800cd80:	4661      	mov	r1, ip
 800cd82:	8892      	ldrh	r2, [r2, #4]
 800cd84:	0c2d      	lsrs	r5, r5, #16
 800cd86:	1a8a      	subs	r2, r1, r2
 800cd88:	9901      	ldr	r1, [sp, #4]
 800cd8a:	0c09      	lsrs	r1, r1, #16
 800cd8c:	1a69      	subs	r1, r5, r1
 800cd8e:	1415      	asrs	r5, r2, #16
 800cd90:	1949      	adds	r1, r1, r5
 800cd92:	140d      	asrs	r5, r1, #16
 800cd94:	b292      	uxth	r2, r2
 800cd96:	0409      	lsls	r1, r1, #16
 800cd98:	430a      	orrs	r2, r1
 800cd9a:	601a      	str	r2, [r3, #0]
 800cd9c:	9a03      	ldr	r2, [sp, #12]
 800cd9e:	46ac      	mov	ip, r5
 800cda0:	3304      	adds	r3, #4
 800cda2:	42ba      	cmp	r2, r7
 800cda4:	d8e6      	bhi.n	800cd74 <__mdiff+0x64>
 800cda6:	9902      	ldr	r1, [sp, #8]
 800cda8:	001a      	movs	r2, r3
 800cdaa:	428c      	cmp	r4, r1
 800cdac:	d305      	bcc.n	800cdba <__mdiff+0xaa>
 800cdae:	3a04      	subs	r2, #4
 800cdb0:	6813      	ldr	r3, [r2, #0]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d00e      	beq.n	800cdd4 <__mdiff+0xc4>
 800cdb6:	6106      	str	r6, [r0, #16]
 800cdb8:	e7bc      	b.n	800cd34 <__mdiff+0x24>
 800cdba:	cc04      	ldmia	r4!, {r2}
 800cdbc:	b291      	uxth	r1, r2
 800cdbe:	4461      	add	r1, ip
 800cdc0:	140d      	asrs	r5, r1, #16
 800cdc2:	0c12      	lsrs	r2, r2, #16
 800cdc4:	1952      	adds	r2, r2, r5
 800cdc6:	1415      	asrs	r5, r2, #16
 800cdc8:	b289      	uxth	r1, r1
 800cdca:	0412      	lsls	r2, r2, #16
 800cdcc:	430a      	orrs	r2, r1
 800cdce:	46ac      	mov	ip, r5
 800cdd0:	c304      	stmia	r3!, {r2}
 800cdd2:	e7e8      	b.n	800cda6 <__mdiff+0x96>
 800cdd4:	3e01      	subs	r6, #1
 800cdd6:	e7ea      	b.n	800cdae <__mdiff+0x9e>

0800cdd8 <__d2b>:
 800cdd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cdda:	001d      	movs	r5, r3
 800cddc:	2101      	movs	r1, #1
 800cdde:	9f08      	ldr	r7, [sp, #32]
 800cde0:	0014      	movs	r4, r2
 800cde2:	f7ff fd6a 	bl	800c8ba <_Balloc>
 800cde6:	032b      	lsls	r3, r5, #12
 800cde8:	006d      	lsls	r5, r5, #1
 800cdea:	0006      	movs	r6, r0
 800cdec:	0b1b      	lsrs	r3, r3, #12
 800cdee:	0d6d      	lsrs	r5, r5, #21
 800cdf0:	d124      	bne.n	800ce3c <__d2b+0x64>
 800cdf2:	9301      	str	r3, [sp, #4]
 800cdf4:	2c00      	cmp	r4, #0
 800cdf6:	d027      	beq.n	800ce48 <__d2b+0x70>
 800cdf8:	4668      	mov	r0, sp
 800cdfa:	9400      	str	r4, [sp, #0]
 800cdfc:	f7ff fe04 	bl	800ca08 <__lo0bits>
 800ce00:	9c00      	ldr	r4, [sp, #0]
 800ce02:	2800      	cmp	r0, #0
 800ce04:	d01e      	beq.n	800ce44 <__d2b+0x6c>
 800ce06:	9b01      	ldr	r3, [sp, #4]
 800ce08:	2120      	movs	r1, #32
 800ce0a:	001a      	movs	r2, r3
 800ce0c:	1a09      	subs	r1, r1, r0
 800ce0e:	408a      	lsls	r2, r1
 800ce10:	40c3      	lsrs	r3, r0
 800ce12:	4322      	orrs	r2, r4
 800ce14:	6172      	str	r2, [r6, #20]
 800ce16:	9301      	str	r3, [sp, #4]
 800ce18:	9c01      	ldr	r4, [sp, #4]
 800ce1a:	61b4      	str	r4, [r6, #24]
 800ce1c:	1e63      	subs	r3, r4, #1
 800ce1e:	419c      	sbcs	r4, r3
 800ce20:	3401      	adds	r4, #1
 800ce22:	6134      	str	r4, [r6, #16]
 800ce24:	2d00      	cmp	r5, #0
 800ce26:	d018      	beq.n	800ce5a <__d2b+0x82>
 800ce28:	4b12      	ldr	r3, [pc, #72]	; (800ce74 <__d2b+0x9c>)
 800ce2a:	18ed      	adds	r5, r5, r3
 800ce2c:	2335      	movs	r3, #53	; 0x35
 800ce2e:	182d      	adds	r5, r5, r0
 800ce30:	603d      	str	r5, [r7, #0]
 800ce32:	1a18      	subs	r0, r3, r0
 800ce34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce36:	6018      	str	r0, [r3, #0]
 800ce38:	0030      	movs	r0, r6
 800ce3a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ce3c:	2280      	movs	r2, #128	; 0x80
 800ce3e:	0352      	lsls	r2, r2, #13
 800ce40:	4313      	orrs	r3, r2
 800ce42:	e7d6      	b.n	800cdf2 <__d2b+0x1a>
 800ce44:	6174      	str	r4, [r6, #20]
 800ce46:	e7e7      	b.n	800ce18 <__d2b+0x40>
 800ce48:	a801      	add	r0, sp, #4
 800ce4a:	f7ff fddd 	bl	800ca08 <__lo0bits>
 800ce4e:	2401      	movs	r4, #1
 800ce50:	9b01      	ldr	r3, [sp, #4]
 800ce52:	6134      	str	r4, [r6, #16]
 800ce54:	6173      	str	r3, [r6, #20]
 800ce56:	3020      	adds	r0, #32
 800ce58:	e7e4      	b.n	800ce24 <__d2b+0x4c>
 800ce5a:	4b07      	ldr	r3, [pc, #28]	; (800ce78 <__d2b+0xa0>)
 800ce5c:	18c0      	adds	r0, r0, r3
 800ce5e:	4b07      	ldr	r3, [pc, #28]	; (800ce7c <__d2b+0xa4>)
 800ce60:	6038      	str	r0, [r7, #0]
 800ce62:	18e3      	adds	r3, r4, r3
 800ce64:	009b      	lsls	r3, r3, #2
 800ce66:	18f3      	adds	r3, r6, r3
 800ce68:	6958      	ldr	r0, [r3, #20]
 800ce6a:	f7ff fdb3 	bl	800c9d4 <__hi0bits>
 800ce6e:	0164      	lsls	r4, r4, #5
 800ce70:	1a20      	subs	r0, r4, r0
 800ce72:	e7df      	b.n	800ce34 <__d2b+0x5c>
 800ce74:	fffffbcd 	.word	0xfffffbcd
 800ce78:	fffffbce 	.word	0xfffffbce
 800ce7c:	3fffffff 	.word	0x3fffffff

0800ce80 <__ssprint_r>:
 800ce80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce82:	6893      	ldr	r3, [r2, #8]
 800ce84:	b087      	sub	sp, #28
 800ce86:	9002      	str	r0, [sp, #8]
 800ce88:	000c      	movs	r4, r1
 800ce8a:	0016      	movs	r6, r2
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d063      	beq.n	800cf58 <__ssprint_r+0xd8>
 800ce90:	6813      	ldr	r3, [r2, #0]
 800ce92:	9303      	str	r3, [sp, #12]
 800ce94:	2300      	movs	r3, #0
 800ce96:	001f      	movs	r7, r3
 800ce98:	9305      	str	r3, [sp, #20]
 800ce9a:	2f00      	cmp	r7, #0
 800ce9c:	d02e      	beq.n	800cefc <__ssprint_r+0x7c>
 800ce9e:	68a5      	ldr	r5, [r4, #8]
 800cea0:	42af      	cmp	r7, r5
 800cea2:	d349      	bcc.n	800cf38 <__ssprint_r+0xb8>
 800cea4:	2390      	movs	r3, #144	; 0x90
 800cea6:	89a2      	ldrh	r2, [r4, #12]
 800cea8:	00db      	lsls	r3, r3, #3
 800ceaa:	421a      	tst	r2, r3
 800ceac:	d042      	beq.n	800cf34 <__ssprint_r+0xb4>
 800ceae:	2003      	movs	r0, #3
 800ceb0:	6921      	ldr	r1, [r4, #16]
 800ceb2:	6823      	ldr	r3, [r4, #0]
 800ceb4:	1a5b      	subs	r3, r3, r1
 800ceb6:	9304      	str	r3, [sp, #16]
 800ceb8:	6963      	ldr	r3, [r4, #20]
 800ceba:	4343      	muls	r3, r0
 800cebc:	0fd8      	lsrs	r0, r3, #31
 800cebe:	18c3      	adds	r3, r0, r3
 800cec0:	105b      	asrs	r3, r3, #1
 800cec2:	9301      	str	r3, [sp, #4]
 800cec4:	9b04      	ldr	r3, [sp, #16]
 800cec6:	9801      	ldr	r0, [sp, #4]
 800cec8:	3301      	adds	r3, #1
 800ceca:	19db      	adds	r3, r3, r7
 800cecc:	4283      	cmp	r3, r0
 800cece:	d900      	bls.n	800ced2 <__ssprint_r+0x52>
 800ced0:	9301      	str	r3, [sp, #4]
 800ced2:	0553      	lsls	r3, r2, #21
 800ced4:	d544      	bpl.n	800cf60 <__ssprint_r+0xe0>
 800ced6:	9901      	ldr	r1, [sp, #4]
 800ced8:	9802      	ldr	r0, [sp, #8]
 800ceda:	f7fd fa25 	bl	800a328 <_malloc_r>
 800cede:	1e05      	subs	r5, r0, #0
 800cee0:	d114      	bne.n	800cf0c <__ssprint_r+0x8c>
 800cee2:	230c      	movs	r3, #12
 800cee4:	9a02      	ldr	r2, [sp, #8]
 800cee6:	2001      	movs	r0, #1
 800cee8:	6013      	str	r3, [r2, #0]
 800ceea:	2340      	movs	r3, #64	; 0x40
 800ceec:	89a2      	ldrh	r2, [r4, #12]
 800ceee:	4240      	negs	r0, r0
 800cef0:	4313      	orrs	r3, r2
 800cef2:	81a3      	strh	r3, [r4, #12]
 800cef4:	2300      	movs	r3, #0
 800cef6:	60b3      	str	r3, [r6, #8]
 800cef8:	6073      	str	r3, [r6, #4]
 800cefa:	e02f      	b.n	800cf5c <__ssprint_r+0xdc>
 800cefc:	9b03      	ldr	r3, [sp, #12]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	9305      	str	r3, [sp, #20]
 800cf02:	9b03      	ldr	r3, [sp, #12]
 800cf04:	685f      	ldr	r7, [r3, #4]
 800cf06:	3308      	adds	r3, #8
 800cf08:	9303      	str	r3, [sp, #12]
 800cf0a:	e7c6      	b.n	800ce9a <__ssprint_r+0x1a>
 800cf0c:	9a04      	ldr	r2, [sp, #16]
 800cf0e:	6921      	ldr	r1, [r4, #16]
 800cf10:	f7fd fc0e 	bl	800a730 <memcpy>
 800cf14:	89a3      	ldrh	r3, [r4, #12]
 800cf16:	4a18      	ldr	r2, [pc, #96]	; (800cf78 <__ssprint_r+0xf8>)
 800cf18:	401a      	ands	r2, r3
 800cf1a:	2380      	movs	r3, #128	; 0x80
 800cf1c:	4313      	orrs	r3, r2
 800cf1e:	81a3      	strh	r3, [r4, #12]
 800cf20:	9b04      	ldr	r3, [sp, #16]
 800cf22:	6125      	str	r5, [r4, #16]
 800cf24:	18ed      	adds	r5, r5, r3
 800cf26:	6025      	str	r5, [r4, #0]
 800cf28:	003d      	movs	r5, r7
 800cf2a:	9b01      	ldr	r3, [sp, #4]
 800cf2c:	9a04      	ldr	r2, [sp, #16]
 800cf2e:	6163      	str	r3, [r4, #20]
 800cf30:	1a9b      	subs	r3, r3, r2
 800cf32:	60a3      	str	r3, [r4, #8]
 800cf34:	42af      	cmp	r7, r5
 800cf36:	d200      	bcs.n	800cf3a <__ssprint_r+0xba>
 800cf38:	003d      	movs	r5, r7
 800cf3a:	002a      	movs	r2, r5
 800cf3c:	9905      	ldr	r1, [sp, #20]
 800cf3e:	6820      	ldr	r0, [r4, #0]
 800cf40:	f000 f828 	bl	800cf94 <memmove>
 800cf44:	68a3      	ldr	r3, [r4, #8]
 800cf46:	1b5b      	subs	r3, r3, r5
 800cf48:	60a3      	str	r3, [r4, #8]
 800cf4a:	6823      	ldr	r3, [r4, #0]
 800cf4c:	195d      	adds	r5, r3, r5
 800cf4e:	68b3      	ldr	r3, [r6, #8]
 800cf50:	6025      	str	r5, [r4, #0]
 800cf52:	1bdb      	subs	r3, r3, r7
 800cf54:	60b3      	str	r3, [r6, #8]
 800cf56:	d1d1      	bne.n	800cefc <__ssprint_r+0x7c>
 800cf58:	2000      	movs	r0, #0
 800cf5a:	6070      	str	r0, [r6, #4]
 800cf5c:	b007      	add	sp, #28
 800cf5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf60:	9a01      	ldr	r2, [sp, #4]
 800cf62:	9802      	ldr	r0, [sp, #8]
 800cf64:	f000 f828 	bl	800cfb8 <_realloc_r>
 800cf68:	1e05      	subs	r5, r0, #0
 800cf6a:	d1d9      	bne.n	800cf20 <__ssprint_r+0xa0>
 800cf6c:	6921      	ldr	r1, [r4, #16]
 800cf6e:	9802      	ldr	r0, [sp, #8]
 800cf70:	f7ff fbc4 	bl	800c6fc <_free_r>
 800cf74:	e7b5      	b.n	800cee2 <__ssprint_r+0x62>
 800cf76:	46c0      	nop			; (mov r8, r8)
 800cf78:	fffffb7f 	.word	0xfffffb7f

0800cf7c <__ascii_wctomb>:
 800cf7c:	1e0b      	subs	r3, r1, #0
 800cf7e:	d004      	beq.n	800cf8a <__ascii_wctomb+0xe>
 800cf80:	2aff      	cmp	r2, #255	; 0xff
 800cf82:	d904      	bls.n	800cf8e <__ascii_wctomb+0x12>
 800cf84:	238a      	movs	r3, #138	; 0x8a
 800cf86:	6003      	str	r3, [r0, #0]
 800cf88:	3b8b      	subs	r3, #139	; 0x8b
 800cf8a:	0018      	movs	r0, r3
 800cf8c:	4770      	bx	lr
 800cf8e:	700a      	strb	r2, [r1, #0]
 800cf90:	2301      	movs	r3, #1
 800cf92:	e7fa      	b.n	800cf8a <__ascii_wctomb+0xe>

0800cf94 <memmove>:
 800cf94:	b510      	push	{r4, lr}
 800cf96:	4288      	cmp	r0, r1
 800cf98:	d902      	bls.n	800cfa0 <memmove+0xc>
 800cf9a:	188b      	adds	r3, r1, r2
 800cf9c:	4298      	cmp	r0, r3
 800cf9e:	d308      	bcc.n	800cfb2 <memmove+0x1e>
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	429a      	cmp	r2, r3
 800cfa4:	d007      	beq.n	800cfb6 <memmove+0x22>
 800cfa6:	5ccc      	ldrb	r4, [r1, r3]
 800cfa8:	54c4      	strb	r4, [r0, r3]
 800cfaa:	3301      	adds	r3, #1
 800cfac:	e7f9      	b.n	800cfa2 <memmove+0xe>
 800cfae:	5c8b      	ldrb	r3, [r1, r2]
 800cfb0:	5483      	strb	r3, [r0, r2]
 800cfb2:	3a01      	subs	r2, #1
 800cfb4:	d2fb      	bcs.n	800cfae <memmove+0x1a>
 800cfb6:	bd10      	pop	{r4, pc}

0800cfb8 <_realloc_r>:
 800cfb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cfba:	b087      	sub	sp, #28
 800cfbc:	9002      	str	r0, [sp, #8]
 800cfbe:	1e0c      	subs	r4, r1, #0
 800cfc0:	9204      	str	r2, [sp, #16]
 800cfc2:	d106      	bne.n	800cfd2 <_realloc_r+0x1a>
 800cfc4:	0011      	movs	r1, r2
 800cfc6:	f7fd f9af 	bl	800a328 <_malloc_r>
 800cfca:	0006      	movs	r6, r0
 800cfcc:	0030      	movs	r0, r6
 800cfce:	b007      	add	sp, #28
 800cfd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfd2:	0027      	movs	r7, r4
 800cfd4:	9802      	ldr	r0, [sp, #8]
 800cfd6:	3f08      	subs	r7, #8
 800cfd8:	f7fd fbbc 	bl	800a754 <__malloc_lock>
 800cfdc:	6878      	ldr	r0, [r7, #4]
 800cfde:	2303      	movs	r3, #3
 800cfe0:	0002      	movs	r2, r0
 800cfe2:	9e04      	ldr	r6, [sp, #16]
 800cfe4:	439a      	bics	r2, r3
 800cfe6:	360b      	adds	r6, #11
 800cfe8:	9203      	str	r2, [sp, #12]
 800cfea:	2e16      	cmp	r6, #22
 800cfec:	d908      	bls.n	800d000 <_realloc_r+0x48>
 800cfee:	3304      	adds	r3, #4
 800cff0:	439e      	bics	r6, r3
 800cff2:	9601      	str	r6, [sp, #4]
 800cff4:	d506      	bpl.n	800d004 <_realloc_r+0x4c>
 800cff6:	230c      	movs	r3, #12
 800cff8:	9a02      	ldr	r2, [sp, #8]
 800cffa:	2600      	movs	r6, #0
 800cffc:	6013      	str	r3, [r2, #0]
 800cffe:	e7e5      	b.n	800cfcc <_realloc_r+0x14>
 800d000:	2310      	movs	r3, #16
 800d002:	9301      	str	r3, [sp, #4]
 800d004:	9b01      	ldr	r3, [sp, #4]
 800d006:	9a04      	ldr	r2, [sp, #16]
 800d008:	4293      	cmp	r3, r2
 800d00a:	d3f4      	bcc.n	800cff6 <_realloc_r+0x3e>
 800d00c:	9b01      	ldr	r3, [sp, #4]
 800d00e:	9a03      	ldr	r2, [sp, #12]
 800d010:	4293      	cmp	r3, r2
 800d012:	dc00      	bgt.n	800d016 <_realloc_r+0x5e>
 800d014:	e141      	b.n	800d29a <_realloc_r+0x2e2>
 800d016:	18bb      	adds	r3, r7, r2
 800d018:	4aa4      	ldr	r2, [pc, #656]	; (800d2ac <_realloc_r+0x2f4>)
 800d01a:	6891      	ldr	r1, [r2, #8]
 800d01c:	468c      	mov	ip, r1
 800d01e:	428b      	cmp	r3, r1
 800d020:	d006      	beq.n	800d030 <_realloc_r+0x78>
 800d022:	2501      	movs	r5, #1
 800d024:	6859      	ldr	r1, [r3, #4]
 800d026:	43a9      	bics	r1, r5
 800d028:	1859      	adds	r1, r3, r1
 800d02a:	6849      	ldr	r1, [r1, #4]
 800d02c:	4229      	tst	r1, r5
 800d02e:	d142      	bne.n	800d0b6 <_realloc_r+0xfe>
 800d030:	2103      	movs	r1, #3
 800d032:	685d      	ldr	r5, [r3, #4]
 800d034:	438d      	bics	r5, r1
 800d036:	0029      	movs	r1, r5
 800d038:	9d03      	ldr	r5, [sp, #12]
 800d03a:	186e      	adds	r6, r5, r1
 800d03c:	4563      	cmp	r3, ip
 800d03e:	d116      	bne.n	800d06e <_realloc_r+0xb6>
 800d040:	9d01      	ldr	r5, [sp, #4]
 800d042:	3510      	adds	r5, #16
 800d044:	42ae      	cmp	r6, r5
 800d046:	db38      	blt.n	800d0ba <_realloc_r+0x102>
 800d048:	9b01      	ldr	r3, [sp, #4]
 800d04a:	9802      	ldr	r0, [sp, #8]
 800d04c:	18ff      	adds	r7, r7, r3
 800d04e:	6097      	str	r7, [r2, #8]
 800d050:	2201      	movs	r2, #1
 800d052:	1af6      	subs	r6, r6, r3
 800d054:	0023      	movs	r3, r4
 800d056:	4316      	orrs	r6, r2
 800d058:	607e      	str	r6, [r7, #4]
 800d05a:	3b08      	subs	r3, #8
 800d05c:	685e      	ldr	r6, [r3, #4]
 800d05e:	4016      	ands	r6, r2
 800d060:	9a01      	ldr	r2, [sp, #4]
 800d062:	4316      	orrs	r6, r2
 800d064:	605e      	str	r6, [r3, #4]
 800d066:	f7fd fb7d 	bl	800a764 <__malloc_unlock>
 800d06a:	0026      	movs	r6, r4
 800d06c:	e7ae      	b.n	800cfcc <_realloc_r+0x14>
 800d06e:	9a01      	ldr	r2, [sp, #4]
 800d070:	42b2      	cmp	r2, r6
 800d072:	dc22      	bgt.n	800d0ba <_realloc_r+0x102>
 800d074:	68da      	ldr	r2, [r3, #12]
 800d076:	689b      	ldr	r3, [r3, #8]
 800d078:	60da      	str	r2, [r3, #12]
 800d07a:	6093      	str	r3, [r2, #8]
 800d07c:	9b01      	ldr	r3, [sp, #4]
 800d07e:	2201      	movs	r2, #1
 800d080:	1af4      	subs	r4, r6, r3
 800d082:	19b8      	adds	r0, r7, r6
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2c0f      	cmp	r4, #15
 800d088:	d800      	bhi.n	800d08c <_realloc_r+0xd4>
 800d08a:	e108      	b.n	800d29e <_realloc_r+0x2e6>
 800d08c:	9901      	ldr	r1, [sp, #4]
 800d08e:	9d01      	ldr	r5, [sp, #4]
 800d090:	4013      	ands	r3, r2
 800d092:	1879      	adds	r1, r7, r1
 800d094:	432b      	orrs	r3, r5
 800d096:	4314      	orrs	r4, r2
 800d098:	607b      	str	r3, [r7, #4]
 800d09a:	604c      	str	r4, [r1, #4]
 800d09c:	6843      	ldr	r3, [r0, #4]
 800d09e:	3108      	adds	r1, #8
 800d0a0:	431a      	orrs	r2, r3
 800d0a2:	6042      	str	r2, [r0, #4]
 800d0a4:	9802      	ldr	r0, [sp, #8]
 800d0a6:	f7ff fb29 	bl	800c6fc <_free_r>
 800d0aa:	003e      	movs	r6, r7
 800d0ac:	9802      	ldr	r0, [sp, #8]
 800d0ae:	f7fd fb59 	bl	800a764 <__malloc_unlock>
 800d0b2:	3608      	adds	r6, #8
 800d0b4:	e78a      	b.n	800cfcc <_realloc_r+0x14>
 800d0b6:	2100      	movs	r1, #0
 800d0b8:	000b      	movs	r3, r1
 800d0ba:	07c2      	lsls	r2, r0, #31
 800d0bc:	d500      	bpl.n	800d0c0 <_realloc_r+0x108>
 800d0be:	e088      	b.n	800d1d2 <_realloc_r+0x21a>
 800d0c0:	0022      	movs	r2, r4
 800d0c2:	3a08      	subs	r2, #8
 800d0c4:	6815      	ldr	r5, [r2, #0]
 800d0c6:	2203      	movs	r2, #3
 800d0c8:	1b7d      	subs	r5, r7, r5
 800d0ca:	6868      	ldr	r0, [r5, #4]
 800d0cc:	4390      	bics	r0, r2
 800d0ce:	0002      	movs	r2, r0
 800d0d0:	9803      	ldr	r0, [sp, #12]
 800d0d2:	1882      	adds	r2, r0, r2
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d078      	beq.n	800d1ca <_realloc_r+0x212>
 800d0d8:	4563      	cmp	r3, ip
 800d0da:	d150      	bne.n	800d17e <_realloc_r+0x1c6>
 800d0dc:	1853      	adds	r3, r2, r1
 800d0de:	9305      	str	r3, [sp, #20]
 800d0e0:	9b01      	ldr	r3, [sp, #4]
 800d0e2:	9905      	ldr	r1, [sp, #20]
 800d0e4:	3310      	adds	r3, #16
 800d0e6:	4299      	cmp	r1, r3
 800d0e8:	db6f      	blt.n	800d1ca <_realloc_r+0x212>
 800d0ea:	68aa      	ldr	r2, [r5, #8]
 800d0ec:	68eb      	ldr	r3, [r5, #12]
 800d0ee:	002e      	movs	r6, r5
 800d0f0:	60d3      	str	r3, [r2, #12]
 800d0f2:	609a      	str	r2, [r3, #8]
 800d0f4:	0002      	movs	r2, r0
 800d0f6:	3a04      	subs	r2, #4
 800d0f8:	3608      	adds	r6, #8
 800d0fa:	2a24      	cmp	r2, #36	; 0x24
 800d0fc:	d83a      	bhi.n	800d174 <_realloc_r+0x1bc>
 800d0fe:	2a13      	cmp	r2, #19
 800d100:	d935      	bls.n	800d16e <_realloc_r+0x1b6>
 800d102:	6823      	ldr	r3, [r4, #0]
 800d104:	60ab      	str	r3, [r5, #8]
 800d106:	6863      	ldr	r3, [r4, #4]
 800d108:	60eb      	str	r3, [r5, #12]
 800d10a:	2a1b      	cmp	r2, #27
 800d10c:	d81b      	bhi.n	800d146 <_realloc_r+0x18e>
 800d10e:	002b      	movs	r3, r5
 800d110:	0022      	movs	r2, r4
 800d112:	3310      	adds	r3, #16
 800d114:	3208      	adds	r2, #8
 800d116:	6811      	ldr	r1, [r2, #0]
 800d118:	6019      	str	r1, [r3, #0]
 800d11a:	6851      	ldr	r1, [r2, #4]
 800d11c:	6059      	str	r1, [r3, #4]
 800d11e:	6892      	ldr	r2, [r2, #8]
 800d120:	609a      	str	r2, [r3, #8]
 800d122:	9b01      	ldr	r3, [sp, #4]
 800d124:	9901      	ldr	r1, [sp, #4]
 800d126:	18ea      	adds	r2, r5, r3
 800d128:	4b60      	ldr	r3, [pc, #384]	; (800d2ac <_realloc_r+0x2f4>)
 800d12a:	609a      	str	r2, [r3, #8]
 800d12c:	9b05      	ldr	r3, [sp, #20]
 800d12e:	1a5f      	subs	r7, r3, r1
 800d130:	2301      	movs	r3, #1
 800d132:	431f      	orrs	r7, r3
 800d134:	6057      	str	r7, [r2, #4]
 800d136:	686a      	ldr	r2, [r5, #4]
 800d138:	4013      	ands	r3, r2
 800d13a:	430b      	orrs	r3, r1
 800d13c:	606b      	str	r3, [r5, #4]
 800d13e:	9802      	ldr	r0, [sp, #8]
 800d140:	f7fd fb10 	bl	800a764 <__malloc_unlock>
 800d144:	e742      	b.n	800cfcc <_realloc_r+0x14>
 800d146:	68a3      	ldr	r3, [r4, #8]
 800d148:	612b      	str	r3, [r5, #16]
 800d14a:	68e3      	ldr	r3, [r4, #12]
 800d14c:	616b      	str	r3, [r5, #20]
 800d14e:	2a24      	cmp	r2, #36	; 0x24
 800d150:	d004      	beq.n	800d15c <_realloc_r+0x1a4>
 800d152:	002b      	movs	r3, r5
 800d154:	0022      	movs	r2, r4
 800d156:	3318      	adds	r3, #24
 800d158:	3210      	adds	r2, #16
 800d15a:	e7dc      	b.n	800d116 <_realloc_r+0x15e>
 800d15c:	6923      	ldr	r3, [r4, #16]
 800d15e:	0022      	movs	r2, r4
 800d160:	61ab      	str	r3, [r5, #24]
 800d162:	002b      	movs	r3, r5
 800d164:	6961      	ldr	r1, [r4, #20]
 800d166:	3320      	adds	r3, #32
 800d168:	3218      	adds	r2, #24
 800d16a:	61e9      	str	r1, [r5, #28]
 800d16c:	e7d3      	b.n	800d116 <_realloc_r+0x15e>
 800d16e:	0033      	movs	r3, r6
 800d170:	0022      	movs	r2, r4
 800d172:	e7d0      	b.n	800d116 <_realloc_r+0x15e>
 800d174:	0021      	movs	r1, r4
 800d176:	0030      	movs	r0, r6
 800d178:	f7ff ff0c 	bl	800cf94 <memmove>
 800d17c:	e7d1      	b.n	800d122 <_realloc_r+0x16a>
 800d17e:	1856      	adds	r6, r2, r1
 800d180:	9901      	ldr	r1, [sp, #4]
 800d182:	42b1      	cmp	r1, r6
 800d184:	dc21      	bgt.n	800d1ca <_realloc_r+0x212>
 800d186:	68da      	ldr	r2, [r3, #12]
 800d188:	689b      	ldr	r3, [r3, #8]
 800d18a:	60da      	str	r2, [r3, #12]
 800d18c:	6093      	str	r3, [r2, #8]
 800d18e:	0028      	movs	r0, r5
 800d190:	68aa      	ldr	r2, [r5, #8]
 800d192:	68eb      	ldr	r3, [r5, #12]
 800d194:	3008      	adds	r0, #8
 800d196:	60d3      	str	r3, [r2, #12]
 800d198:	609a      	str	r2, [r3, #8]
 800d19a:	9a03      	ldr	r2, [sp, #12]
 800d19c:	3a04      	subs	r2, #4
 800d19e:	2a24      	cmp	r2, #36	; 0x24
 800d1a0:	d841      	bhi.n	800d226 <_realloc_r+0x26e>
 800d1a2:	0023      	movs	r3, r4
 800d1a4:	2a13      	cmp	r2, #19
 800d1a6:	d908      	bls.n	800d1ba <_realloc_r+0x202>
 800d1a8:	6823      	ldr	r3, [r4, #0]
 800d1aa:	60ab      	str	r3, [r5, #8]
 800d1ac:	6863      	ldr	r3, [r4, #4]
 800d1ae:	60eb      	str	r3, [r5, #12]
 800d1b0:	2a1b      	cmp	r2, #27
 800d1b2:	d824      	bhi.n	800d1fe <_realloc_r+0x246>
 800d1b4:	0023      	movs	r3, r4
 800d1b6:	3008      	adds	r0, #8
 800d1b8:	3308      	adds	r3, #8
 800d1ba:	681a      	ldr	r2, [r3, #0]
 800d1bc:	6002      	str	r2, [r0, #0]
 800d1be:	685a      	ldr	r2, [r3, #4]
 800d1c0:	6042      	str	r2, [r0, #4]
 800d1c2:	689b      	ldr	r3, [r3, #8]
 800d1c4:	6083      	str	r3, [r0, #8]
 800d1c6:	002f      	movs	r7, r5
 800d1c8:	e758      	b.n	800d07c <_realloc_r+0xc4>
 800d1ca:	9b01      	ldr	r3, [sp, #4]
 800d1cc:	0016      	movs	r6, r2
 800d1ce:	4293      	cmp	r3, r2
 800d1d0:	dddd      	ble.n	800d18e <_realloc_r+0x1d6>
 800d1d2:	9904      	ldr	r1, [sp, #16]
 800d1d4:	9802      	ldr	r0, [sp, #8]
 800d1d6:	f7fd f8a7 	bl	800a328 <_malloc_r>
 800d1da:	1e06      	subs	r6, r0, #0
 800d1dc:	d0af      	beq.n	800d13e <_realloc_r+0x186>
 800d1de:	0023      	movs	r3, r4
 800d1e0:	2101      	movs	r1, #1
 800d1e2:	0002      	movs	r2, r0
 800d1e4:	3b08      	subs	r3, #8
 800d1e6:	685b      	ldr	r3, [r3, #4]
 800d1e8:	3a08      	subs	r2, #8
 800d1ea:	438b      	bics	r3, r1
 800d1ec:	18fb      	adds	r3, r7, r3
 800d1ee:	429a      	cmp	r2, r3
 800d1f0:	d11d      	bne.n	800d22e <_realloc_r+0x276>
 800d1f2:	2303      	movs	r3, #3
 800d1f4:	6856      	ldr	r6, [r2, #4]
 800d1f6:	439e      	bics	r6, r3
 800d1f8:	9b03      	ldr	r3, [sp, #12]
 800d1fa:	18f6      	adds	r6, r6, r3
 800d1fc:	e73e      	b.n	800d07c <_realloc_r+0xc4>
 800d1fe:	68a3      	ldr	r3, [r4, #8]
 800d200:	612b      	str	r3, [r5, #16]
 800d202:	68e3      	ldr	r3, [r4, #12]
 800d204:	616b      	str	r3, [r5, #20]
 800d206:	2a24      	cmp	r2, #36	; 0x24
 800d208:	d004      	beq.n	800d214 <_realloc_r+0x25c>
 800d20a:	0028      	movs	r0, r5
 800d20c:	0023      	movs	r3, r4
 800d20e:	3018      	adds	r0, #24
 800d210:	3310      	adds	r3, #16
 800d212:	e7d2      	b.n	800d1ba <_realloc_r+0x202>
 800d214:	6923      	ldr	r3, [r4, #16]
 800d216:	0028      	movs	r0, r5
 800d218:	61ab      	str	r3, [r5, #24]
 800d21a:	0023      	movs	r3, r4
 800d21c:	6962      	ldr	r2, [r4, #20]
 800d21e:	3020      	adds	r0, #32
 800d220:	3318      	adds	r3, #24
 800d222:	61ea      	str	r2, [r5, #28]
 800d224:	e7c9      	b.n	800d1ba <_realloc_r+0x202>
 800d226:	0021      	movs	r1, r4
 800d228:	f7ff feb4 	bl	800cf94 <memmove>
 800d22c:	e7cb      	b.n	800d1c6 <_realloc_r+0x20e>
 800d22e:	9a03      	ldr	r2, [sp, #12]
 800d230:	3a04      	subs	r2, #4
 800d232:	2a24      	cmp	r2, #36	; 0x24
 800d234:	d82d      	bhi.n	800d292 <_realloc_r+0x2da>
 800d236:	2a13      	cmp	r2, #19
 800d238:	d928      	bls.n	800d28c <_realloc_r+0x2d4>
 800d23a:	6823      	ldr	r3, [r4, #0]
 800d23c:	6003      	str	r3, [r0, #0]
 800d23e:	6863      	ldr	r3, [r4, #4]
 800d240:	6043      	str	r3, [r0, #4]
 800d242:	2a1b      	cmp	r2, #27
 800d244:	d80e      	bhi.n	800d264 <_realloc_r+0x2ac>
 800d246:	0003      	movs	r3, r0
 800d248:	0022      	movs	r2, r4
 800d24a:	3308      	adds	r3, #8
 800d24c:	3208      	adds	r2, #8
 800d24e:	6811      	ldr	r1, [r2, #0]
 800d250:	6019      	str	r1, [r3, #0]
 800d252:	6851      	ldr	r1, [r2, #4]
 800d254:	6059      	str	r1, [r3, #4]
 800d256:	6892      	ldr	r2, [r2, #8]
 800d258:	609a      	str	r2, [r3, #8]
 800d25a:	0021      	movs	r1, r4
 800d25c:	9802      	ldr	r0, [sp, #8]
 800d25e:	f7ff fa4d 	bl	800c6fc <_free_r>
 800d262:	e76c      	b.n	800d13e <_realloc_r+0x186>
 800d264:	68a3      	ldr	r3, [r4, #8]
 800d266:	6083      	str	r3, [r0, #8]
 800d268:	68e3      	ldr	r3, [r4, #12]
 800d26a:	60c3      	str	r3, [r0, #12]
 800d26c:	2a24      	cmp	r2, #36	; 0x24
 800d26e:	d004      	beq.n	800d27a <_realloc_r+0x2c2>
 800d270:	0003      	movs	r3, r0
 800d272:	0022      	movs	r2, r4
 800d274:	3310      	adds	r3, #16
 800d276:	3210      	adds	r2, #16
 800d278:	e7e9      	b.n	800d24e <_realloc_r+0x296>
 800d27a:	6923      	ldr	r3, [r4, #16]
 800d27c:	0022      	movs	r2, r4
 800d27e:	6103      	str	r3, [r0, #16]
 800d280:	0003      	movs	r3, r0
 800d282:	6961      	ldr	r1, [r4, #20]
 800d284:	3318      	adds	r3, #24
 800d286:	3218      	adds	r2, #24
 800d288:	6141      	str	r1, [r0, #20]
 800d28a:	e7e0      	b.n	800d24e <_realloc_r+0x296>
 800d28c:	0003      	movs	r3, r0
 800d28e:	0022      	movs	r2, r4
 800d290:	e7dd      	b.n	800d24e <_realloc_r+0x296>
 800d292:	0021      	movs	r1, r4
 800d294:	f7ff fe7e 	bl	800cf94 <memmove>
 800d298:	e7df      	b.n	800d25a <_realloc_r+0x2a2>
 800d29a:	9e03      	ldr	r6, [sp, #12]
 800d29c:	e6ee      	b.n	800d07c <_realloc_r+0xc4>
 800d29e:	4013      	ands	r3, r2
 800d2a0:	431e      	orrs	r6, r3
 800d2a2:	607e      	str	r6, [r7, #4]
 800d2a4:	6843      	ldr	r3, [r0, #4]
 800d2a6:	431a      	orrs	r2, r3
 800d2a8:	6042      	str	r2, [r0, #4]
 800d2aa:	e6fe      	b.n	800d0aa <_realloc_r+0xf2>
 800d2ac:	20000134 	.word	0x20000134

0800d2b0 <ceil>:
 800d2b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2b2:	004b      	lsls	r3, r1, #1
 800d2b4:	4a39      	ldr	r2, [pc, #228]	; (800d39c <ceil+0xec>)
 800d2b6:	0d5b      	lsrs	r3, r3, #21
 800d2b8:	b085      	sub	sp, #20
 800d2ba:	189e      	adds	r6, r3, r2
 800d2bc:	9003      	str	r0, [sp, #12]
 800d2be:	000c      	movs	r4, r1
 800d2c0:	0005      	movs	r5, r0
 800d2c2:	2e13      	cmp	r6, #19
 800d2c4:	dc32      	bgt.n	800d32c <ceil+0x7c>
 800d2c6:	2e00      	cmp	r6, #0
 800d2c8:	da13      	bge.n	800d2f2 <ceil+0x42>
 800d2ca:	4a35      	ldr	r2, [pc, #212]	; (800d3a0 <ceil+0xf0>)
 800d2cc:	4b35      	ldr	r3, [pc, #212]	; (800d3a4 <ceil+0xf4>)
 800d2ce:	f7f3 f9e9 	bl	80006a4 <__aeabi_dadd>
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	f7f3 f8d3 	bl	8000480 <__aeabi_dcmpgt>
 800d2da:	2800      	cmp	r0, #0
 800d2dc:	d006      	beq.n	800d2ec <ceil+0x3c>
 800d2de:	2c00      	cmp	r4, #0
 800d2e0:	db57      	blt.n	800d392 <ceil+0xe2>
 800d2e2:	432c      	orrs	r4, r5
 800d2e4:	2500      	movs	r5, #0
 800d2e6:	42ac      	cmp	r4, r5
 800d2e8:	d000      	beq.n	800d2ec <ceil+0x3c>
 800d2ea:	4c2f      	ldr	r4, [pc, #188]	; (800d3a8 <ceil+0xf8>)
 800d2ec:	0028      	movs	r0, r5
 800d2ee:	0021      	movs	r1, r4
 800d2f0:	e026      	b.n	800d340 <ceil+0x90>
 800d2f2:	4f2e      	ldr	r7, [pc, #184]	; (800d3ac <ceil+0xfc>)
 800d2f4:	4137      	asrs	r7, r6
 800d2f6:	003b      	movs	r3, r7
 800d2f8:	400b      	ands	r3, r1
 800d2fa:	4303      	orrs	r3, r0
 800d2fc:	d020      	beq.n	800d340 <ceil+0x90>
 800d2fe:	9000      	str	r0, [sp, #0]
 800d300:	9101      	str	r1, [sp, #4]
 800d302:	4a27      	ldr	r2, [pc, #156]	; (800d3a0 <ceil+0xf0>)
 800d304:	4b27      	ldr	r3, [pc, #156]	; (800d3a4 <ceil+0xf4>)
 800d306:	9800      	ldr	r0, [sp, #0]
 800d308:	9901      	ldr	r1, [sp, #4]
 800d30a:	f7f3 f9cb 	bl	80006a4 <__aeabi_dadd>
 800d30e:	2200      	movs	r2, #0
 800d310:	2300      	movs	r3, #0
 800d312:	f7f3 f8b5 	bl	8000480 <__aeabi_dcmpgt>
 800d316:	2800      	cmp	r0, #0
 800d318:	d0e8      	beq.n	800d2ec <ceil+0x3c>
 800d31a:	2c00      	cmp	r4, #0
 800d31c:	dd03      	ble.n	800d326 <ceil+0x76>
 800d31e:	2380      	movs	r3, #128	; 0x80
 800d320:	035b      	lsls	r3, r3, #13
 800d322:	4133      	asrs	r3, r6
 800d324:	18e4      	adds	r4, r4, r3
 800d326:	43bc      	bics	r4, r7
 800d328:	2500      	movs	r5, #0
 800d32a:	e7df      	b.n	800d2ec <ceil+0x3c>
 800d32c:	2e33      	cmp	r6, #51	; 0x33
 800d32e:	dd09      	ble.n	800d344 <ceil+0x94>
 800d330:	2380      	movs	r3, #128	; 0x80
 800d332:	00db      	lsls	r3, r3, #3
 800d334:	429e      	cmp	r6, r3
 800d336:	d103      	bne.n	800d340 <ceil+0x90>
 800d338:	0002      	movs	r2, r0
 800d33a:	000b      	movs	r3, r1
 800d33c:	f7f3 f9b2 	bl	80006a4 <__aeabi_dadd>
 800d340:	b005      	add	sp, #20
 800d342:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d344:	2701      	movs	r7, #1
 800d346:	4a1a      	ldr	r2, [pc, #104]	; (800d3b0 <ceil+0x100>)
 800d348:	427f      	negs	r7, r7
 800d34a:	189b      	adds	r3, r3, r2
 800d34c:	40df      	lsrs	r7, r3
 800d34e:	4207      	tst	r7, r0
 800d350:	d0f6      	beq.n	800d340 <ceil+0x90>
 800d352:	9000      	str	r0, [sp, #0]
 800d354:	9101      	str	r1, [sp, #4]
 800d356:	4a12      	ldr	r2, [pc, #72]	; (800d3a0 <ceil+0xf0>)
 800d358:	4b12      	ldr	r3, [pc, #72]	; (800d3a4 <ceil+0xf4>)
 800d35a:	9800      	ldr	r0, [sp, #0]
 800d35c:	9901      	ldr	r1, [sp, #4]
 800d35e:	f7f3 f9a1 	bl	80006a4 <__aeabi_dadd>
 800d362:	2200      	movs	r2, #0
 800d364:	2300      	movs	r3, #0
 800d366:	f7f3 f88b 	bl	8000480 <__aeabi_dcmpgt>
 800d36a:	2800      	cmp	r0, #0
 800d36c:	d0be      	beq.n	800d2ec <ceil+0x3c>
 800d36e:	2c00      	cmp	r4, #0
 800d370:	dd02      	ble.n	800d378 <ceil+0xc8>
 800d372:	2e14      	cmp	r6, #20
 800d374:	d102      	bne.n	800d37c <ceil+0xcc>
 800d376:	3401      	adds	r4, #1
 800d378:	43bd      	bics	r5, r7
 800d37a:	e7b7      	b.n	800d2ec <ceil+0x3c>
 800d37c:	2334      	movs	r3, #52	; 0x34
 800d37e:	1b9e      	subs	r6, r3, r6
 800d380:	3b33      	subs	r3, #51	; 0x33
 800d382:	40b3      	lsls	r3, r6
 800d384:	18ed      	adds	r5, r5, r3
 800d386:	9b03      	ldr	r3, [sp, #12]
 800d388:	429d      	cmp	r5, r3
 800d38a:	419b      	sbcs	r3, r3
 800d38c:	425b      	negs	r3, r3
 800d38e:	18e4      	adds	r4, r4, r3
 800d390:	e7f2      	b.n	800d378 <ceil+0xc8>
 800d392:	2480      	movs	r4, #128	; 0x80
 800d394:	2500      	movs	r5, #0
 800d396:	0624      	lsls	r4, r4, #24
 800d398:	e7a8      	b.n	800d2ec <ceil+0x3c>
 800d39a:	46c0      	nop			; (mov r8, r8)
 800d39c:	fffffc01 	.word	0xfffffc01
 800d3a0:	8800759c 	.word	0x8800759c
 800d3a4:	7e37e43c 	.word	0x7e37e43c
 800d3a8:	3ff00000 	.word	0x3ff00000
 800d3ac:	000fffff 	.word	0x000fffff
 800d3b0:	fffffbed 	.word	0xfffffbed

0800d3b4 <floor>:
 800d3b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3b6:	004b      	lsls	r3, r1, #1
 800d3b8:	4a39      	ldr	r2, [pc, #228]	; (800d4a0 <floor+0xec>)
 800d3ba:	0d5b      	lsrs	r3, r3, #21
 800d3bc:	b085      	sub	sp, #20
 800d3be:	189e      	adds	r6, r3, r2
 800d3c0:	9003      	str	r0, [sp, #12]
 800d3c2:	000c      	movs	r4, r1
 800d3c4:	0005      	movs	r5, r0
 800d3c6:	2e13      	cmp	r6, #19
 800d3c8:	dc34      	bgt.n	800d434 <floor+0x80>
 800d3ca:	2e00      	cmp	r6, #0
 800d3cc:	da15      	bge.n	800d3fa <floor+0x46>
 800d3ce:	4a35      	ldr	r2, [pc, #212]	; (800d4a4 <floor+0xf0>)
 800d3d0:	4b35      	ldr	r3, [pc, #212]	; (800d4a8 <floor+0xf4>)
 800d3d2:	f7f3 f967 	bl	80006a4 <__aeabi_dadd>
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	2300      	movs	r3, #0
 800d3da:	f7f3 f851 	bl	8000480 <__aeabi_dcmpgt>
 800d3de:	2800      	cmp	r0, #0
 800d3e0:	d008      	beq.n	800d3f4 <floor+0x40>
 800d3e2:	2c00      	cmp	r4, #0
 800d3e4:	da59      	bge.n	800d49a <floor+0xe6>
 800d3e6:	0063      	lsls	r3, r4, #1
 800d3e8:	085b      	lsrs	r3, r3, #1
 800d3ea:	432b      	orrs	r3, r5
 800d3ec:	2500      	movs	r5, #0
 800d3ee:	42ab      	cmp	r3, r5
 800d3f0:	d000      	beq.n	800d3f4 <floor+0x40>
 800d3f2:	4c2e      	ldr	r4, [pc, #184]	; (800d4ac <floor+0xf8>)
 800d3f4:	0028      	movs	r0, r5
 800d3f6:	0021      	movs	r1, r4
 800d3f8:	e026      	b.n	800d448 <floor+0x94>
 800d3fa:	4f2d      	ldr	r7, [pc, #180]	; (800d4b0 <floor+0xfc>)
 800d3fc:	4137      	asrs	r7, r6
 800d3fe:	003b      	movs	r3, r7
 800d400:	400b      	ands	r3, r1
 800d402:	4303      	orrs	r3, r0
 800d404:	d020      	beq.n	800d448 <floor+0x94>
 800d406:	9000      	str	r0, [sp, #0]
 800d408:	9101      	str	r1, [sp, #4]
 800d40a:	4a26      	ldr	r2, [pc, #152]	; (800d4a4 <floor+0xf0>)
 800d40c:	4b26      	ldr	r3, [pc, #152]	; (800d4a8 <floor+0xf4>)
 800d40e:	9800      	ldr	r0, [sp, #0]
 800d410:	9901      	ldr	r1, [sp, #4]
 800d412:	f7f3 f947 	bl	80006a4 <__aeabi_dadd>
 800d416:	2200      	movs	r2, #0
 800d418:	2300      	movs	r3, #0
 800d41a:	f7f3 f831 	bl	8000480 <__aeabi_dcmpgt>
 800d41e:	2800      	cmp	r0, #0
 800d420:	d0e8      	beq.n	800d3f4 <floor+0x40>
 800d422:	2c00      	cmp	r4, #0
 800d424:	da03      	bge.n	800d42e <floor+0x7a>
 800d426:	2380      	movs	r3, #128	; 0x80
 800d428:	035b      	lsls	r3, r3, #13
 800d42a:	4133      	asrs	r3, r6
 800d42c:	18e4      	adds	r4, r4, r3
 800d42e:	43bc      	bics	r4, r7
 800d430:	2500      	movs	r5, #0
 800d432:	e7df      	b.n	800d3f4 <floor+0x40>
 800d434:	2e33      	cmp	r6, #51	; 0x33
 800d436:	dd09      	ble.n	800d44c <floor+0x98>
 800d438:	2380      	movs	r3, #128	; 0x80
 800d43a:	00db      	lsls	r3, r3, #3
 800d43c:	429e      	cmp	r6, r3
 800d43e:	d103      	bne.n	800d448 <floor+0x94>
 800d440:	0002      	movs	r2, r0
 800d442:	000b      	movs	r3, r1
 800d444:	f7f3 f92e 	bl	80006a4 <__aeabi_dadd>
 800d448:	b005      	add	sp, #20
 800d44a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d44c:	2701      	movs	r7, #1
 800d44e:	4a19      	ldr	r2, [pc, #100]	; (800d4b4 <floor+0x100>)
 800d450:	427f      	negs	r7, r7
 800d452:	189b      	adds	r3, r3, r2
 800d454:	40df      	lsrs	r7, r3
 800d456:	4207      	tst	r7, r0
 800d458:	d0f6      	beq.n	800d448 <floor+0x94>
 800d45a:	9000      	str	r0, [sp, #0]
 800d45c:	9101      	str	r1, [sp, #4]
 800d45e:	4a11      	ldr	r2, [pc, #68]	; (800d4a4 <floor+0xf0>)
 800d460:	4b11      	ldr	r3, [pc, #68]	; (800d4a8 <floor+0xf4>)
 800d462:	9800      	ldr	r0, [sp, #0]
 800d464:	9901      	ldr	r1, [sp, #4]
 800d466:	f7f3 f91d 	bl	80006a4 <__aeabi_dadd>
 800d46a:	2200      	movs	r2, #0
 800d46c:	2300      	movs	r3, #0
 800d46e:	f7f3 f807 	bl	8000480 <__aeabi_dcmpgt>
 800d472:	2800      	cmp	r0, #0
 800d474:	d0be      	beq.n	800d3f4 <floor+0x40>
 800d476:	2c00      	cmp	r4, #0
 800d478:	da02      	bge.n	800d480 <floor+0xcc>
 800d47a:	2e14      	cmp	r6, #20
 800d47c:	d102      	bne.n	800d484 <floor+0xd0>
 800d47e:	3401      	adds	r4, #1
 800d480:	43bd      	bics	r5, r7
 800d482:	e7b7      	b.n	800d3f4 <floor+0x40>
 800d484:	2334      	movs	r3, #52	; 0x34
 800d486:	1b9e      	subs	r6, r3, r6
 800d488:	3b33      	subs	r3, #51	; 0x33
 800d48a:	40b3      	lsls	r3, r6
 800d48c:	18ed      	adds	r5, r5, r3
 800d48e:	9b03      	ldr	r3, [sp, #12]
 800d490:	429d      	cmp	r5, r3
 800d492:	419b      	sbcs	r3, r3
 800d494:	425b      	negs	r3, r3
 800d496:	18e4      	adds	r4, r4, r3
 800d498:	e7f2      	b.n	800d480 <floor+0xcc>
 800d49a:	2500      	movs	r5, #0
 800d49c:	002c      	movs	r4, r5
 800d49e:	e7a9      	b.n	800d3f4 <floor+0x40>
 800d4a0:	fffffc01 	.word	0xfffffc01
 800d4a4:	8800759c 	.word	0x8800759c
 800d4a8:	7e37e43c 	.word	0x7e37e43c
 800d4ac:	bff00000 	.word	0xbff00000
 800d4b0:	000fffff 	.word	0x000fffff
 800d4b4:	fffffbed 	.word	0xfffffbed

0800d4b8 <round>:
 800d4b8:	b570      	push	{r4, r5, r6, lr}
 800d4ba:	004a      	lsls	r2, r1, #1
 800d4bc:	4d1d      	ldr	r5, [pc, #116]	; (800d534 <round+0x7c>)
 800d4be:	0d52      	lsrs	r2, r2, #21
 800d4c0:	1955      	adds	r5, r2, r5
 800d4c2:	000e      	movs	r6, r1
 800d4c4:	2d13      	cmp	r5, #19
 800d4c6:	dc18      	bgt.n	800d4fa <round+0x42>
 800d4c8:	2d00      	cmp	r5, #0
 800d4ca:	da09      	bge.n	800d4e0 <round+0x28>
 800d4cc:	0fcb      	lsrs	r3, r1, #31
 800d4ce:	07db      	lsls	r3, r3, #31
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	1c69      	adds	r1, r5, #1
 800d4d4:	d101      	bne.n	800d4da <round+0x22>
 800d4d6:	4918      	ldr	r1, [pc, #96]	; (800d538 <round+0x80>)
 800d4d8:	430b      	orrs	r3, r1
 800d4da:	0019      	movs	r1, r3
 800d4dc:	0010      	movs	r0, r2
 800d4de:	e016      	b.n	800d50e <round+0x56>
 800d4e0:	4a16      	ldr	r2, [pc, #88]	; (800d53c <round+0x84>)
 800d4e2:	412a      	asrs	r2, r5
 800d4e4:	420a      	tst	r2, r1
 800d4e6:	d101      	bne.n	800d4ec <round+0x34>
 800d4e8:	2800      	cmp	r0, #0
 800d4ea:	d010      	beq.n	800d50e <round+0x56>
 800d4ec:	2380      	movs	r3, #128	; 0x80
 800d4ee:	031b      	lsls	r3, r3, #12
 800d4f0:	412b      	asrs	r3, r5
 800d4f2:	199b      	adds	r3, r3, r6
 800d4f4:	4393      	bics	r3, r2
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	e7ef      	b.n	800d4da <round+0x22>
 800d4fa:	2d33      	cmp	r5, #51	; 0x33
 800d4fc:	dd08      	ble.n	800d510 <round+0x58>
 800d4fe:	2380      	movs	r3, #128	; 0x80
 800d500:	00db      	lsls	r3, r3, #3
 800d502:	429d      	cmp	r5, r3
 800d504:	d103      	bne.n	800d50e <round+0x56>
 800d506:	0002      	movs	r2, r0
 800d508:	000b      	movs	r3, r1
 800d50a:	f7f3 f8cb 	bl	80006a4 <__aeabi_dadd>
 800d50e:	bd70      	pop	{r4, r5, r6, pc}
 800d510:	4e0b      	ldr	r6, [pc, #44]	; (800d540 <round+0x88>)
 800d512:	1992      	adds	r2, r2, r6
 800d514:	2601      	movs	r6, #1
 800d516:	4276      	negs	r6, r6
 800d518:	40d6      	lsrs	r6, r2
 800d51a:	4206      	tst	r6, r0
 800d51c:	d0f7      	beq.n	800d50e <round+0x56>
 800d51e:	2233      	movs	r2, #51	; 0x33
 800d520:	1b55      	subs	r5, r2, r5
 800d522:	3a32      	subs	r2, #50	; 0x32
 800d524:	40aa      	lsls	r2, r5
 800d526:	1812      	adds	r2, r2, r0
 800d528:	4282      	cmp	r2, r0
 800d52a:	41a4      	sbcs	r4, r4
 800d52c:	4264      	negs	r4, r4
 800d52e:	190b      	adds	r3, r1, r4
 800d530:	43b2      	bics	r2, r6
 800d532:	e7d2      	b.n	800d4da <round+0x22>
 800d534:	fffffc01 	.word	0xfffffc01
 800d538:	3ff00000 	.word	0x3ff00000
 800d53c:	000fffff 	.word	0x000fffff
 800d540:	fffffbed 	.word	0xfffffbed

0800d544 <_sbrk>:
 800d544:	4b05      	ldr	r3, [pc, #20]	; (800d55c <_sbrk+0x18>)
 800d546:	0002      	movs	r2, r0
 800d548:	6819      	ldr	r1, [r3, #0]
 800d54a:	2900      	cmp	r1, #0
 800d54c:	d101      	bne.n	800d552 <_sbrk+0xe>
 800d54e:	4904      	ldr	r1, [pc, #16]	; (800d560 <_sbrk+0x1c>)
 800d550:	6019      	str	r1, [r3, #0]
 800d552:	6818      	ldr	r0, [r3, #0]
 800d554:	1882      	adds	r2, r0, r2
 800d556:	601a      	str	r2, [r3, #0]
 800d558:	4770      	bx	lr
 800d55a:	46c0      	nop			; (mov r8, r8)
 800d55c:	200009fc 	.word	0x200009fc
 800d560:	2000137c 	.word	0x2000137c

0800d564 <_init>:
 800d564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d566:	46c0      	nop			; (mov r8, r8)
 800d568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d56a:	bc08      	pop	{r3}
 800d56c:	469e      	mov	lr, r3
 800d56e:	4770      	bx	lr

0800d570 <_fini>:
 800d570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d572:	46c0      	nop			; (mov r8, r8)
 800d574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d576:	bc08      	pop	{r3}
 800d578:	469e      	mov	lr, r3
 800d57a:	4770      	bx	lr
