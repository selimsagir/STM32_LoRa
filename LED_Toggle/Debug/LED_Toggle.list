
LED_Toggle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002590  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08002650  08002650  00012650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800268c  0800268c  0001268c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002690  08002690  00012690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08002694  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000c4  20000004  08002698  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000c8  08002698  000200c8  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000bf54  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001bdd  00000000  00000000  0002bf80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000550  00000000  00000000  0002db60  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000478  00000000  00000000  0002e0b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003557  00000000  00000000  0002e528  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001ce9  00000000  00000000  00031a7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00033768  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001044  00000000  00000000  000337e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002638 	.word	0x08002638

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08002638 	.word	0x08002638

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000224:	4b07      	ldr	r3, [pc, #28]	; (8000244 <HAL_Init+0x24>)
 8000226:	4a07      	ldr	r2, [pc, #28]	; (8000244 <HAL_Init+0x24>)
 8000228:	6812      	ldr	r2, [r2, #0]
 800022a:	2140      	movs	r1, #64	; 0x40
 800022c:	430a      	orrs	r2, r1
 800022e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000230:	2000      	movs	r0, #0
 8000232:	f000 f809 	bl	8000248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000236:	f002 f91b 	bl	8002470 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
}
 800023c:	0018      	movs	r0, r3
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	40022000 	.word	0x40022000

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000250:	4b0b      	ldr	r3, [pc, #44]	; (8000280 <HAL_InitTick+0x38>)
 8000252:	681a      	ldr	r2, [r3, #0]
 8000254:	23fa      	movs	r3, #250	; 0xfa
 8000256:	0099      	lsls	r1, r3, #2
 8000258:	0010      	movs	r0, r2
 800025a:	f7ff ff55 	bl	8000108 <__udivsi3>
 800025e:	0003      	movs	r3, r0
 8000260:	0018      	movs	r0, r3
 8000262:	f000 fc83 	bl	8000b6c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000266:	6879      	ldr	r1, [r7, #4]
 8000268:	2301      	movs	r3, #1
 800026a:	425b      	negs	r3, r3
 800026c:	2200      	movs	r2, #0
 800026e:	0018      	movs	r0, r3
 8000270:	f000 fc56 	bl	8000b20 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000274:	2300      	movs	r3, #0
}
 8000276:	0018      	movs	r0, r3
 8000278:	46bd      	mov	sp, r7
 800027a:	b002      	add	sp, #8
 800027c:	bd80      	pop	{r7, pc}
 800027e:	46c0      	nop			; (mov r8, r8)
 8000280:	20000000 	.word	0x20000000

08000284 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
  uwTick++;
 8000288:	4b03      	ldr	r3, [pc, #12]	; (8000298 <HAL_IncTick+0x14>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	1c5a      	adds	r2, r3, #1
 800028e:	4b02      	ldr	r3, [pc, #8]	; (8000298 <HAL_IncTick+0x14>)
 8000290:	601a      	str	r2, [r3, #0]
}
 8000292:	46c0      	nop			; (mov r8, r8)
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}
 8000298:	20000020 	.word	0x20000020

0800029c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
  return uwTick;
 80002a0:	4b02      	ldr	r3, [pc, #8]	; (80002ac <HAL_GetTick+0x10>)
 80002a2:	681b      	ldr	r3, [r3, #0]
}
 80002a4:	0018      	movs	r0, r3
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	46c0      	nop			; (mov r8, r8)
 80002ac:	20000020 	.word	0x20000020

080002b0 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d101      	bne.n	80002c2 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80002be:	2301      	movs	r3, #1
 80002c0:	e153      	b.n	800056a <HAL_ADC_Init+0x2ba>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d10a      	bne.n	80002e0 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	2200      	movs	r2, #0
 80002ce:	65da      	str	r2, [r3, #92]	; 0x5c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	2254      	movs	r2, #84	; 0x54
 80002d4:	2100      	movs	r1, #0
 80002d6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	0018      	movs	r0, r3
 80002dc:	f001 ff6c 	bl	80021b8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80002e4:	2210      	movs	r2, #16
 80002e6:	4013      	ands	r3, r2
 80002e8:	d105      	bne.n	80002f6 <HAL_ADC_Init+0x46>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	689b      	ldr	r3, [r3, #8]
 80002f0:	2204      	movs	r2, #4
 80002f2:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80002f4:	d00b      	beq.n	800030e <HAL_ADC_Init+0x5e>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80002fa:	2210      	movs	r2, #16
 80002fc:	431a      	orrs	r2, r3
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	659a      	str	r2, [r3, #88]	; 0x58
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	2254      	movs	r2, #84	; 0x54
 8000306:	2100      	movs	r1, #0
 8000308:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800030a:	2301      	movs	r3, #1
 800030c:	e12d      	b.n	800056a <HAL_ADC_Init+0x2ba>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000312:	4a98      	ldr	r2, [pc, #608]	; (8000574 <HAL_ADC_Init+0x2c4>)
 8000314:	4013      	ands	r3, r2
 8000316:	2202      	movs	r2, #2
 8000318:	431a      	orrs	r2, r3
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	659a      	str	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	689b      	ldr	r3, [r3, #8]
 8000324:	2203      	movs	r2, #3
 8000326:	4013      	ands	r3, r2
 8000328:	2b01      	cmp	r3, #1
 800032a:	d108      	bne.n	800033e <HAL_ADC_Init+0x8e>
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	2201      	movs	r2, #1
 8000334:	4013      	ands	r3, r2
 8000336:	2b01      	cmp	r3, #1
 8000338:	d101      	bne.n	800033e <HAL_ADC_Init+0x8e>
 800033a:	2301      	movs	r3, #1
 800033c:	e000      	b.n	8000340 <HAL_ADC_Init+0x90>
 800033e:	2300      	movs	r3, #0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d149      	bne.n	80003d8 <HAL_ADC_Init+0x128>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	685a      	ldr	r2, [r3, #4]
 8000348:	23c0      	movs	r3, #192	; 0xc0
 800034a:	061b      	lsls	r3, r3, #24
 800034c:	429a      	cmp	r2, r3
 800034e:	d00b      	beq.n	8000368 <HAL_ADC_Init+0xb8>
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	685a      	ldr	r2, [r3, #4]
 8000354:	2380      	movs	r3, #128	; 0x80
 8000356:	05db      	lsls	r3, r3, #23
 8000358:	429a      	cmp	r2, r3
 800035a:	d005      	beq.n	8000368 <HAL_ADC_Init+0xb8>
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	685a      	ldr	r2, [r3, #4]
 8000360:	2380      	movs	r3, #128	; 0x80
 8000362:	061b      	lsls	r3, r3, #24
 8000364:	429a      	cmp	r2, r3
 8000366:	d111      	bne.n	800038c <HAL_ADC_Init+0xdc>
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	687a      	ldr	r2, [r7, #4]
 800036e:	6812      	ldr	r2, [r2, #0]
 8000370:	6912      	ldr	r2, [r2, #16]
 8000372:	0092      	lsls	r2, r2, #2
 8000374:	0892      	lsrs	r2, r2, #2
 8000376:	611a      	str	r2, [r3, #16]
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	687a      	ldr	r2, [r7, #4]
 800037e:	6812      	ldr	r2, [r2, #0]
 8000380:	6911      	ldr	r1, [r2, #16]
 8000382:	687a      	ldr	r2, [r7, #4]
 8000384:	6852      	ldr	r2, [r2, #4]
 8000386:	430a      	orrs	r2, r1
 8000388:	611a      	str	r2, [r3, #16]
 800038a:	e014      	b.n	80003b6 <HAL_ADC_Init+0x106>
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	687a      	ldr	r2, [r7, #4]
 8000392:	6812      	ldr	r2, [r2, #0]
 8000394:	6912      	ldr	r2, [r2, #16]
 8000396:	0092      	lsls	r2, r2, #2
 8000398:	0892      	lsrs	r2, r2, #2
 800039a:	611a      	str	r2, [r3, #16]
 800039c:	4b76      	ldr	r3, [pc, #472]	; (8000578 <HAL_ADC_Init+0x2c8>)
 800039e:	4a76      	ldr	r2, [pc, #472]	; (8000578 <HAL_ADC_Init+0x2c8>)
 80003a0:	6812      	ldr	r2, [r2, #0]
 80003a2:	4976      	ldr	r1, [pc, #472]	; (800057c <HAL_ADC_Init+0x2cc>)
 80003a4:	400a      	ands	r2, r1
 80003a6:	601a      	str	r2, [r3, #0]
 80003a8:	4a73      	ldr	r2, [pc, #460]	; (8000578 <HAL_ADC_Init+0x2c8>)
 80003aa:	4b73      	ldr	r3, [pc, #460]	; (8000578 <HAL_ADC_Init+0x2c8>)
 80003ac:	6819      	ldr	r1, [r3, #0]
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	685b      	ldr	r3, [r3, #4]
 80003b2:	430b      	orrs	r3, r1
 80003b4:	6013      	str	r3, [r2, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	687a      	ldr	r2, [r7, #4]
 80003bc:	6812      	ldr	r2, [r2, #0]
 80003be:	68d2      	ldr	r2, [r2, #12]
 80003c0:	2118      	movs	r1, #24
 80003c2:	438a      	bics	r2, r1
 80003c4:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	687a      	ldr	r2, [r7, #4]
 80003cc:	6812      	ldr	r2, [r2, #0]
 80003ce:	68d1      	ldr	r1, [r2, #12]
 80003d0:	687a      	ldr	r2, [r7, #4]
 80003d2:	6892      	ldr	r2, [r2, #8]
 80003d4:	430a      	orrs	r2, r1
 80003d6:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80003d8:	4b67      	ldr	r3, [pc, #412]	; (8000578 <HAL_ADC_Init+0x2c8>)
 80003da:	4a67      	ldr	r2, [pc, #412]	; (8000578 <HAL_ADC_Init+0x2c8>)
 80003dc:	6812      	ldr	r2, [r2, #0]
 80003de:	4968      	ldr	r1, [pc, #416]	; (8000580 <HAL_ADC_Init+0x2d0>)
 80003e0:	400a      	ands	r2, r1
 80003e2:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80003e4:	4a64      	ldr	r2, [pc, #400]	; (8000578 <HAL_ADC_Init+0x2c8>)
 80003e6:	4b64      	ldr	r3, [pc, #400]	; (8000578 <HAL_ADC_Init+0x2c8>)
 80003e8:	6819      	ldr	r1, [r3, #0]
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80003ee:	065b      	lsls	r3, r3, #25
 80003f0:	430b      	orrs	r3, r1
 80003f2:	6013      	str	r3, [r2, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	689a      	ldr	r2, [r3, #8]
 80003fa:	2380      	movs	r3, #128	; 0x80
 80003fc:	055b      	lsls	r3, r3, #21
 80003fe:	4013      	ands	r3, r2
 8000400:	d108      	bne.n	8000414 <HAL_ADC_Init+0x164>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	687a      	ldr	r2, [r7, #4]
 8000408:	6812      	ldr	r2, [r2, #0]
 800040a:	6892      	ldr	r2, [r2, #8]
 800040c:	2180      	movs	r1, #128	; 0x80
 800040e:	0549      	lsls	r1, r1, #21
 8000410:	430a      	orrs	r2, r1
 8000412:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	687a      	ldr	r2, [r7, #4]
 800041a:	6812      	ldr	r2, [r2, #0]
 800041c:	68d2      	ldr	r2, [r2, #12]
 800041e:	4959      	ldr	r1, [pc, #356]	; (8000584 <HAL_ADC_Init+0x2d4>)
 8000420:	400a      	ands	r2, r1
 8000422:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	687a      	ldr	r2, [r7, #4]
 800042a:	6812      	ldr	r2, [r2, #0]
 800042c:	68d1      	ldr	r1, [r2, #12]
 800042e:	687a      	ldr	r2, [r7, #4]
 8000430:	68d0      	ldr	r0, [r2, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000432:	687a      	ldr	r2, [r7, #4]
 8000434:	6912      	ldr	r2, [r2, #16]
 8000436:	2a02      	cmp	r2, #2
 8000438:	d101      	bne.n	800043e <HAL_ADC_Init+0x18e>
 800043a:	2204      	movs	r2, #4
 800043c:	e000      	b.n	8000440 <HAL_ADC_Init+0x190>
 800043e:	2200      	movs	r2, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000440:	4310      	orrs	r0, r2
                            ADC_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8000442:	687a      	ldr	r2, [r7, #4]
 8000444:	6a12      	ldr	r2, [r2, #32]
 8000446:	0352      	lsls	r2, r2, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000448:	4310      	orrs	r0, r2
                            ADC_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 800044a:	687a      	ldr	r2, [r7, #4]
 800044c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800044e:	0052      	lsls	r2, r2, #1
                            ADC_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8000450:	4310      	orrs	r0, r2
                            hadc->Init.Overrun                               |
 8000452:	687a      	ldr	r2, [r7, #4]
 8000454:	6b52      	ldr	r2, [r2, #52]	; 0x34
                            ADC_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 8000456:	4310      	orrs	r0, r2
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000458:	687a      	ldr	r2, [r7, #4]
 800045a:	6992      	ldr	r2, [r2, #24]
 800045c:	0392      	lsls	r2, r2, #14
                            hadc->Init.Overrun                               |
 800045e:	4310      	orrs	r0, r2
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000460:	687a      	ldr	r2, [r7, #4]
 8000462:	69d2      	ldr	r2, [r2, #28]
 8000464:	03d2      	lsls	r2, r2, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000466:	4302      	orrs	r2, r0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000468:	430a      	orrs	r2, r1
 800046a:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000470:	23c2      	movs	r3, #194	; 0xc2
 8000472:	33ff      	adds	r3, #255	; 0xff
 8000474:	429a      	cmp	r2, r3
 8000476:	d00b      	beq.n	8000490 <HAL_ADC_Init+0x1e0>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	687a      	ldr	r2, [r7, #4]
 800047e:	6812      	ldr	r2, [r2, #0]
 8000480:	68d1      	ldr	r1, [r2, #12]
 8000482:	687a      	ldr	r2, [r7, #4]
 8000484:	6a90      	ldr	r0, [r2, #40]	; 0x28
                             hadc->Init.ExternalTrigConvEdge;
 8000486:	687a      	ldr	r2, [r7, #4]
 8000488:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800048a:	4302      	orrs	r2, r0
 800048c:	430a      	orrs	r2, r1
 800048e:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000494:	2b01      	cmp	r3, #1
 8000496:	d119      	bne.n	80004cc <HAL_ADC_Init+0x21c>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	6a1b      	ldr	r3, [r3, #32]
 800049c:	2b00      	cmp	r3, #0
 800049e:	d109      	bne.n	80004b4 <HAL_ADC_Init+0x204>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	687a      	ldr	r2, [r7, #4]
 80004a6:	6812      	ldr	r2, [r2, #0]
 80004a8:	68d2      	ldr	r2, [r2, #12]
 80004aa:	2180      	movs	r1, #128	; 0x80
 80004ac:	0249      	lsls	r1, r1, #9
 80004ae:	430a      	orrs	r2, r1
 80004b0:	60da      	str	r2, [r3, #12]
 80004b2:	e00b      	b.n	80004cc <HAL_ADC_Init+0x21c>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004b8:	2220      	movs	r2, #32
 80004ba:	431a      	orrs	r2, r3
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80004c4:	2201      	movs	r2, #1
 80004c6:	431a      	orrs	r2, r3
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	65da      	str	r2, [r3, #92]	; 0x5c
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004d0:	2b01      	cmp	r3, #1
 80004d2:	d11f      	bne.n	8000514 <HAL_ADC_Init+0x264>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	687a      	ldr	r2, [r7, #4]
 80004da:	6812      	ldr	r2, [r2, #0]
 80004dc:	6912      	ldr	r2, [r2, #16]
 80004de:	492a      	ldr	r1, [pc, #168]	; (8000588 <HAL_ADC_Init+0x2d8>)
 80004e0:	400a      	ands	r2, r1
 80004e2:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	687a      	ldr	r2, [r7, #4]
 80004ea:	6812      	ldr	r2, [r2, #0]
 80004ec:	6911      	ldr	r1, [r2, #16]
 80004ee:	687a      	ldr	r2, [r7, #4]
 80004f0:	6c50      	ldr	r0, [r2, #68]	; 0x44
                               hadc->Init.Oversample.RightBitShift             |
 80004f2:	687a      	ldr	r2, [r7, #4]
 80004f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80004f6:	4310      	orrs	r0, r2
                               hadc->Init.Oversample.TriggeredMode );
 80004f8:	687a      	ldr	r2, [r7, #4]
 80004fa:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
                               hadc->Init.Oversample.RightBitShift             |
 80004fc:	4302      	orrs	r2, r0
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80004fe:	430a      	orrs	r2, r1
 8000500:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	687a      	ldr	r2, [r7, #4]
 8000508:	6812      	ldr	r2, [r2, #0]
 800050a:	6912      	ldr	r2, [r2, #16]
 800050c:	2101      	movs	r1, #1
 800050e:	430a      	orrs	r2, r1
 8000510:	611a      	str	r2, [r3, #16]
 8000512:	e00d      	b.n	8000530 <HAL_ADC_Init+0x280>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	691b      	ldr	r3, [r3, #16]
 800051a:	2201      	movs	r2, #1
 800051c:	4013      	ands	r3, r2
 800051e:	d007      	beq.n	8000530 <HAL_ADC_Init+0x280>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	687a      	ldr	r2, [r7, #4]
 8000526:	6812      	ldr	r2, [r2, #0]
 8000528:	6912      	ldr	r2, [r2, #16]
 800052a:	2101      	movs	r1, #1
 800052c:	438a      	bics	r2, r1
 800052e:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	687a      	ldr	r2, [r7, #4]
 8000536:	6812      	ldr	r2, [r2, #0]
 8000538:	6952      	ldr	r2, [r2, #20]
 800053a:	2107      	movs	r1, #7
 800053c:	438a      	bics	r2, r1
 800053e:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	6812      	ldr	r2, [r2, #0]
 8000548:	6951      	ldr	r1, [r2, #20]
 800054a:	687a      	ldr	r2, [r7, #4]
 800054c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800054e:	430a      	orrs	r2, r1
 8000550:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2200      	movs	r2, #0
 8000556:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800055c:	2203      	movs	r2, #3
 800055e:	4393      	bics	r3, r2
 8000560:	2201      	movs	r2, #1
 8000562:	431a      	orrs	r2, r3
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	659a      	str	r2, [r3, #88]	; 0x58
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8000568:	2300      	movs	r3, #0
}
 800056a:	0018      	movs	r0, r3
 800056c:	46bd      	mov	sp, r7
 800056e:	b002      	add	sp, #8
 8000570:	bd80      	pop	{r7, pc}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	fffffefd 	.word	0xfffffefd
 8000578:	40012708 	.word	0x40012708
 800057c:	ffc3ffff 	.word	0xffc3ffff
 8000580:	fdffffff 	.word	0xfdffffff
 8000584:	fffe0219 	.word	0xfffe0219
 8000588:	fffffc03 	.word	0xfffffc03

0800058c <HAL_ADC_Start_DMA>:
  * @param  pData: Destination Buffer address.
  * @param  Length: Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800058c:	b590      	push	{r4, r7, lr}
 800058e:	b087      	sub	sp, #28
 8000590:	af00      	add	r7, sp, #0
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	60b9      	str	r1, [r7, #8]
 8000596:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000598:	2317      	movs	r3, #23
 800059a:	18fb      	adds	r3, r7, r3
 800059c:	2200      	movs	r2, #0
 800059e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	689b      	ldr	r3, [r3, #8]
 80005a6:	2204      	movs	r2, #4
 80005a8:	4013      	ands	r3, r2
 80005aa:	d15e      	bne.n	800066a <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	2254      	movs	r2, #84	; 0x54
 80005b0:	5c9b      	ldrb	r3, [r3, r2]
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d101      	bne.n	80005ba <HAL_ADC_Start_DMA+0x2e>
 80005b6:	2302      	movs	r3, #2
 80005b8:	e05e      	b.n	8000678 <HAL_ADC_Start_DMA+0xec>
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	2254      	movs	r2, #84	; 0x54
 80005be:	2101      	movs	r1, #1
 80005c0:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	69db      	ldr	r3, [r3, #28]
 80005c6:	2b01      	cmp	r3, #1
 80005c8:	d007      	beq.n	80005da <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80005ca:	2317      	movs	r3, #23
 80005cc:	18fc      	adds	r4, r7, r3
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	0018      	movs	r0, r3
 80005d2:	f000 f8fb 	bl	80007cc <ADC_Enable>
 80005d6:	0003      	movs	r3, r0
 80005d8:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80005da:	2317      	movs	r3, #23
 80005dc:	18fb      	adds	r3, r7, r3
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d146      	bne.n	8000672 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005e8:	4a25      	ldr	r2, [pc, #148]	; (8000680 <HAL_ADC_Start_DMA+0xf4>)
 80005ea:	4013      	ands	r3, r2
 80005ec:	2280      	movs	r2, #128	; 0x80
 80005ee:	0052      	lsls	r2, r2, #1
 80005f0:	431a      	orrs	r2, r3
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	2200      	movs	r2, #0
 80005fa:	65da      	str	r2, [r3, #92]	; 0x5c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	2254      	movs	r2, #84	; 0x54
 8000600:	2100      	movs	r1, #0
 8000602:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000608:	4a1e      	ldr	r2, [pc, #120]	; (8000684 <HAL_ADC_Start_DMA+0xf8>)
 800060a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000610:	4a1d      	ldr	r2, [pc, #116]	; (8000688 <HAL_ADC_Start_DMA+0xfc>)
 8000612:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000618:	4a1c      	ldr	r2, [pc, #112]	; (800068c <HAL_ADC_Start_DMA+0x100>)
 800061a:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	221c      	movs	r2, #28
 8000622:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	68fa      	ldr	r2, [r7, #12]
 800062a:	6812      	ldr	r2, [r2, #0]
 800062c:	6852      	ldr	r2, [r2, #4]
 800062e:	2110      	movs	r1, #16
 8000630:	430a      	orrs	r2, r1
 8000632:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	68fa      	ldr	r2, [r7, #12]
 800063a:	6812      	ldr	r2, [r2, #0]
 800063c:	68d2      	ldr	r2, [r2, #12]
 800063e:	2101      	movs	r1, #1
 8000640:	430a      	orrs	r2, r1
 8000642:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	3340      	adds	r3, #64	; 0x40
 800064e:	0019      	movs	r1, r3
 8000650:	68ba      	ldr	r2, [r7, #8]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	f000 fbaa 	bl	8000dac <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	68fa      	ldr	r2, [r7, #12]
 800065e:	6812      	ldr	r2, [r2, #0]
 8000660:	6892      	ldr	r2, [r2, #8]
 8000662:	2104      	movs	r1, #4
 8000664:	430a      	orrs	r2, r1
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	e003      	b.n	8000672 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800066a:	2317      	movs	r3, #23
 800066c:	18fb      	adds	r3, r7, r3
 800066e:	2202      	movs	r2, #2
 8000670:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000672:	2317      	movs	r3, #23
 8000674:	18fb      	adds	r3, r7, r3
 8000676:	781b      	ldrb	r3, [r3, #0]
}
 8000678:	0018      	movs	r0, r3
 800067a:	46bd      	mov	sp, r7
 800067c:	b007      	add	sp, #28
 800067e:	bd90      	pop	{r4, r7, pc}
 8000680:	fffff0fe 	.word	0xfffff0fe
 8000684:	0800088d 	.word	0x0800088d
 8000688:	08000941 	.word	0x08000941
 800068c:	0800095f 	.word	0x0800095f

08000690 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000698:	46c0      	nop			; (mov r8, r8)
 800069a:	46bd      	mov	sp, r7
 800069c:	b002      	add	sp, #8
 800069e:	bd80      	pop	{r7, pc}

080006a0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80006a8:	46c0      	nop			; (mov r8, r8)
 80006aa:	46bd      	mov	sp, r7
 80006ac:	b002      	add	sp, #8
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80006b8:	46c0      	nop			; (mov r8, r8)
 80006ba:	46bd      	mov	sp, r7
 80006bc:	b002      	add	sp, #8
 80006be:	bd80      	pop	{r7, pc}

080006c0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2254      	movs	r2, #84	; 0x54
 80006ce:	5c9b      	ldrb	r3, [r3, r2]
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d101      	bne.n	80006d8 <HAL_ADC_ConfigChannel+0x18>
 80006d4:	2302      	movs	r3, #2
 80006d6:	e06c      	b.n	80007b2 <HAL_ADC_ConfigChannel+0xf2>
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2254      	movs	r2, #84	; 0x54
 80006dc:	2101      	movs	r1, #1
 80006de:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	689b      	ldr	r3, [r3, #8]
 80006e6:	2204      	movs	r2, #4
 80006e8:	4013      	ands	r3, r2
 80006ea:	d00b      	beq.n	8000704 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006f0:	2220      	movs	r2, #32
 80006f2:	431a      	orrs	r2, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2254      	movs	r2, #84	; 0x54
 80006fc:	2100      	movs	r1, #0
 80006fe:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000700:	2301      	movs	r3, #1
 8000702:	e056      	b.n	80007b2 <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	685b      	ldr	r3, [r3, #4]
 8000708:	4a2c      	ldr	r2, [pc, #176]	; (80007bc <HAL_ADC_ConfigChannel+0xfc>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d028      	beq.n	8000760 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	6812      	ldr	r2, [r2, #0]
 8000716:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8000718:	683a      	ldr	r2, [r7, #0]
 800071a:	6812      	ldr	r2, [r2, #0]
 800071c:	0352      	lsls	r2, r2, #13
 800071e:	0b52      	lsrs	r2, r2, #13
 8000720:	430a      	orrs	r2, r1
 8000722:	629a      	str	r2, [r3, #40]	; 0x28
    /* internal measurement paths enable: If internal channel selected, enable  */
    /* dedicated internal buffers and path.                                     */
    
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	681a      	ldr	r2, [r3, #0]
 8000728:	2380      	movs	r3, #128	; 0x80
 800072a:	02db      	lsls	r3, r3, #11
 800072c:	4013      	ands	r3, r2
 800072e:	d009      	beq.n	8000744 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8000730:	4b23      	ldr	r3, [pc, #140]	; (80007c0 <HAL_ADC_ConfigChannel+0x100>)
 8000732:	4a23      	ldr	r2, [pc, #140]	; (80007c0 <HAL_ADC_ConfigChannel+0x100>)
 8000734:	6812      	ldr	r2, [r2, #0]
 8000736:	2180      	movs	r1, #128	; 0x80
 8000738:	0409      	lsls	r1, r1, #16
 800073a:	430a      	orrs	r2, r1
 800073c:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800073e:	200a      	movs	r0, #10
 8000740:	f000 f928 	bl	8000994 <ADC_DelayMicroSecond>
    }
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	2380      	movs	r3, #128	; 0x80
 800074a:	029b      	lsls	r3, r3, #10
 800074c:	4013      	ands	r3, r2
 800074e:	d02b      	beq.n	80007a8 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8000750:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <HAL_ADC_ConfigChannel+0x100>)
 8000752:	4a1b      	ldr	r2, [pc, #108]	; (80007c0 <HAL_ADC_ConfigChannel+0x100>)
 8000754:	6812      	ldr	r2, [r2, #0]
 8000756:	2180      	movs	r1, #128	; 0x80
 8000758:	03c9      	lsls	r1, r1, #15
 800075a:	430a      	orrs	r2, r1
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	e023      	b.n	80007a8 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	687a      	ldr	r2, [r7, #4]
 8000766:	6812      	ldr	r2, [r2, #0]
 8000768:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800076a:	683a      	ldr	r2, [r7, #0]
 800076c:	6812      	ldr	r2, [r2, #0]
 800076e:	0352      	lsls	r2, r2, #13
 8000770:	0b52      	lsrs	r2, r2, #13
 8000772:	43d2      	mvns	r2, r2
 8000774:	400a      	ands	r2, r1
 8000776:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	2380      	movs	r3, #128	; 0x80
 800077e:	02db      	lsls	r3, r3, #11
 8000780:	4013      	ands	r3, r2
 8000782:	d005      	beq.n	8000790 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8000784:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <HAL_ADC_ConfigChannel+0x100>)
 8000786:	4a0e      	ldr	r2, [pc, #56]	; (80007c0 <HAL_ADC_ConfigChannel+0x100>)
 8000788:	6812      	ldr	r2, [r2, #0]
 800078a:	490e      	ldr	r1, [pc, #56]	; (80007c4 <HAL_ADC_ConfigChannel+0x104>)
 800078c:	400a      	ands	r2, r1
 800078e:	601a      	str	r2, [r3, #0]
    }
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	681a      	ldr	r2, [r3, #0]
 8000794:	2380      	movs	r3, #128	; 0x80
 8000796:	029b      	lsls	r3, r3, #10
 8000798:	4013      	ands	r3, r2
 800079a:	d005      	beq.n	80007a8 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 800079c:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <HAL_ADC_ConfigChannel+0x100>)
 800079e:	4a08      	ldr	r2, [pc, #32]	; (80007c0 <HAL_ADC_ConfigChannel+0x100>)
 80007a0:	6812      	ldr	r2, [r2, #0]
 80007a2:	4909      	ldr	r1, [pc, #36]	; (80007c8 <HAL_ADC_ConfigChannel+0x108>)
 80007a4:	400a      	ands	r2, r1
 80007a6:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2254      	movs	r2, #84	; 0x54
 80007ac:	2100      	movs	r1, #0
 80007ae:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 80007b0:	2300      	movs	r3, #0
}
 80007b2:	0018      	movs	r0, r3
 80007b4:	46bd      	mov	sp, r7
 80007b6:	b002      	add	sp, #8
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	00001001 	.word	0x00001001
 80007c0:	40012708 	.word	0x40012708
 80007c4:	ff7fffff 	.word	0xff7fffff
 80007c8:	ffbfffff 	.word	0xffbfffff

080007cc <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80007d4:	2300      	movs	r3, #0
 80007d6:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	689b      	ldr	r3, [r3, #8]
 80007de:	2203      	movs	r2, #3
 80007e0:	4013      	ands	r3, r2
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	d108      	bne.n	80007f8 <ADC_Enable+0x2c>
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2201      	movs	r2, #1
 80007ee:	4013      	ands	r3, r2
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d101      	bne.n	80007f8 <ADC_Enable+0x2c>
 80007f4:	2301      	movs	r3, #1
 80007f6:	e000      	b.n	80007fa <ADC_Enable+0x2e>
 80007f8:	2300      	movs	r3, #0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d13f      	bne.n	800087e <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	689b      	ldr	r3, [r3, #8]
 8000804:	4a20      	ldr	r2, [pc, #128]	; (8000888 <ADC_Enable+0xbc>)
 8000806:	4013      	ands	r3, r2
 8000808:	d00d      	beq.n	8000826 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800080e:	2210      	movs	r2, #16
 8000810:	431a      	orrs	r2, r3
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800081a:	2201      	movs	r2, #1
 800081c:	431a      	orrs	r2, r3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	65da      	str	r2, [r3, #92]	; 0x5c
      
      return HAL_ERROR;
 8000822:	2301      	movs	r3, #1
 8000824:	e02c      	b.n	8000880 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	687a      	ldr	r2, [r7, #4]
 800082c:	6812      	ldr	r2, [r2, #0]
 800082e:	6892      	ldr	r2, [r2, #8]
 8000830:	2101      	movs	r1, #1
 8000832:	430a      	orrs	r2, r1
 8000834:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8000836:	2001      	movs	r0, #1
 8000838:	f000 f8ac 	bl	8000994 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800083c:	f7ff fd2e 	bl	800029c <HAL_GetTick>
 8000840:	0003      	movs	r3, r0
 8000842:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000844:	e014      	b.n	8000870 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000846:	f7ff fd29 	bl	800029c <HAL_GetTick>
 800084a:	0002      	movs	r2, r0
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	1ad3      	subs	r3, r2, r3
 8000850:	2b0a      	cmp	r3, #10
 8000852:	d90d      	bls.n	8000870 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000858:	2210      	movs	r2, #16
 800085a:	431a      	orrs	r2, r3
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000864:	2201      	movs	r2, #1
 8000866:	431a      	orrs	r2, r3
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	65da      	str	r2, [r3, #92]	; 0x5c
        
        return HAL_ERROR;
 800086c:	2301      	movs	r3, #1
 800086e:	e007      	b.n	8000880 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	2201      	movs	r2, #1
 8000878:	4013      	ands	r3, r2
 800087a:	2b01      	cmp	r3, #1
 800087c:	d1e3      	bne.n	8000846 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800087e:	2300      	movs	r3, #0
}
 8000880:	0018      	movs	r0, r3
 8000882:	46bd      	mov	sp, r7
 8000884:	b004      	add	sp, #16
 8000886:	bd80      	pop	{r7, pc}
 8000888:	80000017 	.word	0x80000017

0800088c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000898:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800089e:	2250      	movs	r2, #80	; 0x50
 80008a0:	4013      	ands	r3, r2
 80008a2:	d140      	bne.n	8000926 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008a8:	2280      	movs	r2, #128	; 0x80
 80008aa:	0092      	lsls	r2, r2, #2
 80008ac:	431a      	orrs	r2, r3
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	68da      	ldr	r2, [r3, #12]
 80008b8:	23c0      	movs	r3, #192	; 0xc0
 80008ba:	011b      	lsls	r3, r3, #4
 80008bc:	4013      	ands	r3, r2
 80008be:	d12d      	bne.n	800091c <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	6a1b      	ldr	r3, [r3, #32]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d129      	bne.n	800091c <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	2208      	movs	r2, #8
 80008d0:	4013      	ands	r3, r2
 80008d2:	2b08      	cmp	r3, #8
 80008d4:	d122      	bne.n	800091c <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	689b      	ldr	r3, [r3, #8]
 80008dc:	2204      	movs	r2, #4
 80008de:	4013      	ands	r3, r2
 80008e0:	d110      	bne.n	8000904 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	68fa      	ldr	r2, [r7, #12]
 80008e8:	6812      	ldr	r2, [r2, #0]
 80008ea:	6852      	ldr	r2, [r2, #4]
 80008ec:	210c      	movs	r1, #12
 80008ee:	438a      	bics	r2, r1
 80008f0:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008f6:	4a11      	ldr	r2, [pc, #68]	; (800093c <ADC_DMAConvCplt+0xb0>)
 80008f8:	4013      	ands	r3, r2
 80008fa:	2201      	movs	r2, #1
 80008fc:	431a      	orrs	r2, r3
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	659a      	str	r2, [r3, #88]	; 0x58
 8000902:	e00b      	b.n	800091c <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000908:	2220      	movs	r2, #32
 800090a:	431a      	orrs	r2, r3
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	659a      	str	r2, [r3, #88]	; 0x58
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000914:	2201      	movs	r2, #1
 8000916:	431a      	orrs	r2, r3
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	65da      	str	r2, [r3, #92]	; 0x5c
        }
      }
    }

    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc);
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	0018      	movs	r0, r3
 8000920:	f7ff feb6 	bl	8000690 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8000924:	e005      	b.n	8000932 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800092a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	0010      	movs	r0, r2
 8000930:	4798      	blx	r3
}
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	46bd      	mov	sp, r7
 8000936:	b004      	add	sp, #16
 8000938:	bd80      	pop	{r7, pc}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	fffffefe 	.word	0xfffffefe

08000940 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800094c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	0018      	movs	r0, r3
 8000952:	f7ff fea5 	bl	80006a0 <HAL_ADC_ConvHalfCpltCallback>
}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	46bd      	mov	sp, r7
 800095a:	b004      	add	sp, #16
 800095c:	bd80      	pop	{r7, pc}

0800095e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	b084      	sub	sp, #16
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800096a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000970:	2240      	movs	r2, #64	; 0x40
 8000972:	431a      	orrs	r2, r3
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800097c:	2204      	movs	r2, #4
 800097e:	431a      	orrs	r2, r3
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	65da      	str	r2, [r3, #92]	; 0x5c
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	0018      	movs	r0, r3
 8000988:	f7ff fe92 	bl	80006b0 <HAL_ADC_ErrorCallback>
}
 800098c:	46c0      	nop			; (mov r8, r8)
 800098e:	46bd      	mov	sp, r7
 8000990:	b004      	add	sp, #16
 8000992:	bd80      	pop	{r7, pc}

08000994 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond : delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800099c:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <ADC_DelayMicroSecond+0x34>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	490a      	ldr	r1, [pc, #40]	; (80009cc <ADC_DelayMicroSecond+0x38>)
 80009a2:	0018      	movs	r0, r3
 80009a4:	f7ff fbb0 	bl	8000108 <__udivsi3>
 80009a8:	0003      	movs	r3, r0
 80009aa:	001a      	movs	r2, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4353      	muls	r3, r2
 80009b0:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 80009b2:	e002      	b.n	80009ba <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	3b01      	subs	r3, #1
 80009b8:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d1f9      	bne.n	80009b4 <ADC_DelayMicroSecond+0x20>
  } 
}
 80009c0:	46c0      	nop			; (mov r8, r8)
 80009c2:	46bd      	mov	sp, r7
 80009c4:	b004      	add	sp, #16
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000000 	.word	0x20000000
 80009cc:	000f4240 	.word	0x000f4240

080009d0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	0002      	movs	r2, r0
 80009d8:	1dfb      	adds	r3, r7, #7
 80009da:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <NVIC_EnableIRQ+0x28>)
 80009de:	1dfa      	adds	r2, r7, #7
 80009e0:	7812      	ldrb	r2, [r2, #0]
 80009e2:	0011      	movs	r1, r2
 80009e4:	221f      	movs	r2, #31
 80009e6:	400a      	ands	r2, r1
 80009e8:	2101      	movs	r1, #1
 80009ea:	4091      	lsls	r1, r2
 80009ec:	000a      	movs	r2, r1
 80009ee:	601a      	str	r2, [r3, #0]
}
 80009f0:	46c0      	nop			; (mov r8, r8)
 80009f2:	46bd      	mov	sp, r7
 80009f4:	b002      	add	sp, #8
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	e000e100 	.word	0xe000e100

080009fc <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009fc:	b5b0      	push	{r4, r5, r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	0002      	movs	r2, r0
 8000a04:	6039      	str	r1, [r7, #0]
 8000a06:	1dfb      	adds	r3, r7, #7
 8000a08:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000a0a:	1dfb      	adds	r3, r7, #7
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	2b7f      	cmp	r3, #127	; 0x7f
 8000a10:	d932      	bls.n	8000a78 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a12:	4c2f      	ldr	r4, [pc, #188]	; (8000ad0 <NVIC_SetPriority+0xd4>)
 8000a14:	1dfb      	adds	r3, r7, #7
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	001a      	movs	r2, r3
 8000a1a:	230f      	movs	r3, #15
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	3b08      	subs	r3, #8
 8000a20:	0899      	lsrs	r1, r3, #2
 8000a22:	4a2b      	ldr	r2, [pc, #172]	; (8000ad0 <NVIC_SetPriority+0xd4>)
 8000a24:	1dfb      	adds	r3, r7, #7
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	0018      	movs	r0, r3
 8000a2a:	230f      	movs	r3, #15
 8000a2c:	4003      	ands	r3, r0
 8000a2e:	3b08      	subs	r3, #8
 8000a30:	089b      	lsrs	r3, r3, #2
 8000a32:	3306      	adds	r3, #6
 8000a34:	009b      	lsls	r3, r3, #2
 8000a36:	18d3      	adds	r3, r2, r3
 8000a38:	3304      	adds	r3, #4
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	1dfa      	adds	r2, r7, #7
 8000a3e:	7812      	ldrb	r2, [r2, #0]
 8000a40:	0010      	movs	r0, r2
 8000a42:	2203      	movs	r2, #3
 8000a44:	4002      	ands	r2, r0
 8000a46:	00d2      	lsls	r2, r2, #3
 8000a48:	20ff      	movs	r0, #255	; 0xff
 8000a4a:	4090      	lsls	r0, r2
 8000a4c:	0002      	movs	r2, r0
 8000a4e:	43d2      	mvns	r2, r2
 8000a50:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	019b      	lsls	r3, r3, #6
 8000a56:	20ff      	movs	r0, #255	; 0xff
 8000a58:	4018      	ands	r0, r3
 8000a5a:	1dfb      	adds	r3, r7, #7
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	001d      	movs	r5, r3
 8000a60:	2303      	movs	r3, #3
 8000a62:	402b      	ands	r3, r5
 8000a64:	00db      	lsls	r3, r3, #3
 8000a66:	4098      	lsls	r0, r3
 8000a68:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a6a:	431a      	orrs	r2, r3
 8000a6c:	1d8b      	adds	r3, r1, #6
 8000a6e:	009b      	lsls	r3, r3, #2
 8000a70:	18e3      	adds	r3, r4, r3
 8000a72:	3304      	adds	r3, #4
 8000a74:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a76:	e027      	b.n	8000ac8 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a78:	4c16      	ldr	r4, [pc, #88]	; (8000ad4 <NVIC_SetPriority+0xd8>)
 8000a7a:	1dfb      	adds	r3, r7, #7
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	b25b      	sxtb	r3, r3
 8000a80:	089b      	lsrs	r3, r3, #2
 8000a82:	4914      	ldr	r1, [pc, #80]	; (8000ad4 <NVIC_SetPriority+0xd8>)
 8000a84:	1dfa      	adds	r2, r7, #7
 8000a86:	7812      	ldrb	r2, [r2, #0]
 8000a88:	b252      	sxtb	r2, r2
 8000a8a:	0892      	lsrs	r2, r2, #2
 8000a8c:	32c0      	adds	r2, #192	; 0xc0
 8000a8e:	0092      	lsls	r2, r2, #2
 8000a90:	5852      	ldr	r2, [r2, r1]
 8000a92:	1df9      	adds	r1, r7, #7
 8000a94:	7809      	ldrb	r1, [r1, #0]
 8000a96:	0008      	movs	r0, r1
 8000a98:	2103      	movs	r1, #3
 8000a9a:	4001      	ands	r1, r0
 8000a9c:	00c9      	lsls	r1, r1, #3
 8000a9e:	20ff      	movs	r0, #255	; 0xff
 8000aa0:	4088      	lsls	r0, r1
 8000aa2:	0001      	movs	r1, r0
 8000aa4:	43c9      	mvns	r1, r1
 8000aa6:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000aa8:	683a      	ldr	r2, [r7, #0]
 8000aaa:	0192      	lsls	r2, r2, #6
 8000aac:	20ff      	movs	r0, #255	; 0xff
 8000aae:	4010      	ands	r0, r2
 8000ab0:	1dfa      	adds	r2, r7, #7
 8000ab2:	7812      	ldrb	r2, [r2, #0]
 8000ab4:	0015      	movs	r5, r2
 8000ab6:	2203      	movs	r2, #3
 8000ab8:	402a      	ands	r2, r5
 8000aba:	00d2      	lsls	r2, r2, #3
 8000abc:	4090      	lsls	r0, r2
 8000abe:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ac0:	430a      	orrs	r2, r1
 8000ac2:	33c0      	adds	r3, #192	; 0xc0
 8000ac4:	009b      	lsls	r3, r3, #2
 8000ac6:	511a      	str	r2, [r3, r4]
}
 8000ac8:	46c0      	nop			; (mov r8, r8)
 8000aca:	46bd      	mov	sp, r7
 8000acc:	b002      	add	sp, #8
 8000ace:	bdb0      	pop	{r4, r5, r7, pc}
 8000ad0:	e000ed00 	.word	0xe000ed00
 8000ad4:	e000e100 	.word	0xe000e100

08000ad8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	4a0c      	ldr	r2, [pc, #48]	; (8000b18 <SysTick_Config+0x40>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d901      	bls.n	8000aee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aea:	2301      	movs	r3, #1
 8000aec:	e010      	b.n	8000b10 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aee:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <SysTick_Config+0x44>)
 8000af0:	687a      	ldr	r2, [r7, #4]
 8000af2:	3a01      	subs	r2, #1
 8000af4:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000af6:	2301      	movs	r3, #1
 8000af8:	425b      	negs	r3, r3
 8000afa:	2103      	movs	r1, #3
 8000afc:	0018      	movs	r0, r3
 8000afe:	f7ff ff7d 	bl	80009fc <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <SysTick_Config+0x44>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b08:	4b04      	ldr	r3, [pc, #16]	; (8000b1c <SysTick_Config+0x44>)
 8000b0a:	2207      	movs	r2, #7
 8000b0c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b0e:	2300      	movs	r3, #0
}
 8000b10:	0018      	movs	r0, r3
 8000b12:	46bd      	mov	sp, r7
 8000b14:	b002      	add	sp, #8
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	00ffffff 	.word	0x00ffffff
 8000b1c:	e000e010 	.word	0xe000e010

08000b20 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60b9      	str	r1, [r7, #8]
 8000b28:	607a      	str	r2, [r7, #4]
 8000b2a:	230f      	movs	r3, #15
 8000b2c:	18fb      	adds	r3, r7, r3
 8000b2e:	1c02      	adds	r2, r0, #0
 8000b30:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	230f      	movs	r3, #15
 8000b36:	18fb      	adds	r3, r7, r3
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	b25b      	sxtb	r3, r3
 8000b3c:	0011      	movs	r1, r2
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f7ff ff5c 	bl	80009fc <NVIC_SetPriority>
}
 8000b44:	46c0      	nop			; (mov r8, r8)
 8000b46:	46bd      	mov	sp, r7
 8000b48:	b004      	add	sp, #16
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	0002      	movs	r2, r0
 8000b54:	1dfb      	adds	r3, r7, #7
 8000b56:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b58:	1dfb      	adds	r3, r7, #7
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	b25b      	sxtb	r3, r3
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f7ff ff36 	bl	80009d0 <NVIC_EnableIRQ>
}
 8000b64:	46c0      	nop			; (mov r8, r8)
 8000b66:	46bd      	mov	sp, r7
 8000b68:	b002      	add	sp, #8
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	0018      	movs	r0, r3
 8000b78:	f7ff ffae 	bl	8000ad8 <SysTick_Config>
 8000b7c:	0003      	movs	r3, r0
}
 8000b7e:	0018      	movs	r0, r3
 8000b80:	46bd      	mov	sp, r7
 8000b82:	b002      	add	sp, #8
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2b04      	cmp	r3, #4
 8000b94:	d106      	bne.n	8000ba4 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000b96:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000b98:	4a07      	ldr	r2, [pc, #28]	; (8000bb8 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000b9a:	6812      	ldr	r2, [r2, #0]
 8000b9c:	2104      	movs	r1, #4
 8000b9e:	430a      	orrs	r2, r1
 8000ba0:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000ba2:	e005      	b.n	8000bb0 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000ba4:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000ba6:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000ba8:	6812      	ldr	r2, [r2, #0]
 8000baa:	2104      	movs	r1, #4
 8000bac:	438a      	bics	r2, r1
 8000bae:	601a      	str	r2, [r3, #0]
}
 8000bb0:	46c0      	nop			; (mov r8, r8)
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	b002      	add	sp, #8
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	e000e010 	.word	0xe000e010

08000bbc <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000bc0:	f000 f803 	bl	8000bca <HAL_SYSTICK_Callback>
}
 8000bc4:	46c0      	nop			; (mov r8, r8)
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d101      	bne.n	8000bea <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	e0bf      	b.n	8000d6a <HAL_DMA_Init+0x196>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  if(hdma->State == HAL_DMA_STATE_RESET)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2225      	movs	r2, #37	; 0x25
 8000bee:	5c9b      	ldrb	r3, [r3, r2]
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d103      	bne.n	8000bfe <HAL_DMA_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2224      	movs	r2, #36	; 0x24
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	5499      	strb	r1, [r3, r2]
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2225      	movs	r2, #37	; 0x25
 8000c02:	2102      	movs	r1, #2
 8000c04:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	4a58      	ldr	r2, [pc, #352]	; (8000d74 <HAL_DMA_Init+0x1a0>)
 8000c12:	4013      	ands	r3, r2
 8000c14:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000c1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	691b      	ldr	r3, [r3, #16]
 8000c24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6a1b      	ldr	r3, [r3, #32]
 8000c3c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000c3e:	68fa      	ldr	r2, [r7, #12]
 8000c40:	4313      	orrs	r3, r2
 8000c42:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	68fa      	ldr	r2, [r7, #12]
 8000c4a:	601a      	str	r2, [r3, #0]
  
  /* Write to DMA channel selection register */
  if (hdma->Instance == DMA1_Channel1)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a49      	ldr	r2, [pc, #292]	; (8000d78 <HAL_DMA_Init+0x1a4>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d10d      	bne.n	8000c72 <HAL_DMA_Init+0x9e>
  {
    /*Reset request selection for DMA1 Channel1*/
    DMA1_CSELR->CSELR &= ~DMA_CSELR_C1S;
 8000c56:	4b49      	ldr	r3, [pc, #292]	; (8000d7c <HAL_DMA_Init+0x1a8>)
 8000c58:	4a48      	ldr	r2, [pc, #288]	; (8000d7c <HAL_DMA_Init+0x1a8>)
 8000c5a:	6812      	ldr	r2, [r2, #0]
 8000c5c:	210f      	movs	r1, #15
 8000c5e:	438a      	bics	r2, r1
 8000c60:	601a      	str	r2, [r3, #0]
    
    /* Configure request selection for DMA1 Channel1 */
    DMA1_CSELR->CSELR |= hdma->Init.Request;
 8000c62:	4a46      	ldr	r2, [pc, #280]	; (8000d7c <HAL_DMA_Init+0x1a8>)
 8000c64:	4b45      	ldr	r3, [pc, #276]	; (8000d7c <HAL_DMA_Init+0x1a8>)
 8000c66:	6819      	ldr	r1, [r3, #0]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	430b      	orrs	r3, r1
 8000c6e:	6013      	str	r3, [r2, #0]
 8000c70:	e076      	b.n	8000d60 <HAL_DMA_Init+0x18c>
  }
  else if (hdma->Instance == DMA1_Channel2)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a42      	ldr	r2, [pc, #264]	; (8000d80 <HAL_DMA_Init+0x1ac>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d10e      	bne.n	8000c9a <HAL_DMA_Init+0xc6>
  {
    /*Reset request selection for DMA1 Channel2*/
    DMA1_CSELR->CSELR &= ~DMA_CSELR_C2S;
 8000c7c:	4b3f      	ldr	r3, [pc, #252]	; (8000d7c <HAL_DMA_Init+0x1a8>)
 8000c7e:	4a3f      	ldr	r2, [pc, #252]	; (8000d7c <HAL_DMA_Init+0x1a8>)
 8000c80:	6812      	ldr	r2, [r2, #0]
 8000c82:	21f0      	movs	r1, #240	; 0xf0
 8000c84:	438a      	bics	r2, r1
 8000c86:	601a      	str	r2, [r3, #0]
    
    /* Configure request selection for DMA1 Channel2 */
    DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << 4U);
 8000c88:	4a3c      	ldr	r2, [pc, #240]	; (8000d7c <HAL_DMA_Init+0x1a8>)
 8000c8a:	4b3c      	ldr	r3, [pc, #240]	; (8000d7c <HAL_DMA_Init+0x1a8>)
 8000c8c:	6819      	ldr	r1, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	011b      	lsls	r3, r3, #4
 8000c94:	430b      	orrs	r3, r1
 8000c96:	6013      	str	r3, [r2, #0]
 8000c98:	e062      	b.n	8000d60 <HAL_DMA_Init+0x18c>
  }
  else if (hdma->Instance == DMA1_Channel3)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a39      	ldr	r2, [pc, #228]	; (8000d84 <HAL_DMA_Init+0x1b0>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d10e      	bne.n	8000cc2 <HAL_DMA_Init+0xee>
  {
    /*Reset request selection for DMA1 Channel3*/
    DMA1_CSELR->CSELR &= ~DMA_CSELR_C3S;
 8000ca4:	4b35      	ldr	r3, [pc, #212]	; (8000d7c <HAL_DMA_Init+0x1a8>)
 8000ca6:	4a35      	ldr	r2, [pc, #212]	; (8000d7c <HAL_DMA_Init+0x1a8>)
 8000ca8:	6812      	ldr	r2, [r2, #0]
 8000caa:	4937      	ldr	r1, [pc, #220]	; (8000d88 <HAL_DMA_Init+0x1b4>)
 8000cac:	400a      	ands	r2, r1
 8000cae:	601a      	str	r2, [r3, #0]
    
    /* Configure request selection for DMA1 Channel3 */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << 8U);
 8000cb0:	4a32      	ldr	r2, [pc, #200]	; (8000d7c <HAL_DMA_Init+0x1a8>)
 8000cb2:	4b32      	ldr	r3, [pc, #200]	; (8000d7c <HAL_DMA_Init+0x1a8>)
 8000cb4:	6819      	ldr	r1, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	021b      	lsls	r3, r3, #8
 8000cbc:	430b      	orrs	r3, r1
 8000cbe:	6013      	str	r3, [r2, #0]
 8000cc0:	e04e      	b.n	8000d60 <HAL_DMA_Init+0x18c>
  }
  else if (hdma->Instance == DMA1_Channel4)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a31      	ldr	r2, [pc, #196]	; (8000d8c <HAL_DMA_Init+0x1b8>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d10e      	bne.n	8000cea <HAL_DMA_Init+0x116>
  {
    /*Reset request selection for DMA1 Channel4*/
    DMA1_CSELR->CSELR &= ~DMA_CSELR_C4S;
 8000ccc:	4b2b      	ldr	r3, [pc, #172]	; (8000d7c <HAL_DMA_Init+0x1a8>)
 8000cce:	4a2b      	ldr	r2, [pc, #172]	; (8000d7c <HAL_DMA_Init+0x1a8>)
 8000cd0:	6812      	ldr	r2, [r2, #0]
 8000cd2:	492f      	ldr	r1, [pc, #188]	; (8000d90 <HAL_DMA_Init+0x1bc>)
 8000cd4:	400a      	ands	r2, r1
 8000cd6:	601a      	str	r2, [r3, #0]
    
    /* Configure request selection for DMA1 Channel4 */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << 12U);
 8000cd8:	4a28      	ldr	r2, [pc, #160]	; (8000d7c <HAL_DMA_Init+0x1a8>)
 8000cda:	4b28      	ldr	r3, [pc, #160]	; (8000d7c <HAL_DMA_Init+0x1a8>)
 8000cdc:	6819      	ldr	r1, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	031b      	lsls	r3, r3, #12
 8000ce4:	430b      	orrs	r3, r1
 8000ce6:	6013      	str	r3, [r2, #0]
 8000ce8:	e03a      	b.n	8000d60 <HAL_DMA_Init+0x18c>
  }
  else if (hdma->Instance == DMA1_Channel5)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a29      	ldr	r2, [pc, #164]	; (8000d94 <HAL_DMA_Init+0x1c0>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d10e      	bne.n	8000d12 <HAL_DMA_Init+0x13e>
  {
    /*Reset request selection for DMA1 Channel5*/
    DMA1_CSELR->CSELR &= ~DMA_CSELR_C5S;
 8000cf4:	4b21      	ldr	r3, [pc, #132]	; (8000d7c <HAL_DMA_Init+0x1a8>)
 8000cf6:	4a21      	ldr	r2, [pc, #132]	; (8000d7c <HAL_DMA_Init+0x1a8>)
 8000cf8:	6812      	ldr	r2, [r2, #0]
 8000cfa:	4927      	ldr	r1, [pc, #156]	; (8000d98 <HAL_DMA_Init+0x1c4>)
 8000cfc:	400a      	ands	r2, r1
 8000cfe:	601a      	str	r2, [r3, #0]
    
    /* Configure request selection for DMA1 Channel5 */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << 16U);
 8000d00:	4a1e      	ldr	r2, [pc, #120]	; (8000d7c <HAL_DMA_Init+0x1a8>)
 8000d02:	4b1e      	ldr	r3, [pc, #120]	; (8000d7c <HAL_DMA_Init+0x1a8>)
 8000d04:	6819      	ldr	r1, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	041b      	lsls	r3, r3, #16
 8000d0c:	430b      	orrs	r3, r1
 8000d0e:	6013      	str	r3, [r2, #0]
 8000d10:	e026      	b.n	8000d60 <HAL_DMA_Init+0x18c>
  }
#if !defined (STM32L011xx) && !defined (STM32L021xx)
  else if (hdma->Instance == DMA1_Channel6)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a21      	ldr	r2, [pc, #132]	; (8000d9c <HAL_DMA_Init+0x1c8>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d10e      	bne.n	8000d3a <HAL_DMA_Init+0x166>
  {
    /*Reset request selection for DMA1 Channel6*/
    DMA1_CSELR->CSELR &= ~DMA_CSELR_C6S;
 8000d1c:	4b17      	ldr	r3, [pc, #92]	; (8000d7c <HAL_DMA_Init+0x1a8>)
 8000d1e:	4a17      	ldr	r2, [pc, #92]	; (8000d7c <HAL_DMA_Init+0x1a8>)
 8000d20:	6812      	ldr	r2, [r2, #0]
 8000d22:	491f      	ldr	r1, [pc, #124]	; (8000da0 <HAL_DMA_Init+0x1cc>)
 8000d24:	400a      	ands	r2, r1
 8000d26:	601a      	str	r2, [r3, #0]
    
    /* Configure request selection for DMA1 Channel6 */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << 20U);
 8000d28:	4a14      	ldr	r2, [pc, #80]	; (8000d7c <HAL_DMA_Init+0x1a8>)
 8000d2a:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <HAL_DMA_Init+0x1a8>)
 8000d2c:	6819      	ldr	r1, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	051b      	lsls	r3, r3, #20
 8000d34:	430b      	orrs	r3, r1
 8000d36:	6013      	str	r3, [r2, #0]
 8000d38:	e012      	b.n	8000d60 <HAL_DMA_Init+0x18c>
  }
  else if (hdma->Instance == DMA1_Channel7)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a19      	ldr	r2, [pc, #100]	; (8000da4 <HAL_DMA_Init+0x1d0>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d10d      	bne.n	8000d60 <HAL_DMA_Init+0x18c>
  {
    /*Reset request selection for DMA1 Channel7*/
    DMA1_CSELR->CSELR &= ~DMA_CSELR_C7S;
 8000d44:	4b0d      	ldr	r3, [pc, #52]	; (8000d7c <HAL_DMA_Init+0x1a8>)
 8000d46:	4a0d      	ldr	r2, [pc, #52]	; (8000d7c <HAL_DMA_Init+0x1a8>)
 8000d48:	6812      	ldr	r2, [r2, #0]
 8000d4a:	4917      	ldr	r1, [pc, #92]	; (8000da8 <HAL_DMA_Init+0x1d4>)
 8000d4c:	400a      	ands	r2, r1
 8000d4e:	601a      	str	r2, [r3, #0]
    
    /* Configure request selection for DMA1 Channel7 */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << 24U);
 8000d50:	4a0a      	ldr	r2, [pc, #40]	; (8000d7c <HAL_DMA_Init+0x1a8>)
 8000d52:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <HAL_DMA_Init+0x1a8>)
 8000d54:	6819      	ldr	r1, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	061b      	lsls	r3, r3, #24
 8000d5c:	430b      	orrs	r3, r1
 8000d5e:	6013      	str	r3, [r2, #0]
  }
#endif   
  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2225      	movs	r2, #37	; 0x25
 8000d64:	2101      	movs	r1, #1
 8000d66:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000d68:	2300      	movs	r3, #0
}  
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	b004      	add	sp, #16
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	ffffc00f 	.word	0xffffc00f
 8000d78:	40020008 	.word	0x40020008
 8000d7c:	400200a8 	.word	0x400200a8
 8000d80:	4002001c 	.word	0x4002001c
 8000d84:	40020030 	.word	0x40020030
 8000d88:	fffff0ff 	.word	0xfffff0ff
 8000d8c:	40020044 	.word	0x40020044
 8000d90:	ffff0fff 	.word	0xffff0fff
 8000d94:	40020058 	.word	0x40020058
 8000d98:	fff0ffff 	.word	0xfff0ffff
 8000d9c:	4002006c 	.word	0x4002006c
 8000da0:	ff0fffff 	.word	0xff0fffff
 8000da4:	40020080 	.word	0x40020080
 8000da8:	f0ffffff 	.word	0xf0ffffff

08000dac <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
 8000db8:	603b      	str	r3, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdma);
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	2224      	movs	r2, #36	; 0x24
 8000dbe:	5c9b      	ldrb	r3, [r3, r2]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d101      	bne.n	8000dc8 <HAL_DMA_Start_IT+0x1c>
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	e036      	b.n	8000e36 <HAL_DMA_Start_IT+0x8a>
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	2224      	movs	r2, #36	; 0x24
 8000dcc:	2101      	movs	r1, #1
 8000dce:	5499      	strb	r1, [r3, r2]

  /* Change DMA peripheral state */  
  hdma->State = HAL_DMA_STATE_BUSY;  
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	2225      	movs	r2, #37	; 0x25
 8000dd4:	2102      	movs	r1, #2
 8000dd6:	5499      	strb	r1, [r3, r2]

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	68fa      	ldr	r2, [r7, #12]
 8000dde:	6812      	ldr	r2, [r2, #0]
 8000de0:	6812      	ldr	r2, [r2, #0]
 8000de2:	2101      	movs	r1, #1
 8000de4:	438a      	bics	r2, r1
 8000de6:	601a      	str	r2, [r3, #0]
  
  /* Configure the source, destination address and the data length */  
  DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	68b9      	ldr	r1, [r7, #8]
 8000dee:	68f8      	ldr	r0, [r7, #12]
 8000df0:	f000 fa10 	bl	8001214 <DMA_SetConfig>
  
  /* Enable the transfer complete interrupt */
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	68fa      	ldr	r2, [r7, #12]
 8000dfa:	6812      	ldr	r2, [r2, #0]
 8000dfc:	6812      	ldr	r2, [r2, #0]
 8000dfe:	2102      	movs	r1, #2
 8000e00:	430a      	orrs	r2, r1
 8000e02:	601a      	str	r2, [r3, #0]

  /* Enable the Half transfer complete interrupt */
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	68fa      	ldr	r2, [r7, #12]
 8000e0a:	6812      	ldr	r2, [r2, #0]
 8000e0c:	6812      	ldr	r2, [r2, #0]
 8000e0e:	2104      	movs	r1, #4
 8000e10:	430a      	orrs	r2, r1
 8000e12:	601a      	str	r2, [r3, #0]

  /* Enable the transfer Error interrupt */
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	68fa      	ldr	r2, [r7, #12]
 8000e1a:	6812      	ldr	r2, [r2, #0]
 8000e1c:	6812      	ldr	r2, [r2, #0]
 8000e1e:	2108      	movs	r1, #8
 8000e20:	430a      	orrs	r2, r1
 8000e22:	601a      	str	r2, [r3, #0]
  
   /* Enable the Peripheral */
  __HAL_DMA_ENABLE(hdma);   
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	68fa      	ldr	r2, [r7, #12]
 8000e2a:	6812      	ldr	r2, [r2, #0]
 8000e2c:	6812      	ldr	r2, [r2, #0]
 8000e2e:	2101      	movs	r1, #1
 8000e30:	430a      	orrs	r2, r1
 8000e32:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;    
 8000e34:	2300      	movs	r3, #0
} 
 8000e36:	0018      	movs	r0, r3
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	b004      	add	sp, #16
 8000e3c:	bd80      	pop	{r7, pc}
	...

08000e40 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{        
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8000e48:	4bb0      	ldr	r3, [pc, #704]	; (800110c <HAL_DMA_IRQHandler+0x2cc>)
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	0019      	movs	r1, r3
 8000e52:	4baf      	ldr	r3, [pc, #700]	; (8001110 <HAL_DMA_IRQHandler+0x2d0>)
 8000e54:	4299      	cmp	r1, r3
 8000e56:	d02e      	beq.n	8000eb6 <HAL_DMA_IRQHandler+0x76>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	0019      	movs	r1, r3
 8000e5e:	4bad      	ldr	r3, [pc, #692]	; (8001114 <HAL_DMA_IRQHandler+0x2d4>)
 8000e60:	4299      	cmp	r1, r3
 8000e62:	d026      	beq.n	8000eb2 <HAL_DMA_IRQHandler+0x72>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	0019      	movs	r1, r3
 8000e6a:	4bab      	ldr	r3, [pc, #684]	; (8001118 <HAL_DMA_IRQHandler+0x2d8>)
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d01d      	beq.n	8000eac <HAL_DMA_IRQHandler+0x6c>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	0019      	movs	r1, r3
 8000e76:	4ba9      	ldr	r3, [pc, #676]	; (800111c <HAL_DMA_IRQHandler+0x2dc>)
 8000e78:	4299      	cmp	r1, r3
 8000e7a:	d014      	beq.n	8000ea6 <HAL_DMA_IRQHandler+0x66>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	0019      	movs	r1, r3
 8000e82:	4ba7      	ldr	r3, [pc, #668]	; (8001120 <HAL_DMA_IRQHandler+0x2e0>)
 8000e84:	4299      	cmp	r1, r3
 8000e86:	d00b      	beq.n	8000ea0 <HAL_DMA_IRQHandler+0x60>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	0019      	movs	r1, r3
 8000e8e:	4ba5      	ldr	r3, [pc, #660]	; (8001124 <HAL_DMA_IRQHandler+0x2e4>)
 8000e90:	4299      	cmp	r1, r3
 8000e92:	d102      	bne.n	8000e9a <HAL_DMA_IRQHandler+0x5a>
 8000e94:	2380      	movs	r3, #128	; 0x80
 8000e96:	041b      	lsls	r3, r3, #16
 8000e98:	e00e      	b.n	8000eb8 <HAL_DMA_IRQHandler+0x78>
 8000e9a:	2380      	movs	r3, #128	; 0x80
 8000e9c:	051b      	lsls	r3, r3, #20
 8000e9e:	e00b      	b.n	8000eb8 <HAL_DMA_IRQHandler+0x78>
 8000ea0:	2380      	movs	r3, #128	; 0x80
 8000ea2:	031b      	lsls	r3, r3, #12
 8000ea4:	e008      	b.n	8000eb8 <HAL_DMA_IRQHandler+0x78>
 8000ea6:	2380      	movs	r3, #128	; 0x80
 8000ea8:	021b      	lsls	r3, r3, #8
 8000eaa:	e005      	b.n	8000eb8 <HAL_DMA_IRQHandler+0x78>
 8000eac:	2380      	movs	r3, #128	; 0x80
 8000eae:	011b      	lsls	r3, r3, #4
 8000eb0:	e002      	b.n	8000eb8 <HAL_DMA_IRQHandler+0x78>
 8000eb2:	2380      	movs	r3, #128	; 0x80
 8000eb4:	e000      	b.n	8000eb8 <HAL_DMA_IRQHandler+0x78>
 8000eb6:	2308      	movs	r3, #8
 8000eb8:	4013      	ands	r3, r2
 8000eba:	d05c      	beq.n	8000f76 <HAL_DMA_IRQHandler+0x136>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2208      	movs	r2, #8
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	d056      	beq.n	8000f76 <HAL_DMA_IRQHandler+0x136>
    {
      /* Disable the transfer error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	6812      	ldr	r2, [r2, #0]
 8000ed0:	6812      	ldr	r2, [r2, #0]
 8000ed2:	2108      	movs	r1, #8
 8000ed4:	438a      	bics	r2, r1
 8000ed6:	601a      	str	r2, [r3, #0]
    
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000ed8:	4a8c      	ldr	r2, [pc, #560]	; (800110c <HAL_DMA_IRQHandler+0x2cc>)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	0019      	movs	r1, r3
 8000ee0:	4b8b      	ldr	r3, [pc, #556]	; (8001110 <HAL_DMA_IRQHandler+0x2d0>)
 8000ee2:	4299      	cmp	r1, r3
 8000ee4:	d02e      	beq.n	8000f44 <HAL_DMA_IRQHandler+0x104>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	0019      	movs	r1, r3
 8000eec:	4b89      	ldr	r3, [pc, #548]	; (8001114 <HAL_DMA_IRQHandler+0x2d4>)
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d026      	beq.n	8000f40 <HAL_DMA_IRQHandler+0x100>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	0019      	movs	r1, r3
 8000ef8:	4b87      	ldr	r3, [pc, #540]	; (8001118 <HAL_DMA_IRQHandler+0x2d8>)
 8000efa:	4299      	cmp	r1, r3
 8000efc:	d01d      	beq.n	8000f3a <HAL_DMA_IRQHandler+0xfa>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	0019      	movs	r1, r3
 8000f04:	4b85      	ldr	r3, [pc, #532]	; (800111c <HAL_DMA_IRQHandler+0x2dc>)
 8000f06:	4299      	cmp	r1, r3
 8000f08:	d014      	beq.n	8000f34 <HAL_DMA_IRQHandler+0xf4>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	0019      	movs	r1, r3
 8000f10:	4b83      	ldr	r3, [pc, #524]	; (8001120 <HAL_DMA_IRQHandler+0x2e0>)
 8000f12:	4299      	cmp	r1, r3
 8000f14:	d00b      	beq.n	8000f2e <HAL_DMA_IRQHandler+0xee>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	0019      	movs	r1, r3
 8000f1c:	4b81      	ldr	r3, [pc, #516]	; (8001124 <HAL_DMA_IRQHandler+0x2e4>)
 8000f1e:	4299      	cmp	r1, r3
 8000f20:	d102      	bne.n	8000f28 <HAL_DMA_IRQHandler+0xe8>
 8000f22:	2380      	movs	r3, #128	; 0x80
 8000f24:	041b      	lsls	r3, r3, #16
 8000f26:	e00e      	b.n	8000f46 <HAL_DMA_IRQHandler+0x106>
 8000f28:	2380      	movs	r3, #128	; 0x80
 8000f2a:	051b      	lsls	r3, r3, #20
 8000f2c:	e00b      	b.n	8000f46 <HAL_DMA_IRQHandler+0x106>
 8000f2e:	2380      	movs	r3, #128	; 0x80
 8000f30:	031b      	lsls	r3, r3, #12
 8000f32:	e008      	b.n	8000f46 <HAL_DMA_IRQHandler+0x106>
 8000f34:	2380      	movs	r3, #128	; 0x80
 8000f36:	021b      	lsls	r3, r3, #8
 8000f38:	e005      	b.n	8000f46 <HAL_DMA_IRQHandler+0x106>
 8000f3a:	2380      	movs	r3, #128	; 0x80
 8000f3c:	011b      	lsls	r3, r3, #4
 8000f3e:	e002      	b.n	8000f46 <HAL_DMA_IRQHandler+0x106>
 8000f40:	2380      	movs	r3, #128	; 0x80
 8000f42:	e000      	b.n	8000f46 <HAL_DMA_IRQHandler+0x106>
 8000f44:	2308      	movs	r3, #8
 8000f46:	6053      	str	r3, [r2, #4]
    
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	431a      	orrs	r2, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;    
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2225      	movs	r2, #37	; 0x25
 8000f58:	2104      	movs	r1, #4
 8000f5a:	5499      	strb	r1, [r3, r2]
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma); 
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2224      	movs	r2, #36	; 0x24
 8000f60:	2100      	movs	r1, #0
 8000f62:	5499      	strb	r1, [r3, r2]
    
      if (hdma->XferErrorCallback != NULL)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d004      	beq.n	8000f76 <HAL_DMA_IRQHandler+0x136>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f70:	687a      	ldr	r2, [r7, #4]
 8000f72:	0010      	movs	r0, r2
 8000f74:	4798      	blx	r3
      }
    }
  }

  /* Half Transfer Complete Interrupt management ******************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8000f76:	4b65      	ldr	r3, [pc, #404]	; (800110c <HAL_DMA_IRQHandler+0x2cc>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	0019      	movs	r1, r3
 8000f80:	4b63      	ldr	r3, [pc, #396]	; (8001110 <HAL_DMA_IRQHandler+0x2d0>)
 8000f82:	4299      	cmp	r1, r3
 8000f84:	d02e      	beq.n	8000fe4 <HAL_DMA_IRQHandler+0x1a4>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	0019      	movs	r1, r3
 8000f8c:	4b61      	ldr	r3, [pc, #388]	; (8001114 <HAL_DMA_IRQHandler+0x2d4>)
 8000f8e:	4299      	cmp	r1, r3
 8000f90:	d026      	beq.n	8000fe0 <HAL_DMA_IRQHandler+0x1a0>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	0019      	movs	r1, r3
 8000f98:	4b5f      	ldr	r3, [pc, #380]	; (8001118 <HAL_DMA_IRQHandler+0x2d8>)
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d01d      	beq.n	8000fda <HAL_DMA_IRQHandler+0x19a>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	0019      	movs	r1, r3
 8000fa4:	4b5d      	ldr	r3, [pc, #372]	; (800111c <HAL_DMA_IRQHandler+0x2dc>)
 8000fa6:	4299      	cmp	r1, r3
 8000fa8:	d014      	beq.n	8000fd4 <HAL_DMA_IRQHandler+0x194>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	0019      	movs	r1, r3
 8000fb0:	4b5b      	ldr	r3, [pc, #364]	; (8001120 <HAL_DMA_IRQHandler+0x2e0>)
 8000fb2:	4299      	cmp	r1, r3
 8000fb4:	d00b      	beq.n	8000fce <HAL_DMA_IRQHandler+0x18e>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	0019      	movs	r1, r3
 8000fbc:	4b59      	ldr	r3, [pc, #356]	; (8001124 <HAL_DMA_IRQHandler+0x2e4>)
 8000fbe:	4299      	cmp	r1, r3
 8000fc0:	d102      	bne.n	8000fc8 <HAL_DMA_IRQHandler+0x188>
 8000fc2:	2380      	movs	r3, #128	; 0x80
 8000fc4:	03db      	lsls	r3, r3, #15
 8000fc6:	e00e      	b.n	8000fe6 <HAL_DMA_IRQHandler+0x1a6>
 8000fc8:	2380      	movs	r3, #128	; 0x80
 8000fca:	04db      	lsls	r3, r3, #19
 8000fcc:	e00b      	b.n	8000fe6 <HAL_DMA_IRQHandler+0x1a6>
 8000fce:	2380      	movs	r3, #128	; 0x80
 8000fd0:	02db      	lsls	r3, r3, #11
 8000fd2:	e008      	b.n	8000fe6 <HAL_DMA_IRQHandler+0x1a6>
 8000fd4:	2380      	movs	r3, #128	; 0x80
 8000fd6:	01db      	lsls	r3, r3, #7
 8000fd8:	e005      	b.n	8000fe6 <HAL_DMA_IRQHandler+0x1a6>
 8000fda:	2380      	movs	r3, #128	; 0x80
 8000fdc:	00db      	lsls	r3, r3, #3
 8000fde:	e002      	b.n	8000fe6 <HAL_DMA_IRQHandler+0x1a6>
 8000fe0:	2340      	movs	r3, #64	; 0x40
 8000fe2:	e000      	b.n	8000fe6 <HAL_DMA_IRQHandler+0x1a6>
 8000fe4:	2304      	movs	r3, #4
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	d058      	beq.n	800109c <HAL_DMA_IRQHandler+0x25c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2204      	movs	r2, #4
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	d052      	beq.n	800109c <HAL_DMA_IRQHandler+0x25c>
    { 
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2220      	movs	r2, #32
 8000ffe:	4013      	ands	r3, r2
 8001000:	d107      	bne.n	8001012 <HAL_DMA_IRQHandler+0x1d2>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	6812      	ldr	r2, [r2, #0]
 800100a:	6812      	ldr	r2, [r2, #0]
 800100c:	2104      	movs	r1, #4
 800100e:	438a      	bics	r2, r1
 8001010:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001012:	4a3e      	ldr	r2, [pc, #248]	; (800110c <HAL_DMA_IRQHandler+0x2cc>)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	0019      	movs	r1, r3
 800101a:	4b3d      	ldr	r3, [pc, #244]	; (8001110 <HAL_DMA_IRQHandler+0x2d0>)
 800101c:	4299      	cmp	r1, r3
 800101e:	d02e      	beq.n	800107e <HAL_DMA_IRQHandler+0x23e>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	0019      	movs	r1, r3
 8001026:	4b3b      	ldr	r3, [pc, #236]	; (8001114 <HAL_DMA_IRQHandler+0x2d4>)
 8001028:	4299      	cmp	r1, r3
 800102a:	d026      	beq.n	800107a <HAL_DMA_IRQHandler+0x23a>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	0019      	movs	r1, r3
 8001032:	4b39      	ldr	r3, [pc, #228]	; (8001118 <HAL_DMA_IRQHandler+0x2d8>)
 8001034:	4299      	cmp	r1, r3
 8001036:	d01d      	beq.n	8001074 <HAL_DMA_IRQHandler+0x234>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	0019      	movs	r1, r3
 800103e:	4b37      	ldr	r3, [pc, #220]	; (800111c <HAL_DMA_IRQHandler+0x2dc>)
 8001040:	4299      	cmp	r1, r3
 8001042:	d014      	beq.n	800106e <HAL_DMA_IRQHandler+0x22e>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	0019      	movs	r1, r3
 800104a:	4b35      	ldr	r3, [pc, #212]	; (8001120 <HAL_DMA_IRQHandler+0x2e0>)
 800104c:	4299      	cmp	r1, r3
 800104e:	d00b      	beq.n	8001068 <HAL_DMA_IRQHandler+0x228>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	0019      	movs	r1, r3
 8001056:	4b33      	ldr	r3, [pc, #204]	; (8001124 <HAL_DMA_IRQHandler+0x2e4>)
 8001058:	4299      	cmp	r1, r3
 800105a:	d102      	bne.n	8001062 <HAL_DMA_IRQHandler+0x222>
 800105c:	2380      	movs	r3, #128	; 0x80
 800105e:	03db      	lsls	r3, r3, #15
 8001060:	e00e      	b.n	8001080 <HAL_DMA_IRQHandler+0x240>
 8001062:	2380      	movs	r3, #128	; 0x80
 8001064:	04db      	lsls	r3, r3, #19
 8001066:	e00b      	b.n	8001080 <HAL_DMA_IRQHandler+0x240>
 8001068:	2380      	movs	r3, #128	; 0x80
 800106a:	02db      	lsls	r3, r3, #11
 800106c:	e008      	b.n	8001080 <HAL_DMA_IRQHandler+0x240>
 800106e:	2380      	movs	r3, #128	; 0x80
 8001070:	01db      	lsls	r3, r3, #7
 8001072:	e005      	b.n	8001080 <HAL_DMA_IRQHandler+0x240>
 8001074:	2380      	movs	r3, #128	; 0x80
 8001076:	00db      	lsls	r3, r3, #3
 8001078:	e002      	b.n	8001080 <HAL_DMA_IRQHandler+0x240>
 800107a:	2340      	movs	r3, #64	; 0x40
 800107c:	e000      	b.n	8001080 <HAL_DMA_IRQHandler+0x240>
 800107e:	2304      	movs	r3, #4
 8001080:	6053      	str	r3, [r2, #4]

      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2225      	movs	r2, #37	; 0x25
 8001086:	2105      	movs	r1, #5
 8001088:	5499      	strb	r1, [r3, r2]

      if(hdma->XferHalfCpltCallback != NULL)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	2b00      	cmp	r3, #0
 8001090:	d004      	beq.n	800109c <HAL_DMA_IRQHandler+0x25c>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	0010      	movs	r0, r2
 800109a:	4798      	blx	r3
      }
    }
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800109c:	4b1b      	ldr	r3, [pc, #108]	; (800110c <HAL_DMA_IRQHandler+0x2cc>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	0019      	movs	r1, r3
 80010a6:	4b1a      	ldr	r3, [pc, #104]	; (8001110 <HAL_DMA_IRQHandler+0x2d0>)
 80010a8:	4299      	cmp	r1, r3
 80010aa:	d03d      	beq.n	8001128 <HAL_DMA_IRQHandler+0x2e8>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	0019      	movs	r1, r3
 80010b2:	4b18      	ldr	r3, [pc, #96]	; (8001114 <HAL_DMA_IRQHandler+0x2d4>)
 80010b4:	4299      	cmp	r1, r3
 80010b6:	d026      	beq.n	8001106 <HAL_DMA_IRQHandler+0x2c6>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	0019      	movs	r1, r3
 80010be:	4b16      	ldr	r3, [pc, #88]	; (8001118 <HAL_DMA_IRQHandler+0x2d8>)
 80010c0:	4299      	cmp	r1, r3
 80010c2:	d01d      	beq.n	8001100 <HAL_DMA_IRQHandler+0x2c0>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	0019      	movs	r1, r3
 80010ca:	4b14      	ldr	r3, [pc, #80]	; (800111c <HAL_DMA_IRQHandler+0x2dc>)
 80010cc:	4299      	cmp	r1, r3
 80010ce:	d014      	beq.n	80010fa <HAL_DMA_IRQHandler+0x2ba>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	0019      	movs	r1, r3
 80010d6:	4b12      	ldr	r3, [pc, #72]	; (8001120 <HAL_DMA_IRQHandler+0x2e0>)
 80010d8:	4299      	cmp	r1, r3
 80010da:	d00b      	beq.n	80010f4 <HAL_DMA_IRQHandler+0x2b4>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	0019      	movs	r1, r3
 80010e2:	4b10      	ldr	r3, [pc, #64]	; (8001124 <HAL_DMA_IRQHandler+0x2e4>)
 80010e4:	4299      	cmp	r1, r3
 80010e6:	d102      	bne.n	80010ee <HAL_DMA_IRQHandler+0x2ae>
 80010e8:	2380      	movs	r3, #128	; 0x80
 80010ea:	039b      	lsls	r3, r3, #14
 80010ec:	e01d      	b.n	800112a <HAL_DMA_IRQHandler+0x2ea>
 80010ee:	2380      	movs	r3, #128	; 0x80
 80010f0:	049b      	lsls	r3, r3, #18
 80010f2:	e01a      	b.n	800112a <HAL_DMA_IRQHandler+0x2ea>
 80010f4:	2380      	movs	r3, #128	; 0x80
 80010f6:	029b      	lsls	r3, r3, #10
 80010f8:	e017      	b.n	800112a <HAL_DMA_IRQHandler+0x2ea>
 80010fa:	2380      	movs	r3, #128	; 0x80
 80010fc:	019b      	lsls	r3, r3, #6
 80010fe:	e014      	b.n	800112a <HAL_DMA_IRQHandler+0x2ea>
 8001100:	2380      	movs	r3, #128	; 0x80
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	e011      	b.n	800112a <HAL_DMA_IRQHandler+0x2ea>
 8001106:	2320      	movs	r3, #32
 8001108:	e00f      	b.n	800112a <HAL_DMA_IRQHandler+0x2ea>
 800110a:	46c0      	nop			; (mov r8, r8)
 800110c:	40020000 	.word	0x40020000
 8001110:	40020008 	.word	0x40020008
 8001114:	4002001c 	.word	0x4002001c
 8001118:	40020030 	.word	0x40020030
 800111c:	40020044 	.word	0x40020044
 8001120:	40020058 	.word	0x40020058
 8001124:	4002006c 	.word	0x4002006c
 8001128:	2302      	movs	r3, #2
 800112a:	4013      	ands	r3, r2
 800112c:	d060      	beq.n	80011f0 <HAL_DMA_IRQHandler+0x3b0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2202      	movs	r2, #2
 8001136:	4013      	ands	r3, r2
 8001138:	d05a      	beq.n	80011f0 <HAL_DMA_IRQHandler+0x3b0>
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2220      	movs	r2, #32
 8001142:	4013      	ands	r3, r2
 8001144:	d107      	bne.n	8001156 <HAL_DMA_IRQHandler+0x316>
      {
        /* Disable the transfer complete interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	6812      	ldr	r2, [r2, #0]
 800114e:	6812      	ldr	r2, [r2, #0]
 8001150:	2102      	movs	r1, #2
 8001152:	438a      	bics	r2, r1
 8001154:	601a      	str	r2, [r3, #0]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001156:	4a28      	ldr	r2, [pc, #160]	; (80011f8 <HAL_DMA_IRQHandler+0x3b8>)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	0019      	movs	r1, r3
 800115e:	4b27      	ldr	r3, [pc, #156]	; (80011fc <HAL_DMA_IRQHandler+0x3bc>)
 8001160:	4299      	cmp	r1, r3
 8001162:	d02e      	beq.n	80011c2 <HAL_DMA_IRQHandler+0x382>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	0019      	movs	r1, r3
 800116a:	4b25      	ldr	r3, [pc, #148]	; (8001200 <HAL_DMA_IRQHandler+0x3c0>)
 800116c:	4299      	cmp	r1, r3
 800116e:	d026      	beq.n	80011be <HAL_DMA_IRQHandler+0x37e>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	0019      	movs	r1, r3
 8001176:	4b23      	ldr	r3, [pc, #140]	; (8001204 <HAL_DMA_IRQHandler+0x3c4>)
 8001178:	4299      	cmp	r1, r3
 800117a:	d01d      	beq.n	80011b8 <HAL_DMA_IRQHandler+0x378>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	0019      	movs	r1, r3
 8001182:	4b21      	ldr	r3, [pc, #132]	; (8001208 <HAL_DMA_IRQHandler+0x3c8>)
 8001184:	4299      	cmp	r1, r3
 8001186:	d014      	beq.n	80011b2 <HAL_DMA_IRQHandler+0x372>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	0019      	movs	r1, r3
 800118e:	4b1f      	ldr	r3, [pc, #124]	; (800120c <HAL_DMA_IRQHandler+0x3cc>)
 8001190:	4299      	cmp	r1, r3
 8001192:	d00b      	beq.n	80011ac <HAL_DMA_IRQHandler+0x36c>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	0019      	movs	r1, r3
 800119a:	4b1d      	ldr	r3, [pc, #116]	; (8001210 <HAL_DMA_IRQHandler+0x3d0>)
 800119c:	4299      	cmp	r1, r3
 800119e:	d102      	bne.n	80011a6 <HAL_DMA_IRQHandler+0x366>
 80011a0:	2380      	movs	r3, #128	; 0x80
 80011a2:	039b      	lsls	r3, r3, #14
 80011a4:	e00e      	b.n	80011c4 <HAL_DMA_IRQHandler+0x384>
 80011a6:	2380      	movs	r3, #128	; 0x80
 80011a8:	049b      	lsls	r3, r3, #18
 80011aa:	e00b      	b.n	80011c4 <HAL_DMA_IRQHandler+0x384>
 80011ac:	2380      	movs	r3, #128	; 0x80
 80011ae:	029b      	lsls	r3, r3, #10
 80011b0:	e008      	b.n	80011c4 <HAL_DMA_IRQHandler+0x384>
 80011b2:	2380      	movs	r3, #128	; 0x80
 80011b4:	019b      	lsls	r3, r3, #6
 80011b6:	e005      	b.n	80011c4 <HAL_DMA_IRQHandler+0x384>
 80011b8:	2380      	movs	r3, #128	; 0x80
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	e002      	b.n	80011c4 <HAL_DMA_IRQHandler+0x384>
 80011be:	2320      	movs	r3, #32
 80011c0:	e000      	b.n	80011c4 <HAL_DMA_IRQHandler+0x384>
 80011c2:	2302      	movs	r3, #2
 80011c4:	6053      	str	r3, [r2, #4]
    
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_NONE;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;    
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2225      	movs	r2, #37	; 0x25
 80011d2:	2101      	movs	r1, #1
 80011d4:	5499      	strb	r1, [r3, r2]
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2224      	movs	r2, #36	; 0x24
 80011da:	2100      	movs	r1, #0
 80011dc:	5499      	strb	r1, [r3, r2]
    
      if(hdma->XferCpltCallback != NULL)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d004      	beq.n	80011f0 <HAL_DMA_IRQHandler+0x3b0>
      {       
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	0010      	movs	r0, r2
 80011ee:	4798      	blx	r3
      }
    }
  }
}  
 80011f0:	46c0      	nop			; (mov r8, r8)
 80011f2:	46bd      	mov	sp, r7
 80011f4:	b002      	add	sp, #8
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40020000 	.word	0x40020000
 80011fc:	40020008 	.word	0x40020008
 8001200:	4002001c 	.word	0x4002001c
 8001204:	40020030 	.word	0x40020030
 8001208:	40020044 	.word	0x40020044
 800120c:	40020058 	.word	0x40020058
 8001210:	4002006c 	.word	0x4002006c

08001214 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
 8001220:	603b      	str	r3, [r7, #0]
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	683a      	ldr	r2, [r7, #0]
 8001228:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	2b10      	cmp	r3, #16
 8001230:	d108      	bne.n	8001244 <DMA_SetConfig+0x30>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	68ba      	ldr	r2, [r7, #8]
 8001240:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001242:	e007      	b.n	8001254 <DMA_SetConfig+0x40>
    hdma->Instance->CPAR = SrcAddress;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	68ba      	ldr	r2, [r7, #8]
 800124a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	60da      	str	r2, [r3, #12]
}
 8001254:	46c0      	nop			; (mov r8, r8)
 8001256:	46bd      	mov	sp, r7
 8001258:	b004      	add	sp, #16
 800125a:	bd80      	pop	{r7, pc}

0800125c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001266:	2300      	movs	r3, #0
 8001268:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800126e:	2300      	movs	r3, #0
 8001270:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001272:	e155      	b.n	8001520 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2101      	movs	r1, #1
 800127a:	697a      	ldr	r2, [r7, #20]
 800127c:	4091      	lsls	r1, r2
 800127e:	000a      	movs	r2, r1
 8001280:	4013      	ands	r3, r2
 8001282:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d100      	bne.n	800128c <HAL_GPIO_Init+0x30>
 800128a:	e146      	b.n	800151a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	2b02      	cmp	r3, #2
 8001292:	d003      	beq.n	800129c <HAL_GPIO_Init+0x40>
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	2b12      	cmp	r3, #18
 800129a:	d123      	bne.n	80012e4 <HAL_GPIO_Init+0x88>
      {
        /* Check if the Alternate function is compliant with the GPIO in use */
        assert_param(IS_GPIO_AF_AVAILABLE(GPIOx,(GPIO_Init->Alternate)));
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	08da      	lsrs	r2, r3, #3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3208      	adds	r2, #8
 80012a4:	0092      	lsls	r2, r2, #2
 80012a6:	58d3      	ldr	r3, [r2, r3]
 80012a8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	2207      	movs	r2, #7
 80012ae:	4013      	ands	r3, r2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	220f      	movs	r2, #15
 80012b4:	409a      	lsls	r2, r3
 80012b6:	0013      	movs	r3, r2
 80012b8:	43da      	mvns	r2, r3
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	4013      	ands	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	691a      	ldr	r2, [r3, #16]
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	2107      	movs	r1, #7
 80012c8:	400b      	ands	r3, r1
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	409a      	lsls	r2, r3
 80012ce:	0013      	movs	r3, r2
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	08da      	lsrs	r2, r3, #3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	3208      	adds	r2, #8
 80012de:	0092      	lsls	r2, r2, #2
 80012e0:	6939      	ldr	r1, [r7, #16]
 80012e2:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d00b      	beq.n	8001304 <HAL_GPIO_Init+0xa8>
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d007      	beq.n	8001304 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012f8:	2b11      	cmp	r3, #17
 80012fa:	d003      	beq.n	8001304 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	2b12      	cmp	r3, #18
 8001302:	d130      	bne.n	8001366 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	2203      	movs	r2, #3
 8001310:	409a      	lsls	r2, r3
 8001312:	0013      	movs	r3, r2
 8001314:	43da      	mvns	r2, r3
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	4013      	ands	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	68da      	ldr	r2, [r3, #12]
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	409a      	lsls	r2, r3
 8001326:	0013      	movs	r3, r2
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	4313      	orrs	r3, r2
 800132c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800133a:	2201      	movs	r2, #1
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	409a      	lsls	r2, r3
 8001340:	0013      	movs	r3, r2
 8001342:	43da      	mvns	r2, r3
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	4013      	ands	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	091b      	lsrs	r3, r3, #4
 8001350:	2201      	movs	r2, #1
 8001352:	401a      	ands	r2, r3
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	409a      	lsls	r2, r3
 8001358:	0013      	movs	r3, r2
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	4313      	orrs	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	2203      	movs	r2, #3
 8001372:	409a      	lsls	r2, r3
 8001374:	0013      	movs	r3, r2
 8001376:	43da      	mvns	r2, r3
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	4013      	ands	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	2203      	movs	r2, #3
 8001384:	401a      	ands	r2, r3
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	409a      	lsls	r2, r3
 800138c:	0013      	movs	r3, r2
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	4313      	orrs	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	2203      	movs	r2, #3
 80013a6:	409a      	lsls	r2, r3
 80013a8:	0013      	movs	r3, r2
 80013aa:	43da      	mvns	r2, r3
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	4013      	ands	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	689a      	ldr	r2, [r3, #8]
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	409a      	lsls	r2, r3
 80013bc:	0013      	movs	r3, r2
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685a      	ldr	r2, [r3, #4]
 80013ce:	2380      	movs	r3, #128	; 0x80
 80013d0:	055b      	lsls	r3, r3, #21
 80013d2:	4013      	ands	r3, r2
 80013d4:	d100      	bne.n	80013d8 <HAL_GPIO_Init+0x17c>
 80013d6:	e0a0      	b.n	800151a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d8:	4b57      	ldr	r3, [pc, #348]	; (8001538 <HAL_GPIO_Init+0x2dc>)
 80013da:	4a57      	ldr	r2, [pc, #348]	; (8001538 <HAL_GPIO_Init+0x2dc>)
 80013dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80013de:	2101      	movs	r1, #1
 80013e0:	430a      	orrs	r2, r1
 80013e2:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 80013e4:	4a55      	ldr	r2, [pc, #340]	; (800153c <HAL_GPIO_Init+0x2e0>)
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	089b      	lsrs	r3, r3, #2
 80013ea:	3302      	adds	r3, #2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	589b      	ldr	r3, [r3, r2]
 80013f0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	2203      	movs	r2, #3
 80013f6:	4013      	ands	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	220f      	movs	r2, #15
 80013fc:	409a      	lsls	r2, r3
 80013fe:	0013      	movs	r3, r2
 8001400:	43da      	mvns	r2, r3
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	4013      	ands	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	23a0      	movs	r3, #160	; 0xa0
 800140c:	05db      	lsls	r3, r3, #23
 800140e:	429a      	cmp	r2, r3
 8001410:	d01f      	beq.n	8001452 <HAL_GPIO_Init+0x1f6>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a4a      	ldr	r2, [pc, #296]	; (8001540 <HAL_GPIO_Init+0x2e4>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d019      	beq.n	800144e <HAL_GPIO_Init+0x1f2>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a49      	ldr	r2, [pc, #292]	; (8001544 <HAL_GPIO_Init+0x2e8>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d013      	beq.n	800144a <HAL_GPIO_Init+0x1ee>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a48      	ldr	r2, [pc, #288]	; (8001548 <HAL_GPIO_Init+0x2ec>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d00d      	beq.n	8001446 <HAL_GPIO_Init+0x1ea>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a47      	ldr	r2, [pc, #284]	; (800154c <HAL_GPIO_Init+0x2f0>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d007      	beq.n	8001442 <HAL_GPIO_Init+0x1e6>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a46      	ldr	r2, [pc, #280]	; (8001550 <HAL_GPIO_Init+0x2f4>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d101      	bne.n	800143e <HAL_GPIO_Init+0x1e2>
 800143a:	2305      	movs	r3, #5
 800143c:	e00a      	b.n	8001454 <HAL_GPIO_Init+0x1f8>
 800143e:	2306      	movs	r3, #6
 8001440:	e008      	b.n	8001454 <HAL_GPIO_Init+0x1f8>
 8001442:	2304      	movs	r3, #4
 8001444:	e006      	b.n	8001454 <HAL_GPIO_Init+0x1f8>
 8001446:	2303      	movs	r3, #3
 8001448:	e004      	b.n	8001454 <HAL_GPIO_Init+0x1f8>
 800144a:	2302      	movs	r3, #2
 800144c:	e002      	b.n	8001454 <HAL_GPIO_Init+0x1f8>
 800144e:	2301      	movs	r3, #1
 8001450:	e000      	b.n	8001454 <HAL_GPIO_Init+0x1f8>
 8001452:	2300      	movs	r3, #0
 8001454:	697a      	ldr	r2, [r7, #20]
 8001456:	2103      	movs	r1, #3
 8001458:	400a      	ands	r2, r1
 800145a:	0092      	lsls	r2, r2, #2
 800145c:	4093      	lsls	r3, r2
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	4313      	orrs	r3, r2
 8001462:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001464:	4935      	ldr	r1, [pc, #212]	; (800153c <HAL_GPIO_Init+0x2e0>)
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	089b      	lsrs	r3, r3, #2
 800146a:	3302      	adds	r3, #2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001472:	4b38      	ldr	r3, [pc, #224]	; (8001554 <HAL_GPIO_Init+0x2f8>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	43da      	mvns	r2, r3
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	4013      	ands	r3, r2
 8001480:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685a      	ldr	r2, [r3, #4]
 8001486:	2380      	movs	r3, #128	; 0x80
 8001488:	025b      	lsls	r3, r3, #9
 800148a:	4013      	ands	r3, r2
 800148c:	d003      	beq.n	8001496 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	4313      	orrs	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001496:	4b2f      	ldr	r3, [pc, #188]	; (8001554 <HAL_GPIO_Init+0x2f8>)
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800149c:	4b2d      	ldr	r3, [pc, #180]	; (8001554 <HAL_GPIO_Init+0x2f8>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	43da      	mvns	r2, r3
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	4013      	ands	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685a      	ldr	r2, [r3, #4]
 80014b0:	2380      	movs	r3, #128	; 0x80
 80014b2:	029b      	lsls	r3, r3, #10
 80014b4:	4013      	ands	r3, r2
 80014b6:	d003      	beq.n	80014c0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	4313      	orrs	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80014c0:	4b24      	ldr	r3, [pc, #144]	; (8001554 <HAL_GPIO_Init+0x2f8>)
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014c6:	4b23      	ldr	r3, [pc, #140]	; (8001554 <HAL_GPIO_Init+0x2f8>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	43da      	mvns	r2, r3
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	4013      	ands	r3, r2
 80014d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685a      	ldr	r2, [r3, #4]
 80014da:	2380      	movs	r3, #128	; 0x80
 80014dc:	035b      	lsls	r3, r3, #13
 80014de:	4013      	ands	r3, r2
 80014e0:	d003      	beq.n	80014ea <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80014ea:	4b1a      	ldr	r3, [pc, #104]	; (8001554 <HAL_GPIO_Init+0x2f8>)
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80014f0:	4b18      	ldr	r3, [pc, #96]	; (8001554 <HAL_GPIO_Init+0x2f8>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	43da      	mvns	r2, r3
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	4013      	ands	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	2380      	movs	r3, #128	; 0x80
 8001506:	039b      	lsls	r3, r3, #14
 8001508:	4013      	ands	r3, r2
 800150a:	d003      	beq.n	8001514 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	4313      	orrs	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001514:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <HAL_GPIO_Init+0x2f8>)
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	3301      	adds	r3, #1
 800151e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	40da      	lsrs	r2, r3
 8001528:	1e13      	subs	r3, r2, #0
 800152a:	d000      	beq.n	800152e <HAL_GPIO_Init+0x2d2>
 800152c:	e6a2      	b.n	8001274 <HAL_GPIO_Init+0x18>
  }
}
 800152e:	46c0      	nop			; (mov r8, r8)
 8001530:	46bd      	mov	sp, r7
 8001532:	b006      	add	sp, #24
 8001534:	bd80      	pop	{r7, pc}
 8001536:	46c0      	nop			; (mov r8, r8)
 8001538:	40021000 	.word	0x40021000
 800153c:	40010000 	.word	0x40010000
 8001540:	50000400 	.word	0x50000400
 8001544:	50000800 	.word	0x50000800
 8001548:	50000c00 	.word	0x50000c00
 800154c:	50001000 	.word	0x50001000
 8001550:	50001c00 	.word	0x50001c00
 8001554:	40010400 	.word	0x40010400

08001558 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	0008      	movs	r0, r1
 8001562:	0011      	movs	r1, r2
 8001564:	1cbb      	adds	r3, r7, #2
 8001566:	1c02      	adds	r2, r0, #0
 8001568:	801a      	strh	r2, [r3, #0]
 800156a:	1c7b      	adds	r3, r7, #1
 800156c:	1c0a      	adds	r2, r1, #0
 800156e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8001570:	1c7b      	adds	r3, r7, #1
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d004      	beq.n	8001582 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001578:	1cbb      	adds	r3, r7, #2
 800157a:	881a      	ldrh	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001580:	e003      	b.n	800158a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001582:	1cbb      	adds	r3, r7, #2
 8001584:	881a      	ldrh	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	629a      	str	r2, [r3, #40]	; 0x28
}
 800158a:	46c0      	nop			; (mov r8, r8)
 800158c:	46bd      	mov	sp, r7
 800158e:	b002      	add	sp, #8
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b082      	sub	sp, #8
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
 800159a:	000a      	movs	r2, r1
 800159c:	1cbb      	adds	r3, r7, #2
 800159e:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	695a      	ldr	r2, [r3, #20]
 80015a4:	1cbb      	adds	r3, r7, #2
 80015a6:	881b      	ldrh	r3, [r3, #0]
 80015a8:	405a      	eors	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	615a      	str	r2, [r3, #20]
}
 80015ae:	46c0      	nop			; (mov r8, r8)
 80015b0:	46bd      	mov	sp, r7
 80015b2:	b002      	add	sp, #8
 80015b4:	bd80      	pop	{r7, pc}
	...

080015b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80015c0:	2300      	movs	r3, #0
 80015c2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2201      	movs	r2, #1
 80015ca:	4013      	ands	r3, r2
 80015cc:	d100      	bne.n	80015d0 <HAL_RCC_OscConfig+0x18>
 80015ce:	e087      	b.n	80016e0 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80015d0:	4bc0      	ldr	r3, [pc, #768]	; (80018d4 <HAL_RCC_OscConfig+0x31c>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	220c      	movs	r2, #12
 80015d6:	4013      	ands	r3, r2
 80015d8:	2b08      	cmp	r3, #8
 80015da:	d00e      	beq.n	80015fa <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015dc:	4bbd      	ldr	r3, [pc, #756]	; (80018d4 <HAL_RCC_OscConfig+0x31c>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	220c      	movs	r2, #12
 80015e2:	4013      	ands	r3, r2
 80015e4:	2b0c      	cmp	r3, #12
 80015e6:	d116      	bne.n	8001616 <HAL_RCC_OscConfig+0x5e>
 80015e8:	4bba      	ldr	r3, [pc, #744]	; (80018d4 <HAL_RCC_OscConfig+0x31c>)
 80015ea:	68da      	ldr	r2, [r3, #12]
 80015ec:	2380      	movs	r3, #128	; 0x80
 80015ee:	025b      	lsls	r3, r3, #9
 80015f0:	401a      	ands	r2, r3
 80015f2:	2380      	movs	r3, #128	; 0x80
 80015f4:	025b      	lsls	r3, r3, #9
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d10d      	bne.n	8001616 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015fa:	4bb6      	ldr	r3, [pc, #728]	; (80018d4 <HAL_RCC_OscConfig+0x31c>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	2380      	movs	r3, #128	; 0x80
 8001600:	029b      	lsls	r3, r3, #10
 8001602:	4013      	ands	r3, r2
 8001604:	d100      	bne.n	8001608 <HAL_RCC_OscConfig+0x50>
 8001606:	e06a      	b.n	80016de <HAL_RCC_OscConfig+0x126>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d166      	bne.n	80016de <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	f000 fb69 	bl	8001ce8 <HAL_RCC_OscConfig+0x730>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685a      	ldr	r2, [r3, #4]
 800161a:	2380      	movs	r3, #128	; 0x80
 800161c:	025b      	lsls	r3, r3, #9
 800161e:	429a      	cmp	r2, r3
 8001620:	d107      	bne.n	8001632 <HAL_RCC_OscConfig+0x7a>
 8001622:	4bac      	ldr	r3, [pc, #688]	; (80018d4 <HAL_RCC_OscConfig+0x31c>)
 8001624:	4aab      	ldr	r2, [pc, #684]	; (80018d4 <HAL_RCC_OscConfig+0x31c>)
 8001626:	6812      	ldr	r2, [r2, #0]
 8001628:	2180      	movs	r1, #128	; 0x80
 800162a:	0249      	lsls	r1, r1, #9
 800162c:	430a      	orrs	r2, r1
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	e027      	b.n	8001682 <HAL_RCC_OscConfig+0xca>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685a      	ldr	r2, [r3, #4]
 8001636:	23a0      	movs	r3, #160	; 0xa0
 8001638:	02db      	lsls	r3, r3, #11
 800163a:	429a      	cmp	r2, r3
 800163c:	d10e      	bne.n	800165c <HAL_RCC_OscConfig+0xa4>
 800163e:	4ba5      	ldr	r3, [pc, #660]	; (80018d4 <HAL_RCC_OscConfig+0x31c>)
 8001640:	4aa4      	ldr	r2, [pc, #656]	; (80018d4 <HAL_RCC_OscConfig+0x31c>)
 8001642:	6812      	ldr	r2, [r2, #0]
 8001644:	2180      	movs	r1, #128	; 0x80
 8001646:	02c9      	lsls	r1, r1, #11
 8001648:	430a      	orrs	r2, r1
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	4ba1      	ldr	r3, [pc, #644]	; (80018d4 <HAL_RCC_OscConfig+0x31c>)
 800164e:	4aa1      	ldr	r2, [pc, #644]	; (80018d4 <HAL_RCC_OscConfig+0x31c>)
 8001650:	6812      	ldr	r2, [r2, #0]
 8001652:	2180      	movs	r1, #128	; 0x80
 8001654:	0249      	lsls	r1, r1, #9
 8001656:	430a      	orrs	r2, r1
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	e012      	b.n	8001682 <HAL_RCC_OscConfig+0xca>
 800165c:	4b9d      	ldr	r3, [pc, #628]	; (80018d4 <HAL_RCC_OscConfig+0x31c>)
 800165e:	4a9d      	ldr	r2, [pc, #628]	; (80018d4 <HAL_RCC_OscConfig+0x31c>)
 8001660:	6812      	ldr	r2, [r2, #0]
 8001662:	499d      	ldr	r1, [pc, #628]	; (80018d8 <HAL_RCC_OscConfig+0x320>)
 8001664:	400a      	ands	r2, r1
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	4b9a      	ldr	r3, [pc, #616]	; (80018d4 <HAL_RCC_OscConfig+0x31c>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	2380      	movs	r3, #128	; 0x80
 800166e:	025b      	lsls	r3, r3, #9
 8001670:	4013      	ands	r3, r2
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	4b97      	ldr	r3, [pc, #604]	; (80018d4 <HAL_RCC_OscConfig+0x31c>)
 8001678:	4a96      	ldr	r2, [pc, #600]	; (80018d4 <HAL_RCC_OscConfig+0x31c>)
 800167a:	6812      	ldr	r2, [r2, #0]
 800167c:	4997      	ldr	r1, [pc, #604]	; (80018dc <HAL_RCC_OscConfig+0x324>)
 800167e:	400a      	ands	r2, r1
 8001680:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d014      	beq.n	80016b4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168a:	f7fe fe07 	bl	800029c <HAL_GetTick>
 800168e:	0003      	movs	r3, r0
 8001690:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001694:	f7fe fe02 	bl	800029c <HAL_GetTick>
 8001698:	0002      	movs	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b64      	cmp	r3, #100	; 0x64
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e320      	b.n	8001ce8 <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016a6:	4b8b      	ldr	r3, [pc, #556]	; (80018d4 <HAL_RCC_OscConfig+0x31c>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	2380      	movs	r3, #128	; 0x80
 80016ac:	029b      	lsls	r3, r3, #10
 80016ae:	4013      	ands	r3, r2
 80016b0:	d0f0      	beq.n	8001694 <HAL_RCC_OscConfig+0xdc>
 80016b2:	e015      	b.n	80016e0 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b4:	f7fe fdf2 	bl	800029c <HAL_GetTick>
 80016b8:	0003      	movs	r3, r0
 80016ba:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016bc:	e008      	b.n	80016d0 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016be:	f7fe fded 	bl	800029c <HAL_GetTick>
 80016c2:	0002      	movs	r2, r0
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b64      	cmp	r3, #100	; 0x64
 80016ca:	d901      	bls.n	80016d0 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e30b      	b.n	8001ce8 <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016d0:	4b80      	ldr	r3, [pc, #512]	; (80018d4 <HAL_RCC_OscConfig+0x31c>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	2380      	movs	r3, #128	; 0x80
 80016d6:	029b      	lsls	r3, r3, #10
 80016d8:	4013      	ands	r3, r2
 80016da:	d1f0      	bne.n	80016be <HAL_RCC_OscConfig+0x106>
 80016dc:	e000      	b.n	80016e0 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016de:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2202      	movs	r2, #2
 80016e6:	4013      	ands	r3, r2
 80016e8:	d100      	bne.n	80016ec <HAL_RCC_OscConfig+0x134>
 80016ea:	e06c      	b.n	80017c6 <HAL_RCC_OscConfig+0x20e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80016ec:	4b79      	ldr	r3, [pc, #484]	; (80018d4 <HAL_RCC_OscConfig+0x31c>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	220c      	movs	r2, #12
 80016f2:	4013      	ands	r3, r2
 80016f4:	2b04      	cmp	r3, #4
 80016f6:	d00b      	beq.n	8001710 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80016f8:	4b76      	ldr	r3, [pc, #472]	; (80018d4 <HAL_RCC_OscConfig+0x31c>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	220c      	movs	r2, #12
 80016fe:	4013      	ands	r3, r2
 8001700:	2b0c      	cmp	r3, #12
 8001702:	d11b      	bne.n	800173c <HAL_RCC_OscConfig+0x184>
 8001704:	4b73      	ldr	r3, [pc, #460]	; (80018d4 <HAL_RCC_OscConfig+0x31c>)
 8001706:	68da      	ldr	r2, [r3, #12]
 8001708:	2380      	movs	r3, #128	; 0x80
 800170a:	025b      	lsls	r3, r3, #9
 800170c:	4013      	ands	r3, r2
 800170e:	d115      	bne.n	800173c <HAL_RCC_OscConfig+0x184>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001710:	4b70      	ldr	r3, [pc, #448]	; (80018d4 <HAL_RCC_OscConfig+0x31c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2204      	movs	r2, #4
 8001716:	4013      	ands	r3, r2
 8001718:	d005      	beq.n	8001726 <HAL_RCC_OscConfig+0x16e>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d001      	beq.n	8001726 <HAL_RCC_OscConfig+0x16e>
      {
        return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e2e0      	b.n	8001ce8 <HAL_RCC_OscConfig+0x730>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001726:	4a6b      	ldr	r2, [pc, #428]	; (80018d4 <HAL_RCC_OscConfig+0x31c>)
 8001728:	4b6a      	ldr	r3, [pc, #424]	; (80018d4 <HAL_RCC_OscConfig+0x31c>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	496c      	ldr	r1, [pc, #432]	; (80018e0 <HAL_RCC_OscConfig+0x328>)
 800172e:	4019      	ands	r1, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	021b      	lsls	r3, r3, #8
 8001736:	430b      	orrs	r3, r1
 8001738:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800173a:	e044      	b.n	80017c6 <HAL_RCC_OscConfig+0x20e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d027      	beq.n	8001794 <HAL_RCC_OscConfig+0x1dc>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001744:	4a63      	ldr	r2, [pc, #396]	; (80018d4 <HAL_RCC_OscConfig+0x31c>)
 8001746:	4b63      	ldr	r3, [pc, #396]	; (80018d4 <HAL_RCC_OscConfig+0x31c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2109      	movs	r1, #9
 800174c:	438b      	bics	r3, r1
 800174e:	0019      	movs	r1, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	430b      	orrs	r3, r1
 8001756:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001758:	f7fe fda0 	bl	800029c <HAL_GetTick>
 800175c:	0003      	movs	r3, r0
 800175e:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001760:	e008      	b.n	8001774 <HAL_RCC_OscConfig+0x1bc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001762:	f7fe fd9b 	bl	800029c <HAL_GetTick>
 8001766:	0002      	movs	r2, r0
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x1bc>
          {
            return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e2b9      	b.n	8001ce8 <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001774:	4b57      	ldr	r3, [pc, #348]	; (80018d4 <HAL_RCC_OscConfig+0x31c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2204      	movs	r2, #4
 800177a:	4013      	ands	r3, r2
 800177c:	d0f1      	beq.n	8001762 <HAL_RCC_OscConfig+0x1aa>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800177e:	4a55      	ldr	r2, [pc, #340]	; (80018d4 <HAL_RCC_OscConfig+0x31c>)
 8001780:	4b54      	ldr	r3, [pc, #336]	; (80018d4 <HAL_RCC_OscConfig+0x31c>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	4956      	ldr	r1, [pc, #344]	; (80018e0 <HAL_RCC_OscConfig+0x328>)
 8001786:	4019      	ands	r1, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	021b      	lsls	r3, r3, #8
 800178e:	430b      	orrs	r3, r1
 8001790:	6053      	str	r3, [r2, #4]
 8001792:	e018      	b.n	80017c6 <HAL_RCC_OscConfig+0x20e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001794:	4b4f      	ldr	r3, [pc, #316]	; (80018d4 <HAL_RCC_OscConfig+0x31c>)
 8001796:	4a4f      	ldr	r2, [pc, #316]	; (80018d4 <HAL_RCC_OscConfig+0x31c>)
 8001798:	6812      	ldr	r2, [r2, #0]
 800179a:	2101      	movs	r1, #1
 800179c:	438a      	bics	r2, r1
 800179e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a0:	f7fe fd7c 	bl	800029c <HAL_GetTick>
 80017a4:	0003      	movs	r3, r0
 80017a6:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017a8:	e008      	b.n	80017bc <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017aa:	f7fe fd77 	bl	800029c <HAL_GetTick>
 80017ae:	0002      	movs	r2, r0
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e295      	b.n	8001ce8 <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017bc:	4b45      	ldr	r3, [pc, #276]	; (80018d4 <HAL_RCC_OscConfig+0x31c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2204      	movs	r2, #4
 80017c2:	4013      	ands	r3, r2
 80017c4:	d1f1      	bne.n	80017aa <HAL_RCC_OscConfig+0x1f2>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2210      	movs	r2, #16
 80017cc:	4013      	ands	r3, r2
 80017ce:	d100      	bne.n	80017d2 <HAL_RCC_OscConfig+0x21a>
 80017d0:	e0c2      	b.n	8001958 <HAL_RCC_OscConfig+0x3a0>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 80017d2:	4b40      	ldr	r3, [pc, #256]	; (80018d4 <HAL_RCC_OscConfig+0x31c>)
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	220c      	movs	r2, #12
 80017d8:	4013      	ands	r3, r2
 80017da:	d162      	bne.n	80018a2 <HAL_RCC_OscConfig+0x2ea>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017dc:	4b3d      	ldr	r3, [pc, #244]	; (80018d4 <HAL_RCC_OscConfig+0x31c>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	2380      	movs	r3, #128	; 0x80
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	4013      	ands	r3, r2
 80017e6:	d005      	beq.n	80017f4 <HAL_RCC_OscConfig+0x23c>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	69db      	ldr	r3, [r3, #28]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d101      	bne.n	80017f4 <HAL_RCC_OscConfig+0x23c>
      {
        return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e279      	b.n	8001ce8 <HAL_RCC_OscConfig+0x730>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017f8:	4b36      	ldr	r3, [pc, #216]	; (80018d4 <HAL_RCC_OscConfig+0x31c>)
 80017fa:	6859      	ldr	r1, [r3, #4]
 80017fc:	23e0      	movs	r3, #224	; 0xe0
 80017fe:	021b      	lsls	r3, r3, #8
 8001800:	400b      	ands	r3, r1
 8001802:	429a      	cmp	r2, r3
 8001804:	d91c      	bls.n	8001840 <HAL_RCC_OscConfig+0x288>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180a:	0018      	movs	r0, r3
 800180c:	f000 fc18 	bl	8002040 <RCC_SetFlashLatencyFromMSIRange>
 8001810:	1e03      	subs	r3, r0, #0
 8001812:	d001      	beq.n	8001818 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e267      	b.n	8001ce8 <HAL_RCC_OscConfig+0x730>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001818:	4a2e      	ldr	r2, [pc, #184]	; (80018d4 <HAL_RCC_OscConfig+0x31c>)
 800181a:	4b2e      	ldr	r3, [pc, #184]	; (80018d4 <HAL_RCC_OscConfig+0x31c>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	4931      	ldr	r1, [pc, #196]	; (80018e4 <HAL_RCC_OscConfig+0x32c>)
 8001820:	4019      	ands	r1, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001826:	430b      	orrs	r3, r1
 8001828:	6053      	str	r3, [r2, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800182a:	4a2a      	ldr	r2, [pc, #168]	; (80018d4 <HAL_RCC_OscConfig+0x31c>)
 800182c:	4b29      	ldr	r3, [pc, #164]	; (80018d4 <HAL_RCC_OscConfig+0x31c>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	021b      	lsls	r3, r3, #8
 8001832:	0a19      	lsrs	r1, r3, #8
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a1b      	ldr	r3, [r3, #32]
 8001838:	061b      	lsls	r3, r3, #24
 800183a:	430b      	orrs	r3, r1
 800183c:	6053      	str	r3, [r2, #4]
 800183e:	e01b      	b.n	8001878 <HAL_RCC_OscConfig+0x2c0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001840:	4a24      	ldr	r2, [pc, #144]	; (80018d4 <HAL_RCC_OscConfig+0x31c>)
 8001842:	4b24      	ldr	r3, [pc, #144]	; (80018d4 <HAL_RCC_OscConfig+0x31c>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	4927      	ldr	r1, [pc, #156]	; (80018e4 <HAL_RCC_OscConfig+0x32c>)
 8001848:	4019      	ands	r1, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184e:	430b      	orrs	r3, r1
 8001850:	6053      	str	r3, [r2, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001852:	4a20      	ldr	r2, [pc, #128]	; (80018d4 <HAL_RCC_OscConfig+0x31c>)
 8001854:	4b1f      	ldr	r3, [pc, #124]	; (80018d4 <HAL_RCC_OscConfig+0x31c>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	021b      	lsls	r3, r3, #8
 800185a:	0a19      	lsrs	r1, r3, #8
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a1b      	ldr	r3, [r3, #32]
 8001860:	061b      	lsls	r3, r3, #24
 8001862:	430b      	orrs	r3, r1
 8001864:	6053      	str	r3, [r2, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186a:	0018      	movs	r0, r3
 800186c:	f000 fbe8 	bl	8002040 <RCC_SetFlashLatencyFromMSIRange>
 8001870:	1e03      	subs	r3, r0, #0
 8001872:	d001      	beq.n	8001878 <HAL_RCC_OscConfig+0x2c0>
          {
            return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e237      	b.n	8001ce8 <HAL_RCC_OscConfig+0x730>
          }          
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187c:	0b5b      	lsrs	r3, r3, #13
 800187e:	3301      	adds	r3, #1
 8001880:	2280      	movs	r2, #128	; 0x80
 8001882:	0212      	lsls	r2, r2, #8
 8001884:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8001886:	4b13      	ldr	r3, [pc, #76]	; (80018d4 <HAL_RCC_OscConfig+0x31c>)
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	091b      	lsrs	r3, r3, #4
 800188c:	210f      	movs	r1, #15
 800188e:	400b      	ands	r3, r1
 8001890:	4915      	ldr	r1, [pc, #84]	; (80018e8 <HAL_RCC_OscConfig+0x330>)
 8001892:	5ccb      	ldrb	r3, [r1, r3]
 8001894:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8001896:	4b15      	ldr	r3, [pc, #84]	; (80018ec <HAL_RCC_OscConfig+0x334>)
 8001898:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        HAL_InitTick (TICK_INT_PRIORITY);
 800189a:	2000      	movs	r0, #0
 800189c:	f7fe fcd4 	bl	8000248 <HAL_InitTick>
 80018a0:	e05a      	b.n	8001958 <HAL_RCC_OscConfig+0x3a0>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d03c      	beq.n	8001924 <HAL_RCC_OscConfig+0x36c>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018aa:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <HAL_RCC_OscConfig+0x31c>)
 80018ac:	4a09      	ldr	r2, [pc, #36]	; (80018d4 <HAL_RCC_OscConfig+0x31c>)
 80018ae:	6812      	ldr	r2, [r2, #0]
 80018b0:	2180      	movs	r1, #128	; 0x80
 80018b2:	0049      	lsls	r1, r1, #1
 80018b4:	430a      	orrs	r2, r1
 80018b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b8:	f7fe fcf0 	bl	800029c <HAL_GetTick>
 80018bc:	0003      	movs	r3, r0
 80018be:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 80018c0:	e016      	b.n	80018f0 <HAL_RCC_OscConfig+0x338>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018c2:	f7fe fceb 	bl	800029c <HAL_GetTick>
 80018c6:	0002      	movs	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d90f      	bls.n	80018f0 <HAL_RCC_OscConfig+0x338>
          {
            return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e209      	b.n	8001ce8 <HAL_RCC_OscConfig+0x730>
 80018d4:	40021000 	.word	0x40021000
 80018d8:	fffeffff 	.word	0xfffeffff
 80018dc:	fffbffff 	.word	0xfffbffff
 80018e0:	ffffe0ff 	.word	0xffffe0ff
 80018e4:	ffff1fff 	.word	0xffff1fff
 80018e8:	08002670 	.word	0x08002670
 80018ec:	20000000 	.word	0x20000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 80018f0:	4bc7      	ldr	r3, [pc, #796]	; (8001c10 <HAL_RCC_OscConfig+0x658>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	2380      	movs	r3, #128	; 0x80
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	4013      	ands	r3, r2
 80018fa:	d0e2      	beq.n	80018c2 <HAL_RCC_OscConfig+0x30a>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018fc:	4ac4      	ldr	r2, [pc, #784]	; (8001c10 <HAL_RCC_OscConfig+0x658>)
 80018fe:	4bc4      	ldr	r3, [pc, #784]	; (8001c10 <HAL_RCC_OscConfig+0x658>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	49c4      	ldr	r1, [pc, #784]	; (8001c14 <HAL_RCC_OscConfig+0x65c>)
 8001904:	4019      	ands	r1, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190a:	430b      	orrs	r3, r1
 800190c:	6053      	str	r3, [r2, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800190e:	4ac0      	ldr	r2, [pc, #768]	; (8001c10 <HAL_RCC_OscConfig+0x658>)
 8001910:	4bbf      	ldr	r3, [pc, #764]	; (8001c10 <HAL_RCC_OscConfig+0x658>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	021b      	lsls	r3, r3, #8
 8001916:	0a19      	lsrs	r1, r3, #8
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	061b      	lsls	r3, r3, #24
 800191e:	430b      	orrs	r3, r1
 8001920:	6053      	str	r3, [r2, #4]
 8001922:	e019      	b.n	8001958 <HAL_RCC_OscConfig+0x3a0>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001924:	4bba      	ldr	r3, [pc, #744]	; (8001c10 <HAL_RCC_OscConfig+0x658>)
 8001926:	4aba      	ldr	r2, [pc, #744]	; (8001c10 <HAL_RCC_OscConfig+0x658>)
 8001928:	6812      	ldr	r2, [r2, #0]
 800192a:	49bb      	ldr	r1, [pc, #748]	; (8001c18 <HAL_RCC_OscConfig+0x660>)
 800192c:	400a      	ands	r2, r1
 800192e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001930:	f7fe fcb4 	bl	800029c <HAL_GetTick>
 8001934:	0003      	movs	r3, r0
 8001936:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 8001938:	e008      	b.n	800194c <HAL_RCC_OscConfig+0x394>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800193a:	f7fe fcaf 	bl	800029c <HAL_GetTick>
 800193e:	0002      	movs	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x394>
          {
            return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e1cd      	b.n	8001ce8 <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 800194c:	4bb0      	ldr	r3, [pc, #704]	; (8001c10 <HAL_RCC_OscConfig+0x658>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	2380      	movs	r3, #128	; 0x80
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4013      	ands	r3, r2
 8001956:	d1f0      	bne.n	800193a <HAL_RCC_OscConfig+0x382>
        }
      }
    }
  }  
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2208      	movs	r2, #8
 800195e:	4013      	ands	r3, r2
 8001960:	d036      	beq.n	80019d0 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	695b      	ldr	r3, [r3, #20]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d019      	beq.n	800199e <HAL_RCC_OscConfig+0x3e6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800196a:	4ba9      	ldr	r3, [pc, #676]	; (8001c10 <HAL_RCC_OscConfig+0x658>)
 800196c:	4aa8      	ldr	r2, [pc, #672]	; (8001c10 <HAL_RCC_OscConfig+0x658>)
 800196e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001970:	2101      	movs	r1, #1
 8001972:	430a      	orrs	r2, r1
 8001974:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001976:	f7fe fc91 	bl	800029c <HAL_GetTick>
 800197a:	0003      	movs	r3, r0
 800197c:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x3da>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001980:	f7fe fc8c 	bl	800029c <HAL_GetTick>
 8001984:	0002      	movs	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x3da>
        {
          return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e1aa      	b.n	8001ce8 <HAL_RCC_OscConfig+0x730>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001992:	4b9f      	ldr	r3, [pc, #636]	; (8001c10 <HAL_RCC_OscConfig+0x658>)
 8001994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001996:	2202      	movs	r2, #2
 8001998:	4013      	ands	r3, r2
 800199a:	d0f1      	beq.n	8001980 <HAL_RCC_OscConfig+0x3c8>
 800199c:	e018      	b.n	80019d0 <HAL_RCC_OscConfig+0x418>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800199e:	4b9c      	ldr	r3, [pc, #624]	; (8001c10 <HAL_RCC_OscConfig+0x658>)
 80019a0:	4a9b      	ldr	r2, [pc, #620]	; (8001c10 <HAL_RCC_OscConfig+0x658>)
 80019a2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80019a4:	2101      	movs	r1, #1
 80019a6:	438a      	bics	r2, r1
 80019a8:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019aa:	f7fe fc77 	bl	800029c <HAL_GetTick>
 80019ae:	0003      	movs	r3, r0
 80019b0:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x40e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019b4:	f7fe fc72 	bl	800029c <HAL_GetTick>
 80019b8:	0002      	movs	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e190      	b.n	8001ce8 <HAL_RCC_OscConfig+0x730>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019c6:	4b92      	ldr	r3, [pc, #584]	; (8001c10 <HAL_RCC_OscConfig+0x658>)
 80019c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019ca:	2202      	movs	r2, #2
 80019cc:	4013      	ands	r3, r2
 80019ce:	d1f1      	bne.n	80019b4 <HAL_RCC_OscConfig+0x3fc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2204      	movs	r2, #4
 80019d6:	4013      	ands	r3, r2
 80019d8:	d100      	bne.n	80019dc <HAL_RCC_OscConfig+0x424>
 80019da:	e0af      	b.n	8001b3c <HAL_RCC_OscConfig+0x584>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019dc:	2317      	movs	r3, #23
 80019de:	18fb      	adds	r3, r7, r3
 80019e0:	2200      	movs	r2, #0
 80019e2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019e4:	4b8a      	ldr	r3, [pc, #552]	; (8001c10 <HAL_RCC_OscConfig+0x658>)
 80019e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019e8:	2380      	movs	r3, #128	; 0x80
 80019ea:	055b      	lsls	r3, r3, #21
 80019ec:	4013      	ands	r3, r2
 80019ee:	d10a      	bne.n	8001a06 <HAL_RCC_OscConfig+0x44e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019f0:	4b87      	ldr	r3, [pc, #540]	; (8001c10 <HAL_RCC_OscConfig+0x658>)
 80019f2:	4a87      	ldr	r2, [pc, #540]	; (8001c10 <HAL_RCC_OscConfig+0x658>)
 80019f4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019f6:	2180      	movs	r1, #128	; 0x80
 80019f8:	0549      	lsls	r1, r1, #21
 80019fa:	430a      	orrs	r2, r1
 80019fc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80019fe:	2317      	movs	r3, #23
 8001a00:	18fb      	adds	r3, r7, r3
 8001a02:	2201      	movs	r2, #1
 8001a04:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a06:	4b85      	ldr	r3, [pc, #532]	; (8001c1c <HAL_RCC_OscConfig+0x664>)
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	2380      	movs	r3, #128	; 0x80
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	4013      	ands	r3, r2
 8001a10:	d11a      	bne.n	8001a48 <HAL_RCC_OscConfig+0x490>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a12:	4b82      	ldr	r3, [pc, #520]	; (8001c1c <HAL_RCC_OscConfig+0x664>)
 8001a14:	4a81      	ldr	r2, [pc, #516]	; (8001c1c <HAL_RCC_OscConfig+0x664>)
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	2180      	movs	r1, #128	; 0x80
 8001a1a:	0049      	lsls	r1, r1, #1
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a20:	f7fe fc3c 	bl	800029c <HAL_GetTick>
 8001a24:	0003      	movs	r3, r0
 8001a26:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_OscConfig+0x484>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a2a:	f7fe fc37 	bl	800029c <HAL_GetTick>
 8001a2e:	0002      	movs	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b64      	cmp	r3, #100	; 0x64
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x484>
        {
          return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e155      	b.n	8001ce8 <HAL_RCC_OscConfig+0x730>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a3c:	4b77      	ldr	r3, [pc, #476]	; (8001c1c <HAL_RCC_OscConfig+0x664>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	2380      	movs	r3, #128	; 0x80
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	4013      	ands	r3, r2
 8001a46:	d0f0      	beq.n	8001a2a <HAL_RCC_OscConfig+0x472>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689a      	ldr	r2, [r3, #8]
 8001a4c:	2380      	movs	r3, #128	; 0x80
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d107      	bne.n	8001a64 <HAL_RCC_OscConfig+0x4ac>
 8001a54:	4b6e      	ldr	r3, [pc, #440]	; (8001c10 <HAL_RCC_OscConfig+0x658>)
 8001a56:	4a6e      	ldr	r2, [pc, #440]	; (8001c10 <HAL_RCC_OscConfig+0x658>)
 8001a58:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a5a:	2180      	movs	r1, #128	; 0x80
 8001a5c:	0049      	lsls	r1, r1, #1
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	651a      	str	r2, [r3, #80]	; 0x50
 8001a62:	e031      	b.n	8001ac8 <HAL_RCC_OscConfig+0x510>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d10c      	bne.n	8001a86 <HAL_RCC_OscConfig+0x4ce>
 8001a6c:	4b68      	ldr	r3, [pc, #416]	; (8001c10 <HAL_RCC_OscConfig+0x658>)
 8001a6e:	4a68      	ldr	r2, [pc, #416]	; (8001c10 <HAL_RCC_OscConfig+0x658>)
 8001a70:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a72:	4969      	ldr	r1, [pc, #420]	; (8001c18 <HAL_RCC_OscConfig+0x660>)
 8001a74:	400a      	ands	r2, r1
 8001a76:	651a      	str	r2, [r3, #80]	; 0x50
 8001a78:	4b65      	ldr	r3, [pc, #404]	; (8001c10 <HAL_RCC_OscConfig+0x658>)
 8001a7a:	4a65      	ldr	r2, [pc, #404]	; (8001c10 <HAL_RCC_OscConfig+0x658>)
 8001a7c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a7e:	4968      	ldr	r1, [pc, #416]	; (8001c20 <HAL_RCC_OscConfig+0x668>)
 8001a80:	400a      	ands	r2, r1
 8001a82:	651a      	str	r2, [r3, #80]	; 0x50
 8001a84:	e020      	b.n	8001ac8 <HAL_RCC_OscConfig+0x510>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	689a      	ldr	r2, [r3, #8]
 8001a8a:	23a0      	movs	r3, #160	; 0xa0
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d10e      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x4f8>
 8001a92:	4b5f      	ldr	r3, [pc, #380]	; (8001c10 <HAL_RCC_OscConfig+0x658>)
 8001a94:	4a5e      	ldr	r2, [pc, #376]	; (8001c10 <HAL_RCC_OscConfig+0x658>)
 8001a96:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a98:	2180      	movs	r1, #128	; 0x80
 8001a9a:	00c9      	lsls	r1, r1, #3
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	651a      	str	r2, [r3, #80]	; 0x50
 8001aa0:	4b5b      	ldr	r3, [pc, #364]	; (8001c10 <HAL_RCC_OscConfig+0x658>)
 8001aa2:	4a5b      	ldr	r2, [pc, #364]	; (8001c10 <HAL_RCC_OscConfig+0x658>)
 8001aa4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001aa6:	2180      	movs	r1, #128	; 0x80
 8001aa8:	0049      	lsls	r1, r1, #1
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	651a      	str	r2, [r3, #80]	; 0x50
 8001aae:	e00b      	b.n	8001ac8 <HAL_RCC_OscConfig+0x510>
 8001ab0:	4b57      	ldr	r3, [pc, #348]	; (8001c10 <HAL_RCC_OscConfig+0x658>)
 8001ab2:	4a57      	ldr	r2, [pc, #348]	; (8001c10 <HAL_RCC_OscConfig+0x658>)
 8001ab4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001ab6:	4958      	ldr	r1, [pc, #352]	; (8001c18 <HAL_RCC_OscConfig+0x660>)
 8001ab8:	400a      	ands	r2, r1
 8001aba:	651a      	str	r2, [r3, #80]	; 0x50
 8001abc:	4b54      	ldr	r3, [pc, #336]	; (8001c10 <HAL_RCC_OscConfig+0x658>)
 8001abe:	4a54      	ldr	r2, [pc, #336]	; (8001c10 <HAL_RCC_OscConfig+0x658>)
 8001ac0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001ac2:	4957      	ldr	r1, [pc, #348]	; (8001c20 <HAL_RCC_OscConfig+0x668>)
 8001ac4:	400a      	ands	r2, r1
 8001ac6:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d015      	beq.n	8001afc <HAL_RCC_OscConfig+0x544>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ad0:	f7fe fbe4 	bl	800029c <HAL_GetTick>
 8001ad4:	0003      	movs	r3, r0
 8001ad6:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ad8:	e009      	b.n	8001aee <HAL_RCC_OscConfig+0x536>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ada:	f7fe fbdf 	bl	800029c <HAL_GetTick>
 8001ade:	0002      	movs	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	4a4f      	ldr	r2, [pc, #316]	; (8001c24 <HAL_RCC_OscConfig+0x66c>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x536>
        {
          return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e0fc      	b.n	8001ce8 <HAL_RCC_OscConfig+0x730>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aee:	4b48      	ldr	r3, [pc, #288]	; (8001c10 <HAL_RCC_OscConfig+0x658>)
 8001af0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001af2:	2380      	movs	r3, #128	; 0x80
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	4013      	ands	r3, r2
 8001af8:	d0ef      	beq.n	8001ada <HAL_RCC_OscConfig+0x522>
 8001afa:	e014      	b.n	8001b26 <HAL_RCC_OscConfig+0x56e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001afc:	f7fe fbce 	bl	800029c <HAL_GetTick>
 8001b00:	0003      	movs	r3, r0
 8001b02:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b04:	e009      	b.n	8001b1a <HAL_RCC_OscConfig+0x562>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b06:	f7fe fbc9 	bl	800029c <HAL_GetTick>
 8001b0a:	0002      	movs	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	4a44      	ldr	r2, [pc, #272]	; (8001c24 <HAL_RCC_OscConfig+0x66c>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x562>
        {
          return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e0e6      	b.n	8001ce8 <HAL_RCC_OscConfig+0x730>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b1a:	4b3d      	ldr	r3, [pc, #244]	; (8001c10 <HAL_RCC_OscConfig+0x658>)
 8001b1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b1e:	2380      	movs	r3, #128	; 0x80
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	4013      	ands	r3, r2
 8001b24:	d1ef      	bne.n	8001b06 <HAL_RCC_OscConfig+0x54e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b26:	2317      	movs	r3, #23
 8001b28:	18fb      	adds	r3, r7, r3
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d105      	bne.n	8001b3c <HAL_RCC_OscConfig+0x584>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b30:	4b37      	ldr	r3, [pc, #220]	; (8001c10 <HAL_RCC_OscConfig+0x658>)
 8001b32:	4a37      	ldr	r2, [pc, #220]	; (8001c10 <HAL_RCC_OscConfig+0x658>)
 8001b34:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b36:	493c      	ldr	r1, [pc, #240]	; (8001c28 <HAL_RCC_OscConfig+0x670>)
 8001b38:	400a      	ands	r2, r1
 8001b3a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2220      	movs	r2, #32
 8001b42:	4013      	ands	r3, r2
 8001b44:	d049      	beq.n	8001bda <HAL_RCC_OscConfig+0x622>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d026      	beq.n	8001b9c <HAL_RCC_OscConfig+0x5e4>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001b4e:	4b30      	ldr	r3, [pc, #192]	; (8001c10 <HAL_RCC_OscConfig+0x658>)
 8001b50:	4a2f      	ldr	r2, [pc, #188]	; (8001c10 <HAL_RCC_OscConfig+0x658>)
 8001b52:	6892      	ldr	r2, [r2, #8]
 8001b54:	2101      	movs	r1, #1
 8001b56:	430a      	orrs	r2, r1
 8001b58:	609a      	str	r2, [r3, #8]
 8001b5a:	4b2d      	ldr	r3, [pc, #180]	; (8001c10 <HAL_RCC_OscConfig+0x658>)
 8001b5c:	4a2c      	ldr	r2, [pc, #176]	; (8001c10 <HAL_RCC_OscConfig+0x658>)
 8001b5e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b60:	2101      	movs	r1, #1
 8001b62:	430a      	orrs	r2, r1
 8001b64:	635a      	str	r2, [r3, #52]	; 0x34
 8001b66:	4b31      	ldr	r3, [pc, #196]	; (8001c2c <HAL_RCC_OscConfig+0x674>)
 8001b68:	4a30      	ldr	r2, [pc, #192]	; (8001c2c <HAL_RCC_OscConfig+0x674>)
 8001b6a:	6a12      	ldr	r2, [r2, #32]
 8001b6c:	2180      	movs	r1, #128	; 0x80
 8001b6e:	0189      	lsls	r1, r1, #6
 8001b70:	430a      	orrs	r2, r1
 8001b72:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b74:	f7fe fb92 	bl	800029c <HAL_GetTick>
 8001b78:	0003      	movs	r3, r0
 8001b7a:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b7e:	f7fe fb8d 	bl	800029c <HAL_GetTick>
 8001b82:	0002      	movs	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e0ab      	b.n	8001ce8 <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001b90:	4b1f      	ldr	r3, [pc, #124]	; (8001c10 <HAL_RCC_OscConfig+0x658>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	2202      	movs	r2, #2
 8001b96:	4013      	ands	r3, r2
 8001b98:	d0f1      	beq.n	8001b7e <HAL_RCC_OscConfig+0x5c6>
 8001b9a:	e01e      	b.n	8001bda <HAL_RCC_OscConfig+0x622>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001b9c:	4b1c      	ldr	r3, [pc, #112]	; (8001c10 <HAL_RCC_OscConfig+0x658>)
 8001b9e:	4a1c      	ldr	r2, [pc, #112]	; (8001c10 <HAL_RCC_OscConfig+0x658>)
 8001ba0:	6892      	ldr	r2, [r2, #8]
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	438a      	bics	r2, r1
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	4b20      	ldr	r3, [pc, #128]	; (8001c2c <HAL_RCC_OscConfig+0x674>)
 8001baa:	4a20      	ldr	r2, [pc, #128]	; (8001c2c <HAL_RCC_OscConfig+0x674>)
 8001bac:	6a12      	ldr	r2, [r2, #32]
 8001bae:	4920      	ldr	r1, [pc, #128]	; (8001c30 <HAL_RCC_OscConfig+0x678>)
 8001bb0:	400a      	ands	r2, r1
 8001bb2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb4:	f7fe fb72 	bl	800029c <HAL_GetTick>
 8001bb8:	0003      	movs	r3, r0
 8001bba:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001bbc:	e008      	b.n	8001bd0 <HAL_RCC_OscConfig+0x618>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bbe:	f7fe fb6d 	bl	800029c <HAL_GetTick>
 8001bc2:	0002      	movs	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x618>
          {
            return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e08b      	b.n	8001ce8 <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001bd0:	4b0f      	ldr	r3, [pc, #60]	; (8001c10 <HAL_RCC_OscConfig+0x658>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	2202      	movs	r2, #2
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	d1f1      	bne.n	8001bbe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d100      	bne.n	8001be4 <HAL_RCC_OscConfig+0x62c>
 8001be2:	e080      	b.n	8001ce6 <HAL_RCC_OscConfig+0x72e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001be4:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <HAL_RCC_OscConfig+0x658>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	220c      	movs	r2, #12
 8001bea:	4013      	ands	r3, r2
 8001bec:	2b0c      	cmp	r3, #12
 8001bee:	d100      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x63a>
 8001bf0:	e077      	b.n	8001ce2 <HAL_RCC_OscConfig+0x72a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d158      	bne.n	8001cac <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bfa:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <HAL_RCC_OscConfig+0x658>)
 8001bfc:	4a04      	ldr	r2, [pc, #16]	; (8001c10 <HAL_RCC_OscConfig+0x658>)
 8001bfe:	6812      	ldr	r2, [r2, #0]
 8001c00:	490c      	ldr	r1, [pc, #48]	; (8001c34 <HAL_RCC_OscConfig+0x67c>)
 8001c02:	400a      	ands	r2, r1
 8001c04:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c06:	f7fe fb49 	bl	800029c <HAL_GetTick>
 8001c0a:	0003      	movs	r3, r0
 8001c0c:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c0e:	e01c      	b.n	8001c4a <HAL_RCC_OscConfig+0x692>
 8001c10:	40021000 	.word	0x40021000
 8001c14:	ffff1fff 	.word	0xffff1fff
 8001c18:	fffffeff 	.word	0xfffffeff
 8001c1c:	40007000 	.word	0x40007000
 8001c20:	fffffbff 	.word	0xfffffbff
 8001c24:	00001388 	.word	0x00001388
 8001c28:	efffffff 	.word	0xefffffff
 8001c2c:	40010000 	.word	0x40010000
 8001c30:	ffffdfff 	.word	0xffffdfff
 8001c34:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c38:	f7fe fb30 	bl	800029c <HAL_GetTick>
 8001c3c:	0002      	movs	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x692>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e04e      	b.n	8001ce8 <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c4a:	4b29      	ldr	r3, [pc, #164]	; (8001cf0 <HAL_RCC_OscConfig+0x738>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	2380      	movs	r3, #128	; 0x80
 8001c50:	049b      	lsls	r3, r3, #18
 8001c52:	4013      	ands	r3, r2
 8001c54:	d1f0      	bne.n	8001c38 <HAL_RCC_OscConfig+0x680>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c56:	4a26      	ldr	r2, [pc, #152]	; (8001cf0 <HAL_RCC_OscConfig+0x738>)
 8001c58:	4b25      	ldr	r3, [pc, #148]	; (8001cf0 <HAL_RCC_OscConfig+0x738>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	4925      	ldr	r1, [pc, #148]	; (8001cf4 <HAL_RCC_OscConfig+0x73c>)
 8001c5e:	4019      	ands	r1, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c68:	4318      	orrs	r0, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c6e:	4303      	orrs	r3, r0
 8001c70:	430b      	orrs	r3, r1
 8001c72:	60d3      	str	r3, [r2, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c74:	4b1e      	ldr	r3, [pc, #120]	; (8001cf0 <HAL_RCC_OscConfig+0x738>)
 8001c76:	4a1e      	ldr	r2, [pc, #120]	; (8001cf0 <HAL_RCC_OscConfig+0x738>)
 8001c78:	6812      	ldr	r2, [r2, #0]
 8001c7a:	2180      	movs	r1, #128	; 0x80
 8001c7c:	0449      	lsls	r1, r1, #17
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c82:	f7fe fb0b 	bl	800029c <HAL_GetTick>
 8001c86:	0003      	movs	r3, r0
 8001c88:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c8c:	f7fe fb06 	bl	800029c <HAL_GetTick>
 8001c90:	0002      	movs	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e024      	b.n	8001ce8 <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c9e:	4b14      	ldr	r3, [pc, #80]	; (8001cf0 <HAL_RCC_OscConfig+0x738>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	2380      	movs	r3, #128	; 0x80
 8001ca4:	049b      	lsls	r3, r3, #18
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	d0f0      	beq.n	8001c8c <HAL_RCC_OscConfig+0x6d4>
 8001caa:	e01c      	b.n	8001ce6 <HAL_RCC_OscConfig+0x72e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cac:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <HAL_RCC_OscConfig+0x738>)
 8001cae:	4a10      	ldr	r2, [pc, #64]	; (8001cf0 <HAL_RCC_OscConfig+0x738>)
 8001cb0:	6812      	ldr	r2, [r2, #0]
 8001cb2:	4911      	ldr	r1, [pc, #68]	; (8001cf8 <HAL_RCC_OscConfig+0x740>)
 8001cb4:	400a      	ands	r2, r1
 8001cb6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb8:	f7fe faf0 	bl	800029c <HAL_GetTick>
 8001cbc:	0003      	movs	r3, r0
 8001cbe:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cc2:	f7fe faeb 	bl	800029c <HAL_GetTick>
 8001cc6:	0002      	movs	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e009      	b.n	8001ce8 <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cd4:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <HAL_RCC_OscConfig+0x738>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	2380      	movs	r3, #128	; 0x80
 8001cda:	049b      	lsls	r3, r3, #18
 8001cdc:	4013      	ands	r3, r2
 8001cde:	d1f0      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x70a>
 8001ce0:	e001      	b.n	8001ce6 <HAL_RCC_OscConfig+0x72e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <HAL_RCC_OscConfig+0x730>
    }
  }
  
  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	0018      	movs	r0, r3
 8001cea:	46bd      	mov	sp, r7
 8001cec:	b006      	add	sp, #24
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	ff02ffff 	.word	0xff02ffff
 8001cf8:	feffffff 	.word	0xfeffffff

08001cfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001d0a:	4b82      	ldr	r3, [pc, #520]	; (8001f14 <HAL_RCC_ClockConfig+0x218>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	401a      	ands	r2, r3
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d211      	bcs.n	8001d3c <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d18:	4b7e      	ldr	r3, [pc, #504]	; (8001f14 <HAL_RCC_ClockConfig+0x218>)
 8001d1a:	4a7e      	ldr	r2, [pc, #504]	; (8001f14 <HAL_RCC_ClockConfig+0x218>)
 8001d1c:	6812      	ldr	r2, [r2, #0]
 8001d1e:	2101      	movs	r1, #1
 8001d20:	438a      	bics	r2, r1
 8001d22:	0011      	movs	r1, r2
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	430a      	orrs	r2, r1
 8001d28:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d2a:	4b7a      	ldr	r3, [pc, #488]	; (8001f14 <HAL_RCC_ClockConfig+0x218>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	401a      	ands	r2, r3
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d001      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e0e6      	b.n	8001f0a <HAL_RCC_ClockConfig+0x20e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2202      	movs	r2, #2
 8001d42:	4013      	ands	r3, r2
 8001d44:	d009      	beq.n	8001d5a <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d46:	4a74      	ldr	r2, [pc, #464]	; (8001f18 <HAL_RCC_ClockConfig+0x21c>)
 8001d48:	4b73      	ldr	r3, [pc, #460]	; (8001f18 <HAL_RCC_ClockConfig+0x21c>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	21f0      	movs	r1, #240	; 0xf0
 8001d4e:	438b      	bics	r3, r1
 8001d50:	0019      	movs	r1, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	430b      	orrs	r3, r1
 8001d58:	60d3      	str	r3, [r2, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	4013      	ands	r3, r2
 8001d62:	d100      	bne.n	8001d66 <HAL_RCC_ClockConfig+0x6a>
 8001d64:	e089      	b.n	8001e7a <HAL_RCC_ClockConfig+0x17e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d107      	bne.n	8001d7e <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d6e:	4b6a      	ldr	r3, [pc, #424]	; (8001f18 <HAL_RCC_ClockConfig+0x21c>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	2380      	movs	r3, #128	; 0x80
 8001d74:	029b      	lsls	r3, r3, #10
 8001d76:	4013      	ands	r3, r2
 8001d78:	d120      	bne.n	8001dbc <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e0c5      	b.n	8001f0a <HAL_RCC_ClockConfig+0x20e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	2b03      	cmp	r3, #3
 8001d84:	d107      	bne.n	8001d96 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d86:	4b64      	ldr	r3, [pc, #400]	; (8001f18 <HAL_RCC_ClockConfig+0x21c>)
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	2380      	movs	r3, #128	; 0x80
 8001d8c:	049b      	lsls	r3, r3, #18
 8001d8e:	4013      	ands	r3, r2
 8001d90:	d114      	bne.n	8001dbc <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e0b9      	b.n	8001f0a <HAL_RCC_ClockConfig+0x20e>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d106      	bne.n	8001dac <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d9e:	4b5e      	ldr	r3, [pc, #376]	; (8001f18 <HAL_RCC_ClockConfig+0x21c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2204      	movs	r2, #4
 8001da4:	4013      	ands	r3, r2
 8001da6:	d109      	bne.n	8001dbc <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e0ae      	b.n	8001f0a <HAL_RCC_ClockConfig+0x20e>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8001dac:	4b5a      	ldr	r3, [pc, #360]	; (8001f18 <HAL_RCC_ClockConfig+0x21c>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	2380      	movs	r3, #128	; 0x80
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4013      	ands	r3, r2
 8001db6:	d101      	bne.n	8001dbc <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e0a6      	b.n	8001f0a <HAL_RCC_ClockConfig+0x20e>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dbc:	4a56      	ldr	r2, [pc, #344]	; (8001f18 <HAL_RCC_ClockConfig+0x21c>)
 8001dbe:	4b56      	ldr	r3, [pc, #344]	; (8001f18 <HAL_RCC_ClockConfig+0x21c>)
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	2103      	movs	r1, #3
 8001dc4:	438b      	bics	r3, r1
 8001dc6:	0019      	movs	r1, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	430b      	orrs	r3, r1
 8001dce:	60d3      	str	r3, [r2, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dd0:	f7fe fa64 	bl	800029c <HAL_GetTick>
 8001dd4:	0003      	movs	r3, r0
 8001dd6:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d111      	bne.n	8001e04 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001de0:	e009      	b.n	8001df6 <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001de2:	f7fe fa5b 	bl	800029c <HAL_GetTick>
 8001de6:	0002      	movs	r2, r0
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	4a4b      	ldr	r2, [pc, #300]	; (8001f1c <HAL_RCC_ClockConfig+0x220>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e089      	b.n	8001f0a <HAL_RCC_ClockConfig+0x20e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001df6:	4b48      	ldr	r3, [pc, #288]	; (8001f18 <HAL_RCC_ClockConfig+0x21c>)
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	220c      	movs	r2, #12
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	2b08      	cmp	r3, #8
 8001e00:	d1ef      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xe6>
 8001e02:	e03a      	b.n	8001e7a <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	2b03      	cmp	r3, #3
 8001e0a:	d111      	bne.n	8001e30 <HAL_RCC_ClockConfig+0x134>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e0c:	e009      	b.n	8001e22 <HAL_RCC_ClockConfig+0x126>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e0e:	f7fe fa45 	bl	800029c <HAL_GetTick>
 8001e12:	0002      	movs	r2, r0
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	4a40      	ldr	r2, [pc, #256]	; (8001f1c <HAL_RCC_ClockConfig+0x220>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_ClockConfig+0x126>
        {
          return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e073      	b.n	8001f0a <HAL_RCC_ClockConfig+0x20e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e22:	4b3d      	ldr	r3, [pc, #244]	; (8001f18 <HAL_RCC_ClockConfig+0x21c>)
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	220c      	movs	r2, #12
 8001e28:	4013      	ands	r3, r2
 8001e2a:	2b0c      	cmp	r3, #12
 8001e2c:	d1ef      	bne.n	8001e0e <HAL_RCC_ClockConfig+0x112>
 8001e2e:	e024      	b.n	8001e7a <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d11b      	bne.n	8001e70 <HAL_RCC_ClockConfig+0x174>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e38:	e009      	b.n	8001e4e <HAL_RCC_ClockConfig+0x152>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e3a:	f7fe fa2f 	bl	800029c <HAL_GetTick>
 8001e3e:	0002      	movs	r2, r0
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	4a35      	ldr	r2, [pc, #212]	; (8001f1c <HAL_RCC_ClockConfig+0x220>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_ClockConfig+0x152>
        {
          return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e05d      	b.n	8001f0a <HAL_RCC_ClockConfig+0x20e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e4e:	4b32      	ldr	r3, [pc, #200]	; (8001f18 <HAL_RCC_ClockConfig+0x21c>)
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	220c      	movs	r2, #12
 8001e54:	4013      	ands	r3, r2
 8001e56:	2b04      	cmp	r3, #4
 8001e58:	d1ef      	bne.n	8001e3a <HAL_RCC_ClockConfig+0x13e>
 8001e5a:	e00e      	b.n	8001e7a <HAL_RCC_ClockConfig+0x17e>
    }      
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e5c:	f7fe fa1e 	bl	800029c <HAL_GetTick>
 8001e60:	0002      	movs	r2, r0
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	4a2d      	ldr	r2, [pc, #180]	; (8001f1c <HAL_RCC_ClockConfig+0x220>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_ClockConfig+0x174>
        {
          return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e04c      	b.n	8001f0a <HAL_RCC_ClockConfig+0x20e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001e70:	4b29      	ldr	r3, [pc, #164]	; (8001f18 <HAL_RCC_ClockConfig+0x21c>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	220c      	movs	r2, #12
 8001e76:	4013      	ands	r3, r2
 8001e78:	d1f0      	bne.n	8001e5c <HAL_RCC_ClockConfig+0x160>
        }
      }
    }
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001e7a:	4b26      	ldr	r3, [pc, #152]	; (8001f14 <HAL_RCC_ClockConfig+0x218>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	401a      	ands	r2, r3
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d911      	bls.n	8001eac <HAL_RCC_ClockConfig+0x1b0>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e88:	4b22      	ldr	r3, [pc, #136]	; (8001f14 <HAL_RCC_ClockConfig+0x218>)
 8001e8a:	4a22      	ldr	r2, [pc, #136]	; (8001f14 <HAL_RCC_ClockConfig+0x218>)
 8001e8c:	6812      	ldr	r2, [r2, #0]
 8001e8e:	2101      	movs	r1, #1
 8001e90:	438a      	bics	r2, r1
 8001e92:	0011      	movs	r1, r2
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	430a      	orrs	r2, r1
 8001e98:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e9a:	4b1e      	ldr	r3, [pc, #120]	; (8001f14 <HAL_RCC_ClockConfig+0x218>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	401a      	ands	r2, r3
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d001      	beq.n	8001eac <HAL_RCC_ClockConfig+0x1b0>
    {
      return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e02e      	b.n	8001f0a <HAL_RCC_ClockConfig+0x20e>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2204      	movs	r2, #4
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	d008      	beq.n	8001ec8 <HAL_RCC_ClockConfig+0x1cc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eb6:	4a18      	ldr	r2, [pc, #96]	; (8001f18 <HAL_RCC_ClockConfig+0x21c>)
 8001eb8:	4b17      	ldr	r3, [pc, #92]	; (8001f18 <HAL_RCC_ClockConfig+0x21c>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	4918      	ldr	r1, [pc, #96]	; (8001f20 <HAL_RCC_ClockConfig+0x224>)
 8001ebe:	4019      	ands	r1, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	430b      	orrs	r3, r1
 8001ec6:	60d3      	str	r3, [r2, #12]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2208      	movs	r2, #8
 8001ece:	4013      	ands	r3, r2
 8001ed0:	d009      	beq.n	8001ee6 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ed2:	4a11      	ldr	r2, [pc, #68]	; (8001f18 <HAL_RCC_ClockConfig+0x21c>)
 8001ed4:	4b10      	ldr	r3, [pc, #64]	; (8001f18 <HAL_RCC_ClockConfig+0x21c>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	4912      	ldr	r1, [pc, #72]	; (8001f24 <HAL_RCC_ClockConfig+0x228>)
 8001eda:	4019      	ands	r1, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	430b      	orrs	r3, r1
 8001ee4:	60d3      	str	r3, [r2, #12]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001ee6:	f000 f823 	bl	8001f30 <HAL_RCC_GetSysClockFreq>
 8001eea:	0001      	movs	r1, r0
 8001eec:	4b0a      	ldr	r3, [pc, #40]	; (8001f18 <HAL_RCC_ClockConfig+0x21c>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	091b      	lsrs	r3, r3, #4
 8001ef2:	220f      	movs	r2, #15
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	4a0c      	ldr	r2, [pc, #48]	; (8001f28 <HAL_RCC_ClockConfig+0x22c>)
 8001ef8:	5cd3      	ldrb	r3, [r2, r3]
 8001efa:	000a      	movs	r2, r1
 8001efc:	40da      	lsrs	r2, r3
 8001efe:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <HAL_RCC_ClockConfig+0x230>)
 8001f00:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001f02:	2000      	movs	r0, #0
 8001f04:	f7fe f9a0 	bl	8000248 <HAL_InitTick>
  
  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	0018      	movs	r0, r3
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	b004      	add	sp, #16
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	46c0      	nop			; (mov r8, r8)
 8001f14:	40022000 	.word	0x40022000
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	00001388 	.word	0x00001388
 8001f20:	fffff8ff 	.word	0xfffff8ff
 8001f24:	ffffc7ff 	.word	0xffffc7ff
 8001f28:	08002670 	.word	0x08002670
 8001f2c:	20000000 	.word	0x20000000

08001f30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0, pllm = 0, plld = 0, pllvco = 0, msiclkrange = 0;
 8001f36:	2300      	movs	r3, #0
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60bb      	str	r3, [r7, #8]
 8001f3e:	2300      	movs	r3, #0
 8001f40:	607b      	str	r3, [r7, #4]
 8001f42:	2300      	movs	r3, #0
 8001f44:	617b      	str	r3, [r7, #20]
 8001f46:	2300      	movs	r3, #0
 8001f48:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001f4e:	4b32      	ldr	r3, [pc, #200]	; (8002018 <HAL_RCC_GetSysClockFreq+0xe8>)
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	220c      	movs	r2, #12
 8001f58:	4013      	ands	r3, r2
 8001f5a:	2b08      	cmp	r3, #8
 8001f5c:	d00e      	beq.n	8001f7c <HAL_RCC_GetSysClockFreq+0x4c>
 8001f5e:	2b0c      	cmp	r3, #12
 8001f60:	d00f      	beq.n	8001f82 <HAL_RCC_GetSysClockFreq+0x52>
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	d145      	bne.n	8001ff2 <HAL_RCC_GetSysClockFreq+0xc2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0)
 8001f66:	4b2c      	ldr	r3, [pc, #176]	; (8002018 <HAL_RCC_GetSysClockFreq+0xe8>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2210      	movs	r2, #16
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	d002      	beq.n	8001f76 <HAL_RCC_GetSysClockFreq+0x46>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001f70:	4b2a      	ldr	r3, [pc, #168]	; (800201c <HAL_RCC_GetSysClockFreq+0xec>)
 8001f72:	613b      	str	r3, [r7, #16]
      }
      else 
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001f74:	e04b      	b.n	800200e <HAL_RCC_GetSysClockFreq+0xde>
        sysclockfreq =  HSI_VALUE;
 8001f76:	4b2a      	ldr	r3, [pc, #168]	; (8002020 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001f78:	613b      	str	r3, [r7, #16]
      break;
 8001f7a:	e048      	b.n	800200e <HAL_RCC_GetSysClockFreq+0xde>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f7c:	4b29      	ldr	r3, [pc, #164]	; (8002024 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001f7e:	613b      	str	r3, [r7, #16]
      break;
 8001f80:	e045      	b.n	800200e <HAL_RCC_GetSysClockFreq+0xde>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	0c9b      	lsrs	r3, r3, #18
 8001f86:	220f      	movs	r2, #15
 8001f88:	4013      	ands	r3, r2
 8001f8a:	4a27      	ldr	r2, [pc, #156]	; (8002028 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f8c:	5cd3      	ldrb	r3, [r2, r3]
 8001f8e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	0d9b      	lsrs	r3, r3, #22
 8001f94:	2203      	movs	r2, #3
 8001f96:	4013      	ands	r3, r2
 8001f98:	3301      	adds	r3, #1
 8001f9a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f9c:	4b1e      	ldr	r3, [pc, #120]	; (8002018 <HAL_RCC_GetSysClockFreq+0xe8>)
 8001f9e:	68da      	ldr	r2, [r3, #12]
 8001fa0:	2380      	movs	r3, #128	; 0x80
 8001fa2:	025b      	lsls	r3, r3, #9
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	d009      	beq.n	8001fbc <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	4a1e      	ldr	r2, [pc, #120]	; (8002024 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001fac:	4353      	muls	r3, r2
 8001fae:	6879      	ldr	r1, [r7, #4]
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	f7fe f8a9 	bl	8000108 <__udivsi3>
 8001fb6:	0003      	movs	r3, r0
 8001fb8:	617b      	str	r3, [r7, #20]
 8001fba:	e017      	b.n	8001fec <HAL_RCC_GetSysClockFreq+0xbc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0)
 8001fbc:	4b16      	ldr	r3, [pc, #88]	; (8002018 <HAL_RCC_GetSysClockFreq+0xe8>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2210      	movs	r2, #16
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	d009      	beq.n	8001fda <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	4a14      	ldr	r2, [pc, #80]	; (800201c <HAL_RCC_GetSysClockFreq+0xec>)
 8001fca:	4353      	muls	r3, r2
 8001fcc:	6879      	ldr	r1, [r7, #4]
 8001fce:	0018      	movs	r0, r3
 8001fd0:	f7fe f89a 	bl	8000108 <__udivsi3>
 8001fd4:	0003      	movs	r3, r0
 8001fd6:	617b      	str	r3, [r7, #20]
 8001fd8:	e008      	b.n	8001fec <HAL_RCC_GetSysClockFreq+0xbc>
        }
        else 
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	4a10      	ldr	r2, [pc, #64]	; (8002020 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001fde:	4353      	muls	r3, r2
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	0018      	movs	r0, r3
 8001fe4:	f7fe f890 	bl	8000108 <__udivsi3>
 8001fe8:	0003      	movs	r3, r0
 8001fea:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	613b      	str	r3, [r7, #16]
      break;
 8001ff0:	e00d      	b.n	800200e <HAL_RCC_GetSysClockFreq+0xde>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 8001ff2:	4b09      	ldr	r3, [pc, #36]	; (8002018 <HAL_RCC_GetSysClockFreq+0xe8>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	0b5b      	lsrs	r3, r3, #13
 8001ff8:	2207      	movs	r2, #7
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768 * (1 << (msiclkrange + 1)));
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	3301      	adds	r3, #1
 8002002:	2280      	movs	r2, #128	; 0x80
 8002004:	0212      	lsls	r2, r2, #8
 8002006:	409a      	lsls	r2, r3
 8002008:	0013      	movs	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
      break;
 800200c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800200e:	693b      	ldr	r3, [r7, #16]
}
 8002010:	0018      	movs	r0, r3
 8002012:	46bd      	mov	sp, r7
 8002014:	b006      	add	sp, #24
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40021000 	.word	0x40021000
 800201c:	003d0900 	.word	0x003d0900
 8002020:	00f42400 	.word	0x00f42400
 8002024:	007a1200 	.word	0x007a1200
 8002028:	08002680 	.word	0x08002680

0800202c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002030:	4b02      	ldr	r3, [pc, #8]	; (800203c <HAL_RCC_GetHCLKFreq+0x10>)
 8002032:	681b      	ldr	r3, [r3, #0]
}
 8002034:	0018      	movs	r0, r3
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	46c0      	nop			; (mov r8, r8)
 800203c:	20000000 	.word	0x20000000

08002040 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t vos = 0;
 8002048:	2300      	movs	r3, #0
 800204a:	60fb      	str	r3, [r7, #12]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800204c:	2300      	movs	r3, #0
 800204e:	60bb      	str	r3, [r7, #8]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002050:	4b23      	ldr	r3, [pc, #140]	; (80020e0 <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	22f0      	movs	r2, #240	; 0xf0
 8002056:	4013      	ands	r3, r2
 8002058:	d12b      	bne.n	80020b2 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800205a:	4b21      	ldr	r3, [pc, #132]	; (80020e0 <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 800205c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800205e:	2380      	movs	r3, #128	; 0x80
 8002060:	055b      	lsls	r3, r3, #21
 8002062:	4013      	ands	r3, r2
 8002064:	d006      	beq.n	8002074 <RCC_SetFlashLatencyFromMSIRange+0x34>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002066:	4b1f      	ldr	r3, [pc, #124]	; (80020e4 <RCC_SetFlashLatencyFromMSIRange+0xa4>)
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	23c0      	movs	r3, #192	; 0xc0
 800206c:	015b      	lsls	r3, r3, #5
 800206e:	4013      	ands	r3, r2
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	e012      	b.n	800209a <RCC_SetFlashLatencyFromMSIRange+0x5a>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002074:	4b1a      	ldr	r3, [pc, #104]	; (80020e0 <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 8002076:	4a1a      	ldr	r2, [pc, #104]	; (80020e0 <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 8002078:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800207a:	2180      	movs	r1, #128	; 0x80
 800207c:	0549      	lsls	r1, r1, #21
 800207e:	430a      	orrs	r2, r1
 8002080:	639a      	str	r2, [r3, #56]	; 0x38
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002082:	4b18      	ldr	r3, [pc, #96]	; (80020e4 <RCC_SetFlashLatencyFromMSIRange+0xa4>)
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	23c0      	movs	r3, #192	; 0xc0
 8002088:	015b      	lsls	r3, r3, #5
 800208a:	4013      	ands	r3, r2
 800208c:	60fb      	str	r3, [r7, #12]
      __HAL_RCC_PWR_CLK_DISABLE();
 800208e:	4b14      	ldr	r3, [pc, #80]	; (80020e0 <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 8002090:	4a13      	ldr	r2, [pc, #76]	; (80020e0 <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 8002092:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002094:	4914      	ldr	r1, [pc, #80]	; (80020e8 <RCC_SetFlashLatencyFromMSIRange+0xa8>)
 8002096:	400a      	ands	r2, r1
 8002098:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	23c0      	movs	r3, #192	; 0xc0
 800209e:	015b      	lsls	r3, r3, #5
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d106      	bne.n	80020b2 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	23c0      	movs	r3, #192	; 0xc0
 80020a8:	021b      	lsls	r3, r3, #8
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d101      	bne.n	80020b2 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80020ae:	2301      	movs	r3, #1
 80020b0:	60bb      	str	r3, [r7, #8]
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 80020b2:	4b0e      	ldr	r3, [pc, #56]	; (80020ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80020b4:	4a0d      	ldr	r2, [pc, #52]	; (80020ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80020b6:	6812      	ldr	r2, [r2, #0]
 80020b8:	2101      	movs	r1, #1
 80020ba:	438a      	bics	r2, r1
 80020bc:	0011      	movs	r1, r2
 80020be:	68ba      	ldr	r2, [r7, #8]
 80020c0:	430a      	orrs	r2, r1
 80020c2:	601a      	str	r2, [r3, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80020c4:	4b09      	ldr	r3, [pc, #36]	; (80020ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2201      	movs	r2, #1
 80020ca:	401a      	ands	r2, r3
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d001      	beq.n	80020d6 <RCC_SetFlashLatencyFromMSIRange+0x96>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e000      	b.n	80020d8 <RCC_SetFlashLatencyFromMSIRange+0x98>
  }
  
  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	0018      	movs	r0, r3
 80020da:	46bd      	mov	sp, r7
 80020dc:	b004      	add	sp, #16
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40021000 	.word	0x40021000
 80020e4:	40007000 	.word	0x40007000
 80020e8:	efffffff 	.word	0xefffffff
 80020ec:	40022000 	.word	0x40022000

080020f0 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc.Instance = ADC1;
 80020f6:	4b2c      	ldr	r3, [pc, #176]	; (80021a8 <MX_ADC_Init+0xb8>)
 80020f8:	4a2c      	ldr	r2, [pc, #176]	; (80021ac <MX_ADC_Init+0xbc>)
 80020fa:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80020fc:	4b2a      	ldr	r3, [pc, #168]	; (80021a8 <MX_ADC_Init+0xb8>)
 80020fe:	2200      	movs	r2, #0
 8002100:	641a      	str	r2, [r3, #64]	; 0x40
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002102:	4b29      	ldr	r3, [pc, #164]	; (80021a8 <MX_ADC_Init+0xb8>)
 8002104:	2280      	movs	r2, #128	; 0x80
 8002106:	05d2      	lsls	r2, r2, #23
 8002108:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800210a:	4b27      	ldr	r3, [pc, #156]	; (80021a8 <MX_ADC_Init+0xb8>)
 800210c:	2200      	movs	r2, #0
 800210e:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 8002110:	4b25      	ldr	r3, [pc, #148]	; (80021a8 <MX_ADC_Init+0xb8>)
 8002112:	2207      	movs	r2, #7
 8002114:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002116:	4b24      	ldr	r3, [pc, #144]	; (80021a8 <MX_ADC_Init+0xb8>)
 8002118:	2201      	movs	r2, #1
 800211a:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800211c:	4b22      	ldr	r3, [pc, #136]	; (80021a8 <MX_ADC_Init+0xb8>)
 800211e:	2200      	movs	r2, #0
 8002120:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 8002122:	4b21      	ldr	r3, [pc, #132]	; (80021a8 <MX_ADC_Init+0xb8>)
 8002124:	2201      	movs	r2, #1
 8002126:	621a      	str	r2, [r3, #32]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002128:	4b1f      	ldr	r3, [pc, #124]	; (80021a8 <MX_ADC_Init+0xb8>)
 800212a:	2200      	movs	r2, #0
 800212c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800212e:	4b1e      	ldr	r3, [pc, #120]	; (80021a8 <MX_ADC_Init+0xb8>)
 8002130:	2200      	movs	r2, #0
 8002132:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002134:	4b1c      	ldr	r3, [pc, #112]	; (80021a8 <MX_ADC_Init+0xb8>)
 8002136:	22c2      	movs	r2, #194	; 0xc2
 8002138:	32ff      	adds	r2, #255	; 0xff
 800213a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = ENABLE;
 800213c:	4b1a      	ldr	r3, [pc, #104]	; (80021a8 <MX_ADC_Init+0xb8>)
 800213e:	2201      	movs	r2, #1
 8002140:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002142:	4b19      	ldr	r3, [pc, #100]	; (80021a8 <MX_ADC_Init+0xb8>)
 8002144:	2208      	movs	r2, #8
 8002146:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002148:	4b17      	ldr	r3, [pc, #92]	; (80021a8 <MX_ADC_Init+0xb8>)
 800214a:	2200      	movs	r2, #0
 800214c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoWait = DISABLE;
 800214e:	4b16      	ldr	r3, [pc, #88]	; (80021a8 <MX_ADC_Init+0xb8>)
 8002150:	2200      	movs	r2, #0
 8002152:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8002154:	4b14      	ldr	r3, [pc, #80]	; (80021a8 <MX_ADC_Init+0xb8>)
 8002156:	2200      	movs	r2, #0
 8002158:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800215a:	4b13      	ldr	r3, [pc, #76]	; (80021a8 <MX_ADC_Init+0xb8>)
 800215c:	2200      	movs	r2, #0
 800215e:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002160:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <MX_ADC_Init+0xb8>)
 8002162:	0018      	movs	r0, r3
 8002164:	f7fe f8a4 	bl	80002b0 <HAL_ADC_Init>
 8002168:	1e03      	subs	r3, r0, #0
 800216a:	d004      	beq.n	8002176 <MX_ADC_Init+0x86>
  {
    _Error_Handler(__FILE__, __LINE__);
 800216c:	4b10      	ldr	r3, [pc, #64]	; (80021b0 <MX_ADC_Init+0xc0>)
 800216e:	214f      	movs	r1, #79	; 0x4f
 8002170:	0018      	movs	r0, r3
 8002172:	f000 f977 	bl	8002464 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel to be converted. 
    */
  sConfig.Channel = ADC_CHANNEL_4;
 8002176:	003b      	movs	r3, r7
 8002178:	4a0e      	ldr	r2, [pc, #56]	; (80021b4 <MX_ADC_Init+0xc4>)
 800217a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800217c:	003b      	movs	r3, r7
 800217e:	2280      	movs	r2, #128	; 0x80
 8002180:	0152      	lsls	r2, r2, #5
 8002182:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002184:	003a      	movs	r2, r7
 8002186:	4b08      	ldr	r3, [pc, #32]	; (80021a8 <MX_ADC_Init+0xb8>)
 8002188:	0011      	movs	r1, r2
 800218a:	0018      	movs	r0, r3
 800218c:	f7fe fa98 	bl	80006c0 <HAL_ADC_ConfigChannel>
 8002190:	1e03      	subs	r3, r0, #0
 8002192:	d004      	beq.n	800219e <MX_ADC_Init+0xae>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002194:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <MX_ADC_Init+0xc0>)
 8002196:	2158      	movs	r1, #88	; 0x58
 8002198:	0018      	movs	r0, r3
 800219a:	f000 f963 	bl	8002464 <_Error_Handler>
  }

}
 800219e:	46c0      	nop			; (mov r8, r8)
 80021a0:	46bd      	mov	sp, r7
 80021a2:	b002      	add	sp, #8
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	46c0      	nop			; (mov r8, r8)
 80021a8:	20000064 	.word	0x20000064
 80021ac:	40012400 	.word	0x40012400
 80021b0:	08002650 	.word	0x08002650
 80021b4:	10000010 	.word	0x10000010

080021b8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b088      	sub	sp, #32
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a28      	ldr	r2, [pc, #160]	; (8002268 <HAL_ADC_MspInit+0xb0>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d149      	bne.n	800225e <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80021ca:	4b28      	ldr	r3, [pc, #160]	; (800226c <HAL_ADC_MspInit+0xb4>)
 80021cc:	4a27      	ldr	r2, [pc, #156]	; (800226c <HAL_ADC_MspInit+0xb4>)
 80021ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021d0:	2180      	movs	r1, #128	; 0x80
 80021d2:	0089      	lsls	r1, r1, #2
 80021d4:	430a      	orrs	r2, r1
 80021d6:	635a      	str	r2, [r3, #52]	; 0x34
  
    /**ADC GPIO Configuration    
    PA4     ------> ADC_IN4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80021d8:	230c      	movs	r3, #12
 80021da:	18fb      	adds	r3, r7, r3
 80021dc:	2210      	movs	r2, #16
 80021de:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021e0:	230c      	movs	r3, #12
 80021e2:	18fb      	adds	r3, r7, r3
 80021e4:	2203      	movs	r2, #3
 80021e6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e8:	230c      	movs	r3, #12
 80021ea:	18fb      	adds	r3, r7, r3
 80021ec:	2200      	movs	r2, #0
 80021ee:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f0:	230c      	movs	r3, #12
 80021f2:	18fa      	adds	r2, r7, r3
 80021f4:	23a0      	movs	r3, #160	; 0xa0
 80021f6:	05db      	lsls	r3, r3, #23
 80021f8:	0011      	movs	r1, r2
 80021fa:	0018      	movs	r0, r3
 80021fc:	f7ff f82e 	bl	800125c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8002200:	4b1b      	ldr	r3, [pc, #108]	; (8002270 <HAL_ADC_MspInit+0xb8>)
 8002202:	4a1c      	ldr	r2, [pc, #112]	; (8002274 <HAL_ADC_MspInit+0xbc>)
 8002204:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 8002206:	4b1a      	ldr	r3, [pc, #104]	; (8002270 <HAL_ADC_MspInit+0xb8>)
 8002208:	2200      	movs	r2, #0
 800220a:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800220c:	4b18      	ldr	r3, [pc, #96]	; (8002270 <HAL_ADC_MspInit+0xb8>)
 800220e:	2200      	movs	r2, #0
 8002210:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8002212:	4b17      	ldr	r3, [pc, #92]	; (8002270 <HAL_ADC_MspInit+0xb8>)
 8002214:	2200      	movs	r2, #0
 8002216:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002218:	4b15      	ldr	r3, [pc, #84]	; (8002270 <HAL_ADC_MspInit+0xb8>)
 800221a:	2280      	movs	r2, #128	; 0x80
 800221c:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800221e:	4b14      	ldr	r3, [pc, #80]	; (8002270 <HAL_ADC_MspInit+0xb8>)
 8002220:	2280      	movs	r2, #128	; 0x80
 8002222:	0052      	lsls	r2, r2, #1
 8002224:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002226:	4b12      	ldr	r3, [pc, #72]	; (8002270 <HAL_ADC_MspInit+0xb8>)
 8002228:	2280      	movs	r2, #128	; 0x80
 800222a:	00d2      	lsls	r2, r2, #3
 800222c:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800222e:	4b10      	ldr	r3, [pc, #64]	; (8002270 <HAL_ADC_MspInit+0xb8>)
 8002230:	2220      	movs	r2, #32
 8002232:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 8002234:	4b0e      	ldr	r3, [pc, #56]	; (8002270 <HAL_ADC_MspInit+0xb8>)
 8002236:	2280      	movs	r2, #128	; 0x80
 8002238:	0192      	lsls	r2, r2, #6
 800223a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800223c:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <HAL_ADC_MspInit+0xb8>)
 800223e:	0018      	movs	r0, r3
 8002240:	f7fe fcc8 	bl	8000bd4 <HAL_DMA_Init>
 8002244:	1e03      	subs	r3, r0, #0
 8002246:	d004      	beq.n	8002252 <HAL_ADC_MspInit+0x9a>
    {
      _Error_Handler(__FILE__, __LINE__);
 8002248:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <HAL_ADC_MspInit+0xc0>)
 800224a:	217e      	movs	r1, #126	; 0x7e
 800224c:	0018      	movs	r0, r3
 800224e:	f000 f909 	bl	8002464 <_Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a06      	ldr	r2, [pc, #24]	; (8002270 <HAL_ADC_MspInit+0xb8>)
 8002256:	651a      	str	r2, [r3, #80]	; 0x50
 8002258:	4b05      	ldr	r3, [pc, #20]	; (8002270 <HAL_ADC_MspInit+0xb8>)
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800225e:	46c0      	nop			; (mov r8, r8)
 8002260:	46bd      	mov	sp, r7
 8002262:	b008      	add	sp, #32
 8002264:	bd80      	pop	{r7, pc}
 8002266:	46c0      	nop			; (mov r8, r8)
 8002268:	40012400 	.word	0x40012400
 800226c:	40021000 	.word	0x40021000
 8002270:	20000024 	.word	0x20000024
 8002274:	40020008 	.word	0x40020008
 8002278:	08002650 	.word	0x08002650

0800227c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002282:	4b0c      	ldr	r3, [pc, #48]	; (80022b4 <MX_DMA_Init+0x38>)
 8002284:	4a0b      	ldr	r2, [pc, #44]	; (80022b4 <MX_DMA_Init+0x38>)
 8002286:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002288:	2101      	movs	r1, #1
 800228a:	430a      	orrs	r2, r1
 800228c:	631a      	str	r2, [r3, #48]	; 0x30
 800228e:	4b09      	ldr	r3, [pc, #36]	; (80022b4 <MX_DMA_Init+0x38>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	2201      	movs	r2, #1
 8002294:	4013      	ands	r3, r2
 8002296:	607b      	str	r3, [r7, #4]
 8002298:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800229a:	2200      	movs	r2, #0
 800229c:	2100      	movs	r1, #0
 800229e:	2009      	movs	r0, #9
 80022a0:	f7fe fc3e 	bl	8000b20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80022a4:	2009      	movs	r0, #9
 80022a6:	f7fe fc51 	bl	8000b4c <HAL_NVIC_EnableIRQ>

}
 80022aa:	46c0      	nop			; (mov r8, r8)
 80022ac:	46bd      	mov	sp, r7
 80022ae:	b002      	add	sp, #8
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	46c0      	nop			; (mov r8, r8)
 80022b4:	40021000 	.word	0x40021000

080022b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b088      	sub	sp, #32
 80022bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022be:	4b22      	ldr	r3, [pc, #136]	; (8002348 <MX_GPIO_Init+0x90>)
 80022c0:	4a21      	ldr	r2, [pc, #132]	; (8002348 <MX_GPIO_Init+0x90>)
 80022c2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80022c4:	2102      	movs	r1, #2
 80022c6:	430a      	orrs	r2, r1
 80022c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80022ca:	4b1f      	ldr	r3, [pc, #124]	; (8002348 <MX_GPIO_Init+0x90>)
 80022cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ce:	2202      	movs	r2, #2
 80022d0:	4013      	ands	r3, r2
 80022d2:	60bb      	str	r3, [r7, #8]
 80022d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022d6:	4b1c      	ldr	r3, [pc, #112]	; (8002348 <MX_GPIO_Init+0x90>)
 80022d8:	4a1b      	ldr	r2, [pc, #108]	; (8002348 <MX_GPIO_Init+0x90>)
 80022da:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80022dc:	2180      	movs	r1, #128	; 0x80
 80022de:	430a      	orrs	r2, r1
 80022e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80022e2:	4b19      	ldr	r3, [pc, #100]	; (8002348 <MX_GPIO_Init+0x90>)
 80022e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e6:	2280      	movs	r2, #128	; 0x80
 80022e8:	4013      	ands	r3, r2
 80022ea:	607b      	str	r3, [r7, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ee:	4b16      	ldr	r3, [pc, #88]	; (8002348 <MX_GPIO_Init+0x90>)
 80022f0:	4a15      	ldr	r2, [pc, #84]	; (8002348 <MX_GPIO_Init+0x90>)
 80022f2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80022f4:	2101      	movs	r1, #1
 80022f6:	430a      	orrs	r2, r1
 80022f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80022fa:	4b13      	ldr	r3, [pc, #76]	; (8002348 <MX_GPIO_Init+0x90>)
 80022fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fe:	2201      	movs	r2, #1
 8002300:	4013      	ands	r3, r2
 8002302:	603b      	str	r3, [r7, #0]
 8002304:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED3_Pin, GPIO_PIN_RESET);
 8002306:	4b11      	ldr	r3, [pc, #68]	; (800234c <MX_GPIO_Init+0x94>)
 8002308:	2200      	movs	r2, #0
 800230a:	2160      	movs	r1, #96	; 0x60
 800230c:	0018      	movs	r0, r3
 800230e:	f7ff f923 	bl	8001558 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED3_Pin;
 8002312:	230c      	movs	r3, #12
 8002314:	18fb      	adds	r3, r7, r3
 8002316:	2260      	movs	r2, #96	; 0x60
 8002318:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800231a:	230c      	movs	r3, #12
 800231c:	18fb      	adds	r3, r7, r3
 800231e:	2201      	movs	r2, #1
 8002320:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002322:	230c      	movs	r3, #12
 8002324:	18fb      	adds	r3, r7, r3
 8002326:	2202      	movs	r2, #2
 8002328:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232a:	230c      	movs	r3, #12
 800232c:	18fb      	adds	r3, r7, r3
 800232e:	2200      	movs	r2, #0
 8002330:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002332:	230c      	movs	r3, #12
 8002334:	18fb      	adds	r3, r7, r3
 8002336:	4a05      	ldr	r2, [pc, #20]	; (800234c <MX_GPIO_Init+0x94>)
 8002338:	0019      	movs	r1, r3
 800233a:	0010      	movs	r0, r2
 800233c:	f7fe ff8e 	bl	800125c <HAL_GPIO_Init>

}
 8002340:	46c0      	nop			; (mov r8, r8)
 8002342:	46bd      	mov	sp, r7
 8002344:	b008      	add	sp, #32
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40021000 	.word	0x40021000
 800234c:	50000400 	.word	0x50000400

08002350 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002354:	f7fd ff64 	bl	8000220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002358:	f000 f812 	bl	8002380 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800235c:	f7ff ffac 	bl	80022b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002360:	f7ff ff8c 	bl	800227c <MX_DMA_Init>
  MX_ADC_Init();
 8002364:	f7ff fec4 	bl	80020f0 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc,(uint32_t*)&ADCxConvertedValue,1);
 8002368:	4903      	ldr	r1, [pc, #12]	; (8002378 <main+0x28>)
 800236a:	4b04      	ldr	r3, [pc, #16]	; (800237c <main+0x2c>)
 800236c:	2201      	movs	r2, #1
 800236e:	0018      	movs	r0, r3
 8002370:	f7fe f90c 	bl	800058c <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002374:	e7fe      	b.n	8002374 <main+0x24>
 8002376:	46c0      	nop			; (mov r8, r8)
 8002378:	200000c4 	.word	0x200000c4
 800237c:	20000064 	.word	0x20000064

08002380 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b094      	sub	sp, #80	; 0x50
 8002384:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002386:	4b34      	ldr	r3, [pc, #208]	; (8002458 <SystemClock_Config+0xd8>)
 8002388:	4a33      	ldr	r2, [pc, #204]	; (8002458 <SystemClock_Config+0xd8>)
 800238a:	6812      	ldr	r2, [r2, #0]
 800238c:	4933      	ldr	r1, [pc, #204]	; (800245c <SystemClock_Config+0xdc>)
 800238e:	400a      	ands	r2, r1
 8002390:	2180      	movs	r1, #128	; 0x80
 8002392:	0109      	lsls	r1, r1, #4
 8002394:	430a      	orrs	r2, r1
 8002396:	601a      	str	r2, [r3, #0]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002398:	2318      	movs	r3, #24
 800239a:	18fb      	adds	r3, r7, r3
 800239c:	2202      	movs	r2, #2
 800239e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023a0:	2318      	movs	r3, #24
 80023a2:	18fb      	adds	r3, r7, r3
 80023a4:	2201      	movs	r2, #1
 80023a6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80023a8:	2318      	movs	r3, #24
 80023aa:	18fb      	adds	r3, r7, r3
 80023ac:	2210      	movs	r2, #16
 80023ae:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023b0:	2318      	movs	r3, #24
 80023b2:	18fb      	adds	r3, r7, r3
 80023b4:	2202      	movs	r2, #2
 80023b6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80023b8:	2318      	movs	r3, #24
 80023ba:	18fb      	adds	r3, r7, r3
 80023bc:	2200      	movs	r2, #0
 80023be:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80023c0:	2318      	movs	r3, #24
 80023c2:	18fb      	adds	r3, r7, r3
 80023c4:	2280      	movs	r2, #128	; 0x80
 80023c6:	02d2      	lsls	r2, r2, #11
 80023c8:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80023ca:	2318      	movs	r3, #24
 80023cc:	18fb      	adds	r3, r7, r3
 80023ce:	2280      	movs	r2, #128	; 0x80
 80023d0:	03d2      	lsls	r2, r2, #15
 80023d2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023d4:	2318      	movs	r3, #24
 80023d6:	18fb      	adds	r3, r7, r3
 80023d8:	0018      	movs	r0, r3
 80023da:	f7ff f8ed 	bl	80015b8 <HAL_RCC_OscConfig>
 80023de:	1e03      	subs	r3, r0, #0
 80023e0:	d004      	beq.n	80023ec <SystemClock_Config+0x6c>
  {
    _Error_Handler(__FILE__, __LINE__);
 80023e2:	4b1f      	ldr	r3, [pc, #124]	; (8002460 <SystemClock_Config+0xe0>)
 80023e4:	2194      	movs	r1, #148	; 0x94
 80023e6:	0018      	movs	r0, r3
 80023e8:	f000 f83c 	bl	8002464 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023ec:	1d3b      	adds	r3, r7, #4
 80023ee:	220f      	movs	r2, #15
 80023f0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023f2:	1d3b      	adds	r3, r7, #4
 80023f4:	2203      	movs	r2, #3
 80023f6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023f8:	1d3b      	adds	r3, r7, #4
 80023fa:	2200      	movs	r2, #0
 80023fc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023fe:	1d3b      	adds	r3, r7, #4
 8002400:	2200      	movs	r2, #0
 8002402:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002404:	1d3b      	adds	r3, r7, #4
 8002406:	2200      	movs	r2, #0
 8002408:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800240a:	1d3b      	adds	r3, r7, #4
 800240c:	2101      	movs	r1, #1
 800240e:	0018      	movs	r0, r3
 8002410:	f7ff fc74 	bl	8001cfc <HAL_RCC_ClockConfig>
 8002414:	1e03      	subs	r3, r0, #0
 8002416:	d004      	beq.n	8002422 <SystemClock_Config+0xa2>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002418:	4b11      	ldr	r3, [pc, #68]	; (8002460 <SystemClock_Config+0xe0>)
 800241a:	21a2      	movs	r1, #162	; 0xa2
 800241c:	0018      	movs	r0, r3
 800241e:	f000 f821 	bl	8002464 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002422:	f7ff fe03 	bl	800202c <HAL_RCC_GetHCLKFreq>
 8002426:	0002      	movs	r2, r0
 8002428:	23fa      	movs	r3, #250	; 0xfa
 800242a:	0099      	lsls	r1, r3, #2
 800242c:	0010      	movs	r0, r2
 800242e:	f7fd fe6b 	bl	8000108 <__udivsi3>
 8002432:	0003      	movs	r3, r0
 8002434:	0018      	movs	r0, r3
 8002436:	f7fe fb99 	bl	8000b6c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800243a:	2004      	movs	r0, #4
 800243c:	f7fe fba4 	bl	8000b88 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002440:	2301      	movs	r3, #1
 8002442:	425b      	negs	r3, r3
 8002444:	2200      	movs	r2, #0
 8002446:	2100      	movs	r1, #0
 8002448:	0018      	movs	r0, r3
 800244a:	f7fe fb69 	bl	8000b20 <HAL_NVIC_SetPriority>
}
 800244e:	46c0      	nop			; (mov r8, r8)
 8002450:	46bd      	mov	sp, r7
 8002452:	b014      	add	sp, #80	; 0x50
 8002454:	bd80      	pop	{r7, pc}
 8002456:	46c0      	nop			; (mov r8, r8)
 8002458:	40007000 	.word	0x40007000
 800245c:	ffffe7ff 	.word	0xffffe7ff
 8002460:	08002660 	.word	0x08002660

08002464 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 800246e:	e7fe      	b.n	800246e <_Error_Handler+0xa>

08002470 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002474:	4b12      	ldr	r3, [pc, #72]	; (80024c0 <HAL_MspInit+0x50>)
 8002476:	4a12      	ldr	r2, [pc, #72]	; (80024c0 <HAL_MspInit+0x50>)
 8002478:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800247a:	2101      	movs	r1, #1
 800247c:	430a      	orrs	r2, r1
 800247e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002480:	4b0f      	ldr	r3, [pc, #60]	; (80024c0 <HAL_MspInit+0x50>)
 8002482:	4a0f      	ldr	r2, [pc, #60]	; (80024c0 <HAL_MspInit+0x50>)
 8002484:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002486:	2180      	movs	r1, #128	; 0x80
 8002488:	0549      	lsls	r1, r1, #21
 800248a:	430a      	orrs	r2, r1
 800248c:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 800248e:	2305      	movs	r3, #5
 8002490:	425b      	negs	r3, r3
 8002492:	2200      	movs	r2, #0
 8002494:	2100      	movs	r1, #0
 8002496:	0018      	movs	r0, r3
 8002498:	f7fe fb42 	bl	8000b20 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800249c:	2302      	movs	r3, #2
 800249e:	425b      	negs	r3, r3
 80024a0:	2200      	movs	r2, #0
 80024a2:	2100      	movs	r1, #0
 80024a4:	0018      	movs	r0, r3
 80024a6:	f7fe fb3b 	bl	8000b20 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80024aa:	2301      	movs	r3, #1
 80024ac:	425b      	negs	r3, r3
 80024ae:	2200      	movs	r2, #0
 80024b0:	2100      	movs	r1, #0
 80024b2:	0018      	movs	r0, r3
 80024b4:	f7fe fb34 	bl	8000b20 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024b8:	46c0      	nop			; (mov r8, r8)
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	46c0      	nop			; (mov r8, r8)
 80024c0:	40021000 	.word	0x40021000

080024c4 <NMI_Handler>:

/**
* @brief This function handles Non maskable Interrupt.
*/
void NMI_Handler(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80024c8:	46c0      	nop			; (mov r8, r8)
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024d2:	e7fe      	b.n	80024d2 <HardFault_Handler+0x4>

080024d4 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80024d8:	46c0      	nop			; (mov r8, r8)
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024e2:	46c0      	nop			; (mov r8, r8)
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024ec:	f7fd feca 	bl	8000284 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80024f0:	f7fe fb64 	bl	8000bbc <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024f4:	46c0      	nop			; (mov r8, r8)
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
	...

080024fc <DMA1_Channel1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt.
*/
void DMA1_Channel1_IRQHandler(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 8002500:	4b05      	ldr	r3, [pc, #20]	; (8002518 <DMA1_Channel1_IRQHandler+0x1c>)
 8002502:	2120      	movs	r1, #32
 8002504:	0018      	movs	r0, r3
 8002506:	f7ff f844 	bl	8001592 <HAL_GPIO_TogglePin>

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 800250a:	4b04      	ldr	r3, [pc, #16]	; (800251c <DMA1_Channel1_IRQHandler+0x20>)
 800250c:	0018      	movs	r0, r3
 800250e:	f7fe fc97 	bl	8000e40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002512:	46c0      	nop			; (mov r8, r8)
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	50000400 	.word	0x50000400
 800251c:	20000024 	.word	0x20000024

08002520 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8002524:	4b17      	ldr	r3, [pc, #92]	; (8002584 <SystemInit+0x64>)
 8002526:	4a17      	ldr	r2, [pc, #92]	; (8002584 <SystemInit+0x64>)
 8002528:	6812      	ldr	r2, [r2, #0]
 800252a:	2180      	movs	r1, #128	; 0x80
 800252c:	0049      	lsls	r1, r1, #1
 800252e:	430a      	orrs	r2, r1
 8002530:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8002532:	4b14      	ldr	r3, [pc, #80]	; (8002584 <SystemInit+0x64>)
 8002534:	4a13      	ldr	r2, [pc, #76]	; (8002584 <SystemInit+0x64>)
 8002536:	68d2      	ldr	r2, [r2, #12]
 8002538:	4913      	ldr	r1, [pc, #76]	; (8002588 <SystemInit+0x68>)
 800253a:	400a      	ands	r2, r1
 800253c:	60da      	str	r2, [r3, #12]
 
  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800253e:	4b11      	ldr	r3, [pc, #68]	; (8002584 <SystemInit+0x64>)
 8002540:	4a10      	ldr	r2, [pc, #64]	; (8002584 <SystemInit+0x64>)
 8002542:	6812      	ldr	r2, [r2, #0]
 8002544:	4911      	ldr	r1, [pc, #68]	; (800258c <SystemInit+0x6c>)
 8002546:	400a      	ands	r2, r1
 8002548:	601a      	str	r2, [r3, #0]
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800254a:	4b0e      	ldr	r3, [pc, #56]	; (8002584 <SystemInit+0x64>)
 800254c:	4a0d      	ldr	r2, [pc, #52]	; (8002584 <SystemInit+0x64>)
 800254e:	6892      	ldr	r2, [r2, #8]
 8002550:	2101      	movs	r1, #1
 8002552:	438a      	bics	r2, r1
 8002554:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8002556:	4b0b      	ldr	r3, [pc, #44]	; (8002584 <SystemInit+0x64>)
 8002558:	4a0a      	ldr	r2, [pc, #40]	; (8002584 <SystemInit+0x64>)
 800255a:	6812      	ldr	r2, [r2, #0]
 800255c:	490c      	ldr	r1, [pc, #48]	; (8002590 <SystemInit+0x70>)
 800255e:	400a      	ands	r2, r1
 8002560:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8002562:	4b08      	ldr	r3, [pc, #32]	; (8002584 <SystemInit+0x64>)
 8002564:	4a07      	ldr	r2, [pc, #28]	; (8002584 <SystemInit+0x64>)
 8002566:	68d2      	ldr	r2, [r2, #12]
 8002568:	490a      	ldr	r1, [pc, #40]	; (8002594 <SystemInit+0x74>)
 800256a:	400a      	ands	r2, r1
 800256c:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800256e:	4b05      	ldr	r3, [pc, #20]	; (8002584 <SystemInit+0x64>)
 8002570:	2200      	movs	r2, #0
 8002572:	611a      	str	r2, [r3, #16]
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002574:	4b08      	ldr	r3, [pc, #32]	; (8002598 <SystemInit+0x78>)
 8002576:	2280      	movs	r2, #128	; 0x80
 8002578:	0512      	lsls	r2, r2, #20
 800257a:	609a      	str	r2, [r3, #8]
#endif
}
 800257c:	46c0      	nop			; (mov r8, r8)
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	46c0      	nop			; (mov r8, r8)
 8002584:	40021000 	.word	0x40021000
 8002588:	88ff400c 	.word	0x88ff400c
 800258c:	fef6fff6 	.word	0xfef6fff6
 8002590:	fffbffff 	.word	0xfffbffff
 8002594:	ff02ffff 	.word	0xff02ffff
 8002598:	e000ed00 	.word	0xe000ed00

0800259c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800259c:	480d      	ldr	r0, [pc, #52]	; (80025d4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800259e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80025a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80025a2:	e003      	b.n	80025ac <LoopCopyDataInit>

080025a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80025a4:	4b0c      	ldr	r3, [pc, #48]	; (80025d8 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 80025a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80025a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80025aa:	3104      	adds	r1, #4

080025ac <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80025ac:	480b      	ldr	r0, [pc, #44]	; (80025dc <LoopForever+0xa>)
  ldr  r3, =_edata
 80025ae:	4b0c      	ldr	r3, [pc, #48]	; (80025e0 <LoopForever+0xe>)
  adds  r2, r0, r1
 80025b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80025b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80025b4:	d3f6      	bcc.n	80025a4 <CopyDataInit>
  ldr  r2, =_sbss
 80025b6:	4a0b      	ldr	r2, [pc, #44]	; (80025e4 <LoopForever+0x12>)
  b  LoopFillZerobss
 80025b8:	e002      	b.n	80025c0 <LoopFillZerobss>

080025ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80025ba:	2300      	movs	r3, #0
  str  r3, [r2]
 80025bc:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025be:	3204      	adds	r2, #4

080025c0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80025c0:	4b09      	ldr	r3, [pc, #36]	; (80025e8 <LoopForever+0x16>)
  cmp  r2, r3
 80025c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80025c4:	d3f9      	bcc.n	80025ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80025c6:	f7ff ffab 	bl	8002520 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025ca:	f000 f811 	bl	80025f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025ce:	f7ff febf 	bl	8002350 <main>

080025d2 <LoopForever>:

LoopForever:
    b LoopForever
 80025d2:	e7fe      	b.n	80025d2 <LoopForever>
   ldr   r0, =_estack
 80025d4:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 80025d8:	08002694 	.word	0x08002694
  ldr  r0, =_sdata
 80025dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80025e0:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 80025e4:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 80025e8:	200000c8 	.word	0x200000c8

080025ec <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025ec:	e7fe      	b.n	80025ec <ADC1_COMP_IRQHandler>
	...

080025f0 <__libc_init_array>:
 80025f0:	b570      	push	{r4, r5, r6, lr}
 80025f2:	2600      	movs	r6, #0
 80025f4:	4d0c      	ldr	r5, [pc, #48]	; (8002628 <__libc_init_array+0x38>)
 80025f6:	4c0d      	ldr	r4, [pc, #52]	; (800262c <__libc_init_array+0x3c>)
 80025f8:	1b64      	subs	r4, r4, r5
 80025fa:	10a4      	asrs	r4, r4, #2
 80025fc:	42a6      	cmp	r6, r4
 80025fe:	d109      	bne.n	8002614 <__libc_init_array+0x24>
 8002600:	2600      	movs	r6, #0
 8002602:	f000 f819 	bl	8002638 <_init>
 8002606:	4d0a      	ldr	r5, [pc, #40]	; (8002630 <__libc_init_array+0x40>)
 8002608:	4c0a      	ldr	r4, [pc, #40]	; (8002634 <__libc_init_array+0x44>)
 800260a:	1b64      	subs	r4, r4, r5
 800260c:	10a4      	asrs	r4, r4, #2
 800260e:	42a6      	cmp	r6, r4
 8002610:	d105      	bne.n	800261e <__libc_init_array+0x2e>
 8002612:	bd70      	pop	{r4, r5, r6, pc}
 8002614:	00b3      	lsls	r3, r6, #2
 8002616:	58eb      	ldr	r3, [r5, r3]
 8002618:	4798      	blx	r3
 800261a:	3601      	adds	r6, #1
 800261c:	e7ee      	b.n	80025fc <__libc_init_array+0xc>
 800261e:	00b3      	lsls	r3, r6, #2
 8002620:	58eb      	ldr	r3, [r5, r3]
 8002622:	4798      	blx	r3
 8002624:	3601      	adds	r6, #1
 8002626:	e7f2      	b.n	800260e <__libc_init_array+0x1e>
 8002628:	0800268c 	.word	0x0800268c
 800262c:	0800268c 	.word	0x0800268c
 8002630:	0800268c 	.word	0x0800268c
 8002634:	08002690 	.word	0x08002690

08002638 <_init>:
 8002638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800263a:	46c0      	nop			; (mov r8, r8)
 800263c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800263e:	bc08      	pop	{r3}
 8002640:	469e      	mov	lr, r3
 8002642:	4770      	bx	lr

08002644 <_fini>:
 8002644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002646:	46c0      	nop			; (mov r8, r8)
 8002648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800264a:	bc08      	pop	{r3}
 800264c:	469e      	mov	lr, r3
 800264e:	4770      	bx	lr
