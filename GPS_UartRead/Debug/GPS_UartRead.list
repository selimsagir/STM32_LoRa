
GPS_UartRead.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002388  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08002448  08002448  00012448  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800247c  0800247c  0001247c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002484  08002484  00012484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002488  08002488  00012488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000004  20000000  0800248c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000284  20000004  08002490  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000288  08002490  00020288  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000ddd5  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000281b  00000000  00000000  0002de01  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000654a  00000000  00000000  0003061c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000a78  00000000  00000000  00036b68  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000d08  00000000  00000000  000375e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00006122  00000000  00000000  000382e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000034a6  00000000  00000000  0003e40a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000418b0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001d7c  00000000  00000000  0004192c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002430 	.word	0x08002430

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08002430 	.word	0x08002430

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_shi>:
 800011c:	b403      	push	{r0, r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0040      	lsls	r0, r0, #1
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	5e09      	ldrsh	r1, [r1, r0]
 8000128:	0049      	lsls	r1, r1, #1
 800012a:	448e      	add	lr, r1
 800012c:	bc03      	pop	{r0, r1}
 800012e:	4770      	bx	lr

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f806 	bl	8000244 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__aeabi_idiv0>:
 8000244:	4770      	bx	lr
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uldivmod>:
 8000248:	2b00      	cmp	r3, #0
 800024a:	d111      	bne.n	8000270 <__aeabi_uldivmod+0x28>
 800024c:	2a00      	cmp	r2, #0
 800024e:	d10f      	bne.n	8000270 <__aeabi_uldivmod+0x28>
 8000250:	2900      	cmp	r1, #0
 8000252:	d100      	bne.n	8000256 <__aeabi_uldivmod+0xe>
 8000254:	2800      	cmp	r0, #0
 8000256:	d002      	beq.n	800025e <__aeabi_uldivmod+0x16>
 8000258:	2100      	movs	r1, #0
 800025a:	43c9      	mvns	r1, r1
 800025c:	1c08      	adds	r0, r1, #0
 800025e:	b407      	push	{r0, r1, r2}
 8000260:	4802      	ldr	r0, [pc, #8]	; (800026c <__aeabi_uldivmod+0x24>)
 8000262:	a102      	add	r1, pc, #8	; (adr r1, 800026c <__aeabi_uldivmod+0x24>)
 8000264:	1840      	adds	r0, r0, r1
 8000266:	9002      	str	r0, [sp, #8]
 8000268:	bd03      	pop	{r0, r1, pc}
 800026a:	46c0      	nop			; (mov r8, r8)
 800026c:	ffffffd9 	.word	0xffffffd9
 8000270:	b403      	push	{r0, r1}
 8000272:	4668      	mov	r0, sp
 8000274:	b501      	push	{r0, lr}
 8000276:	9802      	ldr	r0, [sp, #8]
 8000278:	f000 f806 	bl	8000288 <__udivmoddi4>
 800027c:	9b01      	ldr	r3, [sp, #4]
 800027e:	469e      	mov	lr, r3
 8000280:	b002      	add	sp, #8
 8000282:	bc0c      	pop	{r2, r3}
 8000284:	4770      	bx	lr
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__udivmoddi4>:
 8000288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800028a:	4657      	mov	r7, sl
 800028c:	464e      	mov	r6, r9
 800028e:	4645      	mov	r5, r8
 8000290:	46de      	mov	lr, fp
 8000292:	b5e0      	push	{r5, r6, r7, lr}
 8000294:	0004      	movs	r4, r0
 8000296:	b083      	sub	sp, #12
 8000298:	000d      	movs	r5, r1
 800029a:	4692      	mov	sl, r2
 800029c:	4699      	mov	r9, r3
 800029e:	428b      	cmp	r3, r1
 80002a0:	d82f      	bhi.n	8000302 <__udivmoddi4+0x7a>
 80002a2:	d02c      	beq.n	80002fe <__udivmoddi4+0x76>
 80002a4:	4649      	mov	r1, r9
 80002a6:	4650      	mov	r0, sl
 80002a8:	f000 f8ae 	bl	8000408 <__clzdi2>
 80002ac:	0029      	movs	r1, r5
 80002ae:	0006      	movs	r6, r0
 80002b0:	0020      	movs	r0, r4
 80002b2:	f000 f8a9 	bl	8000408 <__clzdi2>
 80002b6:	1a33      	subs	r3, r6, r0
 80002b8:	4698      	mov	r8, r3
 80002ba:	3b20      	subs	r3, #32
 80002bc:	469b      	mov	fp, r3
 80002be:	d500      	bpl.n	80002c2 <__udivmoddi4+0x3a>
 80002c0:	e074      	b.n	80003ac <__udivmoddi4+0x124>
 80002c2:	4653      	mov	r3, sl
 80002c4:	465a      	mov	r2, fp
 80002c6:	4093      	lsls	r3, r2
 80002c8:	001f      	movs	r7, r3
 80002ca:	4653      	mov	r3, sl
 80002cc:	4642      	mov	r2, r8
 80002ce:	4093      	lsls	r3, r2
 80002d0:	001e      	movs	r6, r3
 80002d2:	42af      	cmp	r7, r5
 80002d4:	d829      	bhi.n	800032a <__udivmoddi4+0xa2>
 80002d6:	d026      	beq.n	8000326 <__udivmoddi4+0x9e>
 80002d8:	465b      	mov	r3, fp
 80002da:	1ba4      	subs	r4, r4, r6
 80002dc:	41bd      	sbcs	r5, r7
 80002de:	2b00      	cmp	r3, #0
 80002e0:	da00      	bge.n	80002e4 <__udivmoddi4+0x5c>
 80002e2:	e079      	b.n	80003d8 <__udivmoddi4+0x150>
 80002e4:	2200      	movs	r2, #0
 80002e6:	2300      	movs	r3, #0
 80002e8:	9200      	str	r2, [sp, #0]
 80002ea:	9301      	str	r3, [sp, #4]
 80002ec:	2301      	movs	r3, #1
 80002ee:	465a      	mov	r2, fp
 80002f0:	4093      	lsls	r3, r2
 80002f2:	9301      	str	r3, [sp, #4]
 80002f4:	2301      	movs	r3, #1
 80002f6:	4642      	mov	r2, r8
 80002f8:	4093      	lsls	r3, r2
 80002fa:	9300      	str	r3, [sp, #0]
 80002fc:	e019      	b.n	8000332 <__udivmoddi4+0xaa>
 80002fe:	4282      	cmp	r2, r0
 8000300:	d9d0      	bls.n	80002a4 <__udivmoddi4+0x1c>
 8000302:	2200      	movs	r2, #0
 8000304:	2300      	movs	r3, #0
 8000306:	9200      	str	r2, [sp, #0]
 8000308:	9301      	str	r3, [sp, #4]
 800030a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <__udivmoddi4+0x8c>
 8000310:	601c      	str	r4, [r3, #0]
 8000312:	605d      	str	r5, [r3, #4]
 8000314:	9800      	ldr	r0, [sp, #0]
 8000316:	9901      	ldr	r1, [sp, #4]
 8000318:	b003      	add	sp, #12
 800031a:	bc3c      	pop	{r2, r3, r4, r5}
 800031c:	4690      	mov	r8, r2
 800031e:	4699      	mov	r9, r3
 8000320:	46a2      	mov	sl, r4
 8000322:	46ab      	mov	fp, r5
 8000324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000326:	42a3      	cmp	r3, r4
 8000328:	d9d6      	bls.n	80002d8 <__udivmoddi4+0x50>
 800032a:	2200      	movs	r2, #0
 800032c:	2300      	movs	r3, #0
 800032e:	9200      	str	r2, [sp, #0]
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	4643      	mov	r3, r8
 8000334:	2b00      	cmp	r3, #0
 8000336:	d0e8      	beq.n	800030a <__udivmoddi4+0x82>
 8000338:	07fb      	lsls	r3, r7, #31
 800033a:	0872      	lsrs	r2, r6, #1
 800033c:	431a      	orrs	r2, r3
 800033e:	4646      	mov	r6, r8
 8000340:	087b      	lsrs	r3, r7, #1
 8000342:	e00e      	b.n	8000362 <__udivmoddi4+0xda>
 8000344:	42ab      	cmp	r3, r5
 8000346:	d101      	bne.n	800034c <__udivmoddi4+0xc4>
 8000348:	42a2      	cmp	r2, r4
 800034a:	d80c      	bhi.n	8000366 <__udivmoddi4+0xde>
 800034c:	1aa4      	subs	r4, r4, r2
 800034e:	419d      	sbcs	r5, r3
 8000350:	2001      	movs	r0, #1
 8000352:	1924      	adds	r4, r4, r4
 8000354:	416d      	adcs	r5, r5
 8000356:	2100      	movs	r1, #0
 8000358:	3e01      	subs	r6, #1
 800035a:	1824      	adds	r4, r4, r0
 800035c:	414d      	adcs	r5, r1
 800035e:	2e00      	cmp	r6, #0
 8000360:	d006      	beq.n	8000370 <__udivmoddi4+0xe8>
 8000362:	42ab      	cmp	r3, r5
 8000364:	d9ee      	bls.n	8000344 <__udivmoddi4+0xbc>
 8000366:	3e01      	subs	r6, #1
 8000368:	1924      	adds	r4, r4, r4
 800036a:	416d      	adcs	r5, r5
 800036c:	2e00      	cmp	r6, #0
 800036e:	d1f8      	bne.n	8000362 <__udivmoddi4+0xda>
 8000370:	465b      	mov	r3, fp
 8000372:	9800      	ldr	r0, [sp, #0]
 8000374:	9901      	ldr	r1, [sp, #4]
 8000376:	1900      	adds	r0, r0, r4
 8000378:	4169      	adcs	r1, r5
 800037a:	2b00      	cmp	r3, #0
 800037c:	db22      	blt.n	80003c4 <__udivmoddi4+0x13c>
 800037e:	002b      	movs	r3, r5
 8000380:	465a      	mov	r2, fp
 8000382:	40d3      	lsrs	r3, r2
 8000384:	002a      	movs	r2, r5
 8000386:	4644      	mov	r4, r8
 8000388:	40e2      	lsrs	r2, r4
 800038a:	001c      	movs	r4, r3
 800038c:	465b      	mov	r3, fp
 800038e:	0015      	movs	r5, r2
 8000390:	2b00      	cmp	r3, #0
 8000392:	db2c      	blt.n	80003ee <__udivmoddi4+0x166>
 8000394:	0026      	movs	r6, r4
 8000396:	409e      	lsls	r6, r3
 8000398:	0033      	movs	r3, r6
 800039a:	0026      	movs	r6, r4
 800039c:	4647      	mov	r7, r8
 800039e:	40be      	lsls	r6, r7
 80003a0:	0032      	movs	r2, r6
 80003a2:	1a80      	subs	r0, r0, r2
 80003a4:	4199      	sbcs	r1, r3
 80003a6:	9000      	str	r0, [sp, #0]
 80003a8:	9101      	str	r1, [sp, #4]
 80003aa:	e7ae      	b.n	800030a <__udivmoddi4+0x82>
 80003ac:	4642      	mov	r2, r8
 80003ae:	2320      	movs	r3, #32
 80003b0:	1a9b      	subs	r3, r3, r2
 80003b2:	4652      	mov	r2, sl
 80003b4:	40da      	lsrs	r2, r3
 80003b6:	4641      	mov	r1, r8
 80003b8:	0013      	movs	r3, r2
 80003ba:	464a      	mov	r2, r9
 80003bc:	408a      	lsls	r2, r1
 80003be:	0017      	movs	r7, r2
 80003c0:	431f      	orrs	r7, r3
 80003c2:	e782      	b.n	80002ca <__udivmoddi4+0x42>
 80003c4:	4642      	mov	r2, r8
 80003c6:	2320      	movs	r3, #32
 80003c8:	1a9b      	subs	r3, r3, r2
 80003ca:	002a      	movs	r2, r5
 80003cc:	4646      	mov	r6, r8
 80003ce:	409a      	lsls	r2, r3
 80003d0:	0023      	movs	r3, r4
 80003d2:	40f3      	lsrs	r3, r6
 80003d4:	4313      	orrs	r3, r2
 80003d6:	e7d5      	b.n	8000384 <__udivmoddi4+0xfc>
 80003d8:	4642      	mov	r2, r8
 80003da:	2320      	movs	r3, #32
 80003dc:	2100      	movs	r1, #0
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	9100      	str	r1, [sp, #0]
 80003e4:	9201      	str	r2, [sp, #4]
 80003e6:	2201      	movs	r2, #1
 80003e8:	40da      	lsrs	r2, r3
 80003ea:	9201      	str	r2, [sp, #4]
 80003ec:	e782      	b.n	80002f4 <__udivmoddi4+0x6c>
 80003ee:	4642      	mov	r2, r8
 80003f0:	2320      	movs	r3, #32
 80003f2:	0026      	movs	r6, r4
 80003f4:	1a9b      	subs	r3, r3, r2
 80003f6:	40de      	lsrs	r6, r3
 80003f8:	002f      	movs	r7, r5
 80003fa:	46b4      	mov	ip, r6
 80003fc:	4097      	lsls	r7, r2
 80003fe:	4666      	mov	r6, ip
 8000400:	003b      	movs	r3, r7
 8000402:	4333      	orrs	r3, r6
 8000404:	e7c9      	b.n	800039a <__udivmoddi4+0x112>
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__clzdi2>:
 8000408:	b510      	push	{r4, lr}
 800040a:	2900      	cmp	r1, #0
 800040c:	d103      	bne.n	8000416 <__clzdi2+0xe>
 800040e:	f000 f807 	bl	8000420 <__clzsi2>
 8000412:	3020      	adds	r0, #32
 8000414:	e002      	b.n	800041c <__clzdi2+0x14>
 8000416:	1c08      	adds	r0, r1, #0
 8000418:	f000 f802 	bl	8000420 <__clzsi2>
 800041c:	bd10      	pop	{r4, pc}
 800041e:	46c0      	nop			; (mov r8, r8)

08000420 <__clzsi2>:
 8000420:	211c      	movs	r1, #28
 8000422:	2301      	movs	r3, #1
 8000424:	041b      	lsls	r3, r3, #16
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0xe>
 800042a:	0c00      	lsrs	r0, r0, #16
 800042c:	3910      	subs	r1, #16
 800042e:	0a1b      	lsrs	r3, r3, #8
 8000430:	4298      	cmp	r0, r3
 8000432:	d301      	bcc.n	8000438 <__clzsi2+0x18>
 8000434:	0a00      	lsrs	r0, r0, #8
 8000436:	3908      	subs	r1, #8
 8000438:	091b      	lsrs	r3, r3, #4
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0x22>
 800043e:	0900      	lsrs	r0, r0, #4
 8000440:	3904      	subs	r1, #4
 8000442:	a202      	add	r2, pc, #8	; (adr r2, 800044c <__clzsi2+0x2c>)
 8000444:	5c10      	ldrb	r0, [r2, r0]
 8000446:	1840      	adds	r0, r0, r1
 8000448:	4770      	bx	lr
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	02020304 	.word	0x02020304
 8000450:	01010101 	.word	0x01010101
	...

0800045c <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 800045c:	21fa      	movs	r1, #250	; 0xfa
 800045e:	4b0a      	ldr	r3, [pc, #40]	; (8000488 <HAL_InitTick+0x2c>)
{
 8000460:	b570      	push	{r4, r5, r6, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000462:	0089      	lsls	r1, r1, #2
{
 8000464:	0005      	movs	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000466:	6818      	ldr	r0, [r3, #0]
 8000468:	f7ff fe62 	bl	8000130 <__udivsi3>
 800046c:	f000 f86a 	bl	8000544 <HAL_SYSTICK_Config>
 8000470:	0004      	movs	r4, r0
  {
    status = HAL_ERROR;
 8000472:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000474:	2c00      	cmp	r4, #0
 8000476:	d105      	bne.n	8000484 <HAL_InitTick+0x28>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000478:	3802      	subs	r0, #2
 800047a:	0022      	movs	r2, r4
 800047c:	0029      	movs	r1, r5
 800047e:	f000 f827 	bl	80004d0 <HAL_NVIC_SetPriority>
 8000482:	0020      	movs	r0, r4
  }

  /* Return function status */
  return status;
}
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	46c0      	nop			; (mov r8, r8)
 8000488:	20000000 	.word	0x20000000

0800048c <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800048c:	2340      	movs	r3, #64	; 0x40
 800048e:	4a08      	ldr	r2, [pc, #32]	; (80004b0 <HAL_Init+0x24>)
{
 8000490:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000492:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000494:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000496:	430b      	orrs	r3, r1
 8000498:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800049a:	f7ff ffdf 	bl	800045c <HAL_InitTick>
 800049e:	1e04      	subs	r4, r0, #0
 80004a0:	d103      	bne.n	80004aa <HAL_Init+0x1e>
    HAL_MspInit();
 80004a2:	f001 fe15 	bl	80020d0 <HAL_MspInit>
}
 80004a6:	0020      	movs	r0, r4
 80004a8:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80004aa:	2401      	movs	r4, #1
 80004ac:	e7fb      	b.n	80004a6 <HAL_Init+0x1a>
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	40022000 	.word	0x40022000

080004b4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80004b4:	4a02      	ldr	r2, [pc, #8]	; (80004c0 <HAL_IncTick+0xc>)
 80004b6:	6813      	ldr	r3, [r2, #0]
 80004b8:	3301      	adds	r3, #1
 80004ba:	6013      	str	r3, [r2, #0]
}
 80004bc:	4770      	bx	lr
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	20000020 	.word	0x20000020

080004c4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80004c4:	4b01      	ldr	r3, [pc, #4]	; (80004cc <HAL_GetTick+0x8>)
 80004c6:	6818      	ldr	r0, [r3, #0]
}
 80004c8:	4770      	bx	lr
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	20000020 	.word	0x20000020

080004d0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80004d4:	2800      	cmp	r0, #0
 80004d6:	da14      	bge.n	8000502 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004d8:	230f      	movs	r3, #15
 80004da:	b2c0      	uxtb	r0, r0
 80004dc:	4003      	ands	r3, r0
 80004de:	3b08      	subs	r3, #8
 80004e0:	4a11      	ldr	r2, [pc, #68]	; (8000528 <HAL_NVIC_SetPriority+0x58>)
 80004e2:	089b      	lsrs	r3, r3, #2
 80004e4:	009b      	lsls	r3, r3, #2
 80004e6:	189b      	adds	r3, r3, r2
 80004e8:	2203      	movs	r2, #3
 80004ea:	4010      	ands	r0, r2
 80004ec:	4090      	lsls	r0, r2
 80004ee:	32fc      	adds	r2, #252	; 0xfc
 80004f0:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004f2:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004f4:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004f6:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004f8:	69dc      	ldr	r4, [r3, #28]
 80004fa:	43ac      	bics	r4, r5
 80004fc:	4321      	orrs	r1, r4
 80004fe:	61d9      	str	r1, [r3, #28]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000500:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000502:	2503      	movs	r5, #3
 8000504:	0883      	lsrs	r3, r0, #2
 8000506:	4028      	ands	r0, r5
 8000508:	40a8      	lsls	r0, r5
 800050a:	35fc      	adds	r5, #252	; 0xfc
 800050c:	002e      	movs	r6, r5
 800050e:	4a07      	ldr	r2, [pc, #28]	; (800052c <HAL_NVIC_SetPriority+0x5c>)
 8000510:	009b      	lsls	r3, r3, #2
 8000512:	189b      	adds	r3, r3, r2
 8000514:	22c0      	movs	r2, #192	; 0xc0
 8000516:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000518:	4029      	ands	r1, r5
 800051a:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800051c:	0092      	lsls	r2, r2, #2
 800051e:	589c      	ldr	r4, [r3, r2]
 8000520:	43b4      	bics	r4, r6
 8000522:	4321      	orrs	r1, r4
 8000524:	5099      	str	r1, [r3, r2]
 8000526:	e7eb      	b.n	8000500 <HAL_NVIC_SetPriority+0x30>
 8000528:	e000ed00 	.word	0xe000ed00
 800052c:	e000e100 	.word	0xe000e100

08000530 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000530:	231f      	movs	r3, #31
 8000532:	4018      	ands	r0, r3
 8000534:	3b1e      	subs	r3, #30
 8000536:	4083      	lsls	r3, r0
 8000538:	4a01      	ldr	r2, [pc, #4]	; (8000540 <HAL_NVIC_EnableIRQ+0x10>)
 800053a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800053c:	4770      	bx	lr
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	e000e100 	.word	0xe000e100

08000544 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000544:	4a09      	ldr	r2, [pc, #36]	; (800056c <HAL_SYSTICK_Config+0x28>)
 8000546:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000548:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800054a:	4293      	cmp	r3, r2
 800054c:	d80d      	bhi.n	800056a <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800054e:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000550:	4a07      	ldr	r2, [pc, #28]	; (8000570 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000552:	4808      	ldr	r0, [pc, #32]	; (8000574 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000554:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000556:	6a03      	ldr	r3, [r0, #32]
 8000558:	0609      	lsls	r1, r1, #24
 800055a:	021b      	lsls	r3, r3, #8
 800055c:	0a1b      	lsrs	r3, r3, #8
 800055e:	430b      	orrs	r3, r1
 8000560:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000562:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000564:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000566:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000568:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800056a:	4770      	bx	lr
 800056c:	00ffffff 	.word	0x00ffffff
 8000570:	e000e010 	.word	0xe000e010
 8000574:	e000ed00 	.word	0xe000ed00

08000578 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800057a:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 800057c:	2001      	movs	r0, #1
  if(hdma == NULL)
 800057e:	2c00      	cmp	r4, #0
 8000580:	d035      	beq.n	80005ee <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000582:	6825      	ldr	r5, [r4, #0]
 8000584:	4b1a      	ldr	r3, [pc, #104]	; (80005f0 <HAL_DMA_Init+0x78>)
 8000586:	2114      	movs	r1, #20
 8000588:	18e8      	adds	r0, r5, r3
 800058a:	f7ff fdd1 	bl	8000130 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 800058e:	4b19      	ldr	r3, [pc, #100]	; (80005f4 <HAL_DMA_Init+0x7c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000590:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 8000592:	6423      	str	r3, [r4, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000594:	2302      	movs	r3, #2
 8000596:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000598:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 800059a:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800059c:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800059e:	4b16      	ldr	r3, [pc, #88]	; (80005f8 <HAL_DMA_Init+0x80>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80005a0:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80005a2:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 80005a4:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80005a6:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 80005a8:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80005aa:	433b      	orrs	r3, r7
 80005ac:	6967      	ldr	r7, [r4, #20]
 80005ae:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80005b0:	69a7      	ldr	r7, [r4, #24]
 80005b2:	433b      	orrs	r3, r7
 80005b4:	69e7      	ldr	r7, [r4, #28]
 80005b6:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 80005b8:	6a27      	ldr	r7, [r4, #32]
 80005ba:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 80005bc:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80005be:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80005c0:	2380      	movs	r3, #128	; 0x80
 80005c2:	01db      	lsls	r3, r3, #7
 80005c4:	4299      	cmp	r1, r3
 80005c6:	d00c      	beq.n	80005e2 <HAL_DMA_Init+0x6a>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80005c8:	251c      	movs	r5, #28
 80005ca:	4028      	ands	r0, r5
 80005cc:	3d0d      	subs	r5, #13
 80005ce:	4085      	lsls	r5, r0
 80005d0:	490a      	ldr	r1, [pc, #40]	; (80005fc <HAL_DMA_Init+0x84>)
 80005d2:	680b      	ldr	r3, [r1, #0]
 80005d4:	43ab      	bics	r3, r5
 80005d6:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80005d8:	6863      	ldr	r3, [r4, #4]
 80005da:	680d      	ldr	r5, [r1, #0]
 80005dc:	4083      	lsls	r3, r0
 80005de:	432b      	orrs	r3, r5
 80005e0:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80005e2:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80005e4:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80005e6:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80005e8:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 80005ea:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 80005ec:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 80005ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80005f0:	bffdfff8 	.word	0xbffdfff8
 80005f4:	40020000 	.word	0x40020000
 80005f8:	ffff800f 	.word	0xffff800f
 80005fc:	400200a8 	.word	0x400200a8

08000600 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000600:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000602:	1d84      	adds	r4, r0, #6
 8000604:	7fe3      	ldrb	r3, [r4, #31]
 8000606:	2b02      	cmp	r3, #2
 8000608:	d004      	beq.n	8000614 <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800060a:	2304      	movs	r3, #4
 800060c:	63c3      	str	r3, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 800060e:	3b03      	subs	r3, #3
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8000610:	0018      	movs	r0, r3
 8000612:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000614:	210e      	movs	r1, #14
 8000616:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000618:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800061a:	681a      	ldr	r2, [r3, #0]
 800061c:	438a      	bics	r2, r1
 800061e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8000620:	2201      	movs	r2, #1
 8000622:	6819      	ldr	r1, [r3, #0]
 8000624:	4391      	bics	r1, r2
 8000626:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000628:	231c      	movs	r3, #28
 800062a:	402b      	ands	r3, r5
 800062c:	0015      	movs	r5, r2
 800062e:	409d      	lsls	r5, r3
 8000630:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_UNLOCK(hdma);
 8000632:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000634:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000636:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8000638:	2400      	movs	r4, #0
    if(hdma->XferAbortCallback != NULL)
 800063a:	6b82      	ldr	r2, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 800063c:	77dc      	strb	r4, [r3, #31]
  HAL_StatusTypeDef status = HAL_OK;
 800063e:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8000640:	42a2      	cmp	r2, r4
 8000642:	d0e5      	beq.n	8000610 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8000644:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8000646:	0023      	movs	r3, r4
 8000648:	e7e2      	b.n	8000610 <HAL_DMA_Abort_IT+0x10>

0800064a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800064a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
  uint32_t source_it = hdma->Instance->CCR;

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800064c:	221c      	movs	r2, #28
 800064e:	2704      	movs	r7, #4
 8000650:	6c46      	ldr	r6, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000652:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8000654:	4032      	ands	r2, r6
 8000656:	003e      	movs	r6, r7
 8000658:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800065a:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800065c:	6803      	ldr	r3, [r0, #0]
 800065e:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8000660:	422e      	tst	r6, r5
 8000662:	d00d      	beq.n	8000680 <HAL_DMA_IRQHandler+0x36>
 8000664:	423c      	tst	r4, r7
 8000666:	d00b      	beq.n	8000680 <HAL_DMA_IRQHandler+0x36>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000668:	681a      	ldr	r2, [r3, #0]
 800066a:	0692      	lsls	r2, r2, #26
 800066c:	d402      	bmi.n	8000674 <HAL_DMA_IRQHandler+0x2a>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800066e:	681a      	ldr	r2, [r3, #0]
 8000670:	43ba      	bics	r2, r7
 8000672:	601a      	str	r2, [r3, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8000674:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8000676:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 8000678:	2b00      	cmp	r3, #0
 800067a:	d019      	beq.n	80006b0 <HAL_DMA_IRQHandler+0x66>
    __HAL_UNLOCK(hdma);

    if (hdma->XferErrorCallback != NULL)
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800067c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800067e:	e017      	b.n	80006b0 <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8000680:	2702      	movs	r7, #2
 8000682:	003e      	movs	r6, r7
 8000684:	4096      	lsls	r6, r2
 8000686:	422e      	tst	r6, r5
 8000688:	d013      	beq.n	80006b2 <HAL_DMA_IRQHandler+0x68>
 800068a:	423c      	tst	r4, r7
 800068c:	d011      	beq.n	80006b2 <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	0692      	lsls	r2, r2, #26
 8000692:	d406      	bmi.n	80006a2 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000694:	240a      	movs	r4, #10
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	43a2      	bics	r2, r4
 800069a:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800069c:	2201      	movs	r2, #1
 800069e:	1d83      	adds	r3, r0, #6
 80006a0:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 80006a2:	2200      	movs	r2, #0
 80006a4:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80006a6:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 80006a8:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 80006aa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 80006ac:	4293      	cmp	r3, r2
 80006ae:	d1e5      	bne.n	800067c <HAL_DMA_IRQHandler+0x32>
}
 80006b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80006b2:	2608      	movs	r6, #8
 80006b4:	0037      	movs	r7, r6
 80006b6:	4097      	lsls	r7, r2
 80006b8:	423d      	tst	r5, r7
 80006ba:	d0f9      	beq.n	80006b0 <HAL_DMA_IRQHandler+0x66>
 80006bc:	4234      	tst	r4, r6
 80006be:	d0f7      	beq.n	80006b0 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80006c0:	250e      	movs	r5, #14
 80006c2:	681c      	ldr	r4, [r3, #0]
 80006c4:	43ac      	bics	r4, r5
 80006c6:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80006c8:	2301      	movs	r3, #1
 80006ca:	001c      	movs	r4, r3
 80006cc:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 80006ce:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80006d0:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80006d2:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80006d4:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 80006d6:	2200      	movs	r2, #0
 80006d8:	1d43      	adds	r3, r0, #5
 80006da:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 80006dc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80006de:	e7e5      	b.n	80006ac <HAL_DMA_IRQHandler+0x62>

080006e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006e0:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80006e2:	4a55      	ldr	r2, [pc, #340]	; (8000838 <HAL_GPIO_Init+0x158>)
  while (((GPIO_Init->Pin) >> position) != 0)
 80006e4:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80006e6:	1882      	adds	r2, r0, r2
 80006e8:	1e54      	subs	r4, r2, #1
 80006ea:	41a2      	sbcs	r2, r4
{
 80006ec:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 80006ee:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00U;
 80006f0:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80006f2:	3205      	adds	r2, #5
 80006f4:	9203      	str	r2, [sp, #12]
  while (((GPIO_Init->Pin) >> position) != 0)
 80006f6:	9a01      	ldr	r2, [sp, #4]
 80006f8:	40da      	lsrs	r2, r3
 80006fa:	d101      	bne.n	8000700 <HAL_GPIO_Init+0x20>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 80006fc:	b005      	add	sp, #20
 80006fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000700:	2501      	movs	r5, #1
 8000702:	409d      	lsls	r5, r3
 8000704:	9a01      	ldr	r2, [sp, #4]
 8000706:	402a      	ands	r2, r5
 8000708:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 800070a:	d100      	bne.n	800070e <HAL_GPIO_Init+0x2e>
 800070c:	e091      	b.n	8000832 <HAL_GPIO_Init+0x152>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800070e:	684a      	ldr	r2, [r1, #4]
 8000710:	4694      	mov	ip, r2
 8000712:	2210      	movs	r2, #16
 8000714:	4664      	mov	r4, ip
 8000716:	4394      	bics	r4, r2
 8000718:	0022      	movs	r2, r4
 800071a:	3c01      	subs	r4, #1
 800071c:	2a02      	cmp	r2, #2
 800071e:	d11f      	bne.n	8000760 <HAL_GPIO_Init+0x80>
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000720:	2407      	movs	r4, #7
 8000722:	270f      	movs	r7, #15
 8000724:	401c      	ands	r4, r3
 8000726:	00a4      	lsls	r4, r4, #2
 8000728:	40a7      	lsls	r7, r4
        temp = GPIOx->AFR[position >> 3U];
 800072a:	08da      	lsrs	r2, r3, #3
 800072c:	0092      	lsls	r2, r2, #2
 800072e:	1882      	adds	r2, r0, r2
 8000730:	6a16      	ldr	r6, [r2, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000732:	43be      	bics	r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8000734:	690f      	ldr	r7, [r1, #16]
 8000736:	40a7      	lsls	r7, r4
 8000738:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 800073a:	6216      	str	r6, [r2, #32]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800073c:	2403      	movs	r4, #3
 800073e:	005e      	lsls	r6, r3, #1
 8000740:	40b4      	lsls	r4, r6
        temp = GPIOx->OSPEEDR;
 8000742:	6882      	ldr	r2, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000744:	43a2      	bics	r2, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000746:	68cc      	ldr	r4, [r1, #12]
 8000748:	40b4      	lsls	r4, r6
 800074a:	4322      	orrs	r2, r4
        GPIOx->OSPEEDR = temp;
 800074c:	6082      	str	r2, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800074e:	4662      	mov	r2, ip
 8000750:	06d2      	lsls	r2, r2, #27
 8000752:	0fd2      	lsrs	r2, r2, #31
 8000754:	409a      	lsls	r2, r3
        temp= GPIOx->OTYPER;
 8000756:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000758:	43ac      	bics	r4, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800075a:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 800075c:	6042      	str	r2, [r0, #4]
 800075e:	e001      	b.n	8000764 <HAL_GPIO_Init+0x84>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000760:	2c01      	cmp	r4, #1
 8000762:	d9eb      	bls.n	800073c <HAL_GPIO_Init+0x5c>
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000764:	2603      	movs	r6, #3
 8000766:	0034      	movs	r4, r6
 8000768:	005d      	lsls	r5, r3, #1
 800076a:	40ac      	lsls	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800076c:	4662      	mov	r2, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800076e:	43e4      	mvns	r4, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000770:	4032      	ands	r2, r6
 8000772:	40aa      	lsls	r2, r5
      temp = GPIOx->MODER;
 8000774:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000776:	4027      	ands	r7, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000778:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 800077a:	6002      	str	r2, [r0, #0]
      temp = GPIOx->PUPDR;
 800077c:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800077e:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8000780:	688a      	ldr	r2, [r1, #8]
 8000782:	40aa      	lsls	r2, r5
 8000784:	4314      	orrs	r4, r2
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000786:	4662      	mov	r2, ip
      GPIOx->PUPDR = temp;
 8000788:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800078a:	00d2      	lsls	r2, r2, #3
 800078c:	d551      	bpl.n	8000832 <HAL_GPIO_Init+0x152>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078e:	2501      	movs	r5, #1
 8000790:	4c2a      	ldr	r4, [pc, #168]	; (800083c <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000792:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000794:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000796:	432a      	orrs	r2, r5
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000798:	001d      	movs	r5, r3
 800079a:	4035      	ands	r5, r6
 800079c:	00ad      	lsls	r5, r5, #2
 800079e:	40af      	lsls	r7, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a0:	6362      	str	r2, [r4, #52]	; 0x34
 80007a2:	4a27      	ldr	r2, [pc, #156]	; (8000840 <HAL_GPIO_Init+0x160>)
        temp = SYSCFG->EXTICR[position >> 2U];
 80007a4:	089c      	lsrs	r4, r3, #2
 80007a6:	00a4      	lsls	r4, r4, #2
 80007a8:	18a4      	adds	r4, r4, r2
 80007aa:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80007ac:	43ba      	bics	r2, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80007ae:	27a0      	movs	r7, #160	; 0xa0
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80007b0:	9202      	str	r2, [sp, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80007b2:	05ff      	lsls	r7, r7, #23
 80007b4:	2200      	movs	r2, #0
 80007b6:	42b8      	cmp	r0, r7
 80007b8:	d010      	beq.n	80007dc <HAL_GPIO_Init+0xfc>
 80007ba:	4f22      	ldr	r7, [pc, #136]	; (8000844 <HAL_GPIO_Init+0x164>)
 80007bc:	3201      	adds	r2, #1
 80007be:	42b8      	cmp	r0, r7
 80007c0:	d00c      	beq.n	80007dc <HAL_GPIO_Init+0xfc>
 80007c2:	4f21      	ldr	r7, [pc, #132]	; (8000848 <HAL_GPIO_Init+0x168>)
 80007c4:	3201      	adds	r2, #1
 80007c6:	42b8      	cmp	r0, r7
 80007c8:	d008      	beq.n	80007dc <HAL_GPIO_Init+0xfc>
 80007ca:	4f20      	ldr	r7, [pc, #128]	; (800084c <HAL_GPIO_Init+0x16c>)
 80007cc:	0032      	movs	r2, r6
 80007ce:	42b8      	cmp	r0, r7
 80007d0:	d004      	beq.n	80007dc <HAL_GPIO_Init+0xfc>
 80007d2:	4e1f      	ldr	r6, [pc, #124]	; (8000850 <HAL_GPIO_Init+0x170>)
 80007d4:	3201      	adds	r2, #1
 80007d6:	42b0      	cmp	r0, r6
 80007d8:	d000      	beq.n	80007dc <HAL_GPIO_Init+0xfc>
 80007da:	9a03      	ldr	r2, [sp, #12]
 80007dc:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007de:	4667      	mov	r7, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80007e0:	9d02      	ldr	r5, [sp, #8]
 80007e2:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80007e4:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 80007e6:	4a1b      	ldr	r2, [pc, #108]	; (8000854 <HAL_GPIO_Init+0x174>)
        temp &= ~((uint32_t)iocurrent);
 80007e8:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->IMR;
 80007ea:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 80007ec:	9d00      	ldr	r5, [sp, #0]
        temp &= ~((uint32_t)iocurrent);
 80007ee:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 80007f0:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007f2:	03ff      	lsls	r7, r7, #15
 80007f4:	d401      	bmi.n	80007fa <HAL_GPIO_Init+0x11a>
        temp &= ~((uint32_t)iocurrent);
 80007f6:	0035      	movs	r5, r6
 80007f8:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007fa:	4667      	mov	r7, ip
        EXTI->IMR = temp;
 80007fc:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80007fe:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8000800:	9d00      	ldr	r5, [sp, #0]
 8000802:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000804:	03bf      	lsls	r7, r7, #14
 8000806:	d401      	bmi.n	800080c <HAL_GPIO_Init+0x12c>
        temp &= ~((uint32_t)iocurrent);
 8000808:	0035      	movs	r5, r6
 800080a:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800080c:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 800080e:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000810:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8000812:	9d00      	ldr	r5, [sp, #0]
 8000814:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000816:	02ff      	lsls	r7, r7, #11
 8000818:	d401      	bmi.n	800081e <HAL_GPIO_Init+0x13e>
        temp &= ~((uint32_t)iocurrent);
 800081a:	0035      	movs	r5, r6
 800081c:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800081e:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8000820:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000822:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8000824:	9e00      	ldr	r6, [sp, #0]
 8000826:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000828:	02bf      	lsls	r7, r7, #10
 800082a:	d401      	bmi.n	8000830 <HAL_GPIO_Init+0x150>
        temp &= ~((uint32_t)iocurrent);
 800082c:	4025      	ands	r5, r4
 800082e:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8000830:	60d6      	str	r6, [r2, #12]
    position++;
 8000832:	3301      	adds	r3, #1
 8000834:	e75f      	b.n	80006f6 <HAL_GPIO_Init+0x16>
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	afffe400 	.word	0xafffe400
 800083c:	40021000 	.word	0x40021000
 8000840:	40010000 	.word	0x40010000
 8000844:	50000400 	.word	0x50000400
 8000848:	50000800 	.word	0x50000800
 800084c:	50000c00 	.word	0x50000c00
 8000850:	50001000 	.word	0x50001000
 8000854:	40010400 	.word	0x40010400

08000858 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8000858:	2a00      	cmp	r2, #0
 800085a:	d001      	beq.n	8000860 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 800085c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800085e:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8000860:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000862:	e7fc      	b.n	800085e <HAL_GPIO_WritePin+0x6>

08000864 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8000864:	4770      	bx	lr
	...

08000868 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8000868:	4b04      	ldr	r3, [pc, #16]	; (800087c <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 800086a:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 800086c:	695a      	ldr	r2, [r3, #20]
 800086e:	4210      	tst	r0, r2
 8000870:	d002      	beq.n	8000878 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000872:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000874:	f7ff fff6 	bl	8000864 <HAL_GPIO_EXTI_Callback>
}
 8000878:	bd10      	pop	{r4, pc}
 800087a:	46c0      	nop			; (mov r8, r8)
 800087c:	40010400 	.word	0x40010400

08000880 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000880:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8000882:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8000884:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8000886:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8000888:	400a      	ands	r2, r1
 800088a:	2a08      	cmp	r2, #8
 800088c:	d026      	beq.n	80008dc <HAL_RCC_GetSysClockFreq+0x5c>
 800088e:	2a0c      	cmp	r2, #12
 8000890:	d006      	beq.n	80008a0 <HAL_RCC_GetSysClockFreq+0x20>
 8000892:	2a04      	cmp	r2, #4
 8000894:	d11a      	bne.n	80008cc <HAL_RCC_GetSysClockFreq+0x4c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	06db      	lsls	r3, r3, #27
 800089a:	d421      	bmi.n	80008e0 <HAL_RCC_GetSysClockFreq+0x60>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 800089c:	4812      	ldr	r0, [pc, #72]	; (80008e8 <HAL_RCC_GetSysClockFreq+0x68>)
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 800089e:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80008a0:	028a      	lsls	r2, r1, #10
 80008a2:	4812      	ldr	r0, [pc, #72]	; (80008ec <HAL_RCC_GetSysClockFreq+0x6c>)
 80008a4:	0f12      	lsrs	r2, r2, #28
 80008a6:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80008a8:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80008aa:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80008ac:	0f89      	lsrs	r1, r1, #30
 80008ae:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80008b0:	03c0      	lsls	r0, r0, #15
 80008b2:	d504      	bpl.n	80008be <HAL_RCC_GetSysClockFreq+0x3e>
        pllvco = (HSE_VALUE * pllm) / plld;
 80008b4:	480e      	ldr	r0, [pc, #56]	; (80008f0 <HAL_RCC_GetSysClockFreq+0x70>)
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80008b6:	4350      	muls	r0, r2
 80008b8:	f7ff fc3a 	bl	8000130 <__udivsi3>
 80008bc:	e7ef      	b.n	800089e <HAL_RCC_GetSysClockFreq+0x1e>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	06db      	lsls	r3, r3, #27
 80008c2:	d501      	bpl.n	80008c8 <HAL_RCC_GetSysClockFreq+0x48>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80008c4:	480b      	ldr	r0, [pc, #44]	; (80008f4 <HAL_RCC_GetSysClockFreq+0x74>)
 80008c6:	e7f6      	b.n	80008b6 <HAL_RCC_GetSysClockFreq+0x36>
         pllvco = (HSI_VALUE * pllm) / plld;
 80008c8:	4807      	ldr	r0, [pc, #28]	; (80008e8 <HAL_RCC_GetSysClockFreq+0x68>)
 80008ca:	e7f4      	b.n	80008b6 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80008cc:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80008ce:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80008d0:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80008d2:	041b      	lsls	r3, r3, #16
 80008d4:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80008d6:	3301      	adds	r3, #1
 80008d8:	4098      	lsls	r0, r3
 80008da:	e7e0      	b.n	800089e <HAL_RCC_GetSysClockFreq+0x1e>
      sysclockfreq = HSE_VALUE;
 80008dc:	4804      	ldr	r0, [pc, #16]	; (80008f0 <HAL_RCC_GetSysClockFreq+0x70>)
 80008de:	e7de      	b.n	800089e <HAL_RCC_GetSysClockFreq+0x1e>
        sysclockfreq =  (HSI_VALUE >> 2);
 80008e0:	4804      	ldr	r0, [pc, #16]	; (80008f4 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 80008e2:	e7dc      	b.n	800089e <HAL_RCC_GetSysClockFreq+0x1e>
 80008e4:	40021000 	.word	0x40021000
 80008e8:	00f42400 	.word	0x00f42400
 80008ec:	08002471 	.word	0x08002471
 80008f0:	007a1200 	.word	0x007a1200
 80008f4:	003d0900 	.word	0x003d0900

080008f8 <HAL_RCC_OscConfig>:
{
 80008f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008fa:	0005      	movs	r5, r0
 80008fc:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 80008fe:	2800      	cmp	r0, #0
 8000900:	d102      	bne.n	8000908 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8000902:	2001      	movs	r0, #1
}
 8000904:	b007      	add	sp, #28
 8000906:	bdf0      	pop	{r4, r5, r6, r7, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000908:	230c      	movs	r3, #12
 800090a:	4cc2      	ldr	r4, [pc, #776]	; (8000c14 <HAL_RCC_OscConfig+0x31c>)
 800090c:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800090e:	68e2      	ldr	r2, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000910:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000912:	2380      	movs	r3, #128	; 0x80
 8000914:	025b      	lsls	r3, r3, #9
 8000916:	401a      	ands	r2, r3
 8000918:	9201      	str	r2, [sp, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800091a:	6802      	ldr	r2, [r0, #0]
 800091c:	07d2      	lsls	r2, r2, #31
 800091e:	d441      	bmi.n	80009a4 <HAL_RCC_OscConfig+0xac>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000920:	682b      	ldr	r3, [r5, #0]
 8000922:	079b      	lsls	r3, r3, #30
 8000924:	d500      	bpl.n	8000928 <HAL_RCC_OscConfig+0x30>
 8000926:	e087      	b.n	8000a38 <HAL_RCC_OscConfig+0x140>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000928:	682b      	ldr	r3, [r5, #0]
 800092a:	06db      	lsls	r3, r3, #27
 800092c:	d528      	bpl.n	8000980 <HAL_RCC_OscConfig+0x88>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 800092e:	2e00      	cmp	r6, #0
 8000930:	d000      	beq.n	8000934 <HAL_RCC_OscConfig+0x3c>
 8000932:	e0e1      	b.n	8000af8 <HAL_RCC_OscConfig+0x200>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000934:	6823      	ldr	r3, [r4, #0]
 8000936:	059b      	lsls	r3, r3, #22
 8000938:	d502      	bpl.n	8000940 <HAL_RCC_OscConfig+0x48>
 800093a:	69eb      	ldr	r3, [r5, #28]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d0e0      	beq.n	8000902 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000940:	6862      	ldr	r2, [r4, #4]
 8000942:	49b5      	ldr	r1, [pc, #724]	; (8000c18 <HAL_RCC_OscConfig+0x320>)
 8000944:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000946:	400a      	ands	r2, r1
 8000948:	431a      	orrs	r2, r3
 800094a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800094c:	6861      	ldr	r1, [r4, #4]
 800094e:	6a2a      	ldr	r2, [r5, #32]
 8000950:	0209      	lsls	r1, r1, #8
 8000952:	0a09      	lsrs	r1, r1, #8
 8000954:	0612      	lsls	r2, r2, #24
 8000956:	430a      	orrs	r2, r1
 8000958:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800095a:	2280      	movs	r2, #128	; 0x80
 800095c:	0b5b      	lsrs	r3, r3, #13
 800095e:	3301      	adds	r3, #1
 8000960:	0212      	lsls	r2, r2, #8
 8000962:	409a      	lsls	r2, r3
 8000964:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000966:	68e1      	ldr	r1, [r4, #12]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8000968:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800096a:	060a      	lsls	r2, r1, #24
 800096c:	49ab      	ldr	r1, [pc, #684]	; (8000c1c <HAL_RCC_OscConfig+0x324>)
 800096e:	0f12      	lsrs	r2, r2, #28
 8000970:	5c8a      	ldrb	r2, [r1, r2]
 8000972:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000974:	4aaa      	ldr	r2, [pc, #680]	; (8000c20 <HAL_RCC_OscConfig+0x328>)
 8000976:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8000978:	f7ff fd70 	bl	800045c <HAL_InitTick>
        if(status != HAL_OK)
 800097c:	2800      	cmp	r0, #0
 800097e:	d1c1      	bne.n	8000904 <HAL_RCC_OscConfig+0xc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000980:	682b      	ldr	r3, [r5, #0]
 8000982:	071b      	lsls	r3, r3, #28
 8000984:	d500      	bpl.n	8000988 <HAL_RCC_OscConfig+0x90>
 8000986:	e0ee      	b.n	8000b66 <HAL_RCC_OscConfig+0x26e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000988:	682b      	ldr	r3, [r5, #0]
 800098a:	075b      	lsls	r3, r3, #29
 800098c:	d500      	bpl.n	8000990 <HAL_RCC_OscConfig+0x98>
 800098e:	e110      	b.n	8000bb2 <HAL_RCC_OscConfig+0x2ba>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000990:	682b      	ldr	r3, [r5, #0]
 8000992:	069b      	lsls	r3, r3, #26
 8000994:	d500      	bpl.n	8000998 <HAL_RCC_OscConfig+0xa0>
 8000996:	e195      	b.n	8000cc4 <HAL_RCC_OscConfig+0x3cc>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000998:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800099a:	2b00      	cmp	r3, #0
 800099c:	d000      	beq.n	80009a0 <HAL_RCC_OscConfig+0xa8>
 800099e:	e1c4      	b.n	8000d2a <HAL_RCC_OscConfig+0x432>
  return HAL_OK;
 80009a0:	2000      	movs	r0, #0
 80009a2:	e7af      	b.n	8000904 <HAL_RCC_OscConfig+0xc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80009a4:	2e08      	cmp	r6, #8
 80009a6:	d004      	beq.n	80009b2 <HAL_RCC_OscConfig+0xba>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80009a8:	2e0c      	cmp	r6, #12
 80009aa:	d109      	bne.n	80009c0 <HAL_RCC_OscConfig+0xc8>
 80009ac:	9a01      	ldr	r2, [sp, #4]
 80009ae:	2a00      	cmp	r2, #0
 80009b0:	d006      	beq.n	80009c0 <HAL_RCC_OscConfig+0xc8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009b2:	6823      	ldr	r3, [r4, #0]
 80009b4:	039b      	lsls	r3, r3, #14
 80009b6:	d5b3      	bpl.n	8000920 <HAL_RCC_OscConfig+0x28>
 80009b8:	686b      	ldr	r3, [r5, #4]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d1b0      	bne.n	8000920 <HAL_RCC_OscConfig+0x28>
 80009be:	e7a0      	b.n	8000902 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009c0:	686a      	ldr	r2, [r5, #4]
 80009c2:	429a      	cmp	r2, r3
 80009c4:	d111      	bne.n	80009ea <HAL_RCC_OscConfig+0xf2>
 80009c6:	6822      	ldr	r2, [r4, #0]
 80009c8:	4313      	orrs	r3, r2
 80009ca:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80009cc:	f7ff fd7a 	bl	80004c4 <HAL_GetTick>
 80009d0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80009d2:	2280      	movs	r2, #128	; 0x80
 80009d4:	6823      	ldr	r3, [r4, #0]
 80009d6:	0292      	lsls	r2, r2, #10
 80009d8:	4213      	tst	r3, r2
 80009da:	d1a1      	bne.n	8000920 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009dc:	f7ff fd72 	bl	80004c4 <HAL_GetTick>
 80009e0:	1bc0      	subs	r0, r0, r7
 80009e2:	2864      	cmp	r0, #100	; 0x64
 80009e4:	d9f5      	bls.n	80009d2 <HAL_RCC_OscConfig+0xda>
            return HAL_TIMEOUT;
 80009e6:	2003      	movs	r0, #3
 80009e8:	e78c      	b.n	8000904 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009ea:	21a0      	movs	r1, #160	; 0xa0
 80009ec:	02c9      	lsls	r1, r1, #11
 80009ee:	428a      	cmp	r2, r1
 80009f0:	d105      	bne.n	80009fe <HAL_RCC_OscConfig+0x106>
 80009f2:	2280      	movs	r2, #128	; 0x80
 80009f4:	6821      	ldr	r1, [r4, #0]
 80009f6:	02d2      	lsls	r2, r2, #11
 80009f8:	430a      	orrs	r2, r1
 80009fa:	6022      	str	r2, [r4, #0]
 80009fc:	e7e3      	b.n	80009c6 <HAL_RCC_OscConfig+0xce>
 80009fe:	6821      	ldr	r1, [r4, #0]
 8000a00:	4888      	ldr	r0, [pc, #544]	; (8000c24 <HAL_RCC_OscConfig+0x32c>)
 8000a02:	4001      	ands	r1, r0
 8000a04:	6021      	str	r1, [r4, #0]
 8000a06:	6821      	ldr	r1, [r4, #0]
 8000a08:	400b      	ands	r3, r1
 8000a0a:	9305      	str	r3, [sp, #20]
 8000a0c:	9b05      	ldr	r3, [sp, #20]
 8000a0e:	4986      	ldr	r1, [pc, #536]	; (8000c28 <HAL_RCC_OscConfig+0x330>)
 8000a10:	6823      	ldr	r3, [r4, #0]
 8000a12:	400b      	ands	r3, r1
 8000a14:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a16:	2a00      	cmp	r2, #0
 8000a18:	d1d8      	bne.n	80009cc <HAL_RCC_OscConfig+0xd4>
        tickstart = HAL_GetTick();
 8000a1a:	f7ff fd53 	bl	80004c4 <HAL_GetTick>
 8000a1e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000a20:	2280      	movs	r2, #128	; 0x80
 8000a22:	6823      	ldr	r3, [r4, #0]
 8000a24:	0292      	lsls	r2, r2, #10
 8000a26:	4213      	tst	r3, r2
 8000a28:	d100      	bne.n	8000a2c <HAL_RCC_OscConfig+0x134>
 8000a2a:	e779      	b.n	8000920 <HAL_RCC_OscConfig+0x28>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a2c:	f7ff fd4a 	bl	80004c4 <HAL_GetTick>
 8000a30:	1bc0      	subs	r0, r0, r7
 8000a32:	2864      	cmp	r0, #100	; 0x64
 8000a34:	d9f4      	bls.n	8000a20 <HAL_RCC_OscConfig+0x128>
 8000a36:	e7d6      	b.n	80009e6 <HAL_RCC_OscConfig+0xee>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8000a38:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 8000a3a:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8000a3c:	4213      	tst	r3, r2
 8000a3e:	d003      	beq.n	8000a48 <HAL_RCC_OscConfig+0x150>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8000a40:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8000a42:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8000a44:	4311      	orrs	r1, r2
 8000a46:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000a48:	2e04      	cmp	r6, #4
 8000a4a:	d004      	beq.n	8000a56 <HAL_RCC_OscConfig+0x15e>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000a4c:	2e0c      	cmp	r6, #12
 8000a4e:	d125      	bne.n	8000a9c <HAL_RCC_OscConfig+0x1a4>
 8000a50:	9a01      	ldr	r2, [sp, #4]
 8000a52:	2a00      	cmp	r2, #0
 8000a54:	d122      	bne.n	8000a9c <HAL_RCC_OscConfig+0x1a4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000a56:	6822      	ldr	r2, [r4, #0]
 8000a58:	0752      	lsls	r2, r2, #29
 8000a5a:	d502      	bpl.n	8000a62 <HAL_RCC_OscConfig+0x16a>
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d100      	bne.n	8000a62 <HAL_RCC_OscConfig+0x16a>
 8000a60:	e74f      	b.n	8000902 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a62:	6861      	ldr	r1, [r4, #4]
 8000a64:	692a      	ldr	r2, [r5, #16]
 8000a66:	4871      	ldr	r0, [pc, #452]	; (8000c2c <HAL_RCC_OscConfig+0x334>)
 8000a68:	0212      	lsls	r2, r2, #8
 8000a6a:	4001      	ands	r1, r0
 8000a6c:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000a6e:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a70:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000a72:	6822      	ldr	r2, [r4, #0]
 8000a74:	438a      	bics	r2, r1
 8000a76:	4313      	orrs	r3, r2
 8000a78:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000a7a:	f7ff ff01 	bl	8000880 <HAL_RCC_GetSysClockFreq>
 8000a7e:	68e3      	ldr	r3, [r4, #12]
 8000a80:	4a66      	ldr	r2, [pc, #408]	; (8000c1c <HAL_RCC_OscConfig+0x324>)
 8000a82:	061b      	lsls	r3, r3, #24
 8000a84:	0f1b      	lsrs	r3, r3, #28
 8000a86:	5cd3      	ldrb	r3, [r2, r3]
 8000a88:	40d8      	lsrs	r0, r3
 8000a8a:	4b65      	ldr	r3, [pc, #404]	; (8000c20 <HAL_RCC_OscConfig+0x328>)
 8000a8c:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f7ff fce4 	bl	800045c <HAL_InitTick>
      if(status != HAL_OK)
 8000a94:	2800      	cmp	r0, #0
 8000a96:	d100      	bne.n	8000a9a <HAL_RCC_OscConfig+0x1a2>
 8000a98:	e746      	b.n	8000928 <HAL_RCC_OscConfig+0x30>
 8000a9a:	e733      	b.n	8000904 <HAL_RCC_OscConfig+0xc>
      if(hsi_state != RCC_HSI_OFF)
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d019      	beq.n	8000ad4 <HAL_RCC_OscConfig+0x1dc>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000aa0:	2109      	movs	r1, #9
 8000aa2:	6822      	ldr	r2, [r4, #0]
 8000aa4:	438a      	bics	r2, r1
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000aaa:	f7ff fd0b 	bl	80004c4 <HAL_GetTick>
 8000aae:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000ab0:	2204      	movs	r2, #4
 8000ab2:	6823      	ldr	r3, [r4, #0]
 8000ab4:	4213      	tst	r3, r2
 8000ab6:	d007      	beq.n	8000ac8 <HAL_RCC_OscConfig+0x1d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ab8:	6862      	ldr	r2, [r4, #4]
 8000aba:	692b      	ldr	r3, [r5, #16]
 8000abc:	495b      	ldr	r1, [pc, #364]	; (8000c2c <HAL_RCC_OscConfig+0x334>)
 8000abe:	021b      	lsls	r3, r3, #8
 8000ac0:	400a      	ands	r2, r1
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	6063      	str	r3, [r4, #4]
 8000ac6:	e72f      	b.n	8000928 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ac8:	f7ff fcfc 	bl	80004c4 <HAL_GetTick>
 8000acc:	1bc0      	subs	r0, r0, r7
 8000ace:	2802      	cmp	r0, #2
 8000ad0:	d9ee      	bls.n	8000ab0 <HAL_RCC_OscConfig+0x1b8>
 8000ad2:	e788      	b.n	80009e6 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_DISABLE();
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	6823      	ldr	r3, [r4, #0]
 8000ad8:	4393      	bics	r3, r2
 8000ada:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000adc:	f7ff fcf2 	bl	80004c4 <HAL_GetTick>
 8000ae0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000ae2:	2204      	movs	r2, #4
 8000ae4:	6823      	ldr	r3, [r4, #0]
 8000ae6:	4213      	tst	r3, r2
 8000ae8:	d100      	bne.n	8000aec <HAL_RCC_OscConfig+0x1f4>
 8000aea:	e71d      	b.n	8000928 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000aec:	f7ff fcea 	bl	80004c4 <HAL_GetTick>
 8000af0:	1bc0      	subs	r0, r0, r7
 8000af2:	2802      	cmp	r0, #2
 8000af4:	d9f5      	bls.n	8000ae2 <HAL_RCC_OscConfig+0x1ea>
 8000af6:	e776      	b.n	80009e6 <HAL_RCC_OscConfig+0xee>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000af8:	69eb      	ldr	r3, [r5, #28]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d020      	beq.n	8000b40 <HAL_RCC_OscConfig+0x248>
        __HAL_RCC_MSI_ENABLE();
 8000afe:	2380      	movs	r3, #128	; 0x80
 8000b00:	6822      	ldr	r2, [r4, #0]
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	4313      	orrs	r3, r2
 8000b06:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b08:	f7ff fcdc 	bl	80004c4 <HAL_GetTick>
 8000b0c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000b0e:	2280      	movs	r2, #128	; 0x80
 8000b10:	6823      	ldr	r3, [r4, #0]
 8000b12:	0092      	lsls	r2, r2, #2
 8000b14:	4213      	tst	r3, r2
 8000b16:	d00d      	beq.n	8000b34 <HAL_RCC_OscConfig+0x23c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000b18:	6863      	ldr	r3, [r4, #4]
 8000b1a:	4a3f      	ldr	r2, [pc, #252]	; (8000c18 <HAL_RCC_OscConfig+0x320>)
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000b20:	4313      	orrs	r3, r2
 8000b22:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000b24:	6862      	ldr	r2, [r4, #4]
 8000b26:	6a2b      	ldr	r3, [r5, #32]
 8000b28:	0212      	lsls	r2, r2, #8
 8000b2a:	061b      	lsls	r3, r3, #24
 8000b2c:	0a12      	lsrs	r2, r2, #8
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	6063      	str	r3, [r4, #4]
 8000b32:	e725      	b.n	8000980 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000b34:	f7ff fcc6 	bl	80004c4 <HAL_GetTick>
 8000b38:	1bc0      	subs	r0, r0, r7
 8000b3a:	2802      	cmp	r0, #2
 8000b3c:	d9e7      	bls.n	8000b0e <HAL_RCC_OscConfig+0x216>
 8000b3e:	e752      	b.n	80009e6 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_MSI_DISABLE();
 8000b40:	6823      	ldr	r3, [r4, #0]
 8000b42:	4a3b      	ldr	r2, [pc, #236]	; (8000c30 <HAL_RCC_OscConfig+0x338>)
 8000b44:	4013      	ands	r3, r2
 8000b46:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b48:	f7ff fcbc 	bl	80004c4 <HAL_GetTick>
 8000b4c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000b4e:	2280      	movs	r2, #128	; 0x80
 8000b50:	6823      	ldr	r3, [r4, #0]
 8000b52:	0092      	lsls	r2, r2, #2
 8000b54:	4213      	tst	r3, r2
 8000b56:	d100      	bne.n	8000b5a <HAL_RCC_OscConfig+0x262>
 8000b58:	e712      	b.n	8000980 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000b5a:	f7ff fcb3 	bl	80004c4 <HAL_GetTick>
 8000b5e:	1bc0      	subs	r0, r0, r7
 8000b60:	2802      	cmp	r0, #2
 8000b62:	d9f4      	bls.n	8000b4e <HAL_RCC_OscConfig+0x256>
 8000b64:	e73f      	b.n	80009e6 <HAL_RCC_OscConfig+0xee>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000b66:	696a      	ldr	r2, [r5, #20]
 8000b68:	2301      	movs	r3, #1
 8000b6a:	2a00      	cmp	r2, #0
 8000b6c:	d010      	beq.n	8000b90 <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 8000b6e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000b70:	4313      	orrs	r3, r2
 8000b72:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000b74:	f7ff fca6 	bl	80004c4 <HAL_GetTick>
 8000b78:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000b7a:	2202      	movs	r2, #2
 8000b7c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000b7e:	4213      	tst	r3, r2
 8000b80:	d000      	beq.n	8000b84 <HAL_RCC_OscConfig+0x28c>
 8000b82:	e701      	b.n	8000988 <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b84:	f7ff fc9e 	bl	80004c4 <HAL_GetTick>
 8000b88:	1bc0      	subs	r0, r0, r7
 8000b8a:	2802      	cmp	r0, #2
 8000b8c:	d9f5      	bls.n	8000b7a <HAL_RCC_OscConfig+0x282>
 8000b8e:	e72a      	b.n	80009e6 <HAL_RCC_OscConfig+0xee>
      __HAL_RCC_LSI_DISABLE();
 8000b90:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000b92:	439a      	bics	r2, r3
 8000b94:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000b96:	f7ff fc95 	bl	80004c4 <HAL_GetTick>
 8000b9a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000b9c:	2202      	movs	r2, #2
 8000b9e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000ba0:	4213      	tst	r3, r2
 8000ba2:	d100      	bne.n	8000ba6 <HAL_RCC_OscConfig+0x2ae>
 8000ba4:	e6f0      	b.n	8000988 <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ba6:	f7ff fc8d 	bl	80004c4 <HAL_GetTick>
 8000baa:	1bc0      	subs	r0, r0, r7
 8000bac:	2802      	cmp	r0, #2
 8000bae:	d9f5      	bls.n	8000b9c <HAL_RCC_OscConfig+0x2a4>
 8000bb0:	e719      	b.n	80009e6 <HAL_RCC_OscConfig+0xee>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000bb2:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000bb4:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000bb6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000bb8:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8000bba:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000bbc:	421a      	tst	r2, r3
 8000bbe:	d104      	bne.n	8000bca <HAL_RCC_OscConfig+0x2d2>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000bc0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bca:	2280      	movs	r2, #128	; 0x80
 8000bcc:	4f19      	ldr	r7, [pc, #100]	; (8000c34 <HAL_RCC_OscConfig+0x33c>)
 8000bce:	0052      	lsls	r2, r2, #1
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	4213      	tst	r3, r2
 8000bd4:	d008      	beq.n	8000be8 <HAL_RCC_OscConfig+0x2f0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bd6:	2280      	movs	r2, #128	; 0x80
 8000bd8:	68ab      	ldr	r3, [r5, #8]
 8000bda:	0052      	lsls	r2, r2, #1
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d12b      	bne.n	8000c38 <HAL_RCC_OscConfig+0x340>
 8000be0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000be2:	4313      	orrs	r3, r2
 8000be4:	6523      	str	r3, [r4, #80]	; 0x50
 8000be6:	e04c      	b.n	8000c82 <HAL_RCC_OscConfig+0x38a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000be8:	2280      	movs	r2, #128	; 0x80
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	0052      	lsls	r2, r2, #1
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000bf2:	f7ff fc67 	bl	80004c4 <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bf6:	2380      	movs	r3, #128	; 0x80
 8000bf8:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 8000bfa:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bfc:	9303      	str	r3, [sp, #12]
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	9a03      	ldr	r2, [sp, #12]
 8000c02:	4213      	tst	r3, r2
 8000c04:	d1e7      	bne.n	8000bd6 <HAL_RCC_OscConfig+0x2de>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c06:	f7ff fc5d 	bl	80004c4 <HAL_GetTick>
 8000c0a:	9b02      	ldr	r3, [sp, #8]
 8000c0c:	1ac0      	subs	r0, r0, r3
 8000c0e:	2864      	cmp	r0, #100	; 0x64
 8000c10:	d9f5      	bls.n	8000bfe <HAL_RCC_OscConfig+0x306>
 8000c12:	e6e8      	b.n	80009e6 <HAL_RCC_OscConfig+0xee>
 8000c14:	40021000 	.word	0x40021000
 8000c18:	ffff1fff 	.word	0xffff1fff
 8000c1c:	08002459 	.word	0x08002459
 8000c20:	20000000 	.word	0x20000000
 8000c24:	fffeffff 	.word	0xfffeffff
 8000c28:	fffbffff 	.word	0xfffbffff
 8000c2c:	ffffe0ff 	.word	0xffffe0ff
 8000c30:	fffffeff 	.word	0xfffffeff
 8000c34:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d116      	bne.n	8000c6a <HAL_RCC_OscConfig+0x372>
 8000c3c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000c3e:	4a6a      	ldr	r2, [pc, #424]	; (8000de8 <HAL_RCC_OscConfig+0x4f0>)
 8000c40:	4013      	ands	r3, r2
 8000c42:	6523      	str	r3, [r4, #80]	; 0x50
 8000c44:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000c46:	4a69      	ldr	r2, [pc, #420]	; (8000dec <HAL_RCC_OscConfig+0x4f4>)
 8000c48:	4013      	ands	r3, r2
 8000c4a:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000c4c:	f7ff fc3a 	bl	80004c4 <HAL_GetTick>
 8000c50:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000c52:	2280      	movs	r2, #128	; 0x80
 8000c54:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000c56:	0092      	lsls	r2, r2, #2
 8000c58:	4213      	tst	r3, r2
 8000c5a:	d02a      	beq.n	8000cb2 <HAL_RCC_OscConfig+0x3ba>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c5c:	f7ff fc32 	bl	80004c4 <HAL_GetTick>
 8000c60:	4b63      	ldr	r3, [pc, #396]	; (8000df0 <HAL_RCC_OscConfig+0x4f8>)
 8000c62:	1bc0      	subs	r0, r0, r7
 8000c64:	4298      	cmp	r0, r3
 8000c66:	d9f4      	bls.n	8000c52 <HAL_RCC_OscConfig+0x35a>
 8000c68:	e6bd      	b.n	80009e6 <HAL_RCC_OscConfig+0xee>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c6a:	21a0      	movs	r1, #160	; 0xa0
 8000c6c:	00c9      	lsls	r1, r1, #3
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d10b      	bne.n	8000c8a <HAL_RCC_OscConfig+0x392>
 8000c72:	2380      	movs	r3, #128	; 0x80
 8000c74:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8000c76:	00db      	lsls	r3, r3, #3
 8000c78:	430b      	orrs	r3, r1
 8000c7a:	6523      	str	r3, [r4, #80]	; 0x50
 8000c7c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000c7e:	431a      	orrs	r2, r3
 8000c80:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000c82:	f7ff fc1f 	bl	80004c4 <HAL_GetTick>
 8000c86:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000c88:	e00e      	b.n	8000ca8 <HAL_RCC_OscConfig+0x3b0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c8a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000c8c:	4a56      	ldr	r2, [pc, #344]	; (8000de8 <HAL_RCC_OscConfig+0x4f0>)
 8000c8e:	4013      	ands	r3, r2
 8000c90:	6523      	str	r3, [r4, #80]	; 0x50
 8000c92:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000c94:	4a55      	ldr	r2, [pc, #340]	; (8000dec <HAL_RCC_OscConfig+0x4f4>)
 8000c96:	4013      	ands	r3, r2
 8000c98:	e7a4      	b.n	8000be4 <HAL_RCC_OscConfig+0x2ec>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c9a:	f7ff fc13 	bl	80004c4 <HAL_GetTick>
 8000c9e:	4b54      	ldr	r3, [pc, #336]	; (8000df0 <HAL_RCC_OscConfig+0x4f8>)
 8000ca0:	1bc0      	subs	r0, r0, r7
 8000ca2:	4298      	cmp	r0, r3
 8000ca4:	d900      	bls.n	8000ca8 <HAL_RCC_OscConfig+0x3b0>
 8000ca6:	e69e      	b.n	80009e6 <HAL_RCC_OscConfig+0xee>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000ca8:	2280      	movs	r2, #128	; 0x80
 8000caa:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000cac:	0092      	lsls	r2, r2, #2
 8000cae:	4213      	tst	r3, r2
 8000cb0:	d0f3      	beq.n	8000c9a <HAL_RCC_OscConfig+0x3a2>
    if(pwrclkchanged == SET)
 8000cb2:	9b01      	ldr	r3, [sp, #4]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d000      	beq.n	8000cba <HAL_RCC_OscConfig+0x3c2>
 8000cb8:	e66a      	b.n	8000990 <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000cba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000cbc:	4a4d      	ldr	r2, [pc, #308]	; (8000df4 <HAL_RCC_OscConfig+0x4fc>)
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	63a3      	str	r3, [r4, #56]	; 0x38
 8000cc2:	e665      	b.n	8000990 <HAL_RCC_OscConfig+0x98>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000cc4:	69a9      	ldr	r1, [r5, #24]
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	4a4b      	ldr	r2, [pc, #300]	; (8000df8 <HAL_RCC_OscConfig+0x500>)
 8000cca:	2900      	cmp	r1, #0
 8000ccc:	d018      	beq.n	8000d00 <HAL_RCC_OscConfig+0x408>
        __HAL_RCC_HSI48_ENABLE();
 8000cce:	68a1      	ldr	r1, [r4, #8]
 8000cd0:	4319      	orrs	r1, r3
 8000cd2:	60a1      	str	r1, [r4, #8]
 8000cd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000cd6:	430b      	orrs	r3, r1
 8000cd8:	6363      	str	r3, [r4, #52]	; 0x34
 8000cda:	2380      	movs	r3, #128	; 0x80
 8000cdc:	6a11      	ldr	r1, [r2, #32]
 8000cde:	019b      	lsls	r3, r3, #6
 8000ce0:	430b      	orrs	r3, r1
 8000ce2:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8000ce4:	f7ff fbee 	bl	80004c4 <HAL_GetTick>
 8000ce8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8000cea:	2202      	movs	r2, #2
 8000cec:	68a3      	ldr	r3, [r4, #8]
 8000cee:	4213      	tst	r3, r2
 8000cf0:	d000      	beq.n	8000cf4 <HAL_RCC_OscConfig+0x3fc>
 8000cf2:	e651      	b.n	8000998 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000cf4:	f7ff fbe6 	bl	80004c4 <HAL_GetTick>
 8000cf8:	1bc0      	subs	r0, r0, r7
 8000cfa:	2802      	cmp	r0, #2
 8000cfc:	d9f5      	bls.n	8000cea <HAL_RCC_OscConfig+0x3f2>
 8000cfe:	e672      	b.n	80009e6 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI48_DISABLE();
 8000d00:	68a1      	ldr	r1, [r4, #8]
 8000d02:	4399      	bics	r1, r3
 8000d04:	60a1      	str	r1, [r4, #8]
 8000d06:	6a13      	ldr	r3, [r2, #32]
 8000d08:	493c      	ldr	r1, [pc, #240]	; (8000dfc <HAL_RCC_OscConfig+0x504>)
 8000d0a:	400b      	ands	r3, r1
 8000d0c:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8000d0e:	f7ff fbd9 	bl	80004c4 <HAL_GetTick>
 8000d12:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000d14:	2202      	movs	r2, #2
 8000d16:	68a3      	ldr	r3, [r4, #8]
 8000d18:	4213      	tst	r3, r2
 8000d1a:	d100      	bne.n	8000d1e <HAL_RCC_OscConfig+0x426>
 8000d1c:	e63c      	b.n	8000998 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000d1e:	f7ff fbd1 	bl	80004c4 <HAL_GetTick>
 8000d22:	1bc0      	subs	r0, r0, r7
 8000d24:	2802      	cmp	r0, #2
 8000d26:	d9f5      	bls.n	8000d14 <HAL_RCC_OscConfig+0x41c>
 8000d28:	e65d      	b.n	80009e6 <HAL_RCC_OscConfig+0xee>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d2a:	2e0c      	cmp	r6, #12
 8000d2c:	d043      	beq.n	8000db6 <HAL_RCC_OscConfig+0x4be>
 8000d2e:	4a34      	ldr	r2, [pc, #208]	; (8000e00 <HAL_RCC_OscConfig+0x508>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d12e      	bne.n	8000d92 <HAL_RCC_OscConfig+0x49a>
        __HAL_RCC_PLL_DISABLE();
 8000d34:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000d36:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8000d38:	4013      	ands	r3, r2
 8000d3a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d3c:	f7ff fbc2 	bl	80004c4 <HAL_GetTick>
 8000d40:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000d42:	04b6      	lsls	r6, r6, #18
 8000d44:	6823      	ldr	r3, [r4, #0]
 8000d46:	4233      	tst	r3, r6
 8000d48:	d11d      	bne.n	8000d86 <HAL_RCC_OscConfig+0x48e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d4a:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8000d4c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000d4e:	68e2      	ldr	r2, [r4, #12]
 8000d50:	430b      	orrs	r3, r1
 8000d52:	492c      	ldr	r1, [pc, #176]	; (8000e04 <HAL_RCC_OscConfig+0x50c>)
 8000d54:	400a      	ands	r2, r1
 8000d56:	4313      	orrs	r3, r2
 8000d58:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8000d5a:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8000d60:	2380      	movs	r3, #128	; 0x80
 8000d62:	6822      	ldr	r2, [r4, #0]
 8000d64:	045b      	lsls	r3, r3, #17
 8000d66:	4313      	orrs	r3, r2
 8000d68:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d6a:	f7ff fbab 	bl	80004c4 <HAL_GetTick>
 8000d6e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8000d70:	04ad      	lsls	r5, r5, #18
 8000d72:	6823      	ldr	r3, [r4, #0]
 8000d74:	422b      	tst	r3, r5
 8000d76:	d000      	beq.n	8000d7a <HAL_RCC_OscConfig+0x482>
 8000d78:	e612      	b.n	80009a0 <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d7a:	f7ff fba3 	bl	80004c4 <HAL_GetTick>
 8000d7e:	1b80      	subs	r0, r0, r6
 8000d80:	2802      	cmp	r0, #2
 8000d82:	d9f6      	bls.n	8000d72 <HAL_RCC_OscConfig+0x47a>
 8000d84:	e62f      	b.n	80009e6 <HAL_RCC_OscConfig+0xee>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d86:	f7ff fb9d 	bl	80004c4 <HAL_GetTick>
 8000d8a:	1bc0      	subs	r0, r0, r7
 8000d8c:	2802      	cmp	r0, #2
 8000d8e:	d9d9      	bls.n	8000d44 <HAL_RCC_OscConfig+0x44c>
 8000d90:	e629      	b.n	80009e6 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_PLL_DISABLE();
 8000d92:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000d94:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8000d96:	4013      	ands	r3, r2
 8000d98:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d9a:	f7ff fb93 	bl	80004c4 <HAL_GetTick>
 8000d9e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000da0:	04ad      	lsls	r5, r5, #18
 8000da2:	6823      	ldr	r3, [r4, #0]
 8000da4:	422b      	tst	r3, r5
 8000da6:	d100      	bne.n	8000daa <HAL_RCC_OscConfig+0x4b2>
 8000da8:	e5fa      	b.n	80009a0 <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000daa:	f7ff fb8b 	bl	80004c4 <HAL_GetTick>
 8000dae:	1b80      	subs	r0, r0, r6
 8000db0:	2802      	cmp	r0, #2
 8000db2:	d9f6      	bls.n	8000da2 <HAL_RCC_OscConfig+0x4aa>
 8000db4:	e617      	b.n	80009e6 <HAL_RCC_OscConfig+0xee>
      if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000db6:	2280      	movs	r2, #128	; 0x80
      pll_config = RCC->CFGR;
 8000db8:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000dba:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8000dbc:	0252      	lsls	r2, r2, #9
 8000dbe:	401a      	ands	r2, r3
        return HAL_ERROR;
 8000dc0:	2001      	movs	r0, #1
      if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000dc2:	428a      	cmp	r2, r1
 8000dc4:	d000      	beq.n	8000dc8 <HAL_RCC_OscConfig+0x4d0>
 8000dc6:	e59d      	b.n	8000904 <HAL_RCC_OscConfig+0xc>
         (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000dc8:	22f0      	movs	r2, #240	; 0xf0
      if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000dca:	6b29      	ldr	r1, [r5, #48]	; 0x30
         (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000dcc:	0392      	lsls	r2, r2, #14
 8000dce:	401a      	ands	r2, r3
      if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000dd0:	428a      	cmp	r2, r1
 8000dd2:	d000      	beq.n	8000dd6 <HAL_RCC_OscConfig+0x4de>
 8000dd4:	e596      	b.n	8000904 <HAL_RCC_OscConfig+0xc>
         (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8000dd6:	20c0      	movs	r0, #192	; 0xc0
 8000dd8:	0400      	lsls	r0, r0, #16
 8000dda:	4003      	ands	r3, r0
         (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000ddc:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8000dde:	1a18      	subs	r0, r3, r0
 8000de0:	1e43      	subs	r3, r0, #1
 8000de2:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8000de4:	b2c0      	uxtb	r0, r0
 8000de6:	e58d      	b.n	8000904 <HAL_RCC_OscConfig+0xc>
 8000de8:	fffffeff 	.word	0xfffffeff
 8000dec:	fffffbff 	.word	0xfffffbff
 8000df0:	00001388 	.word	0x00001388
 8000df4:	efffffff 	.word	0xefffffff
 8000df8:	40010000 	.word	0x40010000
 8000dfc:	ffffdfff 	.word	0xffffdfff
 8000e00:	feffffff 	.word	0xfeffffff
 8000e04:	ff02ffff 	.word	0xff02ffff

08000e08 <HAL_RCC_ClockConfig>:
{
 8000e08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000e0a:	1e06      	subs	r6, r0, #0
 8000e0c:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8000e0e:	d101      	bne.n	8000e14 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8000e10:	2001      	movs	r0, #1
}
 8000e12:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000e14:	2201      	movs	r2, #1
 8000e16:	4c51      	ldr	r4, [pc, #324]	; (8000f5c <HAL_RCC_ClockConfig+0x154>)
 8000e18:	9901      	ldr	r1, [sp, #4]
 8000e1a:	6823      	ldr	r3, [r4, #0]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d327      	bcc.n	8000e72 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e22:	6832      	ldr	r2, [r6, #0]
 8000e24:	0793      	lsls	r3, r2, #30
 8000e26:	d42f      	bmi.n	8000e88 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e28:	07d3      	lsls	r3, r2, #31
 8000e2a:	d435      	bmi.n	8000e98 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	6822      	ldr	r2, [r4, #0]
 8000e30:	9901      	ldr	r1, [sp, #4]
 8000e32:	401a      	ands	r2, r3
 8000e34:	4291      	cmp	r1, r2
 8000e36:	d200      	bcs.n	8000e3a <HAL_RCC_ClockConfig+0x32>
 8000e38:	e081      	b.n	8000f3e <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e3a:	6832      	ldr	r2, [r6, #0]
 8000e3c:	4c48      	ldr	r4, [pc, #288]	; (8000f60 <HAL_RCC_ClockConfig+0x158>)
 8000e3e:	0753      	lsls	r3, r2, #29
 8000e40:	d500      	bpl.n	8000e44 <HAL_RCC_ClockConfig+0x3c>
 8000e42:	e084      	b.n	8000f4e <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e44:	0713      	lsls	r3, r2, #28
 8000e46:	d506      	bpl.n	8000e56 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000e48:	68e2      	ldr	r2, [r4, #12]
 8000e4a:	6933      	ldr	r3, [r6, #16]
 8000e4c:	4945      	ldr	r1, [pc, #276]	; (8000f64 <HAL_RCC_ClockConfig+0x15c>)
 8000e4e:	00db      	lsls	r3, r3, #3
 8000e50:	400a      	ands	r2, r1
 8000e52:	4313      	orrs	r3, r2
 8000e54:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000e56:	f7ff fd13 	bl	8000880 <HAL_RCC_GetSysClockFreq>
 8000e5a:	68e3      	ldr	r3, [r4, #12]
 8000e5c:	4a42      	ldr	r2, [pc, #264]	; (8000f68 <HAL_RCC_ClockConfig+0x160>)
 8000e5e:	061b      	lsls	r3, r3, #24
 8000e60:	0f1b      	lsrs	r3, r3, #28
 8000e62:	5cd3      	ldrb	r3, [r2, r3]
 8000e64:	40d8      	lsrs	r0, r3
 8000e66:	4b41      	ldr	r3, [pc, #260]	; (8000f6c <HAL_RCC_ClockConfig+0x164>)
 8000e68:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f7ff faf6 	bl	800045c <HAL_InitTick>
 8000e70:	e7cf      	b.n	8000e12 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e72:	6823      	ldr	r3, [r4, #0]
 8000e74:	9901      	ldr	r1, [sp, #4]
 8000e76:	4393      	bics	r3, r2
 8000e78:	430b      	orrs	r3, r1
 8000e7a:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e7c:	6823      	ldr	r3, [r4, #0]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	9a01      	ldr	r2, [sp, #4]
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d1c4      	bne.n	8000e10 <HAL_RCC_ClockConfig+0x8>
 8000e86:	e7cc      	b.n	8000e22 <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e88:	20f0      	movs	r0, #240	; 0xf0
 8000e8a:	4935      	ldr	r1, [pc, #212]	; (8000f60 <HAL_RCC_ClockConfig+0x158>)
 8000e8c:	68cb      	ldr	r3, [r1, #12]
 8000e8e:	4383      	bics	r3, r0
 8000e90:	68b0      	ldr	r0, [r6, #8]
 8000e92:	4303      	orrs	r3, r0
 8000e94:	60cb      	str	r3, [r1, #12]
 8000e96:	e7c7      	b.n	8000e28 <HAL_RCC_ClockConfig+0x20>
 8000e98:	4d31      	ldr	r5, [pc, #196]	; (8000f60 <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e9a:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000e9c:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e9e:	2a02      	cmp	r2, #2
 8000ea0:	d119      	bne.n	8000ed6 <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000ea2:	039b      	lsls	r3, r3, #14
 8000ea4:	d5b4      	bpl.n	8000e10 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ea6:	2103      	movs	r1, #3
 8000ea8:	68eb      	ldr	r3, [r5, #12]
 8000eaa:	438b      	bics	r3, r1
 8000eac:	4313      	orrs	r3, r2
 8000eae:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8000eb0:	f7ff fb08 	bl	80004c4 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000eb4:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000eb6:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d119      	bne.n	8000ef0 <HAL_RCC_ClockConfig+0xe8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ebc:	220c      	movs	r2, #12
 8000ebe:	68eb      	ldr	r3, [r5, #12]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	2b08      	cmp	r3, #8
 8000ec4:	d0b2      	beq.n	8000e2c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ec6:	f7ff fafd 	bl	80004c4 <HAL_GetTick>
 8000eca:	4b29      	ldr	r3, [pc, #164]	; (8000f70 <HAL_RCC_ClockConfig+0x168>)
 8000ecc:	1bc0      	subs	r0, r0, r7
 8000ece:	4298      	cmp	r0, r3
 8000ed0:	d9f4      	bls.n	8000ebc <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 8000ed2:	2003      	movs	r0, #3
 8000ed4:	e79d      	b.n	8000e12 <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ed6:	2a03      	cmp	r2, #3
 8000ed8:	d102      	bne.n	8000ee0 <HAL_RCC_ClockConfig+0xd8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000eda:	019b      	lsls	r3, r3, #6
 8000edc:	d4e3      	bmi.n	8000ea6 <HAL_RCC_ClockConfig+0x9e>
 8000ede:	e797      	b.n	8000e10 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000ee0:	2a01      	cmp	r2, #1
 8000ee2:	d102      	bne.n	8000eea <HAL_RCC_ClockConfig+0xe2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000ee4:	075b      	lsls	r3, r3, #29
 8000ee6:	d4de      	bmi.n	8000ea6 <HAL_RCC_ClockConfig+0x9e>
 8000ee8:	e792      	b.n	8000e10 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000eea:	059b      	lsls	r3, r3, #22
 8000eec:	d4db      	bmi.n	8000ea6 <HAL_RCC_ClockConfig+0x9e>
 8000eee:	e78f      	b.n	8000e10 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ef0:	2b03      	cmp	r3, #3
 8000ef2:	d10b      	bne.n	8000f0c <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ef4:	220c      	movs	r2, #12
 8000ef6:	68eb      	ldr	r3, [r5, #12]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d096      	beq.n	8000e2c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000efe:	f7ff fae1 	bl	80004c4 <HAL_GetTick>
 8000f02:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <HAL_RCC_ClockConfig+0x168>)
 8000f04:	1bc0      	subs	r0, r0, r7
 8000f06:	4298      	cmp	r0, r3
 8000f08:	d9f4      	bls.n	8000ef4 <HAL_RCC_ClockConfig+0xec>
 8000f0a:	e7e2      	b.n	8000ed2 <HAL_RCC_ClockConfig+0xca>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d010      	beq.n	8000f32 <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8000f10:	220c      	movs	r2, #12
 8000f12:	68eb      	ldr	r3, [r5, #12]
 8000f14:	4213      	tst	r3, r2
 8000f16:	d089      	beq.n	8000e2c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f18:	f7ff fad4 	bl	80004c4 <HAL_GetTick>
 8000f1c:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <HAL_RCC_ClockConfig+0x168>)
 8000f1e:	1bc0      	subs	r0, r0, r7
 8000f20:	4298      	cmp	r0, r3
 8000f22:	d9f5      	bls.n	8000f10 <HAL_RCC_ClockConfig+0x108>
 8000f24:	e7d5      	b.n	8000ed2 <HAL_RCC_ClockConfig+0xca>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f26:	f7ff facd 	bl	80004c4 <HAL_GetTick>
 8000f2a:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <HAL_RCC_ClockConfig+0x168>)
 8000f2c:	1bc0      	subs	r0, r0, r7
 8000f2e:	4298      	cmp	r0, r3
 8000f30:	d8cf      	bhi.n	8000ed2 <HAL_RCC_ClockConfig+0xca>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f32:	220c      	movs	r2, #12
 8000f34:	68eb      	ldr	r3, [r5, #12]
 8000f36:	4013      	ands	r3, r2
 8000f38:	2b04      	cmp	r3, #4
 8000f3a:	d1f4      	bne.n	8000f26 <HAL_RCC_ClockConfig+0x11e>
 8000f3c:	e776      	b.n	8000e2c <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f3e:	6822      	ldr	r2, [r4, #0]
 8000f40:	439a      	bics	r2, r3
 8000f42:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f44:	6822      	ldr	r2, [r4, #0]
 8000f46:	421a      	tst	r2, r3
 8000f48:	d000      	beq.n	8000f4c <HAL_RCC_ClockConfig+0x144>
 8000f4a:	e761      	b.n	8000e10 <HAL_RCC_ClockConfig+0x8>
 8000f4c:	e775      	b.n	8000e3a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000f4e:	68e3      	ldr	r3, [r4, #12]
 8000f50:	4908      	ldr	r1, [pc, #32]	; (8000f74 <HAL_RCC_ClockConfig+0x16c>)
 8000f52:	400b      	ands	r3, r1
 8000f54:	68f1      	ldr	r1, [r6, #12]
 8000f56:	430b      	orrs	r3, r1
 8000f58:	60e3      	str	r3, [r4, #12]
 8000f5a:	e773      	b.n	8000e44 <HAL_RCC_ClockConfig+0x3c>
 8000f5c:	40022000 	.word	0x40022000
 8000f60:	40021000 	.word	0x40021000
 8000f64:	ffffc7ff 	.word	0xffffc7ff
 8000f68:	08002459 	.word	0x08002459
 8000f6c:	20000000 	.word	0x20000000
 8000f70:	00001388 	.word	0x00001388
 8000f74:	fffff8ff 	.word	0xfffff8ff

08000f78 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000f78:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <HAL_RCC_GetPCLK1Freq+0x14>)
 8000f7a:	4a05      	ldr	r2, [pc, #20]	; (8000f90 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000f7c:	68db      	ldr	r3, [r3, #12]
 8000f7e:	055b      	lsls	r3, r3, #21
 8000f80:	0f5b      	lsrs	r3, r3, #29
 8000f82:	5cd3      	ldrb	r3, [r2, r3]
 8000f84:	4a03      	ldr	r2, [pc, #12]	; (8000f94 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000f86:	6810      	ldr	r0, [r2, #0]
 8000f88:	40d8      	lsrs	r0, r3
}
 8000f8a:	4770      	bx	lr
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	08002469 	.word	0x08002469
 8000f94:	20000000 	.word	0x20000000

08000f98 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000f98:	4b04      	ldr	r3, [pc, #16]	; (8000fac <HAL_RCC_GetPCLK2Freq+0x14>)
 8000f9a:	4a05      	ldr	r2, [pc, #20]	; (8000fb0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000f9c:	68db      	ldr	r3, [r3, #12]
 8000f9e:	049b      	lsls	r3, r3, #18
 8000fa0:	0f5b      	lsrs	r3, r3, #29
 8000fa2:	5cd3      	ldrb	r3, [r2, r3]
 8000fa4:	4a03      	ldr	r2, [pc, #12]	; (8000fb4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000fa6:	6810      	ldr	r0, [r2, #0]
 8000fa8:	40d8      	lsrs	r0, r3
}
 8000faa:	4770      	bx	lr
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	08002469 	.word	0x08002469
 8000fb4:	20000000 	.word	0x20000000

08000fb8 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8000fb8:	6803      	ldr	r3, [r0, #0]
{
 8000fba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000fbc:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8000fbe:	069b      	lsls	r3, r3, #26
 8000fc0:	d53a      	bpl.n	8001038 <HAL_RCCEx_PeriphCLKConfig+0x80>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fc2:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000fc4:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fc6:	4c5f      	ldr	r4, [pc, #380]	; (8001144 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8000fc8:	055b      	lsls	r3, r3, #21
 8000fca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8000fcc:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fce:	421a      	tst	r2, r3
 8000fd0:	d104      	bne.n	8000fdc <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fd2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fdc:	2780      	movs	r7, #128	; 0x80
 8000fde:	4e5a      	ldr	r6, [pc, #360]	; (8001148 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8000fe0:	007f      	lsls	r7, r7, #1
 8000fe2:	6833      	ldr	r3, [r6, #0]
 8000fe4:	423b      	tst	r3, r7
 8000fe6:	d069      	beq.n	80010bc <HAL_RCCEx_PeriphCLKConfig+0x104>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8000fe8:	22c0      	movs	r2, #192	; 0xc0
 8000fea:	21c0      	movs	r1, #192	; 0xc0
 8000fec:	6820      	ldr	r0, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8000fee:	686b      	ldr	r3, [r5, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8000ff0:	0392      	lsls	r2, r2, #14
 8000ff2:	4010      	ands	r0, r2
 8000ff4:	0289      	lsls	r1, r1, #10
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8000ff6:	401a      	ands	r2, r3
 8000ff8:	4290      	cmp	r0, r2
 8000ffa:	d000      	beq.n	8000ffe <HAL_RCCEx_PeriphCLKConfig+0x46>
 8000ffc:	e06f      	b.n	80010de <HAL_RCCEx_PeriphCLKConfig+0x126>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8000ffe:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001000:	400a      	ands	r2, r1

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001002:	d000      	beq.n	8001006 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001004:	e076      	b.n	80010f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001006:	6869      	ldr	r1, [r5, #4]
 8001008:	23c0      	movs	r3, #192	; 0xc0
 800100a:	000a      	movs	r2, r1
 800100c:	029b      	lsls	r3, r3, #10
 800100e:	401a      	ands	r2, r3
 8001010:	429a      	cmp	r2, r3
 8001012:	d107      	bne.n	8001024 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8001014:	6823      	ldr	r3, [r4, #0]
 8001016:	484d      	ldr	r0, [pc, #308]	; (800114c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001018:	4003      	ands	r3, r0
 800101a:	20c0      	movs	r0, #192	; 0xc0
 800101c:	0380      	lsls	r0, r0, #14
 800101e:	4001      	ands	r1, r0
 8001020:	430b      	orrs	r3, r1
 8001022:	6023      	str	r3, [r4, #0]
 8001024:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001026:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001028:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800102a:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 800102c:	2b01      	cmp	r3, #1
 800102e:	d103      	bne.n	8001038 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001030:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001032:	4a47      	ldr	r2, [pc, #284]	; (8001150 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001034:	4013      	ands	r3, r2
 8001036:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001038:	682b      	ldr	r3, [r5, #0]
 800103a:	07da      	lsls	r2, r3, #31
 800103c:	d506      	bpl.n	800104c <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800103e:	2003      	movs	r0, #3
 8001040:	4940      	ldr	r1, [pc, #256]	; (8001144 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001042:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8001044:	4382      	bics	r2, r0
 8001046:	68a8      	ldr	r0, [r5, #8]
 8001048:	4302      	orrs	r2, r0
 800104a:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800104c:	079a      	lsls	r2, r3, #30
 800104e:	d506      	bpl.n	800105e <HAL_RCCEx_PeriphCLKConfig+0xa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001050:	200c      	movs	r0, #12
 8001052:	493c      	ldr	r1, [pc, #240]	; (8001144 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001054:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8001056:	4382      	bics	r2, r0
 8001058:	68e8      	ldr	r0, [r5, #12]
 800105a:	4302      	orrs	r2, r0
 800105c:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800105e:	075a      	lsls	r2, r3, #29
 8001060:	d506      	bpl.n	8001070 <HAL_RCCEx_PeriphCLKConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001062:	4938      	ldr	r1, [pc, #224]	; (8001144 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001064:	483b      	ldr	r0, [pc, #236]	; (8001154 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8001066:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8001068:	4002      	ands	r2, r0
 800106a:	6928      	ldr	r0, [r5, #16]
 800106c:	4302      	orrs	r2, r0
 800106e:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001070:	071a      	lsls	r2, r3, #28
 8001072:	d506      	bpl.n	8001082 <HAL_RCCEx_PeriphCLKConfig+0xca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001074:	4933      	ldr	r1, [pc, #204]	; (8001144 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001076:	4838      	ldr	r0, [pc, #224]	; (8001158 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001078:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800107a:	4002      	ands	r2, r0
 800107c:	6968      	ldr	r0, [r5, #20]
 800107e:	4302      	orrs	r2, r0
 8001080:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001082:	05da      	lsls	r2, r3, #23
 8001084:	d506      	bpl.n	8001094 <HAL_RCCEx_PeriphCLKConfig+0xdc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001086:	492f      	ldr	r1, [pc, #188]	; (8001144 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001088:	4834      	ldr	r0, [pc, #208]	; (800115c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800108a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800108c:	4002      	ands	r2, r0
 800108e:	69a8      	ldr	r0, [r5, #24]
 8001090:	4302      	orrs	r2, r0
 8001092:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001094:	065a      	lsls	r2, r3, #25
 8001096:	d506      	bpl.n	80010a6 <HAL_RCCEx_PeriphCLKConfig+0xee>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001098:	492a      	ldr	r1, [pc, #168]	; (8001144 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800109a:	4831      	ldr	r0, [pc, #196]	; (8001160 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800109c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800109e:	4002      	ands	r2, r0
 80010a0:	6a28      	ldr	r0, [r5, #32]
 80010a2:	4302      	orrs	r2, r0
 80010a4:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 80010a6:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80010a8:	061b      	lsls	r3, r3, #24
 80010aa:	d517      	bpl.n	80010dc <HAL_RCCEx_PeriphCLKConfig+0x124>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80010ac:	4a25      	ldr	r2, [pc, #148]	; (8001144 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80010ae:	492d      	ldr	r1, [pc, #180]	; (8001164 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80010b0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80010b2:	400b      	ands	r3, r1
 80010b4:	69e9      	ldr	r1, [r5, #28]
 80010b6:	430b      	orrs	r3, r1
 80010b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ba:	e00f      	b.n	80010dc <HAL_RCCEx_PeriphCLKConfig+0x124>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010bc:	6833      	ldr	r3, [r6, #0]
 80010be:	433b      	orrs	r3, r7
 80010c0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80010c2:	f7ff f9ff 	bl	80004c4 <HAL_GetTick>
 80010c6:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010c8:	6833      	ldr	r3, [r6, #0]
 80010ca:	423b      	tst	r3, r7
 80010cc:	d18c      	bne.n	8000fe8 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010ce:	f7ff f9f9 	bl	80004c4 <HAL_GetTick>
 80010d2:	9b01      	ldr	r3, [sp, #4]
 80010d4:	1ac0      	subs	r0, r0, r3
 80010d6:	2864      	cmp	r0, #100	; 0x64
 80010d8:	d9f6      	bls.n	80010c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
          return HAL_TIMEOUT;
 80010da:	2003      	movs	r0, #3
}
 80010dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80010de:	001a      	movs	r2, r3
 80010e0:	400a      	ands	r2, r1
 80010e2:	428a      	cmp	r2, r1
 80010e4:	d000      	beq.n	80010e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
 80010e6:	e78a      	b.n	8000ffe <HAL_RCCEx_PeriphCLKConfig+0x46>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80010e8:	6822      	ldr	r2, [r4, #0]
          return HAL_ERROR;
 80010ea:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80010ec:	0392      	lsls	r2, r2, #14
 80010ee:	d400      	bmi.n	80010f2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
 80010f0:	e785      	b.n	8000ffe <HAL_RCCEx_PeriphCLKConfig+0x46>
 80010f2:	e7f3      	b.n	80010dc <HAL_RCCEx_PeriphCLKConfig+0x124>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80010f4:	400b      	ands	r3, r1
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d100      	bne.n	80010fc <HAL_RCCEx_PeriphCLKConfig+0x144>
 80010fa:	e784      	b.n	8001006 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80010fc:	682b      	ldr	r3, [r5, #0]
 80010fe:	069b      	lsls	r3, r3, #26
 8001100:	d400      	bmi.n	8001104 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001102:	e780      	b.n	8001006 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001104:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001106:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8001108:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800110a:	0312      	lsls	r2, r2, #12
 800110c:	4302      	orrs	r2, r0
 800110e:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001110:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001112:	4b12      	ldr	r3, [pc, #72]	; (800115c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001114:	4814      	ldr	r0, [pc, #80]	; (8001168 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001116:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001118:	4002      	ands	r2, r0
 800111a:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 800111c:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800111e:	05cb      	lsls	r3, r1, #23
 8001120:	d400      	bmi.n	8001124 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8001122:	e770      	b.n	8001006 <HAL_RCCEx_PeriphCLKConfig+0x4e>
        tickstart = HAL_GetTick();
 8001124:	f7ff f9ce 	bl	80004c4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001128:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 800112a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800112c:	00bf      	lsls	r7, r7, #2
 800112e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001130:	423b      	tst	r3, r7
 8001132:	d000      	beq.n	8001136 <HAL_RCCEx_PeriphCLKConfig+0x17e>
 8001134:	e767      	b.n	8001006 <HAL_RCCEx_PeriphCLKConfig+0x4e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001136:	f7ff f9c5 	bl	80004c4 <HAL_GetTick>
 800113a:	4b0c      	ldr	r3, [pc, #48]	; (800116c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800113c:	1b80      	subs	r0, r0, r6
 800113e:	4298      	cmp	r0, r3
 8001140:	d9f5      	bls.n	800112e <HAL_RCCEx_PeriphCLKConfig+0x176>
 8001142:	e7ca      	b.n	80010da <HAL_RCCEx_PeriphCLKConfig+0x122>
 8001144:	40021000 	.word	0x40021000
 8001148:	40007000 	.word	0x40007000
 800114c:	ffcfffff 	.word	0xffcfffff
 8001150:	efffffff 	.word	0xefffffff
 8001154:	fffff3ff 	.word	0xfffff3ff
 8001158:	ffffcfff 	.word	0xffffcfff
 800115c:	fffcffff 	.word	0xfffcffff
 8001160:	fbffffff 	.word	0xfbffffff
 8001164:	fff3ffff 	.word	0xfff3ffff
 8001168:	fff7ffff 	.word	0xfff7ffff
 800116c:	00001388 	.word	0x00001388

08001170 <HAL_RTC_AlarmAEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8001170:	4770      	bx	lr
	...

08001174 <HAL_RTC_AlarmIRQHandler>:
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8001174:	6803      	ldr	r3, [r0, #0]
{
 8001176:	b510      	push	{r4, lr}
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8001178:	689a      	ldr	r2, [r3, #8]
{
 800117a:	0004      	movs	r4, r0
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800117c:	04d2      	lsls	r2, r2, #19
 800117e:	d50a      	bpl.n	8001196 <HAL_RTC_AlarmIRQHandler+0x22>
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	05db      	lsls	r3, r3, #23
 8001184:	d507      	bpl.n	8001196 <HAL_RTC_AlarmIRQHandler+0x22>
      HAL_RTC_AlarmAEventCallback(hrtc);
 8001186:	f7ff fff3 	bl	8001170 <HAL_RTC_AlarmAEventCallback>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800118a:	6821      	ldr	r1, [r4, #0]
 800118c:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <HAL_RTC_AlarmIRQHandler+0x54>)
 800118e:	68ca      	ldr	r2, [r1, #12]
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	4313      	orrs	r3, r2
 8001194:	60cb      	str	r3, [r1, #12]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8001196:	6823      	ldr	r3, [r4, #0]
 8001198:	689a      	ldr	r2, [r3, #8]
 800119a:	0492      	lsls	r2, r2, #18
 800119c:	d50b      	bpl.n	80011b6 <HAL_RTC_AlarmIRQHandler+0x42>
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	059b      	lsls	r3, r3, #22
 80011a2:	d508      	bpl.n	80011b6 <HAL_RTC_AlarmIRQHandler+0x42>
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80011a4:	0020      	movs	r0, r4
 80011a6:	f000 fa67 	bl	8001678 <HAL_RTCEx_AlarmBEventCallback>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80011aa:	6821      	ldr	r1, [r4, #0]
 80011ac:	4b07      	ldr	r3, [pc, #28]	; (80011cc <HAL_RTC_AlarmIRQHandler+0x58>)
 80011ae:	68ca      	ldr	r2, [r1, #12]
 80011b0:	b2d2      	uxtb	r2, r2
 80011b2:	4313      	orrs	r3, r2
 80011b4:	60cb      	str	r3, [r1, #12]
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80011b6:	2280      	movs	r2, #128	; 0x80
 80011b8:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <HAL_RTC_AlarmIRQHandler+0x5c>)
 80011ba:	0292      	lsls	r2, r2, #10
 80011bc:	615a      	str	r2, [r3, #20]
  hrtc->State = HAL_RTC_STATE_READY;
 80011be:	2301      	movs	r3, #1
 80011c0:	3402      	adds	r4, #2
 80011c2:	77e3      	strb	r3, [r4, #31]
}
 80011c4:	bd10      	pop	{r4, pc}
 80011c6:	46c0      	nop			; (mov r8, r8)
 80011c8:	fffffe7f 	.word	0xfffffe7f
 80011cc:	fffffd7f 	.word	0xfffffd7f
 80011d0:	40010400 	.word	0x40010400

080011d4 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80011d4:	21a0      	movs	r1, #160	; 0xa0
 80011d6:	6802      	ldr	r2, [r0, #0]
{
 80011d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80011da:	68d3      	ldr	r3, [r2, #12]
{
 80011dc:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80011de:	438b      	bics	r3, r1
 80011e0:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80011e2:	f7ff f96f 	bl	80004c4 <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80011e6:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 80011e8:	0006      	movs	r6, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80011ea:	2520      	movs	r5, #32
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80011ec:	00bf      	lsls	r7, r7, #2
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80011ee:	6823      	ldr	r3, [r4, #0]
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	422b      	tst	r3, r5
 80011f4:	d001      	beq.n	80011fa <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80011f6:	2000      	movs	r0, #0
}
 80011f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80011fa:	f7ff f963 	bl	80004c4 <HAL_GetTick>
 80011fe:	1b80      	subs	r0, r0, r6
 8001200:	42b8      	cmp	r0, r7
 8001202:	d9f4      	bls.n	80011ee <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 8001204:	2003      	movs	r0, #3
 8001206:	e7f7      	b.n	80011f8 <HAL_RTC_WaitForSynchro+0x24>

08001208 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800120a:	2440      	movs	r4, #64	; 0x40
 800120c:	6803      	ldr	r3, [r0, #0]
{
 800120e:	0005      	movs	r5, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8001210:	68da      	ldr	r2, [r3, #12]
 8001212:	4222      	tst	r2, r4
 8001214:	d001      	beq.n	800121a <RTC_EnterInitMode+0x12>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001216:	2000      	movs	r0, #0
}
 8001218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800121a:	2201      	movs	r2, #1
 800121c:	4252      	negs	r2, r2
 800121e:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8001220:	f7ff f950 	bl	80004c4 <HAL_GetTick>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8001224:	27fa      	movs	r7, #250	; 0xfa
    tickstart = HAL_GetTick();
 8001226:	0006      	movs	r6, r0
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8001228:	00bf      	lsls	r7, r7, #2
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800122a:	682b      	ldr	r3, [r5, #0]
 800122c:	68db      	ldr	r3, [r3, #12]
 800122e:	4223      	tst	r3, r4
 8001230:	d1f1      	bne.n	8001216 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8001232:	f7ff f947 	bl	80004c4 <HAL_GetTick>
 8001236:	1b80      	subs	r0, r0, r6
 8001238:	42b8      	cmp	r0, r7
 800123a:	d9f6      	bls.n	800122a <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 800123c:	2003      	movs	r0, #3
 800123e:	e7eb      	b.n	8001218 <RTC_EnterInitMode+0x10>

08001240 <HAL_RTC_Init>:
{
 8001240:	b570      	push	{r4, r5, r6, lr}
 8001242:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001244:	2501      	movs	r5, #1
  if (hrtc == NULL)
 8001246:	2800      	cmp	r0, #0
 8001248:	d01a      	beq.n	8001280 <HAL_RTC_Init+0x40>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800124a:	1c86      	adds	r6, r0, #2
 800124c:	7ff3      	ldrb	r3, [r6, #31]
 800124e:	b2db      	uxtb	r3, r3
 8001250:	2b00      	cmp	r3, #0
 8001252:	d103      	bne.n	800125c <HAL_RTC_Init+0x1c>
    hrtc->Lock = HAL_UNLOCKED;
 8001254:	1942      	adds	r2, r0, r5
 8001256:	77d3      	strb	r3, [r2, #31]
    HAL_RTC_MspInit(hrtc);
 8001258:	f000 fe86 	bl	8001f68 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800125c:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800125e:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001260:	77f3      	strb	r3, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001262:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001264:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001266:	625a      	str	r2, [r3, #36]	; 0x24
 8001268:	3a77      	subs	r2, #119	; 0x77
 800126a:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800126c:	f7ff ffcc 	bl	8001208 <RTC_EnterInitMode>
 8001270:	6823      	ldr	r3, [r4, #0]
 8001272:	1e05      	subs	r5, r0, #0
 8001274:	d006      	beq.n	8001284 <HAL_RTC_Init+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001276:	22ff      	movs	r2, #255	; 0xff
 8001278:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800127a:	2304      	movs	r3, #4
 800127c:	77f3      	strb	r3, [r6, #31]
        return HAL_ERROR;
 800127e:	2501      	movs	r5, #1
}
 8001280:	0028      	movs	r0, r5
 8001282:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001284:	689a      	ldr	r2, [r3, #8]
 8001286:	491b      	ldr	r1, [pc, #108]	; (80012f4 <HAL_RTC_Init+0xb4>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001288:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800128a:	400a      	ands	r2, r1
 800128c:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800128e:	6862      	ldr	r2, [r4, #4]
 8001290:	6899      	ldr	r1, [r3, #8]
 8001292:	4302      	orrs	r2, r0
 8001294:	69a0      	ldr	r0, [r4, #24]
 8001296:	4302      	orrs	r2, r0
 8001298:	430a      	orrs	r2, r1
 800129a:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800129c:	68e2      	ldr	r2, [r4, #12]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800129e:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80012a0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80012a2:	68a2      	ldr	r2, [r4, #8]
 80012a4:	6919      	ldr	r1, [r3, #16]
 80012a6:	0412      	lsls	r2, r2, #16
 80012a8:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80012aa:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80012ac:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80012ae:	68da      	ldr	r2, [r3, #12]
 80012b0:	438a      	bics	r2, r1
 80012b2:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80012b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012b6:	397d      	subs	r1, #125	; 0x7d
 80012b8:	438a      	bics	r2, r1
 80012ba:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80012bc:	69e2      	ldr	r2, [r4, #28]
 80012be:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80012c0:	4302      	orrs	r2, r0
 80012c2:	430a      	orrs	r2, r1
 80012c4:	64da      	str	r2, [r3, #76]	; 0x4c
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	069b      	lsls	r3, r3, #26
 80012ca:	d40c      	bmi.n	80012e6 <HAL_RTC_Init+0xa6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80012cc:	0020      	movs	r0, r4
 80012ce:	f7ff ff81 	bl	80011d4 <HAL_RTC_WaitForSynchro>
 80012d2:	2800      	cmp	r0, #0
 80012d4:	d007      	beq.n	80012e6 <HAL_RTC_Init+0xa6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80012d6:	22ff      	movs	r2, #255	; 0xff
 80012d8:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(hrtc);
 80012da:	3401      	adds	r4, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80012dc:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80012de:	2304      	movs	r3, #4
 80012e0:	77f3      	strb	r3, [r6, #31]
        __HAL_UNLOCK(hrtc);
 80012e2:	77e5      	strb	r5, [r4, #31]
 80012e4:	e7cb      	b.n	800127e <HAL_RTC_Init+0x3e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80012e6:	22ff      	movs	r2, #255	; 0xff
 80012e8:	6823      	ldr	r3, [r4, #0]
 80012ea:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80012ec:	2301      	movs	r3, #1
 80012ee:	77f3      	strb	r3, [r6, #31]
    return HAL_OK;
 80012f0:	e7c6      	b.n	8001280 <HAL_RTC_Init+0x40>
 80012f2:	46c0      	nop			; (mov r8, r8)
 80012f4:	ff8fffbf 	.word	0xff8fffbf

080012f8 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 80012f8:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while (Param >= 10U)
 80012fa:	2809      	cmp	r0, #9
 80012fc:	d803      	bhi.n	8001306 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Param -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 80012fe:	011b      	lsls	r3, r3, #4
 8001300:	4318      	orrs	r0, r3
 8001302:	b2c0      	uxtb	r0, r0
}
 8001304:	4770      	bx	lr
    Param -= 10U;
 8001306:	380a      	subs	r0, #10
    bcdhigh++;
 8001308:	3301      	adds	r3, #1
    Param -= 10U;
 800130a:	b2c0      	uxtb	r0, r0
 800130c:	e7f5      	b.n	80012fa <RTC_ByteToBcd2+0x2>
	...

08001310 <HAL_RTC_SetTime>:
{
 8001310:	2302      	movs	r3, #2
 8001312:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8001314:	1c47      	adds	r7, r0, #1
{
 8001316:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 8001318:	7ff9      	ldrb	r1, [r7, #31]
{
 800131a:	0005      	movs	r5, r0
  __HAL_LOCK(hrtc);
 800131c:	001e      	movs	r6, r3
 800131e:	2901      	cmp	r1, #1
 8001320:	d036      	beq.n	8001390 <HAL_RTC_SetTime+0x80>
 8001322:	2101      	movs	r1, #1
 8001324:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001326:	18c1      	adds	r1, r0, r3
 8001328:	77cb      	strb	r3, [r1, #31]
 800132a:	9100      	str	r1, [sp, #0]
 800132c:	2140      	movs	r1, #64	; 0x40
 800132e:	6803      	ldr	r3, [r0, #0]
 8001330:	7866      	ldrb	r6, [r4, #1]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	7820      	ldrb	r0, [r4, #0]
 8001336:	400b      	ands	r3, r1
  if (Format == RTC_FORMAT_BIN)
 8001338:	2a00      	cmp	r2, #0
 800133a:	d12b      	bne.n	8001394 <HAL_RTC_SetTime+0x84>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800133c:	2b00      	cmp	r3, #0
 800133e:	d100      	bne.n	8001342 <HAL_RTC_SetTime+0x32>
      sTime->TimeFormat = 0x00U;
 8001340:	70e3      	strb	r3, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001342:	f7ff ffd9 	bl	80012f8 <RTC_ByteToBcd2>
 8001346:	9001      	str	r0, [sp, #4]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001348:	0030      	movs	r0, r6
 800134a:	f7ff ffd5 	bl	80012f8 <RTC_ByteToBcd2>
 800134e:	0006      	movs	r6, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8001350:	78a0      	ldrb	r0, [r4, #2]
 8001352:	f7ff ffd1 	bl	80012f8 <RTC_ByteToBcd2>
 8001356:	0003      	movs	r3, r0
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8001358:	78e0      	ldrb	r0, [r4, #3]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800135a:	0236      	lsls	r6, r6, #8
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800135c:	0400      	lsls	r0, r0, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800135e:	4318      	orrs	r0, r3
 8001360:	9b01      	ldr	r3, [sp, #4]
 8001362:	041b      	lsls	r3, r3, #16
 8001364:	4318      	orrs	r0, r3
 8001366:	4330      	orrs	r0, r6
 8001368:	9001      	str	r0, [sp, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800136a:	22ca      	movs	r2, #202	; 0xca
 800136c:	682b      	ldr	r3, [r5, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800136e:	0028      	movs	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001370:	625a      	str	r2, [r3, #36]	; 0x24
 8001372:	3a77      	subs	r2, #119	; 0x77
 8001374:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001376:	f7ff ff47 	bl	8001208 <RTC_EnterInitMode>
 800137a:	682b      	ldr	r3, [r5, #0]
 800137c:	1e06      	subs	r6, r0, #0
 800137e:	d016      	beq.n	80013ae <HAL_RTC_SetTime+0x9e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001380:	22ff      	movs	r2, #255	; 0xff
 8001382:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001384:	2304      	movs	r3, #4
 8001386:	9a00      	ldr	r2, [sp, #0]
 8001388:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 800138a:	2300      	movs	r3, #0
 800138c:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 800138e:	2601      	movs	r6, #1
}
 8001390:	0030      	movs	r0, r6
 8001392:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001394:	2b00      	cmp	r3, #0
 8001396:	d100      	bne.n	800139a <HAL_RTC_SetTime+0x8a>
      sTime->TimeFormat = 0x00U;
 8001398:	70e3      	strb	r3, [r4, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800139a:	0400      	lsls	r0, r0, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800139c:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800139e:	4306      	orrs	r6, r0
              ((uint32_t)sTime->Seconds) | \
 80013a0:	78a0      	ldrb	r0, [r4, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80013a2:	4306      	orrs	r6, r0
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80013a4:	78e0      	ldrb	r0, [r4, #3]
 80013a6:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80013a8:	4306      	orrs	r6, r0
 80013aa:	9601      	str	r6, [sp, #4]
 80013ac:	e7dd      	b.n	800136a <HAL_RTC_SetTime+0x5a>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80013ae:	4815      	ldr	r0, [pc, #84]	; (8001404 <HAL_RTC_SetTime+0xf4>)
 80013b0:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80013b2:	4915      	ldr	r1, [pc, #84]	; (8001408 <HAL_RTC_SetTime+0xf8>)
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80013b4:	4002      	ands	r2, r0
 80013b6:	601a      	str	r2, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80013b8:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80013ba:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80013bc:	400a      	ands	r2, r1
 80013be:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80013c0:	68e2      	ldr	r2, [r4, #12]
 80013c2:	6899      	ldr	r1, [r3, #8]
 80013c4:	4302      	orrs	r2, r0
 80013c6:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80013c8:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80013ca:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80013cc:	68da      	ldr	r2, [r3, #12]
 80013ce:	438a      	bics	r2, r1
 80013d0:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	069b      	lsls	r3, r3, #26
 80013d6:	d40c      	bmi.n	80013f2 <HAL_RTC_SetTime+0xe2>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80013d8:	0028      	movs	r0, r5
 80013da:	f7ff fefb 	bl	80011d4 <HAL_RTC_WaitForSynchro>
 80013de:	2800      	cmp	r0, #0
 80013e0:	d007      	beq.n	80013f2 <HAL_RTC_SetTime+0xe2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80013e2:	22ff      	movs	r2, #255	; 0xff
 80013e4:	682b      	ldr	r3, [r5, #0]
 80013e6:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80013e8:	2304      	movs	r3, #4
 80013ea:	9a00      	ldr	r2, [sp, #0]
 80013ec:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 80013ee:	77fe      	strb	r6, [r7, #31]
 80013f0:	e7cd      	b.n	800138e <HAL_RTC_SetTime+0x7e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80013f2:	22ff      	movs	r2, #255	; 0xff
 80013f4:	682b      	ldr	r3, [r5, #0]
 80013f6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80013f8:	2301      	movs	r3, #1
 80013fa:	9a00      	ldr	r2, [sp, #0]
 80013fc:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 80013fe:	2300      	movs	r3, #0
 8001400:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 8001402:	e7c5      	b.n	8001390 <HAL_RTC_SetTime+0x80>
 8001404:	007f7f7f 	.word	0x007f7f7f
 8001408:	fffbffff 	.word	0xfffbffff

0800140c <HAL_RTC_SetDate>:
{
 800140c:	2302      	movs	r3, #2
 800140e:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8001410:	1c47      	adds	r7, r0, #1
{
 8001412:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 8001414:	7ff9      	ldrb	r1, [r7, #31]
{
 8001416:	b085      	sub	sp, #20
 8001418:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 800141a:	001e      	movs	r6, r3
 800141c:	2901      	cmp	r1, #1
 800141e:	d035      	beq.n	800148c <HAL_RTC_SetDate+0x80>
 8001420:	2101      	movs	r1, #1
 8001422:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001424:	18c1      	adds	r1, r0, r3
 8001426:	9101      	str	r1, [sp, #4]
 8001428:	77cb      	strb	r3, [r1, #31]
 800142a:	786b      	ldrb	r3, [r5, #1]
 800142c:	78e8      	ldrb	r0, [r5, #3]
 800142e:	78ae      	ldrb	r6, [r5, #2]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001430:	2a00      	cmp	r2, #0
 8001432:	d14e      	bne.n	80014d2 <HAL_RTC_SetDate+0xc6>
 8001434:	3210      	adds	r2, #16
 8001436:	4213      	tst	r3, r2
 8001438:	d002      	beq.n	8001440 <HAL_RTC_SetDate+0x34>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800143a:	4393      	bics	r3, r2
 800143c:	330a      	adds	r3, #10
 800143e:	706b      	strb	r3, [r5, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001440:	f7ff ff5a 	bl	80012f8 <RTC_ByteToBcd2>
 8001444:	9002      	str	r0, [sp, #8]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8001446:	7868      	ldrb	r0, [r5, #1]
 8001448:	f7ff ff56 	bl	80012f8 <RTC_ByteToBcd2>
 800144c:	9003      	str	r0, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800144e:	0030      	movs	r0, r6
 8001450:	f7ff ff52 	bl	80012f8 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001454:	9b02      	ldr	r3, [sp, #8]
                  ((uint32_t)sDate->WeekDay << 13U));
 8001456:	782d      	ldrb	r5, [r5, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001458:	041e      	lsls	r6, r3, #16
                  ((uint32_t)sDate->WeekDay << 13U));
 800145a:	036d      	lsls	r5, r5, #13
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800145c:	9b03      	ldr	r3, [sp, #12]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800145e:	4305      	orrs	r5, r0
 8001460:	4335      	orrs	r5, r6
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8001462:	021e      	lsls	r6, r3, #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001464:	22ca      	movs	r2, #202	; 0xca
 8001466:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001468:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800146a:	625a      	str	r2, [r3, #36]	; 0x24
 800146c:	3a77      	subs	r2, #119	; 0x77
 800146e:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001470:	f7ff feca 	bl	8001208 <RTC_EnterInitMode>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001474:	4335      	orrs	r5, r6
 8001476:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001478:	1e06      	subs	r6, r0, #0
 800147a:	d00a      	beq.n	8001492 <HAL_RTC_SetDate+0x86>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800147c:	22ff      	movs	r2, #255	; 0xff
 800147e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001480:	2304      	movs	r3, #4
 8001482:	9a01      	ldr	r2, [sp, #4]
 8001484:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8001486:	2300      	movs	r3, #0
 8001488:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 800148a:	2601      	movs	r6, #1
}
 800148c:	0030      	movs	r0, r6
 800148e:	b005      	add	sp, #20
 8001490:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001492:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8001494:	4812      	ldr	r0, [pc, #72]	; (80014e0 <HAL_RTC_SetDate+0xd4>)
 8001496:	4005      	ands	r5, r0
 8001498:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800149a:	68da      	ldr	r2, [r3, #12]
 800149c:	438a      	bics	r2, r1
 800149e:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	069b      	lsls	r3, r3, #26
 80014a4:	d40c      	bmi.n	80014c0 <HAL_RTC_SetDate+0xb4>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80014a6:	0020      	movs	r0, r4
 80014a8:	f7ff fe94 	bl	80011d4 <HAL_RTC_WaitForSynchro>
 80014ac:	2800      	cmp	r0, #0
 80014ae:	d007      	beq.n	80014c0 <HAL_RTC_SetDate+0xb4>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80014b0:	22ff      	movs	r2, #255	; 0xff
 80014b2:	6823      	ldr	r3, [r4, #0]
 80014b4:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80014b6:	2304      	movs	r3, #4
 80014b8:	9a01      	ldr	r2, [sp, #4]
 80014ba:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 80014bc:	77fe      	strb	r6, [r7, #31]
 80014be:	e7e4      	b.n	800148a <HAL_RTC_SetDate+0x7e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80014c0:	22ff      	movs	r2, #255	; 0xff
 80014c2:	6823      	ldr	r3, [r4, #0]
 80014c4:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 80014c6:	2301      	movs	r3, #1
 80014c8:	9a01      	ldr	r2, [sp, #4]
 80014ca:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 80014cc:	2300      	movs	r3, #0
 80014ce:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 80014d0:	e7dc      	b.n	800148c <HAL_RTC_SetDate+0x80>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80014d2:	0400      	lsls	r0, r0, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80014d4:	021b      	lsls	r3, r3, #8
                  (((uint32_t)sDate->WeekDay) << 13U));
 80014d6:	782d      	ldrb	r5, [r5, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80014d8:	4303      	orrs	r3, r0
                  (((uint32_t)sDate->Month) << 8U) | \
 80014da:	431e      	orrs	r6, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80014dc:	036d      	lsls	r5, r5, #13
 80014de:	e7c1      	b.n	8001464 <HAL_RTC_SetDate+0x58>
 80014e0:	00ffff3f 	.word	0x00ffff3f

080014e4 <HAL_RTC_SetAlarm_IT>:
{
 80014e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 80014e6:	1c43      	adds	r3, r0, #1
 80014e8:	9300      	str	r3, [sp, #0]
{
 80014ea:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 80014ec:	7fd9      	ldrb	r1, [r3, #31]
 80014ee:	2302      	movs	r3, #2
{
 80014f0:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 80014f2:	0018      	movs	r0, r3
 80014f4:	2901      	cmp	r1, #1
 80014f6:	d100      	bne.n	80014fa <HAL_RTC_SetAlarm_IT+0x16>
 80014f8:	e08d      	b.n	8001616 <HAL_RTC_SetAlarm_IT+0x132>
 80014fa:	2101      	movs	r1, #1
 80014fc:	1860      	adds	r0, r4, r1
 80014fe:	77c1      	strb	r1, [r0, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001500:	18e1      	adds	r1, r4, r3
 8001502:	77cb      	strb	r3, [r1, #31]
 8001504:	2140      	movs	r1, #64	; 0x40
 8001506:	6823      	ldr	r3, [r4, #0]
 8001508:	7828      	ldrb	r0, [r5, #0]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	786e      	ldrb	r6, [r5, #1]
 800150e:	78af      	ldrb	r7, [r5, #2]
 8001510:	400b      	ands	r3, r1
  if (Format == RTC_FORMAT_BIN)
 8001512:	2a00      	cmp	r2, #0
 8001514:	d15d      	bne.n	80015d2 <HAL_RTC_SetAlarm_IT+0xee>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001516:	2b00      	cmp	r3, #0
 8001518:	d100      	bne.n	800151c <HAL_RTC_SetAlarm_IT+0x38>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800151a:	70eb      	strb	r3, [r5, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800151c:	f7ff feec 	bl	80012f8 <RTC_ByteToBcd2>
 8001520:	9001      	str	r0, [sp, #4]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001522:	0030      	movs	r0, r6
 8001524:	f7ff fee8 	bl	80012f8 <RTC_ByteToBcd2>
 8001528:	0006      	movs	r6, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800152a:	0038      	movs	r0, r7
 800152c:	f7ff fee4 	bl	80012f8 <RTC_ByteToBcd2>
 8001530:	0007      	movs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001532:	1c6b      	adds	r3, r5, #1
 8001534:	7fd8      	ldrb	r0, [r3, #31]
 8001536:	f7ff fedf 	bl	80012f8 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800153a:	696a      	ldr	r2, [r5, #20]
 800153c:	69eb      	ldr	r3, [r5, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800153e:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001540:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001542:	78ea      	ldrb	r2, [r5, #3]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001544:	0600      	lsls	r0, r0, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001546:	0412      	lsls	r2, r2, #16
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001548:	4313      	orrs	r3, r2
 800154a:	431f      	orrs	r7, r3
 800154c:	9b01      	ldr	r3, [sp, #4]
 800154e:	041b      	lsls	r3, r3, #16
 8001550:	431f      	orrs	r7, r3
 8001552:	4337      	orrs	r7, r6
 8001554:	4307      	orrs	r7, r0
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8001556:	69aa      	ldr	r2, [r5, #24]
 8001558:	686b      	ldr	r3, [r5, #4]
  if (sAlarm->Alarm == RTC_ALARM_A)
 800155a:	6a69      	ldr	r1, [r5, #36]	; 0x24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800155c:	4313      	orrs	r3, r2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800155e:	22ca      	movs	r2, #202	; 0xca
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8001560:	9301      	str	r3, [sp, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001562:	6823      	ldr	r3, [r4, #0]
 8001564:	625a      	str	r2, [r3, #36]	; 0x24
 8001566:	3a77      	subs	r2, #119	; 0x77
 8001568:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 800156a:	32ad      	adds	r2, #173	; 0xad
 800156c:	4291      	cmp	r1, r2
 800156e:	d153      	bne.n	8001618 <HAL_RTC_SetAlarm_IT+0x134>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8001570:	689a      	ldr	r2, [r3, #8]
 8001572:	493c      	ldr	r1, [pc, #240]	; (8001664 <HAL_RTC_SetAlarm_IT+0x180>)
 8001574:	400a      	ands	r2, r1
 8001576:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8001578:	68d9      	ldr	r1, [r3, #12]
 800157a:	4a3b      	ldr	r2, [pc, #236]	; (8001668 <HAL_RTC_SetAlarm_IT+0x184>)
 800157c:	b2c9      	uxtb	r1, r1
 800157e:	430a      	orrs	r2, r1
 8001580:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8001582:	f7fe ff9f 	bl	80004c4 <HAL_GetTick>
 8001586:	0006      	movs	r6, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8001588:	2201      	movs	r2, #1
 800158a:	6823      	ldr	r3, [r4, #0]
 800158c:	68dd      	ldr	r5, [r3, #12]
 800158e:	4015      	ands	r5, r2
 8001590:	d032      	beq.n	80015f8 <HAL_RTC_SetAlarm_IT+0x114>
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8001592:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8001594:	61df      	str	r7, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8001596:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8001598:	2280      	movs	r2, #128	; 0x80
 800159a:	6899      	ldr	r1, [r3, #8]
 800159c:	0052      	lsls	r2, r2, #1
 800159e:	430a      	orrs	r2, r1
 80015a0:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80015a2:	2280      	movs	r2, #128	; 0x80
 80015a4:	6899      	ldr	r1, [r3, #8]
 80015a6:	0152      	lsls	r2, r2, #5
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80015a8:	430a      	orrs	r2, r1
 80015aa:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80015ac:	2280      	movs	r2, #128	; 0x80
 80015ae:	4b2f      	ldr	r3, [pc, #188]	; (800166c <HAL_RTC_SetAlarm_IT+0x188>)
 80015b0:	0292      	lsls	r2, r2, #10
 80015b2:	6819      	ldr	r1, [r3, #0]
  __HAL_UNLOCK(hrtc);
 80015b4:	2000      	movs	r0, #0
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80015b6:	4311      	orrs	r1, r2
 80015b8:	6019      	str	r1, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80015ba:	6899      	ldr	r1, [r3, #8]
 80015bc:	430a      	orrs	r2, r1
 80015be:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80015c0:	22ff      	movs	r2, #255	; 0xff
 80015c2:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_READY;
 80015c4:	3402      	adds	r4, #2
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80015c6:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 80015c8:	2301      	movs	r3, #1
 80015ca:	77e3      	strb	r3, [r4, #31]
  __HAL_UNLOCK(hrtc);
 80015cc:	9b00      	ldr	r3, [sp, #0]
 80015ce:	77d8      	strb	r0, [r3, #31]
  return HAL_OK;
 80015d0:	e021      	b.n	8001616 <HAL_RTC_SetAlarm_IT+0x132>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d100      	bne.n	80015d8 <HAL_RTC_SetAlarm_IT+0xf4>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80015d6:	70eb      	strb	r3, [r5, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80015d8:	69eb      	ldr	r3, [r5, #28]
 80015da:	696a      	ldr	r2, [r5, #20]
 80015dc:	0400      	lsls	r0, r0, #16
 80015de:	4313      	orrs	r3, r2
 80015e0:	431f      	orrs	r7, r3
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80015e2:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80015e4:	4307      	orrs	r7, r0
 80015e6:	4337      	orrs	r7, r6
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80015e8:	78ee      	ldrb	r6, [r5, #3]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80015ea:	1c6b      	adds	r3, r5, #1
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80015ec:	0436      	lsls	r6, r6, #16
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80015ee:	4337      	orrs	r7, r6
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80015f0:	7fde      	ldrb	r6, [r3, #31]
 80015f2:	0636      	lsls	r6, r6, #24
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80015f4:	4337      	orrs	r7, r6
 80015f6:	e7ae      	b.n	8001556 <HAL_RTC_SetAlarm_IT+0x72>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80015f8:	f7fe ff64 	bl	80004c4 <HAL_GetTick>
 80015fc:	23fa      	movs	r3, #250	; 0xfa
 80015fe:	1b80      	subs	r0, r0, r6
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	4298      	cmp	r0, r3
 8001604:	d9c0      	bls.n	8001588 <HAL_RTC_SetAlarm_IT+0xa4>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001606:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001608:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800160a:	6823      	ldr	r3, [r4, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800160c:	3402      	adds	r4, #2
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800160e:	625a      	str	r2, [r3, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 8001610:	9b00      	ldr	r3, [sp, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001612:	77e0      	strb	r0, [r4, #31]
        __HAL_UNLOCK(hrtc);
 8001614:	77dd      	strb	r5, [r3, #31]
}
 8001616:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8001618:	689a      	ldr	r2, [r3, #8]
 800161a:	4915      	ldr	r1, [pc, #84]	; (8001670 <HAL_RTC_SetAlarm_IT+0x18c>)
 800161c:	400a      	ands	r2, r1
 800161e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8001620:	68d9      	ldr	r1, [r3, #12]
 8001622:	4a14      	ldr	r2, [pc, #80]	; (8001674 <HAL_RTC_SetAlarm_IT+0x190>)
 8001624:	b2c9      	uxtb	r1, r1
 8001626:	430a      	orrs	r2, r1
 8001628:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800162a:	f7fe ff4b 	bl	80004c4 <HAL_GetTick>
 800162e:	0006      	movs	r6, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8001630:	2202      	movs	r2, #2
 8001632:	6823      	ldr	r3, [r4, #0]
 8001634:	68dd      	ldr	r5, [r3, #12]
 8001636:	4015      	ands	r5, r2
 8001638:	d00b      	beq.n	8001652 <HAL_RTC_SetAlarm_IT+0x16e>
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800163a:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800163c:	621f      	str	r7, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800163e:	649a      	str	r2, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8001640:	2280      	movs	r2, #128	; 0x80
 8001642:	6899      	ldr	r1, [r3, #8]
 8001644:	0092      	lsls	r2, r2, #2
 8001646:	430a      	orrs	r2, r1
 8001648:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800164a:	2280      	movs	r2, #128	; 0x80
 800164c:	6899      	ldr	r1, [r3, #8]
 800164e:	0192      	lsls	r2, r2, #6
 8001650:	e7aa      	b.n	80015a8 <HAL_RTC_SetAlarm_IT+0xc4>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001652:	f7fe ff37 	bl	80004c4 <HAL_GetTick>
 8001656:	23fa      	movs	r3, #250	; 0xfa
 8001658:	1b80      	subs	r0, r0, r6
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4298      	cmp	r0, r3
 800165e:	d9e7      	bls.n	8001630 <HAL_RTC_SetAlarm_IT+0x14c>
 8001660:	e7d1      	b.n	8001606 <HAL_RTC_SetAlarm_IT+0x122>
 8001662:	46c0      	nop			; (mov r8, r8)
 8001664:	fffffeff 	.word	0xfffffeff
 8001668:	fffffe7f 	.word	0xfffffe7f
 800166c:	40010400 	.word	0x40010400
 8001670:	fffffdff 	.word	0xfffffdff
 8001674:	fffffd7f 	.word	0xfffffd7f

08001678 <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8001678:	4770      	bx	lr
	...

0800167c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800167c:	b570      	push	{r4, r5, r6, lr}
 800167e:	0004      	movs	r4, r0
  /* Check the SPI handle allocation */
  if (hspi == NULL)
  {
    return HAL_ERROR;
 8001680:	2001      	movs	r0, #1
  if (hspi == NULL)
 8001682:	2c00      	cmp	r4, #0
 8001684:	d037      	beq.n	80016f6 <HAL_SPI_Init+0x7a>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001686:	2300      	movs	r3, #0
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001688:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800168a:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800168c:	3551      	adds	r5, #81	; 0x51
 800168e:	782b      	ldrb	r3, [r5, #0]
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2b00      	cmp	r3, #0
 8001694:	d105      	bne.n	80016a2 <HAL_SPI_Init+0x26>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001696:	0022      	movs	r2, r4
 8001698:	3250      	adds	r2, #80	; 0x50
 800169a:	7013      	strb	r3, [r2, #0]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800169c:	0020      	movs	r0, r4
 800169e:	f000 fcbb 	bl	8002018 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80016a2:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80016a4:	2240      	movs	r2, #64	; 0x40
 80016a6:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80016a8:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 80016aa:	680b      	ldr	r3, [r1, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80016ac:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 80016ae:	4393      	bics	r3, r2
 80016b0:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80016b2:	6863      	ldr	r3, [r4, #4]
 80016b4:	69a2      	ldr	r2, [r4, #24]
 80016b6:	4303      	orrs	r3, r0
 80016b8:	68e0      	ldr	r0, [r4, #12]
 80016ba:	4303      	orrs	r3, r0
 80016bc:	6920      	ldr	r0, [r4, #16]
 80016be:	4303      	orrs	r3, r0
 80016c0:	6960      	ldr	r0, [r4, #20]
 80016c2:	4303      	orrs	r3, r0
 80016c4:	69e0      	ldr	r0, [r4, #28]
 80016c6:	4303      	orrs	r3, r0
 80016c8:	6a20      	ldr	r0, [r4, #32]
 80016ca:	4303      	orrs	r3, r0
 80016cc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80016ce:	4303      	orrs	r3, r0
 80016d0:	2080      	movs	r0, #128	; 0x80
 80016d2:	0080      	lsls	r0, r0, #2
 80016d4:	4010      	ands	r0, r2
 80016d6:	4303      	orrs	r3, r0
 80016d8:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80016da:	2304      	movs	r3, #4
 80016dc:	0c12      	lsrs	r2, r2, #16
 80016de:	401a      	ands	r2, r3
 80016e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80016e2:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80016e4:	431a      	orrs	r2, r3
 80016e6:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80016e8:	69cb      	ldr	r3, [r1, #28]
 80016ea:	4a03      	ldr	r2, [pc, #12]	; (80016f8 <HAL_SPI_Init+0x7c>)
 80016ec:	4013      	ands	r3, r2
 80016ee:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 80016f0:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80016f2:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80016f4:	702b      	strb	r3, [r5, #0]

  return HAL_OK;
}
 80016f6:	bd70      	pop	{r4, r5, r6, pc}
 80016f8:	fffff7ff 	.word	0xfffff7ff

080016fc <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80016fc:	6803      	ldr	r3, [r0, #0]
 80016fe:	4907      	ldr	r1, [pc, #28]	; (800171c <UART_EndRxTransfer+0x20>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	400a      	ands	r2, r1
 8001704:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001706:	689a      	ldr	r2, [r3, #8]
 8001708:	3123      	adds	r1, #35	; 0x23
 800170a:	31ff      	adds	r1, #255	; 0xff
 800170c:	438a      	bics	r2, r1
 800170e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001710:	2320      	movs	r3, #32
 8001712:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001714:	2300      	movs	r3, #0
 8001716:	6603      	str	r3, [r0, #96]	; 0x60
}
 8001718:	4770      	bx	lr
 800171a:	46c0      	nop			; (mov r8, r8)
 800171c:	fffffedf 	.word	0xfffffedf

08001720 <HAL_UART_TxCpltCallback>:
 8001720:	4770      	bx	lr

08001722 <HAL_UART_ErrorCallback>:
 8001722:	4770      	bx	lr

08001724 <HAL_UART_IRQHandler>:
{
 8001724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001726:	6803      	ldr	r3, [r0, #0]
{
 8001728:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800172a:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800172c:	6818      	ldr	r0, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800172e:	689e      	ldr	r6, [r3, #8]
  if (errorflags == 0U)
 8001730:	0711      	lsls	r1, r2, #28
 8001732:	d10a      	bne.n	800174a <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001734:	2120      	movs	r1, #32
 8001736:	420a      	tst	r2, r1
 8001738:	d100      	bne.n	800173c <HAL_UART_IRQHandler+0x18>
 800173a:	e06a      	b.n	8001812 <HAL_UART_IRQHandler+0xee>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800173c:	4208      	tst	r0, r1
 800173e:	d068      	beq.n	8001812 <HAL_UART_IRQHandler+0xee>
      if (huart->RxISR != NULL)
 8001740:	6e23      	ldr	r3, [r4, #96]	; 0x60
      huart->TxISR(huart);
 8001742:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8001744:	2b00      	cmp	r3, #0
 8001746:	d15a      	bne.n	80017fe <HAL_UART_IRQHandler+0xda>
 8001748:	e05a      	b.n	8001800 <HAL_UART_IRQHandler+0xdc>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800174a:	2101      	movs	r1, #1
 800174c:	0035      	movs	r5, r6
 800174e:	400d      	ands	r5, r1
 8001750:	d103      	bne.n	800175a <HAL_UART_IRQHandler+0x36>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8001752:	2790      	movs	r7, #144	; 0x90
 8001754:	007f      	lsls	r7, r7, #1
 8001756:	4238      	tst	r0, r7
 8001758:	d05b      	beq.n	8001812 <HAL_UART_IRQHandler+0xee>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800175a:	420a      	tst	r2, r1
 800175c:	d005      	beq.n	800176a <HAL_UART_IRQHandler+0x46>
 800175e:	05c6      	lsls	r6, r0, #23
 8001760:	d503      	bpl.n	800176a <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001762:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001764:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8001766:	4331      	orrs	r1, r6
 8001768:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800176a:	2102      	movs	r1, #2
 800176c:	420a      	tst	r2, r1
 800176e:	d006      	beq.n	800177e <HAL_UART_IRQHandler+0x5a>
 8001770:	2d00      	cmp	r5, #0
 8001772:	d004      	beq.n	800177e <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001774:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001776:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8001778:	1849      	adds	r1, r1, r1
 800177a:	4331      	orrs	r1, r6
 800177c:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800177e:	2104      	movs	r1, #4
 8001780:	420a      	tst	r2, r1
 8001782:	d006      	beq.n	8001792 <HAL_UART_IRQHandler+0x6e>
 8001784:	2d00      	cmp	r5, #0
 8001786:	d004      	beq.n	8001792 <HAL_UART_IRQHandler+0x6e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001788:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800178a:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 800178c:	3902      	subs	r1, #2
 800178e:	4331      	orrs	r1, r6
 8001790:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001792:	0711      	lsls	r1, r2, #28
 8001794:	d508      	bpl.n	80017a8 <HAL_UART_IRQHandler+0x84>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001796:	0681      	lsls	r1, r0, #26
 8001798:	d401      	bmi.n	800179e <HAL_UART_IRQHandler+0x7a>
 800179a:	2d00      	cmp	r5, #0
 800179c:	d004      	beq.n	80017a8 <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800179e:	2108      	movs	r1, #8
 80017a0:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80017a2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80017a4:	4319      	orrs	r1, r3
 80017a6:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80017a8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d028      	beq.n	8001800 <HAL_UART_IRQHandler+0xdc>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80017ae:	2320      	movs	r3, #32
 80017b0:	421a      	tst	r2, r3
 80017b2:	d006      	beq.n	80017c2 <HAL_UART_IRQHandler+0x9e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80017b4:	4218      	tst	r0, r3
 80017b6:	d004      	beq.n	80017c2 <HAL_UART_IRQHandler+0x9e>
        if (huart->RxISR != NULL)
 80017b8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <HAL_UART_IRQHandler+0x9e>
          huart->RxISR(huart);
 80017be:	0020      	movs	r0, r4
 80017c0:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80017c2:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 80017c4:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80017c6:	689b      	ldr	r3, [r3, #8]
        UART_EndRxTransfer(huart);
 80017c8:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80017ca:	065b      	lsls	r3, r3, #25
 80017cc:	d402      	bmi.n	80017d4 <HAL_UART_IRQHandler+0xb0>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 80017ce:	2308      	movs	r3, #8
 80017d0:	401d      	ands	r5, r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80017d2:	d01a      	beq.n	800180a <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 80017d4:	f7ff ff92 	bl	80016fc <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80017d8:	2140      	movs	r1, #64	; 0x40
 80017da:	6823      	ldr	r3, [r4, #0]
 80017dc:	689a      	ldr	r2, [r3, #8]
 80017de:	420a      	tst	r2, r1
 80017e0:	d00f      	beq.n	8001802 <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80017e2:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 80017e4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80017e6:	438a      	bics	r2, r1
 80017e8:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 80017ea:	2800      	cmp	r0, #0
 80017ec:	d009      	beq.n	8001802 <HAL_UART_IRQHandler+0xde>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80017ee:	4b1a      	ldr	r3, [pc, #104]	; (8001858 <HAL_UART_IRQHandler+0x134>)
 80017f0:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80017f2:	f7fe ff05 	bl	8000600 <HAL_DMA_Abort_IT>
 80017f6:	2800      	cmp	r0, #0
 80017f8:	d002      	beq.n	8001800 <HAL_UART_IRQHandler+0xdc>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80017fa:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80017fc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80017fe:	4798      	blx	r3
}
 8001800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8001802:	0020      	movs	r0, r4
 8001804:	f7ff ff8d 	bl	8001722 <HAL_UART_ErrorCallback>
 8001808:	e7fa      	b.n	8001800 <HAL_UART_IRQHandler+0xdc>
        HAL_UART_ErrorCallback(huart);
 800180a:	f7ff ff8a 	bl	8001722 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800180e:	67e5      	str	r5, [r4, #124]	; 0x7c
 8001810:	e7f6      	b.n	8001800 <HAL_UART_IRQHandler+0xdc>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8001812:	2180      	movs	r1, #128	; 0x80
 8001814:	0349      	lsls	r1, r1, #13
 8001816:	420a      	tst	r2, r1
 8001818:	d006      	beq.n	8001828 <HAL_UART_IRQHandler+0x104>
 800181a:	0275      	lsls	r5, r6, #9
 800181c:	d504      	bpl.n	8001828 <HAL_UART_IRQHandler+0x104>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800181e:	6219      	str	r1, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8001820:	0020      	movs	r0, r4
 8001822:	f000 fa51 	bl	8001cc8 <HAL_UARTEx_WakeupCallback>
    return;
 8001826:	e7eb      	b.n	8001800 <HAL_UART_IRQHandler+0xdc>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8001828:	2180      	movs	r1, #128	; 0x80
 800182a:	420a      	tst	r2, r1
 800182c:	d003      	beq.n	8001836 <HAL_UART_IRQHandler+0x112>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800182e:	4208      	tst	r0, r1
 8001830:	d001      	beq.n	8001836 <HAL_UART_IRQHandler+0x112>
    if (huart->TxISR != NULL)
 8001832:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001834:	e785      	b.n	8001742 <HAL_UART_IRQHandler+0x1e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001836:	2140      	movs	r1, #64	; 0x40
 8001838:	420a      	tst	r2, r1
 800183a:	d0e1      	beq.n	8001800 <HAL_UART_IRQHandler+0xdc>
 800183c:	4208      	tst	r0, r1
 800183e:	d0df      	beq.n	8001800 <HAL_UART_IRQHandler+0xdc>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001840:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001842:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001844:	438a      	bics	r2, r1
 8001846:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8001848:	2320      	movs	r3, #32
 800184a:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 800184c:	2300      	movs	r3, #0
 800184e:	6663      	str	r3, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 8001850:	f7ff ff66 	bl	8001720 <HAL_UART_TxCpltCallback>
 8001854:	e7d4      	b.n	8001800 <HAL_UART_IRQHandler+0xdc>
 8001856:	46c0      	nop			; (mov r8, r8)
 8001858:	0800185d 	.word	0x0800185d

0800185c <UART_DMAAbortOnError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800185c:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 800185e:	2300      	movs	r3, #0
 8001860:	0002      	movs	r2, r0
{
 8001862:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8001864:	325a      	adds	r2, #90	; 0x5a
 8001866:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8001868:	3a08      	subs	r2, #8
 800186a:	8013      	strh	r3, [r2, #0]
  HAL_UART_ErrorCallback(huart);
 800186c:	f7ff ff59 	bl	8001722 <HAL_UART_ErrorCallback>
}
 8001870:	bd10      	pop	{r4, pc}
	...

08001874 <UART_SetConfig>:
{
 8001874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001876:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001878:	6925      	ldr	r5, [r4, #16]
 800187a:	68a2      	ldr	r2, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 800187c:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800187e:	432a      	orrs	r2, r5
 8001880:	6965      	ldr	r5, [r4, #20]
 8001882:	69c1      	ldr	r1, [r0, #28]
 8001884:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001886:	6818      	ldr	r0, [r3, #0]
 8001888:	4d81      	ldr	r5, [pc, #516]	; (8001a90 <UART_SetConfig+0x21c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800188a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800188c:	4028      	ands	r0, r5
 800188e:	4302      	orrs	r2, r0
 8001890:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001892:	685a      	ldr	r2, [r3, #4]
 8001894:	487f      	ldr	r0, [pc, #508]	; (8001a94 <UART_SetConfig+0x220>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001896:	4d80      	ldr	r5, [pc, #512]	; (8001a98 <UART_SetConfig+0x224>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001898:	4002      	ands	r2, r0
 800189a:	68e0      	ldr	r0, [r4, #12]
 800189c:	4302      	orrs	r2, r0
 800189e:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80018a0:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80018a2:	42ab      	cmp	r3, r5
 80018a4:	d001      	beq.n	80018aa <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 80018a6:	6a22      	ldr	r2, [r4, #32]
 80018a8:	4310      	orrs	r0, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	4e7b      	ldr	r6, [pc, #492]	; (8001a9c <UART_SetConfig+0x228>)
 80018ae:	4032      	ands	r2, r6
 80018b0:	4302      	orrs	r2, r0
 80018b2:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80018b4:	4a7a      	ldr	r2, [pc, #488]	; (8001aa0 <UART_SetConfig+0x22c>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d113      	bne.n	80018e2 <UART_SetConfig+0x6e>
 80018ba:	2203      	movs	r2, #3
 80018bc:	4b79      	ldr	r3, [pc, #484]	; (8001aa4 <UART_SetConfig+0x230>)
 80018be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c0:	4013      	ands	r3, r2
 80018c2:	4a79      	ldr	r2, [pc, #484]	; (8001aa8 <UART_SetConfig+0x234>)
 80018c4:	5cd0      	ldrb	r0, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80018c6:	2380      	movs	r3, #128	; 0x80
 80018c8:	021b      	lsls	r3, r3, #8
 80018ca:	4299      	cmp	r1, r3
 80018cc:	d100      	bne.n	80018d0 <UART_SetConfig+0x5c>
 80018ce:	e0d1      	b.n	8001a74 <UART_SetConfig+0x200>
    switch (clocksource)
 80018d0:	2808      	cmp	r0, #8
 80018d2:	d826      	bhi.n	8001922 <UART_SetConfig+0xae>
 80018d4:	f7fe fc18 	bl	8000108 <__gnu_thumb1_case_uqi>
 80018d8:	259996c0 	.word	0x259996c0
 80018dc:	252525b4 	.word	0x252525b4
 80018e0:	b7          	.byte	0xb7
 80018e1:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80018e2:	4a72      	ldr	r2, [pc, #456]	; (8001aac <UART_SetConfig+0x238>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d105      	bne.n	80018f4 <UART_SetConfig+0x80>
 80018e8:	220c      	movs	r2, #12
 80018ea:	4b6e      	ldr	r3, [pc, #440]	; (8001aa4 <UART_SetConfig+0x230>)
 80018ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ee:	4013      	ands	r3, r2
 80018f0:	4a6f      	ldr	r2, [pc, #444]	; (8001ab0 <UART_SetConfig+0x23c>)
 80018f2:	e7e7      	b.n	80018c4 <UART_SetConfig+0x50>
 80018f4:	4a6f      	ldr	r2, [pc, #444]	; (8001ab4 <UART_SetConfig+0x240>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d100      	bne.n	80018fc <UART_SetConfig+0x88>
 80018fa:	e0a9      	b.n	8001a50 <UART_SetConfig+0x1dc>
 80018fc:	4a6e      	ldr	r2, [pc, #440]	; (8001ab8 <UART_SetConfig+0x244>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d100      	bne.n	8001904 <UART_SetConfig+0x90>
 8001902:	e0a5      	b.n	8001a50 <UART_SetConfig+0x1dc>
 8001904:	42ab      	cmp	r3, r5
 8001906:	d000      	beq.n	800190a <UART_SetConfig+0x96>
 8001908:	e0ad      	b.n	8001a66 <UART_SetConfig+0x1f2>
 800190a:	21c0      	movs	r1, #192	; 0xc0
 800190c:	2080      	movs	r0, #128	; 0x80
 800190e:	4a65      	ldr	r2, [pc, #404]	; (8001aa4 <UART_SetConfig+0x230>)
 8001910:	0109      	lsls	r1, r1, #4
 8001912:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001914:	00c0      	lsls	r0, r0, #3
 8001916:	400b      	ands	r3, r1
 8001918:	4283      	cmp	r3, r0
 800191a:	d038      	beq.n	800198e <UART_SetConfig+0x11a>
 800191c:	d803      	bhi.n	8001926 <UART_SetConfig+0xb2>
 800191e:	2b00      	cmp	r3, #0
 8001920:	d00a      	beq.n	8001938 <UART_SetConfig+0xc4>
        ret = HAL_ERROR;
 8001922:	2501      	movs	r5, #1
 8001924:	e00d      	b.n	8001942 <UART_SetConfig+0xce>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001926:	2080      	movs	r0, #128	; 0x80
 8001928:	0100      	lsls	r0, r0, #4
 800192a:	4283      	cmp	r3, r0
 800192c:	d00e      	beq.n	800194c <UART_SetConfig+0xd8>
 800192e:	428b      	cmp	r3, r1
 8001930:	d1f7      	bne.n	8001922 <UART_SetConfig+0xae>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8001932:	2080      	movs	r0, #128	; 0x80
 8001934:	0200      	lsls	r0, r0, #8
 8001936:	e00d      	b.n	8001954 <UART_SetConfig+0xe0>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8001938:	f7ff fb1e 	bl	8000f78 <HAL_RCC_GetPCLK1Freq>
 800193c:	2500      	movs	r5, #0
    if (lpuart_ker_ck_pres != 0U)
 800193e:	42a8      	cmp	r0, r5
 8001940:	d108      	bne.n	8001954 <UART_SetConfig+0xe0>
  huart->RxISR = NULL;
 8001942:	2300      	movs	r3, #0
}
 8001944:	0028      	movs	r0, r5
  huart->RxISR = NULL;
 8001946:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001948:	6663      	str	r3, [r4, #100]	; 0x64
}
 800194a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800194c:	6813      	ldr	r3, [r2, #0]
 800194e:	06db      	lsls	r3, r3, #27
 8001950:	d520      	bpl.n	8001994 <UART_SetConfig+0x120>
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8001952:	485a      	ldr	r0, [pc, #360]	; (8001abc <UART_SetConfig+0x248>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001954:	2203      	movs	r2, #3
 8001956:	6863      	ldr	r3, [r4, #4]
 8001958:	435a      	muls	r2, r3
 800195a:	4282      	cmp	r2, r0
 800195c:	d8e1      	bhi.n	8001922 <UART_SetConfig+0xae>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800195e:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001960:	4282      	cmp	r2, r0
 8001962:	d3de      	bcc.n	8001922 <UART_SetConfig+0xae>
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8001964:	2700      	movs	r7, #0
 8001966:	0e02      	lsrs	r2, r0, #24
 8001968:	0201      	lsls	r1, r0, #8
 800196a:	085e      	lsrs	r6, r3, #1
 800196c:	1989      	adds	r1, r1, r6
 800196e:	417a      	adcs	r2, r7
 8001970:	0008      	movs	r0, r1
 8001972:	0011      	movs	r1, r2
 8001974:	001a      	movs	r2, r3
 8001976:	003b      	movs	r3, r7
 8001978:	f7fe fc66 	bl	8000248 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800197c:	4b50      	ldr	r3, [pc, #320]	; (8001ac0 <UART_SetConfig+0x24c>)
 800197e:	18c2      	adds	r2, r0, r3
 8001980:	4b50      	ldr	r3, [pc, #320]	; (8001ac4 <UART_SetConfig+0x250>)
 8001982:	429a      	cmp	r2, r3
 8001984:	d8cd      	bhi.n	8001922 <UART_SetConfig+0xae>
          huart->Instance->BRR = usartdiv;
 8001986:	6823      	ldr	r3, [r4, #0]
 8001988:	003d      	movs	r5, r7
 800198a:	60d8      	str	r0, [r3, #12]
 800198c:	e7d9      	b.n	8001942 <UART_SetConfig+0xce>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800198e:	f7fe ff77 	bl	8000880 <HAL_RCC_GetSysClockFreq>
        break;
 8001992:	e7d3      	b.n	800193c <UART_SetConfig+0xc8>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8001994:	484c      	ldr	r0, [pc, #304]	; (8001ac8 <UART_SetConfig+0x254>)
 8001996:	e7dd      	b.n	8001954 <UART_SetConfig+0xe0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001998:	f7ff faee 	bl	8000f78 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800199c:	6863      	ldr	r3, [r4, #4]
 800199e:	0040      	lsls	r0, r0, #1
 80019a0:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80019a2:	18c0      	adds	r0, r0, r3
 80019a4:	6861      	ldr	r1, [r4, #4]
 80019a6:	e00b      	b.n	80019c0 <UART_SetConfig+0x14c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80019a8:	f7ff faf6 	bl	8000f98 <HAL_RCC_GetPCLK2Freq>
 80019ac:	e7f6      	b.n	800199c <UART_SetConfig+0x128>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80019ae:	2510      	movs	r5, #16
 80019b0:	4b3c      	ldr	r3, [pc, #240]	; (8001aa4 <UART_SetConfig+0x230>)
 80019b2:	6861      	ldr	r1, [r4, #4]
 80019b4:	681a      	ldr	r2, [r3, #0]
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80019b6:	0848      	lsrs	r0, r1, #1
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80019b8:	4015      	ands	r5, r2
 80019ba:	d006      	beq.n	80019ca <UART_SetConfig+0x156>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80019bc:	4b43      	ldr	r3, [pc, #268]	; (8001acc <UART_SetConfig+0x258>)
 80019be:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80019c0:	f7fe fbb6 	bl	8000130 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 80019c4:	2500      	movs	r5, #0
 80019c6:	b283      	uxth	r3, r0
        break;
 80019c8:	e004      	b.n	80019d4 <UART_SetConfig+0x160>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80019ca:	4b41      	ldr	r3, [pc, #260]	; (8001ad0 <UART_SetConfig+0x25c>)
 80019cc:	18c0      	adds	r0, r0, r3
 80019ce:	f7fe fbaf 	bl	8000130 <__udivsi3>
 80019d2:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80019d4:	0019      	movs	r1, r3
 80019d6:	483f      	ldr	r0, [pc, #252]	; (8001ad4 <UART_SetConfig+0x260>)
 80019d8:	3910      	subs	r1, #16
 80019da:	4281      	cmp	r1, r0
 80019dc:	d8a1      	bhi.n	8001922 <UART_SetConfig+0xae>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80019de:	210f      	movs	r1, #15
 80019e0:	0018      	movs	r0, r3
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80019e2:	071b      	lsls	r3, r3, #28
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80019e4:	4388      	bics	r0, r1
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80019e6:	0f5b      	lsrs	r3, r3, #29
      huart->Instance->BRR = brrtemp;
 80019e8:	6821      	ldr	r1, [r4, #0]
 80019ea:	4303      	orrs	r3, r0
      huart->Instance->BRR = usartdiv;
 80019ec:	60cb      	str	r3, [r1, #12]
 80019ee:	e7a8      	b.n	8001942 <UART_SetConfig+0xce>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80019f0:	f7fe ff46 	bl	8000880 <HAL_RCC_GetSysClockFreq>
 80019f4:	e7d2      	b.n	800199c <UART_SetConfig+0x128>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80019f6:	6863      	ldr	r3, [r4, #4]
 80019f8:	0858      	lsrs	r0, r3, #1
 80019fa:	2380      	movs	r3, #128	; 0x80
 80019fc:	025b      	lsls	r3, r3, #9
 80019fe:	e7d0      	b.n	80019a2 <UART_SetConfig+0x12e>
  uint32_t usartdiv                   = 0x00000000U;
 8001a00:	2300      	movs	r3, #0
 8001a02:	e7e7      	b.n	80019d4 <UART_SetConfig+0x160>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001a04:	f7ff fac8 	bl	8000f98 <HAL_RCC_GetPCLK2Freq>
 8001a08:	e028      	b.n	8001a5c <UART_SetConfig+0x1e8>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001a0a:	2510      	movs	r5, #16
 8001a0c:	4b25      	ldr	r3, [pc, #148]	; (8001aa4 <UART_SetConfig+0x230>)
 8001a0e:	6861      	ldr	r1, [r4, #4]
 8001a10:	681a      	ldr	r2, [r3, #0]
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8001a12:	0848      	lsrs	r0, r1, #1
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001a14:	4015      	ands	r5, r2
 8001a16:	d006      	beq.n	8001a26 <UART_SetConfig+0x1b2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8001a18:	4b28      	ldr	r3, [pc, #160]	; (8001abc <UART_SetConfig+0x248>)
 8001a1a:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001a1c:	f7fe fb88 	bl	8000130 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 8001a20:	2500      	movs	r5, #0
 8001a22:	b283      	uxth	r3, r0
        break;
 8001a24:	e004      	b.n	8001a30 <UART_SetConfig+0x1bc>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001a26:	4b28      	ldr	r3, [pc, #160]	; (8001ac8 <UART_SetConfig+0x254>)
 8001a28:	18c0      	adds	r0, r0, r3
 8001a2a:	f7fe fb81 	bl	8000130 <__udivsi3>
 8001a2e:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001a30:	0019      	movs	r1, r3
 8001a32:	4828      	ldr	r0, [pc, #160]	; (8001ad4 <UART_SetConfig+0x260>)
 8001a34:	3910      	subs	r1, #16
 8001a36:	4281      	cmp	r1, r0
 8001a38:	d900      	bls.n	8001a3c <UART_SetConfig+0x1c8>
 8001a3a:	e772      	b.n	8001922 <UART_SetConfig+0xae>
      huart->Instance->BRR = usartdiv;
 8001a3c:	6821      	ldr	r1, [r4, #0]
 8001a3e:	e7d5      	b.n	80019ec <UART_SetConfig+0x178>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001a40:	f7fe ff1e 	bl	8000880 <HAL_RCC_GetSysClockFreq>
 8001a44:	e00a      	b.n	8001a5c <UART_SetConfig+0x1e8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001a46:	6863      	ldr	r3, [r4, #4]
 8001a48:	0858      	lsrs	r0, r3, #1
 8001a4a:	2380      	movs	r3, #128	; 0x80
 8001a4c:	021b      	lsls	r3, r3, #8
 8001a4e:	e007      	b.n	8001a60 <UART_SetConfig+0x1ec>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a50:	2380      	movs	r3, #128	; 0x80
 8001a52:	021b      	lsls	r3, r3, #8
 8001a54:	4299      	cmp	r1, r3
 8001a56:	d09f      	beq.n	8001998 <UART_SetConfig+0x124>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001a58:	f7ff fa8e 	bl	8000f78 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001a5c:	6863      	ldr	r3, [r4, #4]
 8001a5e:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001a60:	18c0      	adds	r0, r0, r3
 8001a62:	6861      	ldr	r1, [r4, #4]
 8001a64:	e7da      	b.n	8001a1c <UART_SetConfig+0x1a8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a66:	2380      	movs	r3, #128	; 0x80
        ret = HAL_ERROR;
 8001a68:	2501      	movs	r5, #1
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a6a:	021b      	lsls	r3, r3, #8
 8001a6c:	4299      	cmp	r1, r3
 8001a6e:	d0c7      	beq.n	8001a00 <UART_SetConfig+0x18c>
  uint32_t usartdiv                   = 0x00000000U;
 8001a70:	2300      	movs	r3, #0
 8001a72:	e7dd      	b.n	8001a30 <UART_SetConfig+0x1bc>
    switch (clocksource)
 8001a74:	2808      	cmp	r0, #8
 8001a76:	d900      	bls.n	8001a7a <UART_SetConfig+0x206>
 8001a78:	e753      	b.n	8001922 <UART_SetConfig+0xae>
 8001a7a:	f7fe fb4f 	bl	800011c <__gnu_thumb1_case_shi>
 8001a7e:	ff8d      	.short	0xff8d
 8001a80:	ff98ff95 	.word	0xff98ff95
 8001a84:	ffb9ff52 	.word	0xffb9ff52
 8001a88:	ff52ff52 	.word	0xff52ff52
 8001a8c:	ffbcff52 	.word	0xffbcff52
 8001a90:	efff69f3 	.word	0xefff69f3
 8001a94:	ffffcfff 	.word	0xffffcfff
 8001a98:	40004800 	.word	0x40004800
 8001a9c:	fffff4ff 	.word	0xfffff4ff
 8001aa0:	40013800 	.word	0x40013800
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	08002448 	.word	0x08002448
 8001aac:	40004400 	.word	0x40004400
 8001ab0:	0800244c 	.word	0x0800244c
 8001ab4:	40004c00 	.word	0x40004c00
 8001ab8:	40005000 	.word	0x40005000
 8001abc:	003d0900 	.word	0x003d0900
 8001ac0:	fffffd00 	.word	0xfffffd00
 8001ac4:	000ffcff 	.word	0x000ffcff
 8001ac8:	00f42400 	.word	0x00f42400
 8001acc:	007a1200 	.word	0x007a1200
 8001ad0:	01e84800 	.word	0x01e84800
 8001ad4:	0000ffef 	.word	0x0000ffef

08001ad8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001ad8:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001ada:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001adc:	07da      	lsls	r2, r3, #31
 8001ade:	d506      	bpl.n	8001aee <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001ae0:	6801      	ldr	r1, [r0, #0]
 8001ae2:	4c28      	ldr	r4, [pc, #160]	; (8001b84 <UART_AdvFeatureConfig+0xac>)
 8001ae4:	684a      	ldr	r2, [r1, #4]
 8001ae6:	4022      	ands	r2, r4
 8001ae8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001aea:	4322      	orrs	r2, r4
 8001aec:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001aee:	079a      	lsls	r2, r3, #30
 8001af0:	d506      	bpl.n	8001b00 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001af2:	6801      	ldr	r1, [r0, #0]
 8001af4:	4c24      	ldr	r4, [pc, #144]	; (8001b88 <UART_AdvFeatureConfig+0xb0>)
 8001af6:	684a      	ldr	r2, [r1, #4]
 8001af8:	4022      	ands	r2, r4
 8001afa:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001afc:	4322      	orrs	r2, r4
 8001afe:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001b00:	075a      	lsls	r2, r3, #29
 8001b02:	d506      	bpl.n	8001b12 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001b04:	6801      	ldr	r1, [r0, #0]
 8001b06:	4c21      	ldr	r4, [pc, #132]	; (8001b8c <UART_AdvFeatureConfig+0xb4>)
 8001b08:	684a      	ldr	r2, [r1, #4]
 8001b0a:	4022      	ands	r2, r4
 8001b0c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001b0e:	4322      	orrs	r2, r4
 8001b10:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001b12:	071a      	lsls	r2, r3, #28
 8001b14:	d506      	bpl.n	8001b24 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001b16:	6801      	ldr	r1, [r0, #0]
 8001b18:	4c1d      	ldr	r4, [pc, #116]	; (8001b90 <UART_AdvFeatureConfig+0xb8>)
 8001b1a:	684a      	ldr	r2, [r1, #4]
 8001b1c:	4022      	ands	r2, r4
 8001b1e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001b20:	4322      	orrs	r2, r4
 8001b22:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001b24:	06da      	lsls	r2, r3, #27
 8001b26:	d506      	bpl.n	8001b36 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001b28:	6801      	ldr	r1, [r0, #0]
 8001b2a:	4c1a      	ldr	r4, [pc, #104]	; (8001b94 <UART_AdvFeatureConfig+0xbc>)
 8001b2c:	688a      	ldr	r2, [r1, #8]
 8001b2e:	4022      	ands	r2, r4
 8001b30:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001b32:	4322      	orrs	r2, r4
 8001b34:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001b36:	069a      	lsls	r2, r3, #26
 8001b38:	d506      	bpl.n	8001b48 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001b3a:	6801      	ldr	r1, [r0, #0]
 8001b3c:	4c16      	ldr	r4, [pc, #88]	; (8001b98 <UART_AdvFeatureConfig+0xc0>)
 8001b3e:	688a      	ldr	r2, [r1, #8]
 8001b40:	4022      	ands	r2, r4
 8001b42:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001b44:	4322      	orrs	r2, r4
 8001b46:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001b48:	065a      	lsls	r2, r3, #25
 8001b4a:	d510      	bpl.n	8001b6e <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001b4c:	6801      	ldr	r1, [r0, #0]
 8001b4e:	4d13      	ldr	r5, [pc, #76]	; (8001b9c <UART_AdvFeatureConfig+0xc4>)
 8001b50:	684a      	ldr	r2, [r1, #4]
 8001b52:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001b54:	402a      	ands	r2, r5
 8001b56:	4322      	orrs	r2, r4
 8001b58:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001b5a:	2280      	movs	r2, #128	; 0x80
 8001b5c:	0352      	lsls	r2, r2, #13
 8001b5e:	4294      	cmp	r4, r2
 8001b60:	d105      	bne.n	8001b6e <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001b62:	684a      	ldr	r2, [r1, #4]
 8001b64:	4c0e      	ldr	r4, [pc, #56]	; (8001ba0 <UART_AdvFeatureConfig+0xc8>)
 8001b66:	4022      	ands	r2, r4
 8001b68:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001b6a:	4322      	orrs	r2, r4
 8001b6c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001b6e:	061b      	lsls	r3, r3, #24
 8001b70:	d506      	bpl.n	8001b80 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001b72:	6802      	ldr	r2, [r0, #0]
 8001b74:	490b      	ldr	r1, [pc, #44]	; (8001ba4 <UART_AdvFeatureConfig+0xcc>)
 8001b76:	6853      	ldr	r3, [r2, #4]
 8001b78:	400b      	ands	r3, r1
 8001b7a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001b7c:	430b      	orrs	r3, r1
 8001b7e:	6053      	str	r3, [r2, #4]
}
 8001b80:	bd30      	pop	{r4, r5, pc}
 8001b82:	46c0      	nop			; (mov r8, r8)
 8001b84:	fffdffff 	.word	0xfffdffff
 8001b88:	fffeffff 	.word	0xfffeffff
 8001b8c:	fffbffff 	.word	0xfffbffff
 8001b90:	ffff7fff 	.word	0xffff7fff
 8001b94:	ffffefff 	.word	0xffffefff
 8001b98:	ffffdfff 	.word	0xffffdfff
 8001b9c:	ffefffff 	.word	0xffefffff
 8001ba0:	ff9fffff 	.word	0xff9fffff
 8001ba4:	fff7ffff 	.word	0xfff7ffff

08001ba8 <UART_WaitOnFlagUntilTimeout>:
{
 8001ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001baa:	0004      	movs	r4, r0
 8001bac:	000e      	movs	r6, r1
 8001bae:	0015      	movs	r5, r2
 8001bb0:	001f      	movs	r7, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bb2:	6822      	ldr	r2, [r4, #0]
 8001bb4:	69d3      	ldr	r3, [r2, #28]
 8001bb6:	4033      	ands	r3, r6
 8001bb8:	1b9b      	subs	r3, r3, r6
 8001bba:	4259      	negs	r1, r3
 8001bbc:	414b      	adcs	r3, r1
 8001bbe:	42ab      	cmp	r3, r5
 8001bc0:	d001      	beq.n	8001bc6 <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	e01b      	b.n	8001bfe <UART_WaitOnFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 8001bc6:	9b06      	ldr	r3, [sp, #24]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	d0f3      	beq.n	8001bb4 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bcc:	f7fe fc7a 	bl	80004c4 <HAL_GetTick>
 8001bd0:	9b06      	ldr	r3, [sp, #24]
 8001bd2:	1bc0      	subs	r0, r0, r7
 8001bd4:	4283      	cmp	r3, r0
 8001bd6:	d301      	bcc.n	8001bdc <UART_WaitOnFlagUntilTimeout+0x34>
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1ea      	bne.n	8001bb2 <UART_WaitOnFlagUntilTimeout+0xa>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001bdc:	6823      	ldr	r3, [r4, #0]
 8001bde:	4908      	ldr	r1, [pc, #32]	; (8001c00 <UART_WaitOnFlagUntilTimeout+0x58>)
 8001be0:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 8001be2:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001be4:	400a      	ands	r2, r1
 8001be6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001be8:	689a      	ldr	r2, [r3, #8]
 8001bea:	31a3      	adds	r1, #163	; 0xa3
 8001bec:	31ff      	adds	r1, #255	; 0xff
 8001bee:	438a      	bics	r2, r1
 8001bf0:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001bf2:	2320      	movs	r3, #32
 8001bf4:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8001bf6:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	3470      	adds	r4, #112	; 0x70
 8001bfc:	7023      	strb	r3, [r4, #0]
}
 8001bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c00:	fffffe5f 	.word	0xfffffe5f

08001c04 <UART_CheckIdleState>:
{
 8001c04:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c06:	2600      	movs	r6, #0
{
 8001c08:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c0a:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8001c0c:	f7fe fc5a 	bl	80004c4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001c10:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001c12:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	071b      	lsls	r3, r3, #28
 8001c18:	d415      	bmi.n	8001c46 <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001c1a:	6823      	ldr	r3, [r4, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	075b      	lsls	r3, r3, #29
 8001c20:	d50a      	bpl.n	8001c38 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001c22:	2180      	movs	r1, #128	; 0x80
 8001c24:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <UART_CheckIdleState+0x5c>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	9300      	str	r3, [sp, #0]
 8001c2a:	03c9      	lsls	r1, r1, #15
 8001c2c:	002b      	movs	r3, r5
 8001c2e:	0020      	movs	r0, r4
 8001c30:	f7ff ffba 	bl	8001ba8 <UART_WaitOnFlagUntilTimeout>
 8001c34:	2800      	cmp	r0, #0
 8001c36:	d111      	bne.n	8001c5c <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8001c38:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001c3a:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001c3c:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8001c3e:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8001c40:	3470      	adds	r4, #112	; 0x70
 8001c42:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8001c44:	e00b      	b.n	8001c5e <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001c46:	2180      	movs	r1, #128	; 0x80
 8001c48:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <UART_CheckIdleState+0x5c>)
 8001c4a:	0032      	movs	r2, r6
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	0389      	lsls	r1, r1, #14
 8001c50:	0003      	movs	r3, r0
 8001c52:	0020      	movs	r0, r4
 8001c54:	f7ff ffa8 	bl	8001ba8 <UART_WaitOnFlagUntilTimeout>
 8001c58:	2800      	cmp	r0, #0
 8001c5a:	d0de      	beq.n	8001c1a <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001c5c:	2003      	movs	r0, #3
}
 8001c5e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8001c60:	01ffffff 	.word	0x01ffffff

08001c64 <HAL_UART_Init>:
{
 8001c64:	b510      	push	{r4, lr}
 8001c66:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8001c68:	d101      	bne.n	8001c6e <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8001c6a:	2001      	movs	r0, #1
}
 8001c6c:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8001c6e:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d104      	bne.n	8001c7e <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8001c74:	0002      	movs	r2, r0
 8001c76:	3270      	adds	r2, #112	; 0x70
 8001c78:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8001c7a:	f000 fadb 	bl	8002234 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001c7e:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001c80:	2101      	movs	r1, #1
 8001c82:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001c84:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8001c86:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001c88:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8001c8a:	438b      	bics	r3, r1
 8001c8c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001c8e:	f7ff fdf1 	bl	8001874 <UART_SetConfig>
 8001c92:	2801      	cmp	r0, #1
 8001c94:	d0e9      	beq.n	8001c6a <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001c96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d002      	beq.n	8001ca2 <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8001c9c:	0020      	movs	r0, r4
 8001c9e:	f7ff ff1b 	bl	8001ad8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ca2:	6823      	ldr	r3, [r4, #0]
 8001ca4:	4907      	ldr	r1, [pc, #28]	; (8001cc4 <HAL_UART_Init+0x60>)
 8001ca6:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8001ca8:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001caa:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cac:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cb0:	689a      	ldr	r2, [r3, #8]
 8001cb2:	438a      	bics	r2, r1
 8001cb4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	6819      	ldr	r1, [r3, #0]
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8001cbe:	f7ff ffa1 	bl	8001c04 <UART_CheckIdleState>
 8001cc2:	e7d3      	b.n	8001c6c <HAL_UART_Init+0x8>
 8001cc4:	ffffb7ff 	.word	0xffffb7ff

08001cc8 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8001cc8:	4770      	bx	lr
	...

08001ccc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001ccc:	b507      	push	{r0, r1, r2, lr}
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cce:	2001      	movs	r0, #1
 8001cd0:	4a08      	ldr	r2, [pc, #32]	; (8001cf4 <MX_DMA_Init+0x28>)
 8001cd2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001cd4:	4301      	orrs	r1, r0
 8001cd6:	6311      	str	r1, [r2, #48]	; 0x30
 8001cd8:	6b13      	ldr	r3, [r2, #48]	; 0x30

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001cda:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cdc:	4003      	ands	r3, r0
 8001cde:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001ce0:	0011      	movs	r1, r2
 8001ce2:	3009      	adds	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ce4:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001ce6:	f7fe fbf3 	bl	80004d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001cea:	200a      	movs	r0, #10
 8001cec:	f7fe fc20 	bl	8000530 <HAL_NVIC_EnableIRQ>

}
 8001cf0:	bd07      	pop	{r0, r1, r2, pc}
 8001cf2:	46c0      	nop			; (mov r8, r8)
 8001cf4:	40021000 	.word	0x40021000

08001cf8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001cf8:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfa:	2501      	movs	r5, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cfc:	2702      	movs	r7, #2
{
 8001cfe:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	2214      	movs	r2, #20
 8001d02:	2100      	movs	r1, #0
 8001d04:	a805      	add	r0, sp, #20
 8001d06:	f000 fb8b 	bl	8002420 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d0a:	2004      	movs	r0, #4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0c:	4b30      	ldr	r3, [pc, #192]	; (8001dd0 <MX_GPIO_Init+0xd8>)
  __HAL_RCC_GPIOH_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RADIO_NSS_Pin|RADIO_TCXO_VCC_Pin|RADIO_ANT_SWITCH_RX_Pin, GPIO_PIN_RESET);
 8001d0e:	26a0      	movs	r6, #160	; 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, RADIO_NSS_Pin|RADIO_TCXO_VCC_Pin|RADIO_ANT_SWITCH_RX_Pin, GPIO_PIN_RESET);
 8001d12:	4c30      	ldr	r4, [pc, #192]	; (8001dd4 <MX_GPIO_Init+0xdc>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d14:	432a      	orrs	r2, r5
 8001d16:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, RADIO_NSS_Pin|RADIO_TCXO_VCC_Pin|RADIO_ANT_SWITCH_RX_Pin, GPIO_PIN_RESET);
 8001d1a:	05f6      	lsls	r6, r6, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1c:	402a      	ands	r2, r5
 8001d1e:	9201      	str	r2, [sp, #4]
 8001d20:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d24:	433a      	orrs	r2, r7
 8001d26:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d2a:	403a      	ands	r2, r7
 8001d2c:	9202      	str	r2, [sp, #8]
 8001d2e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d32:	4301      	orrs	r1, r0
 8001d34:	62d9      	str	r1, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d36:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d3a:	4002      	ands	r2, r0
 8001d3c:	9203      	str	r2, [sp, #12]
 8001d3e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, RADIO_NSS_Pin|RADIO_TCXO_VCC_Pin|RADIO_ANT_SWITCH_RX_Pin, GPIO_PIN_RESET);
 8001d42:	0030      	movs	r0, r6
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d44:	430a      	orrs	r2, r1
 8001d46:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, RADIO_NSS_Pin|RADIO_TCXO_VCC_Pin|RADIO_ANT_SWITCH_RX_Pin, GPIO_PIN_RESET);
 8001d4a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d4c:	400b      	ands	r3, r1
 8001d4e:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, RADIO_NSS_Pin|RADIO_TCXO_VCC_Pin|RADIO_ANT_SWITCH_RX_Pin, GPIO_PIN_RESET);
 8001d50:	0021      	movs	r1, r4
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d52:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, RADIO_NSS_Pin|RADIO_TCXO_VCC_Pin|RADIO_ANT_SWITCH_RX_Pin, GPIO_PIN_RESET);
 8001d54:	f7fe fd80 	bl	8000858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RADIO_ANT_SWITCH_TX_BOOST_Pin|RADIO_RESET_Pin|RADIO_ANT_SWITCH_TX_RFO_Pin, GPIO_PIN_RESET);
 8001d58:	2200      	movs	r2, #0
 8001d5a:	2107      	movs	r1, #7
 8001d5c:	481e      	ldr	r0, [pc, #120]	; (8001dd8 <MX_GPIO_Init+0xe0>)
 8001d5e:	f7fe fd7b 	bl	8000858 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RADIO_NSS_Pin|RADIO_TCXO_VCC_Pin|RADIO_ANT_SWITCH_RX_Pin;
 8001d62:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d64:	2400      	movs	r4, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d66:	a905      	add	r1, sp, #20
 8001d68:	0030      	movs	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d6a:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d6e:	9708      	str	r7, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d70:	f7fe fcb6 	bl	80006e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RADIO_DIO_0_Pin|RADIO_DIO_1_Pin|RADIO_DIO_2_Pin;
 8001d74:	2313      	movs	r3, #19
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d76:	4e19      	ldr	r6, [pc, #100]	; (8001ddc <MX_GPIO_Init+0xe4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d78:	a905      	add	r1, sp, #20
 8001d7a:	4819      	ldr	r0, [pc, #100]	; (8001de0 <MX_GPIO_Init+0xe8>)
  GPIO_InitStruct.Pin = RADIO_DIO_0_Pin|RADIO_DIO_1_Pin|RADIO_DIO_2_Pin;
 8001d7c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d7e:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d82:	f7fe fcad 	bl	80006e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_DIO_3_Pin;
 8001d86:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d88:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(RADIO_DIO_3_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RADIO_ANT_SWITCH_TX_BOOST_Pin|RADIO_RESET_Pin|RADIO_ANT_SWITCH_TX_RFO_Pin;
 8001d8a:	2607      	movs	r6, #7
  GPIO_InitStruct.Pin = RADIO_DIO_3_Pin;
 8001d8c:	019b      	lsls	r3, r3, #6
  HAL_GPIO_Init(RADIO_DIO_3_GPIO_Port, &GPIO_InitStruct);
 8001d8e:	a905      	add	r1, sp, #20
 8001d90:	4811      	ldr	r0, [pc, #68]	; (8001dd8 <MX_GPIO_Init+0xe0>)
  GPIO_InitStruct.Pin = RADIO_DIO_3_Pin;
 8001d92:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(RADIO_DIO_3_GPIO_Port, &GPIO_InitStruct);
 8001d96:	f7fe fca3 	bl	80006e0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d9a:	a905      	add	r1, sp, #20
 8001d9c:	480e      	ldr	r0, [pc, #56]	; (8001dd8 <MX_GPIO_Init+0xe0>)
  GPIO_InitStruct.Pin = RADIO_ANT_SWITCH_TX_BOOST_Pin|RADIO_RESET_Pin|RADIO_ANT_SWITCH_TX_RFO_Pin;
 8001d9e:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da0:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da2:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001da4:	9708      	str	r7, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001da6:	f7fe fc9b 	bl	80006e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8001daa:	0022      	movs	r2, r4
 8001dac:	0021      	movs	r1, r4
 8001dae:	2005      	movs	r0, #5
 8001db0:	f7fe fb8e 	bl	80004d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8001db4:	2005      	movs	r0, #5
 8001db6:	f7fe fbbb 	bl	8000530 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001dba:	0022      	movs	r2, r4
 8001dbc:	0021      	movs	r1, r4
 8001dbe:	0030      	movs	r0, r6
 8001dc0:	f7fe fb86 	bl	80004d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001dc4:	0030      	movs	r0, r6
 8001dc6:	f7fe fbb3 	bl	8000530 <HAL_NVIC_EnableIRQ>

}
 8001dca:	b00b      	add	sp, #44	; 0x2c
 8001dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dce:	46c0      	nop			; (mov r8, r8)
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	00009002 	.word	0x00009002
 8001dd8:	50000800 	.word	0x50000800
 8001ddc:	10110000 	.word	0x10110000
 8001de0:	50000400 	.word	0x50000400

08001de4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001de4:	b530      	push	{r4, r5, lr}
 8001de6:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001de8:	2238      	movs	r2, #56	; 0x38
 8001dea:	2100      	movs	r1, #0
 8001dec:	a80e      	add	r0, sp, #56	; 0x38
 8001dee:	f000 fb17 	bl	8002420 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001df2:	2214      	movs	r2, #20
 8001df4:	2100      	movs	r1, #0
 8001df6:	4668      	mov	r0, sp
 8001df8:	f000 fb12 	bl	8002420 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dfc:	2224      	movs	r2, #36	; 0x24
 8001dfe:	2100      	movs	r1, #0
 8001e00:	a805      	add	r0, sp, #20
 8001e02:	f000 fb0d 	bl	8002420 <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e06:	4919      	ldr	r1, [pc, #100]	; (8001e6c <SystemClock_Config+0x88>)
 8001e08:	4a19      	ldr	r2, [pc, #100]	; (8001e70 <SystemClock_Config+0x8c>)
 8001e0a:	680b      	ldr	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e0c:	2400      	movs	r4, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e0e:	401a      	ands	r2, r3
 8001e10:	2380      	movs	r3, #128	; 0x80
 8001e12:	011b      	lsls	r3, r3, #4
 8001e14:	4313      	orrs	r3, r2
 8001e16:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001e18:	230a      	movs	r3, #10
 8001e1a:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e1c:	3306      	adds	r3, #6
 8001e1e:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e20:	3b0e      	subs	r3, #14
 8001e22:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 8001e24:	2380      	movs	r3, #128	; 0x80
 8001e26:	031b      	lsls	r3, r3, #12
 8001e28:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8001e2a:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e2c:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8001e2e:	041b      	lsls	r3, r3, #16
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e30:	a80e      	add	r0, sp, #56	; 0x38
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8001e32:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e34:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001e36:	9513      	str	r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e38:	9419      	str	r4, [sp, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e3a:	f7fe fd5d 	bl	80008f8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e3e:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e40:	0029      	movs	r1, r5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e42:	9300      	str	r3, [sp, #0]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e44:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e46:	3b0c      	subs	r3, #12
 8001e48:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e4a:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e4c:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e4e:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e50:	f7fe ffda 	bl	8000e08 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8001e54:	2323      	movs	r3, #35	; 0x23
 8001e56:	9305      	str	r3, [sp, #20]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001e58:	2380      	movs	r3, #128	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e5a:	a805      	add	r0, sp, #20
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001e5c:	029b      	lsls	r3, r3, #10
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001e5e:	9407      	str	r4, [sp, #28]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e60:	9408      	str	r4, [sp, #32]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001e62:	9306      	str	r3, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e64:	f7ff f8a8 	bl	8000fb8 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001e68:	b01d      	add	sp, #116	; 0x74
 8001e6a:	bd30      	pop	{r4, r5, pc}
 8001e6c:	40007000 	.word	0x40007000
 8001e70:	ffffe7ff 	.word	0xffffe7ff

08001e74 <main>:
{
 8001e74:	b510      	push	{r4, lr}
  HAL_Init();
 8001e76:	f7fe fb09 	bl	800048c <HAL_Init>
  SystemClock_Config();
 8001e7a:	f7ff ffb3 	bl	8001de4 <SystemClock_Config>
  MX_GPIO_Init();
 8001e7e:	f7ff ff3b 	bl	8001cf8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e82:	f7ff ff23 	bl	8001ccc <MX_DMA_Init>
  MX_RTC_Init();
 8001e86:	f000 f80b 	bl	8001ea0 <MX_RTC_Init>
  MX_SPI1_Init();
 8001e8a:	f000 f885 	bl	8001f98 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001e8e:	f000 f8a5 	bl	8001fdc <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8001e92:	f000 f9b3 	bl	80021fc <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001e96:	f000 f995 	bl	80021c4 <MX_USART1_UART_Init>
 8001e9a:	e7fe      	b.n	8001e9a <main+0x26>

08001e9c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001e9c:	4770      	bx	lr
	...

08001ea0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
  RTC_TimeTypeDef sTime = {0};
  RTC_DateTypeDef sDate = {0};
 8001ea2:	2400      	movs	r4, #0
{
 8001ea4:	b091      	sub	sp, #68	; 0x44
  RTC_TimeTypeDef sTime = {0};
 8001ea6:	af01      	add	r7, sp, #4
 8001ea8:	2214      	movs	r2, #20
 8001eaa:	2100      	movs	r1, #0
 8001eac:	0038      	movs	r0, r7
  RTC_AlarmTypeDef sAlarm = {0};
 8001eae:	ae06      	add	r6, sp, #24
  RTC_TimeTypeDef sTime = {0};
 8001eb0:	f000 fab6 	bl	8002420 <memset>
  RTC_AlarmTypeDef sAlarm = {0};
 8001eb4:	2228      	movs	r2, #40	; 0x28
 8001eb6:	0021      	movs	r1, r4
 8001eb8:	0030      	movs	r0, r6
  RTC_DateTypeDef sDate = {0};
 8001eba:	9400      	str	r4, [sp, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8001ebc:	f000 fab0 	bl	8002420 <memset>

  /**Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8001ec0:	4d26      	ldr	r5, [pc, #152]	; (8001f5c <MX_RTC_Init+0xbc>)
 8001ec2:	4b27      	ldr	r3, [pc, #156]	; (8001f60 <MX_RTC_Init+0xc0>)
  hrtc.Init.SynchPrediv = 1023;
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ec4:	0028      	movs	r0, r5
  hrtc.Instance = RTC;
 8001ec6:	602b      	str	r3, [r5, #0]
  hrtc.Init.AsynchPrediv = 31;
 8001ec8:	231f      	movs	r3, #31
 8001eca:	60ab      	str	r3, [r5, #8]
  hrtc.Init.SynchPrediv = 1023;
 8001ecc:	4b25      	ldr	r3, [pc, #148]	; (8001f64 <MX_RTC_Init+0xc4>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001ece:	606c      	str	r4, [r5, #4]
  hrtc.Init.SynchPrediv = 1023;
 8001ed0:	60eb      	str	r3, [r5, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001ed2:	612c      	str	r4, [r5, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001ed4:	616c      	str	r4, [r5, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001ed6:	61ac      	str	r4, [r5, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001ed8:	61ec      	str	r4, [r5, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001eda:	f7ff f9b1 	bl	8001240 <HAL_RTC_Init>
 8001ede:	42a0      	cmp	r0, r4
 8001ee0:	d001      	beq.n	8001ee6 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001ee2:	f7ff ffdb 	bl	8001e9c <Error_Handler>
  sTime.Hours = 0;
  sTime.Minutes = 0;
  sTime.Seconds = 0;
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	0039      	movs	r1, r7
 8001eea:	0028      	movs	r0, r5
  sTime.Hours = 0;
 8001eec:	703c      	strb	r4, [r7, #0]
  sTime.Minutes = 0;
 8001eee:	707c      	strb	r4, [r7, #1]
  sTime.Seconds = 0;
 8001ef0:	70bc      	strb	r4, [r7, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001ef2:	60fc      	str	r4, [r7, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001ef4:	613c      	str	r4, [r7, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001ef6:	f7ff fa0b 	bl	8001310 <HAL_RTC_SetTime>
 8001efa:	2800      	cmp	r0, #0
 8001efc:	d001      	beq.n	8001f02 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001efe:	f7ff ffcd 	bl	8001e9c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001f02:	466a      	mov	r2, sp
 8001f04:	2301      	movs	r3, #1
  sDate.Month = RTC_MONTH_JANUARY;
  sDate.Date = 1;
  sDate.Year = 0;
 8001f06:	2400      	movs	r4, #0
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001f08:	7013      	strb	r3, [r2, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001f0a:	7053      	strb	r3, [r2, #1]
  sDate.Date = 1;
 8001f0c:	7093      	strb	r3, [r2, #2]
  sDate.Year = 0;
 8001f0e:	70d4      	strb	r4, [r2, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001f10:	4669      	mov	r1, sp
 8001f12:	0022      	movs	r2, r4
 8001f14:	0028      	movs	r0, r5
 8001f16:	f7ff fa79 	bl	800140c <HAL_RTC_SetDate>
 8001f1a:	42a0      	cmp	r0, r4
 8001f1c:	d001      	beq.n	8001f22 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8001f1e:	f7ff ffbd 	bl	8001e9c <Error_Handler>
  sAlarm.AlarmTime.Seconds = 0;
  sAlarm.AlarmTime.SubSeconds = 0;
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 8001f22:	23f0      	movs	r3, #240	; 0xf0
 8001f24:	051b      	lsls	r3, r3, #20
 8001f26:	61b3      	str	r3, [r6, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
  sAlarm.AlarmDateWeekDay = 1;
 8001f28:	2319      	movs	r3, #25
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	446b      	add	r3, sp
 8001f2e:	77da      	strb	r2, [r3, #31]
  sAlarm.Alarm = RTC_ALARM_A;
 8001f30:	2380      	movs	r3, #128	; 0x80
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001f32:	2200      	movs	r2, #0
  sAlarm.Alarm = RTC_ALARM_A;
 8001f34:	005b      	lsls	r3, r3, #1
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001f36:	0031      	movs	r1, r6
 8001f38:	0028      	movs	r0, r5
  sAlarm.AlarmTime.Hours = 0;
 8001f3a:	7034      	strb	r4, [r6, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8001f3c:	7074      	strb	r4, [r6, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8001f3e:	70b4      	strb	r4, [r6, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8001f40:	6074      	str	r4, [r6, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001f42:	60f4      	str	r4, [r6, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001f44:	6134      	str	r4, [r6, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001f46:	6174      	str	r4, [r6, #20]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001f48:	61f4      	str	r4, [r6, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001f4a:	6273      	str	r3, [r6, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001f4c:	f7ff faca 	bl	80014e4 <HAL_RTC_SetAlarm_IT>
 8001f50:	2800      	cmp	r0, #0
 8001f52:	d001      	beq.n	8001f58 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8001f54:	f7ff ffa2 	bl	8001e9c <Error_Handler>
  }

}
 8001f58:	b011      	add	sp, #68	; 0x44
 8001f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f5c:	20000024 	.word	0x20000024
 8001f60:	40002800 	.word	0x40002800
 8001f64:	000003ff 	.word	0x000003ff

08001f68 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 8001f68:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <HAL_RTC_MspInit+0x28>)
 8001f6a:	6802      	ldr	r2, [r0, #0]
{
 8001f6c:	b510      	push	{r4, lr}
  if(rtcHandle->Instance==RTC)
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d10d      	bne.n	8001f8e <HAL_RTC_MspInit+0x26>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f72:	2380      	movs	r3, #128	; 0x80
 8001f74:	4a07      	ldr	r2, [pc, #28]	; (8001f94 <HAL_RTC_MspInit+0x2c>)
 8001f76:	02db      	lsls	r3, r3, #11
 8001f78:	6d11      	ldr	r1, [r2, #80]	; 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8001f7a:	2002      	movs	r0, #2
    __HAL_RCC_RTC_ENABLE();
 8001f7c:	430b      	orrs	r3, r1
 8001f7e:	6513      	str	r3, [r2, #80]	; 0x50
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8001f80:	2200      	movs	r2, #0
 8001f82:	0011      	movs	r1, r2
 8001f84:	f7fe faa4 	bl	80004d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8001f88:	2002      	movs	r0, #2
 8001f8a:	f7fe fad1 	bl	8000530 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001f8e:	bd10      	pop	{r4, pc}
 8001f90:	40002800 	.word	0x40002800
 8001f94:	40021000 	.word	0x40021000

08001f98 <MX_SPI1_Init>:

/* SPI1 init function */
void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
 8001f98:	480e      	ldr	r0, [pc, #56]	; (8001fd4 <MX_SPI1_Init+0x3c>)
 8001f9a:	4b0f      	ldr	r3, [pc, #60]	; (8001fd8 <MX_SPI1_Init+0x40>)
{
 8001f9c:	b510      	push	{r4, lr}
  hspi1.Instance = SPI1;
 8001f9e:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001fa0:	2382      	movs	r3, #130	; 0x82
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001fa2:	2280      	movs	r2, #128	; 0x80
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001fa8:	2300      	movs	r3, #0
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001faa:	0092      	lsls	r2, r2, #2
 8001fac:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001fae:	3ae1      	subs	r2, #225	; 0xe1
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001fb0:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fb2:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fb4:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fb6:	6143      	str	r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001fb8:	3aff      	subs	r2, #255	; 0xff
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fba:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fbc:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fbe:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001fc0:	3307      	adds	r3, #7
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001fc2:	61c2      	str	r2, [r0, #28]
  hspi1.Init.CRCPolynomial = 7;
 8001fc4:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001fc6:	f7ff fb59 	bl	800167c <HAL_SPI_Init>
 8001fca:	2800      	cmp	r0, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_SPI1_Init+0x3a>
  {
    Error_Handler();
 8001fce:	f7ff ff65 	bl	8001e9c <Error_Handler>
  }

}
 8001fd2:	bd10      	pop	{r4, pc}
 8001fd4:	200000a0 	.word	0x200000a0
 8001fd8:	40013000 	.word	0x40013000

08001fdc <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{

  hspi2.Instance = SPI2;
 8001fdc:	480c      	ldr	r0, [pc, #48]	; (8002010 <MX_SPI2_Init+0x34>)
 8001fde:	4b0d      	ldr	r3, [pc, #52]	; (8002014 <MX_SPI2_Init+0x38>)
{
 8001fe0:	b510      	push	{r4, lr}
  hspi2.Instance = SPI2;
 8001fe2:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001fe4:	2382      	movs	r3, #130	; 0x82
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001fea:	2300      	movs	r3, #0
 8001fec:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fee:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ff0:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ff2:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8001ff4:	6183      	str	r3, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ff6:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ff8:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ffa:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ffc:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001ffe:	3307      	adds	r3, #7
 8002000:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002002:	f7ff fb3b 	bl	800167c <HAL_SPI_Init>
 8002006:	2800      	cmp	r0, #0
 8002008:	d001      	beq.n	800200e <MX_SPI2_Init+0x32>
  {
    Error_Handler();
 800200a:	f7ff ff47 	bl	8001e9c <Error_Handler>
  }

}
 800200e:	bd10      	pop	{r4, pc}
 8002010:	20000048 	.word	0x20000048
 8002014:	40003800 	.word	0x40003800

08002018 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002018:	b530      	push	{r4, r5, lr}
 800201a:	0004      	movs	r4, r0
 800201c:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800201e:	2214      	movs	r2, #20
 8002020:	2100      	movs	r1, #0
 8002022:	a803      	add	r0, sp, #12
 8002024:	f000 f9fc 	bl	8002420 <memset>
  if(spiHandle->Instance==SPI1)
 8002028:	6823      	ldr	r3, [r4, #0]
 800202a:	4a25      	ldr	r2, [pc, #148]	; (80020c0 <HAL_SPI_MspInit+0xa8>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d12c      	bne.n	800208a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002030:	2280      	movs	r2, #128	; 0x80
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002032:	2402      	movs	r4, #2
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002034:	4b23      	ldr	r3, [pc, #140]	; (80020c4 <HAL_SPI_MspInit+0xac>)
 8002036:	0152      	lsls	r2, r2, #5
 8002038:	6b59      	ldr	r1, [r3, #52]	; 0x34
    PA6     ------> SPI1_MISO 
    */
    GPIO_InitStruct.Pin = RADIO_SCLK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800203a:	2503      	movs	r5, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 800203c:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203e:	2101      	movs	r1, #1
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002040:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(RADIO_SCLK_GPIO_Port, &GPIO_InitStruct);
 8002044:	4820      	ldr	r0, [pc, #128]	; (80020c8 <HAL_SPI_MspInit+0xb0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002046:	4322      	orrs	r2, r4
 8002048:	62da      	str	r2, [r3, #44]	; 0x2c
 800204a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800204c:	4022      	ands	r2, r4
 800204e:	9200      	str	r2, [sp, #0]
 8002050:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002054:	430a      	orrs	r2, r1
 8002056:	62da      	str	r2, [r3, #44]	; 0x2c
 8002058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205a:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800205c:	400b      	ands	r3, r1
 800205e:	9301      	str	r3, [sp, #4]
 8002060:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = RADIO_SCLK_Pin;
 8002062:	2308      	movs	r3, #8
    HAL_GPIO_Init(RADIO_SCLK_GPIO_Port, &GPIO_InitStruct);
 8002064:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = RADIO_SCLK_Pin;
 8002066:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002068:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(RADIO_SCLK_GPIO_Port, &GPIO_InitStruct);
 800206a:	f7fe fb39 	bl	80006e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RADIO_MOSI_Pin|RADIO_MISO_Pin;
 800206e:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002070:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pin = RADIO_MOSI_Pin|RADIO_MISO_Pin;
 8002072:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002074:	2300      	movs	r3, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002076:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002078:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800207a:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800207c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207e:	a903      	add	r1, sp, #12
 8002080:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002082:	f7fe fb2d 	bl	80006e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002086:	b009      	add	sp, #36	; 0x24
 8002088:	bd30      	pop	{r4, r5, pc}
  else if(spiHandle->Instance==SPI2)
 800208a:	4a10      	ldr	r2, [pc, #64]	; (80020cc <HAL_SPI_MspInit+0xb4>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d1fa      	bne.n	8002086 <HAL_SPI_MspInit+0x6e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002090:	2280      	movs	r2, #128	; 0x80
 8002092:	4b0c      	ldr	r3, [pc, #48]	; (80020c4 <HAL_SPI_MspInit+0xac>)
 8002094:	01d2      	lsls	r2, r2, #7
 8002096:	6b99      	ldr	r1, [r3, #56]	; 0x38
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002098:	480b      	ldr	r0, [pc, #44]	; (80020c8 <HAL_SPI_MspInit+0xb0>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 800209a:	430a      	orrs	r2, r1
 800209c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800209e:	2202      	movs	r2, #2
 80020a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020a2:	4311      	orrs	r1, r2
 80020a4:	62d9      	str	r1, [r3, #44]	; 0x2c
 80020a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a8:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020aa:	4013      	ands	r3, r2
 80020ac:	9302      	str	r3, [sp, #8]
 80020ae:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12;
 80020b0:	23f0      	movs	r3, #240	; 0xf0
 80020b2:	021b      	lsls	r3, r3, #8
 80020b4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b6:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b8:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ba:	9306      	str	r3, [sp, #24]
 80020bc:	e7e1      	b.n	8002082 <HAL_SPI_MspInit+0x6a>
 80020be:	46c0      	nop			; (mov r8, r8)
 80020c0:	40013000 	.word	0x40013000
 80020c4:	40021000 	.word	0x40021000
 80020c8:	50000400 	.word	0x50000400
 80020cc:	40003800 	.word	0x40003800

080020d0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020d0:	2201      	movs	r2, #1
 80020d2:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <HAL_MspInit+0x18>)
 80020d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020d6:	430a      	orrs	r2, r1
 80020d8:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80020da:	2280      	movs	r2, #128	; 0x80
 80020dc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80020de:	0552      	lsls	r2, r2, #21
 80020e0:	430a      	orrs	r2, r1
 80020e2:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020e4:	4770      	bx	lr
 80020e6:	46c0      	nop			; (mov r8, r8)
 80020e8:	40021000 	.word	0x40021000

080020ec <NMI_Handler>:
 80020ec:	4770      	bx	lr

080020ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020ee:	e7fe      	b.n	80020ee <HardFault_Handler>

080020f0 <SVC_Handler>:
 80020f0:	4770      	bx	lr

080020f2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020f2:	4770      	bx	lr

080020f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020f4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020f6:	f7fe f9dd 	bl	80004b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020fa:	bd10      	pop	{r4, pc}

080020fc <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 80020fc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80020fe:	4802      	ldr	r0, [pc, #8]	; (8002108 <RTC_IRQHandler+0xc>)
 8002100:	f7ff f838 	bl	8001174 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8002104:	bd10      	pop	{r4, pc}
 8002106:	46c0      	nop			; (mov r8, r8)
 8002108:	20000024 	.word	0x20000024

0800210c <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800210c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800210e:	2001      	movs	r0, #1
 8002110:	f7fe fbaa 	bl	8000868 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002114:	2002      	movs	r0, #2
 8002116:	f7fe fba7 	bl	8000868 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800211a:	bd10      	pop	{r4, pc}

0800211c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800211c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800211e:	2010      	movs	r0, #16
 8002120:	f7fe fba2 	bl	8000868 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002124:	2080      	movs	r0, #128	; 0x80
 8002126:	0180      	lsls	r0, r0, #6
 8002128:	f7fe fb9e 	bl	8000868 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800212c:	bd10      	pop	{r4, pc}
	...

08002130 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002130:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002132:	4803      	ldr	r0, [pc, #12]	; (8002140 <DMA1_Channel2_3_IRQHandler+0x10>)
 8002134:	f7fe fa89 	bl	800064a <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002138:	4802      	ldr	r0, [pc, #8]	; (8002144 <DMA1_Channel2_3_IRQHandler+0x14>)
 800213a:	f7fe fa86 	bl	800064a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800213e:	bd10      	pop	{r4, pc}
 8002140:	200000f8 	.word	0x200000f8
 8002144:	20000140 	.word	0x20000140

08002148 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002148:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800214a:	4802      	ldr	r0, [pc, #8]	; (8002154 <USART1_IRQHandler+0xc>)
 800214c:	f7ff faea 	bl	8001724 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002150:	bd10      	pop	{r4, pc}
 8002152:	46c0      	nop			; (mov r8, r8)
 8002154:	20000188 	.word	0x20000188

08002158 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002158:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800215a:	4802      	ldr	r0, [pc, #8]	; (8002164 <USART2_IRQHandler+0xc>)
 800215c:	f7ff fae2 	bl	8001724 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002160:	bd10      	pop	{r4, pc}
 8002162:	46c0      	nop			; (mov r8, r8)
 8002164:	20000208 	.word	0x20000208

08002168 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8002168:	2280      	movs	r2, #128	; 0x80
 800216a:	4b10      	ldr	r3, [pc, #64]	; (80021ac <SystemInit+0x44>)
 800216c:	0052      	lsls	r2, r2, #1
 800216e:	6819      	ldr	r1, [r3, #0]
 8002170:	430a      	orrs	r2, r1
 8002172:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8002174:	68da      	ldr	r2, [r3, #12]
 8002176:	490e      	ldr	r1, [pc, #56]	; (80021b0 <SystemInit+0x48>)
 8002178:	400a      	ands	r2, r1
 800217a:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	490d      	ldr	r1, [pc, #52]	; (80021b4 <SystemInit+0x4c>)
 8002180:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002182:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8002184:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	438a      	bics	r2, r1
 800218a:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	490a      	ldr	r1, [pc, #40]	; (80021b8 <SystemInit+0x50>)
 8002190:	400a      	ands	r2, r1
 8002192:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8002194:	68da      	ldr	r2, [r3, #12]
 8002196:	4909      	ldr	r1, [pc, #36]	; (80021bc <SystemInit+0x54>)
 8002198:	400a      	ands	r2, r1
 800219a:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800219c:	2200      	movs	r2, #0
 800219e:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80021a0:	2280      	movs	r2, #128	; 0x80
 80021a2:	4b07      	ldr	r3, [pc, #28]	; (80021c0 <SystemInit+0x58>)
 80021a4:	0512      	lsls	r2, r2, #20
 80021a6:	609a      	str	r2, [r3, #8]
#endif
}
 80021a8:	4770      	bx	lr
 80021aa:	46c0      	nop			; (mov r8, r8)
 80021ac:	40021000 	.word	0x40021000
 80021b0:	88ff400c 	.word	0x88ff400c
 80021b4:	fef6fff6 	.word	0xfef6fff6
 80021b8:	fffbffff 	.word	0xfffbffff
 80021bc:	ff02ffff 	.word	0xff02ffff
 80021c0:	e000ed00 	.word	0xe000ed00

080021c4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
 80021c4:	480b      	ldr	r0, [pc, #44]	; (80021f4 <MX_USART1_UART_Init+0x30>)
 80021c6:	4b0c      	ldr	r3, [pc, #48]	; (80021f8 <MX_USART1_UART_Init+0x34>)
{
 80021c8:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 80021ca:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 80021cc:	2396      	movs	r3, #150	; 0x96
 80021ce:	019b      	lsls	r3, r3, #6
 80021d0:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021d2:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021d4:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021d6:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021d8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021da:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021dc:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021de:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021e0:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021e2:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021e4:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021e6:	f7ff fd3d 	bl	8001c64 <HAL_UART_Init>
 80021ea:	2800      	cmp	r0, #0
 80021ec:	d001      	beq.n	80021f2 <MX_USART1_UART_Init+0x2e>
  {
    Error_Handler();
 80021ee:	f7ff fe55 	bl	8001e9c <Error_Handler>
  }

}
 80021f2:	bd10      	pop	{r4, pc}
 80021f4:	20000188 	.word	0x20000188
 80021f8:	40013800 	.word	0x40013800

080021fc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
 80021fc:	480b      	ldr	r0, [pc, #44]	; (800222c <MX_USART2_UART_Init+0x30>)
 80021fe:	4b0c      	ldr	r3, [pc, #48]	; (8002230 <MX_USART2_UART_Init+0x34>)
{
 8002200:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 8002202:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8002204:	23e1      	movs	r3, #225	; 0xe1
 8002206:	025b      	lsls	r3, r3, #9
 8002208:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800220a:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800220c:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 800220e:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002210:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002212:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002214:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002216:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002218:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800221a:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800221c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800221e:	f7ff fd21 	bl	8001c64 <HAL_UART_Init>
 8002222:	2800      	cmp	r0, #0
 8002224:	d001      	beq.n	800222a <MX_USART2_UART_Init+0x2e>
  {
    Error_Handler();
 8002226:	f7ff fe39 	bl	8001e9c <Error_Handler>
  }

}
 800222a:	bd10      	pop	{r4, pc}
 800222c:	20000208 	.word	0x20000208
 8002230:	40004400 	.word	0x40004400

08002234 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002236:	0005      	movs	r5, r0
 8002238:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800223a:	2214      	movs	r2, #20
 800223c:	2100      	movs	r1, #0
 800223e:	a803      	add	r0, sp, #12
 8002240:	f000 f8ee 	bl	8002420 <memset>
  if(uartHandle->Instance==USART1)
 8002244:	682b      	ldr	r3, [r5, #0]
 8002246:	4a47      	ldr	r2, [pc, #284]	; (8002364 <HAL_UART_MspInit+0x130>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d165      	bne.n	8002318 <HAL_UART_MspInit+0xe4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800224c:	2280      	movs	r2, #128	; 0x80
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800224e:	2402      	movs	r4, #2
    __HAL_RCC_USART1_CLK_ENABLE();
 8002250:	4b45      	ldr	r3, [pc, #276]	; (8002368 <HAL_UART_MspInit+0x134>)
 8002252:	01d2      	lsls	r2, r2, #7
 8002254:	6b59      	ldr	r1, [r3, #52]	; 0x34
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002256:	2703      	movs	r7, #3
    __HAL_RCC_USART1_CLK_ENABLE();
 8002258:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800225a:	2101      	movs	r1, #1
    __HAL_RCC_USART1_CLK_ENABLE();
 800225c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800225e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002260:	4842      	ldr	r0, [pc, #264]	; (800236c <HAL_UART_MspInit+0x138>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002262:	4322      	orrs	r2, r4
 8002264:	62da      	str	r2, [r3, #44]	; 0x2c
 8002266:	6ada      	ldr	r2, [r3, #44]	; 0x2c

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002268:	2600      	movs	r6, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800226a:	4022      	ands	r2, r4
 800226c:	9200      	str	r2, [sp, #0]
 800226e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002272:	430a      	orrs	r2, r1
 8002274:	62da      	str	r2, [r3, #44]	; 0x2c
 8002276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002278:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800227a:	400b      	ands	r3, r1
 800227c:	9301      	str	r3, [sp, #4]
 800227e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002280:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002282:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002284:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002286:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002288:	f7fe fa2a 	bl	80006e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800228c:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800228e:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002294:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002296:	05c0      	lsls	r0, r0, #23
 8002298:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229a:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800229c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229e:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a0:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a2:	f7fe fa1d 	bl	80006e0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 80022a6:	4c32      	ldr	r4, [pc, #200]	; (8002370 <HAL_UART_MspInit+0x13c>)
 80022a8:	4b32      	ldr	r3, [pc, #200]	; (8002374 <HAL_UART_MspInit+0x140>)
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80022aa:	0020      	movs	r0, r4
    hdma_usart1_rx.Instance = DMA1_Channel3;
 80022ac:	6023      	str	r3, [r4, #0]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022ae:	2380      	movs	r3, #128	; 0x80
 80022b0:	6123      	str	r3, [r4, #16]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80022b2:	3b60      	subs	r3, #96	; 0x60
    hdma_usart1_rx.Init.Request = DMA_REQUEST_3;
 80022b4:	6067      	str	r7, [r4, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022b6:	60a6      	str	r6, [r4, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022b8:	60e6      	str	r6, [r4, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022ba:	6166      	str	r6, [r4, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022bc:	61a6      	str	r6, [r4, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80022be:	61e3      	str	r3, [r4, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80022c0:	6226      	str	r6, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80022c2:	f7fe f959 	bl	8000578 <HAL_DMA_Init>
 80022c6:	42b0      	cmp	r0, r6
 80022c8:	d001      	beq.n	80022ce <HAL_UART_MspInit+0x9a>
    {
      Error_Handler();
 80022ca:	f7ff fde7 	bl	8001e9c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 80022ce:	4b2a      	ldr	r3, [pc, #168]	; (8002378 <HAL_UART_MspInit+0x144>)
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80022d0:	66ec      	str	r4, [r5, #108]	; 0x6c
 80022d2:	62a5      	str	r5, [r4, #40]	; 0x28
    hdma_usart1_tx.Instance = DMA1_Channel2;
 80022d4:	4c29      	ldr	r4, [pc, #164]	; (800237c <HAL_UART_MspInit+0x148>)
    hdma_usart1_tx.Init.Request = DMA_REQUEST_3;
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022d6:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_tx.Instance = DMA1_Channel2;
 80022d8:	6023      	str	r3, [r4, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_3;
 80022da:	2303      	movs	r3, #3
 80022dc:	6063      	str	r3, [r4, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022de:	330d      	adds	r3, #13
 80022e0:	60a3      	str	r3, [r4, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022e2:	2300      	movs	r3, #0
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022e4:	6122      	str	r2, [r4, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80022e6:	0020      	movs	r0, r4
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 80022e8:	3a60      	subs	r2, #96	; 0x60
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022ea:	60e3      	str	r3, [r4, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022ec:	6163      	str	r3, [r4, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022ee:	61a3      	str	r3, [r4, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 80022f0:	61e2      	str	r2, [r4, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80022f2:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80022f4:	f7fe f940 	bl	8000578 <HAL_DMA_Init>
 80022f8:	2800      	cmp	r0, #0
 80022fa:	d001      	beq.n	8002300 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80022fc:	f7ff fdce 	bl	8001e9c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002300:	2200      	movs	r2, #0
 8002302:	201b      	movs	r0, #27
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002304:	66ac      	str	r4, [r5, #104]	; 0x68
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002306:	0011      	movs	r1, r2
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002308:	62a5      	str	r5, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800230a:	f7fe f8e1 	bl	80004d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800230e:	201b      	movs	r0, #27
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002310:	f7fe f90e 	bl	8000530 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002314:	b009      	add	sp, #36	; 0x24
 8002316:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(uartHandle->Instance==USART2)
 8002318:	4a19      	ldr	r2, [pc, #100]	; (8002380 <HAL_UART_MspInit+0x14c>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d1fa      	bne.n	8002314 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800231e:	2280      	movs	r2, #128	; 0x80
 8002320:	4b11      	ldr	r3, [pc, #68]	; (8002368 <HAL_UART_MspInit+0x134>)
 8002322:	0292      	lsls	r2, r2, #10
 8002324:	6b99      	ldr	r1, [r3, #56]	; 0x38
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002326:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_ENABLE();
 8002328:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800232a:	2101      	movs	r1, #1
    __HAL_RCC_USART2_CLK_ENABLE();
 800232c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800232e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002330:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002332:	430a      	orrs	r2, r1
 8002334:	62da      	str	r2, [r3, #44]	; 0x2c
 8002336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002338:	400b      	ands	r3, r1
 800233a:	9302      	str	r3, [sp, #8]
 800233c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800233e:	230c      	movs	r3, #12
 8002340:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002342:	3b0a      	subs	r3, #10
 8002344:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002346:	185b      	adds	r3, r3, r1
 8002348:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800234a:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800234c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800234e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002350:	f7fe f9c6 	bl	80006e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002354:	2200      	movs	r2, #0
 8002356:	201c      	movs	r0, #28
 8002358:	0011      	movs	r1, r2
 800235a:	f7fe f8b9 	bl	80004d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800235e:	201c      	movs	r0, #28
 8002360:	e7d6      	b.n	8002310 <HAL_UART_MspInit+0xdc>
 8002362:	46c0      	nop			; (mov r8, r8)
 8002364:	40013800 	.word	0x40013800
 8002368:	40021000 	.word	0x40021000
 800236c:	50000400 	.word	0x50000400
 8002370:	20000140 	.word	0x20000140
 8002374:	40020030 	.word	0x40020030
 8002378:	4002001c 	.word	0x4002001c
 800237c:	200000f8 	.word	0x200000f8
 8002380:	40004400 	.word	0x40004400

08002384 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002384:	480d      	ldr	r0, [pc, #52]	; (80023bc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002386:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8002388:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800238a:	e003      	b.n	8002394 <LoopCopyDataInit>

0800238c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800238c:	4b0c      	ldr	r3, [pc, #48]	; (80023c0 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 800238e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002390:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002392:	3104      	adds	r1, #4

08002394 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8002394:	480b      	ldr	r0, [pc, #44]	; (80023c4 <LoopForever+0xa>)
  ldr  r3, =_edata
 8002396:	4b0c      	ldr	r3, [pc, #48]	; (80023c8 <LoopForever+0xe>)
  adds  r2, r0, r1
 8002398:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800239a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800239c:	d3f6      	bcc.n	800238c <CopyDataInit>
  ldr  r2, =_sbss
 800239e:	4a0b      	ldr	r2, [pc, #44]	; (80023cc <LoopForever+0x12>)
  b  LoopFillZerobss
 80023a0:	e002      	b.n	80023a8 <LoopFillZerobss>

080023a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80023a2:	2300      	movs	r3, #0
  str  r3, [r2]
 80023a4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023a6:	3204      	adds	r2, #4

080023a8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80023a8:	4b09      	ldr	r3, [pc, #36]	; (80023d0 <LoopForever+0x16>)
  cmp  r2, r3
 80023aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80023ac:	d3f9      	bcc.n	80023a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80023ae:	f7ff fedb 	bl	8002168 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023b2:	f000 f811 	bl	80023d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023b6:	f7ff fd5d 	bl	8001e74 <main>

080023ba <LoopForever>:

LoopForever:
    b LoopForever
 80023ba:	e7fe      	b.n	80023ba <LoopForever>
   ldr   r0, =_estack
 80023bc:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 80023c0:	0800248c 	.word	0x0800248c
  ldr  r0, =_sdata
 80023c4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80023c8:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 80023cc:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 80023d0:	20000288 	.word	0x20000288

080023d4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023d4:	e7fe      	b.n	80023d4 <ADC1_COMP_IRQHandler>
	...

080023d8 <__libc_init_array>:
 80023d8:	b570      	push	{r4, r5, r6, lr}
 80023da:	2600      	movs	r6, #0
 80023dc:	4d0c      	ldr	r5, [pc, #48]	; (8002410 <__libc_init_array+0x38>)
 80023de:	4c0d      	ldr	r4, [pc, #52]	; (8002414 <__libc_init_array+0x3c>)
 80023e0:	1b64      	subs	r4, r4, r5
 80023e2:	10a4      	asrs	r4, r4, #2
 80023e4:	42a6      	cmp	r6, r4
 80023e6:	d109      	bne.n	80023fc <__libc_init_array+0x24>
 80023e8:	2600      	movs	r6, #0
 80023ea:	f000 f821 	bl	8002430 <_init>
 80023ee:	4d0a      	ldr	r5, [pc, #40]	; (8002418 <__libc_init_array+0x40>)
 80023f0:	4c0a      	ldr	r4, [pc, #40]	; (800241c <__libc_init_array+0x44>)
 80023f2:	1b64      	subs	r4, r4, r5
 80023f4:	10a4      	asrs	r4, r4, #2
 80023f6:	42a6      	cmp	r6, r4
 80023f8:	d105      	bne.n	8002406 <__libc_init_array+0x2e>
 80023fa:	bd70      	pop	{r4, r5, r6, pc}
 80023fc:	00b3      	lsls	r3, r6, #2
 80023fe:	58eb      	ldr	r3, [r5, r3]
 8002400:	4798      	blx	r3
 8002402:	3601      	adds	r6, #1
 8002404:	e7ee      	b.n	80023e4 <__libc_init_array+0xc>
 8002406:	00b3      	lsls	r3, r6, #2
 8002408:	58eb      	ldr	r3, [r5, r3]
 800240a:	4798      	blx	r3
 800240c:	3601      	adds	r6, #1
 800240e:	e7f2      	b.n	80023f6 <__libc_init_array+0x1e>
 8002410:	08002484 	.word	0x08002484
 8002414:	08002484 	.word	0x08002484
 8002418:	08002484 	.word	0x08002484
 800241c:	08002488 	.word	0x08002488

08002420 <memset>:
 8002420:	0003      	movs	r3, r0
 8002422:	1882      	adds	r2, r0, r2
 8002424:	4293      	cmp	r3, r2
 8002426:	d100      	bne.n	800242a <memset+0xa>
 8002428:	4770      	bx	lr
 800242a:	7019      	strb	r1, [r3, #0]
 800242c:	3301      	adds	r3, #1
 800242e:	e7f9      	b.n	8002424 <memset+0x4>

08002430 <_init>:
 8002430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002432:	46c0      	nop			; (mov r8, r8)
 8002434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002436:	bc08      	pop	{r3}
 8002438:	469e      	mov	lr, r3
 800243a:	4770      	bx	lr

0800243c <_fini>:
 800243c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800243e:	46c0      	nop			; (mov r8, r8)
 8002440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002442:	bc08      	pop	{r3}
 8002444:	469e      	mov	lr, r3
 8002446:	4770      	bx	lr
