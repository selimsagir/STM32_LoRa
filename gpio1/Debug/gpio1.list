
gpio1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002110  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  080021d0  080021d0  000121d0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002204  08002204  00012204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800220c  0800220c  0001220c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002210  08002210  00012210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000004  20000000  08002214  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000174  20000004  08002218  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000178  08002218  00020178  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000cb84  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000021fd  00000000  00000000  0002cbb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006650  00000000  00000000  0002edad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000009b8  00000000  00000000  00035400  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000c78  00000000  00000000  00035db8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00005712  00000000  00000000  00036a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000033ca  00000000  00000000  0003c142  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003f50c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001c48  00000000  00000000  0003f588  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080021b8 	.word	0x080021b8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	080021b8 	.word	0x080021b8

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_shi>:
 800011c:	b403      	push	{r0, r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0040      	lsls	r0, r0, #1
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	5e09      	ldrsh	r1, [r1, r0]
 8000128:	0049      	lsls	r1, r1, #1
 800012a:	448e      	add	lr, r1
 800012c:	bc03      	pop	{r0, r1}
 800012e:	4770      	bx	lr

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f806 	bl	8000244 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__aeabi_idiv0>:
 8000244:	4770      	bx	lr
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uldivmod>:
 8000248:	2b00      	cmp	r3, #0
 800024a:	d111      	bne.n	8000270 <__aeabi_uldivmod+0x28>
 800024c:	2a00      	cmp	r2, #0
 800024e:	d10f      	bne.n	8000270 <__aeabi_uldivmod+0x28>
 8000250:	2900      	cmp	r1, #0
 8000252:	d100      	bne.n	8000256 <__aeabi_uldivmod+0xe>
 8000254:	2800      	cmp	r0, #0
 8000256:	d002      	beq.n	800025e <__aeabi_uldivmod+0x16>
 8000258:	2100      	movs	r1, #0
 800025a:	43c9      	mvns	r1, r1
 800025c:	1c08      	adds	r0, r1, #0
 800025e:	b407      	push	{r0, r1, r2}
 8000260:	4802      	ldr	r0, [pc, #8]	; (800026c <__aeabi_uldivmod+0x24>)
 8000262:	a102      	add	r1, pc, #8	; (adr r1, 800026c <__aeabi_uldivmod+0x24>)
 8000264:	1840      	adds	r0, r0, r1
 8000266:	9002      	str	r0, [sp, #8]
 8000268:	bd03      	pop	{r0, r1, pc}
 800026a:	46c0      	nop			; (mov r8, r8)
 800026c:	ffffffd9 	.word	0xffffffd9
 8000270:	b403      	push	{r0, r1}
 8000272:	4668      	mov	r0, sp
 8000274:	b501      	push	{r0, lr}
 8000276:	9802      	ldr	r0, [sp, #8]
 8000278:	f000 f806 	bl	8000288 <__udivmoddi4>
 800027c:	9b01      	ldr	r3, [sp, #4]
 800027e:	469e      	mov	lr, r3
 8000280:	b002      	add	sp, #8
 8000282:	bc0c      	pop	{r2, r3}
 8000284:	4770      	bx	lr
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__udivmoddi4>:
 8000288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800028a:	4657      	mov	r7, sl
 800028c:	464e      	mov	r6, r9
 800028e:	4645      	mov	r5, r8
 8000290:	46de      	mov	lr, fp
 8000292:	b5e0      	push	{r5, r6, r7, lr}
 8000294:	0004      	movs	r4, r0
 8000296:	b083      	sub	sp, #12
 8000298:	000d      	movs	r5, r1
 800029a:	4692      	mov	sl, r2
 800029c:	4699      	mov	r9, r3
 800029e:	428b      	cmp	r3, r1
 80002a0:	d82f      	bhi.n	8000302 <__udivmoddi4+0x7a>
 80002a2:	d02c      	beq.n	80002fe <__udivmoddi4+0x76>
 80002a4:	4649      	mov	r1, r9
 80002a6:	4650      	mov	r0, sl
 80002a8:	f000 f8ae 	bl	8000408 <__clzdi2>
 80002ac:	0029      	movs	r1, r5
 80002ae:	0006      	movs	r6, r0
 80002b0:	0020      	movs	r0, r4
 80002b2:	f000 f8a9 	bl	8000408 <__clzdi2>
 80002b6:	1a33      	subs	r3, r6, r0
 80002b8:	4698      	mov	r8, r3
 80002ba:	3b20      	subs	r3, #32
 80002bc:	469b      	mov	fp, r3
 80002be:	d500      	bpl.n	80002c2 <__udivmoddi4+0x3a>
 80002c0:	e074      	b.n	80003ac <__udivmoddi4+0x124>
 80002c2:	4653      	mov	r3, sl
 80002c4:	465a      	mov	r2, fp
 80002c6:	4093      	lsls	r3, r2
 80002c8:	001f      	movs	r7, r3
 80002ca:	4653      	mov	r3, sl
 80002cc:	4642      	mov	r2, r8
 80002ce:	4093      	lsls	r3, r2
 80002d0:	001e      	movs	r6, r3
 80002d2:	42af      	cmp	r7, r5
 80002d4:	d829      	bhi.n	800032a <__udivmoddi4+0xa2>
 80002d6:	d026      	beq.n	8000326 <__udivmoddi4+0x9e>
 80002d8:	465b      	mov	r3, fp
 80002da:	1ba4      	subs	r4, r4, r6
 80002dc:	41bd      	sbcs	r5, r7
 80002de:	2b00      	cmp	r3, #0
 80002e0:	da00      	bge.n	80002e4 <__udivmoddi4+0x5c>
 80002e2:	e079      	b.n	80003d8 <__udivmoddi4+0x150>
 80002e4:	2200      	movs	r2, #0
 80002e6:	2300      	movs	r3, #0
 80002e8:	9200      	str	r2, [sp, #0]
 80002ea:	9301      	str	r3, [sp, #4]
 80002ec:	2301      	movs	r3, #1
 80002ee:	465a      	mov	r2, fp
 80002f0:	4093      	lsls	r3, r2
 80002f2:	9301      	str	r3, [sp, #4]
 80002f4:	2301      	movs	r3, #1
 80002f6:	4642      	mov	r2, r8
 80002f8:	4093      	lsls	r3, r2
 80002fa:	9300      	str	r3, [sp, #0]
 80002fc:	e019      	b.n	8000332 <__udivmoddi4+0xaa>
 80002fe:	4282      	cmp	r2, r0
 8000300:	d9d0      	bls.n	80002a4 <__udivmoddi4+0x1c>
 8000302:	2200      	movs	r2, #0
 8000304:	2300      	movs	r3, #0
 8000306:	9200      	str	r2, [sp, #0]
 8000308:	9301      	str	r3, [sp, #4]
 800030a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <__udivmoddi4+0x8c>
 8000310:	601c      	str	r4, [r3, #0]
 8000312:	605d      	str	r5, [r3, #4]
 8000314:	9800      	ldr	r0, [sp, #0]
 8000316:	9901      	ldr	r1, [sp, #4]
 8000318:	b003      	add	sp, #12
 800031a:	bc3c      	pop	{r2, r3, r4, r5}
 800031c:	4690      	mov	r8, r2
 800031e:	4699      	mov	r9, r3
 8000320:	46a2      	mov	sl, r4
 8000322:	46ab      	mov	fp, r5
 8000324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000326:	42a3      	cmp	r3, r4
 8000328:	d9d6      	bls.n	80002d8 <__udivmoddi4+0x50>
 800032a:	2200      	movs	r2, #0
 800032c:	2300      	movs	r3, #0
 800032e:	9200      	str	r2, [sp, #0]
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	4643      	mov	r3, r8
 8000334:	2b00      	cmp	r3, #0
 8000336:	d0e8      	beq.n	800030a <__udivmoddi4+0x82>
 8000338:	07fb      	lsls	r3, r7, #31
 800033a:	0872      	lsrs	r2, r6, #1
 800033c:	431a      	orrs	r2, r3
 800033e:	4646      	mov	r6, r8
 8000340:	087b      	lsrs	r3, r7, #1
 8000342:	e00e      	b.n	8000362 <__udivmoddi4+0xda>
 8000344:	42ab      	cmp	r3, r5
 8000346:	d101      	bne.n	800034c <__udivmoddi4+0xc4>
 8000348:	42a2      	cmp	r2, r4
 800034a:	d80c      	bhi.n	8000366 <__udivmoddi4+0xde>
 800034c:	1aa4      	subs	r4, r4, r2
 800034e:	419d      	sbcs	r5, r3
 8000350:	2001      	movs	r0, #1
 8000352:	1924      	adds	r4, r4, r4
 8000354:	416d      	adcs	r5, r5
 8000356:	2100      	movs	r1, #0
 8000358:	3e01      	subs	r6, #1
 800035a:	1824      	adds	r4, r4, r0
 800035c:	414d      	adcs	r5, r1
 800035e:	2e00      	cmp	r6, #0
 8000360:	d006      	beq.n	8000370 <__udivmoddi4+0xe8>
 8000362:	42ab      	cmp	r3, r5
 8000364:	d9ee      	bls.n	8000344 <__udivmoddi4+0xbc>
 8000366:	3e01      	subs	r6, #1
 8000368:	1924      	adds	r4, r4, r4
 800036a:	416d      	adcs	r5, r5
 800036c:	2e00      	cmp	r6, #0
 800036e:	d1f8      	bne.n	8000362 <__udivmoddi4+0xda>
 8000370:	465b      	mov	r3, fp
 8000372:	9800      	ldr	r0, [sp, #0]
 8000374:	9901      	ldr	r1, [sp, #4]
 8000376:	1900      	adds	r0, r0, r4
 8000378:	4169      	adcs	r1, r5
 800037a:	2b00      	cmp	r3, #0
 800037c:	db22      	blt.n	80003c4 <__udivmoddi4+0x13c>
 800037e:	002b      	movs	r3, r5
 8000380:	465a      	mov	r2, fp
 8000382:	40d3      	lsrs	r3, r2
 8000384:	002a      	movs	r2, r5
 8000386:	4644      	mov	r4, r8
 8000388:	40e2      	lsrs	r2, r4
 800038a:	001c      	movs	r4, r3
 800038c:	465b      	mov	r3, fp
 800038e:	0015      	movs	r5, r2
 8000390:	2b00      	cmp	r3, #0
 8000392:	db2c      	blt.n	80003ee <__udivmoddi4+0x166>
 8000394:	0026      	movs	r6, r4
 8000396:	409e      	lsls	r6, r3
 8000398:	0033      	movs	r3, r6
 800039a:	0026      	movs	r6, r4
 800039c:	4647      	mov	r7, r8
 800039e:	40be      	lsls	r6, r7
 80003a0:	0032      	movs	r2, r6
 80003a2:	1a80      	subs	r0, r0, r2
 80003a4:	4199      	sbcs	r1, r3
 80003a6:	9000      	str	r0, [sp, #0]
 80003a8:	9101      	str	r1, [sp, #4]
 80003aa:	e7ae      	b.n	800030a <__udivmoddi4+0x82>
 80003ac:	4642      	mov	r2, r8
 80003ae:	2320      	movs	r3, #32
 80003b0:	1a9b      	subs	r3, r3, r2
 80003b2:	4652      	mov	r2, sl
 80003b4:	40da      	lsrs	r2, r3
 80003b6:	4641      	mov	r1, r8
 80003b8:	0013      	movs	r3, r2
 80003ba:	464a      	mov	r2, r9
 80003bc:	408a      	lsls	r2, r1
 80003be:	0017      	movs	r7, r2
 80003c0:	431f      	orrs	r7, r3
 80003c2:	e782      	b.n	80002ca <__udivmoddi4+0x42>
 80003c4:	4642      	mov	r2, r8
 80003c6:	2320      	movs	r3, #32
 80003c8:	1a9b      	subs	r3, r3, r2
 80003ca:	002a      	movs	r2, r5
 80003cc:	4646      	mov	r6, r8
 80003ce:	409a      	lsls	r2, r3
 80003d0:	0023      	movs	r3, r4
 80003d2:	40f3      	lsrs	r3, r6
 80003d4:	4313      	orrs	r3, r2
 80003d6:	e7d5      	b.n	8000384 <__udivmoddi4+0xfc>
 80003d8:	4642      	mov	r2, r8
 80003da:	2320      	movs	r3, #32
 80003dc:	2100      	movs	r1, #0
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	9100      	str	r1, [sp, #0]
 80003e4:	9201      	str	r2, [sp, #4]
 80003e6:	2201      	movs	r2, #1
 80003e8:	40da      	lsrs	r2, r3
 80003ea:	9201      	str	r2, [sp, #4]
 80003ec:	e782      	b.n	80002f4 <__udivmoddi4+0x6c>
 80003ee:	4642      	mov	r2, r8
 80003f0:	2320      	movs	r3, #32
 80003f2:	0026      	movs	r6, r4
 80003f4:	1a9b      	subs	r3, r3, r2
 80003f6:	40de      	lsrs	r6, r3
 80003f8:	002f      	movs	r7, r5
 80003fa:	46b4      	mov	ip, r6
 80003fc:	4097      	lsls	r7, r2
 80003fe:	4666      	mov	r6, ip
 8000400:	003b      	movs	r3, r7
 8000402:	4333      	orrs	r3, r6
 8000404:	e7c9      	b.n	800039a <__udivmoddi4+0x112>
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__clzdi2>:
 8000408:	b510      	push	{r4, lr}
 800040a:	2900      	cmp	r1, #0
 800040c:	d103      	bne.n	8000416 <__clzdi2+0xe>
 800040e:	f000 f807 	bl	8000420 <__clzsi2>
 8000412:	3020      	adds	r0, #32
 8000414:	e002      	b.n	800041c <__clzdi2+0x14>
 8000416:	1c08      	adds	r0, r1, #0
 8000418:	f000 f802 	bl	8000420 <__clzsi2>
 800041c:	bd10      	pop	{r4, pc}
 800041e:	46c0      	nop			; (mov r8, r8)

08000420 <__clzsi2>:
 8000420:	211c      	movs	r1, #28
 8000422:	2301      	movs	r3, #1
 8000424:	041b      	lsls	r3, r3, #16
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0xe>
 800042a:	0c00      	lsrs	r0, r0, #16
 800042c:	3910      	subs	r1, #16
 800042e:	0a1b      	lsrs	r3, r3, #8
 8000430:	4298      	cmp	r0, r3
 8000432:	d301      	bcc.n	8000438 <__clzsi2+0x18>
 8000434:	0a00      	lsrs	r0, r0, #8
 8000436:	3908      	subs	r1, #8
 8000438:	091b      	lsrs	r3, r3, #4
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0x22>
 800043e:	0900      	lsrs	r0, r0, #4
 8000440:	3904      	subs	r1, #4
 8000442:	a202      	add	r2, pc, #8	; (adr r2, 800044c <__clzsi2+0x2c>)
 8000444:	5c10      	ldrb	r0, [r2, r0]
 8000446:	1840      	adds	r0, r0, r1
 8000448:	4770      	bx	lr
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	02020304 	.word	0x02020304
 8000450:	01010101 	.word	0x01010101
	...

0800045c <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 800045c:	21fa      	movs	r1, #250	; 0xfa
 800045e:	4b0a      	ldr	r3, [pc, #40]	; (8000488 <HAL_InitTick+0x2c>)
{
 8000460:	b570      	push	{r4, r5, r6, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000462:	0089      	lsls	r1, r1, #2
{
 8000464:	0005      	movs	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000466:	6818      	ldr	r0, [r3, #0]
 8000468:	f7ff fe62 	bl	8000130 <__udivsi3>
 800046c:	f000 f87a 	bl	8000564 <HAL_SYSTICK_Config>
 8000470:	0004      	movs	r4, r0
  {
    status = HAL_ERROR;
 8000472:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000474:	2c00      	cmp	r4, #0
 8000476:	d105      	bne.n	8000484 <HAL_InitTick+0x28>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000478:	3802      	subs	r0, #2
 800047a:	0022      	movs	r2, r4
 800047c:	0029      	movs	r1, r5
 800047e:	f000 f837 	bl	80004f0 <HAL_NVIC_SetPriority>
 8000482:	0020      	movs	r0, r4
  }

  /* Return function status */
  return status;
}
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	46c0      	nop			; (mov r8, r8)
 8000488:	20000000 	.word	0x20000000

0800048c <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800048c:	2340      	movs	r3, #64	; 0x40
 800048e:	4a08      	ldr	r2, [pc, #32]	; (80004b0 <HAL_Init+0x24>)
{
 8000490:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000492:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000494:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000496:	430b      	orrs	r3, r1
 8000498:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800049a:	f7ff ffdf 	bl	800045c <HAL_InitTick>
 800049e:	1e04      	subs	r4, r0, #0
 80004a0:	d103      	bne.n	80004aa <HAL_Init+0x1e>
    HAL_MspInit();
 80004a2:	f001 fd23 	bl	8001eec <HAL_MspInit>
}
 80004a6:	0020      	movs	r0, r4
 80004a8:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80004aa:	2401      	movs	r4, #1
 80004ac:	e7fb      	b.n	80004a6 <HAL_Init+0x1a>
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	40022000 	.word	0x40022000

080004b4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80004b4:	4a02      	ldr	r2, [pc, #8]	; (80004c0 <HAL_IncTick+0xc>)
 80004b6:	6813      	ldr	r3, [r2, #0]
 80004b8:	3301      	adds	r3, #1
 80004ba:	6013      	str	r3, [r2, #0]
}
 80004bc:	4770      	bx	lr
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	20000020 	.word	0x20000020

080004c4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80004c4:	4b01      	ldr	r3, [pc, #4]	; (80004cc <HAL_GetTick+0x8>)
 80004c6:	6818      	ldr	r0, [r3, #0]
}
 80004c8:	4770      	bx	lr
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	20000020 	.word	0x20000020

080004d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80004d4:	f7ff fff6 	bl	80004c4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
    wait++;
 80004d8:	1c63      	adds	r3, r4, #1
 80004da:	1e5a      	subs	r2, r3, #1
 80004dc:	4193      	sbcs	r3, r2
  uint32_t tickstart = HAL_GetTick();
 80004de:	0005      	movs	r5, r0
    wait++;
 80004e0:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80004e2:	f7ff ffef 	bl	80004c4 <HAL_GetTick>
 80004e6:	1b40      	subs	r0, r0, r5
 80004e8:	4284      	cmp	r4, r0
 80004ea:	d8fa      	bhi.n	80004e2 <HAL_Delay+0x12>
  {
  }
}
 80004ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080004f0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80004f0:	b570      	push	{r4, r5, r6, lr}
 80004f2:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80004f4:	2800      	cmp	r0, #0
 80004f6:	da14      	bge.n	8000522 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004f8:	230f      	movs	r3, #15
 80004fa:	b2c0      	uxtb	r0, r0
 80004fc:	4003      	ands	r3, r0
 80004fe:	3b08      	subs	r3, #8
 8000500:	4a11      	ldr	r2, [pc, #68]	; (8000548 <HAL_NVIC_SetPriority+0x58>)
 8000502:	089b      	lsrs	r3, r3, #2
 8000504:	009b      	lsls	r3, r3, #2
 8000506:	189b      	adds	r3, r3, r2
 8000508:	2203      	movs	r2, #3
 800050a:	4010      	ands	r0, r2
 800050c:	4090      	lsls	r0, r2
 800050e:	32fc      	adds	r2, #252	; 0xfc
 8000510:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000512:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000514:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000516:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000518:	69dc      	ldr	r4, [r3, #28]
 800051a:	43ac      	bics	r4, r5
 800051c:	4321      	orrs	r1, r4
 800051e:	61d9      	str	r1, [r3, #28]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000520:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000522:	2503      	movs	r5, #3
 8000524:	0883      	lsrs	r3, r0, #2
 8000526:	4028      	ands	r0, r5
 8000528:	40a8      	lsls	r0, r5
 800052a:	35fc      	adds	r5, #252	; 0xfc
 800052c:	002e      	movs	r6, r5
 800052e:	4a07      	ldr	r2, [pc, #28]	; (800054c <HAL_NVIC_SetPriority+0x5c>)
 8000530:	009b      	lsls	r3, r3, #2
 8000532:	189b      	adds	r3, r3, r2
 8000534:	22c0      	movs	r2, #192	; 0xc0
 8000536:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000538:	4029      	ands	r1, r5
 800053a:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800053c:	0092      	lsls	r2, r2, #2
 800053e:	589c      	ldr	r4, [r3, r2]
 8000540:	43b4      	bics	r4, r6
 8000542:	4321      	orrs	r1, r4
 8000544:	5099      	str	r1, [r3, r2]
 8000546:	e7eb      	b.n	8000520 <HAL_NVIC_SetPriority+0x30>
 8000548:	e000ed00 	.word	0xe000ed00
 800054c:	e000e100 	.word	0xe000e100

08000550 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000550:	231f      	movs	r3, #31
 8000552:	4018      	ands	r0, r3
 8000554:	3b1e      	subs	r3, #30
 8000556:	4083      	lsls	r3, r0
 8000558:	4a01      	ldr	r2, [pc, #4]	; (8000560 <HAL_NVIC_EnableIRQ+0x10>)
 800055a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800055c:	4770      	bx	lr
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	e000e100 	.word	0xe000e100

08000564 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000564:	4a09      	ldr	r2, [pc, #36]	; (800058c <HAL_SYSTICK_Config+0x28>)
 8000566:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000568:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800056a:	4293      	cmp	r3, r2
 800056c:	d80d      	bhi.n	800058a <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800056e:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000570:	4a07      	ldr	r2, [pc, #28]	; (8000590 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000572:	4808      	ldr	r0, [pc, #32]	; (8000594 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000574:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000576:	6a03      	ldr	r3, [r0, #32]
 8000578:	0609      	lsls	r1, r1, #24
 800057a:	021b      	lsls	r3, r3, #8
 800057c:	0a1b      	lsrs	r3, r3, #8
 800057e:	430b      	orrs	r3, r1
 8000580:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000582:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000584:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000586:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000588:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800058a:	4770      	bx	lr
 800058c:	00ffffff 	.word	0x00ffffff
 8000590:	e000e010 	.word	0xe000e010
 8000594:	e000ed00 	.word	0xe000ed00

08000598 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000598:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800059a:	1d84      	adds	r4, r0, #6
 800059c:	7fe3      	ldrb	r3, [r4, #31]
 800059e:	2b02      	cmp	r3, #2
 80005a0:	d004      	beq.n	80005ac <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80005a2:	2304      	movs	r3, #4
 80005a4:	63c3      	str	r3, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 80005a6:	3b03      	subs	r3, #3
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 80005a8:	0018      	movs	r0, r3
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80005ac:	210e      	movs	r1, #14
 80005ae:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80005b0:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80005b2:	681a      	ldr	r2, [r3, #0]
 80005b4:	438a      	bics	r2, r1
 80005b6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80005b8:	2201      	movs	r2, #1
 80005ba:	6819      	ldr	r1, [r3, #0]
 80005bc:	4391      	bics	r1, r2
 80005be:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80005c0:	231c      	movs	r3, #28
 80005c2:	402b      	ands	r3, r5
 80005c4:	0015      	movs	r5, r2
 80005c6:	409d      	lsls	r5, r3
 80005c8:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_UNLOCK(hdma);
 80005ca:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80005cc:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80005ce:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 80005d0:	2400      	movs	r4, #0
    if(hdma->XferAbortCallback != NULL)
 80005d2:	6b82      	ldr	r2, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80005d4:	77dc      	strb	r4, [r3, #31]
  HAL_StatusTypeDef status = HAL_OK;
 80005d6:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 80005d8:	42a2      	cmp	r2, r4
 80005da:	d0e5      	beq.n	80005a8 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 80005dc:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 80005de:	0023      	movs	r3, r4
 80005e0:	e7e2      	b.n	80005a8 <HAL_DMA_Abort_IT+0x10>
	...

080005e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80005e4:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80005e6:	4a55      	ldr	r2, [pc, #340]	; (800073c <HAL_GPIO_Init+0x158>)
  while (((GPIO_Init->Pin) >> position) != 0)
 80005e8:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80005ea:	1882      	adds	r2, r0, r2
 80005ec:	1e54      	subs	r4, r2, #1
 80005ee:	41a2      	sbcs	r2, r4
{
 80005f0:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 80005f2:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00U;
 80005f4:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80005f6:	3205      	adds	r2, #5
 80005f8:	9203      	str	r2, [sp, #12]
  while (((GPIO_Init->Pin) >> position) != 0)
 80005fa:	9a01      	ldr	r2, [sp, #4]
 80005fc:	40da      	lsrs	r2, r3
 80005fe:	d101      	bne.n	8000604 <HAL_GPIO_Init+0x20>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8000600:	b005      	add	sp, #20
 8000602:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000604:	2501      	movs	r5, #1
 8000606:	409d      	lsls	r5, r3
 8000608:	9a01      	ldr	r2, [sp, #4]
 800060a:	402a      	ands	r2, r5
 800060c:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 800060e:	d100      	bne.n	8000612 <HAL_GPIO_Init+0x2e>
 8000610:	e091      	b.n	8000736 <HAL_GPIO_Init+0x152>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000612:	684a      	ldr	r2, [r1, #4]
 8000614:	4694      	mov	ip, r2
 8000616:	2210      	movs	r2, #16
 8000618:	4664      	mov	r4, ip
 800061a:	4394      	bics	r4, r2
 800061c:	0022      	movs	r2, r4
 800061e:	3c01      	subs	r4, #1
 8000620:	2a02      	cmp	r2, #2
 8000622:	d11f      	bne.n	8000664 <HAL_GPIO_Init+0x80>
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000624:	2407      	movs	r4, #7
 8000626:	270f      	movs	r7, #15
 8000628:	401c      	ands	r4, r3
 800062a:	00a4      	lsls	r4, r4, #2
 800062c:	40a7      	lsls	r7, r4
        temp = GPIOx->AFR[position >> 3U];
 800062e:	08da      	lsrs	r2, r3, #3
 8000630:	0092      	lsls	r2, r2, #2
 8000632:	1882      	adds	r2, r0, r2
 8000634:	6a16      	ldr	r6, [r2, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000636:	43be      	bics	r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8000638:	690f      	ldr	r7, [r1, #16]
 800063a:	40a7      	lsls	r7, r4
 800063c:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 800063e:	6216      	str	r6, [r2, #32]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000640:	2403      	movs	r4, #3
 8000642:	005e      	lsls	r6, r3, #1
 8000644:	40b4      	lsls	r4, r6
        temp = GPIOx->OSPEEDR;
 8000646:	6882      	ldr	r2, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000648:	43a2      	bics	r2, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800064a:	68cc      	ldr	r4, [r1, #12]
 800064c:	40b4      	lsls	r4, r6
 800064e:	4322      	orrs	r2, r4
        GPIOx->OSPEEDR = temp;
 8000650:	6082      	str	r2, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000652:	4662      	mov	r2, ip
 8000654:	06d2      	lsls	r2, r2, #27
 8000656:	0fd2      	lsrs	r2, r2, #31
 8000658:	409a      	lsls	r2, r3
        temp= GPIOx->OTYPER;
 800065a:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800065c:	43ac      	bics	r4, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800065e:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8000660:	6042      	str	r2, [r0, #4]
 8000662:	e001      	b.n	8000668 <HAL_GPIO_Init+0x84>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000664:	2c01      	cmp	r4, #1
 8000666:	d9eb      	bls.n	8000640 <HAL_GPIO_Init+0x5c>
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000668:	2603      	movs	r6, #3
 800066a:	0034      	movs	r4, r6
 800066c:	005d      	lsls	r5, r3, #1
 800066e:	40ac      	lsls	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000670:	4662      	mov	r2, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000672:	43e4      	mvns	r4, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000674:	4032      	ands	r2, r6
 8000676:	40aa      	lsls	r2, r5
      temp = GPIOx->MODER;
 8000678:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800067a:	4027      	ands	r7, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800067c:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 800067e:	6002      	str	r2, [r0, #0]
      temp = GPIOx->PUPDR;
 8000680:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000682:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8000684:	688a      	ldr	r2, [r1, #8]
 8000686:	40aa      	lsls	r2, r5
 8000688:	4314      	orrs	r4, r2
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800068a:	4662      	mov	r2, ip
      GPIOx->PUPDR = temp;
 800068c:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800068e:	00d2      	lsls	r2, r2, #3
 8000690:	d551      	bpl.n	8000736 <HAL_GPIO_Init+0x152>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000692:	2501      	movs	r5, #1
 8000694:	4c2a      	ldr	r4, [pc, #168]	; (8000740 <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000696:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000698:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800069a:	432a      	orrs	r2, r5
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800069c:	001d      	movs	r5, r3
 800069e:	4035      	ands	r5, r6
 80006a0:	00ad      	lsls	r5, r5, #2
 80006a2:	40af      	lsls	r7, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a4:	6362      	str	r2, [r4, #52]	; 0x34
 80006a6:	4a27      	ldr	r2, [pc, #156]	; (8000744 <HAL_GPIO_Init+0x160>)
        temp = SYSCFG->EXTICR[position >> 2U];
 80006a8:	089c      	lsrs	r4, r3, #2
 80006aa:	00a4      	lsls	r4, r4, #2
 80006ac:	18a4      	adds	r4, r4, r2
 80006ae:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80006b0:	43ba      	bics	r2, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80006b2:	27a0      	movs	r7, #160	; 0xa0
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80006b4:	9202      	str	r2, [sp, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80006b6:	05ff      	lsls	r7, r7, #23
 80006b8:	2200      	movs	r2, #0
 80006ba:	42b8      	cmp	r0, r7
 80006bc:	d010      	beq.n	80006e0 <HAL_GPIO_Init+0xfc>
 80006be:	4f22      	ldr	r7, [pc, #136]	; (8000748 <HAL_GPIO_Init+0x164>)
 80006c0:	3201      	adds	r2, #1
 80006c2:	42b8      	cmp	r0, r7
 80006c4:	d00c      	beq.n	80006e0 <HAL_GPIO_Init+0xfc>
 80006c6:	4f21      	ldr	r7, [pc, #132]	; (800074c <HAL_GPIO_Init+0x168>)
 80006c8:	3201      	adds	r2, #1
 80006ca:	42b8      	cmp	r0, r7
 80006cc:	d008      	beq.n	80006e0 <HAL_GPIO_Init+0xfc>
 80006ce:	4f20      	ldr	r7, [pc, #128]	; (8000750 <HAL_GPIO_Init+0x16c>)
 80006d0:	0032      	movs	r2, r6
 80006d2:	42b8      	cmp	r0, r7
 80006d4:	d004      	beq.n	80006e0 <HAL_GPIO_Init+0xfc>
 80006d6:	4e1f      	ldr	r6, [pc, #124]	; (8000754 <HAL_GPIO_Init+0x170>)
 80006d8:	3201      	adds	r2, #1
 80006da:	42b0      	cmp	r0, r6
 80006dc:	d000      	beq.n	80006e0 <HAL_GPIO_Init+0xfc>
 80006de:	9a03      	ldr	r2, [sp, #12]
 80006e0:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006e2:	4667      	mov	r7, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80006e4:	9d02      	ldr	r5, [sp, #8]
 80006e6:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80006e8:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 80006ea:	4a1b      	ldr	r2, [pc, #108]	; (8000758 <HAL_GPIO_Init+0x174>)
        temp &= ~((uint32_t)iocurrent);
 80006ec:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->IMR;
 80006ee:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 80006f0:	9d00      	ldr	r5, [sp, #0]
        temp &= ~((uint32_t)iocurrent);
 80006f2:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 80006f4:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006f6:	03ff      	lsls	r7, r7, #15
 80006f8:	d401      	bmi.n	80006fe <HAL_GPIO_Init+0x11a>
        temp &= ~((uint32_t)iocurrent);
 80006fa:	0035      	movs	r5, r6
 80006fc:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006fe:	4667      	mov	r7, ip
        EXTI->IMR = temp;
 8000700:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000702:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8000704:	9d00      	ldr	r5, [sp, #0]
 8000706:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000708:	03bf      	lsls	r7, r7, #14
 800070a:	d401      	bmi.n	8000710 <HAL_GPIO_Init+0x12c>
        temp &= ~((uint32_t)iocurrent);
 800070c:	0035      	movs	r5, r6
 800070e:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000710:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 8000712:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000714:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8000716:	9d00      	ldr	r5, [sp, #0]
 8000718:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800071a:	02ff      	lsls	r7, r7, #11
 800071c:	d401      	bmi.n	8000722 <HAL_GPIO_Init+0x13e>
        temp &= ~((uint32_t)iocurrent);
 800071e:	0035      	movs	r5, r6
 8000720:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000722:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8000724:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000726:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8000728:	9e00      	ldr	r6, [sp, #0]
 800072a:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800072c:	02bf      	lsls	r7, r7, #10
 800072e:	d401      	bmi.n	8000734 <HAL_GPIO_Init+0x150>
        temp &= ~((uint32_t)iocurrent);
 8000730:	4025      	ands	r5, r4
 8000732:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8000734:	60d6      	str	r6, [r2, #12]
    position++;
 8000736:	3301      	adds	r3, #1
 8000738:	e75f      	b.n	80005fa <HAL_GPIO_Init+0x16>
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	afffe400 	.word	0xafffe400
 8000740:	40021000 	.word	0x40021000
 8000744:	40010000 	.word	0x40010000
 8000748:	50000400 	.word	0x50000400
 800074c:	50000800 	.word	0x50000800
 8000750:	50000c00 	.word	0x50000c00
 8000754:	50001000 	.word	0x50001000
 8000758:	40010400 	.word	0x40010400

0800075c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;
  
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  
  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800075c:	6900      	ldr	r0, [r0, #16]
 800075e:	4008      	ands	r0, r1
 8000760:	1e41      	subs	r1, r0, #1
 8000762:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8000764:	b2c0      	uxtb	r0, r0
}
 8000766:	4770      	bx	lr

08000768 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8000768:	2a00      	cmp	r2, #0
 800076a:	d001      	beq.n	8000770 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 800076c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800076e:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8000770:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000772:	e7fc      	b.n	800076e <HAL_GPIO_WritePin+0x6>

08000774 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000774:	6943      	ldr	r3, [r0, #20]
 8000776:	4059      	eors	r1, r3
 8000778:	6141      	str	r1, [r0, #20]
}
 800077a:	4770      	bx	lr

0800077c <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 800077c:	4770      	bx	lr
	...

08000780 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8000780:	4b04      	ldr	r3, [pc, #16]	; (8000794 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8000782:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8000784:	695a      	ldr	r2, [r3, #20]
 8000786:	4210      	tst	r0, r2
 8000788:	d002      	beq.n	8000790 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800078a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800078c:	f7ff fff6 	bl	800077c <HAL_GPIO_EXTI_Callback>
}
 8000790:	bd10      	pop	{r4, pc}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	40010400 	.word	0x40010400

08000798 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000798:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 800079a:	4b18      	ldr	r3, [pc, #96]	; (80007fc <HAL_RCC_GetSysClockFreq+0x64>)
{
 800079c:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 800079e:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 80007a0:	400a      	ands	r2, r1
 80007a2:	2a08      	cmp	r2, #8
 80007a4:	d026      	beq.n	80007f4 <HAL_RCC_GetSysClockFreq+0x5c>
 80007a6:	2a0c      	cmp	r2, #12
 80007a8:	d006      	beq.n	80007b8 <HAL_RCC_GetSysClockFreq+0x20>
 80007aa:	2a04      	cmp	r2, #4
 80007ac:	d11a      	bne.n	80007e4 <HAL_RCC_GetSysClockFreq+0x4c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	06db      	lsls	r3, r3, #27
 80007b2:	d421      	bmi.n	80007f8 <HAL_RCC_GetSysClockFreq+0x60>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 80007b4:	4812      	ldr	r0, [pc, #72]	; (8000800 <HAL_RCC_GetSysClockFreq+0x68>)
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 80007b6:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80007b8:	028a      	lsls	r2, r1, #10
 80007ba:	4812      	ldr	r0, [pc, #72]	; (8000804 <HAL_RCC_GetSysClockFreq+0x6c>)
 80007bc:	0f12      	lsrs	r2, r2, #28
 80007be:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80007c0:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80007c2:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80007c4:	0f89      	lsrs	r1, r1, #30
 80007c6:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80007c8:	03c0      	lsls	r0, r0, #15
 80007ca:	d504      	bpl.n	80007d6 <HAL_RCC_GetSysClockFreq+0x3e>
        pllvco = (HSE_VALUE * pllm) / plld;
 80007cc:	480e      	ldr	r0, [pc, #56]	; (8000808 <HAL_RCC_GetSysClockFreq+0x70>)
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80007ce:	4350      	muls	r0, r2
 80007d0:	f7ff fcae 	bl	8000130 <__udivsi3>
 80007d4:	e7ef      	b.n	80007b6 <HAL_RCC_GetSysClockFreq+0x1e>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	06db      	lsls	r3, r3, #27
 80007da:	d501      	bpl.n	80007e0 <HAL_RCC_GetSysClockFreq+0x48>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80007dc:	480b      	ldr	r0, [pc, #44]	; (800080c <HAL_RCC_GetSysClockFreq+0x74>)
 80007de:	e7f6      	b.n	80007ce <HAL_RCC_GetSysClockFreq+0x36>
         pllvco = (HSI_VALUE * pllm) / plld;
 80007e0:	4807      	ldr	r0, [pc, #28]	; (8000800 <HAL_RCC_GetSysClockFreq+0x68>)
 80007e2:	e7f4      	b.n	80007ce <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80007e4:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80007e6:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80007e8:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80007ea:	041b      	lsls	r3, r3, #16
 80007ec:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80007ee:	3301      	adds	r3, #1
 80007f0:	4098      	lsls	r0, r3
 80007f2:	e7e0      	b.n	80007b6 <HAL_RCC_GetSysClockFreq+0x1e>
      sysclockfreq = HSE_VALUE;
 80007f4:	4804      	ldr	r0, [pc, #16]	; (8000808 <HAL_RCC_GetSysClockFreq+0x70>)
 80007f6:	e7de      	b.n	80007b6 <HAL_RCC_GetSysClockFreq+0x1e>
        sysclockfreq =  (HSI_VALUE >> 2);
 80007f8:	4804      	ldr	r0, [pc, #16]	; (800080c <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 80007fa:	e7dc      	b.n	80007b6 <HAL_RCC_GetSysClockFreq+0x1e>
 80007fc:	40021000 	.word	0x40021000
 8000800:	00f42400 	.word	0x00f42400
 8000804:	080021f9 	.word	0x080021f9
 8000808:	007a1200 	.word	0x007a1200
 800080c:	003d0900 	.word	0x003d0900

08000810 <HAL_RCC_OscConfig>:
{
 8000810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000812:	0005      	movs	r5, r0
 8000814:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 8000816:	2800      	cmp	r0, #0
 8000818:	d102      	bne.n	8000820 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 800081a:	2001      	movs	r0, #1
}
 800081c:	b007      	add	sp, #28
 800081e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000820:	230c      	movs	r3, #12
 8000822:	4cc2      	ldr	r4, [pc, #776]	; (8000b2c <HAL_RCC_OscConfig+0x31c>)
 8000824:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000826:	68e2      	ldr	r2, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000828:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800082a:	2380      	movs	r3, #128	; 0x80
 800082c:	025b      	lsls	r3, r3, #9
 800082e:	401a      	ands	r2, r3
 8000830:	9201      	str	r2, [sp, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000832:	6802      	ldr	r2, [r0, #0]
 8000834:	07d2      	lsls	r2, r2, #31
 8000836:	d441      	bmi.n	80008bc <HAL_RCC_OscConfig+0xac>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000838:	682b      	ldr	r3, [r5, #0]
 800083a:	079b      	lsls	r3, r3, #30
 800083c:	d500      	bpl.n	8000840 <HAL_RCC_OscConfig+0x30>
 800083e:	e087      	b.n	8000950 <HAL_RCC_OscConfig+0x140>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000840:	682b      	ldr	r3, [r5, #0]
 8000842:	06db      	lsls	r3, r3, #27
 8000844:	d528      	bpl.n	8000898 <HAL_RCC_OscConfig+0x88>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8000846:	2e00      	cmp	r6, #0
 8000848:	d000      	beq.n	800084c <HAL_RCC_OscConfig+0x3c>
 800084a:	e0e1      	b.n	8000a10 <HAL_RCC_OscConfig+0x200>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800084c:	6823      	ldr	r3, [r4, #0]
 800084e:	059b      	lsls	r3, r3, #22
 8000850:	d502      	bpl.n	8000858 <HAL_RCC_OscConfig+0x48>
 8000852:	69eb      	ldr	r3, [r5, #28]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d0e0      	beq.n	800081a <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000858:	6862      	ldr	r2, [r4, #4]
 800085a:	49b5      	ldr	r1, [pc, #724]	; (8000b30 <HAL_RCC_OscConfig+0x320>)
 800085c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800085e:	400a      	ands	r2, r1
 8000860:	431a      	orrs	r2, r3
 8000862:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000864:	6861      	ldr	r1, [r4, #4]
 8000866:	6a2a      	ldr	r2, [r5, #32]
 8000868:	0209      	lsls	r1, r1, #8
 800086a:	0a09      	lsrs	r1, r1, #8
 800086c:	0612      	lsls	r2, r2, #24
 800086e:	430a      	orrs	r2, r1
 8000870:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000872:	2280      	movs	r2, #128	; 0x80
 8000874:	0b5b      	lsrs	r3, r3, #13
 8000876:	3301      	adds	r3, #1
 8000878:	0212      	lsls	r2, r2, #8
 800087a:	409a      	lsls	r2, r3
 800087c:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800087e:	68e1      	ldr	r1, [r4, #12]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8000880:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000882:	060a      	lsls	r2, r1, #24
 8000884:	49ab      	ldr	r1, [pc, #684]	; (8000b34 <HAL_RCC_OscConfig+0x324>)
 8000886:	0f12      	lsrs	r2, r2, #28
 8000888:	5c8a      	ldrb	r2, [r1, r2]
 800088a:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800088c:	4aaa      	ldr	r2, [pc, #680]	; (8000b38 <HAL_RCC_OscConfig+0x328>)
 800088e:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8000890:	f7ff fde4 	bl	800045c <HAL_InitTick>
        if(status != HAL_OK)
 8000894:	2800      	cmp	r0, #0
 8000896:	d1c1      	bne.n	800081c <HAL_RCC_OscConfig+0xc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000898:	682b      	ldr	r3, [r5, #0]
 800089a:	071b      	lsls	r3, r3, #28
 800089c:	d500      	bpl.n	80008a0 <HAL_RCC_OscConfig+0x90>
 800089e:	e0ee      	b.n	8000a7e <HAL_RCC_OscConfig+0x26e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80008a0:	682b      	ldr	r3, [r5, #0]
 80008a2:	075b      	lsls	r3, r3, #29
 80008a4:	d500      	bpl.n	80008a8 <HAL_RCC_OscConfig+0x98>
 80008a6:	e110      	b.n	8000aca <HAL_RCC_OscConfig+0x2ba>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80008a8:	682b      	ldr	r3, [r5, #0]
 80008aa:	069b      	lsls	r3, r3, #26
 80008ac:	d500      	bpl.n	80008b0 <HAL_RCC_OscConfig+0xa0>
 80008ae:	e195      	b.n	8000bdc <HAL_RCC_OscConfig+0x3cc>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80008b0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d000      	beq.n	80008b8 <HAL_RCC_OscConfig+0xa8>
 80008b6:	e1c4      	b.n	8000c42 <HAL_RCC_OscConfig+0x432>
  return HAL_OK;
 80008b8:	2000      	movs	r0, #0
 80008ba:	e7af      	b.n	800081c <HAL_RCC_OscConfig+0xc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80008bc:	2e08      	cmp	r6, #8
 80008be:	d004      	beq.n	80008ca <HAL_RCC_OscConfig+0xba>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80008c0:	2e0c      	cmp	r6, #12
 80008c2:	d109      	bne.n	80008d8 <HAL_RCC_OscConfig+0xc8>
 80008c4:	9a01      	ldr	r2, [sp, #4]
 80008c6:	2a00      	cmp	r2, #0
 80008c8:	d006      	beq.n	80008d8 <HAL_RCC_OscConfig+0xc8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008ca:	6823      	ldr	r3, [r4, #0]
 80008cc:	039b      	lsls	r3, r3, #14
 80008ce:	d5b3      	bpl.n	8000838 <HAL_RCC_OscConfig+0x28>
 80008d0:	686b      	ldr	r3, [r5, #4]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d1b0      	bne.n	8000838 <HAL_RCC_OscConfig+0x28>
 80008d6:	e7a0      	b.n	800081a <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008d8:	686a      	ldr	r2, [r5, #4]
 80008da:	429a      	cmp	r2, r3
 80008dc:	d111      	bne.n	8000902 <HAL_RCC_OscConfig+0xf2>
 80008de:	6822      	ldr	r2, [r4, #0]
 80008e0:	4313      	orrs	r3, r2
 80008e2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80008e4:	f7ff fdee 	bl	80004c4 <HAL_GetTick>
 80008e8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80008ea:	2280      	movs	r2, #128	; 0x80
 80008ec:	6823      	ldr	r3, [r4, #0]
 80008ee:	0292      	lsls	r2, r2, #10
 80008f0:	4213      	tst	r3, r2
 80008f2:	d1a1      	bne.n	8000838 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008f4:	f7ff fde6 	bl	80004c4 <HAL_GetTick>
 80008f8:	1bc0      	subs	r0, r0, r7
 80008fa:	2864      	cmp	r0, #100	; 0x64
 80008fc:	d9f5      	bls.n	80008ea <HAL_RCC_OscConfig+0xda>
            return HAL_TIMEOUT;
 80008fe:	2003      	movs	r0, #3
 8000900:	e78c      	b.n	800081c <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000902:	21a0      	movs	r1, #160	; 0xa0
 8000904:	02c9      	lsls	r1, r1, #11
 8000906:	428a      	cmp	r2, r1
 8000908:	d105      	bne.n	8000916 <HAL_RCC_OscConfig+0x106>
 800090a:	2280      	movs	r2, #128	; 0x80
 800090c:	6821      	ldr	r1, [r4, #0]
 800090e:	02d2      	lsls	r2, r2, #11
 8000910:	430a      	orrs	r2, r1
 8000912:	6022      	str	r2, [r4, #0]
 8000914:	e7e3      	b.n	80008de <HAL_RCC_OscConfig+0xce>
 8000916:	6821      	ldr	r1, [r4, #0]
 8000918:	4888      	ldr	r0, [pc, #544]	; (8000b3c <HAL_RCC_OscConfig+0x32c>)
 800091a:	4001      	ands	r1, r0
 800091c:	6021      	str	r1, [r4, #0]
 800091e:	6821      	ldr	r1, [r4, #0]
 8000920:	400b      	ands	r3, r1
 8000922:	9305      	str	r3, [sp, #20]
 8000924:	9b05      	ldr	r3, [sp, #20]
 8000926:	4986      	ldr	r1, [pc, #536]	; (8000b40 <HAL_RCC_OscConfig+0x330>)
 8000928:	6823      	ldr	r3, [r4, #0]
 800092a:	400b      	ands	r3, r1
 800092c:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800092e:	2a00      	cmp	r2, #0
 8000930:	d1d8      	bne.n	80008e4 <HAL_RCC_OscConfig+0xd4>
        tickstart = HAL_GetTick();
 8000932:	f7ff fdc7 	bl	80004c4 <HAL_GetTick>
 8000936:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000938:	2280      	movs	r2, #128	; 0x80
 800093a:	6823      	ldr	r3, [r4, #0]
 800093c:	0292      	lsls	r2, r2, #10
 800093e:	4213      	tst	r3, r2
 8000940:	d100      	bne.n	8000944 <HAL_RCC_OscConfig+0x134>
 8000942:	e779      	b.n	8000838 <HAL_RCC_OscConfig+0x28>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000944:	f7ff fdbe 	bl	80004c4 <HAL_GetTick>
 8000948:	1bc0      	subs	r0, r0, r7
 800094a:	2864      	cmp	r0, #100	; 0x64
 800094c:	d9f4      	bls.n	8000938 <HAL_RCC_OscConfig+0x128>
 800094e:	e7d6      	b.n	80008fe <HAL_RCC_OscConfig+0xee>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8000950:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 8000952:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8000954:	4213      	tst	r3, r2
 8000956:	d003      	beq.n	8000960 <HAL_RCC_OscConfig+0x150>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8000958:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 800095a:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800095c:	4311      	orrs	r1, r2
 800095e:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000960:	2e04      	cmp	r6, #4
 8000962:	d004      	beq.n	800096e <HAL_RCC_OscConfig+0x15e>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000964:	2e0c      	cmp	r6, #12
 8000966:	d125      	bne.n	80009b4 <HAL_RCC_OscConfig+0x1a4>
 8000968:	9a01      	ldr	r2, [sp, #4]
 800096a:	2a00      	cmp	r2, #0
 800096c:	d122      	bne.n	80009b4 <HAL_RCC_OscConfig+0x1a4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800096e:	6822      	ldr	r2, [r4, #0]
 8000970:	0752      	lsls	r2, r2, #29
 8000972:	d502      	bpl.n	800097a <HAL_RCC_OscConfig+0x16a>
 8000974:	2b00      	cmp	r3, #0
 8000976:	d100      	bne.n	800097a <HAL_RCC_OscConfig+0x16a>
 8000978:	e74f      	b.n	800081a <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800097a:	6861      	ldr	r1, [r4, #4]
 800097c:	692a      	ldr	r2, [r5, #16]
 800097e:	4871      	ldr	r0, [pc, #452]	; (8000b44 <HAL_RCC_OscConfig+0x334>)
 8000980:	0212      	lsls	r2, r2, #8
 8000982:	4001      	ands	r1, r0
 8000984:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000986:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000988:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800098a:	6822      	ldr	r2, [r4, #0]
 800098c:	438a      	bics	r2, r1
 800098e:	4313      	orrs	r3, r2
 8000990:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000992:	f7ff ff01 	bl	8000798 <HAL_RCC_GetSysClockFreq>
 8000996:	68e3      	ldr	r3, [r4, #12]
 8000998:	4a66      	ldr	r2, [pc, #408]	; (8000b34 <HAL_RCC_OscConfig+0x324>)
 800099a:	061b      	lsls	r3, r3, #24
 800099c:	0f1b      	lsrs	r3, r3, #28
 800099e:	5cd3      	ldrb	r3, [r2, r3]
 80009a0:	40d8      	lsrs	r0, r3
 80009a2:	4b65      	ldr	r3, [pc, #404]	; (8000b38 <HAL_RCC_OscConfig+0x328>)
 80009a4:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 80009a6:	2000      	movs	r0, #0
 80009a8:	f7ff fd58 	bl	800045c <HAL_InitTick>
      if(status != HAL_OK)
 80009ac:	2800      	cmp	r0, #0
 80009ae:	d100      	bne.n	80009b2 <HAL_RCC_OscConfig+0x1a2>
 80009b0:	e746      	b.n	8000840 <HAL_RCC_OscConfig+0x30>
 80009b2:	e733      	b.n	800081c <HAL_RCC_OscConfig+0xc>
      if(hsi_state != RCC_HSI_OFF)
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d019      	beq.n	80009ec <HAL_RCC_OscConfig+0x1dc>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80009b8:	2109      	movs	r1, #9
 80009ba:	6822      	ldr	r2, [r4, #0]
 80009bc:	438a      	bics	r2, r1
 80009be:	4313      	orrs	r3, r2
 80009c0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80009c2:	f7ff fd7f 	bl	80004c4 <HAL_GetTick>
 80009c6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80009c8:	2204      	movs	r2, #4
 80009ca:	6823      	ldr	r3, [r4, #0]
 80009cc:	4213      	tst	r3, r2
 80009ce:	d007      	beq.n	80009e0 <HAL_RCC_OscConfig+0x1d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009d0:	6862      	ldr	r2, [r4, #4]
 80009d2:	692b      	ldr	r3, [r5, #16]
 80009d4:	495b      	ldr	r1, [pc, #364]	; (8000b44 <HAL_RCC_OscConfig+0x334>)
 80009d6:	021b      	lsls	r3, r3, #8
 80009d8:	400a      	ands	r2, r1
 80009da:	4313      	orrs	r3, r2
 80009dc:	6063      	str	r3, [r4, #4]
 80009de:	e72f      	b.n	8000840 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009e0:	f7ff fd70 	bl	80004c4 <HAL_GetTick>
 80009e4:	1bc0      	subs	r0, r0, r7
 80009e6:	2802      	cmp	r0, #2
 80009e8:	d9ee      	bls.n	80009c8 <HAL_RCC_OscConfig+0x1b8>
 80009ea:	e788      	b.n	80008fe <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_DISABLE();
 80009ec:	2201      	movs	r2, #1
 80009ee:	6823      	ldr	r3, [r4, #0]
 80009f0:	4393      	bics	r3, r2
 80009f2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80009f4:	f7ff fd66 	bl	80004c4 <HAL_GetTick>
 80009f8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80009fa:	2204      	movs	r2, #4
 80009fc:	6823      	ldr	r3, [r4, #0]
 80009fe:	4213      	tst	r3, r2
 8000a00:	d100      	bne.n	8000a04 <HAL_RCC_OscConfig+0x1f4>
 8000a02:	e71d      	b.n	8000840 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a04:	f7ff fd5e 	bl	80004c4 <HAL_GetTick>
 8000a08:	1bc0      	subs	r0, r0, r7
 8000a0a:	2802      	cmp	r0, #2
 8000a0c:	d9f5      	bls.n	80009fa <HAL_RCC_OscConfig+0x1ea>
 8000a0e:	e776      	b.n	80008fe <HAL_RCC_OscConfig+0xee>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000a10:	69eb      	ldr	r3, [r5, #28]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d020      	beq.n	8000a58 <HAL_RCC_OscConfig+0x248>
        __HAL_RCC_MSI_ENABLE();
 8000a16:	2380      	movs	r3, #128	; 0x80
 8000a18:	6822      	ldr	r2, [r4, #0]
 8000a1a:	005b      	lsls	r3, r3, #1
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000a20:	f7ff fd50 	bl	80004c4 <HAL_GetTick>
 8000a24:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000a26:	2280      	movs	r2, #128	; 0x80
 8000a28:	6823      	ldr	r3, [r4, #0]
 8000a2a:	0092      	lsls	r2, r2, #2
 8000a2c:	4213      	tst	r3, r2
 8000a2e:	d00d      	beq.n	8000a4c <HAL_RCC_OscConfig+0x23c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a30:	6863      	ldr	r3, [r4, #4]
 8000a32:	4a3f      	ldr	r2, [pc, #252]	; (8000b30 <HAL_RCC_OscConfig+0x320>)
 8000a34:	4013      	ands	r3, r2
 8000a36:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a3c:	6862      	ldr	r2, [r4, #4]
 8000a3e:	6a2b      	ldr	r3, [r5, #32]
 8000a40:	0212      	lsls	r2, r2, #8
 8000a42:	061b      	lsls	r3, r3, #24
 8000a44:	0a12      	lsrs	r2, r2, #8
 8000a46:	4313      	orrs	r3, r2
 8000a48:	6063      	str	r3, [r4, #4]
 8000a4a:	e725      	b.n	8000898 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000a4c:	f7ff fd3a 	bl	80004c4 <HAL_GetTick>
 8000a50:	1bc0      	subs	r0, r0, r7
 8000a52:	2802      	cmp	r0, #2
 8000a54:	d9e7      	bls.n	8000a26 <HAL_RCC_OscConfig+0x216>
 8000a56:	e752      	b.n	80008fe <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_MSI_DISABLE();
 8000a58:	6823      	ldr	r3, [r4, #0]
 8000a5a:	4a3b      	ldr	r2, [pc, #236]	; (8000b48 <HAL_RCC_OscConfig+0x338>)
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000a60:	f7ff fd30 	bl	80004c4 <HAL_GetTick>
 8000a64:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000a66:	2280      	movs	r2, #128	; 0x80
 8000a68:	6823      	ldr	r3, [r4, #0]
 8000a6a:	0092      	lsls	r2, r2, #2
 8000a6c:	4213      	tst	r3, r2
 8000a6e:	d100      	bne.n	8000a72 <HAL_RCC_OscConfig+0x262>
 8000a70:	e712      	b.n	8000898 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000a72:	f7ff fd27 	bl	80004c4 <HAL_GetTick>
 8000a76:	1bc0      	subs	r0, r0, r7
 8000a78:	2802      	cmp	r0, #2
 8000a7a:	d9f4      	bls.n	8000a66 <HAL_RCC_OscConfig+0x256>
 8000a7c:	e73f      	b.n	80008fe <HAL_RCC_OscConfig+0xee>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a7e:	696a      	ldr	r2, [r5, #20]
 8000a80:	2301      	movs	r3, #1
 8000a82:	2a00      	cmp	r2, #0
 8000a84:	d010      	beq.n	8000aa8 <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 8000a86:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000a8c:	f7ff fd1a 	bl	80004c4 <HAL_GetTick>
 8000a90:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000a92:	2202      	movs	r2, #2
 8000a94:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000a96:	4213      	tst	r3, r2
 8000a98:	d000      	beq.n	8000a9c <HAL_RCC_OscConfig+0x28c>
 8000a9a:	e701      	b.n	80008a0 <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a9c:	f7ff fd12 	bl	80004c4 <HAL_GetTick>
 8000aa0:	1bc0      	subs	r0, r0, r7
 8000aa2:	2802      	cmp	r0, #2
 8000aa4:	d9f5      	bls.n	8000a92 <HAL_RCC_OscConfig+0x282>
 8000aa6:	e72a      	b.n	80008fe <HAL_RCC_OscConfig+0xee>
      __HAL_RCC_LSI_DISABLE();
 8000aa8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000aaa:	439a      	bics	r2, r3
 8000aac:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000aae:	f7ff fd09 	bl	80004c4 <HAL_GetTick>
 8000ab2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000ab4:	2202      	movs	r2, #2
 8000ab6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000ab8:	4213      	tst	r3, r2
 8000aba:	d100      	bne.n	8000abe <HAL_RCC_OscConfig+0x2ae>
 8000abc:	e6f0      	b.n	80008a0 <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000abe:	f7ff fd01 	bl	80004c4 <HAL_GetTick>
 8000ac2:	1bc0      	subs	r0, r0, r7
 8000ac4:	2802      	cmp	r0, #2
 8000ac6:	d9f5      	bls.n	8000ab4 <HAL_RCC_OscConfig+0x2a4>
 8000ac8:	e719      	b.n	80008fe <HAL_RCC_OscConfig+0xee>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000aca:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000acc:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ace:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000ad0:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8000ad2:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ad4:	421a      	tst	r2, r3
 8000ad6:	d104      	bne.n	8000ae2 <HAL_RCC_OscConfig+0x2d2>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ad8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000ada:	4313      	orrs	r3, r2
 8000adc:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ae2:	2280      	movs	r2, #128	; 0x80
 8000ae4:	4f19      	ldr	r7, [pc, #100]	; (8000b4c <HAL_RCC_OscConfig+0x33c>)
 8000ae6:	0052      	lsls	r2, r2, #1
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	4213      	tst	r3, r2
 8000aec:	d008      	beq.n	8000b00 <HAL_RCC_OscConfig+0x2f0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000aee:	2280      	movs	r2, #128	; 0x80
 8000af0:	68ab      	ldr	r3, [r5, #8]
 8000af2:	0052      	lsls	r2, r2, #1
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d12b      	bne.n	8000b50 <HAL_RCC_OscConfig+0x340>
 8000af8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000afa:	4313      	orrs	r3, r2
 8000afc:	6523      	str	r3, [r4, #80]	; 0x50
 8000afe:	e04c      	b.n	8000b9a <HAL_RCC_OscConfig+0x38a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b00:	2280      	movs	r2, #128	; 0x80
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	0052      	lsls	r2, r2, #1
 8000b06:	4313      	orrs	r3, r2
 8000b08:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000b0a:	f7ff fcdb 	bl	80004c4 <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b0e:	2380      	movs	r3, #128	; 0x80
 8000b10:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 8000b12:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b14:	9303      	str	r3, [sp, #12]
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	9a03      	ldr	r2, [sp, #12]
 8000b1a:	4213      	tst	r3, r2
 8000b1c:	d1e7      	bne.n	8000aee <HAL_RCC_OscConfig+0x2de>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b1e:	f7ff fcd1 	bl	80004c4 <HAL_GetTick>
 8000b22:	9b02      	ldr	r3, [sp, #8]
 8000b24:	1ac0      	subs	r0, r0, r3
 8000b26:	2864      	cmp	r0, #100	; 0x64
 8000b28:	d9f5      	bls.n	8000b16 <HAL_RCC_OscConfig+0x306>
 8000b2a:	e6e8      	b.n	80008fe <HAL_RCC_OscConfig+0xee>
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	ffff1fff 	.word	0xffff1fff
 8000b34:	080021e1 	.word	0x080021e1
 8000b38:	20000000 	.word	0x20000000
 8000b3c:	fffeffff 	.word	0xfffeffff
 8000b40:	fffbffff 	.word	0xfffbffff
 8000b44:	ffffe0ff 	.word	0xffffe0ff
 8000b48:	fffffeff 	.word	0xfffffeff
 8000b4c:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d116      	bne.n	8000b82 <HAL_RCC_OscConfig+0x372>
 8000b54:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000b56:	4a6c      	ldr	r2, [pc, #432]	; (8000d08 <HAL_RCC_OscConfig+0x4f8>)
 8000b58:	4013      	ands	r3, r2
 8000b5a:	6523      	str	r3, [r4, #80]	; 0x50
 8000b5c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000b5e:	4a6b      	ldr	r2, [pc, #428]	; (8000d0c <HAL_RCC_OscConfig+0x4fc>)
 8000b60:	4013      	ands	r3, r2
 8000b62:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000b64:	f7ff fcae 	bl	80004c4 <HAL_GetTick>
 8000b68:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000b6a:	2280      	movs	r2, #128	; 0x80
 8000b6c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000b6e:	0092      	lsls	r2, r2, #2
 8000b70:	4213      	tst	r3, r2
 8000b72:	d02a      	beq.n	8000bca <HAL_RCC_OscConfig+0x3ba>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b74:	f7ff fca6 	bl	80004c4 <HAL_GetTick>
 8000b78:	4b65      	ldr	r3, [pc, #404]	; (8000d10 <HAL_RCC_OscConfig+0x500>)
 8000b7a:	1bc0      	subs	r0, r0, r7
 8000b7c:	4298      	cmp	r0, r3
 8000b7e:	d9f4      	bls.n	8000b6a <HAL_RCC_OscConfig+0x35a>
 8000b80:	e6bd      	b.n	80008fe <HAL_RCC_OscConfig+0xee>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b82:	21a0      	movs	r1, #160	; 0xa0
 8000b84:	00c9      	lsls	r1, r1, #3
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d10b      	bne.n	8000ba2 <HAL_RCC_OscConfig+0x392>
 8000b8a:	2380      	movs	r3, #128	; 0x80
 8000b8c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8000b8e:	00db      	lsls	r3, r3, #3
 8000b90:	430b      	orrs	r3, r1
 8000b92:	6523      	str	r3, [r4, #80]	; 0x50
 8000b94:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000b96:	431a      	orrs	r2, r3
 8000b98:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000b9a:	f7ff fc93 	bl	80004c4 <HAL_GetTick>
 8000b9e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000ba0:	e00e      	b.n	8000bc0 <HAL_RCC_OscConfig+0x3b0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ba2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000ba4:	4a58      	ldr	r2, [pc, #352]	; (8000d08 <HAL_RCC_OscConfig+0x4f8>)
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	6523      	str	r3, [r4, #80]	; 0x50
 8000baa:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000bac:	4a57      	ldr	r2, [pc, #348]	; (8000d0c <HAL_RCC_OscConfig+0x4fc>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	e7a4      	b.n	8000afc <HAL_RCC_OscConfig+0x2ec>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bb2:	f7ff fc87 	bl	80004c4 <HAL_GetTick>
 8000bb6:	4b56      	ldr	r3, [pc, #344]	; (8000d10 <HAL_RCC_OscConfig+0x500>)
 8000bb8:	1bc0      	subs	r0, r0, r7
 8000bba:	4298      	cmp	r0, r3
 8000bbc:	d900      	bls.n	8000bc0 <HAL_RCC_OscConfig+0x3b0>
 8000bbe:	e69e      	b.n	80008fe <HAL_RCC_OscConfig+0xee>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000bc0:	2280      	movs	r2, #128	; 0x80
 8000bc2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000bc4:	0092      	lsls	r2, r2, #2
 8000bc6:	4213      	tst	r3, r2
 8000bc8:	d0f3      	beq.n	8000bb2 <HAL_RCC_OscConfig+0x3a2>
    if(pwrclkchanged == SET)
 8000bca:	9b01      	ldr	r3, [sp, #4]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d000      	beq.n	8000bd2 <HAL_RCC_OscConfig+0x3c2>
 8000bd0:	e66a      	b.n	80008a8 <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000bd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000bd4:	4a4f      	ldr	r2, [pc, #316]	; (8000d14 <HAL_RCC_OscConfig+0x504>)
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	63a3      	str	r3, [r4, #56]	; 0x38
 8000bda:	e665      	b.n	80008a8 <HAL_RCC_OscConfig+0x98>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000bdc:	69a9      	ldr	r1, [r5, #24]
 8000bde:	2301      	movs	r3, #1
 8000be0:	4a4d      	ldr	r2, [pc, #308]	; (8000d18 <HAL_RCC_OscConfig+0x508>)
 8000be2:	2900      	cmp	r1, #0
 8000be4:	d018      	beq.n	8000c18 <HAL_RCC_OscConfig+0x408>
        __HAL_RCC_HSI48_ENABLE();
 8000be6:	68a1      	ldr	r1, [r4, #8]
 8000be8:	4319      	orrs	r1, r3
 8000bea:	60a1      	str	r1, [r4, #8]
 8000bec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000bee:	430b      	orrs	r3, r1
 8000bf0:	6363      	str	r3, [r4, #52]	; 0x34
 8000bf2:	2380      	movs	r3, #128	; 0x80
 8000bf4:	6a11      	ldr	r1, [r2, #32]
 8000bf6:	019b      	lsls	r3, r3, #6
 8000bf8:	430b      	orrs	r3, r1
 8000bfa:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8000bfc:	f7ff fc62 	bl	80004c4 <HAL_GetTick>
 8000c00:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8000c02:	2202      	movs	r2, #2
 8000c04:	68a3      	ldr	r3, [r4, #8]
 8000c06:	4213      	tst	r3, r2
 8000c08:	d000      	beq.n	8000c0c <HAL_RCC_OscConfig+0x3fc>
 8000c0a:	e651      	b.n	80008b0 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000c0c:	f7ff fc5a 	bl	80004c4 <HAL_GetTick>
 8000c10:	1bc0      	subs	r0, r0, r7
 8000c12:	2802      	cmp	r0, #2
 8000c14:	d9f5      	bls.n	8000c02 <HAL_RCC_OscConfig+0x3f2>
 8000c16:	e672      	b.n	80008fe <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI48_DISABLE();
 8000c18:	68a1      	ldr	r1, [r4, #8]
 8000c1a:	4399      	bics	r1, r3
 8000c1c:	60a1      	str	r1, [r4, #8]
 8000c1e:	6a13      	ldr	r3, [r2, #32]
 8000c20:	493e      	ldr	r1, [pc, #248]	; (8000d1c <HAL_RCC_OscConfig+0x50c>)
 8000c22:	400b      	ands	r3, r1
 8000c24:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8000c26:	f7ff fc4d 	bl	80004c4 <HAL_GetTick>
 8000c2a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000c2c:	2202      	movs	r2, #2
 8000c2e:	68a3      	ldr	r3, [r4, #8]
 8000c30:	4213      	tst	r3, r2
 8000c32:	d100      	bne.n	8000c36 <HAL_RCC_OscConfig+0x426>
 8000c34:	e63c      	b.n	80008b0 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000c36:	f7ff fc45 	bl	80004c4 <HAL_GetTick>
 8000c3a:	1bc0      	subs	r0, r0, r7
 8000c3c:	2802      	cmp	r0, #2
 8000c3e:	d9f5      	bls.n	8000c2c <HAL_RCC_OscConfig+0x41c>
 8000c40:	e65d      	b.n	80008fe <HAL_RCC_OscConfig+0xee>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c42:	2e0c      	cmp	r6, #12
 8000c44:	d043      	beq.n	8000cce <HAL_RCC_OscConfig+0x4be>
 8000c46:	4a36      	ldr	r2, [pc, #216]	; (8000d20 <HAL_RCC_OscConfig+0x510>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c48:	2b02      	cmp	r3, #2
 8000c4a:	d12e      	bne.n	8000caa <HAL_RCC_OscConfig+0x49a>
        __HAL_RCC_PLL_DISABLE();
 8000c4c:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000c4e:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8000c50:	4013      	ands	r3, r2
 8000c52:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c54:	f7ff fc36 	bl	80004c4 <HAL_GetTick>
 8000c58:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000c5a:	04b6      	lsls	r6, r6, #18
 8000c5c:	6823      	ldr	r3, [r4, #0]
 8000c5e:	4233      	tst	r3, r6
 8000c60:	d11d      	bne.n	8000c9e <HAL_RCC_OscConfig+0x48e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c62:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8000c64:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000c66:	68e2      	ldr	r2, [r4, #12]
 8000c68:	430b      	orrs	r3, r1
 8000c6a:	492e      	ldr	r1, [pc, #184]	; (8000d24 <HAL_RCC_OscConfig+0x514>)
 8000c6c:	400a      	ands	r2, r1
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8000c72:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c74:	4313      	orrs	r3, r2
 8000c76:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8000c78:	2380      	movs	r3, #128	; 0x80
 8000c7a:	6822      	ldr	r2, [r4, #0]
 8000c7c:	045b      	lsls	r3, r3, #17
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c82:	f7ff fc1f 	bl	80004c4 <HAL_GetTick>
 8000c86:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8000c88:	04ad      	lsls	r5, r5, #18
 8000c8a:	6823      	ldr	r3, [r4, #0]
 8000c8c:	422b      	tst	r3, r5
 8000c8e:	d000      	beq.n	8000c92 <HAL_RCC_OscConfig+0x482>
 8000c90:	e612      	b.n	80008b8 <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c92:	f7ff fc17 	bl	80004c4 <HAL_GetTick>
 8000c96:	1b80      	subs	r0, r0, r6
 8000c98:	2802      	cmp	r0, #2
 8000c9a:	d9f6      	bls.n	8000c8a <HAL_RCC_OscConfig+0x47a>
 8000c9c:	e62f      	b.n	80008fe <HAL_RCC_OscConfig+0xee>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c9e:	f7ff fc11 	bl	80004c4 <HAL_GetTick>
 8000ca2:	1bc0      	subs	r0, r0, r7
 8000ca4:	2802      	cmp	r0, #2
 8000ca6:	d9d9      	bls.n	8000c5c <HAL_RCC_OscConfig+0x44c>
 8000ca8:	e629      	b.n	80008fe <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_PLL_DISABLE();
 8000caa:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000cac:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8000cae:	4013      	ands	r3, r2
 8000cb0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000cb2:	f7ff fc07 	bl	80004c4 <HAL_GetTick>
 8000cb6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000cb8:	04ad      	lsls	r5, r5, #18
 8000cba:	6823      	ldr	r3, [r4, #0]
 8000cbc:	422b      	tst	r3, r5
 8000cbe:	d100      	bne.n	8000cc2 <HAL_RCC_OscConfig+0x4b2>
 8000cc0:	e5fa      	b.n	80008b8 <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cc2:	f7ff fbff 	bl	80004c4 <HAL_GetTick>
 8000cc6:	1b80      	subs	r0, r0, r6
 8000cc8:	2802      	cmp	r0, #2
 8000cca:	d9f6      	bls.n	8000cba <HAL_RCC_OscConfig+0x4aa>
 8000ccc:	e617      	b.n	80008fe <HAL_RCC_OscConfig+0xee>
        return HAL_ERROR;
 8000cce:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d100      	bne.n	8000cd6 <HAL_RCC_OscConfig+0x4c6>
 8000cd4:	e5a2      	b.n	800081c <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000cd6:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8000cd8:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000cda:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8000cdc:	0252      	lsls	r2, r2, #9
 8000cde:	401a      	ands	r2, r3
        return HAL_ERROR;
 8000ce0:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ce2:	428a      	cmp	r2, r1
 8000ce4:	d000      	beq.n	8000ce8 <HAL_RCC_OscConfig+0x4d8>
 8000ce6:	e599      	b.n	800081c <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000ce8:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000cea:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000cec:	0392      	lsls	r2, r2, #14
 8000cee:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000cf0:	428a      	cmp	r2, r1
 8000cf2:	d000      	beq.n	8000cf6 <HAL_RCC_OscConfig+0x4e6>
 8000cf4:	e592      	b.n	800081c <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8000cf6:	20c0      	movs	r0, #192	; 0xc0
 8000cf8:	0400      	lsls	r0, r0, #16
 8000cfa:	4003      	ands	r3, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000cfc:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8000cfe:	1a18      	subs	r0, r3, r0
 8000d00:	1e43      	subs	r3, r0, #1
 8000d02:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8000d04:	b2c0      	uxtb	r0, r0
 8000d06:	e589      	b.n	800081c <HAL_RCC_OscConfig+0xc>
 8000d08:	fffffeff 	.word	0xfffffeff
 8000d0c:	fffffbff 	.word	0xfffffbff
 8000d10:	00001388 	.word	0x00001388
 8000d14:	efffffff 	.word	0xefffffff
 8000d18:	40010000 	.word	0x40010000
 8000d1c:	ffffdfff 	.word	0xffffdfff
 8000d20:	feffffff 	.word	0xfeffffff
 8000d24:	ff02ffff 	.word	0xff02ffff

08000d28 <HAL_RCC_ClockConfig>:
{
 8000d28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000d2a:	1e06      	subs	r6, r0, #0
 8000d2c:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8000d2e:	d101      	bne.n	8000d34 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8000d30:	2001      	movs	r0, #1
}
 8000d32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000d34:	2201      	movs	r2, #1
 8000d36:	4c51      	ldr	r4, [pc, #324]	; (8000e7c <HAL_RCC_ClockConfig+0x154>)
 8000d38:	9901      	ldr	r1, [sp, #4]
 8000d3a:	6823      	ldr	r3, [r4, #0]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d327      	bcc.n	8000d92 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d42:	6832      	ldr	r2, [r6, #0]
 8000d44:	0793      	lsls	r3, r2, #30
 8000d46:	d42f      	bmi.n	8000da8 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d48:	07d3      	lsls	r3, r2, #31
 8000d4a:	d435      	bmi.n	8000db8 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	6822      	ldr	r2, [r4, #0]
 8000d50:	9901      	ldr	r1, [sp, #4]
 8000d52:	401a      	ands	r2, r3
 8000d54:	4291      	cmp	r1, r2
 8000d56:	d200      	bcs.n	8000d5a <HAL_RCC_ClockConfig+0x32>
 8000d58:	e081      	b.n	8000e5e <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d5a:	6832      	ldr	r2, [r6, #0]
 8000d5c:	4c48      	ldr	r4, [pc, #288]	; (8000e80 <HAL_RCC_ClockConfig+0x158>)
 8000d5e:	0753      	lsls	r3, r2, #29
 8000d60:	d500      	bpl.n	8000d64 <HAL_RCC_ClockConfig+0x3c>
 8000d62:	e084      	b.n	8000e6e <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d64:	0713      	lsls	r3, r2, #28
 8000d66:	d506      	bpl.n	8000d76 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000d68:	68e2      	ldr	r2, [r4, #12]
 8000d6a:	6933      	ldr	r3, [r6, #16]
 8000d6c:	4945      	ldr	r1, [pc, #276]	; (8000e84 <HAL_RCC_ClockConfig+0x15c>)
 8000d6e:	00db      	lsls	r3, r3, #3
 8000d70:	400a      	ands	r2, r1
 8000d72:	4313      	orrs	r3, r2
 8000d74:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000d76:	f7ff fd0f 	bl	8000798 <HAL_RCC_GetSysClockFreq>
 8000d7a:	68e3      	ldr	r3, [r4, #12]
 8000d7c:	4a42      	ldr	r2, [pc, #264]	; (8000e88 <HAL_RCC_ClockConfig+0x160>)
 8000d7e:	061b      	lsls	r3, r3, #24
 8000d80:	0f1b      	lsrs	r3, r3, #28
 8000d82:	5cd3      	ldrb	r3, [r2, r3]
 8000d84:	40d8      	lsrs	r0, r3
 8000d86:	4b41      	ldr	r3, [pc, #260]	; (8000e8c <HAL_RCC_ClockConfig+0x164>)
 8000d88:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	f7ff fb66 	bl	800045c <HAL_InitTick>
 8000d90:	e7cf      	b.n	8000d32 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d92:	6823      	ldr	r3, [r4, #0]
 8000d94:	9901      	ldr	r1, [sp, #4]
 8000d96:	4393      	bics	r3, r2
 8000d98:	430b      	orrs	r3, r1
 8000d9a:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d9c:	6823      	ldr	r3, [r4, #0]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	9a01      	ldr	r2, [sp, #4]
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d1c4      	bne.n	8000d30 <HAL_RCC_ClockConfig+0x8>
 8000da6:	e7cc      	b.n	8000d42 <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000da8:	20f0      	movs	r0, #240	; 0xf0
 8000daa:	4935      	ldr	r1, [pc, #212]	; (8000e80 <HAL_RCC_ClockConfig+0x158>)
 8000dac:	68cb      	ldr	r3, [r1, #12]
 8000dae:	4383      	bics	r3, r0
 8000db0:	68b0      	ldr	r0, [r6, #8]
 8000db2:	4303      	orrs	r3, r0
 8000db4:	60cb      	str	r3, [r1, #12]
 8000db6:	e7c7      	b.n	8000d48 <HAL_RCC_ClockConfig+0x20>
 8000db8:	4d31      	ldr	r5, [pc, #196]	; (8000e80 <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dba:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000dbc:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dbe:	2a02      	cmp	r2, #2
 8000dc0:	d119      	bne.n	8000df6 <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000dc2:	039b      	lsls	r3, r3, #14
 8000dc4:	d5b4      	bpl.n	8000d30 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000dc6:	2103      	movs	r1, #3
 8000dc8:	68eb      	ldr	r3, [r5, #12]
 8000dca:	438b      	bics	r3, r1
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8000dd0:	f7ff fb78 	bl	80004c4 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dd4:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000dd6:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d119      	bne.n	8000e10 <HAL_RCC_ClockConfig+0xe8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ddc:	220c      	movs	r2, #12
 8000dde:	68eb      	ldr	r3, [r5, #12]
 8000de0:	4013      	ands	r3, r2
 8000de2:	2b08      	cmp	r3, #8
 8000de4:	d0b2      	beq.n	8000d4c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000de6:	f7ff fb6d 	bl	80004c4 <HAL_GetTick>
 8000dea:	4b29      	ldr	r3, [pc, #164]	; (8000e90 <HAL_RCC_ClockConfig+0x168>)
 8000dec:	1bc0      	subs	r0, r0, r7
 8000dee:	4298      	cmp	r0, r3
 8000df0:	d9f4      	bls.n	8000ddc <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 8000df2:	2003      	movs	r0, #3
 8000df4:	e79d      	b.n	8000d32 <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000df6:	2a03      	cmp	r2, #3
 8000df8:	d102      	bne.n	8000e00 <HAL_RCC_ClockConfig+0xd8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000dfa:	019b      	lsls	r3, r3, #6
 8000dfc:	d4e3      	bmi.n	8000dc6 <HAL_RCC_ClockConfig+0x9e>
 8000dfe:	e797      	b.n	8000d30 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000e00:	2a01      	cmp	r2, #1
 8000e02:	d102      	bne.n	8000e0a <HAL_RCC_ClockConfig+0xe2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000e04:	075b      	lsls	r3, r3, #29
 8000e06:	d4de      	bmi.n	8000dc6 <HAL_RCC_ClockConfig+0x9e>
 8000e08:	e792      	b.n	8000d30 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000e0a:	059b      	lsls	r3, r3, #22
 8000e0c:	d4db      	bmi.n	8000dc6 <HAL_RCC_ClockConfig+0x9e>
 8000e0e:	e78f      	b.n	8000d30 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e10:	2b03      	cmp	r3, #3
 8000e12:	d10b      	bne.n	8000e2c <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e14:	220c      	movs	r2, #12
 8000e16:	68eb      	ldr	r3, [r5, #12]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d096      	beq.n	8000d4c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e1e:	f7ff fb51 	bl	80004c4 <HAL_GetTick>
 8000e22:	4b1b      	ldr	r3, [pc, #108]	; (8000e90 <HAL_RCC_ClockConfig+0x168>)
 8000e24:	1bc0      	subs	r0, r0, r7
 8000e26:	4298      	cmp	r0, r3
 8000e28:	d9f4      	bls.n	8000e14 <HAL_RCC_ClockConfig+0xec>
 8000e2a:	e7e2      	b.n	8000df2 <HAL_RCC_ClockConfig+0xca>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d010      	beq.n	8000e52 <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8000e30:	220c      	movs	r2, #12
 8000e32:	68eb      	ldr	r3, [r5, #12]
 8000e34:	4213      	tst	r3, r2
 8000e36:	d089      	beq.n	8000d4c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e38:	f7ff fb44 	bl	80004c4 <HAL_GetTick>
 8000e3c:	4b14      	ldr	r3, [pc, #80]	; (8000e90 <HAL_RCC_ClockConfig+0x168>)
 8000e3e:	1bc0      	subs	r0, r0, r7
 8000e40:	4298      	cmp	r0, r3
 8000e42:	d9f5      	bls.n	8000e30 <HAL_RCC_ClockConfig+0x108>
 8000e44:	e7d5      	b.n	8000df2 <HAL_RCC_ClockConfig+0xca>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e46:	f7ff fb3d 	bl	80004c4 <HAL_GetTick>
 8000e4a:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <HAL_RCC_ClockConfig+0x168>)
 8000e4c:	1bc0      	subs	r0, r0, r7
 8000e4e:	4298      	cmp	r0, r3
 8000e50:	d8cf      	bhi.n	8000df2 <HAL_RCC_ClockConfig+0xca>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e52:	220c      	movs	r2, #12
 8000e54:	68eb      	ldr	r3, [r5, #12]
 8000e56:	4013      	ands	r3, r2
 8000e58:	2b04      	cmp	r3, #4
 8000e5a:	d1f4      	bne.n	8000e46 <HAL_RCC_ClockConfig+0x11e>
 8000e5c:	e776      	b.n	8000d4c <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e5e:	6822      	ldr	r2, [r4, #0]
 8000e60:	439a      	bics	r2, r3
 8000e62:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e64:	6822      	ldr	r2, [r4, #0]
 8000e66:	421a      	tst	r2, r3
 8000e68:	d000      	beq.n	8000e6c <HAL_RCC_ClockConfig+0x144>
 8000e6a:	e761      	b.n	8000d30 <HAL_RCC_ClockConfig+0x8>
 8000e6c:	e775      	b.n	8000d5a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e6e:	68e3      	ldr	r3, [r4, #12]
 8000e70:	4908      	ldr	r1, [pc, #32]	; (8000e94 <HAL_RCC_ClockConfig+0x16c>)
 8000e72:	400b      	ands	r3, r1
 8000e74:	68f1      	ldr	r1, [r6, #12]
 8000e76:	430b      	orrs	r3, r1
 8000e78:	60e3      	str	r3, [r4, #12]
 8000e7a:	e773      	b.n	8000d64 <HAL_RCC_ClockConfig+0x3c>
 8000e7c:	40022000 	.word	0x40022000
 8000e80:	40021000 	.word	0x40021000
 8000e84:	ffffc7ff 	.word	0xffffc7ff
 8000e88:	080021e1 	.word	0x080021e1
 8000e8c:	20000000 	.word	0x20000000
 8000e90:	00001388 	.word	0x00001388
 8000e94:	fffff8ff 	.word	0xfffff8ff

08000e98 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000e98:	4b04      	ldr	r3, [pc, #16]	; (8000eac <HAL_RCC_GetPCLK1Freq+0x14>)
 8000e9a:	4a05      	ldr	r2, [pc, #20]	; (8000eb0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000e9c:	68db      	ldr	r3, [r3, #12]
 8000e9e:	055b      	lsls	r3, r3, #21
 8000ea0:	0f5b      	lsrs	r3, r3, #29
 8000ea2:	5cd3      	ldrb	r3, [r2, r3]
 8000ea4:	4a03      	ldr	r2, [pc, #12]	; (8000eb4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000ea6:	6810      	ldr	r0, [r2, #0]
 8000ea8:	40d8      	lsrs	r0, r3
}
 8000eaa:	4770      	bx	lr
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	080021f1 	.word	0x080021f1
 8000eb4:	20000000 	.word	0x20000000

08000eb8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000eb8:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <HAL_RCC_GetPCLK2Freq+0x14>)
 8000eba:	4a05      	ldr	r2, [pc, #20]	; (8000ed0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000ebc:	68db      	ldr	r3, [r3, #12]
 8000ebe:	049b      	lsls	r3, r3, #18
 8000ec0:	0f5b      	lsrs	r3, r3, #29
 8000ec2:	5cd3      	ldrb	r3, [r2, r3]
 8000ec4:	4a03      	ldr	r2, [pc, #12]	; (8000ed4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000ec6:	6810      	ldr	r0, [r2, #0]
 8000ec8:	40d8      	lsrs	r0, r3
}
 8000eca:	4770      	bx	lr
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	080021f1 	.word	0x080021f1
 8000ed4:	20000000 	.word	0x20000000

08000ed8 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8000ed8:	6803      	ldr	r3, [r0, #0]
{
 8000eda:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000edc:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8000ede:	069b      	lsls	r3, r3, #26
 8000ee0:	d53a      	bpl.n	8000f58 <HAL_RCCEx_PeriphCLKConfig+0x80>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ee2:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000ee4:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ee6:	4c5f      	ldr	r4, [pc, #380]	; (8001064 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8000ee8:	055b      	lsls	r3, r3, #21
 8000eea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8000eec:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eee:	421a      	tst	r2, r3
 8000ef0:	d104      	bne.n	8000efc <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ef2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000efc:	2780      	movs	r7, #128	; 0x80
 8000efe:	4e5a      	ldr	r6, [pc, #360]	; (8001068 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8000f00:	007f      	lsls	r7, r7, #1
 8000f02:	6833      	ldr	r3, [r6, #0]
 8000f04:	423b      	tst	r3, r7
 8000f06:	d069      	beq.n	8000fdc <HAL_RCCEx_PeriphCLKConfig+0x104>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8000f08:	22c0      	movs	r2, #192	; 0xc0
 8000f0a:	21c0      	movs	r1, #192	; 0xc0
 8000f0c:	6820      	ldr	r0, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8000f0e:	686b      	ldr	r3, [r5, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8000f10:	0392      	lsls	r2, r2, #14
 8000f12:	4010      	ands	r0, r2
 8000f14:	0289      	lsls	r1, r1, #10
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8000f16:	401a      	ands	r2, r3
 8000f18:	4290      	cmp	r0, r2
 8000f1a:	d000      	beq.n	8000f1e <HAL_RCCEx_PeriphCLKConfig+0x46>
 8000f1c:	e06f      	b.n	8000ffe <HAL_RCCEx_PeriphCLKConfig+0x126>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8000f1e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000f20:	400a      	ands	r2, r1

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8000f22:	d000      	beq.n	8000f26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8000f24:	e076      	b.n	8001014 <HAL_RCCEx_PeriphCLKConfig+0x13c>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000f26:	6869      	ldr	r1, [r5, #4]
 8000f28:	23c0      	movs	r3, #192	; 0xc0
 8000f2a:	000a      	movs	r2, r1
 8000f2c:	029b      	lsls	r3, r3, #10
 8000f2e:	401a      	ands	r2, r3
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d107      	bne.n	8000f44 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8000f34:	6823      	ldr	r3, [r4, #0]
 8000f36:	484d      	ldr	r0, [pc, #308]	; (800106c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8000f38:	4003      	ands	r3, r0
 8000f3a:	20c0      	movs	r0, #192	; 0xc0
 8000f3c:	0380      	lsls	r0, r0, #14
 8000f3e:	4001      	ands	r1, r0
 8000f40:	430b      	orrs	r3, r1
 8000f42:	6023      	str	r3, [r4, #0]
 8000f44:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000f46:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000f48:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000f4a:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d103      	bne.n	8000f58 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f50:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000f52:	4a47      	ldr	r2, [pc, #284]	; (8001070 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8000f54:	4013      	ands	r3, r2
 8000f56:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000f58:	682b      	ldr	r3, [r5, #0]
 8000f5a:	07da      	lsls	r2, r3, #31
 8000f5c:	d506      	bpl.n	8000f6c <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000f5e:	2003      	movs	r0, #3
 8000f60:	4940      	ldr	r1, [pc, #256]	; (8001064 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8000f62:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000f64:	4382      	bics	r2, r0
 8000f66:	68a8      	ldr	r0, [r5, #8]
 8000f68:	4302      	orrs	r2, r0
 8000f6a:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8000f6c:	079a      	lsls	r2, r3, #30
 8000f6e:	d506      	bpl.n	8000f7e <HAL_RCCEx_PeriphCLKConfig+0xa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8000f70:	200c      	movs	r0, #12
 8000f72:	493c      	ldr	r1, [pc, #240]	; (8001064 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8000f74:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000f76:	4382      	bics	r2, r0
 8000f78:	68e8      	ldr	r0, [r5, #12]
 8000f7a:	4302      	orrs	r2, r0
 8000f7c:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8000f7e:	075a      	lsls	r2, r3, #29
 8000f80:	d506      	bpl.n	8000f90 <HAL_RCCEx_PeriphCLKConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8000f82:	4938      	ldr	r1, [pc, #224]	; (8001064 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8000f84:	483b      	ldr	r0, [pc, #236]	; (8001074 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8000f86:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000f88:	4002      	ands	r2, r0
 8000f8a:	6928      	ldr	r0, [r5, #16]
 8000f8c:	4302      	orrs	r2, r0
 8000f8e:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000f90:	071a      	lsls	r2, r3, #28
 8000f92:	d506      	bpl.n	8000fa2 <HAL_RCCEx_PeriphCLKConfig+0xca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000f94:	4933      	ldr	r1, [pc, #204]	; (8001064 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8000f96:	4838      	ldr	r0, [pc, #224]	; (8001078 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8000f98:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000f9a:	4002      	ands	r2, r0
 8000f9c:	6968      	ldr	r0, [r5, #20]
 8000f9e:	4302      	orrs	r2, r0
 8000fa0:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8000fa2:	05da      	lsls	r2, r3, #23
 8000fa4:	d506      	bpl.n	8000fb4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8000fa6:	492f      	ldr	r1, [pc, #188]	; (8001064 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8000fa8:	4834      	ldr	r0, [pc, #208]	; (800107c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8000faa:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000fac:	4002      	ands	r2, r0
 8000fae:	69a8      	ldr	r0, [r5, #24]
 8000fb0:	4302      	orrs	r2, r0
 8000fb2:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8000fb4:	065a      	lsls	r2, r3, #25
 8000fb6:	d506      	bpl.n	8000fc6 <HAL_RCCEx_PeriphCLKConfig+0xee>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000fb8:	492a      	ldr	r1, [pc, #168]	; (8001064 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8000fba:	4831      	ldr	r0, [pc, #196]	; (8001080 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8000fbc:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000fbe:	4002      	ands	r2, r0
 8000fc0:	6a28      	ldr	r0, [r5, #32]
 8000fc2:	4302      	orrs	r2, r0
 8000fc4:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8000fc6:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8000fc8:	061b      	lsls	r3, r3, #24
 8000fca:	d517      	bpl.n	8000ffc <HAL_RCCEx_PeriphCLKConfig+0x124>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8000fcc:	4a25      	ldr	r2, [pc, #148]	; (8001064 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8000fce:	492d      	ldr	r1, [pc, #180]	; (8001084 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8000fd0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8000fd2:	400b      	ands	r3, r1
 8000fd4:	69e9      	ldr	r1, [r5, #28]
 8000fd6:	430b      	orrs	r3, r1
 8000fd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fda:	e00f      	b.n	8000ffc <HAL_RCCEx_PeriphCLKConfig+0x124>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fdc:	6833      	ldr	r3, [r6, #0]
 8000fde:	433b      	orrs	r3, r7
 8000fe0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000fe2:	f7ff fa6f 	bl	80004c4 <HAL_GetTick>
 8000fe6:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fe8:	6833      	ldr	r3, [r6, #0]
 8000fea:	423b      	tst	r3, r7
 8000fec:	d18c      	bne.n	8000f08 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fee:	f7ff fa69 	bl	80004c4 <HAL_GetTick>
 8000ff2:	9b01      	ldr	r3, [sp, #4]
 8000ff4:	1ac0      	subs	r0, r0, r3
 8000ff6:	2864      	cmp	r0, #100	; 0x64
 8000ff8:	d9f6      	bls.n	8000fe8 <HAL_RCCEx_PeriphCLKConfig+0x110>
          return HAL_TIMEOUT;
 8000ffa:	2003      	movs	r0, #3
}
 8000ffc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8000ffe:	001a      	movs	r2, r3
 8001000:	400a      	ands	r2, r1
 8001002:	428a      	cmp	r2, r1
 8001004:	d000      	beq.n	8001008 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8001006:	e78a      	b.n	8000f1e <HAL_RCCEx_PeriphCLKConfig+0x46>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001008:	6822      	ldr	r2, [r4, #0]
          return HAL_ERROR;
 800100a:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800100c:	0392      	lsls	r2, r2, #14
 800100e:	d400      	bmi.n	8001012 <HAL_RCCEx_PeriphCLKConfig+0x13a>
 8001010:	e785      	b.n	8000f1e <HAL_RCCEx_PeriphCLKConfig+0x46>
 8001012:	e7f3      	b.n	8000ffc <HAL_RCCEx_PeriphCLKConfig+0x124>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001014:	400b      	ands	r3, r1
 8001016:	429a      	cmp	r2, r3
 8001018:	d100      	bne.n	800101c <HAL_RCCEx_PeriphCLKConfig+0x144>
 800101a:	e784      	b.n	8000f26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800101c:	682b      	ldr	r3, [r5, #0]
 800101e:	069b      	lsls	r3, r3, #26
 8001020:	d400      	bmi.n	8001024 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001022:	e780      	b.n	8000f26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001024:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001026:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8001028:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800102a:	0312      	lsls	r2, r2, #12
 800102c:	4302      	orrs	r2, r0
 800102e:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001030:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001032:	4b12      	ldr	r3, [pc, #72]	; (800107c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001034:	4814      	ldr	r0, [pc, #80]	; (8001088 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001036:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001038:	4002      	ands	r2, r0
 800103a:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 800103c:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800103e:	05cb      	lsls	r3, r1, #23
 8001040:	d400      	bmi.n	8001044 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8001042:	e770      	b.n	8000f26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
        tickstart = HAL_GetTick();
 8001044:	f7ff fa3e 	bl	80004c4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001048:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 800104a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800104c:	00bf      	lsls	r7, r7, #2
 800104e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001050:	423b      	tst	r3, r7
 8001052:	d000      	beq.n	8001056 <HAL_RCCEx_PeriphCLKConfig+0x17e>
 8001054:	e767      	b.n	8000f26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001056:	f7ff fa35 	bl	80004c4 <HAL_GetTick>
 800105a:	4b0c      	ldr	r3, [pc, #48]	; (800108c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800105c:	1b80      	subs	r0, r0, r6
 800105e:	4298      	cmp	r0, r3
 8001060:	d9f5      	bls.n	800104e <HAL_RCCEx_PeriphCLKConfig+0x176>
 8001062:	e7ca      	b.n	8000ffa <HAL_RCCEx_PeriphCLKConfig+0x122>
 8001064:	40021000 	.word	0x40021000
 8001068:	40007000 	.word	0x40007000
 800106c:	ffcfffff 	.word	0xffcfffff
 8001070:	efffffff 	.word	0xefffffff
 8001074:	fffff3ff 	.word	0xfffff3ff
 8001078:	ffffcfff 	.word	0xffffcfff
 800107c:	fffcffff 	.word	0xfffcffff
 8001080:	fbffffff 	.word	0xfbffffff
 8001084:	fff3ffff 	.word	0xfff3ffff
 8001088:	fff7ffff 	.word	0xfff7ffff
 800108c:	00001388 	.word	0x00001388

08001090 <HAL_RTC_AlarmAEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8001090:	4770      	bx	lr
	...

08001094 <HAL_RTC_AlarmIRQHandler>:
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8001094:	6803      	ldr	r3, [r0, #0]
{
 8001096:	b510      	push	{r4, lr}
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8001098:	689a      	ldr	r2, [r3, #8]
{
 800109a:	0004      	movs	r4, r0
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800109c:	04d2      	lsls	r2, r2, #19
 800109e:	d50a      	bpl.n	80010b6 <HAL_RTC_AlarmIRQHandler+0x22>
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	05db      	lsls	r3, r3, #23
 80010a4:	d507      	bpl.n	80010b6 <HAL_RTC_AlarmIRQHandler+0x22>
      HAL_RTC_AlarmAEventCallback(hrtc);
 80010a6:	f7ff fff3 	bl	8001090 <HAL_RTC_AlarmAEventCallback>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80010aa:	6821      	ldr	r1, [r4, #0]
 80010ac:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <HAL_RTC_AlarmIRQHandler+0x54>)
 80010ae:	68ca      	ldr	r2, [r1, #12]
 80010b0:	b2d2      	uxtb	r2, r2
 80010b2:	4313      	orrs	r3, r2
 80010b4:	60cb      	str	r3, [r1, #12]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80010b6:	6823      	ldr	r3, [r4, #0]
 80010b8:	689a      	ldr	r2, [r3, #8]
 80010ba:	0492      	lsls	r2, r2, #18
 80010bc:	d50b      	bpl.n	80010d6 <HAL_RTC_AlarmIRQHandler+0x42>
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	059b      	lsls	r3, r3, #22
 80010c2:	d508      	bpl.n	80010d6 <HAL_RTC_AlarmIRQHandler+0x42>
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80010c4:	0020      	movs	r0, r4
 80010c6:	f000 fa67 	bl	8001598 <HAL_RTCEx_AlarmBEventCallback>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80010ca:	6821      	ldr	r1, [r4, #0]
 80010cc:	4b07      	ldr	r3, [pc, #28]	; (80010ec <HAL_RTC_AlarmIRQHandler+0x58>)
 80010ce:	68ca      	ldr	r2, [r1, #12]
 80010d0:	b2d2      	uxtb	r2, r2
 80010d2:	4313      	orrs	r3, r2
 80010d4:	60cb      	str	r3, [r1, #12]
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80010d6:	2280      	movs	r2, #128	; 0x80
 80010d8:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <HAL_RTC_AlarmIRQHandler+0x5c>)
 80010da:	0292      	lsls	r2, r2, #10
 80010dc:	615a      	str	r2, [r3, #20]
  hrtc->State = HAL_RTC_STATE_READY;
 80010de:	2301      	movs	r3, #1
 80010e0:	3402      	adds	r4, #2
 80010e2:	77e3      	strb	r3, [r4, #31]
}
 80010e4:	bd10      	pop	{r4, pc}
 80010e6:	46c0      	nop			; (mov r8, r8)
 80010e8:	fffffe7f 	.word	0xfffffe7f
 80010ec:	fffffd7f 	.word	0xfffffd7f
 80010f0:	40010400 	.word	0x40010400

080010f4 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80010f4:	21a0      	movs	r1, #160	; 0xa0
 80010f6:	6802      	ldr	r2, [r0, #0]
{
 80010f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80010fa:	68d3      	ldr	r3, [r2, #12]
{
 80010fc:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80010fe:	438b      	bics	r3, r1
 8001100:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8001102:	f7ff f9df 	bl	80004c4 <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001106:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 8001108:	0006      	movs	r6, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800110a:	2520      	movs	r5, #32
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800110c:	00bf      	lsls	r7, r7, #2
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800110e:	6823      	ldr	r3, [r4, #0]
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	422b      	tst	r3, r5
 8001114:	d001      	beq.n	800111a <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8001116:	2000      	movs	r0, #0
}
 8001118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800111a:	f7ff f9d3 	bl	80004c4 <HAL_GetTick>
 800111e:	1b80      	subs	r0, r0, r6
 8001120:	42b8      	cmp	r0, r7
 8001122:	d9f4      	bls.n	800110e <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 8001124:	2003      	movs	r0, #3
 8001126:	e7f7      	b.n	8001118 <HAL_RTC_WaitForSynchro+0x24>

08001128 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800112a:	2440      	movs	r4, #64	; 0x40
 800112c:	6803      	ldr	r3, [r0, #0]
{
 800112e:	0005      	movs	r5, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8001130:	68da      	ldr	r2, [r3, #12]
 8001132:	4222      	tst	r2, r4
 8001134:	d001      	beq.n	800113a <RTC_EnterInitMode+0x12>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001136:	2000      	movs	r0, #0
}
 8001138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800113a:	2201      	movs	r2, #1
 800113c:	4252      	negs	r2, r2
 800113e:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8001140:	f7ff f9c0 	bl	80004c4 <HAL_GetTick>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8001144:	27fa      	movs	r7, #250	; 0xfa
    tickstart = HAL_GetTick();
 8001146:	0006      	movs	r6, r0
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8001148:	00bf      	lsls	r7, r7, #2
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800114a:	682b      	ldr	r3, [r5, #0]
 800114c:	68db      	ldr	r3, [r3, #12]
 800114e:	4223      	tst	r3, r4
 8001150:	d1f1      	bne.n	8001136 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8001152:	f7ff f9b7 	bl	80004c4 <HAL_GetTick>
 8001156:	1b80      	subs	r0, r0, r6
 8001158:	42b8      	cmp	r0, r7
 800115a:	d9f6      	bls.n	800114a <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 800115c:	2003      	movs	r0, #3
 800115e:	e7eb      	b.n	8001138 <RTC_EnterInitMode+0x10>

08001160 <HAL_RTC_Init>:
{
 8001160:	b570      	push	{r4, r5, r6, lr}
 8001162:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001164:	2501      	movs	r5, #1
  if (hrtc == NULL)
 8001166:	2800      	cmp	r0, #0
 8001168:	d01a      	beq.n	80011a0 <HAL_RTC_Init+0x40>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800116a:	1c86      	adds	r6, r0, #2
 800116c:	7ff3      	ldrb	r3, [r6, #31]
 800116e:	b2db      	uxtb	r3, r3
 8001170:	2b00      	cmp	r3, #0
 8001172:	d103      	bne.n	800117c <HAL_RTC_Init+0x1c>
    hrtc->Lock = HAL_UNLOCKED;
 8001174:	1942      	adds	r2, r0, r5
 8001176:	77d3      	strb	r3, [r2, #31]
    HAL_RTC_MspInit(hrtc);
 8001178:	f000 fec6 	bl	8001f08 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800117c:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800117e:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001180:	77f3      	strb	r3, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001182:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001184:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001186:	625a      	str	r2, [r3, #36]	; 0x24
 8001188:	3a77      	subs	r2, #119	; 0x77
 800118a:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800118c:	f7ff ffcc 	bl	8001128 <RTC_EnterInitMode>
 8001190:	6823      	ldr	r3, [r4, #0]
 8001192:	1e05      	subs	r5, r0, #0
 8001194:	d006      	beq.n	80011a4 <HAL_RTC_Init+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001196:	22ff      	movs	r2, #255	; 0xff
 8001198:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800119a:	2304      	movs	r3, #4
 800119c:	77f3      	strb	r3, [r6, #31]
        return HAL_ERROR;
 800119e:	2501      	movs	r5, #1
}
 80011a0:	0028      	movs	r0, r5
 80011a2:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80011a4:	689a      	ldr	r2, [r3, #8]
 80011a6:	491b      	ldr	r1, [pc, #108]	; (8001214 <HAL_RTC_Init+0xb4>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80011a8:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80011aa:	400a      	ands	r2, r1
 80011ac:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80011ae:	6862      	ldr	r2, [r4, #4]
 80011b0:	6899      	ldr	r1, [r3, #8]
 80011b2:	4302      	orrs	r2, r0
 80011b4:	69a0      	ldr	r0, [r4, #24]
 80011b6:	4302      	orrs	r2, r0
 80011b8:	430a      	orrs	r2, r1
 80011ba:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80011bc:	68e2      	ldr	r2, [r4, #12]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80011be:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80011c0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80011c2:	68a2      	ldr	r2, [r4, #8]
 80011c4:	6919      	ldr	r1, [r3, #16]
 80011c6:	0412      	lsls	r2, r2, #16
 80011c8:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80011ca:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80011cc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80011ce:	68da      	ldr	r2, [r3, #12]
 80011d0:	438a      	bics	r2, r1
 80011d2:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80011d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011d6:	397d      	subs	r1, #125	; 0x7d
 80011d8:	438a      	bics	r2, r1
 80011da:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80011dc:	69e2      	ldr	r2, [r4, #28]
 80011de:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80011e0:	4302      	orrs	r2, r0
 80011e2:	430a      	orrs	r2, r1
 80011e4:	64da      	str	r2, [r3, #76]	; 0x4c
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	069b      	lsls	r3, r3, #26
 80011ea:	d40c      	bmi.n	8001206 <HAL_RTC_Init+0xa6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80011ec:	0020      	movs	r0, r4
 80011ee:	f7ff ff81 	bl	80010f4 <HAL_RTC_WaitForSynchro>
 80011f2:	2800      	cmp	r0, #0
 80011f4:	d007      	beq.n	8001206 <HAL_RTC_Init+0xa6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80011f6:	22ff      	movs	r2, #255	; 0xff
 80011f8:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(hrtc);
 80011fa:	3401      	adds	r4, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80011fc:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80011fe:	2304      	movs	r3, #4
 8001200:	77f3      	strb	r3, [r6, #31]
        __HAL_UNLOCK(hrtc);
 8001202:	77e5      	strb	r5, [r4, #31]
 8001204:	e7cb      	b.n	800119e <HAL_RTC_Init+0x3e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001206:	22ff      	movs	r2, #255	; 0xff
 8001208:	6823      	ldr	r3, [r4, #0]
 800120a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 800120c:	2301      	movs	r3, #1
 800120e:	77f3      	strb	r3, [r6, #31]
    return HAL_OK;
 8001210:	e7c6      	b.n	80011a0 <HAL_RTC_Init+0x40>
 8001212:	46c0      	nop			; (mov r8, r8)
 8001214:	ff8fffbf 	.word	0xff8fffbf

08001218 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8001218:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while (Param >= 10U)
 800121a:	2809      	cmp	r0, #9
 800121c:	d803      	bhi.n	8001226 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Param -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800121e:	011b      	lsls	r3, r3, #4
 8001220:	4318      	orrs	r0, r3
 8001222:	b2c0      	uxtb	r0, r0
}
 8001224:	4770      	bx	lr
    Param -= 10U;
 8001226:	380a      	subs	r0, #10
    bcdhigh++;
 8001228:	3301      	adds	r3, #1
    Param -= 10U;
 800122a:	b2c0      	uxtb	r0, r0
 800122c:	e7f5      	b.n	800121a <RTC_ByteToBcd2+0x2>
	...

08001230 <HAL_RTC_SetTime>:
{
 8001230:	2302      	movs	r3, #2
 8001232:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8001234:	1c47      	adds	r7, r0, #1
{
 8001236:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 8001238:	7ff9      	ldrb	r1, [r7, #31]
{
 800123a:	0005      	movs	r5, r0
  __HAL_LOCK(hrtc);
 800123c:	001e      	movs	r6, r3
 800123e:	2901      	cmp	r1, #1
 8001240:	d036      	beq.n	80012b0 <HAL_RTC_SetTime+0x80>
 8001242:	2101      	movs	r1, #1
 8001244:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001246:	18c1      	adds	r1, r0, r3
 8001248:	77cb      	strb	r3, [r1, #31]
 800124a:	9100      	str	r1, [sp, #0]
 800124c:	2140      	movs	r1, #64	; 0x40
 800124e:	6803      	ldr	r3, [r0, #0]
 8001250:	7866      	ldrb	r6, [r4, #1]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	7820      	ldrb	r0, [r4, #0]
 8001256:	400b      	ands	r3, r1
  if (Format == RTC_FORMAT_BIN)
 8001258:	2a00      	cmp	r2, #0
 800125a:	d12b      	bne.n	80012b4 <HAL_RTC_SetTime+0x84>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800125c:	2b00      	cmp	r3, #0
 800125e:	d100      	bne.n	8001262 <HAL_RTC_SetTime+0x32>
      sTime->TimeFormat = 0x00U;
 8001260:	70e3      	strb	r3, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001262:	f7ff ffd9 	bl	8001218 <RTC_ByteToBcd2>
 8001266:	9001      	str	r0, [sp, #4]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001268:	0030      	movs	r0, r6
 800126a:	f7ff ffd5 	bl	8001218 <RTC_ByteToBcd2>
 800126e:	0006      	movs	r6, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8001270:	78a0      	ldrb	r0, [r4, #2]
 8001272:	f7ff ffd1 	bl	8001218 <RTC_ByteToBcd2>
 8001276:	0003      	movs	r3, r0
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8001278:	78e0      	ldrb	r0, [r4, #3]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800127a:	0236      	lsls	r6, r6, #8
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800127c:	0400      	lsls	r0, r0, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800127e:	4318      	orrs	r0, r3
 8001280:	9b01      	ldr	r3, [sp, #4]
 8001282:	041b      	lsls	r3, r3, #16
 8001284:	4318      	orrs	r0, r3
 8001286:	4330      	orrs	r0, r6
 8001288:	9001      	str	r0, [sp, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800128a:	22ca      	movs	r2, #202	; 0xca
 800128c:	682b      	ldr	r3, [r5, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800128e:	0028      	movs	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001290:	625a      	str	r2, [r3, #36]	; 0x24
 8001292:	3a77      	subs	r2, #119	; 0x77
 8001294:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001296:	f7ff ff47 	bl	8001128 <RTC_EnterInitMode>
 800129a:	682b      	ldr	r3, [r5, #0]
 800129c:	1e06      	subs	r6, r0, #0
 800129e:	d016      	beq.n	80012ce <HAL_RTC_SetTime+0x9e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80012a0:	22ff      	movs	r2, #255	; 0xff
 80012a2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80012a4:	2304      	movs	r3, #4
 80012a6:	9a00      	ldr	r2, [sp, #0]
 80012a8:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 80012aa:	2300      	movs	r3, #0
 80012ac:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 80012ae:	2601      	movs	r6, #1
}
 80012b0:	0030      	movs	r0, r6
 80012b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d100      	bne.n	80012ba <HAL_RTC_SetTime+0x8a>
      sTime->TimeFormat = 0x00U;
 80012b8:	70e3      	strb	r3, [r4, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80012ba:	0400      	lsls	r0, r0, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80012bc:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80012be:	4306      	orrs	r6, r0
              ((uint32_t)sTime->Seconds) | \
 80012c0:	78a0      	ldrb	r0, [r4, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80012c2:	4306      	orrs	r6, r0
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80012c4:	78e0      	ldrb	r0, [r4, #3]
 80012c6:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80012c8:	4306      	orrs	r6, r0
 80012ca:	9601      	str	r6, [sp, #4]
 80012cc:	e7dd      	b.n	800128a <HAL_RTC_SetTime+0x5a>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80012ce:	4815      	ldr	r0, [pc, #84]	; (8001324 <HAL_RTC_SetTime+0xf4>)
 80012d0:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80012d2:	4915      	ldr	r1, [pc, #84]	; (8001328 <HAL_RTC_SetTime+0xf8>)
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80012d4:	4002      	ands	r2, r0
 80012d6:	601a      	str	r2, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80012d8:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80012da:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80012dc:	400a      	ands	r2, r1
 80012de:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80012e0:	68e2      	ldr	r2, [r4, #12]
 80012e2:	6899      	ldr	r1, [r3, #8]
 80012e4:	4302      	orrs	r2, r0
 80012e6:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80012e8:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80012ea:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80012ec:	68da      	ldr	r2, [r3, #12]
 80012ee:	438a      	bics	r2, r1
 80012f0:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	069b      	lsls	r3, r3, #26
 80012f6:	d40c      	bmi.n	8001312 <HAL_RTC_SetTime+0xe2>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80012f8:	0028      	movs	r0, r5
 80012fa:	f7ff fefb 	bl	80010f4 <HAL_RTC_WaitForSynchro>
 80012fe:	2800      	cmp	r0, #0
 8001300:	d007      	beq.n	8001312 <HAL_RTC_SetTime+0xe2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001302:	22ff      	movs	r2, #255	; 0xff
 8001304:	682b      	ldr	r3, [r5, #0]
 8001306:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001308:	2304      	movs	r3, #4
 800130a:	9a00      	ldr	r2, [sp, #0]
 800130c:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 800130e:	77fe      	strb	r6, [r7, #31]
 8001310:	e7cd      	b.n	80012ae <HAL_RTC_SetTime+0x7e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001312:	22ff      	movs	r2, #255	; 0xff
 8001314:	682b      	ldr	r3, [r5, #0]
 8001316:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8001318:	2301      	movs	r3, #1
 800131a:	9a00      	ldr	r2, [sp, #0]
 800131c:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 800131e:	2300      	movs	r3, #0
 8001320:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 8001322:	e7c5      	b.n	80012b0 <HAL_RTC_SetTime+0x80>
 8001324:	007f7f7f 	.word	0x007f7f7f
 8001328:	fffbffff 	.word	0xfffbffff

0800132c <HAL_RTC_SetDate>:
{
 800132c:	2302      	movs	r3, #2
 800132e:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8001330:	1c47      	adds	r7, r0, #1
{
 8001332:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 8001334:	7ff9      	ldrb	r1, [r7, #31]
{
 8001336:	b085      	sub	sp, #20
 8001338:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 800133a:	001e      	movs	r6, r3
 800133c:	2901      	cmp	r1, #1
 800133e:	d035      	beq.n	80013ac <HAL_RTC_SetDate+0x80>
 8001340:	2101      	movs	r1, #1
 8001342:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001344:	18c1      	adds	r1, r0, r3
 8001346:	9101      	str	r1, [sp, #4]
 8001348:	77cb      	strb	r3, [r1, #31]
 800134a:	786b      	ldrb	r3, [r5, #1]
 800134c:	78e8      	ldrb	r0, [r5, #3]
 800134e:	78ae      	ldrb	r6, [r5, #2]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001350:	2a00      	cmp	r2, #0
 8001352:	d14e      	bne.n	80013f2 <HAL_RTC_SetDate+0xc6>
 8001354:	3210      	adds	r2, #16
 8001356:	4213      	tst	r3, r2
 8001358:	d002      	beq.n	8001360 <HAL_RTC_SetDate+0x34>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800135a:	4393      	bics	r3, r2
 800135c:	330a      	adds	r3, #10
 800135e:	706b      	strb	r3, [r5, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001360:	f7ff ff5a 	bl	8001218 <RTC_ByteToBcd2>
 8001364:	9002      	str	r0, [sp, #8]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8001366:	7868      	ldrb	r0, [r5, #1]
 8001368:	f7ff ff56 	bl	8001218 <RTC_ByteToBcd2>
 800136c:	9003      	str	r0, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800136e:	0030      	movs	r0, r6
 8001370:	f7ff ff52 	bl	8001218 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001374:	9b02      	ldr	r3, [sp, #8]
                  ((uint32_t)sDate->WeekDay << 13U));
 8001376:	782d      	ldrb	r5, [r5, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001378:	041e      	lsls	r6, r3, #16
                  ((uint32_t)sDate->WeekDay << 13U));
 800137a:	036d      	lsls	r5, r5, #13
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800137c:	9b03      	ldr	r3, [sp, #12]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800137e:	4305      	orrs	r5, r0
 8001380:	4335      	orrs	r5, r6
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8001382:	021e      	lsls	r6, r3, #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001384:	22ca      	movs	r2, #202	; 0xca
 8001386:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001388:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800138a:	625a      	str	r2, [r3, #36]	; 0x24
 800138c:	3a77      	subs	r2, #119	; 0x77
 800138e:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001390:	f7ff feca 	bl	8001128 <RTC_EnterInitMode>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001394:	4335      	orrs	r5, r6
 8001396:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001398:	1e06      	subs	r6, r0, #0
 800139a:	d00a      	beq.n	80013b2 <HAL_RTC_SetDate+0x86>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800139c:	22ff      	movs	r2, #255	; 0xff
 800139e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80013a0:	2304      	movs	r3, #4
 80013a2:	9a01      	ldr	r2, [sp, #4]
 80013a4:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 80013a6:	2300      	movs	r3, #0
 80013a8:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 80013aa:	2601      	movs	r6, #1
}
 80013ac:	0030      	movs	r0, r6
 80013ae:	b005      	add	sp, #20
 80013b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80013b2:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80013b4:	4812      	ldr	r0, [pc, #72]	; (8001400 <HAL_RTC_SetDate+0xd4>)
 80013b6:	4005      	ands	r5, r0
 80013b8:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80013ba:	68da      	ldr	r2, [r3, #12]
 80013bc:	438a      	bics	r2, r1
 80013be:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	069b      	lsls	r3, r3, #26
 80013c4:	d40c      	bmi.n	80013e0 <HAL_RTC_SetDate+0xb4>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80013c6:	0020      	movs	r0, r4
 80013c8:	f7ff fe94 	bl	80010f4 <HAL_RTC_WaitForSynchro>
 80013cc:	2800      	cmp	r0, #0
 80013ce:	d007      	beq.n	80013e0 <HAL_RTC_SetDate+0xb4>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80013d0:	22ff      	movs	r2, #255	; 0xff
 80013d2:	6823      	ldr	r3, [r4, #0]
 80013d4:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80013d6:	2304      	movs	r3, #4
 80013d8:	9a01      	ldr	r2, [sp, #4]
 80013da:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 80013dc:	77fe      	strb	r6, [r7, #31]
 80013de:	e7e4      	b.n	80013aa <HAL_RTC_SetDate+0x7e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80013e0:	22ff      	movs	r2, #255	; 0xff
 80013e2:	6823      	ldr	r3, [r4, #0]
 80013e4:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 80013e6:	2301      	movs	r3, #1
 80013e8:	9a01      	ldr	r2, [sp, #4]
 80013ea:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 80013ec:	2300      	movs	r3, #0
 80013ee:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 80013f0:	e7dc      	b.n	80013ac <HAL_RTC_SetDate+0x80>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80013f2:	0400      	lsls	r0, r0, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80013f4:	021b      	lsls	r3, r3, #8
                  (((uint32_t)sDate->WeekDay) << 13U));
 80013f6:	782d      	ldrb	r5, [r5, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80013f8:	4303      	orrs	r3, r0
                  (((uint32_t)sDate->Month) << 8U) | \
 80013fa:	431e      	orrs	r6, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80013fc:	036d      	lsls	r5, r5, #13
 80013fe:	e7c1      	b.n	8001384 <HAL_RTC_SetDate+0x58>
 8001400:	00ffff3f 	.word	0x00ffff3f

08001404 <HAL_RTC_SetAlarm_IT>:
{
 8001404:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8001406:	1c43      	adds	r3, r0, #1
 8001408:	9300      	str	r3, [sp, #0]
{
 800140a:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 800140c:	7fd9      	ldrb	r1, [r3, #31]
 800140e:	2302      	movs	r3, #2
{
 8001410:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8001412:	0018      	movs	r0, r3
 8001414:	2901      	cmp	r1, #1
 8001416:	d100      	bne.n	800141a <HAL_RTC_SetAlarm_IT+0x16>
 8001418:	e08d      	b.n	8001536 <HAL_RTC_SetAlarm_IT+0x132>
 800141a:	2101      	movs	r1, #1
 800141c:	1860      	adds	r0, r4, r1
 800141e:	77c1      	strb	r1, [r0, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001420:	18e1      	adds	r1, r4, r3
 8001422:	77cb      	strb	r3, [r1, #31]
 8001424:	2140      	movs	r1, #64	; 0x40
 8001426:	6823      	ldr	r3, [r4, #0]
 8001428:	7828      	ldrb	r0, [r5, #0]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	786e      	ldrb	r6, [r5, #1]
 800142e:	78af      	ldrb	r7, [r5, #2]
 8001430:	400b      	ands	r3, r1
  if (Format == RTC_FORMAT_BIN)
 8001432:	2a00      	cmp	r2, #0
 8001434:	d15d      	bne.n	80014f2 <HAL_RTC_SetAlarm_IT+0xee>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001436:	2b00      	cmp	r3, #0
 8001438:	d100      	bne.n	800143c <HAL_RTC_SetAlarm_IT+0x38>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800143a:	70eb      	strb	r3, [r5, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800143c:	f7ff feec 	bl	8001218 <RTC_ByteToBcd2>
 8001440:	9001      	str	r0, [sp, #4]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001442:	0030      	movs	r0, r6
 8001444:	f7ff fee8 	bl	8001218 <RTC_ByteToBcd2>
 8001448:	0006      	movs	r6, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800144a:	0038      	movs	r0, r7
 800144c:	f7ff fee4 	bl	8001218 <RTC_ByteToBcd2>
 8001450:	0007      	movs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001452:	1c6b      	adds	r3, r5, #1
 8001454:	7fd8      	ldrb	r0, [r3, #31]
 8001456:	f7ff fedf 	bl	8001218 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800145a:	696a      	ldr	r2, [r5, #20]
 800145c:	69eb      	ldr	r3, [r5, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800145e:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001460:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001462:	78ea      	ldrb	r2, [r5, #3]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001464:	0600      	lsls	r0, r0, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001466:	0412      	lsls	r2, r2, #16
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001468:	4313      	orrs	r3, r2
 800146a:	431f      	orrs	r7, r3
 800146c:	9b01      	ldr	r3, [sp, #4]
 800146e:	041b      	lsls	r3, r3, #16
 8001470:	431f      	orrs	r7, r3
 8001472:	4337      	orrs	r7, r6
 8001474:	4307      	orrs	r7, r0
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8001476:	69aa      	ldr	r2, [r5, #24]
 8001478:	686b      	ldr	r3, [r5, #4]
  if (sAlarm->Alarm == RTC_ALARM_A)
 800147a:	6a69      	ldr	r1, [r5, #36]	; 0x24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800147c:	4313      	orrs	r3, r2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800147e:	22ca      	movs	r2, #202	; 0xca
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8001480:	9301      	str	r3, [sp, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001482:	6823      	ldr	r3, [r4, #0]
 8001484:	625a      	str	r2, [r3, #36]	; 0x24
 8001486:	3a77      	subs	r2, #119	; 0x77
 8001488:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 800148a:	32ad      	adds	r2, #173	; 0xad
 800148c:	4291      	cmp	r1, r2
 800148e:	d153      	bne.n	8001538 <HAL_RTC_SetAlarm_IT+0x134>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8001490:	689a      	ldr	r2, [r3, #8]
 8001492:	493c      	ldr	r1, [pc, #240]	; (8001584 <HAL_RTC_SetAlarm_IT+0x180>)
 8001494:	400a      	ands	r2, r1
 8001496:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8001498:	68d9      	ldr	r1, [r3, #12]
 800149a:	4a3b      	ldr	r2, [pc, #236]	; (8001588 <HAL_RTC_SetAlarm_IT+0x184>)
 800149c:	b2c9      	uxtb	r1, r1
 800149e:	430a      	orrs	r2, r1
 80014a0:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80014a2:	f7ff f80f 	bl	80004c4 <HAL_GetTick>
 80014a6:	0006      	movs	r6, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80014a8:	2201      	movs	r2, #1
 80014aa:	6823      	ldr	r3, [r4, #0]
 80014ac:	68dd      	ldr	r5, [r3, #12]
 80014ae:	4015      	ands	r5, r2
 80014b0:	d032      	beq.n	8001518 <HAL_RTC_SetAlarm_IT+0x114>
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80014b2:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80014b4:	61df      	str	r7, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80014b6:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80014b8:	2280      	movs	r2, #128	; 0x80
 80014ba:	6899      	ldr	r1, [r3, #8]
 80014bc:	0052      	lsls	r2, r2, #1
 80014be:	430a      	orrs	r2, r1
 80014c0:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80014c2:	2280      	movs	r2, #128	; 0x80
 80014c4:	6899      	ldr	r1, [r3, #8]
 80014c6:	0152      	lsls	r2, r2, #5
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80014c8:	430a      	orrs	r2, r1
 80014ca:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80014cc:	2280      	movs	r2, #128	; 0x80
 80014ce:	4b2f      	ldr	r3, [pc, #188]	; (800158c <HAL_RTC_SetAlarm_IT+0x188>)
 80014d0:	0292      	lsls	r2, r2, #10
 80014d2:	6819      	ldr	r1, [r3, #0]
  __HAL_UNLOCK(hrtc);
 80014d4:	2000      	movs	r0, #0
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80014d6:	4311      	orrs	r1, r2
 80014d8:	6019      	str	r1, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80014da:	6899      	ldr	r1, [r3, #8]
 80014dc:	430a      	orrs	r2, r1
 80014de:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80014e0:	22ff      	movs	r2, #255	; 0xff
 80014e2:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_READY;
 80014e4:	3402      	adds	r4, #2
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80014e6:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 80014e8:	2301      	movs	r3, #1
 80014ea:	77e3      	strb	r3, [r4, #31]
  __HAL_UNLOCK(hrtc);
 80014ec:	9b00      	ldr	r3, [sp, #0]
 80014ee:	77d8      	strb	r0, [r3, #31]
  return HAL_OK;
 80014f0:	e021      	b.n	8001536 <HAL_RTC_SetAlarm_IT+0x132>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d100      	bne.n	80014f8 <HAL_RTC_SetAlarm_IT+0xf4>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80014f6:	70eb      	strb	r3, [r5, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80014f8:	69eb      	ldr	r3, [r5, #28]
 80014fa:	696a      	ldr	r2, [r5, #20]
 80014fc:	0400      	lsls	r0, r0, #16
 80014fe:	4313      	orrs	r3, r2
 8001500:	431f      	orrs	r7, r3
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001502:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8001504:	4307      	orrs	r7, r0
 8001506:	4337      	orrs	r7, r6
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001508:	78ee      	ldrb	r6, [r5, #3]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800150a:	1c6b      	adds	r3, r5, #1
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800150c:	0436      	lsls	r6, r6, #16
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800150e:	4337      	orrs	r7, r6
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001510:	7fde      	ldrb	r6, [r3, #31]
 8001512:	0636      	lsls	r6, r6, #24
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8001514:	4337      	orrs	r7, r6
 8001516:	e7ae      	b.n	8001476 <HAL_RTC_SetAlarm_IT+0x72>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001518:	f7fe ffd4 	bl	80004c4 <HAL_GetTick>
 800151c:	23fa      	movs	r3, #250	; 0xfa
 800151e:	1b80      	subs	r0, r0, r6
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	4298      	cmp	r0, r3
 8001524:	d9c0      	bls.n	80014a8 <HAL_RTC_SetAlarm_IT+0xa4>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001526:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001528:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800152a:	6823      	ldr	r3, [r4, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800152c:	3402      	adds	r4, #2
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800152e:	625a      	str	r2, [r3, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 8001530:	9b00      	ldr	r3, [sp, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001532:	77e0      	strb	r0, [r4, #31]
        __HAL_UNLOCK(hrtc);
 8001534:	77dd      	strb	r5, [r3, #31]
}
 8001536:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8001538:	689a      	ldr	r2, [r3, #8]
 800153a:	4915      	ldr	r1, [pc, #84]	; (8001590 <HAL_RTC_SetAlarm_IT+0x18c>)
 800153c:	400a      	ands	r2, r1
 800153e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8001540:	68d9      	ldr	r1, [r3, #12]
 8001542:	4a14      	ldr	r2, [pc, #80]	; (8001594 <HAL_RTC_SetAlarm_IT+0x190>)
 8001544:	b2c9      	uxtb	r1, r1
 8001546:	430a      	orrs	r2, r1
 8001548:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800154a:	f7fe ffbb 	bl	80004c4 <HAL_GetTick>
 800154e:	0006      	movs	r6, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8001550:	2202      	movs	r2, #2
 8001552:	6823      	ldr	r3, [r4, #0]
 8001554:	68dd      	ldr	r5, [r3, #12]
 8001556:	4015      	ands	r5, r2
 8001558:	d00b      	beq.n	8001572 <HAL_RTC_SetAlarm_IT+0x16e>
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800155a:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800155c:	621f      	str	r7, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800155e:	649a      	str	r2, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8001560:	2280      	movs	r2, #128	; 0x80
 8001562:	6899      	ldr	r1, [r3, #8]
 8001564:	0092      	lsls	r2, r2, #2
 8001566:	430a      	orrs	r2, r1
 8001568:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800156a:	2280      	movs	r2, #128	; 0x80
 800156c:	6899      	ldr	r1, [r3, #8]
 800156e:	0192      	lsls	r2, r2, #6
 8001570:	e7aa      	b.n	80014c8 <HAL_RTC_SetAlarm_IT+0xc4>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001572:	f7fe ffa7 	bl	80004c4 <HAL_GetTick>
 8001576:	23fa      	movs	r3, #250	; 0xfa
 8001578:	1b80      	subs	r0, r0, r6
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	4298      	cmp	r0, r3
 800157e:	d9e7      	bls.n	8001550 <HAL_RTC_SetAlarm_IT+0x14c>
 8001580:	e7d1      	b.n	8001526 <HAL_RTC_SetAlarm_IT+0x122>
 8001582:	46c0      	nop			; (mov r8, r8)
 8001584:	fffffeff 	.word	0xfffffeff
 8001588:	fffffe7f 	.word	0xfffffe7f
 800158c:	40010400 	.word	0x40010400
 8001590:	fffffdff 	.word	0xfffffdff
 8001594:	fffffd7f 	.word	0xfffffd7f

08001598 <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8001598:	4770      	bx	lr
	...

0800159c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800159c:	b570      	push	{r4, r5, r6, lr}
 800159e:	0004      	movs	r4, r0
  /* Check the SPI handle allocation */
  if (hspi == NULL)
  {
    return HAL_ERROR;
 80015a0:	2001      	movs	r0, #1
  if (hspi == NULL)
 80015a2:	2c00      	cmp	r4, #0
 80015a4:	d037      	beq.n	8001616 <HAL_SPI_Init+0x7a>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015a6:	2300      	movs	r3, #0
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80015a8:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015aa:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80015ac:	3551      	adds	r5, #81	; 0x51
 80015ae:	782b      	ldrb	r3, [r5, #0]
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d105      	bne.n	80015c2 <HAL_SPI_Init+0x26>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80015b6:	0022      	movs	r2, r4
 80015b8:	3250      	adds	r2, #80	; 0x50
 80015ba:	7013      	strb	r3, [r2, #0]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80015bc:	0020      	movs	r0, r4
 80015be:	f000 fcbb 	bl	8001f38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80015c2:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80015c4:	2240      	movs	r2, #64	; 0x40
 80015c6:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80015c8:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 80015ca:	680b      	ldr	r3, [r1, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80015cc:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 80015ce:	4393      	bics	r3, r2
 80015d0:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80015d2:	6863      	ldr	r3, [r4, #4]
 80015d4:	69a2      	ldr	r2, [r4, #24]
 80015d6:	4303      	orrs	r3, r0
 80015d8:	68e0      	ldr	r0, [r4, #12]
 80015da:	4303      	orrs	r3, r0
 80015dc:	6920      	ldr	r0, [r4, #16]
 80015de:	4303      	orrs	r3, r0
 80015e0:	6960      	ldr	r0, [r4, #20]
 80015e2:	4303      	orrs	r3, r0
 80015e4:	69e0      	ldr	r0, [r4, #28]
 80015e6:	4303      	orrs	r3, r0
 80015e8:	6a20      	ldr	r0, [r4, #32]
 80015ea:	4303      	orrs	r3, r0
 80015ec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80015ee:	4303      	orrs	r3, r0
 80015f0:	2080      	movs	r0, #128	; 0x80
 80015f2:	0080      	lsls	r0, r0, #2
 80015f4:	4010      	ands	r0, r2
 80015f6:	4303      	orrs	r3, r0
 80015f8:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80015fa:	2304      	movs	r3, #4
 80015fc:	0c12      	lsrs	r2, r2, #16
 80015fe:	401a      	ands	r2, r3
 8001600:	6a63      	ldr	r3, [r4, #36]	; 0x24
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001602:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001604:	431a      	orrs	r2, r3
 8001606:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001608:	69cb      	ldr	r3, [r1, #28]
 800160a:	4a03      	ldr	r2, [pc, #12]	; (8001618 <HAL_SPI_Init+0x7c>)
 800160c:	4013      	ands	r3, r2
 800160e:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8001610:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001612:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001614:	702b      	strb	r3, [r5, #0]

  return HAL_OK;
}
 8001616:	bd70      	pop	{r4, r5, r6, pc}
 8001618:	fffff7ff 	.word	0xfffff7ff

0800161c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800161c:	6803      	ldr	r3, [r0, #0]
 800161e:	4907      	ldr	r1, [pc, #28]	; (800163c <UART_EndRxTransfer+0x20>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	400a      	ands	r2, r1
 8001624:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001626:	689a      	ldr	r2, [r3, #8]
 8001628:	3123      	adds	r1, #35	; 0x23
 800162a:	31ff      	adds	r1, #255	; 0xff
 800162c:	438a      	bics	r2, r1
 800162e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001630:	2320      	movs	r3, #32
 8001632:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001634:	2300      	movs	r3, #0
 8001636:	6603      	str	r3, [r0, #96]	; 0x60
}
 8001638:	4770      	bx	lr
 800163a:	46c0      	nop			; (mov r8, r8)
 800163c:	fffffedf 	.word	0xfffffedf

08001640 <HAL_UART_TxCpltCallback>:
 8001640:	4770      	bx	lr

08001642 <HAL_UART_ErrorCallback>:
 8001642:	4770      	bx	lr

08001644 <HAL_UART_IRQHandler>:
{
 8001644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001646:	6803      	ldr	r3, [r0, #0]
{
 8001648:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800164a:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800164c:	6818      	ldr	r0, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800164e:	689e      	ldr	r6, [r3, #8]
  if (errorflags == 0U)
 8001650:	0711      	lsls	r1, r2, #28
 8001652:	d10a      	bne.n	800166a <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001654:	2120      	movs	r1, #32
 8001656:	420a      	tst	r2, r1
 8001658:	d100      	bne.n	800165c <HAL_UART_IRQHandler+0x18>
 800165a:	e06a      	b.n	8001732 <HAL_UART_IRQHandler+0xee>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800165c:	4208      	tst	r0, r1
 800165e:	d068      	beq.n	8001732 <HAL_UART_IRQHandler+0xee>
      if (huart->RxISR != NULL)
 8001660:	6e23      	ldr	r3, [r4, #96]	; 0x60
      huart->TxISR(huart);
 8001662:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8001664:	2b00      	cmp	r3, #0
 8001666:	d15a      	bne.n	800171e <HAL_UART_IRQHandler+0xda>
 8001668:	e05a      	b.n	8001720 <HAL_UART_IRQHandler+0xdc>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800166a:	2101      	movs	r1, #1
 800166c:	0035      	movs	r5, r6
 800166e:	400d      	ands	r5, r1
 8001670:	d103      	bne.n	800167a <HAL_UART_IRQHandler+0x36>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8001672:	2790      	movs	r7, #144	; 0x90
 8001674:	007f      	lsls	r7, r7, #1
 8001676:	4238      	tst	r0, r7
 8001678:	d05b      	beq.n	8001732 <HAL_UART_IRQHandler+0xee>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800167a:	420a      	tst	r2, r1
 800167c:	d005      	beq.n	800168a <HAL_UART_IRQHandler+0x46>
 800167e:	05c6      	lsls	r6, r0, #23
 8001680:	d503      	bpl.n	800168a <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001682:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001684:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8001686:	4331      	orrs	r1, r6
 8001688:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800168a:	2102      	movs	r1, #2
 800168c:	420a      	tst	r2, r1
 800168e:	d006      	beq.n	800169e <HAL_UART_IRQHandler+0x5a>
 8001690:	2d00      	cmp	r5, #0
 8001692:	d004      	beq.n	800169e <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001694:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001696:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8001698:	1849      	adds	r1, r1, r1
 800169a:	4331      	orrs	r1, r6
 800169c:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800169e:	2104      	movs	r1, #4
 80016a0:	420a      	tst	r2, r1
 80016a2:	d006      	beq.n	80016b2 <HAL_UART_IRQHandler+0x6e>
 80016a4:	2d00      	cmp	r5, #0
 80016a6:	d004      	beq.n	80016b2 <HAL_UART_IRQHandler+0x6e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80016a8:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80016aa:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 80016ac:	3902      	subs	r1, #2
 80016ae:	4331      	orrs	r1, r6
 80016b0:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 80016b2:	0711      	lsls	r1, r2, #28
 80016b4:	d508      	bpl.n	80016c8 <HAL_UART_IRQHandler+0x84>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80016b6:	0681      	lsls	r1, r0, #26
 80016b8:	d401      	bmi.n	80016be <HAL_UART_IRQHandler+0x7a>
 80016ba:	2d00      	cmp	r5, #0
 80016bc:	d004      	beq.n	80016c8 <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80016be:	2108      	movs	r1, #8
 80016c0:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80016c2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80016c4:	4319      	orrs	r1, r3
 80016c6:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80016c8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d028      	beq.n	8001720 <HAL_UART_IRQHandler+0xdc>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80016ce:	2320      	movs	r3, #32
 80016d0:	421a      	tst	r2, r3
 80016d2:	d006      	beq.n	80016e2 <HAL_UART_IRQHandler+0x9e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80016d4:	4218      	tst	r0, r3
 80016d6:	d004      	beq.n	80016e2 <HAL_UART_IRQHandler+0x9e>
        if (huart->RxISR != NULL)
 80016d8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <HAL_UART_IRQHandler+0x9e>
          huart->RxISR(huart);
 80016de:	0020      	movs	r0, r4
 80016e0:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80016e2:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 80016e4:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80016e6:	689b      	ldr	r3, [r3, #8]
        UART_EndRxTransfer(huart);
 80016e8:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80016ea:	065b      	lsls	r3, r3, #25
 80016ec:	d402      	bmi.n	80016f4 <HAL_UART_IRQHandler+0xb0>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 80016ee:	2308      	movs	r3, #8
 80016f0:	401d      	ands	r5, r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80016f2:	d01a      	beq.n	800172a <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 80016f4:	f7ff ff92 	bl	800161c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80016f8:	2140      	movs	r1, #64	; 0x40
 80016fa:	6823      	ldr	r3, [r4, #0]
 80016fc:	689a      	ldr	r2, [r3, #8]
 80016fe:	420a      	tst	r2, r1
 8001700:	d00f      	beq.n	8001722 <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001702:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8001704:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001706:	438a      	bics	r2, r1
 8001708:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800170a:	2800      	cmp	r0, #0
 800170c:	d009      	beq.n	8001722 <HAL_UART_IRQHandler+0xde>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800170e:	4b1a      	ldr	r3, [pc, #104]	; (8001778 <HAL_UART_IRQHandler+0x134>)
 8001710:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001712:	f7fe ff41 	bl	8000598 <HAL_DMA_Abort_IT>
 8001716:	2800      	cmp	r0, #0
 8001718:	d002      	beq.n	8001720 <HAL_UART_IRQHandler+0xdc>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800171a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800171c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800171e:	4798      	blx	r3
}
 8001720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8001722:	0020      	movs	r0, r4
 8001724:	f7ff ff8d 	bl	8001642 <HAL_UART_ErrorCallback>
 8001728:	e7fa      	b.n	8001720 <HAL_UART_IRQHandler+0xdc>
        HAL_UART_ErrorCallback(huart);
 800172a:	f7ff ff8a 	bl	8001642 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800172e:	67e5      	str	r5, [r4, #124]	; 0x7c
 8001730:	e7f6      	b.n	8001720 <HAL_UART_IRQHandler+0xdc>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8001732:	2180      	movs	r1, #128	; 0x80
 8001734:	0349      	lsls	r1, r1, #13
 8001736:	420a      	tst	r2, r1
 8001738:	d006      	beq.n	8001748 <HAL_UART_IRQHandler+0x104>
 800173a:	0275      	lsls	r5, r6, #9
 800173c:	d504      	bpl.n	8001748 <HAL_UART_IRQHandler+0x104>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800173e:	6219      	str	r1, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8001740:	0020      	movs	r0, r4
 8001742:	f000 fa51 	bl	8001be8 <HAL_UARTEx_WakeupCallback>
    return;
 8001746:	e7eb      	b.n	8001720 <HAL_UART_IRQHandler+0xdc>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8001748:	2180      	movs	r1, #128	; 0x80
 800174a:	420a      	tst	r2, r1
 800174c:	d003      	beq.n	8001756 <HAL_UART_IRQHandler+0x112>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800174e:	4208      	tst	r0, r1
 8001750:	d001      	beq.n	8001756 <HAL_UART_IRQHandler+0x112>
    if (huart->TxISR != NULL)
 8001752:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001754:	e785      	b.n	8001662 <HAL_UART_IRQHandler+0x1e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001756:	2140      	movs	r1, #64	; 0x40
 8001758:	420a      	tst	r2, r1
 800175a:	d0e1      	beq.n	8001720 <HAL_UART_IRQHandler+0xdc>
 800175c:	4208      	tst	r0, r1
 800175e:	d0df      	beq.n	8001720 <HAL_UART_IRQHandler+0xdc>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001760:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001762:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001764:	438a      	bics	r2, r1
 8001766:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8001768:	2320      	movs	r3, #32
 800176a:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 800176c:	2300      	movs	r3, #0
 800176e:	6663      	str	r3, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 8001770:	f7ff ff66 	bl	8001640 <HAL_UART_TxCpltCallback>
 8001774:	e7d4      	b.n	8001720 <HAL_UART_IRQHandler+0xdc>
 8001776:	46c0      	nop			; (mov r8, r8)
 8001778:	0800177d 	.word	0x0800177d

0800177c <UART_DMAAbortOnError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800177c:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 800177e:	2300      	movs	r3, #0
 8001780:	0002      	movs	r2, r0
{
 8001782:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8001784:	325a      	adds	r2, #90	; 0x5a
 8001786:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8001788:	3a08      	subs	r2, #8
 800178a:	8013      	strh	r3, [r2, #0]
  HAL_UART_ErrorCallback(huart);
 800178c:	f7ff ff59 	bl	8001642 <HAL_UART_ErrorCallback>
}
 8001790:	bd10      	pop	{r4, pc}
	...

08001794 <UART_SetConfig>:
{
 8001794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001796:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001798:	6925      	ldr	r5, [r4, #16]
 800179a:	68a2      	ldr	r2, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 800179c:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800179e:	432a      	orrs	r2, r5
 80017a0:	6965      	ldr	r5, [r4, #20]
 80017a2:	69c1      	ldr	r1, [r0, #28]
 80017a4:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80017a6:	6818      	ldr	r0, [r3, #0]
 80017a8:	4d81      	ldr	r5, [pc, #516]	; (80019b0 <UART_SetConfig+0x21c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80017aa:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80017ac:	4028      	ands	r0, r5
 80017ae:	4302      	orrs	r2, r0
 80017b0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80017b2:	685a      	ldr	r2, [r3, #4]
 80017b4:	487f      	ldr	r0, [pc, #508]	; (80019b4 <UART_SetConfig+0x220>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80017b6:	4d80      	ldr	r5, [pc, #512]	; (80019b8 <UART_SetConfig+0x224>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80017b8:	4002      	ands	r2, r0
 80017ba:	68e0      	ldr	r0, [r4, #12]
 80017bc:	4302      	orrs	r2, r0
 80017be:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80017c0:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80017c2:	42ab      	cmp	r3, r5
 80017c4:	d001      	beq.n	80017ca <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 80017c6:	6a22      	ldr	r2, [r4, #32]
 80017c8:	4310      	orrs	r0, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80017ca:	689a      	ldr	r2, [r3, #8]
 80017cc:	4e7b      	ldr	r6, [pc, #492]	; (80019bc <UART_SetConfig+0x228>)
 80017ce:	4032      	ands	r2, r6
 80017d0:	4302      	orrs	r2, r0
 80017d2:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80017d4:	4a7a      	ldr	r2, [pc, #488]	; (80019c0 <UART_SetConfig+0x22c>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d113      	bne.n	8001802 <UART_SetConfig+0x6e>
 80017da:	2203      	movs	r2, #3
 80017dc:	4b79      	ldr	r3, [pc, #484]	; (80019c4 <UART_SetConfig+0x230>)
 80017de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e0:	4013      	ands	r3, r2
 80017e2:	4a79      	ldr	r2, [pc, #484]	; (80019c8 <UART_SetConfig+0x234>)
 80017e4:	5cd0      	ldrb	r0, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80017e6:	2380      	movs	r3, #128	; 0x80
 80017e8:	021b      	lsls	r3, r3, #8
 80017ea:	4299      	cmp	r1, r3
 80017ec:	d100      	bne.n	80017f0 <UART_SetConfig+0x5c>
 80017ee:	e0d1      	b.n	8001994 <UART_SetConfig+0x200>
    switch (clocksource)
 80017f0:	2808      	cmp	r0, #8
 80017f2:	d826      	bhi.n	8001842 <UART_SetConfig+0xae>
 80017f4:	f7fe fc88 	bl	8000108 <__gnu_thumb1_case_uqi>
 80017f8:	259996c0 	.word	0x259996c0
 80017fc:	252525b4 	.word	0x252525b4
 8001800:	b7          	.byte	0xb7
 8001801:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001802:	4a72      	ldr	r2, [pc, #456]	; (80019cc <UART_SetConfig+0x238>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d105      	bne.n	8001814 <UART_SetConfig+0x80>
 8001808:	220c      	movs	r2, #12
 800180a:	4b6e      	ldr	r3, [pc, #440]	; (80019c4 <UART_SetConfig+0x230>)
 800180c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180e:	4013      	ands	r3, r2
 8001810:	4a6f      	ldr	r2, [pc, #444]	; (80019d0 <UART_SetConfig+0x23c>)
 8001812:	e7e7      	b.n	80017e4 <UART_SetConfig+0x50>
 8001814:	4a6f      	ldr	r2, [pc, #444]	; (80019d4 <UART_SetConfig+0x240>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d100      	bne.n	800181c <UART_SetConfig+0x88>
 800181a:	e0a9      	b.n	8001970 <UART_SetConfig+0x1dc>
 800181c:	4a6e      	ldr	r2, [pc, #440]	; (80019d8 <UART_SetConfig+0x244>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d100      	bne.n	8001824 <UART_SetConfig+0x90>
 8001822:	e0a5      	b.n	8001970 <UART_SetConfig+0x1dc>
 8001824:	42ab      	cmp	r3, r5
 8001826:	d000      	beq.n	800182a <UART_SetConfig+0x96>
 8001828:	e0ad      	b.n	8001986 <UART_SetConfig+0x1f2>
 800182a:	21c0      	movs	r1, #192	; 0xc0
 800182c:	2080      	movs	r0, #128	; 0x80
 800182e:	4a65      	ldr	r2, [pc, #404]	; (80019c4 <UART_SetConfig+0x230>)
 8001830:	0109      	lsls	r1, r1, #4
 8001832:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001834:	00c0      	lsls	r0, r0, #3
 8001836:	400b      	ands	r3, r1
 8001838:	4283      	cmp	r3, r0
 800183a:	d038      	beq.n	80018ae <UART_SetConfig+0x11a>
 800183c:	d803      	bhi.n	8001846 <UART_SetConfig+0xb2>
 800183e:	2b00      	cmp	r3, #0
 8001840:	d00a      	beq.n	8001858 <UART_SetConfig+0xc4>
        ret = HAL_ERROR;
 8001842:	2501      	movs	r5, #1
 8001844:	e00d      	b.n	8001862 <UART_SetConfig+0xce>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001846:	2080      	movs	r0, #128	; 0x80
 8001848:	0100      	lsls	r0, r0, #4
 800184a:	4283      	cmp	r3, r0
 800184c:	d00e      	beq.n	800186c <UART_SetConfig+0xd8>
 800184e:	428b      	cmp	r3, r1
 8001850:	d1f7      	bne.n	8001842 <UART_SetConfig+0xae>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8001852:	2080      	movs	r0, #128	; 0x80
 8001854:	0200      	lsls	r0, r0, #8
 8001856:	e00d      	b.n	8001874 <UART_SetConfig+0xe0>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8001858:	f7ff fb1e 	bl	8000e98 <HAL_RCC_GetPCLK1Freq>
 800185c:	2500      	movs	r5, #0
    if (lpuart_ker_ck_pres != 0U)
 800185e:	42a8      	cmp	r0, r5
 8001860:	d108      	bne.n	8001874 <UART_SetConfig+0xe0>
  huart->RxISR = NULL;
 8001862:	2300      	movs	r3, #0
}
 8001864:	0028      	movs	r0, r5
  huart->RxISR = NULL;
 8001866:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001868:	6663      	str	r3, [r4, #100]	; 0x64
}
 800186a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800186c:	6813      	ldr	r3, [r2, #0]
 800186e:	06db      	lsls	r3, r3, #27
 8001870:	d520      	bpl.n	80018b4 <UART_SetConfig+0x120>
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8001872:	485a      	ldr	r0, [pc, #360]	; (80019dc <UART_SetConfig+0x248>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001874:	2203      	movs	r2, #3
 8001876:	6863      	ldr	r3, [r4, #4]
 8001878:	435a      	muls	r2, r3
 800187a:	4282      	cmp	r2, r0
 800187c:	d8e1      	bhi.n	8001842 <UART_SetConfig+0xae>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800187e:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001880:	4282      	cmp	r2, r0
 8001882:	d3de      	bcc.n	8001842 <UART_SetConfig+0xae>
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8001884:	2700      	movs	r7, #0
 8001886:	0e02      	lsrs	r2, r0, #24
 8001888:	0201      	lsls	r1, r0, #8
 800188a:	085e      	lsrs	r6, r3, #1
 800188c:	1989      	adds	r1, r1, r6
 800188e:	417a      	adcs	r2, r7
 8001890:	0008      	movs	r0, r1
 8001892:	0011      	movs	r1, r2
 8001894:	001a      	movs	r2, r3
 8001896:	003b      	movs	r3, r7
 8001898:	f7fe fcd6 	bl	8000248 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800189c:	4b50      	ldr	r3, [pc, #320]	; (80019e0 <UART_SetConfig+0x24c>)
 800189e:	18c2      	adds	r2, r0, r3
 80018a0:	4b50      	ldr	r3, [pc, #320]	; (80019e4 <UART_SetConfig+0x250>)
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d8cd      	bhi.n	8001842 <UART_SetConfig+0xae>
          huart->Instance->BRR = usartdiv;
 80018a6:	6823      	ldr	r3, [r4, #0]
 80018a8:	003d      	movs	r5, r7
 80018aa:	60d8      	str	r0, [r3, #12]
 80018ac:	e7d9      	b.n	8001862 <UART_SetConfig+0xce>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80018ae:	f7fe ff73 	bl	8000798 <HAL_RCC_GetSysClockFreq>
        break;
 80018b2:	e7d3      	b.n	800185c <UART_SetConfig+0xc8>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80018b4:	484c      	ldr	r0, [pc, #304]	; (80019e8 <UART_SetConfig+0x254>)
 80018b6:	e7dd      	b.n	8001874 <UART_SetConfig+0xe0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80018b8:	f7ff faee 	bl	8000e98 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80018bc:	6863      	ldr	r3, [r4, #4]
 80018be:	0040      	lsls	r0, r0, #1
 80018c0:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80018c2:	18c0      	adds	r0, r0, r3
 80018c4:	6861      	ldr	r1, [r4, #4]
 80018c6:	e00b      	b.n	80018e0 <UART_SetConfig+0x14c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80018c8:	f7ff faf6 	bl	8000eb8 <HAL_RCC_GetPCLK2Freq>
 80018cc:	e7f6      	b.n	80018bc <UART_SetConfig+0x128>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80018ce:	2510      	movs	r5, #16
 80018d0:	4b3c      	ldr	r3, [pc, #240]	; (80019c4 <UART_SetConfig+0x230>)
 80018d2:	6861      	ldr	r1, [r4, #4]
 80018d4:	681a      	ldr	r2, [r3, #0]
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80018d6:	0848      	lsrs	r0, r1, #1
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80018d8:	4015      	ands	r5, r2
 80018da:	d006      	beq.n	80018ea <UART_SetConfig+0x156>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80018dc:	4b43      	ldr	r3, [pc, #268]	; (80019ec <UART_SetConfig+0x258>)
 80018de:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80018e0:	f7fe fc26 	bl	8000130 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 80018e4:	2500      	movs	r5, #0
 80018e6:	b283      	uxth	r3, r0
        break;
 80018e8:	e004      	b.n	80018f4 <UART_SetConfig+0x160>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80018ea:	4b41      	ldr	r3, [pc, #260]	; (80019f0 <UART_SetConfig+0x25c>)
 80018ec:	18c0      	adds	r0, r0, r3
 80018ee:	f7fe fc1f 	bl	8000130 <__udivsi3>
 80018f2:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80018f4:	0019      	movs	r1, r3
 80018f6:	483f      	ldr	r0, [pc, #252]	; (80019f4 <UART_SetConfig+0x260>)
 80018f8:	3910      	subs	r1, #16
 80018fa:	4281      	cmp	r1, r0
 80018fc:	d8a1      	bhi.n	8001842 <UART_SetConfig+0xae>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80018fe:	210f      	movs	r1, #15
 8001900:	0018      	movs	r0, r3
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001902:	071b      	lsls	r3, r3, #28
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001904:	4388      	bics	r0, r1
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001906:	0f5b      	lsrs	r3, r3, #29
      huart->Instance->BRR = brrtemp;
 8001908:	6821      	ldr	r1, [r4, #0]
 800190a:	4303      	orrs	r3, r0
      huart->Instance->BRR = usartdiv;
 800190c:	60cb      	str	r3, [r1, #12]
 800190e:	e7a8      	b.n	8001862 <UART_SetConfig+0xce>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001910:	f7fe ff42 	bl	8000798 <HAL_RCC_GetSysClockFreq>
 8001914:	e7d2      	b.n	80018bc <UART_SetConfig+0x128>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001916:	6863      	ldr	r3, [r4, #4]
 8001918:	0858      	lsrs	r0, r3, #1
 800191a:	2380      	movs	r3, #128	; 0x80
 800191c:	025b      	lsls	r3, r3, #9
 800191e:	e7d0      	b.n	80018c2 <UART_SetConfig+0x12e>
  uint32_t usartdiv                   = 0x00000000U;
 8001920:	2300      	movs	r3, #0
 8001922:	e7e7      	b.n	80018f4 <UART_SetConfig+0x160>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001924:	f7ff fac8 	bl	8000eb8 <HAL_RCC_GetPCLK2Freq>
 8001928:	e028      	b.n	800197c <UART_SetConfig+0x1e8>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800192a:	2510      	movs	r5, #16
 800192c:	4b25      	ldr	r3, [pc, #148]	; (80019c4 <UART_SetConfig+0x230>)
 800192e:	6861      	ldr	r1, [r4, #4]
 8001930:	681a      	ldr	r2, [r3, #0]
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8001932:	0848      	lsrs	r0, r1, #1
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001934:	4015      	ands	r5, r2
 8001936:	d006      	beq.n	8001946 <UART_SetConfig+0x1b2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8001938:	4b28      	ldr	r3, [pc, #160]	; (80019dc <UART_SetConfig+0x248>)
 800193a:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800193c:	f7fe fbf8 	bl	8000130 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 8001940:	2500      	movs	r5, #0
 8001942:	b283      	uxth	r3, r0
        break;
 8001944:	e004      	b.n	8001950 <UART_SetConfig+0x1bc>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001946:	4b28      	ldr	r3, [pc, #160]	; (80019e8 <UART_SetConfig+0x254>)
 8001948:	18c0      	adds	r0, r0, r3
 800194a:	f7fe fbf1 	bl	8000130 <__udivsi3>
 800194e:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001950:	0019      	movs	r1, r3
 8001952:	4828      	ldr	r0, [pc, #160]	; (80019f4 <UART_SetConfig+0x260>)
 8001954:	3910      	subs	r1, #16
 8001956:	4281      	cmp	r1, r0
 8001958:	d900      	bls.n	800195c <UART_SetConfig+0x1c8>
 800195a:	e772      	b.n	8001842 <UART_SetConfig+0xae>
      huart->Instance->BRR = usartdiv;
 800195c:	6821      	ldr	r1, [r4, #0]
 800195e:	e7d5      	b.n	800190c <UART_SetConfig+0x178>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001960:	f7fe ff1a 	bl	8000798 <HAL_RCC_GetSysClockFreq>
 8001964:	e00a      	b.n	800197c <UART_SetConfig+0x1e8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001966:	6863      	ldr	r3, [r4, #4]
 8001968:	0858      	lsrs	r0, r3, #1
 800196a:	2380      	movs	r3, #128	; 0x80
 800196c:	021b      	lsls	r3, r3, #8
 800196e:	e007      	b.n	8001980 <UART_SetConfig+0x1ec>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001970:	2380      	movs	r3, #128	; 0x80
 8001972:	021b      	lsls	r3, r3, #8
 8001974:	4299      	cmp	r1, r3
 8001976:	d09f      	beq.n	80018b8 <UART_SetConfig+0x124>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001978:	f7ff fa8e 	bl	8000e98 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800197c:	6863      	ldr	r3, [r4, #4]
 800197e:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001980:	18c0      	adds	r0, r0, r3
 8001982:	6861      	ldr	r1, [r4, #4]
 8001984:	e7da      	b.n	800193c <UART_SetConfig+0x1a8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001986:	2380      	movs	r3, #128	; 0x80
        ret = HAL_ERROR;
 8001988:	2501      	movs	r5, #1
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800198a:	021b      	lsls	r3, r3, #8
 800198c:	4299      	cmp	r1, r3
 800198e:	d0c7      	beq.n	8001920 <UART_SetConfig+0x18c>
  uint32_t usartdiv                   = 0x00000000U;
 8001990:	2300      	movs	r3, #0
 8001992:	e7dd      	b.n	8001950 <UART_SetConfig+0x1bc>
    switch (clocksource)
 8001994:	2808      	cmp	r0, #8
 8001996:	d900      	bls.n	800199a <UART_SetConfig+0x206>
 8001998:	e753      	b.n	8001842 <UART_SetConfig+0xae>
 800199a:	f7fe fbbf 	bl	800011c <__gnu_thumb1_case_shi>
 800199e:	ff8d      	.short	0xff8d
 80019a0:	ff98ff95 	.word	0xff98ff95
 80019a4:	ffb9ff52 	.word	0xffb9ff52
 80019a8:	ff52ff52 	.word	0xff52ff52
 80019ac:	ffbcff52 	.word	0xffbcff52
 80019b0:	efff69f3 	.word	0xefff69f3
 80019b4:	ffffcfff 	.word	0xffffcfff
 80019b8:	40004800 	.word	0x40004800
 80019bc:	fffff4ff 	.word	0xfffff4ff
 80019c0:	40013800 	.word	0x40013800
 80019c4:	40021000 	.word	0x40021000
 80019c8:	080021d0 	.word	0x080021d0
 80019cc:	40004400 	.word	0x40004400
 80019d0:	080021d4 	.word	0x080021d4
 80019d4:	40004c00 	.word	0x40004c00
 80019d8:	40005000 	.word	0x40005000
 80019dc:	003d0900 	.word	0x003d0900
 80019e0:	fffffd00 	.word	0xfffffd00
 80019e4:	000ffcff 	.word	0x000ffcff
 80019e8:	00f42400 	.word	0x00f42400
 80019ec:	007a1200 	.word	0x007a1200
 80019f0:	01e84800 	.word	0x01e84800
 80019f4:	0000ffef 	.word	0x0000ffef

080019f8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80019f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80019fa:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80019fc:	07da      	lsls	r2, r3, #31
 80019fe:	d506      	bpl.n	8001a0e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001a00:	6801      	ldr	r1, [r0, #0]
 8001a02:	4c28      	ldr	r4, [pc, #160]	; (8001aa4 <UART_AdvFeatureConfig+0xac>)
 8001a04:	684a      	ldr	r2, [r1, #4]
 8001a06:	4022      	ands	r2, r4
 8001a08:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001a0a:	4322      	orrs	r2, r4
 8001a0c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001a0e:	079a      	lsls	r2, r3, #30
 8001a10:	d506      	bpl.n	8001a20 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001a12:	6801      	ldr	r1, [r0, #0]
 8001a14:	4c24      	ldr	r4, [pc, #144]	; (8001aa8 <UART_AdvFeatureConfig+0xb0>)
 8001a16:	684a      	ldr	r2, [r1, #4]
 8001a18:	4022      	ands	r2, r4
 8001a1a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001a1c:	4322      	orrs	r2, r4
 8001a1e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001a20:	075a      	lsls	r2, r3, #29
 8001a22:	d506      	bpl.n	8001a32 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001a24:	6801      	ldr	r1, [r0, #0]
 8001a26:	4c21      	ldr	r4, [pc, #132]	; (8001aac <UART_AdvFeatureConfig+0xb4>)
 8001a28:	684a      	ldr	r2, [r1, #4]
 8001a2a:	4022      	ands	r2, r4
 8001a2c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001a2e:	4322      	orrs	r2, r4
 8001a30:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001a32:	071a      	lsls	r2, r3, #28
 8001a34:	d506      	bpl.n	8001a44 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001a36:	6801      	ldr	r1, [r0, #0]
 8001a38:	4c1d      	ldr	r4, [pc, #116]	; (8001ab0 <UART_AdvFeatureConfig+0xb8>)
 8001a3a:	684a      	ldr	r2, [r1, #4]
 8001a3c:	4022      	ands	r2, r4
 8001a3e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001a40:	4322      	orrs	r2, r4
 8001a42:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001a44:	06da      	lsls	r2, r3, #27
 8001a46:	d506      	bpl.n	8001a56 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001a48:	6801      	ldr	r1, [r0, #0]
 8001a4a:	4c1a      	ldr	r4, [pc, #104]	; (8001ab4 <UART_AdvFeatureConfig+0xbc>)
 8001a4c:	688a      	ldr	r2, [r1, #8]
 8001a4e:	4022      	ands	r2, r4
 8001a50:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001a52:	4322      	orrs	r2, r4
 8001a54:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001a56:	069a      	lsls	r2, r3, #26
 8001a58:	d506      	bpl.n	8001a68 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001a5a:	6801      	ldr	r1, [r0, #0]
 8001a5c:	4c16      	ldr	r4, [pc, #88]	; (8001ab8 <UART_AdvFeatureConfig+0xc0>)
 8001a5e:	688a      	ldr	r2, [r1, #8]
 8001a60:	4022      	ands	r2, r4
 8001a62:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001a64:	4322      	orrs	r2, r4
 8001a66:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001a68:	065a      	lsls	r2, r3, #25
 8001a6a:	d510      	bpl.n	8001a8e <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001a6c:	6801      	ldr	r1, [r0, #0]
 8001a6e:	4d13      	ldr	r5, [pc, #76]	; (8001abc <UART_AdvFeatureConfig+0xc4>)
 8001a70:	684a      	ldr	r2, [r1, #4]
 8001a72:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001a74:	402a      	ands	r2, r5
 8001a76:	4322      	orrs	r2, r4
 8001a78:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001a7a:	2280      	movs	r2, #128	; 0x80
 8001a7c:	0352      	lsls	r2, r2, #13
 8001a7e:	4294      	cmp	r4, r2
 8001a80:	d105      	bne.n	8001a8e <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001a82:	684a      	ldr	r2, [r1, #4]
 8001a84:	4c0e      	ldr	r4, [pc, #56]	; (8001ac0 <UART_AdvFeatureConfig+0xc8>)
 8001a86:	4022      	ands	r2, r4
 8001a88:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001a8a:	4322      	orrs	r2, r4
 8001a8c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001a8e:	061b      	lsls	r3, r3, #24
 8001a90:	d506      	bpl.n	8001aa0 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001a92:	6802      	ldr	r2, [r0, #0]
 8001a94:	490b      	ldr	r1, [pc, #44]	; (8001ac4 <UART_AdvFeatureConfig+0xcc>)
 8001a96:	6853      	ldr	r3, [r2, #4]
 8001a98:	400b      	ands	r3, r1
 8001a9a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001a9c:	430b      	orrs	r3, r1
 8001a9e:	6053      	str	r3, [r2, #4]
}
 8001aa0:	bd30      	pop	{r4, r5, pc}
 8001aa2:	46c0      	nop			; (mov r8, r8)
 8001aa4:	fffdffff 	.word	0xfffdffff
 8001aa8:	fffeffff 	.word	0xfffeffff
 8001aac:	fffbffff 	.word	0xfffbffff
 8001ab0:	ffff7fff 	.word	0xffff7fff
 8001ab4:	ffffefff 	.word	0xffffefff
 8001ab8:	ffffdfff 	.word	0xffffdfff
 8001abc:	ffefffff 	.word	0xffefffff
 8001ac0:	ff9fffff 	.word	0xff9fffff
 8001ac4:	fff7ffff 	.word	0xfff7ffff

08001ac8 <UART_WaitOnFlagUntilTimeout>:
{
 8001ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aca:	0004      	movs	r4, r0
 8001acc:	000e      	movs	r6, r1
 8001ace:	0015      	movs	r5, r2
 8001ad0:	001f      	movs	r7, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ad2:	6822      	ldr	r2, [r4, #0]
 8001ad4:	69d3      	ldr	r3, [r2, #28]
 8001ad6:	4033      	ands	r3, r6
 8001ad8:	1b9b      	subs	r3, r3, r6
 8001ada:	4259      	negs	r1, r3
 8001adc:	414b      	adcs	r3, r1
 8001ade:	42ab      	cmp	r3, r5
 8001ae0:	d001      	beq.n	8001ae6 <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	e01b      	b.n	8001b1e <UART_WaitOnFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 8001ae6:	9b06      	ldr	r3, [sp, #24]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	d0f3      	beq.n	8001ad4 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001aec:	f7fe fcea 	bl	80004c4 <HAL_GetTick>
 8001af0:	9b06      	ldr	r3, [sp, #24]
 8001af2:	1bc0      	subs	r0, r0, r7
 8001af4:	4283      	cmp	r3, r0
 8001af6:	d301      	bcc.n	8001afc <UART_WaitOnFlagUntilTimeout+0x34>
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d1ea      	bne.n	8001ad2 <UART_WaitOnFlagUntilTimeout+0xa>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001afc:	6823      	ldr	r3, [r4, #0]
 8001afe:	4908      	ldr	r1, [pc, #32]	; (8001b20 <UART_WaitOnFlagUntilTimeout+0x58>)
 8001b00:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 8001b02:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b04:	400a      	ands	r2, r1
 8001b06:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b08:	689a      	ldr	r2, [r3, #8]
 8001b0a:	31a3      	adds	r1, #163	; 0xa3
 8001b0c:	31ff      	adds	r1, #255	; 0xff
 8001b0e:	438a      	bics	r2, r1
 8001b10:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001b12:	2320      	movs	r3, #32
 8001b14:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8001b16:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8001b18:	2300      	movs	r3, #0
 8001b1a:	3470      	adds	r4, #112	; 0x70
 8001b1c:	7023      	strb	r3, [r4, #0]
}
 8001b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b20:	fffffe5f 	.word	0xfffffe5f

08001b24 <UART_CheckIdleState>:
{
 8001b24:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b26:	2600      	movs	r6, #0
{
 8001b28:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b2a:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8001b2c:	f7fe fcca 	bl	80004c4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001b30:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001b32:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	071b      	lsls	r3, r3, #28
 8001b38:	d415      	bmi.n	8001b66 <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001b3a:	6823      	ldr	r3, [r4, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	075b      	lsls	r3, r3, #29
 8001b40:	d50a      	bpl.n	8001b58 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001b42:	2180      	movs	r1, #128	; 0x80
 8001b44:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <UART_CheckIdleState+0x5c>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	03c9      	lsls	r1, r1, #15
 8001b4c:	002b      	movs	r3, r5
 8001b4e:	0020      	movs	r0, r4
 8001b50:	f7ff ffba 	bl	8001ac8 <UART_WaitOnFlagUntilTimeout>
 8001b54:	2800      	cmp	r0, #0
 8001b56:	d111      	bne.n	8001b7c <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8001b58:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001b5a:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001b5c:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8001b5e:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8001b60:	3470      	adds	r4, #112	; 0x70
 8001b62:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8001b64:	e00b      	b.n	8001b7e <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001b66:	2180      	movs	r1, #128	; 0x80
 8001b68:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <UART_CheckIdleState+0x5c>)
 8001b6a:	0032      	movs	r2, r6
 8001b6c:	9300      	str	r3, [sp, #0]
 8001b6e:	0389      	lsls	r1, r1, #14
 8001b70:	0003      	movs	r3, r0
 8001b72:	0020      	movs	r0, r4
 8001b74:	f7ff ffa8 	bl	8001ac8 <UART_WaitOnFlagUntilTimeout>
 8001b78:	2800      	cmp	r0, #0
 8001b7a:	d0de      	beq.n	8001b3a <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001b7c:	2003      	movs	r0, #3
}
 8001b7e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8001b80:	01ffffff 	.word	0x01ffffff

08001b84 <HAL_UART_Init>:
{
 8001b84:	b510      	push	{r4, lr}
 8001b86:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8001b88:	d101      	bne.n	8001b8e <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8001b8a:	2001      	movs	r0, #1
}
 8001b8c:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8001b8e:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d104      	bne.n	8001b9e <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8001b94:	0002      	movs	r2, r0
 8001b96:	3270      	adds	r2, #112	; 0x70
 8001b98:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8001b9a:	f000 fa29 	bl	8001ff0 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001b9e:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001ba4:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8001ba6:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001ba8:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8001baa:	438b      	bics	r3, r1
 8001bac:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001bae:	f7ff fdf1 	bl	8001794 <UART_SetConfig>
 8001bb2:	2801      	cmp	r0, #1
 8001bb4:	d0e9      	beq.n	8001b8a <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001bb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d002      	beq.n	8001bc2 <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8001bbc:	0020      	movs	r0, r4
 8001bbe:	f7ff ff1b 	bl	80019f8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bc2:	6823      	ldr	r3, [r4, #0]
 8001bc4:	4907      	ldr	r1, [pc, #28]	; (8001be4 <HAL_UART_Init+0x60>)
 8001bc6:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8001bc8:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bca:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bcc:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bd0:	689a      	ldr	r2, [r3, #8]
 8001bd2:	438a      	bics	r2, r1
 8001bd4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	6819      	ldr	r1, [r3, #0]
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8001bde:	f7ff ffa1 	bl	8001b24 <UART_CheckIdleState>
 8001be2:	e7d3      	b.n	8001b8c <HAL_UART_Init+0x8>
 8001be4:	ffffb7ff 	.word	0xffffb7ff

08001be8 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8001be8:	4770      	bx	lr
	...

08001bec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bec:	b530      	push	{r4, r5, lr}
 8001bee:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bf0:	2238      	movs	r2, #56	; 0x38
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	a80e      	add	r0, sp, #56	; 0x38
 8001bf6:	f000 fad7 	bl	80021a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bfa:	2214      	movs	r2, #20
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	4668      	mov	r0, sp
 8001c00:	f000 fad2 	bl	80021a8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c04:	2224      	movs	r2, #36	; 0x24
 8001c06:	2100      	movs	r1, #0
 8001c08:	a805      	add	r0, sp, #20
 8001c0a:	f000 facd 	bl	80021a8 <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c0e:	4919      	ldr	r1, [pc, #100]	; (8001c74 <SystemClock_Config+0x88>)
 8001c10:	4a19      	ldr	r2, [pc, #100]	; (8001c78 <SystemClock_Config+0x8c>)
 8001c12:	680b      	ldr	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c14:	2400      	movs	r4, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c16:	401a      	ands	r2, r3
 8001c18:	2380      	movs	r3, #128	; 0x80
 8001c1a:	011b      	lsls	r3, r3, #4
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001c20:	230a      	movs	r3, #10
 8001c22:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c24:	3306      	adds	r3, #6
 8001c26:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c28:	3b0e      	subs	r3, #14
 8001c2a:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 8001c2c:	2380      	movs	r3, #128	; 0x80
 8001c2e:	031b      	lsls	r3, r3, #12
 8001c30:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8001c32:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c34:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8001c36:	041b      	lsls	r3, r3, #16
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c38:	a80e      	add	r0, sp, #56	; 0x38
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8001c3a:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c3c:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001c3e:	9513      	str	r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c40:	9419      	str	r4, [sp, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c42:	f7fe fde5 	bl	8000810 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c46:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001c48:	0029      	movs	r1, r5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c4a:	9300      	str	r3, [sp, #0]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001c4c:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c4e:	3b0c      	subs	r3, #12
 8001c50:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c52:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c54:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c56:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001c58:	f7ff f866 	bl	8000d28 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RTC;
 8001c5c:	2322      	movs	r3, #34	; 0x22
 8001c5e:	9305      	str	r3, [sp, #20]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001c60:	2380      	movs	r3, #128	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c62:	a805      	add	r0, sp, #20
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001c64:	029b      	lsls	r3, r3, #10
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c66:	9408      	str	r4, [sp, #32]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001c68:	9306      	str	r3, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c6a:	f7ff f935 	bl	8000ed8 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001c6e:	b01d      	add	sp, #116	; 0x74
 8001c70:	bd30      	pop	{r4, r5, pc}
 8001c72:	46c0      	nop			; (mov r8, r8)
 8001c74:	40007000 	.word	0x40007000
 8001c78:	ffffe7ff 	.word	0xffffe7ff

08001c7c <main>:
{
 8001c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c7e:	b095      	sub	sp, #84	; 0x54
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c80:	ad0a      	add	r5, sp, #40	; 0x28
  HAL_Init();
 8001c82:	f7fe fc03 	bl	800048c <HAL_Init>
  SystemClock_Config();
 8001c86:	f7ff ffb1 	bl	8001bec <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c8a:	2214      	movs	r2, #20
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	0028      	movs	r0, r5
 8001c90:	f000 fa8a 	bl	80021a8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c94:	2101      	movs	r1, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c96:	2602      	movs	r6, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c98:	2004      	movs	r0, #4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9a:	4b86      	ldr	r3, [pc, #536]	; (8001eb4 <main+0x238>)
  __HAL_RCC_GPIOH_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RADIO_NSS_Pin|RADIO_TCXO_VCC_Pin|RADIO_ANT_SWITCH_RX_Pin, GPIO_PIN_RESET);
 8001c9c:	4c86      	ldr	r4, [pc, #536]	; (8001eb8 <main+0x23c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : RADIO_DIO_0_Pin RADIO_DIO_1_Pin RADIO_DIO_2_Pin */
  GPIO_InitStruct.Pin = RADIO_DIO_0_Pin|RADIO_DIO_1_Pin|RADIO_DIO_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ca0:	4f86      	ldr	r7, [pc, #536]	; (8001ebc <main+0x240>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ca8:	400a      	ands	r2, r1
 8001caa:	9201      	str	r2, [sp, #4]
 8001cac:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cb0:	4332      	orrs	r2, r6
 8001cb2:	62da      	str	r2, [r3, #44]	; 0x2c
 8001cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cb6:	4032      	ands	r2, r6
 8001cb8:	9202      	str	r2, [sp, #8]
 8001cba:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cbc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cbe:	4301      	orrs	r1, r0
 8001cc0:	62d9      	str	r1, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cc2:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cc6:	4002      	ands	r2, r0
  HAL_GPIO_WritePin(GPIOA, RADIO_NSS_Pin|RADIO_TCXO_VCC_Pin|RADIO_ANT_SWITCH_RX_Pin, GPIO_PIN_RESET);
 8001cc8:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cca:	9203      	str	r2, [sp, #12]
 8001ccc:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, RADIO_NSS_Pin|RADIO_TCXO_VCC_Pin|RADIO_ANT_SWITCH_RX_Pin, GPIO_PIN_RESET);
 8001cd0:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, RADIO_NSS_Pin|RADIO_TCXO_VCC_Pin|RADIO_ANT_SWITCH_RX_Pin, GPIO_PIN_RESET);
 8001cd8:	2200      	movs	r2, #0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cda:	400b      	ands	r3, r1
 8001cdc:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, RADIO_NSS_Pin|RADIO_TCXO_VCC_Pin|RADIO_ANT_SWITCH_RX_Pin, GPIO_PIN_RESET);
 8001cde:	0021      	movs	r1, r4
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ce0:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, RADIO_NSS_Pin|RADIO_TCXO_VCC_Pin|RADIO_ANT_SWITCH_RX_Pin, GPIO_PIN_RESET);
 8001ce2:	f7fe fd41 	bl	8000768 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	2120      	movs	r1, #32
 8001cea:	4875      	ldr	r0, [pc, #468]	; (8001ec0 <main+0x244>)
 8001cec:	f7fe fd3c 	bl	8000768 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, RADIO_ANT_SWITCH_TX_BOOST_Pin|RADIO_RESET_Pin|RADIO_ANT_SWITCH_TX_RFO_Pin, GPIO_PIN_RESET);
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	2107      	movs	r1, #7
 8001cf4:	4873      	ldr	r0, [pc, #460]	; (8001ec4 <main+0x248>)
 8001cf6:	f7fe fd37 	bl	8000768 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfa:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cfc:	2301      	movs	r3, #1
  GPIO_InitStruct.Pin = RADIO_NSS_Pin|RADIO_TCXO_VCC_Pin|RADIO_ANT_SWITCH_RX_Pin;
 8001cfe:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2400      	movs	r4, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d02:	0029      	movs	r1, r5
 8001d04:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d06:	606b      	str	r3, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	60ac      	str	r4, [r5, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d0a:	60ee      	str	r6, [r5, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0c:	f7fe fc6a 	bl	80005e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001d10:	2320      	movs	r3, #32
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d12:	0029      	movs	r1, r5
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001d14:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d16:	486a      	ldr	r0, [pc, #424]	; (8001ec0 <main+0x244>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d18:	3b1f      	subs	r3, #31
 8001d1a:	606b      	str	r3, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1c:	60ac      	str	r4, [r5, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1e:	60ec      	str	r4, [r5, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d20:	f7fe fc60 	bl	80005e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RADIO_DIO_0_Pin|RADIO_DIO_1_Pin|RADIO_DIO_2_Pin;
 8001d24:	2313      	movs	r3, #19
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d26:	0029      	movs	r1, r5
 8001d28:	4865      	ldr	r0, [pc, #404]	; (8001ec0 <main+0x244>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d2a:	606f      	str	r7, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2c:	60ac      	str	r4, [r5, #8]
  GPIO_InitStruct.Pin = RADIO_DIO_0_Pin|RADIO_DIO_1_Pin|RADIO_DIO_2_Pin;
 8001d2e:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d30:	f7fe fc58 	bl	80005e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RADIO_DIO_3_Pin */
  GPIO_InitStruct.Pin = RADIO_DIO_3_Pin;
 8001d34:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(RADIO_DIO_3_GPIO_Port, &GPIO_InitStruct);
 8001d36:	0029      	movs	r1, r5
  GPIO_InitStruct.Pin = RADIO_DIO_3_Pin;
 8001d38:	019b      	lsls	r3, r3, #6
  HAL_GPIO_Init(RADIO_DIO_3_GPIO_Port, &GPIO_InitStruct);
 8001d3a:	4862      	ldr	r0, [pc, #392]	; (8001ec4 <main+0x248>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d3c:	606f      	str	r7, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3e:	60ac      	str	r4, [r5, #8]
  GPIO_InitStruct.Pin = RADIO_DIO_3_Pin;
 8001d40:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(RADIO_DIO_3_GPIO_Port, &GPIO_InitStruct);
 8001d42:	f7fe fc4f 	bl	80005e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001d46:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d48:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001d4a:	019b      	lsls	r3, r3, #6
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4c:	0029      	movs	r1, r5
 8001d4e:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d50:	606c      	str	r4, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	60ac      	str	r4, [r5, #8]
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001d54:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d56:	f7fe fc45 	bl	80005e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RADIO_ANT_SWITCH_TX_BOOST_Pin RADIO_RESET_Pin RADIO_ANT_SWITCH_TX_RFO_Pin */
  GPIO_InitStruct.Pin = RADIO_ANT_SWITCH_TX_BOOST_Pin|RADIO_RESET_Pin|RADIO_ANT_SWITCH_TX_RFO_Pin;
 8001d5a:	2307      	movs	r3, #7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d5c:	0029      	movs	r1, r5
  GPIO_InitStruct.Pin = RADIO_ANT_SWITCH_TX_BOOST_Pin|RADIO_RESET_Pin|RADIO_ANT_SWITCH_TX_RFO_Pin;
 8001d5e:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d60:	4858      	ldr	r0, [pc, #352]	; (8001ec4 <main+0x248>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d62:	3b06      	subs	r3, #6
 8001d64:	606b      	str	r3, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d66:	60ac      	str	r4, [r5, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d68:	60ee      	str	r6, [r5, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d6a:	f7fe fc3b 	bl	80005e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8001d6e:	0022      	movs	r2, r4
 8001d70:	0021      	movs	r1, r4
 8001d72:	2005      	movs	r0, #5
 8001d74:	f7fe fbbc 	bl	80004f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8001d78:	2005      	movs	r0, #5
 8001d7a:	f7fe fbe9 	bl	8000550 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001d7e:	0022      	movs	r2, r4
 8001d80:	0021      	movs	r1, r4
 8001d82:	2007      	movs	r0, #7
  RTC_TimeTypeDef sTime = {0};
 8001d84:	af05      	add	r7, sp, #20
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001d86:	f7fe fbb3 	bl	80004f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001d8a:	2007      	movs	r0, #7
 8001d8c:	f7fe fbe0 	bl	8000550 <HAL_NVIC_EnableIRQ>
  RTC_TimeTypeDef sTime = {0};
 8001d90:	0021      	movs	r1, r4
 8001d92:	2214      	movs	r2, #20
 8001d94:	0038      	movs	r0, r7
 8001d96:	f000 fa07 	bl	80021a8 <memset>
  RTC_AlarmTypeDef sAlarm = {0};
 8001d9a:	0021      	movs	r1, r4
 8001d9c:	2228      	movs	r2, #40	; 0x28
 8001d9e:	0028      	movs	r0, r5
  RTC_DateTypeDef sDate = {0};
 8001da0:	9400      	str	r4, [sp, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8001da2:	f000 fa01 	bl	80021a8 <memset>
  hrtc.Instance = RTC;
 8001da6:	4e48      	ldr	r6, [pc, #288]	; (8001ec8 <main+0x24c>)
 8001da8:	4b48      	ldr	r3, [pc, #288]	; (8001ecc <main+0x250>)
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001daa:	0030      	movs	r0, r6
  hrtc.Instance = RTC;
 8001dac:	6033      	str	r3, [r6, #0]
  hrtc.Init.AsynchPrediv = 31;
 8001dae:	231f      	movs	r3, #31
 8001db0:	60b3      	str	r3, [r6, #8]
  hrtc.Init.SynchPrediv = 1023;
 8001db2:	4b47      	ldr	r3, [pc, #284]	; (8001ed0 <main+0x254>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001db4:	6074      	str	r4, [r6, #4]
  hrtc.Init.SynchPrediv = 1023;
 8001db6:	60f3      	str	r3, [r6, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001db8:	6134      	str	r4, [r6, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001dba:	6174      	str	r4, [r6, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001dbc:	61b4      	str	r4, [r6, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001dbe:	61f4      	str	r4, [r6, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001dc0:	f7ff f9ce 	bl	8001160 <HAL_RTC_Init>
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001dc4:	0022      	movs	r2, r4
 8001dc6:	0039      	movs	r1, r7
 8001dc8:	0030      	movs	r0, r6
  sTime.Hours = 0;
 8001dca:	703c      	strb	r4, [r7, #0]
  sTime.Minutes = 0;
 8001dcc:	707c      	strb	r4, [r7, #1]
  sTime.Seconds = 0;
 8001dce:	70bc      	strb	r4, [r7, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001dd0:	60fc      	str	r4, [r7, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001dd2:	613c      	str	r4, [r7, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001dd4:	f7ff fa2c 	bl	8001230 <HAL_RTC_SetTime>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001dd8:	466b      	mov	r3, sp
 8001dda:	2201      	movs	r2, #1
 8001ddc:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001dde:	2201      	movs	r2, #1
 8001de0:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8001de2:	2201      	movs	r2, #1
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001de4:	4669      	mov	r1, sp
  sDate.Date = 1;
 8001de6:	709a      	strb	r2, [r3, #2]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001de8:	0030      	movs	r0, r6
 8001dea:	0022      	movs	r2, r4
  sDate.Year = 0;
 8001dec:	70dc      	strb	r4, [r3, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001dee:	f7ff fa9d 	bl	800132c <HAL_RTC_SetDate>
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 8001df2:	23f0      	movs	r3, #240	; 0xf0
 8001df4:	051b      	lsls	r3, r3, #20
 8001df6:	61ab      	str	r3, [r5, #24]
  sAlarm.AlarmDateWeekDay = 1;
 8001df8:	2329      	movs	r3, #41	; 0x29
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	446b      	add	r3, sp
 8001dfe:	77da      	strb	r2, [r3, #31]
  sAlarm.Alarm = RTC_ALARM_A;
 8001e00:	2380      	movs	r3, #128	; 0x80
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001e02:	0022      	movs	r2, r4
 8001e04:	0029      	movs	r1, r5
  sAlarm.Alarm = RTC_ALARM_A;
 8001e06:	005b      	lsls	r3, r3, #1
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001e08:	0030      	movs	r0, r6
  sAlarm.AlarmTime.Hours = 0;
 8001e0a:	702c      	strb	r4, [r5, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8001e0c:	706c      	strb	r4, [r5, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8001e0e:	70ac      	strb	r4, [r5, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8001e10:	606c      	str	r4, [r5, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001e12:	60ec      	str	r4, [r5, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001e14:	612c      	str	r4, [r5, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001e16:	616c      	str	r4, [r5, #20]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001e18:	61ec      	str	r4, [r5, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001e1a:	626b      	str	r3, [r5, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001e1c:	f7ff faf2 	bl	8001404 <HAL_RTC_SetAlarm_IT>
  hspi1.Instance = SPI1;
 8001e20:	482c      	ldr	r0, [pc, #176]	; (8001ed4 <main+0x258>)
 8001e22:	4b2d      	ldr	r3, [pc, #180]	; (8001ed8 <main+0x25c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e24:	2582      	movs	r5, #130	; 0x82
  hspi1.Instance = SPI1;
 8001e26:	6003      	str	r3, [r0, #0]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e28:	2380      	movs	r3, #128	; 0x80
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	6183      	str	r3, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001e2e:	3be1      	subs	r3, #225	; 0xe1
 8001e30:	3bff      	subs	r3, #255	; 0xff
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e32:	006d      	lsls	r5, r5, #1
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001e34:	61c3      	str	r3, [r0, #28]
  hspi1.Init.CRCPolynomial = 7;
 8001e36:	3b19      	subs	r3, #25
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e38:	6084      	str	r4, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e3a:	60c4      	str	r4, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e3c:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e3e:	6144      	str	r4, [r0, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e40:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e42:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e44:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001e46:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e48:	6045      	str	r5, [r0, #4]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e4a:	f7ff fba7 	bl	800159c <HAL_SPI_Init>
  hspi2.Instance = SPI2;
 8001e4e:	4823      	ldr	r0, [pc, #140]	; (8001edc <main+0x260>)
 8001e50:	4b23      	ldr	r3, [pc, #140]	; (8001ee0 <main+0x264>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001e52:	6084      	str	r4, [r0, #8]
  hspi2.Instance = SPI2;
 8001e54:	6003      	str	r3, [r0, #0]
  hspi2.Init.CRCPolynomial = 7;
 8001e56:	2307      	movs	r3, #7
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e58:	60c4      	str	r4, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e5a:	6104      	str	r4, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e5c:	6144      	str	r4, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8001e5e:	6184      	str	r4, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e60:	61c4      	str	r4, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e62:	6204      	str	r4, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e64:	6244      	str	r4, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e66:	6284      	str	r4, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001e68:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e6a:	6045      	str	r5, [r0, #4]
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e6c:	f7ff fb96 	bl	800159c <HAL_SPI_Init>
  huart2.Instance = USART2;
 8001e70:	481c      	ldr	r0, [pc, #112]	; (8001ee4 <main+0x268>)
 8001e72:	4b1d      	ldr	r3, [pc, #116]	; (8001ee8 <main+0x26c>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e74:	6084      	str	r4, [r0, #8]
  huart2.Instance = USART2;
 8001e76:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8001e78:	23e1      	movs	r3, #225	; 0xe1
 8001e7a:	025b      	lsls	r3, r3, #9
 8001e7c:	6043      	str	r3, [r0, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e7e:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e80:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e82:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e84:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e86:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e88:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e8a:	6244      	str	r4, [r0, #36]	; 0x24
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1){
 8001e8c:	2480      	movs	r4, #128	; 0x80
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e8e:	6143      	str	r3, [r0, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e90:	f7ff fe78 	bl	8001b84 <HAL_UART_Init>
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1){
 8001e94:	01a4      	lsls	r4, r4, #6
 8001e96:	0021      	movs	r1, r4
 8001e98:	4809      	ldr	r0, [pc, #36]	; (8001ec0 <main+0x244>)
 8001e9a:	f7fe fc5f 	bl	800075c <HAL_GPIO_ReadPin>
 8001e9e:	2801      	cmp	r0, #1
 8001ea0:	d1f9      	bne.n	8001e96 <main+0x21a>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8001ea2:	2120      	movs	r1, #32
 8001ea4:	4806      	ldr	r0, [pc, #24]	; (8001ec0 <main+0x244>)
 8001ea6:	f7fe fc65 	bl	8000774 <HAL_GPIO_TogglePin>
		  HAL_Delay(100);
 8001eaa:	2064      	movs	r0, #100	; 0x64
 8001eac:	f7fe fb10 	bl	80004d0 <HAL_Delay>
 8001eb0:	e7f1      	b.n	8001e96 <main+0x21a>
 8001eb2:	46c0      	nop			; (mov r8, r8)
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	00009002 	.word	0x00009002
 8001ebc:	10110000 	.word	0x10110000
 8001ec0:	50000400 	.word	0x50000400
 8001ec4:	50000800 	.word	0x50000800
 8001ec8:	2000007c 	.word	0x2000007c
 8001ecc:	40002800 	.word	0x40002800
 8001ed0:	000003ff 	.word	0x000003ff
 8001ed4:	200000a0 	.word	0x200000a0
 8001ed8:	40013000 	.word	0x40013000
 8001edc:	20000024 	.word	0x20000024
 8001ee0:	40003800 	.word	0x40003800
 8001ee4:	200000f8 	.word	0x200000f8
 8001ee8:	40004400 	.word	0x40004400

08001eec <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eec:	2201      	movs	r2, #1
 8001eee:	4b05      	ldr	r3, [pc, #20]	; (8001f04 <HAL_MspInit+0x18>)
 8001ef0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef6:	2280      	movs	r2, #128	; 0x80
 8001ef8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001efa:	0552      	lsls	r2, r2, #21
 8001efc:	430a      	orrs	r2, r1
 8001efe:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f00:	4770      	bx	lr
 8001f02:	46c0      	nop			; (mov r8, r8)
 8001f04:	40021000 	.word	0x40021000

08001f08 <HAL_RTC_MspInit>:
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{

  if(hrtc->Instance==RTC)
 8001f08:	4b09      	ldr	r3, [pc, #36]	; (8001f30 <HAL_RTC_MspInit+0x28>)
 8001f0a:	6802      	ldr	r2, [r0, #0]
{
 8001f0c:	b510      	push	{r4, lr}
  if(hrtc->Instance==RTC)
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d10d      	bne.n	8001f2e <HAL_RTC_MspInit+0x26>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f12:	2380      	movs	r3, #128	; 0x80
 8001f14:	4a07      	ldr	r2, [pc, #28]	; (8001f34 <HAL_RTC_MspInit+0x2c>)
 8001f16:	02db      	lsls	r3, r3, #11
 8001f18:	6d11      	ldr	r1, [r2, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8001f1a:	2002      	movs	r0, #2
    __HAL_RCC_RTC_ENABLE();
 8001f1c:	430b      	orrs	r3, r1
 8001f1e:	6513      	str	r3, [r2, #80]	; 0x50
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8001f20:	2200      	movs	r2, #0
 8001f22:	0011      	movs	r1, r2
 8001f24:	f7fe fae4 	bl	80004f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8001f28:	2002      	movs	r0, #2
 8001f2a:	f7fe fb11 	bl	8000550 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001f2e:	bd10      	pop	{r4, pc}
 8001f30:	40002800 	.word	0x40002800
 8001f34:	40021000 	.word	0x40021000

08001f38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f38:	b530      	push	{r4, r5, lr}
 8001f3a:	0004      	movs	r4, r0
 8001f3c:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f3e:	2214      	movs	r2, #20
 8001f40:	2100      	movs	r1, #0
 8001f42:	a803      	add	r0, sp, #12
 8001f44:	f000 f930 	bl	80021a8 <memset>
  if(hspi->Instance==SPI1)
 8001f48:	6823      	ldr	r3, [r4, #0]
 8001f4a:	4a25      	ldr	r2, [pc, #148]	; (8001fe0 <HAL_SPI_MspInit+0xa8>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d12c      	bne.n	8001faa <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f50:	2280      	movs	r2, #128	; 0x80
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f52:	2402      	movs	r4, #2
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f54:	4b23      	ldr	r3, [pc, #140]	; (8001fe4 <HAL_SPI_MspInit+0xac>)
 8001f56:	0152      	lsls	r2, r2, #5
 8001f58:	6b59      	ldr	r1, [r3, #52]	; 0x34
    PA6     ------> SPI1_MISO 
    */
    GPIO_InitStruct.Pin = RADIO_SCLK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5a:	2503      	movs	r5, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f5c:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5e:	2101      	movs	r1, #1
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f60:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(RADIO_SCLK_GPIO_Port, &GPIO_InitStruct);
 8001f64:	4820      	ldr	r0, [pc, #128]	; (8001fe8 <HAL_SPI_MspInit+0xb0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f66:	4322      	orrs	r2, r4
 8001f68:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f6c:	4022      	ands	r2, r4
 8001f6e:	9200      	str	r2, [sp, #0]
 8001f70:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f74:	430a      	orrs	r2, r1
 8001f76:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7a:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f7c:	400b      	ands	r3, r1
 8001f7e:	9301      	str	r3, [sp, #4]
 8001f80:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = RADIO_SCLK_Pin;
 8001f82:	2308      	movs	r3, #8
    HAL_GPIO_Init(RADIO_SCLK_GPIO_Port, &GPIO_InitStruct);
 8001f84:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = RADIO_SCLK_Pin;
 8001f86:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f88:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(RADIO_SCLK_GPIO_Port, &GPIO_InitStruct);
 8001f8a:	f7fe fb2b 	bl	80005e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RADIO_MOSI_Pin|RADIO_MISO_Pin;
 8001f8e:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f90:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pin = RADIO_MOSI_Pin|RADIO_MISO_Pin;
 8001f92:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f94:	2300      	movs	r3, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f96:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f98:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f9a:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001f9c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9e:	a903      	add	r1, sp, #12
 8001fa0:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa2:	f7fe fb1f 	bl	80005e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001fa6:	b009      	add	sp, #36	; 0x24
 8001fa8:	bd30      	pop	{r4, r5, pc}
  else if(hspi->Instance==SPI2)
 8001faa:	4a10      	ldr	r2, [pc, #64]	; (8001fec <HAL_SPI_MspInit+0xb4>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d1fa      	bne.n	8001fa6 <HAL_SPI_MspInit+0x6e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001fb0:	2280      	movs	r2, #128	; 0x80
 8001fb2:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <HAL_SPI_MspInit+0xac>)
 8001fb4:	01d2      	lsls	r2, r2, #7
 8001fb6:	6b99      	ldr	r1, [r3, #56]	; 0x38
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb8:	480b      	ldr	r0, [pc, #44]	; (8001fe8 <HAL_SPI_MspInit+0xb0>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fc2:	4311      	orrs	r1, r2
 8001fc4:	62d9      	str	r1, [r3, #44]	; 0x2c
 8001fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc8:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fca:	4013      	ands	r3, r2
 8001fcc:	9302      	str	r3, [sp, #8]
 8001fce:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12;
 8001fd0:	23f0      	movs	r3, #240	; 0xf0
 8001fd2:	021b      	lsls	r3, r3, #8
 8001fd4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd6:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd8:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fda:	9306      	str	r3, [sp, #24]
 8001fdc:	e7e1      	b.n	8001fa2 <HAL_SPI_MspInit+0x6a>
 8001fde:	46c0      	nop			; (mov r8, r8)
 8001fe0:	40013000 	.word	0x40013000
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	50000400 	.word	0x50000400
 8001fec:	40003800 	.word	0x40003800

08001ff0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ff0:	b510      	push	{r4, lr}
 8001ff2:	0004      	movs	r4, r0
 8001ff4:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff6:	2214      	movs	r2, #20
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	a801      	add	r0, sp, #4
 8001ffc:	f000 f8d4 	bl	80021a8 <memset>
  if(huart->Instance==USART2)
 8002000:	4b14      	ldr	r3, [pc, #80]	; (8002054 <HAL_UART_MspInit+0x64>)
 8002002:	6822      	ldr	r2, [r4, #0]
 8002004:	429a      	cmp	r2, r3
 8002006:	d122      	bne.n	800204e <HAL_UART_MspInit+0x5e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002008:	2280      	movs	r2, #128	; 0x80
 800200a:	4b13      	ldr	r3, [pc, #76]	; (8002058 <HAL_UART_MspInit+0x68>)
 800200c:	0292      	lsls	r2, r2, #10
 800200e:	6b99      	ldr	r1, [r3, #56]	; 0x38
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002010:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_ENABLE();
 8002012:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002014:	2101      	movs	r1, #1
    __HAL_RCC_USART2_CLK_ENABLE();
 8002016:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800201a:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800201c:	430a      	orrs	r2, r1
 800201e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002022:	400b      	ands	r3, r1
 8002024:	9300      	str	r3, [sp, #0]
 8002026:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002028:	230c      	movs	r3, #12
 800202a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202c:	3b0a      	subs	r3, #10
 800202e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002030:	185b      	adds	r3, r3, r1
 8002032:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8002034:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002036:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8002038:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800203a:	f7fe fad3 	bl	80005e4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800203e:	2200      	movs	r2, #0
 8002040:	201c      	movs	r0, #28
 8002042:	0011      	movs	r1, r2
 8002044:	f7fe fa54 	bl	80004f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002048:	201c      	movs	r0, #28
 800204a:	f7fe fa81 	bl	8000550 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800204e:	b006      	add	sp, #24
 8002050:	bd10      	pop	{r4, pc}
 8002052:	46c0      	nop			; (mov r8, r8)
 8002054:	40004400 	.word	0x40004400
 8002058:	40021000 	.word	0x40021000

0800205c <NMI_Handler>:
 800205c:	4770      	bx	lr

0800205e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800205e:	e7fe      	b.n	800205e <HardFault_Handler>

08002060 <SVC_Handler>:
 8002060:	4770      	bx	lr

08002062 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002062:	4770      	bx	lr

08002064 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002064:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002066:	f7fe fa25 	bl	80004b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800206a:	bd10      	pop	{r4, pc}

0800206c <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 800206c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800206e:	4802      	ldr	r0, [pc, #8]	; (8002078 <RTC_IRQHandler+0xc>)
 8002070:	f7ff f810 	bl	8001094 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8002074:	bd10      	pop	{r4, pc}
 8002076:	46c0      	nop			; (mov r8, r8)
 8002078:	2000007c 	.word	0x2000007c

0800207c <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800207c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800207e:	2001      	movs	r0, #1
 8002080:	f7fe fb7e 	bl	8000780 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002084:	2002      	movs	r0, #2
 8002086:	f7fe fb7b 	bl	8000780 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800208a:	bd10      	pop	{r4, pc}

0800208c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800208c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800208e:	2010      	movs	r0, #16
 8002090:	f7fe fb76 	bl	8000780 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002094:	2080      	movs	r0, #128	; 0x80
 8002096:	0180      	lsls	r0, r0, #6
 8002098:	f7fe fb72 	bl	8000780 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800209c:	bd10      	pop	{r4, pc}
	...

080020a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80020a0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80020a2:	4802      	ldr	r0, [pc, #8]	; (80020ac <USART2_IRQHandler+0xc>)
 80020a4:	f7ff face 	bl	8001644 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80020a8:	bd10      	pop	{r4, pc}
 80020aa:	46c0      	nop			; (mov r8, r8)
 80020ac:	200000f8 	.word	0x200000f8

080020b0 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 80020b0:	2280      	movs	r2, #128	; 0x80
 80020b2:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <SystemInit+0x44>)
 80020b4:	0052      	lsls	r2, r2, #1
 80020b6:	6819      	ldr	r1, [r3, #0]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80020bc:	68da      	ldr	r2, [r3, #12]
 80020be:	490e      	ldr	r1, [pc, #56]	; (80020f8 <SystemInit+0x48>)
 80020c0:	400a      	ands	r2, r1
 80020c2:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	490d      	ldr	r1, [pc, #52]	; (80020fc <SystemInit+0x4c>)
 80020c8:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80020ca:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80020cc:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	438a      	bics	r2, r1
 80020d2:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	490a      	ldr	r1, [pc, #40]	; (8002100 <SystemInit+0x50>)
 80020d8:	400a      	ands	r2, r1
 80020da:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80020dc:	68da      	ldr	r2, [r3, #12]
 80020de:	4909      	ldr	r1, [pc, #36]	; (8002104 <SystemInit+0x54>)
 80020e0:	400a      	ands	r2, r1
 80020e2:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80020e4:	2200      	movs	r2, #0
 80020e6:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80020e8:	2280      	movs	r2, #128	; 0x80
 80020ea:	4b07      	ldr	r3, [pc, #28]	; (8002108 <SystemInit+0x58>)
 80020ec:	0512      	lsls	r2, r2, #20
 80020ee:	609a      	str	r2, [r3, #8]
#endif
}
 80020f0:	4770      	bx	lr
 80020f2:	46c0      	nop			; (mov r8, r8)
 80020f4:	40021000 	.word	0x40021000
 80020f8:	88ff400c 	.word	0x88ff400c
 80020fc:	fef6fff6 	.word	0xfef6fff6
 8002100:	fffbffff 	.word	0xfffbffff
 8002104:	ff02ffff 	.word	0xff02ffff
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800210c:	480d      	ldr	r0, [pc, #52]	; (8002144 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800210e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8002110:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002112:	e003      	b.n	800211c <LoopCopyDataInit>

08002114 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002114:	4b0c      	ldr	r3, [pc, #48]	; (8002148 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8002116:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002118:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800211a:	3104      	adds	r1, #4

0800211c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 800211c:	480b      	ldr	r0, [pc, #44]	; (800214c <LoopForever+0xa>)
  ldr  r3, =_edata
 800211e:	4b0c      	ldr	r3, [pc, #48]	; (8002150 <LoopForever+0xe>)
  adds  r2, r0, r1
 8002120:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002122:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002124:	d3f6      	bcc.n	8002114 <CopyDataInit>
  ldr  r2, =_sbss
 8002126:	4a0b      	ldr	r2, [pc, #44]	; (8002154 <LoopForever+0x12>)
  b  LoopFillZerobss
 8002128:	e002      	b.n	8002130 <LoopFillZerobss>

0800212a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800212a:	2300      	movs	r3, #0
  str  r3, [r2]
 800212c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800212e:	3204      	adds	r2, #4

08002130 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8002130:	4b09      	ldr	r3, [pc, #36]	; (8002158 <LoopForever+0x16>)
  cmp  r2, r3
 8002132:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002134:	d3f9      	bcc.n	800212a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002136:	f7ff ffbb 	bl	80020b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800213a:	f000 f811 	bl	8002160 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800213e:	f7ff fd9d 	bl	8001c7c <main>

08002142 <LoopForever>:

LoopForever:
    b LoopForever
 8002142:	e7fe      	b.n	8002142 <LoopForever>
   ldr   r0, =_estack
 8002144:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8002148:	08002214 	.word	0x08002214
  ldr  r0, =_sdata
 800214c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002150:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8002154:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8002158:	20000178 	.word	0x20000178

0800215c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800215c:	e7fe      	b.n	800215c <ADC1_COMP_IRQHandler>
	...

08002160 <__libc_init_array>:
 8002160:	b570      	push	{r4, r5, r6, lr}
 8002162:	2600      	movs	r6, #0
 8002164:	4d0c      	ldr	r5, [pc, #48]	; (8002198 <__libc_init_array+0x38>)
 8002166:	4c0d      	ldr	r4, [pc, #52]	; (800219c <__libc_init_array+0x3c>)
 8002168:	1b64      	subs	r4, r4, r5
 800216a:	10a4      	asrs	r4, r4, #2
 800216c:	42a6      	cmp	r6, r4
 800216e:	d109      	bne.n	8002184 <__libc_init_array+0x24>
 8002170:	2600      	movs	r6, #0
 8002172:	f000 f821 	bl	80021b8 <_init>
 8002176:	4d0a      	ldr	r5, [pc, #40]	; (80021a0 <__libc_init_array+0x40>)
 8002178:	4c0a      	ldr	r4, [pc, #40]	; (80021a4 <__libc_init_array+0x44>)
 800217a:	1b64      	subs	r4, r4, r5
 800217c:	10a4      	asrs	r4, r4, #2
 800217e:	42a6      	cmp	r6, r4
 8002180:	d105      	bne.n	800218e <__libc_init_array+0x2e>
 8002182:	bd70      	pop	{r4, r5, r6, pc}
 8002184:	00b3      	lsls	r3, r6, #2
 8002186:	58eb      	ldr	r3, [r5, r3]
 8002188:	4798      	blx	r3
 800218a:	3601      	adds	r6, #1
 800218c:	e7ee      	b.n	800216c <__libc_init_array+0xc>
 800218e:	00b3      	lsls	r3, r6, #2
 8002190:	58eb      	ldr	r3, [r5, r3]
 8002192:	4798      	blx	r3
 8002194:	3601      	adds	r6, #1
 8002196:	e7f2      	b.n	800217e <__libc_init_array+0x1e>
 8002198:	0800220c 	.word	0x0800220c
 800219c:	0800220c 	.word	0x0800220c
 80021a0:	0800220c 	.word	0x0800220c
 80021a4:	08002210 	.word	0x08002210

080021a8 <memset>:
 80021a8:	0003      	movs	r3, r0
 80021aa:	1882      	adds	r2, r0, r2
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d100      	bne.n	80021b2 <memset+0xa>
 80021b0:	4770      	bx	lr
 80021b2:	7019      	strb	r1, [r3, #0]
 80021b4:	3301      	adds	r3, #1
 80021b6:	e7f9      	b.n	80021ac <memset+0x4>

080021b8 <_init>:
 80021b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ba:	46c0      	nop			; (mov r8, r8)
 80021bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021be:	bc08      	pop	{r3}
 80021c0:	469e      	mov	lr, r3
 80021c2:	4770      	bx	lr

080021c4 <_fini>:
 80021c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021c6:	46c0      	nop			; (mov r8, r8)
 80021c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ca:	bc08      	pop	{r3}
 80021cc:	469e      	mov	lr, r3
 80021ce:	4770      	bx	lr
