
GPS_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031a0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003260  08003260  00013260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080032cc  080032cc  000132cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080032d4  080032d4  000132d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080032d8  080032d8  000132d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000508  20000000  080032dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000041c  20000508  080037e4  00020508  2**2
                  ALLOC
  8 ._user_heap_stack 00001100  20000924  080037e4  00020924  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  00020508  2**0
                  CONTENTS, READONLY
 10 .debug_info   00010f84  00000000  00000000  00020530  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002631  00000000  00000000  000314b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007862  00000000  00000000  00033ae5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000be8  00000000  00000000  0003b348  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000b58  00000000  00000000  0003bf30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00005de9  00000000  00000000  0003ca88  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003ddb  00000000  00000000  00042871  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004664c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000020a4  00000000  00000000  000466c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000508 	.word	0x20000508
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003248 	.word	0x08003248

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000050c 	.word	0x2000050c
 8000104:	08003248 	.word	0x08003248

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	4657      	mov	r7, sl
 8000264:	464e      	mov	r6, r9
 8000266:	4645      	mov	r5, r8
 8000268:	46de      	mov	lr, fp
 800026a:	b5e0      	push	{r5, r6, r7, lr}
 800026c:	0004      	movs	r4, r0
 800026e:	b083      	sub	sp, #12
 8000270:	000d      	movs	r5, r1
 8000272:	4692      	mov	sl, r2
 8000274:	4699      	mov	r9, r3
 8000276:	428b      	cmp	r3, r1
 8000278:	d82f      	bhi.n	80002da <__udivmoddi4+0x7a>
 800027a:	d02c      	beq.n	80002d6 <__udivmoddi4+0x76>
 800027c:	4649      	mov	r1, r9
 800027e:	4650      	mov	r0, sl
 8000280:	f000 f8cc 	bl	800041c <__clzdi2>
 8000284:	0029      	movs	r1, r5
 8000286:	0006      	movs	r6, r0
 8000288:	0020      	movs	r0, r4
 800028a:	f000 f8c7 	bl	800041c <__clzdi2>
 800028e:	1a33      	subs	r3, r6, r0
 8000290:	4698      	mov	r8, r3
 8000292:	3b20      	subs	r3, #32
 8000294:	469b      	mov	fp, r3
 8000296:	d500      	bpl.n	800029a <__udivmoddi4+0x3a>
 8000298:	e074      	b.n	8000384 <__udivmoddi4+0x124>
 800029a:	4653      	mov	r3, sl
 800029c:	465a      	mov	r2, fp
 800029e:	4093      	lsls	r3, r2
 80002a0:	001f      	movs	r7, r3
 80002a2:	4653      	mov	r3, sl
 80002a4:	4642      	mov	r2, r8
 80002a6:	4093      	lsls	r3, r2
 80002a8:	001e      	movs	r6, r3
 80002aa:	42af      	cmp	r7, r5
 80002ac:	d829      	bhi.n	8000302 <__udivmoddi4+0xa2>
 80002ae:	d026      	beq.n	80002fe <__udivmoddi4+0x9e>
 80002b0:	465b      	mov	r3, fp
 80002b2:	1ba4      	subs	r4, r4, r6
 80002b4:	41bd      	sbcs	r5, r7
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	da00      	bge.n	80002bc <__udivmoddi4+0x5c>
 80002ba:	e079      	b.n	80003b0 <__udivmoddi4+0x150>
 80002bc:	2200      	movs	r2, #0
 80002be:	2300      	movs	r3, #0
 80002c0:	9200      	str	r2, [sp, #0]
 80002c2:	9301      	str	r3, [sp, #4]
 80002c4:	2301      	movs	r3, #1
 80002c6:	465a      	mov	r2, fp
 80002c8:	4093      	lsls	r3, r2
 80002ca:	9301      	str	r3, [sp, #4]
 80002cc:	2301      	movs	r3, #1
 80002ce:	4642      	mov	r2, r8
 80002d0:	4093      	lsls	r3, r2
 80002d2:	9300      	str	r3, [sp, #0]
 80002d4:	e019      	b.n	800030a <__udivmoddi4+0xaa>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	d9d0      	bls.n	800027c <__udivmoddi4+0x1c>
 80002da:	2200      	movs	r2, #0
 80002dc:	2300      	movs	r3, #0
 80002de:	9200      	str	r2, [sp, #0]
 80002e0:	9301      	str	r3, [sp, #4]
 80002e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d001      	beq.n	80002ec <__udivmoddi4+0x8c>
 80002e8:	601c      	str	r4, [r3, #0]
 80002ea:	605d      	str	r5, [r3, #4]
 80002ec:	9800      	ldr	r0, [sp, #0]
 80002ee:	9901      	ldr	r1, [sp, #4]
 80002f0:	b003      	add	sp, #12
 80002f2:	bc3c      	pop	{r2, r3, r4, r5}
 80002f4:	4690      	mov	r8, r2
 80002f6:	4699      	mov	r9, r3
 80002f8:	46a2      	mov	sl, r4
 80002fa:	46ab      	mov	fp, r5
 80002fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fe:	42a3      	cmp	r3, r4
 8000300:	d9d6      	bls.n	80002b0 <__udivmoddi4+0x50>
 8000302:	2200      	movs	r2, #0
 8000304:	2300      	movs	r3, #0
 8000306:	9200      	str	r2, [sp, #0]
 8000308:	9301      	str	r3, [sp, #4]
 800030a:	4643      	mov	r3, r8
 800030c:	2b00      	cmp	r3, #0
 800030e:	d0e8      	beq.n	80002e2 <__udivmoddi4+0x82>
 8000310:	07fb      	lsls	r3, r7, #31
 8000312:	0872      	lsrs	r2, r6, #1
 8000314:	431a      	orrs	r2, r3
 8000316:	4646      	mov	r6, r8
 8000318:	087b      	lsrs	r3, r7, #1
 800031a:	e00e      	b.n	800033a <__udivmoddi4+0xda>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d101      	bne.n	8000324 <__udivmoddi4+0xc4>
 8000320:	42a2      	cmp	r2, r4
 8000322:	d80c      	bhi.n	800033e <__udivmoddi4+0xde>
 8000324:	1aa4      	subs	r4, r4, r2
 8000326:	419d      	sbcs	r5, r3
 8000328:	2001      	movs	r0, #1
 800032a:	1924      	adds	r4, r4, r4
 800032c:	416d      	adcs	r5, r5
 800032e:	2100      	movs	r1, #0
 8000330:	3e01      	subs	r6, #1
 8000332:	1824      	adds	r4, r4, r0
 8000334:	414d      	adcs	r5, r1
 8000336:	2e00      	cmp	r6, #0
 8000338:	d006      	beq.n	8000348 <__udivmoddi4+0xe8>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d9ee      	bls.n	800031c <__udivmoddi4+0xbc>
 800033e:	3e01      	subs	r6, #1
 8000340:	1924      	adds	r4, r4, r4
 8000342:	416d      	adcs	r5, r5
 8000344:	2e00      	cmp	r6, #0
 8000346:	d1f8      	bne.n	800033a <__udivmoddi4+0xda>
 8000348:	465b      	mov	r3, fp
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	1900      	adds	r0, r0, r4
 8000350:	4169      	adcs	r1, r5
 8000352:	2b00      	cmp	r3, #0
 8000354:	db22      	blt.n	800039c <__udivmoddi4+0x13c>
 8000356:	002b      	movs	r3, r5
 8000358:	465a      	mov	r2, fp
 800035a:	40d3      	lsrs	r3, r2
 800035c:	002a      	movs	r2, r5
 800035e:	4644      	mov	r4, r8
 8000360:	40e2      	lsrs	r2, r4
 8000362:	001c      	movs	r4, r3
 8000364:	465b      	mov	r3, fp
 8000366:	0015      	movs	r5, r2
 8000368:	2b00      	cmp	r3, #0
 800036a:	db2c      	blt.n	80003c6 <__udivmoddi4+0x166>
 800036c:	0026      	movs	r6, r4
 800036e:	409e      	lsls	r6, r3
 8000370:	0033      	movs	r3, r6
 8000372:	0026      	movs	r6, r4
 8000374:	4647      	mov	r7, r8
 8000376:	40be      	lsls	r6, r7
 8000378:	0032      	movs	r2, r6
 800037a:	1a80      	subs	r0, r0, r2
 800037c:	4199      	sbcs	r1, r3
 800037e:	9000      	str	r0, [sp, #0]
 8000380:	9101      	str	r1, [sp, #4]
 8000382:	e7ae      	b.n	80002e2 <__udivmoddi4+0x82>
 8000384:	4642      	mov	r2, r8
 8000386:	2320      	movs	r3, #32
 8000388:	1a9b      	subs	r3, r3, r2
 800038a:	4652      	mov	r2, sl
 800038c:	40da      	lsrs	r2, r3
 800038e:	4641      	mov	r1, r8
 8000390:	0013      	movs	r3, r2
 8000392:	464a      	mov	r2, r9
 8000394:	408a      	lsls	r2, r1
 8000396:	0017      	movs	r7, r2
 8000398:	431f      	orrs	r7, r3
 800039a:	e782      	b.n	80002a2 <__udivmoddi4+0x42>
 800039c:	4642      	mov	r2, r8
 800039e:	2320      	movs	r3, #32
 80003a0:	1a9b      	subs	r3, r3, r2
 80003a2:	002a      	movs	r2, r5
 80003a4:	4646      	mov	r6, r8
 80003a6:	409a      	lsls	r2, r3
 80003a8:	0023      	movs	r3, r4
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	4313      	orrs	r3, r2
 80003ae:	e7d5      	b.n	800035c <__udivmoddi4+0xfc>
 80003b0:	4642      	mov	r2, r8
 80003b2:	2320      	movs	r3, #32
 80003b4:	2100      	movs	r1, #0
 80003b6:	1a9b      	subs	r3, r3, r2
 80003b8:	2200      	movs	r2, #0
 80003ba:	9100      	str	r1, [sp, #0]
 80003bc:	9201      	str	r2, [sp, #4]
 80003be:	2201      	movs	r2, #1
 80003c0:	40da      	lsrs	r2, r3
 80003c2:	9201      	str	r2, [sp, #4]
 80003c4:	e782      	b.n	80002cc <__udivmoddi4+0x6c>
 80003c6:	4642      	mov	r2, r8
 80003c8:	2320      	movs	r3, #32
 80003ca:	0026      	movs	r6, r4
 80003cc:	1a9b      	subs	r3, r3, r2
 80003ce:	40de      	lsrs	r6, r3
 80003d0:	002f      	movs	r7, r5
 80003d2:	46b4      	mov	ip, r6
 80003d4:	4097      	lsls	r7, r2
 80003d6:	4666      	mov	r6, ip
 80003d8:	003b      	movs	r3, r7
 80003da:	4333      	orrs	r3, r6
 80003dc:	e7c9      	b.n	8000372 <__udivmoddi4+0x112>
 80003de:	46c0      	nop			; (mov r8, r8)

080003e0 <__clzsi2>:
 80003e0:	211c      	movs	r1, #28
 80003e2:	2301      	movs	r3, #1
 80003e4:	041b      	lsls	r3, r3, #16
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d301      	bcc.n	80003ee <__clzsi2+0xe>
 80003ea:	0c00      	lsrs	r0, r0, #16
 80003ec:	3910      	subs	r1, #16
 80003ee:	0a1b      	lsrs	r3, r3, #8
 80003f0:	4298      	cmp	r0, r3
 80003f2:	d301      	bcc.n	80003f8 <__clzsi2+0x18>
 80003f4:	0a00      	lsrs	r0, r0, #8
 80003f6:	3908      	subs	r1, #8
 80003f8:	091b      	lsrs	r3, r3, #4
 80003fa:	4298      	cmp	r0, r3
 80003fc:	d301      	bcc.n	8000402 <__clzsi2+0x22>
 80003fe:	0900      	lsrs	r0, r0, #4
 8000400:	3904      	subs	r1, #4
 8000402:	a202      	add	r2, pc, #8	; (adr r2, 800040c <__clzsi2+0x2c>)
 8000404:	5c10      	ldrb	r0, [r2, r0]
 8000406:	1840      	adds	r0, r0, r1
 8000408:	4770      	bx	lr
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	02020304 	.word	0x02020304
 8000410:	01010101 	.word	0x01010101
	...

0800041c <__clzdi2>:
 800041c:	b510      	push	{r4, lr}
 800041e:	2900      	cmp	r1, #0
 8000420:	d103      	bne.n	800042a <__clzdi2+0xe>
 8000422:	f7ff ffdd 	bl	80003e0 <__clzsi2>
 8000426:	3020      	adds	r0, #32
 8000428:	e002      	b.n	8000430 <__clzdi2+0x14>
 800042a:	1c08      	adds	r0, r1, #0
 800042c:	f7ff ffd8 	bl	80003e0 <__clzsi2>
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000434:	b510      	push	{r4, lr}
 8000436:	0004      	movs	r4, r0
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000438:	4b09      	ldr	r3, [pc, #36]	; (8000460 <HAL_InitTick+0x2c>)
 800043a:	6818      	ldr	r0, [r3, #0]
 800043c:	21fa      	movs	r1, #250	; 0xfa
 800043e:	0089      	lsls	r1, r1, #2
 8000440:	f7ff fe62 	bl	8000108 <__udivsi3>
 8000444:	f000 f86c 	bl	8000520 <HAL_SYSTICK_Config>
 8000448:	2800      	cmp	r0, #0
 800044a:	d001      	beq.n	8000450 <HAL_InitTick+0x1c>
  {
    status = HAL_ERROR;
 800044c:	2001      	movs	r0, #1
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
  }

  /* Return function status */
  return status;
}
 800044e:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000450:	2200      	movs	r2, #0
 8000452:	0021      	movs	r1, r4
 8000454:	3801      	subs	r0, #1
 8000456:	f000 f827 	bl	80004a8 <HAL_NVIC_SetPriority>
  HAL_StatusTypeDef  status = HAL_OK;
 800045a:	2000      	movs	r0, #0
 800045c:	e7f7      	b.n	800044e <HAL_InitTick+0x1a>
 800045e:	46c0      	nop			; (mov r8, r8)
 8000460:	20000000 	.word	0x20000000

08000464 <HAL_Init>:
{
 8000464:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000466:	4a08      	ldr	r2, [pc, #32]	; (8000488 <HAL_Init+0x24>)
 8000468:	6813      	ldr	r3, [r2, #0]
 800046a:	2140      	movs	r1, #64	; 0x40
 800046c:	430b      	orrs	r3, r1
 800046e:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000470:	2000      	movs	r0, #0
 8000472:	f7ff ffdf 	bl	8000434 <HAL_InitTick>
 8000476:	1e04      	subs	r4, r0, #0
 8000478:	d002      	beq.n	8000480 <HAL_Init+0x1c>
    status = HAL_ERROR;
 800047a:	2401      	movs	r4, #1
}
 800047c:	0020      	movs	r0, r4
 800047e:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 8000480:	f002 f9dc 	bl	800283c <HAL_MspInit>
 8000484:	e7fa      	b.n	800047c <HAL_Init+0x18>
 8000486:	46c0      	nop			; (mov r8, r8)
 8000488:	40022000 	.word	0x40022000

0800048c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800048c:	4a02      	ldr	r2, [pc, #8]	; (8000498 <HAL_IncTick+0xc>)
 800048e:	6813      	ldr	r3, [r2, #0]
 8000490:	3301      	adds	r3, #1
 8000492:	6013      	str	r3, [r2, #0]
}
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	2000055c 	.word	0x2000055c

0800049c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800049c:	4b01      	ldr	r3, [pc, #4]	; (80004a4 <HAL_GetTick+0x8>)
 800049e:	6818      	ldr	r0, [r3, #0]
}
 80004a0:	4770      	bx	lr
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	2000055c 	.word	0x2000055c

080004a8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80004a8:	b570      	push	{r4, r5, r6, lr}
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80004aa:	2800      	cmp	r0, #0
 80004ac:	db11      	blt.n	80004d2 <HAL_NVIC_SetPriority+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004ae:	0883      	lsrs	r3, r0, #2
 80004b0:	4d14      	ldr	r5, [pc, #80]	; (8000504 <HAL_NVIC_SetPriority+0x5c>)
 80004b2:	33c0      	adds	r3, #192	; 0xc0
 80004b4:	009b      	lsls	r3, r3, #2
 80004b6:	595c      	ldr	r4, [r3, r5]
 80004b8:	2203      	movs	r2, #3
 80004ba:	4010      	ands	r0, r2
 80004bc:	00c0      	lsls	r0, r0, #3
 80004be:	32fc      	adds	r2, #252	; 0xfc
 80004c0:	0016      	movs	r6, r2
 80004c2:	4086      	lsls	r6, r0
 80004c4:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004c6:	0189      	lsls	r1, r1, #6
 80004c8:	400a      	ands	r2, r1
 80004ca:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004cc:	4322      	orrs	r2, r4
 80004ce:	515a      	str	r2, [r3, r5]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80004d0:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004d2:	b2c0      	uxtb	r0, r0
 80004d4:	230f      	movs	r3, #15
 80004d6:	4003      	ands	r3, r0
 80004d8:	3b08      	subs	r3, #8
 80004da:	089b      	lsrs	r3, r3, #2
 80004dc:	3306      	adds	r3, #6
 80004de:	009b      	lsls	r3, r3, #2
 80004e0:	4a09      	ldr	r2, [pc, #36]	; (8000508 <HAL_NVIC_SetPriority+0x60>)
 80004e2:	4694      	mov	ip, r2
 80004e4:	4463      	add	r3, ip
 80004e6:	685d      	ldr	r5, [r3, #4]
 80004e8:	2203      	movs	r2, #3
 80004ea:	4010      	ands	r0, r2
 80004ec:	00c0      	lsls	r0, r0, #3
 80004ee:	24ff      	movs	r4, #255	; 0xff
 80004f0:	0022      	movs	r2, r4
 80004f2:	4082      	lsls	r2, r0
 80004f4:	4395      	bics	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004f6:	0189      	lsls	r1, r1, #6
 80004f8:	400c      	ands	r4, r1
 80004fa:	4084      	lsls	r4, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004fc:	432c      	orrs	r4, r5
 80004fe:	605c      	str	r4, [r3, #4]
 8000500:	e7e6      	b.n	80004d0 <HAL_NVIC_SetPriority+0x28>
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	e000e100 	.word	0xe000e100
 8000508:	e000ed00 	.word	0xe000ed00

0800050c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800050c:	231f      	movs	r3, #31
 800050e:	4018      	ands	r0, r3
 8000510:	3b1e      	subs	r3, #30
 8000512:	4083      	lsls	r3, r0
 8000514:	4a01      	ldr	r2, [pc, #4]	; (800051c <HAL_NVIC_EnableIRQ+0x10>)
 8000516:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000518:	4770      	bx	lr
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	e000e100 	.word	0xe000e100

08000520 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000520:	3801      	subs	r0, #1
 8000522:	4b0a      	ldr	r3, [pc, #40]	; (800054c <HAL_SYSTICK_Config+0x2c>)
 8000524:	4298      	cmp	r0, r3
 8000526:	d80f      	bhi.n	8000548 <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000528:	4a09      	ldr	r2, [pc, #36]	; (8000550 <HAL_SYSTICK_Config+0x30>)
 800052a:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800052c:	4809      	ldr	r0, [pc, #36]	; (8000554 <HAL_SYSTICK_Config+0x34>)
 800052e:	6a03      	ldr	r3, [r0, #32]
 8000530:	021b      	lsls	r3, r3, #8
 8000532:	0a1b      	lsrs	r3, r3, #8
 8000534:	21c0      	movs	r1, #192	; 0xc0
 8000536:	0609      	lsls	r1, r1, #24
 8000538:	430b      	orrs	r3, r1
 800053a:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800053c:	2300      	movs	r3, #0
 800053e:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000540:	3307      	adds	r3, #7
 8000542:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000544:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000546:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000548:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 800054a:	e7fc      	b.n	8000546 <HAL_SYSTICK_Config+0x26>
 800054c:	00ffffff 	.word	0x00ffffff
 8000550:	e000e010 	.word	0xe000e010
 8000554:	e000ed00 	.word	0xe000ed00

08000558 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000558:	b570      	push	{r4, r5, r6, lr}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800055a:	6c06      	ldr	r6, [r0, #64]	; 0x40
 800055c:	251c      	movs	r5, #28
 800055e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8000560:	4025      	ands	r5, r4
 8000562:	2401      	movs	r4, #1
 8000564:	40ac      	lsls	r4, r5
 8000566:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000568:	6804      	ldr	r4, [r0, #0]
 800056a:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800056c:	6883      	ldr	r3, [r0, #8]
 800056e:	2b10      	cmp	r3, #16
 8000570:	d004      	beq.n	800057c <DMA_SetConfig+0x24>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000572:	6803      	ldr	r3, [r0, #0]
 8000574:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000576:	6803      	ldr	r3, [r0, #0]
 8000578:	60da      	str	r2, [r3, #12]
  }
}
 800057a:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 800057c:	6803      	ldr	r3, [r0, #0]
 800057e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000580:	6803      	ldr	r3, [r0, #0]
 8000582:	60d9      	str	r1, [r3, #12]
 8000584:	e7f9      	b.n	800057a <DMA_SetConfig+0x22>
	...

08000588 <HAL_DMA_Init>:
{
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	1e04      	subs	r4, r0, #0
  if(hdma == NULL)
 800058c:	d03d      	beq.n	800060a <HAL_DMA_Init+0x82>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800058e:	6805      	ldr	r5, [r0, #0]
 8000590:	4b1f      	ldr	r3, [pc, #124]	; (8000610 <HAL_DMA_Init+0x88>)
 8000592:	18e8      	adds	r0, r5, r3
 8000594:	2114      	movs	r1, #20
 8000596:	f7ff fdb7 	bl	8000108 <__udivsi3>
 800059a:	0080      	lsls	r0, r0, #2
 800059c:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 800059e:	4b1d      	ldr	r3, [pc, #116]	; (8000614 <HAL_DMA_Init+0x8c>)
 80005a0:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 80005a2:	2202      	movs	r2, #2
 80005a4:	2325      	movs	r3, #37	; 0x25
 80005a6:	54e2      	strb	r2, [r4, r3]
  tmp = hdma->Instance->CCR;
 80005a8:	682b      	ldr	r3, [r5, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80005aa:	4a1b      	ldr	r2, [pc, #108]	; (8000618 <HAL_DMA_Init+0x90>)
 80005ac:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 80005ae:	68a3      	ldr	r3, [r4, #8]
 80005b0:	68e1      	ldr	r1, [r4, #12]
 80005b2:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80005b4:	6921      	ldr	r1, [r4, #16]
 80005b6:	430b      	orrs	r3, r1
 80005b8:	6961      	ldr	r1, [r4, #20]
 80005ba:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80005bc:	69a1      	ldr	r1, [r4, #24]
 80005be:	430b      	orrs	r3, r1
 80005c0:	69e1      	ldr	r1, [r4, #28]
 80005c2:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80005c4:	6a21      	ldr	r1, [r4, #32]
 80005c6:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 80005c8:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 80005ca:	602b      	str	r3, [r5, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80005cc:	2380      	movs	r3, #128	; 0x80
 80005ce:	01db      	lsls	r3, r3, #7
 80005d0:	68a2      	ldr	r2, [r4, #8]
 80005d2:	429a      	cmp	r2, r3
 80005d4:	d010      	beq.n	80005f8 <HAL_DMA_Init+0x70>
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80005d6:	4b11      	ldr	r3, [pc, #68]	; (800061c <HAL_DMA_Init+0x94>)
 80005d8:	6819      	ldr	r1, [r3, #0]
 80005da:	221c      	movs	r2, #28
 80005dc:	6c65      	ldr	r5, [r4, #68]	; 0x44
 80005de:	4015      	ands	r5, r2
 80005e0:	200f      	movs	r0, #15
 80005e2:	40a8      	lsls	r0, r5
 80005e4:	4381      	bics	r1, r0
 80005e6:	6019      	str	r1, [r3, #0]
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80005e8:	6819      	ldr	r1, [r3, #0]
 80005ea:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80005ec:	4002      	ands	r2, r0
 80005ee:	6860      	ldr	r0, [r4, #4]
 80005f0:	4090      	lsls	r0, r2
 80005f2:	0002      	movs	r2, r0
 80005f4:	430a      	orrs	r2, r1
 80005f6:	601a      	str	r2, [r3, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80005f8:	2300      	movs	r3, #0
 80005fa:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 80005fc:	2101      	movs	r1, #1
 80005fe:	2225      	movs	r2, #37	; 0x25
 8000600:	54a1      	strb	r1, [r4, r2]
  hdma->Lock = HAL_UNLOCKED;
 8000602:	3a01      	subs	r2, #1
 8000604:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8000606:	2000      	movs	r0, #0
}
 8000608:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800060a:	2001      	movs	r0, #1
 800060c:	e7fc      	b.n	8000608 <HAL_DMA_Init+0x80>
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	bffdfff8 	.word	0xbffdfff8
 8000614:	40020000 	.word	0x40020000
 8000618:	ffff800f 	.word	0xffff800f
 800061c:	400200a8 	.word	0x400200a8

08000620 <HAL_DMA_Start_IT>:
{
 8000620:	b570      	push	{r4, r5, r6, lr}
 8000622:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8000624:	2024      	movs	r0, #36	; 0x24
 8000626:	5c20      	ldrb	r0, [r4, r0]
 8000628:	2801      	cmp	r0, #1
 800062a:	d032      	beq.n	8000692 <HAL_DMA_Start_IT+0x72>
 800062c:	2501      	movs	r5, #1
 800062e:	2024      	movs	r0, #36	; 0x24
 8000630:	5425      	strb	r5, [r4, r0]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000632:	3001      	adds	r0, #1
 8000634:	5c20      	ldrb	r0, [r4, r0]
 8000636:	2801      	cmp	r0, #1
 8000638:	d004      	beq.n	8000644 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 800063a:	2200      	movs	r2, #0
 800063c:	2324      	movs	r3, #36	; 0x24
 800063e:	54e2      	strb	r2, [r4, r3]
    status = HAL_BUSY;
 8000640:	2002      	movs	r0, #2
}
 8000642:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8000644:	3501      	adds	r5, #1
 8000646:	3024      	adds	r0, #36	; 0x24
 8000648:	5425      	strb	r5, [r4, r0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800064a:	2000      	movs	r0, #0
 800064c:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 800064e:	6825      	ldr	r5, [r4, #0]
 8000650:	6828      	ldr	r0, [r5, #0]
 8000652:	2601      	movs	r6, #1
 8000654:	43b0      	bics	r0, r6
 8000656:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000658:	0020      	movs	r0, r4
 800065a:	f7ff ff7d 	bl	8000558 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 800065e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000660:	2b00      	cmp	r3, #0
 8000662:	d00b      	beq.n	800067c <HAL_DMA_Start_IT+0x5c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000664:	6822      	ldr	r2, [r4, #0]
 8000666:	6813      	ldr	r3, [r2, #0]
 8000668:	210e      	movs	r1, #14
 800066a:	430b      	orrs	r3, r1
 800066c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 800066e:	6822      	ldr	r2, [r4, #0]
 8000670:	6813      	ldr	r3, [r2, #0]
 8000672:	2101      	movs	r1, #1
 8000674:	430b      	orrs	r3, r1
 8000676:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000678:	2000      	movs	r0, #0
 800067a:	e7e2      	b.n	8000642 <HAL_DMA_Start_IT+0x22>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800067c:	6822      	ldr	r2, [r4, #0]
 800067e:	6813      	ldr	r3, [r2, #0]
 8000680:	2104      	movs	r1, #4
 8000682:	438b      	bics	r3, r1
 8000684:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000686:	6822      	ldr	r2, [r4, #0]
 8000688:	6813      	ldr	r3, [r2, #0]
 800068a:	3106      	adds	r1, #6
 800068c:	430b      	orrs	r3, r1
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	e7ed      	b.n	800066e <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 8000692:	2002      	movs	r0, #2
 8000694:	e7d5      	b.n	8000642 <HAL_DMA_Start_IT+0x22>

08000696 <HAL_DMA_Abort_IT>:
{
 8000696:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000698:	2325      	movs	r3, #37	; 0x25
 800069a:	5cc3      	ldrb	r3, [r0, r3]
 800069c:	2b02      	cmp	r3, #2
 800069e:	d003      	beq.n	80006a8 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80006a0:	2304      	movs	r3, #4
 80006a2:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 80006a4:	2001      	movs	r0, #1
}
 80006a6:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80006a8:	6802      	ldr	r2, [r0, #0]
 80006aa:	6813      	ldr	r3, [r2, #0]
 80006ac:	210e      	movs	r1, #14
 80006ae:	438b      	bics	r3, r1
 80006b0:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80006b2:	6801      	ldr	r1, [r0, #0]
 80006b4:	680a      	ldr	r2, [r1, #0]
 80006b6:	2301      	movs	r3, #1
 80006b8:	439a      	bics	r2, r3
 80006ba:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80006bc:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80006be:	221c      	movs	r2, #28
 80006c0:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80006c2:	4022      	ands	r2, r4
 80006c4:	001c      	movs	r4, r3
 80006c6:	4094      	lsls	r4, r2
 80006c8:	604c      	str	r4, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80006ca:	2225      	movs	r2, #37	; 0x25
 80006cc:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 80006ce:	2200      	movs	r2, #0
 80006d0:	3323      	adds	r3, #35	; 0x23
 80006d2:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferAbortCallback != NULL)
 80006d4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d002      	beq.n	80006e0 <HAL_DMA_Abort_IT+0x4a>
      hdma->XferAbortCallback(hdma);
 80006da:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80006dc:	2000      	movs	r0, #0
 80006de:	e7e2      	b.n	80006a6 <HAL_DMA_Abort_IT+0x10>
 80006e0:	2000      	movs	r0, #0
 80006e2:	e7e0      	b.n	80006a6 <HAL_DMA_Abort_IT+0x10>

080006e4 <HAL_DMA_IRQHandler>:
{
 80006e4:	b570      	push	{r4, r5, r6, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80006e6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80006e8:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80006ea:	6804      	ldr	r4, [r0, #0]
 80006ec:	6825      	ldr	r5, [r4, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80006ee:	231c      	movs	r3, #28
 80006f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80006f2:	4013      	ands	r3, r2
 80006f4:	2204      	movs	r2, #4
 80006f6:	409a      	lsls	r2, r3
 80006f8:	420a      	tst	r2, r1
 80006fa:	d014      	beq.n	8000726 <HAL_DMA_IRQHandler+0x42>
 80006fc:	076a      	lsls	r2, r5, #29
 80006fe:	d512      	bpl.n	8000726 <HAL_DMA_IRQHandler+0x42>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000700:	6823      	ldr	r3, [r4, #0]
 8000702:	069b      	lsls	r3, r3, #26
 8000704:	d403      	bmi.n	800070e <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000706:	6823      	ldr	r3, [r4, #0]
 8000708:	2204      	movs	r2, #4
 800070a:	4393      	bics	r3, r2
 800070c:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800070e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8000710:	221c      	movs	r2, #28
 8000712:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000714:	401a      	ands	r2, r3
 8000716:	2304      	movs	r3, #4
 8000718:	4093      	lsls	r3, r2
 800071a:	604b      	str	r3, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 800071c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800071e:	2b00      	cmp	r3, #0
 8000720:	d000      	beq.n	8000724 <HAL_DMA_IRQHandler+0x40>
        hdma->XferHalfCpltCallback(hdma);
 8000722:	4798      	blx	r3
}
 8000724:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8000726:	2202      	movs	r2, #2
 8000728:	409a      	lsls	r2, r3
 800072a:	420a      	tst	r2, r1
 800072c:	d01a      	beq.n	8000764 <HAL_DMA_IRQHandler+0x80>
 800072e:	07aa      	lsls	r2, r5, #30
 8000730:	d518      	bpl.n	8000764 <HAL_DMA_IRQHandler+0x80>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000732:	6823      	ldr	r3, [r4, #0]
 8000734:	069b      	lsls	r3, r3, #26
 8000736:	d406      	bmi.n	8000746 <HAL_DMA_IRQHandler+0x62>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000738:	6823      	ldr	r3, [r4, #0]
 800073a:	220a      	movs	r2, #10
 800073c:	4393      	bics	r3, r2
 800073e:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000740:	3a09      	subs	r2, #9
 8000742:	2325      	movs	r3, #37	; 0x25
 8000744:	54c2      	strb	r2, [r0, r3]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8000746:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8000748:	221c      	movs	r2, #28
 800074a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800074c:	401a      	ands	r2, r3
 800074e:	2302      	movs	r3, #2
 8000750:	4093      	lsls	r3, r2
 8000752:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8000754:	2200      	movs	r2, #0
 8000756:	2324      	movs	r3, #36	; 0x24
 8000758:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferCpltCallback != NULL)
 800075a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800075c:	2b00      	cmp	r3, #0
 800075e:	d0e1      	beq.n	8000724 <HAL_DMA_IRQHandler+0x40>
      hdma->XferCpltCallback(hdma);
 8000760:	4798      	blx	r3
 8000762:	e7df      	b.n	8000724 <HAL_DMA_IRQHandler+0x40>
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8000764:	2208      	movs	r2, #8
 8000766:	409a      	lsls	r2, r3
 8000768:	420a      	tst	r2, r1
 800076a:	d0db      	beq.n	8000724 <HAL_DMA_IRQHandler+0x40>
 800076c:	072b      	lsls	r3, r5, #28
 800076e:	d5d9      	bpl.n	8000724 <HAL_DMA_IRQHandler+0x40>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000770:	6823      	ldr	r3, [r4, #0]
 8000772:	220e      	movs	r2, #14
 8000774:	4393      	bics	r3, r2
 8000776:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000778:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800077a:	320e      	adds	r2, #14
 800077c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800077e:	401a      	ands	r2, r3
 8000780:	2301      	movs	r3, #1
 8000782:	001c      	movs	r4, r3
 8000784:	4094      	lsls	r4, r2
 8000786:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000788:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800078a:	2225      	movs	r2, #37	; 0x25
 800078c:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 800078e:	2200      	movs	r2, #0
 8000790:	3323      	adds	r3, #35	; 0x23
 8000792:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 8000794:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000796:	2b00      	cmp	r3, #0
 8000798:	d0c4      	beq.n	8000724 <HAL_DMA_IRQHandler+0x40>
      hdma->XferErrorCallback(hdma);
 800079a:	4798      	blx	r3
  return;
 800079c:	e7c2      	b.n	8000724 <HAL_DMA_IRQHandler+0x40>
	...

080007a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007a2:	46c6      	mov	lr, r8
 80007a4:	b500      	push	{lr}
  uint32_t position = 0x00U;
 80007a6:	2300      	movs	r3, #0
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80007a8:	e091      	b.n	80008ce <HAL_GPIO_Init+0x12e>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 80007aa:	08df      	lsrs	r7, r3, #3
 80007ac:	3708      	adds	r7, #8
 80007ae:	00bf      	lsls	r7, r7, #2
 80007b0:	583e      	ldr	r6, [r7, r0]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80007b2:	2507      	movs	r5, #7
 80007b4:	401d      	ands	r5, r3
 80007b6:	00ad      	lsls	r5, r5, #2
 80007b8:	220f      	movs	r2, #15
 80007ba:	40aa      	lsls	r2, r5
 80007bc:	4396      	bics	r6, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 80007be:	690a      	ldr	r2, [r1, #16]
 80007c0:	40aa      	lsls	r2, r5
 80007c2:	0015      	movs	r5, r2
 80007c4:	4335      	orrs	r5, r6
        GPIOx->AFR[position >> 3U] = temp;
 80007c6:	503d      	str	r5, [r7, r0]
 80007c8:	e091      	b.n	80008ee <HAL_GPIO_Init+0x14e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80007ca:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80007cc:	005f      	lsls	r7, r3, #1
 80007ce:	2603      	movs	r6, #3
 80007d0:	40be      	lsls	r6, r7
 80007d2:	43b5      	bics	r5, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007d4:	68ce      	ldr	r6, [r1, #12]
 80007d6:	40be      	lsls	r6, r7
 80007d8:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 80007da:	6085      	str	r5, [r0, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 80007dc:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007de:	43a5      	bics	r5, r4
 80007e0:	002c      	movs	r4, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80007e2:	684a      	ldr	r2, [r1, #4]
 80007e4:	0916      	lsrs	r6, r2, #4
 80007e6:	2501      	movs	r5, #1
 80007e8:	4035      	ands	r5, r6
 80007ea:	409d      	lsls	r5, r3
 80007ec:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 80007ee:	6044      	str	r4, [r0, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80007f0:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80007f2:	005e      	lsls	r6, r3, #1
 80007f4:	2403      	movs	r4, #3
 80007f6:	0027      	movs	r7, r4
 80007f8:	40b7      	lsls	r7, r6
 80007fa:	43ff      	mvns	r7, r7
 80007fc:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007fe:	684a      	ldr	r2, [r1, #4]
 8000800:	4014      	ands	r4, r2
 8000802:	40b4      	lsls	r4, r6
 8000804:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 8000806:	6004      	str	r4, [r0, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000808:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800080a:	403c      	ands	r4, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 800080c:	688d      	ldr	r5, [r1, #8]
 800080e:	40b5      	lsls	r5, r6
 8000810:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8000812:	60c4      	str	r4, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000814:	684a      	ldr	r2, [r1, #4]
 8000816:	00d2      	lsls	r2, r2, #3
 8000818:	d558      	bpl.n	80008cc <HAL_GPIO_Init+0x12c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081a:	4d42      	ldr	r5, [pc, #264]	; (8000924 <HAL_GPIO_Init+0x184>)
 800081c:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 800081e:	2601      	movs	r6, #1
 8000820:	4334      	orrs	r4, r6
 8000822:	636c      	str	r4, [r5, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8000824:	089c      	lsrs	r4, r3, #2
 8000826:	1ca5      	adds	r5, r4, #2
 8000828:	00ad      	lsls	r5, r5, #2
 800082a:	4e3f      	ldr	r6, [pc, #252]	; (8000928 <HAL_GPIO_Init+0x188>)
 800082c:	59ae      	ldr	r6, [r5, r6]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800082e:	2703      	movs	r7, #3
 8000830:	401f      	ands	r7, r3
 8000832:	00bd      	lsls	r5, r7, #2
 8000834:	270f      	movs	r7, #15
 8000836:	40af      	lsls	r7, r5
 8000838:	43be      	bics	r6, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800083a:	27a0      	movs	r7, #160	; 0xa0
 800083c:	05ff      	lsls	r7, r7, #23
 800083e:	42b8      	cmp	r0, r7
 8000840:	d063      	beq.n	800090a <HAL_GPIO_Init+0x16a>
 8000842:	4f3a      	ldr	r7, [pc, #232]	; (800092c <HAL_GPIO_Init+0x18c>)
 8000844:	42b8      	cmp	r0, r7
 8000846:	d062      	beq.n	800090e <HAL_GPIO_Init+0x16e>
 8000848:	4f39      	ldr	r7, [pc, #228]	; (8000930 <HAL_GPIO_Init+0x190>)
 800084a:	42b8      	cmp	r0, r7
 800084c:	d061      	beq.n	8000912 <HAL_GPIO_Init+0x172>
 800084e:	4f39      	ldr	r7, [pc, #228]	; (8000934 <HAL_GPIO_Init+0x194>)
 8000850:	42b8      	cmp	r0, r7
 8000852:	d060      	beq.n	8000916 <HAL_GPIO_Init+0x176>
 8000854:	4f38      	ldr	r7, [pc, #224]	; (8000938 <HAL_GPIO_Init+0x198>)
 8000856:	42b8      	cmp	r0, r7
 8000858:	d05f      	beq.n	800091a <HAL_GPIO_Init+0x17a>
 800085a:	4f38      	ldr	r7, [pc, #224]	; (800093c <HAL_GPIO_Init+0x19c>)
 800085c:	42b8      	cmp	r0, r7
 800085e:	d052      	beq.n	8000906 <HAL_GPIO_Init+0x166>
 8000860:	2706      	movs	r7, #6
 8000862:	40af      	lsls	r7, r5
 8000864:	003d      	movs	r5, r7
 8000866:	4335      	orrs	r5, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000868:	3402      	adds	r4, #2
 800086a:	00a4      	lsls	r4, r4, #2
 800086c:	4e2e      	ldr	r6, [pc, #184]	; (8000928 <HAL_GPIO_Init+0x188>)
 800086e:	51a5      	str	r5, [r4, r6]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000870:	4c33      	ldr	r4, [pc, #204]	; (8000940 <HAL_GPIO_Init+0x1a0>)
 8000872:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000874:	4642      	mov	r2, r8
 8000876:	43d4      	mvns	r4, r2
 8000878:	0026      	movs	r6, r4
 800087a:	402e      	ands	r6, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800087c:	684a      	ldr	r2, [r1, #4]
 800087e:	03d2      	lsls	r2, r2, #15
 8000880:	d502      	bpl.n	8000888 <HAL_GPIO_Init+0xe8>
        {
          temp |= iocurrent;
 8000882:	4642      	mov	r2, r8
 8000884:	4315      	orrs	r5, r2
 8000886:	002e      	movs	r6, r5
        }
        EXTI->IMR = temp;
 8000888:	4d2d      	ldr	r5, [pc, #180]	; (8000940 <HAL_GPIO_Init+0x1a0>)
 800088a:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 800088c:	686d      	ldr	r5, [r5, #4]
        temp &= ~((uint32_t)iocurrent);
 800088e:	002e      	movs	r6, r5
 8000890:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000892:	684a      	ldr	r2, [r1, #4]
 8000894:	0392      	lsls	r2, r2, #14
 8000896:	d502      	bpl.n	800089e <HAL_GPIO_Init+0xfe>
        {
          temp |= iocurrent;
 8000898:	4642      	mov	r2, r8
 800089a:	4315      	orrs	r5, r2
 800089c:	002e      	movs	r6, r5
        }
        EXTI->EMR = temp;
 800089e:	4d28      	ldr	r5, [pc, #160]	; (8000940 <HAL_GPIO_Init+0x1a0>)
 80008a0:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80008a2:	68ad      	ldr	r5, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
 80008a4:	002e      	movs	r6, r5
 80008a6:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008a8:	684a      	ldr	r2, [r1, #4]
 80008aa:	02d2      	lsls	r2, r2, #11
 80008ac:	d502      	bpl.n	80008b4 <HAL_GPIO_Init+0x114>
        {
          temp |= iocurrent;
 80008ae:	4642      	mov	r2, r8
 80008b0:	4315      	orrs	r5, r2
 80008b2:	002e      	movs	r6, r5
        }
        EXTI->RTSR = temp;
 80008b4:	4d22      	ldr	r5, [pc, #136]	; (8000940 <HAL_GPIO_Init+0x1a0>)
 80008b6:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 80008b8:	68ed      	ldr	r5, [r5, #12]
        temp &= ~((uint32_t)iocurrent);
 80008ba:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008bc:	684a      	ldr	r2, [r1, #4]
 80008be:	0292      	lsls	r2, r2, #10
 80008c0:	d502      	bpl.n	80008c8 <HAL_GPIO_Init+0x128>
        {
          temp |= iocurrent;
 80008c2:	4642      	mov	r2, r8
 80008c4:	432a      	orrs	r2, r5
 80008c6:	0014      	movs	r4, r2
        }
        EXTI->FTSR = temp;
 80008c8:	4a1d      	ldr	r2, [pc, #116]	; (8000940 <HAL_GPIO_Init+0x1a0>)
 80008ca:	60d4      	str	r4, [r2, #12]
      }
    }
    position++;
 80008cc:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0)
 80008ce:	680a      	ldr	r2, [r1, #0]
 80008d0:	0014      	movs	r4, r2
 80008d2:	40dc      	lsrs	r4, r3
 80008d4:	d023      	beq.n	800091e <HAL_GPIO_Init+0x17e>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80008d6:	2401      	movs	r4, #1
 80008d8:	409c      	lsls	r4, r3
 80008da:	4022      	ands	r2, r4
 80008dc:	4690      	mov	r8, r2
    if(iocurrent)
 80008de:	d0f5      	beq.n	80008cc <HAL_GPIO_Init+0x12c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80008e0:	684d      	ldr	r5, [r1, #4]
 80008e2:	2d02      	cmp	r5, #2
 80008e4:	d100      	bne.n	80008e8 <HAL_GPIO_Init+0x148>
 80008e6:	e760      	b.n	80007aa <HAL_GPIO_Init+0xa>
 80008e8:	2d12      	cmp	r5, #18
 80008ea:	d100      	bne.n	80008ee <HAL_GPIO_Init+0x14e>
 80008ec:	e75d      	b.n	80007aa <HAL_GPIO_Init+0xa>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008ee:	684d      	ldr	r5, [r1, #4]
 80008f0:	1e6e      	subs	r6, r5, #1
 80008f2:	2e01      	cmp	r6, #1
 80008f4:	d800      	bhi.n	80008f8 <HAL_GPIO_Init+0x158>
 80008f6:	e768      	b.n	80007ca <HAL_GPIO_Init+0x2a>
 80008f8:	2d11      	cmp	r5, #17
 80008fa:	d100      	bne.n	80008fe <HAL_GPIO_Init+0x15e>
 80008fc:	e765      	b.n	80007ca <HAL_GPIO_Init+0x2a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008fe:	2d12      	cmp	r5, #18
 8000900:	d000      	beq.n	8000904 <HAL_GPIO_Init+0x164>
 8000902:	e775      	b.n	80007f0 <HAL_GPIO_Init+0x50>
 8000904:	e761      	b.n	80007ca <HAL_GPIO_Init+0x2a>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000906:	2705      	movs	r7, #5
 8000908:	e7ab      	b.n	8000862 <HAL_GPIO_Init+0xc2>
 800090a:	2700      	movs	r7, #0
 800090c:	e7a9      	b.n	8000862 <HAL_GPIO_Init+0xc2>
 800090e:	2701      	movs	r7, #1
 8000910:	e7a7      	b.n	8000862 <HAL_GPIO_Init+0xc2>
 8000912:	2702      	movs	r7, #2
 8000914:	e7a5      	b.n	8000862 <HAL_GPIO_Init+0xc2>
 8000916:	2703      	movs	r7, #3
 8000918:	e7a3      	b.n	8000862 <HAL_GPIO_Init+0xc2>
 800091a:	2704      	movs	r7, #4
 800091c:	e7a1      	b.n	8000862 <HAL_GPIO_Init+0xc2>
  }
}
 800091e:	bc04      	pop	{r2}
 8000920:	4690      	mov	r8, r2
 8000922:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000924:	40021000 	.word	0x40021000
 8000928:	40010000 	.word	0x40010000
 800092c:	50000400 	.word	0x50000400
 8000930:	50000800 	.word	0x50000800
 8000934:	50000c00 	.word	0x50000c00
 8000938:	50001000 	.word	0x50001000
 800093c:	50001c00 	.word	0x50001c00
 8000940:	40010400 	.word	0x40010400

08000944 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8000944:	2a00      	cmp	r2, #0
 8000946:	d101      	bne.n	800094c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
 8000948:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 800094a:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 800094c:	6181      	str	r1, [r0, #24]
 800094e:	e7fc      	b.n	800094a <HAL_GPIO_WritePin+0x6>

08000950 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000950:	6943      	ldr	r3, [r0, #20]
 8000952:	4059      	eors	r1, r3
 8000954:	6141      	str	r1, [r0, #20]
}
 8000956:	4770      	bx	lr

08000958 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8000958:	4770      	bx	lr
	...

0800095c <HAL_GPIO_EXTI_IRQHandler>:
{
 800095c:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 800095e:	4b05      	ldr	r3, [pc, #20]	; (8000974 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000960:	695b      	ldr	r3, [r3, #20]
 8000962:	4218      	tst	r0, r3
 8000964:	d100      	bne.n	8000968 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 8000966:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000968:	4b02      	ldr	r3, [pc, #8]	; (8000974 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800096a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800096c:	f7ff fff4 	bl	8000958 <HAL_GPIO_EXTI_Callback>
}
 8000970:	e7f9      	b.n	8000966 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	40010400 	.word	0x40010400

08000978 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000978:	b510      	push	{r4, lr}
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800097a:	4b1f      	ldr	r3, [pc, #124]	; (80009f8 <HAL_RCC_GetSysClockFreq+0x80>)
 800097c:	68d9      	ldr	r1, [r3, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800097e:	230c      	movs	r3, #12
 8000980:	400b      	ands	r3, r1
 8000982:	2b08      	cmp	r3, #8
 8000984:	d033      	beq.n	80009ee <HAL_RCC_GetSysClockFreq+0x76>
 8000986:	2b0c      	cmp	r3, #12
 8000988:	d011      	beq.n	80009ae <HAL_RCC_GetSysClockFreq+0x36>
 800098a:	2b04      	cmp	r3, #4
 800098c:	d009      	beq.n	80009a2 <HAL_RCC_GetSysClockFreq+0x2a>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800098e:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <HAL_RCC_GetSysClockFreq+0x80>)
 8000990:	685a      	ldr	r2, [r3, #4]
 8000992:	0b52      	lsrs	r2, r2, #13
 8000994:	2307      	movs	r3, #7
 8000996:	4013      	ands	r3, r2
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000998:	3301      	adds	r3, #1
 800099a:	2080      	movs	r0, #128	; 0x80
 800099c:	0200      	lsls	r0, r0, #8
 800099e:	4098      	lsls	r0, r3
      break;
    }
  }
  return sysclockfreq;
}
 80009a0:	bd10      	pop	{r4, pc}
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80009a2:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <HAL_RCC_GetSysClockFreq+0x80>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	06db      	lsls	r3, r3, #27
 80009a8:	d523      	bpl.n	80009f2 <HAL_RCC_GetSysClockFreq+0x7a>
        sysclockfreq =  (HSI_VALUE >> 2);
 80009aa:	4814      	ldr	r0, [pc, #80]	; (80009fc <HAL_RCC_GetSysClockFreq+0x84>)
 80009ac:	e7f8      	b.n	80009a0 <HAL_RCC_GetSysClockFreq+0x28>
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80009ae:	0c8a      	lsrs	r2, r1, #18
 80009b0:	230f      	movs	r3, #15
 80009b2:	4013      	ands	r3, r2
 80009b4:	4a12      	ldr	r2, [pc, #72]	; (8000a00 <HAL_RCC_GetSysClockFreq+0x88>)
 80009b6:	5cd0      	ldrb	r0, [r2, r3]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80009b8:	0d89      	lsrs	r1, r1, #22
 80009ba:	2303      	movs	r3, #3
 80009bc:	4019      	ands	r1, r3
 80009be:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80009c0:	4b0d      	ldr	r3, [pc, #52]	; (80009f8 <HAL_RCC_GetSysClockFreq+0x80>)
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	03db      	lsls	r3, r3, #15
 80009c6:	d408      	bmi.n	80009da <HAL_RCC_GetSysClockFreq+0x62>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80009c8:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <HAL_RCC_GetSysClockFreq+0x80>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	06db      	lsls	r3, r3, #27
 80009ce:	d509      	bpl.n	80009e4 <HAL_RCC_GetSysClockFreq+0x6c>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80009d0:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <HAL_RCC_GetSysClockFreq+0x84>)
 80009d2:	4358      	muls	r0, r3
 80009d4:	f7ff fb98 	bl	8000108 <__udivsi3>
 80009d8:	e7e2      	b.n	80009a0 <HAL_RCC_GetSysClockFreq+0x28>
        pllvco = (HSE_VALUE * pllm) / plld;
 80009da:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <HAL_RCC_GetSysClockFreq+0x8c>)
 80009dc:	4358      	muls	r0, r3
 80009de:	f7ff fb93 	bl	8000108 <__udivsi3>
 80009e2:	e7dd      	b.n	80009a0 <HAL_RCC_GetSysClockFreq+0x28>
         pllvco = (HSI_VALUE * pllm) / plld;
 80009e4:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <HAL_RCC_GetSysClockFreq+0x90>)
 80009e6:	4358      	muls	r0, r3
 80009e8:	f7ff fb8e 	bl	8000108 <__udivsi3>
 80009ec:	e7d8      	b.n	80009a0 <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 80009ee:	4805      	ldr	r0, [pc, #20]	; (8000a04 <HAL_RCC_GetSysClockFreq+0x8c>)
 80009f0:	e7d6      	b.n	80009a0 <HAL_RCC_GetSysClockFreq+0x28>
        sysclockfreq =  HSI_VALUE;
 80009f2:	4805      	ldr	r0, [pc, #20]	; (8000a08 <HAL_RCC_GetSysClockFreq+0x90>)
  return sysclockfreq;
 80009f4:	e7d4      	b.n	80009a0 <HAL_RCC_GetSysClockFreq+0x28>
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	40021000 	.word	0x40021000
 80009fc:	003d0900 	.word	0x003d0900
 8000a00:	080032c0 	.word	0x080032c0
 8000a04:	007a1200 	.word	0x007a1200
 8000a08:	00f42400 	.word	0x00f42400

08000a0c <HAL_RCC_OscConfig>:
{
 8000a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	1e04      	subs	r4, r0, #0
  if(RCC_OscInitStruct == NULL)
 8000a12:	d100      	bne.n	8000a16 <HAL_RCC_OscConfig+0xa>
 8000a14:	e29c      	b.n	8000f50 <HAL_RCC_OscConfig+0x544>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000a16:	4bb2      	ldr	r3, [pc, #712]	; (8000ce0 <HAL_RCC_OscConfig+0x2d4>)
 8000a18:	68da      	ldr	r2, [r3, #12]
 8000a1a:	250c      	movs	r5, #12
 8000a1c:	4015      	ands	r5, r2
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000a1e:	68de      	ldr	r6, [r3, #12]
 8000a20:	2380      	movs	r3, #128	; 0x80
 8000a22:	025b      	lsls	r3, r3, #9
 8000a24:	401e      	ands	r6, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a26:	6803      	ldr	r3, [r0, #0]
 8000a28:	07db      	lsls	r3, r3, #31
 8000a2a:	d536      	bpl.n	8000a9a <HAL_RCC_OscConfig+0x8e>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a2c:	2d08      	cmp	r5, #8
 8000a2e:	d02c      	beq.n	8000a8a <HAL_RCC_OscConfig+0x7e>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000a30:	2d0c      	cmp	r5, #12
 8000a32:	d028      	beq.n	8000a86 <HAL_RCC_OscConfig+0x7a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a34:	6863      	ldr	r3, [r4, #4]
 8000a36:	2280      	movs	r2, #128	; 0x80
 8000a38:	0252      	lsls	r2, r2, #9
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d055      	beq.n	8000aea <HAL_RCC_OscConfig+0xde>
 8000a3e:	22a0      	movs	r2, #160	; 0xa0
 8000a40:	02d2      	lsls	r2, r2, #11
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d058      	beq.n	8000af8 <HAL_RCC_OscConfig+0xec>
 8000a46:	4ba6      	ldr	r3, [pc, #664]	; (8000ce0 <HAL_RCC_OscConfig+0x2d4>)
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	49a6      	ldr	r1, [pc, #664]	; (8000ce4 <HAL_RCC_OscConfig+0x2d8>)
 8000a4c:	400a      	ands	r2, r1
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	2180      	movs	r1, #128	; 0x80
 8000a54:	0249      	lsls	r1, r1, #9
 8000a56:	400a      	ands	r2, r1
 8000a58:	9201      	str	r2, [sp, #4]
 8000a5a:	9a01      	ldr	r2, [sp, #4]
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	49a2      	ldr	r1, [pc, #648]	; (8000ce8 <HAL_RCC_OscConfig+0x2dc>)
 8000a60:	400a      	ands	r2, r1
 8000a62:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a64:	6863      	ldr	r3, [r4, #4]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d052      	beq.n	8000b10 <HAL_RCC_OscConfig+0x104>
        tickstart = HAL_GetTick();
 8000a6a:	f7ff fd17 	bl	800049c <HAL_GetTick>
 8000a6e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000a70:	4b9b      	ldr	r3, [pc, #620]	; (8000ce0 <HAL_RCC_OscConfig+0x2d4>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	039b      	lsls	r3, r3, #14
 8000a76:	d410      	bmi.n	8000a9a <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a78:	f7ff fd10 	bl	800049c <HAL_GetTick>
 8000a7c:	1bc0      	subs	r0, r0, r7
 8000a7e:	2864      	cmp	r0, #100	; 0x64
 8000a80:	d9f6      	bls.n	8000a70 <HAL_RCC_OscConfig+0x64>
            return HAL_TIMEOUT;
 8000a82:	2003      	movs	r0, #3
 8000a84:	e265      	b.n	8000f52 <HAL_RCC_OscConfig+0x546>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000a86:	2e00      	cmp	r6, #0
 8000a88:	d0d4      	beq.n	8000a34 <HAL_RCC_OscConfig+0x28>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a8a:	4b95      	ldr	r3, [pc, #596]	; (8000ce0 <HAL_RCC_OscConfig+0x2d4>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	039b      	lsls	r3, r3, #14
 8000a90:	d503      	bpl.n	8000a9a <HAL_RCC_OscConfig+0x8e>
 8000a92:	6863      	ldr	r3, [r4, #4]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d100      	bne.n	8000a9a <HAL_RCC_OscConfig+0x8e>
 8000a98:	e25d      	b.n	8000f56 <HAL_RCC_OscConfig+0x54a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a9a:	6823      	ldr	r3, [r4, #0]
 8000a9c:	079b      	lsls	r3, r3, #30
 8000a9e:	d56c      	bpl.n	8000b7a <HAL_RCC_OscConfig+0x16e>
    hsi_state = RCC_OscInitStruct->HSIState;
 8000aa0:	68e3      	ldr	r3, [r4, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8000aa2:	069a      	lsls	r2, r3, #26
 8000aa4:	d505      	bpl.n	8000ab2 <HAL_RCC_OscConfig+0xa6>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8000aa6:	488e      	ldr	r0, [pc, #568]	; (8000ce0 <HAL_RCC_OscConfig+0x2d4>)
 8000aa8:	6802      	ldr	r2, [r0, #0]
 8000aaa:	2120      	movs	r1, #32
 8000aac:	430a      	orrs	r2, r1
 8000aae:	6002      	str	r2, [r0, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8000ab0:	438b      	bics	r3, r1
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ab2:	2d04      	cmp	r5, #4
 8000ab4:	d03c      	beq.n	8000b30 <HAL_RCC_OscConfig+0x124>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000ab6:	2d0c      	cmp	r5, #12
 8000ab8:	d038      	beq.n	8000b2c <HAL_RCC_OscConfig+0x120>
      if(hsi_state != RCC_HSI_OFF)
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d100      	bne.n	8000ac0 <HAL_RCC_OscConfig+0xb4>
 8000abe:	e0b0      	b.n	8000c22 <HAL_RCC_OscConfig+0x216>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000ac0:	4987      	ldr	r1, [pc, #540]	; (8000ce0 <HAL_RCC_OscConfig+0x2d4>)
 8000ac2:	680a      	ldr	r2, [r1, #0]
 8000ac4:	2009      	movs	r0, #9
 8000ac6:	4382      	bics	r2, r0
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8000acc:	f7ff fce6 	bl	800049c <HAL_GetTick>
 8000ad0:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000ad2:	4b83      	ldr	r3, [pc, #524]	; (8000ce0 <HAL_RCC_OscConfig+0x2d4>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	075b      	lsls	r3, r3, #29
 8000ad8:	d500      	bpl.n	8000adc <HAL_RCC_OscConfig+0xd0>
 8000ada:	e099      	b.n	8000c10 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000adc:	f7ff fcde 	bl	800049c <HAL_GetTick>
 8000ae0:	1b80      	subs	r0, r0, r6
 8000ae2:	2802      	cmp	r0, #2
 8000ae4:	d9f5      	bls.n	8000ad2 <HAL_RCC_OscConfig+0xc6>
            return HAL_TIMEOUT;
 8000ae6:	2003      	movs	r0, #3
 8000ae8:	e233      	b.n	8000f52 <HAL_RCC_OscConfig+0x546>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000aea:	4a7d      	ldr	r2, [pc, #500]	; (8000ce0 <HAL_RCC_OscConfig+0x2d4>)
 8000aec:	6811      	ldr	r1, [r2, #0]
 8000aee:	2380      	movs	r3, #128	; 0x80
 8000af0:	025b      	lsls	r3, r3, #9
 8000af2:	430b      	orrs	r3, r1
 8000af4:	6013      	str	r3, [r2, #0]
 8000af6:	e7b5      	b.n	8000a64 <HAL_RCC_OscConfig+0x58>
 8000af8:	4b79      	ldr	r3, [pc, #484]	; (8000ce0 <HAL_RCC_OscConfig+0x2d4>)
 8000afa:	6819      	ldr	r1, [r3, #0]
 8000afc:	2280      	movs	r2, #128	; 0x80
 8000afe:	02d2      	lsls	r2, r2, #11
 8000b00:	430a      	orrs	r2, r1
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	6819      	ldr	r1, [r3, #0]
 8000b06:	2280      	movs	r2, #128	; 0x80
 8000b08:	0252      	lsls	r2, r2, #9
 8000b0a:	430a      	orrs	r2, r1
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	e7a9      	b.n	8000a64 <HAL_RCC_OscConfig+0x58>
        tickstart = HAL_GetTick();
 8000b10:	f7ff fcc4 	bl	800049c <HAL_GetTick>
 8000b14:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000b16:	4b72      	ldr	r3, [pc, #456]	; (8000ce0 <HAL_RCC_OscConfig+0x2d4>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	039b      	lsls	r3, r3, #14
 8000b1c:	d5bd      	bpl.n	8000a9a <HAL_RCC_OscConfig+0x8e>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b1e:	f7ff fcbd 	bl	800049c <HAL_GetTick>
 8000b22:	1bc0      	subs	r0, r0, r7
 8000b24:	2864      	cmp	r0, #100	; 0x64
 8000b26:	d9f6      	bls.n	8000b16 <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 8000b28:	2003      	movs	r0, #3
 8000b2a:	e212      	b.n	8000f52 <HAL_RCC_OscConfig+0x546>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000b2c:	2e00      	cmp	r6, #0
 8000b2e:	d1c4      	bne.n	8000aba <HAL_RCC_OscConfig+0xae>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000b30:	4a6b      	ldr	r2, [pc, #428]	; (8000ce0 <HAL_RCC_OscConfig+0x2d4>)
 8000b32:	6812      	ldr	r2, [r2, #0]
 8000b34:	0752      	lsls	r2, r2, #29
 8000b36:	d502      	bpl.n	8000b3e <HAL_RCC_OscConfig+0x132>
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d100      	bne.n	8000b3e <HAL_RCC_OscConfig+0x132>
 8000b3c:	e20d      	b.n	8000f5a <HAL_RCC_OscConfig+0x54e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b3e:	4e68      	ldr	r6, [pc, #416]	; (8000ce0 <HAL_RCC_OscConfig+0x2d4>)
 8000b40:	6872      	ldr	r2, [r6, #4]
 8000b42:	496a      	ldr	r1, [pc, #424]	; (8000cec <HAL_RCC_OscConfig+0x2e0>)
 8000b44:	400a      	ands	r2, r1
 8000b46:	6921      	ldr	r1, [r4, #16]
 8000b48:	0209      	lsls	r1, r1, #8
 8000b4a:	430a      	orrs	r2, r1
 8000b4c:	6072      	str	r2, [r6, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000b4e:	6832      	ldr	r2, [r6, #0]
 8000b50:	2109      	movs	r1, #9
 8000b52:	438a      	bics	r2, r1
 8000b54:	4313      	orrs	r3, r2
 8000b56:	6033      	str	r3, [r6, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000b58:	f7ff ff0e 	bl	8000978 <HAL_RCC_GetSysClockFreq>
 8000b5c:	68f2      	ldr	r2, [r6, #12]
 8000b5e:	0912      	lsrs	r2, r2, #4
 8000b60:	230f      	movs	r3, #15
 8000b62:	4013      	ands	r3, r2
 8000b64:	4a62      	ldr	r2, [pc, #392]	; (8000cf0 <HAL_RCC_OscConfig+0x2e4>)
 8000b66:	5cd3      	ldrb	r3, [r2, r3]
 8000b68:	40d8      	lsrs	r0, r3
 8000b6a:	4b62      	ldr	r3, [pc, #392]	; (8000cf4 <HAL_RCC_OscConfig+0x2e8>)
 8000b6c:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8000b6e:	2000      	movs	r0, #0
 8000b70:	f7ff fc60 	bl	8000434 <HAL_InitTick>
      if(status != HAL_OK)
 8000b74:	2800      	cmp	r0, #0
 8000b76:	d000      	beq.n	8000b7a <HAL_RCC_OscConfig+0x16e>
 8000b78:	e1eb      	b.n	8000f52 <HAL_RCC_OscConfig+0x546>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000b7a:	6823      	ldr	r3, [r4, #0]
 8000b7c:	06db      	lsls	r3, r3, #27
 8000b7e:	d52c      	bpl.n	8000bda <HAL_RCC_OscConfig+0x1ce>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8000b80:	2d00      	cmp	r5, #0
 8000b82:	d161      	bne.n	8000c48 <HAL_RCC_OscConfig+0x23c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000b84:	4b56      	ldr	r3, [pc, #344]	; (8000ce0 <HAL_RCC_OscConfig+0x2d4>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	059b      	lsls	r3, r3, #22
 8000b8a:	d503      	bpl.n	8000b94 <HAL_RCC_OscConfig+0x188>
 8000b8c:	69e3      	ldr	r3, [r4, #28]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d100      	bne.n	8000b94 <HAL_RCC_OscConfig+0x188>
 8000b92:	e1e4      	b.n	8000f5e <HAL_RCC_OscConfig+0x552>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000b94:	4a52      	ldr	r2, [pc, #328]	; (8000ce0 <HAL_RCC_OscConfig+0x2d4>)
 8000b96:	6853      	ldr	r3, [r2, #4]
 8000b98:	4957      	ldr	r1, [pc, #348]	; (8000cf8 <HAL_RCC_OscConfig+0x2ec>)
 8000b9a:	400b      	ands	r3, r1
 8000b9c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000b9e:	430b      	orrs	r3, r1
 8000ba0:	6053      	str	r3, [r2, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ba2:	6853      	ldr	r3, [r2, #4]
 8000ba4:	021b      	lsls	r3, r3, #8
 8000ba6:	0a1b      	lsrs	r3, r3, #8
 8000ba8:	6a21      	ldr	r1, [r4, #32]
 8000baa:	0609      	lsls	r1, r1, #24
 8000bac:	430b      	orrs	r3, r1
 8000bae:	6053      	str	r3, [r2, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000bb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000bb2:	0b59      	lsrs	r1, r3, #13
 8000bb4:	3101      	adds	r1, #1
 8000bb6:	2380      	movs	r3, #128	; 0x80
 8000bb8:	021b      	lsls	r3, r3, #8
 8000bba:	408b      	lsls	r3, r1
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000bbc:	68d1      	ldr	r1, [r2, #12]
 8000bbe:	0909      	lsrs	r1, r1, #4
 8000bc0:	220f      	movs	r2, #15
 8000bc2:	400a      	ands	r2, r1
 8000bc4:	494a      	ldr	r1, [pc, #296]	; (8000cf0 <HAL_RCC_OscConfig+0x2e4>)
 8000bc6:	5c8a      	ldrb	r2, [r1, r2]
 8000bc8:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000bca:	4a4a      	ldr	r2, [pc, #296]	; (8000cf4 <HAL_RCC_OscConfig+0x2e8>)
 8000bcc:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f7ff fc30 	bl	8000434 <HAL_InitTick>
        if(status != HAL_OK)
 8000bd4:	2800      	cmp	r0, #0
 8000bd6:	d000      	beq.n	8000bda <HAL_RCC_OscConfig+0x1ce>
 8000bd8:	e1bb      	b.n	8000f52 <HAL_RCC_OscConfig+0x546>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000bda:	6823      	ldr	r3, [r4, #0]
 8000bdc:	071b      	lsls	r3, r3, #28
 8000bde:	d400      	bmi.n	8000be2 <HAL_RCC_OscConfig+0x1d6>
 8000be0:	e08e      	b.n	8000d00 <HAL_RCC_OscConfig+0x2f4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000be2:	6963      	ldr	r3, [r4, #20]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d068      	beq.n	8000cba <HAL_RCC_OscConfig+0x2ae>
      __HAL_RCC_LSI_ENABLE();
 8000be8:	4a3d      	ldr	r2, [pc, #244]	; (8000ce0 <HAL_RCC_OscConfig+0x2d4>)
 8000bea:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8000bec:	2101      	movs	r1, #1
 8000bee:	430b      	orrs	r3, r1
 8000bf0:	6513      	str	r3, [r2, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000bf2:	f7ff fc53 	bl	800049c <HAL_GetTick>
 8000bf6:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000bf8:	4b39      	ldr	r3, [pc, #228]	; (8000ce0 <HAL_RCC_OscConfig+0x2d4>)
 8000bfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000bfc:	079b      	lsls	r3, r3, #30
 8000bfe:	d500      	bpl.n	8000c02 <HAL_RCC_OscConfig+0x1f6>
 8000c00:	e07e      	b.n	8000d00 <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c02:	f7ff fc4b 	bl	800049c <HAL_GetTick>
 8000c06:	1b80      	subs	r0, r0, r6
 8000c08:	2802      	cmp	r0, #2
 8000c0a:	d9f5      	bls.n	8000bf8 <HAL_RCC_OscConfig+0x1ec>
          return HAL_TIMEOUT;
 8000c0c:	2003      	movs	r0, #3
 8000c0e:	e1a0      	b.n	8000f52 <HAL_RCC_OscConfig+0x546>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c10:	4933      	ldr	r1, [pc, #204]	; (8000ce0 <HAL_RCC_OscConfig+0x2d4>)
 8000c12:	684b      	ldr	r3, [r1, #4]
 8000c14:	4a35      	ldr	r2, [pc, #212]	; (8000cec <HAL_RCC_OscConfig+0x2e0>)
 8000c16:	4013      	ands	r3, r2
 8000c18:	6922      	ldr	r2, [r4, #16]
 8000c1a:	0212      	lsls	r2, r2, #8
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	604b      	str	r3, [r1, #4]
 8000c20:	e7ab      	b.n	8000b7a <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_HSI_DISABLE();
 8000c22:	4a2f      	ldr	r2, [pc, #188]	; (8000ce0 <HAL_RCC_OscConfig+0x2d4>)
 8000c24:	6813      	ldr	r3, [r2, #0]
 8000c26:	2101      	movs	r1, #1
 8000c28:	438b      	bics	r3, r1
 8000c2a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000c2c:	f7ff fc36 	bl	800049c <HAL_GetTick>
 8000c30:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000c32:	4b2b      	ldr	r3, [pc, #172]	; (8000ce0 <HAL_RCC_OscConfig+0x2d4>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	075b      	lsls	r3, r3, #29
 8000c38:	d59f      	bpl.n	8000b7a <HAL_RCC_OscConfig+0x16e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c3a:	f7ff fc2f 	bl	800049c <HAL_GetTick>
 8000c3e:	1b80      	subs	r0, r0, r6
 8000c40:	2802      	cmp	r0, #2
 8000c42:	d9f6      	bls.n	8000c32 <HAL_RCC_OscConfig+0x226>
            return HAL_TIMEOUT;
 8000c44:	2003      	movs	r0, #3
 8000c46:	e184      	b.n	8000f52 <HAL_RCC_OscConfig+0x546>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000c48:	69e3      	ldr	r3, [r4, #28]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d022      	beq.n	8000c94 <HAL_RCC_OscConfig+0x288>
        __HAL_RCC_MSI_ENABLE();
 8000c4e:	4a24      	ldr	r2, [pc, #144]	; (8000ce0 <HAL_RCC_OscConfig+0x2d4>)
 8000c50:	6811      	ldr	r1, [r2, #0]
 8000c52:	2380      	movs	r3, #128	; 0x80
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	430b      	orrs	r3, r1
 8000c58:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000c5a:	f7ff fc1f 	bl	800049c <HAL_GetTick>
 8000c5e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_RCC_OscConfig+0x2d4>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	059b      	lsls	r3, r3, #22
 8000c66:	d406      	bmi.n	8000c76 <HAL_RCC_OscConfig+0x26a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000c68:	f7ff fc18 	bl	800049c <HAL_GetTick>
 8000c6c:	1b80      	subs	r0, r0, r6
 8000c6e:	2802      	cmp	r0, #2
 8000c70:	d9f6      	bls.n	8000c60 <HAL_RCC_OscConfig+0x254>
            return HAL_TIMEOUT;
 8000c72:	2003      	movs	r0, #3
 8000c74:	e16d      	b.n	8000f52 <HAL_RCC_OscConfig+0x546>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c76:	4a1a      	ldr	r2, [pc, #104]	; (8000ce0 <HAL_RCC_OscConfig+0x2d4>)
 8000c78:	6853      	ldr	r3, [r2, #4]
 8000c7a:	491f      	ldr	r1, [pc, #124]	; (8000cf8 <HAL_RCC_OscConfig+0x2ec>)
 8000c7c:	400b      	ands	r3, r1
 8000c7e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000c80:	430b      	orrs	r3, r1
 8000c82:	6053      	str	r3, [r2, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c84:	6853      	ldr	r3, [r2, #4]
 8000c86:	021b      	lsls	r3, r3, #8
 8000c88:	0a1b      	lsrs	r3, r3, #8
 8000c8a:	6a21      	ldr	r1, [r4, #32]
 8000c8c:	0609      	lsls	r1, r1, #24
 8000c8e:	430b      	orrs	r3, r1
 8000c90:	6053      	str	r3, [r2, #4]
 8000c92:	e7a2      	b.n	8000bda <HAL_RCC_OscConfig+0x1ce>
        __HAL_RCC_MSI_DISABLE();
 8000c94:	4a12      	ldr	r2, [pc, #72]	; (8000ce0 <HAL_RCC_OscConfig+0x2d4>)
 8000c96:	6813      	ldr	r3, [r2, #0]
 8000c98:	4918      	ldr	r1, [pc, #96]	; (8000cfc <HAL_RCC_OscConfig+0x2f0>)
 8000c9a:	400b      	ands	r3, r1
 8000c9c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000c9e:	f7ff fbfd 	bl	800049c <HAL_GetTick>
 8000ca2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000ca4:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <HAL_RCC_OscConfig+0x2d4>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	059b      	lsls	r3, r3, #22
 8000caa:	d596      	bpl.n	8000bda <HAL_RCC_OscConfig+0x1ce>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000cac:	f7ff fbf6 	bl	800049c <HAL_GetTick>
 8000cb0:	1b80      	subs	r0, r0, r6
 8000cb2:	2802      	cmp	r0, #2
 8000cb4:	d9f6      	bls.n	8000ca4 <HAL_RCC_OscConfig+0x298>
            return HAL_TIMEOUT;
 8000cb6:	2003      	movs	r0, #3
 8000cb8:	e14b      	b.n	8000f52 <HAL_RCC_OscConfig+0x546>
      __HAL_RCC_LSI_DISABLE();
 8000cba:	4a09      	ldr	r2, [pc, #36]	; (8000ce0 <HAL_RCC_OscConfig+0x2d4>)
 8000cbc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	438b      	bics	r3, r1
 8000cc2:	6513      	str	r3, [r2, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000cc4:	f7ff fbea 	bl	800049c <HAL_GetTick>
 8000cc8:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000cca:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <HAL_RCC_OscConfig+0x2d4>)
 8000ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000cce:	079b      	lsls	r3, r3, #30
 8000cd0:	d516      	bpl.n	8000d00 <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cd2:	f7ff fbe3 	bl	800049c <HAL_GetTick>
 8000cd6:	1b80      	subs	r0, r0, r6
 8000cd8:	2802      	cmp	r0, #2
 8000cda:	d9f6      	bls.n	8000cca <HAL_RCC_OscConfig+0x2be>
          return HAL_TIMEOUT;
 8000cdc:	2003      	movs	r0, #3
 8000cde:	e138      	b.n	8000f52 <HAL_RCC_OscConfig+0x546>
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	fffeffff 	.word	0xfffeffff
 8000ce8:	fffbffff 	.word	0xfffbffff
 8000cec:	ffffe0ff 	.word	0xffffe0ff
 8000cf0:	080032a8 	.word	0x080032a8
 8000cf4:	20000000 	.word	0x20000000
 8000cf8:	ffff1fff 	.word	0xffff1fff
 8000cfc:	fffffeff 	.word	0xfffffeff
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d00:	6823      	ldr	r3, [r4, #0]
 8000d02:	075b      	lsls	r3, r3, #29
 8000d04:	d578      	bpl.n	8000df8 <HAL_RCC_OscConfig+0x3ec>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d06:	4b9a      	ldr	r3, [pc, #616]	; (8000f70 <HAL_RCC_OscConfig+0x564>)
 8000d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d0a:	00db      	lsls	r3, r3, #3
 8000d0c:	d42c      	bmi.n	8000d68 <HAL_RCC_OscConfig+0x35c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d0e:	4a98      	ldr	r2, [pc, #608]	; (8000f70 <HAL_RCC_OscConfig+0x564>)
 8000d10:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8000d12:	2380      	movs	r3, #128	; 0x80
 8000d14:	055b      	lsls	r3, r3, #21
 8000d16:	430b      	orrs	r3, r1
 8000d18:	6393      	str	r3, [r2, #56]	; 0x38
      pwrclkchanged = SET;
 8000d1a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d1c:	4b95      	ldr	r3, [pc, #596]	; (8000f74 <HAL_RCC_OscConfig+0x568>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	05db      	lsls	r3, r3, #23
 8000d22:	d523      	bpl.n	8000d6c <HAL_RCC_OscConfig+0x360>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d24:	68a3      	ldr	r3, [r4, #8]
 8000d26:	2280      	movs	r2, #128	; 0x80
 8000d28:	0052      	lsls	r2, r2, #1
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d032      	beq.n	8000d94 <HAL_RCC_OscConfig+0x388>
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d137      	bne.n	8000da2 <HAL_RCC_OscConfig+0x396>
 8000d32:	4b8f      	ldr	r3, [pc, #572]	; (8000f70 <HAL_RCC_OscConfig+0x564>)
 8000d34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000d36:	4990      	ldr	r1, [pc, #576]	; (8000f78 <HAL_RCC_OscConfig+0x56c>)
 8000d38:	400a      	ands	r2, r1
 8000d3a:	651a      	str	r2, [r3, #80]	; 0x50
 8000d3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000d3e:	498f      	ldr	r1, [pc, #572]	; (8000f7c <HAL_RCC_OscConfig+0x570>)
 8000d40:	400a      	ands	r2, r1
 8000d42:	651a      	str	r2, [r3, #80]	; 0x50
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000d44:	68a3      	ldr	r3, [r4, #8]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d045      	beq.n	8000dd6 <HAL_RCC_OscConfig+0x3ca>
      tickstart = HAL_GetTick();
 8000d4a:	f7ff fba7 	bl	800049c <HAL_GetTick>
 8000d4e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000d50:	4b87      	ldr	r3, [pc, #540]	; (8000f70 <HAL_RCC_OscConfig+0x564>)
 8000d52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d54:	059b      	lsls	r3, r3, #22
 8000d56:	d44d      	bmi.n	8000df4 <HAL_RCC_OscConfig+0x3e8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d58:	f7ff fba0 	bl	800049c <HAL_GetTick>
 8000d5c:	1bc0      	subs	r0, r0, r7
 8000d5e:	4b88      	ldr	r3, [pc, #544]	; (8000f80 <HAL_RCC_OscConfig+0x574>)
 8000d60:	4298      	cmp	r0, r3
 8000d62:	d9f5      	bls.n	8000d50 <HAL_RCC_OscConfig+0x344>
          return HAL_TIMEOUT;
 8000d64:	2003      	movs	r0, #3
 8000d66:	e0f4      	b.n	8000f52 <HAL_RCC_OscConfig+0x546>
    FlagStatus       pwrclkchanged = RESET;
 8000d68:	2600      	movs	r6, #0
 8000d6a:	e7d7      	b.n	8000d1c <HAL_RCC_OscConfig+0x310>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d6c:	4a81      	ldr	r2, [pc, #516]	; (8000f74 <HAL_RCC_OscConfig+0x568>)
 8000d6e:	6811      	ldr	r1, [r2, #0]
 8000d70:	2380      	movs	r3, #128	; 0x80
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	430b      	orrs	r3, r1
 8000d76:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000d78:	f7ff fb90 	bl	800049c <HAL_GetTick>
 8000d7c:	0007      	movs	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d7e:	4b7d      	ldr	r3, [pc, #500]	; (8000f74 <HAL_RCC_OscConfig+0x568>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	05db      	lsls	r3, r3, #23
 8000d84:	d4ce      	bmi.n	8000d24 <HAL_RCC_OscConfig+0x318>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d86:	f7ff fb89 	bl	800049c <HAL_GetTick>
 8000d8a:	1bc0      	subs	r0, r0, r7
 8000d8c:	2864      	cmp	r0, #100	; 0x64
 8000d8e:	d9f6      	bls.n	8000d7e <HAL_RCC_OscConfig+0x372>
          return HAL_TIMEOUT;
 8000d90:	2003      	movs	r0, #3
 8000d92:	e0de      	b.n	8000f52 <HAL_RCC_OscConfig+0x546>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d94:	4a76      	ldr	r2, [pc, #472]	; (8000f70 <HAL_RCC_OscConfig+0x564>)
 8000d96:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8000d98:	2380      	movs	r3, #128	; 0x80
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	430b      	orrs	r3, r1
 8000d9e:	6513      	str	r3, [r2, #80]	; 0x50
 8000da0:	e7d0      	b.n	8000d44 <HAL_RCC_OscConfig+0x338>
 8000da2:	22a0      	movs	r2, #160	; 0xa0
 8000da4:	00d2      	lsls	r2, r2, #3
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d009      	beq.n	8000dbe <HAL_RCC_OscConfig+0x3b2>
 8000daa:	4b71      	ldr	r3, [pc, #452]	; (8000f70 <HAL_RCC_OscConfig+0x564>)
 8000dac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000dae:	4972      	ldr	r1, [pc, #456]	; (8000f78 <HAL_RCC_OscConfig+0x56c>)
 8000db0:	400a      	ands	r2, r1
 8000db2:	651a      	str	r2, [r3, #80]	; 0x50
 8000db4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000db6:	4971      	ldr	r1, [pc, #452]	; (8000f7c <HAL_RCC_OscConfig+0x570>)
 8000db8:	400a      	ands	r2, r1
 8000dba:	651a      	str	r2, [r3, #80]	; 0x50
 8000dbc:	e7c2      	b.n	8000d44 <HAL_RCC_OscConfig+0x338>
 8000dbe:	4b6c      	ldr	r3, [pc, #432]	; (8000f70 <HAL_RCC_OscConfig+0x564>)
 8000dc0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8000dc2:	3a01      	subs	r2, #1
 8000dc4:	3aff      	subs	r2, #255	; 0xff
 8000dc6:	430a      	orrs	r2, r1
 8000dc8:	651a      	str	r2, [r3, #80]	; 0x50
 8000dca:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8000dcc:	2280      	movs	r2, #128	; 0x80
 8000dce:	0052      	lsls	r2, r2, #1
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	651a      	str	r2, [r3, #80]	; 0x50
 8000dd4:	e7b6      	b.n	8000d44 <HAL_RCC_OscConfig+0x338>
      tickstart = HAL_GetTick();
 8000dd6:	f7ff fb61 	bl	800049c <HAL_GetTick>
 8000dda:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000ddc:	4b64      	ldr	r3, [pc, #400]	; (8000f70 <HAL_RCC_OscConfig+0x564>)
 8000dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000de0:	059b      	lsls	r3, r3, #22
 8000de2:	d507      	bpl.n	8000df4 <HAL_RCC_OscConfig+0x3e8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000de4:	f7ff fb5a 	bl	800049c <HAL_GetTick>
 8000de8:	1bc0      	subs	r0, r0, r7
 8000dea:	4b65      	ldr	r3, [pc, #404]	; (8000f80 <HAL_RCC_OscConfig+0x574>)
 8000dec:	4298      	cmp	r0, r3
 8000dee:	d9f5      	bls.n	8000ddc <HAL_RCC_OscConfig+0x3d0>
          return HAL_TIMEOUT;
 8000df0:	2003      	movs	r0, #3
 8000df2:	e0ae      	b.n	8000f52 <HAL_RCC_OscConfig+0x546>
    if(pwrclkchanged == SET)
 8000df4:	2e01      	cmp	r6, #1
 8000df6:	d021      	beq.n	8000e3c <HAL_RCC_OscConfig+0x430>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000df8:	6823      	ldr	r3, [r4, #0]
 8000dfa:	069b      	lsls	r3, r3, #26
 8000dfc:	d53c      	bpl.n	8000e78 <HAL_RCC_OscConfig+0x46c>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000dfe:	69a3      	ldr	r3, [r4, #24]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d021      	beq.n	8000e48 <HAL_RCC_OscConfig+0x43c>
        __HAL_RCC_HSI48_ENABLE();
 8000e04:	4b5a      	ldr	r3, [pc, #360]	; (8000f70 <HAL_RCC_OscConfig+0x564>)
 8000e06:	6899      	ldr	r1, [r3, #8]
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4301      	orrs	r1, r0
 8000e0c:	6099      	str	r1, [r3, #8]
 8000e0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e10:	4302      	orrs	r2, r0
 8000e12:	635a      	str	r2, [r3, #52]	; 0x34
 8000e14:	4a5b      	ldr	r2, [pc, #364]	; (8000f84 <HAL_RCC_OscConfig+0x578>)
 8000e16:	6a11      	ldr	r1, [r2, #32]
 8000e18:	2380      	movs	r3, #128	; 0x80
 8000e1a:	019b      	lsls	r3, r3, #6
 8000e1c:	430b      	orrs	r3, r1
 8000e1e:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8000e20:	f7ff fb3c 	bl	800049c <HAL_GetTick>
 8000e24:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8000e26:	4b52      	ldr	r3, [pc, #328]	; (8000f70 <HAL_RCC_OscConfig+0x564>)
 8000e28:	689b      	ldr	r3, [r3, #8]
 8000e2a:	079b      	lsls	r3, r3, #30
 8000e2c:	d424      	bmi.n	8000e78 <HAL_RCC_OscConfig+0x46c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000e2e:	f7ff fb35 	bl	800049c <HAL_GetTick>
 8000e32:	1b80      	subs	r0, r0, r6
 8000e34:	2802      	cmp	r0, #2
 8000e36:	d9f6      	bls.n	8000e26 <HAL_RCC_OscConfig+0x41a>
            return HAL_TIMEOUT;
 8000e38:	2003      	movs	r0, #3
 8000e3a:	e08a      	b.n	8000f52 <HAL_RCC_OscConfig+0x546>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e3c:	4a4c      	ldr	r2, [pc, #304]	; (8000f70 <HAL_RCC_OscConfig+0x564>)
 8000e3e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8000e40:	4951      	ldr	r1, [pc, #324]	; (8000f88 <HAL_RCC_OscConfig+0x57c>)
 8000e42:	400b      	ands	r3, r1
 8000e44:	6393      	str	r3, [r2, #56]	; 0x38
 8000e46:	e7d7      	b.n	8000df8 <HAL_RCC_OscConfig+0x3ec>
        __HAL_RCC_HSI48_DISABLE();
 8000e48:	4a49      	ldr	r2, [pc, #292]	; (8000f70 <HAL_RCC_OscConfig+0x564>)
 8000e4a:	6893      	ldr	r3, [r2, #8]
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	438b      	bics	r3, r1
 8000e50:	6093      	str	r3, [r2, #8]
 8000e52:	4a4c      	ldr	r2, [pc, #304]	; (8000f84 <HAL_RCC_OscConfig+0x578>)
 8000e54:	6a13      	ldr	r3, [r2, #32]
 8000e56:	494d      	ldr	r1, [pc, #308]	; (8000f8c <HAL_RCC_OscConfig+0x580>)
 8000e58:	400b      	ands	r3, r1
 8000e5a:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8000e5c:	f7ff fb1e 	bl	800049c <HAL_GetTick>
 8000e60:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000e62:	4b43      	ldr	r3, [pc, #268]	; (8000f70 <HAL_RCC_OscConfig+0x564>)
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	079b      	lsls	r3, r3, #30
 8000e68:	d506      	bpl.n	8000e78 <HAL_RCC_OscConfig+0x46c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000e6a:	f7ff fb17 	bl	800049c <HAL_GetTick>
 8000e6e:	1b80      	subs	r0, r0, r6
 8000e70:	2802      	cmp	r0, #2
 8000e72:	d9f6      	bls.n	8000e62 <HAL_RCC_OscConfig+0x456>
            return HAL_TIMEOUT;
 8000e74:	2003      	movs	r0, #3
 8000e76:	e06c      	b.n	8000f52 <HAL_RCC_OscConfig+0x546>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d100      	bne.n	8000e80 <HAL_RCC_OscConfig+0x474>
 8000e7e:	e070      	b.n	8000f62 <HAL_RCC_OscConfig+0x556>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e80:	2d0c      	cmp	r5, #12
 8000e82:	d049      	beq.n	8000f18 <HAL_RCC_OscConfig+0x50c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d012      	beq.n	8000eae <HAL_RCC_OscConfig+0x4a2>
        __HAL_RCC_PLL_DISABLE();
 8000e88:	4a39      	ldr	r2, [pc, #228]	; (8000f70 <HAL_RCC_OscConfig+0x564>)
 8000e8a:	6813      	ldr	r3, [r2, #0]
 8000e8c:	4940      	ldr	r1, [pc, #256]	; (8000f90 <HAL_RCC_OscConfig+0x584>)
 8000e8e:	400b      	ands	r3, r1
 8000e90:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000e92:	f7ff fb03 	bl	800049c <HAL_GetTick>
 8000e96:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000e98:	4b35      	ldr	r3, [pc, #212]	; (8000f70 <HAL_RCC_OscConfig+0x564>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	019b      	lsls	r3, r3, #6
 8000e9e:	d539      	bpl.n	8000f14 <HAL_RCC_OscConfig+0x508>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ea0:	f7ff fafc 	bl	800049c <HAL_GetTick>
 8000ea4:	1b00      	subs	r0, r0, r4
 8000ea6:	2802      	cmp	r0, #2
 8000ea8:	d9f6      	bls.n	8000e98 <HAL_RCC_OscConfig+0x48c>
            return HAL_TIMEOUT;
 8000eaa:	2003      	movs	r0, #3
 8000eac:	e051      	b.n	8000f52 <HAL_RCC_OscConfig+0x546>
        __HAL_RCC_PLL_DISABLE();
 8000eae:	4a30      	ldr	r2, [pc, #192]	; (8000f70 <HAL_RCC_OscConfig+0x564>)
 8000eb0:	6813      	ldr	r3, [r2, #0]
 8000eb2:	4937      	ldr	r1, [pc, #220]	; (8000f90 <HAL_RCC_OscConfig+0x584>)
 8000eb4:	400b      	ands	r3, r1
 8000eb6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000eb8:	f7ff faf0 	bl	800049c <HAL_GetTick>
 8000ebc:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000ebe:	4b2c      	ldr	r3, [pc, #176]	; (8000f70 <HAL_RCC_OscConfig+0x564>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	019b      	lsls	r3, r3, #6
 8000ec4:	d506      	bpl.n	8000ed4 <HAL_RCC_OscConfig+0x4c8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ec6:	f7ff fae9 	bl	800049c <HAL_GetTick>
 8000eca:	1b40      	subs	r0, r0, r5
 8000ecc:	2802      	cmp	r0, #2
 8000ece:	d9f6      	bls.n	8000ebe <HAL_RCC_OscConfig+0x4b2>
            return HAL_TIMEOUT;
 8000ed0:	2003      	movs	r0, #3
 8000ed2:	e03e      	b.n	8000f52 <HAL_RCC_OscConfig+0x546>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ed4:	4926      	ldr	r1, [pc, #152]	; (8000f70 <HAL_RCC_OscConfig+0x564>)
 8000ed6:	68cb      	ldr	r3, [r1, #12]
 8000ed8:	4a2e      	ldr	r2, [pc, #184]	; (8000f94 <HAL_RCC_OscConfig+0x588>)
 8000eda:	4013      	ands	r3, r2
 8000edc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000ede:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000ee0:	4302      	orrs	r2, r0
 8000ee2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8000ee4:	4302      	orrs	r2, r0
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	60cb      	str	r3, [r1, #12]
        __HAL_RCC_PLL_ENABLE();
 8000eea:	680a      	ldr	r2, [r1, #0]
 8000eec:	2380      	movs	r3, #128	; 0x80
 8000eee:	045b      	lsls	r3, r3, #17
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8000ef4:	f7ff fad2 	bl	800049c <HAL_GetTick>
 8000ef8:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8000efa:	4b1d      	ldr	r3, [pc, #116]	; (8000f70 <HAL_RCC_OscConfig+0x564>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	019b      	lsls	r3, r3, #6
 8000f00:	d406      	bmi.n	8000f10 <HAL_RCC_OscConfig+0x504>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f02:	f7ff facb 	bl	800049c <HAL_GetTick>
 8000f06:	1b00      	subs	r0, r0, r4
 8000f08:	2802      	cmp	r0, #2
 8000f0a:	d9f6      	bls.n	8000efa <HAL_RCC_OscConfig+0x4ee>
            return HAL_TIMEOUT;
 8000f0c:	2003      	movs	r0, #3
 8000f0e:	e020      	b.n	8000f52 <HAL_RCC_OscConfig+0x546>
  return HAL_OK;
 8000f10:	2000      	movs	r0, #0
 8000f12:	e01e      	b.n	8000f52 <HAL_RCC_OscConfig+0x546>
 8000f14:	2000      	movs	r0, #0
 8000f16:	e01c      	b.n	8000f52 <HAL_RCC_OscConfig+0x546>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d024      	beq.n	8000f66 <HAL_RCC_OscConfig+0x55a>
        pll_config = RCC->CFGR;
 8000f1c:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <HAL_RCC_OscConfig+0x564>)
 8000f1e:	68da      	ldr	r2, [r3, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f20:	2380      	movs	r3, #128	; 0x80
 8000f22:	025b      	lsls	r3, r3, #9
 8000f24:	4013      	ands	r3, r2
 8000f26:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000f28:	428b      	cmp	r3, r1
 8000f2a:	d001      	beq.n	8000f30 <HAL_RCC_OscConfig+0x524>
          return HAL_ERROR;
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	e010      	b.n	8000f52 <HAL_RCC_OscConfig+0x546>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000f30:	23f0      	movs	r3, #240	; 0xf0
 8000f32:	039b      	lsls	r3, r3, #14
 8000f34:	4013      	ands	r3, r2
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f36:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	d001      	beq.n	8000f40 <HAL_RCC_OscConfig+0x534>
          return HAL_ERROR;
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	e008      	b.n	8000f52 <HAL_RCC_OscConfig+0x546>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8000f40:	23c0      	movs	r3, #192	; 0xc0
 8000f42:	041b      	lsls	r3, r3, #16
 8000f44:	401a      	ands	r2, r3
 8000f46:	6b63      	ldr	r3, [r4, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d00e      	beq.n	8000f6a <HAL_RCC_OscConfig+0x55e>
          return HAL_ERROR;
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	e000      	b.n	8000f52 <HAL_RCC_OscConfig+0x546>
    return HAL_ERROR;
 8000f50:	2001      	movs	r0, #1
}
 8000f52:	b003      	add	sp, #12
 8000f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_ERROR;
 8000f56:	2001      	movs	r0, #1
 8000f58:	e7fb      	b.n	8000f52 <HAL_RCC_OscConfig+0x546>
        return HAL_ERROR;
 8000f5a:	2001      	movs	r0, #1
 8000f5c:	e7f9      	b.n	8000f52 <HAL_RCC_OscConfig+0x546>
        return HAL_ERROR;
 8000f5e:	2001      	movs	r0, #1
 8000f60:	e7f7      	b.n	8000f52 <HAL_RCC_OscConfig+0x546>
  return HAL_OK;
 8000f62:	2000      	movs	r0, #0
 8000f64:	e7f5      	b.n	8000f52 <HAL_RCC_OscConfig+0x546>
        return HAL_ERROR;
 8000f66:	2001      	movs	r0, #1
 8000f68:	e7f3      	b.n	8000f52 <HAL_RCC_OscConfig+0x546>
  return HAL_OK;
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	e7f1      	b.n	8000f52 <HAL_RCC_OscConfig+0x546>
 8000f6e:	46c0      	nop			; (mov r8, r8)
 8000f70:	40021000 	.word	0x40021000
 8000f74:	40007000 	.word	0x40007000
 8000f78:	fffffeff 	.word	0xfffffeff
 8000f7c:	fffffbff 	.word	0xfffffbff
 8000f80:	00001388 	.word	0x00001388
 8000f84:	40010000 	.word	0x40010000
 8000f88:	efffffff 	.word	0xefffffff
 8000f8c:	ffffdfff 	.word	0xffffdfff
 8000f90:	feffffff 	.word	0xfeffffff
 8000f94:	ff02ffff 	.word	0xff02ffff

08000f98 <HAL_RCC_ClockConfig>:
{
 8000f98:	b570      	push	{r4, r5, r6, lr}
 8000f9a:	0004      	movs	r4, r0
 8000f9c:	000d      	movs	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000f9e:	2800      	cmp	r0, #0
 8000fa0:	d100      	bne.n	8000fa4 <HAL_RCC_ClockConfig+0xc>
 8000fa2:	e0ba      	b.n	800111a <HAL_RCC_ClockConfig+0x182>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000fa4:	4b5f      	ldr	r3, [pc, #380]	; (8001124 <HAL_RCC_ClockConfig+0x18c>)
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	2301      	movs	r3, #1
 8000faa:	4013      	ands	r3, r2
 8000fac:	428b      	cmp	r3, r1
 8000fae:	d20b      	bcs.n	8000fc8 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fb0:	495c      	ldr	r1, [pc, #368]	; (8001124 <HAL_RCC_ClockConfig+0x18c>)
 8000fb2:	680b      	ldr	r3, [r1, #0]
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	4393      	bics	r3, r2
 8000fb8:	432b      	orrs	r3, r5
 8000fba:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fbc:	680b      	ldr	r3, [r1, #0]
 8000fbe:	401a      	ands	r2, r3
 8000fc0:	4295      	cmp	r5, r2
 8000fc2:	d001      	beq.n	8000fc8 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	e0a7      	b.n	8001118 <HAL_RCC_ClockConfig+0x180>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fc8:	6823      	ldr	r3, [r4, #0]
 8000fca:	079b      	lsls	r3, r3, #30
 8000fcc:	d506      	bpl.n	8000fdc <HAL_RCC_ClockConfig+0x44>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fce:	4a56      	ldr	r2, [pc, #344]	; (8001128 <HAL_RCC_ClockConfig+0x190>)
 8000fd0:	68d3      	ldr	r3, [r2, #12]
 8000fd2:	21f0      	movs	r1, #240	; 0xf0
 8000fd4:	438b      	bics	r3, r1
 8000fd6:	68a1      	ldr	r1, [r4, #8]
 8000fd8:	430b      	orrs	r3, r1
 8000fda:	60d3      	str	r3, [r2, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fdc:	6823      	ldr	r3, [r4, #0]
 8000fde:	07db      	lsls	r3, r3, #31
 8000fe0:	d564      	bpl.n	80010ac <HAL_RCC_ClockConfig+0x114>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fe2:	6863      	ldr	r3, [r4, #4]
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d025      	beq.n	8001034 <HAL_RCC_ClockConfig+0x9c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000fe8:	2b03      	cmp	r3, #3
 8000fea:	d029      	beq.n	8001040 <HAL_RCC_ClockConfig+0xa8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d02d      	beq.n	800104c <HAL_RCC_ClockConfig+0xb4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000ff0:	4a4d      	ldr	r2, [pc, #308]	; (8001128 <HAL_RCC_ClockConfig+0x190>)
 8000ff2:	6812      	ldr	r2, [r2, #0]
 8000ff4:	0592      	lsls	r2, r2, #22
 8000ff6:	d400      	bmi.n	8000ffa <HAL_RCC_ClockConfig+0x62>
 8000ff8:	e091      	b.n	800111e <HAL_RCC_ClockConfig+0x186>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ffa:	494b      	ldr	r1, [pc, #300]	; (8001128 <HAL_RCC_ClockConfig+0x190>)
 8000ffc:	68ca      	ldr	r2, [r1, #12]
 8000ffe:	2003      	movs	r0, #3
 8001000:	4382      	bics	r2, r0
 8001002:	4313      	orrs	r3, r2
 8001004:	60cb      	str	r3, [r1, #12]
    tickstart = HAL_GetTick();
 8001006:	f7ff fa49 	bl	800049c <HAL_GetTick>
 800100a:	0006      	movs	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800100c:	6863      	ldr	r3, [r4, #4]
 800100e:	2b02      	cmp	r3, #2
 8001010:	d022      	beq.n	8001058 <HAL_RCC_ClockConfig+0xc0>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001012:	2b03      	cmp	r3, #3
 8001014:	d02e      	beq.n	8001074 <HAL_RCC_ClockConfig+0xdc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001016:	2b01      	cmp	r3, #1
 8001018:	d03a      	beq.n	8001090 <HAL_RCC_ClockConfig+0xf8>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800101a:	4b43      	ldr	r3, [pc, #268]	; (8001128 <HAL_RCC_ClockConfig+0x190>)
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	220c      	movs	r2, #12
 8001020:	421a      	tst	r2, r3
 8001022:	d043      	beq.n	80010ac <HAL_RCC_ClockConfig+0x114>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001024:	f7ff fa3a 	bl	800049c <HAL_GetTick>
 8001028:	1b80      	subs	r0, r0, r6
 800102a:	4b40      	ldr	r3, [pc, #256]	; (800112c <HAL_RCC_ClockConfig+0x194>)
 800102c:	4298      	cmp	r0, r3
 800102e:	d9f4      	bls.n	800101a <HAL_RCC_ClockConfig+0x82>
          return HAL_TIMEOUT;
 8001030:	2003      	movs	r0, #3
 8001032:	e071      	b.n	8001118 <HAL_RCC_ClockConfig+0x180>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001034:	4a3c      	ldr	r2, [pc, #240]	; (8001128 <HAL_RCC_ClockConfig+0x190>)
 8001036:	6812      	ldr	r2, [r2, #0]
 8001038:	0392      	lsls	r2, r2, #14
 800103a:	d4de      	bmi.n	8000ffa <HAL_RCC_ClockConfig+0x62>
        return HAL_ERROR;
 800103c:	2001      	movs	r0, #1
 800103e:	e06b      	b.n	8001118 <HAL_RCC_ClockConfig+0x180>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001040:	4a39      	ldr	r2, [pc, #228]	; (8001128 <HAL_RCC_ClockConfig+0x190>)
 8001042:	6812      	ldr	r2, [r2, #0]
 8001044:	0192      	lsls	r2, r2, #6
 8001046:	d4d8      	bmi.n	8000ffa <HAL_RCC_ClockConfig+0x62>
        return HAL_ERROR;
 8001048:	2001      	movs	r0, #1
 800104a:	e065      	b.n	8001118 <HAL_RCC_ClockConfig+0x180>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800104c:	4a36      	ldr	r2, [pc, #216]	; (8001128 <HAL_RCC_ClockConfig+0x190>)
 800104e:	6812      	ldr	r2, [r2, #0]
 8001050:	0752      	lsls	r2, r2, #29
 8001052:	d4d2      	bmi.n	8000ffa <HAL_RCC_ClockConfig+0x62>
        return HAL_ERROR;
 8001054:	2001      	movs	r0, #1
 8001056:	e05f      	b.n	8001118 <HAL_RCC_ClockConfig+0x180>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001058:	4b33      	ldr	r3, [pc, #204]	; (8001128 <HAL_RCC_ClockConfig+0x190>)
 800105a:	68da      	ldr	r2, [r3, #12]
 800105c:	230c      	movs	r3, #12
 800105e:	4013      	ands	r3, r2
 8001060:	2b08      	cmp	r3, #8
 8001062:	d023      	beq.n	80010ac <HAL_RCC_ClockConfig+0x114>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001064:	f7ff fa1a 	bl	800049c <HAL_GetTick>
 8001068:	1b80      	subs	r0, r0, r6
 800106a:	4b30      	ldr	r3, [pc, #192]	; (800112c <HAL_RCC_ClockConfig+0x194>)
 800106c:	4298      	cmp	r0, r3
 800106e:	d9f3      	bls.n	8001058 <HAL_RCC_ClockConfig+0xc0>
          return HAL_TIMEOUT;
 8001070:	2003      	movs	r0, #3
 8001072:	e051      	b.n	8001118 <HAL_RCC_ClockConfig+0x180>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001074:	4b2c      	ldr	r3, [pc, #176]	; (8001128 <HAL_RCC_ClockConfig+0x190>)
 8001076:	68da      	ldr	r2, [r3, #12]
 8001078:	230c      	movs	r3, #12
 800107a:	4013      	ands	r3, r2
 800107c:	2b0c      	cmp	r3, #12
 800107e:	d015      	beq.n	80010ac <HAL_RCC_ClockConfig+0x114>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001080:	f7ff fa0c 	bl	800049c <HAL_GetTick>
 8001084:	1b80      	subs	r0, r0, r6
 8001086:	4b29      	ldr	r3, [pc, #164]	; (800112c <HAL_RCC_ClockConfig+0x194>)
 8001088:	4298      	cmp	r0, r3
 800108a:	d9f3      	bls.n	8001074 <HAL_RCC_ClockConfig+0xdc>
          return HAL_TIMEOUT;
 800108c:	2003      	movs	r0, #3
 800108e:	e043      	b.n	8001118 <HAL_RCC_ClockConfig+0x180>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001090:	4b25      	ldr	r3, [pc, #148]	; (8001128 <HAL_RCC_ClockConfig+0x190>)
 8001092:	68da      	ldr	r2, [r3, #12]
 8001094:	230c      	movs	r3, #12
 8001096:	4013      	ands	r3, r2
 8001098:	2b04      	cmp	r3, #4
 800109a:	d007      	beq.n	80010ac <HAL_RCC_ClockConfig+0x114>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800109c:	f7ff f9fe 	bl	800049c <HAL_GetTick>
 80010a0:	1b80      	subs	r0, r0, r6
 80010a2:	4b22      	ldr	r3, [pc, #136]	; (800112c <HAL_RCC_ClockConfig+0x194>)
 80010a4:	4298      	cmp	r0, r3
 80010a6:	d9f3      	bls.n	8001090 <HAL_RCC_ClockConfig+0xf8>
          return HAL_TIMEOUT;
 80010a8:	2003      	movs	r0, #3
 80010aa:	e035      	b.n	8001118 <HAL_RCC_ClockConfig+0x180>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80010ac:	4b1d      	ldr	r3, [pc, #116]	; (8001124 <HAL_RCC_ClockConfig+0x18c>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	2301      	movs	r3, #1
 80010b2:	4013      	ands	r3, r2
 80010b4:	429d      	cmp	r5, r3
 80010b6:	d20b      	bcs.n	80010d0 <HAL_RCC_ClockConfig+0x138>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010b8:	491a      	ldr	r1, [pc, #104]	; (8001124 <HAL_RCC_ClockConfig+0x18c>)
 80010ba:	680b      	ldr	r3, [r1, #0]
 80010bc:	2201      	movs	r2, #1
 80010be:	4393      	bics	r3, r2
 80010c0:	432b      	orrs	r3, r5
 80010c2:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010c4:	680b      	ldr	r3, [r1, #0]
 80010c6:	401a      	ands	r2, r3
 80010c8:	4295      	cmp	r5, r2
 80010ca:	d001      	beq.n	80010d0 <HAL_RCC_ClockConfig+0x138>
      return HAL_ERROR;
 80010cc:	2001      	movs	r0, #1
 80010ce:	e023      	b.n	8001118 <HAL_RCC_ClockConfig+0x180>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010d0:	6823      	ldr	r3, [r4, #0]
 80010d2:	075b      	lsls	r3, r3, #29
 80010d4:	d506      	bpl.n	80010e4 <HAL_RCC_ClockConfig+0x14c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010d6:	4a14      	ldr	r2, [pc, #80]	; (8001128 <HAL_RCC_ClockConfig+0x190>)
 80010d8:	68d3      	ldr	r3, [r2, #12]
 80010da:	4915      	ldr	r1, [pc, #84]	; (8001130 <HAL_RCC_ClockConfig+0x198>)
 80010dc:	400b      	ands	r3, r1
 80010de:	68e1      	ldr	r1, [r4, #12]
 80010e0:	430b      	orrs	r3, r1
 80010e2:	60d3      	str	r3, [r2, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010e4:	6823      	ldr	r3, [r4, #0]
 80010e6:	071b      	lsls	r3, r3, #28
 80010e8:	d507      	bpl.n	80010fa <HAL_RCC_ClockConfig+0x162>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80010ea:	490f      	ldr	r1, [pc, #60]	; (8001128 <HAL_RCC_ClockConfig+0x190>)
 80010ec:	68cb      	ldr	r3, [r1, #12]
 80010ee:	4a11      	ldr	r2, [pc, #68]	; (8001134 <HAL_RCC_ClockConfig+0x19c>)
 80010f0:	4013      	ands	r3, r2
 80010f2:	6922      	ldr	r2, [r4, #16]
 80010f4:	00d2      	lsls	r2, r2, #3
 80010f6:	4313      	orrs	r3, r2
 80010f8:	60cb      	str	r3, [r1, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80010fa:	f7ff fc3d 	bl	8000978 <HAL_RCC_GetSysClockFreq>
 80010fe:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <HAL_RCC_ClockConfig+0x190>)
 8001100:	68da      	ldr	r2, [r3, #12]
 8001102:	0912      	lsrs	r2, r2, #4
 8001104:	230f      	movs	r3, #15
 8001106:	4013      	ands	r3, r2
 8001108:	4a0b      	ldr	r2, [pc, #44]	; (8001138 <HAL_RCC_ClockConfig+0x1a0>)
 800110a:	5cd3      	ldrb	r3, [r2, r3]
 800110c:	40d8      	lsrs	r0, r3
 800110e:	4b0b      	ldr	r3, [pc, #44]	; (800113c <HAL_RCC_ClockConfig+0x1a4>)
 8001110:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8001112:	2000      	movs	r0, #0
 8001114:	f7ff f98e 	bl	8000434 <HAL_InitTick>
}
 8001118:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800111a:	2001      	movs	r0, #1
 800111c:	e7fc      	b.n	8001118 <HAL_RCC_ClockConfig+0x180>
        return HAL_ERROR;
 800111e:	2001      	movs	r0, #1
 8001120:	e7fa      	b.n	8001118 <HAL_RCC_ClockConfig+0x180>
 8001122:	46c0      	nop			; (mov r8, r8)
 8001124:	40022000 	.word	0x40022000
 8001128:	40021000 	.word	0x40021000
 800112c:	00001388 	.word	0x00001388
 8001130:	fffff8ff 	.word	0xfffff8ff
 8001134:	ffffc7ff 	.word	0xffffc7ff
 8001138:	080032a8 	.word	0x080032a8
 800113c:	20000000 	.word	0x20000000

08001140 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8001140:	4b01      	ldr	r3, [pc, #4]	; (8001148 <HAL_RCC_GetHCLKFreq+0x8>)
 8001142:	6818      	ldr	r0, [r3, #0]
}
 8001144:	4770      	bx	lr
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	20000000 	.word	0x20000000

0800114c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800114c:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800114e:	f7ff fff7 	bl	8001140 <HAL_RCC_GetHCLKFreq>
 8001152:	4b04      	ldr	r3, [pc, #16]	; (8001164 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001154:	68da      	ldr	r2, [r3, #12]
 8001156:	0a12      	lsrs	r2, r2, #8
 8001158:	2307      	movs	r3, #7
 800115a:	4013      	ands	r3, r2
 800115c:	4a02      	ldr	r2, [pc, #8]	; (8001168 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800115e:	5cd3      	ldrb	r3, [r2, r3]
 8001160:	40d8      	lsrs	r0, r3
}
 8001162:	bd10      	pop	{r4, pc}
 8001164:	40021000 	.word	0x40021000
 8001168:	080032b8 	.word	0x080032b8

0800116c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800116c:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800116e:	f7ff ffe7 	bl	8001140 <HAL_RCC_GetHCLKFreq>
 8001172:	4b04      	ldr	r3, [pc, #16]	; (8001184 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001174:	68da      	ldr	r2, [r3, #12]
 8001176:	0ad2      	lsrs	r2, r2, #11
 8001178:	2307      	movs	r3, #7
 800117a:	4013      	ands	r3, r2
 800117c:	4a02      	ldr	r2, [pc, #8]	; (8001188 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800117e:	5cd3      	ldrb	r3, [r2, r3]
 8001180:	40d8      	lsrs	r0, r3
}
 8001182:	bd10      	pop	{r4, pc}
 8001184:	40021000 	.word	0x40021000
 8001188:	080032b8 	.word	0x080032b8

0800118c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800118c:	b570      	push	{r4, r5, r6, lr}
 800118e:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001190:	6803      	ldr	r3, [r0, #0]
 8001192:	069b      	lsls	r3, r3, #26
 8001194:	d550      	bpl.n	8001238 <HAL_RCCEx_PeriphCLKConfig+0xac>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001196:	4b6c      	ldr	r3, [pc, #432]	; (8001348 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	d500      	bpl.n	80011a0 <HAL_RCCEx_PeriphCLKConfig+0x14>
 800119e:	e093      	b.n	80012c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011a0:	4a69      	ldr	r2, [pc, #420]	; (8001348 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80011a2:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80011a4:	2380      	movs	r3, #128	; 0x80
 80011a6:	055b      	lsls	r3, r3, #21
 80011a8:	430b      	orrs	r3, r1
 80011aa:	6393      	str	r3, [r2, #56]	; 0x38
      pwrclkchanged = SET;
 80011ac:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ae:	4b67      	ldr	r3, [pc, #412]	; (800134c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	05db      	lsls	r3, r3, #23
 80011b4:	d400      	bmi.n	80011b8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
 80011b6:	e089      	b.n	80012cc <HAL_RCCEx_PeriphCLKConfig+0x140>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80011b8:	4b63      	ldr	r3, [pc, #396]	; (8001348 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80011ba:	6819      	ldr	r1, [r3, #0]
 80011bc:	23c0      	movs	r3, #192	; 0xc0
 80011be:	039b      	lsls	r3, r3, #14
 80011c0:	4019      	ands	r1, r3
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80011c2:	6862      	ldr	r2, [r4, #4]
 80011c4:	4013      	ands	r3, r2
 80011c6:	4299      	cmp	r1, r3
 80011c8:	d006      	beq.n	80011d8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80011ca:	23c0      	movs	r3, #192	; 0xc0
 80011cc:	029b      	lsls	r3, r3, #10
 80011ce:	0011      	movs	r1, r2
 80011d0:	4019      	ands	r1, r3
 80011d2:	4299      	cmp	r1, r3
 80011d4:	d100      	bne.n	80011d8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
 80011d6:	e08e      	b.n	80012f6 <HAL_RCCEx_PeriphCLKConfig+0x16a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80011d8:	4b5b      	ldr	r3, [pc, #364]	; (8001348 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80011da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011dc:	21c0      	movs	r1, #192	; 0xc0
 80011de:	0289      	lsls	r1, r1, #10
 80011e0:	400b      	ands	r3, r1

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80011e2:	d016      	beq.n	8001212 <HAL_RCCEx_PeriphCLKConfig+0x86>
 80011e4:	400a      	ands	r2, r1
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d013      	beq.n	8001212 <HAL_RCCEx_PeriphCLKConfig+0x86>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80011ea:	6823      	ldr	r3, [r4, #0]
 80011ec:	069b      	lsls	r3, r3, #26
 80011ee:	d510      	bpl.n	8001212 <HAL_RCCEx_PeriphCLKConfig+0x86>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80011f0:	4b55      	ldr	r3, [pc, #340]	; (8001348 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80011f2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80011f4:	4a56      	ldr	r2, [pc, #344]	; (8001350 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80011f6:	4002      	ands	r2, r0

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80011f8:	6d1e      	ldr	r6, [r3, #80]	; 0x50
 80011fa:	2180      	movs	r1, #128	; 0x80
 80011fc:	0309      	lsls	r1, r1, #12
 80011fe:	4331      	orrs	r1, r6
 8001200:	6519      	str	r1, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001202:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001204:	4e53      	ldr	r6, [pc, #332]	; (8001354 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001206:	4031      	ands	r1, r6
 8001208:	6519      	str	r1, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800120a:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800120c:	05c3      	lsls	r3, r0, #23
 800120e:	d500      	bpl.n	8001212 <HAL_RCCEx_PeriphCLKConfig+0x86>
 8001210:	e078      	b.n	8001304 <HAL_RCCEx_PeriphCLKConfig+0x178>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001212:	6862      	ldr	r2, [r4, #4]
 8001214:	23c0      	movs	r3, #192	; 0xc0
 8001216:	029b      	lsls	r3, r3, #10
 8001218:	0011      	movs	r1, r2
 800121a:	4019      	ands	r1, r3
 800121c:	4299      	cmp	r1, r3
 800121e:	d100      	bne.n	8001222 <HAL_RCCEx_PeriphCLKConfig+0x96>
 8001220:	e080      	b.n	8001324 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8001222:	4949      	ldr	r1, [pc, #292]	; (8001348 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001224:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 8001226:	22c0      	movs	r2, #192	; 0xc0
 8001228:	0292      	lsls	r2, r2, #10
 800122a:	6860      	ldr	r0, [r4, #4]
 800122c:	4002      	ands	r2, r0
 800122e:	4313      	orrs	r3, r2
 8001230:	650b      	str	r3, [r1, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001232:	2d01      	cmp	r5, #1
 8001234:	d100      	bne.n	8001238 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8001236:	e07f      	b.n	8001338 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001238:	6823      	ldr	r3, [r4, #0]
 800123a:	07db      	lsls	r3, r3, #31
 800123c:	d506      	bpl.n	800124c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800123e:	4a42      	ldr	r2, [pc, #264]	; (8001348 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001240:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001242:	2103      	movs	r1, #3
 8001244:	438b      	bics	r3, r1
 8001246:	68a1      	ldr	r1, [r4, #8]
 8001248:	430b      	orrs	r3, r1
 800124a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800124c:	6823      	ldr	r3, [r4, #0]
 800124e:	079b      	lsls	r3, r3, #30
 8001250:	d506      	bpl.n	8001260 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001252:	4a3d      	ldr	r2, [pc, #244]	; (8001348 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001254:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001256:	210c      	movs	r1, #12
 8001258:	438b      	bics	r3, r1
 800125a:	68e1      	ldr	r1, [r4, #12]
 800125c:	430b      	orrs	r3, r1
 800125e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001260:	6823      	ldr	r3, [r4, #0]
 8001262:	075b      	lsls	r3, r3, #29
 8001264:	d506      	bpl.n	8001274 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001266:	4a38      	ldr	r2, [pc, #224]	; (8001348 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001268:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800126a:	493b      	ldr	r1, [pc, #236]	; (8001358 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800126c:	400b      	ands	r3, r1
 800126e:	6921      	ldr	r1, [r4, #16]
 8001270:	430b      	orrs	r3, r1
 8001272:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001274:	6823      	ldr	r3, [r4, #0]
 8001276:	071b      	lsls	r3, r3, #28
 8001278:	d506      	bpl.n	8001288 <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800127a:	4a33      	ldr	r2, [pc, #204]	; (8001348 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800127c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800127e:	4937      	ldr	r1, [pc, #220]	; (800135c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001280:	400b      	ands	r3, r1
 8001282:	6961      	ldr	r1, [r4, #20]
 8001284:	430b      	orrs	r3, r1
 8001286:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001288:	6823      	ldr	r3, [r4, #0]
 800128a:	05db      	lsls	r3, r3, #23
 800128c:	d506      	bpl.n	800129c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800128e:	4a2e      	ldr	r2, [pc, #184]	; (8001348 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001290:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001292:	492f      	ldr	r1, [pc, #188]	; (8001350 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001294:	400b      	ands	r3, r1
 8001296:	69a1      	ldr	r1, [r4, #24]
 8001298:	430b      	orrs	r3, r1
 800129a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800129c:	6823      	ldr	r3, [r4, #0]
 800129e:	065b      	lsls	r3, r3, #25
 80012a0:	d506      	bpl.n	80012b0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80012a2:	4a29      	ldr	r2, [pc, #164]	; (8001348 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80012a4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80012a6:	492e      	ldr	r1, [pc, #184]	; (8001360 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80012a8:	400b      	ands	r3, r1
 80012aa:	6a21      	ldr	r1, [r4, #32]
 80012ac:	430b      	orrs	r3, r1
 80012ae:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80012b0:	6823      	ldr	r3, [r4, #0]
 80012b2:	061b      	lsls	r3, r3, #24
 80012b4:	d546      	bpl.n	8001344 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80012b6:	4a24      	ldr	r2, [pc, #144]	; (8001348 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80012b8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80012ba:	492a      	ldr	r1, [pc, #168]	; (8001364 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80012bc:	400b      	ands	r3, r1
 80012be:	69e1      	ldr	r1, [r4, #28]
 80012c0:	430b      	orrs	r3, r1
 80012c2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  return HAL_OK;
 80012c4:	2000      	movs	r0, #0
}
 80012c6:	bd70      	pop	{r4, r5, r6, pc}
    FlagStatus       pwrclkchanged = RESET;
 80012c8:	2500      	movs	r5, #0
 80012ca:	e770      	b.n	80011ae <HAL_RCCEx_PeriphCLKConfig+0x22>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012cc:	4a1f      	ldr	r2, [pc, #124]	; (800134c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80012ce:	6811      	ldr	r1, [r2, #0]
 80012d0:	2380      	movs	r3, #128	; 0x80
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	430b      	orrs	r3, r1
 80012d6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80012d8:	f7ff f8e0 	bl	800049c <HAL_GetTick>
 80012dc:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012de:	4b1b      	ldr	r3, [pc, #108]	; (800134c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	05db      	lsls	r3, r3, #23
 80012e4:	d500      	bpl.n	80012e8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80012e6:	e767      	b.n	80011b8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012e8:	f7ff f8d8 	bl	800049c <HAL_GetTick>
 80012ec:	1b80      	subs	r0, r0, r6
 80012ee:	2864      	cmp	r0, #100	; 0x64
 80012f0:	d9f5      	bls.n	80012de <HAL_RCCEx_PeriphCLKConfig+0x152>
          return HAL_TIMEOUT;
 80012f2:	2003      	movs	r0, #3
 80012f4:	e7e7      	b.n	80012c6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80012f6:	4b14      	ldr	r3, [pc, #80]	; (8001348 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	039b      	lsls	r3, r3, #14
 80012fc:	d400      	bmi.n	8001300 <HAL_RCCEx_PeriphCLKConfig+0x174>
 80012fe:	e76b      	b.n	80011d8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
          return HAL_ERROR;
 8001300:	2001      	movs	r0, #1
 8001302:	e7e0      	b.n	80012c6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 8001304:	f7ff f8ca 	bl	800049c <HAL_GetTick>
 8001308:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800130a:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800130c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800130e:	059b      	lsls	r3, r3, #22
 8001310:	d500      	bpl.n	8001314 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8001312:	e77e      	b.n	8001212 <HAL_RCCEx_PeriphCLKConfig+0x86>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001314:	f7ff f8c2 	bl	800049c <HAL_GetTick>
 8001318:	1b80      	subs	r0, r0, r6
 800131a:	4b13      	ldr	r3, [pc, #76]	; (8001368 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800131c:	4298      	cmp	r0, r3
 800131e:	d9f4      	bls.n	800130a <HAL_RCCEx_PeriphCLKConfig+0x17e>
            return HAL_TIMEOUT;
 8001320:	2003      	movs	r0, #3
 8001322:	e7d0      	b.n	80012c6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001324:	4908      	ldr	r1, [pc, #32]	; (8001348 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001326:	680b      	ldr	r3, [r1, #0]
 8001328:	4810      	ldr	r0, [pc, #64]	; (800136c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800132a:	4003      	ands	r3, r0
 800132c:	20c0      	movs	r0, #192	; 0xc0
 800132e:	0380      	lsls	r0, r0, #14
 8001330:	4002      	ands	r2, r0
 8001332:	431a      	orrs	r2, r3
 8001334:	600a      	str	r2, [r1, #0]
 8001336:	e774      	b.n	8001222 <HAL_RCCEx_PeriphCLKConfig+0x96>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001338:	000a      	movs	r2, r1
 800133a:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800133c:	490c      	ldr	r1, [pc, #48]	; (8001370 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800133e:	400b      	ands	r3, r1
 8001340:	6393      	str	r3, [r2, #56]	; 0x38
 8001342:	e779      	b.n	8001238 <HAL_RCCEx_PeriphCLKConfig+0xac>
  return HAL_OK;
 8001344:	2000      	movs	r0, #0
 8001346:	e7be      	b.n	80012c6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
 8001348:	40021000 	.word	0x40021000
 800134c:	40007000 	.word	0x40007000
 8001350:	fffcffff 	.word	0xfffcffff
 8001354:	fff7ffff 	.word	0xfff7ffff
 8001358:	fffff3ff 	.word	0xfffff3ff
 800135c:	ffffcfff 	.word	0xffffcfff
 8001360:	fbffffff 	.word	0xfbffffff
 8001364:	fff3ffff 	.word	0xfff3ffff
 8001368:	00001388 	.word	0x00001388
 800136c:	ffcfffff 	.word	0xffcfffff
 8001370:	efffffff 	.word	0xefffffff

08001374 <HAL_RTC_AlarmAEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8001374:	4770      	bx	lr
	...

08001378 <HAL_RTC_AlarmIRQHandler>:
{
 8001378:	b510      	push	{r4, lr}
 800137a:	0004      	movs	r4, r0
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800137c:	6803      	ldr	r3, [r0, #0]
 800137e:	689a      	ldr	r2, [r3, #8]
 8001380:	04d2      	lsls	r2, r2, #19
 8001382:	d502      	bpl.n	800138a <HAL_RTC_AlarmIRQHandler+0x12>
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	05db      	lsls	r3, r3, #23
 8001388:	d40e      	bmi.n	80013a8 <HAL_RTC_AlarmIRQHandler+0x30>
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800138a:	6823      	ldr	r3, [r4, #0]
 800138c:	689a      	ldr	r2, [r3, #8]
 800138e:	0492      	lsls	r2, r2, #18
 8001390:	d502      	bpl.n	8001398 <HAL_RTC_AlarmIRQHandler+0x20>
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	059b      	lsls	r3, r3, #22
 8001396:	d411      	bmi.n	80013bc <HAL_RTC_AlarmIRQHandler+0x44>
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8001398:	2280      	movs	r2, #128	; 0x80
 800139a:	0292      	lsls	r2, r2, #10
 800139c:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <HAL_RTC_AlarmIRQHandler+0x5c>)
 800139e:	615a      	str	r2, [r3, #20]
  hrtc->State = HAL_RTC_STATE_READY;
 80013a0:	2201      	movs	r2, #1
 80013a2:	2321      	movs	r3, #33	; 0x21
 80013a4:	54e2      	strb	r2, [r4, r3]
}
 80013a6:	bd10      	pop	{r4, pc}
      HAL_RTC_AlarmAEventCallback(hrtc);
 80013a8:	f7ff ffe4 	bl	8001374 <HAL_RTC_AlarmAEventCallback>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80013ac:	6821      	ldr	r1, [r4, #0]
 80013ae:	68ca      	ldr	r2, [r1, #12]
 80013b0:	23ff      	movs	r3, #255	; 0xff
 80013b2:	401a      	ands	r2, r3
 80013b4:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <HAL_RTC_AlarmIRQHandler+0x60>)
 80013b6:	4313      	orrs	r3, r2
 80013b8:	60cb      	str	r3, [r1, #12]
 80013ba:	e7e6      	b.n	800138a <HAL_RTC_AlarmIRQHandler+0x12>
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80013bc:	0020      	movs	r0, r4
 80013be:	f000 fa99 	bl	80018f4 <HAL_RTCEx_AlarmBEventCallback>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80013c2:	6821      	ldr	r1, [r4, #0]
 80013c4:	68ca      	ldr	r2, [r1, #12]
 80013c6:	23ff      	movs	r3, #255	; 0xff
 80013c8:	401a      	ands	r2, r3
 80013ca:	4b04      	ldr	r3, [pc, #16]	; (80013dc <HAL_RTC_AlarmIRQHandler+0x64>)
 80013cc:	4313      	orrs	r3, r2
 80013ce:	60cb      	str	r3, [r1, #12]
 80013d0:	e7e2      	b.n	8001398 <HAL_RTC_AlarmIRQHandler+0x20>
 80013d2:	46c0      	nop			; (mov r8, r8)
 80013d4:	40010400 	.word	0x40010400
 80013d8:	fffffe7f 	.word	0xfffffe7f
 80013dc:	fffffd7f 	.word	0xfffffd7f

080013e0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80013e0:	b570      	push	{r4, r5, r6, lr}
 80013e2:	0004      	movs	r4, r0
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80013e4:	6802      	ldr	r2, [r0, #0]
 80013e6:	68d3      	ldr	r3, [r2, #12]
 80013e8:	21a0      	movs	r1, #160	; 0xa0
 80013ea:	438b      	bics	r3, r1
 80013ec:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80013ee:	f7ff f855 	bl	800049c <HAL_GetTick>
 80013f2:	0005      	movs	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80013f4:	6823      	ldr	r3, [r4, #0]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	069b      	lsls	r3, r3, #26
 80013fa:	d408      	bmi.n	800140e <HAL_RTC_WaitForSynchro+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80013fc:	f7ff f84e 	bl	800049c <HAL_GetTick>
 8001400:	1b40      	subs	r0, r0, r5
 8001402:	23fa      	movs	r3, #250	; 0xfa
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4298      	cmp	r0, r3
 8001408:	d9f4      	bls.n	80013f4 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 800140a:	2003      	movs	r0, #3
 800140c:	e000      	b.n	8001410 <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 800140e:	2000      	movs	r0, #0
}
 8001410:	bd70      	pop	{r4, r5, r6, pc}

08001412 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001412:	b570      	push	{r4, r5, r6, lr}
 8001414:	0004      	movs	r4, r0
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8001416:	6803      	ldr	r3, [r0, #0]
 8001418:	68da      	ldr	r2, [r3, #12]
 800141a:	0652      	lsls	r2, r2, #25
 800141c:	d501      	bpl.n	8001422 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800141e:	2000      	movs	r0, #0
}
 8001420:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8001422:	2201      	movs	r2, #1
 8001424:	4252      	negs	r2, r2
 8001426:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8001428:	f7ff f838 	bl	800049c <HAL_GetTick>
 800142c:	0005      	movs	r5, r0
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800142e:	6823      	ldr	r3, [r4, #0]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	065b      	lsls	r3, r3, #25
 8001434:	d408      	bmi.n	8001448 <RTC_EnterInitMode+0x36>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8001436:	f7ff f831 	bl	800049c <HAL_GetTick>
 800143a:	1b40      	subs	r0, r0, r5
 800143c:	23fa      	movs	r3, #250	; 0xfa
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	4298      	cmp	r0, r3
 8001442:	d9f4      	bls.n	800142e <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8001444:	2003      	movs	r0, #3
 8001446:	e7eb      	b.n	8001420 <RTC_EnterInitMode+0xe>
  return HAL_OK;
 8001448:	2000      	movs	r0, #0
 800144a:	e7e9      	b.n	8001420 <RTC_EnterInitMode+0xe>

0800144c <HAL_RTC_Init>:
{
 800144c:	b570      	push	{r4, r5, r6, lr}
 800144e:	1e04      	subs	r4, r0, #0
  if (hrtc == NULL)
 8001450:	d063      	beq.n	800151a <HAL_RTC_Init+0xce>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001452:	2321      	movs	r3, #33	; 0x21
 8001454:	5cc3      	ldrb	r3, [r0, r3]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d041      	beq.n	80014de <HAL_RTC_Init+0x92>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800145a:	2202      	movs	r2, #2
 800145c:	2321      	movs	r3, #33	; 0x21
 800145e:	54e2      	strb	r2, [r4, r3]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001460:	6823      	ldr	r3, [r4, #0]
 8001462:	32c8      	adds	r2, #200	; 0xc8
 8001464:	625a      	str	r2, [r3, #36]	; 0x24
 8001466:	6823      	ldr	r3, [r4, #0]
 8001468:	3a77      	subs	r2, #119	; 0x77
 800146a:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800146c:	0020      	movs	r0, r4
 800146e:	f7ff ffd0 	bl	8001412 <RTC_EnterInitMode>
 8001472:	1e05      	subs	r5, r0, #0
 8001474:	d139      	bne.n	80014ea <HAL_RTC_Init+0x9e>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001476:	6822      	ldr	r2, [r4, #0]
 8001478:	6893      	ldr	r3, [r2, #8]
 800147a:	4929      	ldr	r1, [pc, #164]	; (8001520 <HAL_RTC_Init+0xd4>)
 800147c:	400b      	ands	r3, r1
 800147e:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001480:	6821      	ldr	r1, [r4, #0]
 8001482:	688a      	ldr	r2, [r1, #8]
 8001484:	6863      	ldr	r3, [r4, #4]
 8001486:	6920      	ldr	r0, [r4, #16]
 8001488:	4303      	orrs	r3, r0
 800148a:	69a0      	ldr	r0, [r4, #24]
 800148c:	4303      	orrs	r3, r0
 800148e:	4313      	orrs	r3, r2
 8001490:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001492:	6823      	ldr	r3, [r4, #0]
 8001494:	68e2      	ldr	r2, [r4, #12]
 8001496:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001498:	6821      	ldr	r1, [r4, #0]
 800149a:	690b      	ldr	r3, [r1, #16]
 800149c:	68a2      	ldr	r2, [r4, #8]
 800149e:	0412      	lsls	r2, r2, #16
 80014a0:	4313      	orrs	r3, r2
 80014a2:	610b      	str	r3, [r1, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80014a4:	6822      	ldr	r2, [r4, #0]
 80014a6:	68d3      	ldr	r3, [r2, #12]
 80014a8:	2180      	movs	r1, #128	; 0x80
 80014aa:	438b      	bics	r3, r1
 80014ac:	60d3      	str	r3, [r2, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80014ae:	6822      	ldr	r2, [r4, #0]
 80014b0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80014b2:	397d      	subs	r1, #125	; 0x7d
 80014b4:	438b      	bics	r3, r1
 80014b6:	64d3      	str	r3, [r2, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80014b8:	6821      	ldr	r1, [r4, #0]
 80014ba:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 80014bc:	69e2      	ldr	r2, [r4, #28]
 80014be:	6960      	ldr	r0, [r4, #20]
 80014c0:	4302      	orrs	r2, r0
 80014c2:	4313      	orrs	r3, r2
 80014c4:	64cb      	str	r3, [r1, #76]	; 0x4c
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80014c6:	6823      	ldr	r3, [r4, #0]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	069b      	lsls	r3, r3, #26
 80014cc:	d515      	bpl.n	80014fa <HAL_RTC_Init+0xae>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80014ce:	6823      	ldr	r3, [r4, #0]
 80014d0:	22ff      	movs	r2, #255	; 0xff
 80014d2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80014d4:	3afe      	subs	r2, #254	; 0xfe
 80014d6:	2321      	movs	r3, #33	; 0x21
 80014d8:	54e2      	strb	r2, [r4, r3]
}
 80014da:	0028      	movs	r0, r5
 80014dc:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Lock = HAL_UNLOCKED;
 80014de:	2200      	movs	r2, #0
 80014e0:	3320      	adds	r3, #32
 80014e2:	54c2      	strb	r2, [r0, r3]
    HAL_RTC_MspInit(hrtc);
 80014e4:	f001 f906 	bl	80026f4 <HAL_RTC_MspInit>
 80014e8:	e7b7      	b.n	800145a <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80014ea:	6823      	ldr	r3, [r4, #0]
 80014ec:	22ff      	movs	r2, #255	; 0xff
 80014ee:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80014f0:	3afb      	subs	r2, #251	; 0xfb
 80014f2:	2321      	movs	r3, #33	; 0x21
 80014f4:	54e2      	strb	r2, [r4, r3]
    return HAL_ERROR;
 80014f6:	2501      	movs	r5, #1
 80014f8:	e7ef      	b.n	80014da <HAL_RTC_Init+0x8e>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80014fa:	0020      	movs	r0, r4
 80014fc:	f7ff ff70 	bl	80013e0 <HAL_RTC_WaitForSynchro>
 8001500:	2800      	cmp	r0, #0
 8001502:	d0e4      	beq.n	80014ce <HAL_RTC_Init+0x82>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001504:	6823      	ldr	r3, [r4, #0]
 8001506:	22ff      	movs	r2, #255	; 0xff
 8001508:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800150a:	3afb      	subs	r2, #251	; 0xfb
 800150c:	2321      	movs	r3, #33	; 0x21
 800150e:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hrtc);
 8001510:	2200      	movs	r2, #0
 8001512:	3b01      	subs	r3, #1
 8001514:	54e2      	strb	r2, [r4, r3]
        return HAL_ERROR;
 8001516:	2501      	movs	r5, #1
 8001518:	e7df      	b.n	80014da <HAL_RTC_Init+0x8e>
    return HAL_ERROR;
 800151a:	2501      	movs	r5, #1
 800151c:	e7dd      	b.n	80014da <HAL_RTC_Init+0x8e>
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	ff8fffbf 	.word	0xff8fffbf

08001524 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8001524:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while (Param >= 10U)
 8001526:	e002      	b.n	800152e <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8001528:	3301      	adds	r3, #1
    Param -= 10U;
 800152a:	380a      	subs	r0, #10
 800152c:	b2c0      	uxtb	r0, r0
  while (Param >= 10U)
 800152e:	2809      	cmp	r0, #9
 8001530:	d8fa      	bhi.n	8001528 <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8001532:	011b      	lsls	r3, r3, #4
 8001534:	b2db      	uxtb	r3, r3
 8001536:	4318      	orrs	r0, r3
}
 8001538:	4770      	bx	lr
	...

0800153c <HAL_RTC_SetTime>:
{
 800153c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800153e:	0004      	movs	r4, r0
 8001540:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 8001542:	2320      	movs	r3, #32
 8001544:	5cc3      	ldrb	r3, [r0, r3]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d077      	beq.n	800163a <HAL_RTC_SetTime+0xfe>
 800154a:	2101      	movs	r1, #1
 800154c:	2320      	movs	r3, #32
 800154e:	54c1      	strb	r1, [r0, r3]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001550:	3101      	adds	r1, #1
 8001552:	3301      	adds	r3, #1
 8001554:	54c1      	strb	r1, [r0, r3]
  if (Format == RTC_FORMAT_BIN)
 8001556:	2a00      	cmp	r2, #0
 8001558:	d143      	bne.n	80015e2 <HAL_RTC_SetTime+0xa6>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800155a:	6803      	ldr	r3, [r0, #0]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	065b      	lsls	r3, r3, #25
 8001560:	d401      	bmi.n	8001566 <HAL_RTC_SetTime+0x2a>
      sTime->TimeFormat = 0x00U;
 8001562:	2300      	movs	r3, #0
 8001564:	70f3      	strb	r3, [r6, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001566:	7830      	ldrb	r0, [r6, #0]
 8001568:	f7ff ffdc 	bl	8001524 <RTC_ByteToBcd2>
 800156c:	0405      	lsls	r5, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800156e:	7870      	ldrb	r0, [r6, #1]
 8001570:	f7ff ffd8 	bl	8001524 <RTC_ByteToBcd2>
 8001574:	0200      	lsls	r0, r0, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001576:	4305      	orrs	r5, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8001578:	78b0      	ldrb	r0, [r6, #2]
 800157a:	f7ff ffd3 	bl	8001524 <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800157e:	4305      	orrs	r5, r0
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8001580:	78f0      	ldrb	r0, [r6, #3]
 8001582:	0400      	lsls	r0, r0, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001584:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001586:	6823      	ldr	r3, [r4, #0]
 8001588:	22ca      	movs	r2, #202	; 0xca
 800158a:	625a      	str	r2, [r3, #36]	; 0x24
 800158c:	6823      	ldr	r3, [r4, #0]
 800158e:	3a77      	subs	r2, #119	; 0x77
 8001590:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001592:	0020      	movs	r0, r4
 8001594:	f7ff ff3d 	bl	8001412 <RTC_EnterInitMode>
 8001598:	1e07      	subs	r7, r0, #0
 800159a:	d133      	bne.n	8001604 <HAL_RTC_SetTime+0xc8>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800159c:	6823      	ldr	r3, [r4, #0]
 800159e:	4828      	ldr	r0, [pc, #160]	; (8001640 <HAL_RTC_SetTime+0x104>)
 80015a0:	4005      	ands	r5, r0
 80015a2:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80015a4:	6822      	ldr	r2, [r4, #0]
 80015a6:	6893      	ldr	r3, [r2, #8]
 80015a8:	4926      	ldr	r1, [pc, #152]	; (8001644 <HAL_RTC_SetTime+0x108>)
 80015aa:	400b      	ands	r3, r1
 80015ac:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80015ae:	6821      	ldr	r1, [r4, #0]
 80015b0:	688b      	ldr	r3, [r1, #8]
 80015b2:	68f2      	ldr	r2, [r6, #12]
 80015b4:	6930      	ldr	r0, [r6, #16]
 80015b6:	4302      	orrs	r2, r0
 80015b8:	4313      	orrs	r3, r2
 80015ba:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80015bc:	6822      	ldr	r2, [r4, #0]
 80015be:	68d3      	ldr	r3, [r2, #12]
 80015c0:	2180      	movs	r1, #128	; 0x80
 80015c2:	438b      	bics	r3, r1
 80015c4:	60d3      	str	r3, [r2, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80015c6:	6823      	ldr	r3, [r4, #0]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	069b      	lsls	r3, r3, #26
 80015cc:	d525      	bpl.n	800161a <HAL_RTC_SetTime+0xde>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80015ce:	6823      	ldr	r3, [r4, #0]
 80015d0:	22ff      	movs	r2, #255	; 0xff
 80015d2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80015d4:	3afe      	subs	r2, #254	; 0xfe
 80015d6:	2321      	movs	r3, #33	; 0x21
 80015d8:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(hrtc);
 80015da:	2200      	movs	r2, #0
 80015dc:	3b01      	subs	r3, #1
 80015de:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 80015e0:	e02c      	b.n	800163c <HAL_RTC_SetTime+0x100>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80015e2:	6803      	ldr	r3, [r0, #0]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	065b      	lsls	r3, r3, #25
 80015e8:	d401      	bmi.n	80015ee <HAL_RTC_SetTime+0xb2>
      sTime->TimeFormat = 0x00U;
 80015ea:	2300      	movs	r3, #0
 80015ec:	70f3      	strb	r3, [r6, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80015ee:	7835      	ldrb	r5, [r6, #0]
 80015f0:	042d      	lsls	r5, r5, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80015f2:	7870      	ldrb	r0, [r6, #1]
 80015f4:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80015f6:	4305      	orrs	r5, r0
              ((uint32_t)sTime->Seconds) | \
 80015f8:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80015fa:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80015fc:	78f0      	ldrb	r0, [r6, #3]
 80015fe:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001600:	4305      	orrs	r5, r0
 8001602:	e7c0      	b.n	8001586 <HAL_RTC_SetTime+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001604:	6823      	ldr	r3, [r4, #0]
 8001606:	22ff      	movs	r2, #255	; 0xff
 8001608:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800160a:	3afb      	subs	r2, #251	; 0xfb
 800160c:	2321      	movs	r3, #33	; 0x21
 800160e:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(hrtc);
 8001610:	2200      	movs	r2, #0
 8001612:	3b01      	subs	r3, #1
 8001614:	54e2      	strb	r2, [r4, r3]
    return HAL_ERROR;
 8001616:	2701      	movs	r7, #1
 8001618:	e010      	b.n	800163c <HAL_RTC_SetTime+0x100>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800161a:	0020      	movs	r0, r4
 800161c:	f7ff fee0 	bl	80013e0 <HAL_RTC_WaitForSynchro>
 8001620:	2800      	cmp	r0, #0
 8001622:	d0d4      	beq.n	80015ce <HAL_RTC_SetTime+0x92>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001624:	6823      	ldr	r3, [r4, #0]
 8001626:	22ff      	movs	r2, #255	; 0xff
 8001628:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800162a:	3afb      	subs	r2, #251	; 0xfb
 800162c:	2321      	movs	r3, #33	; 0x21
 800162e:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hrtc);
 8001630:	2200      	movs	r2, #0
 8001632:	3b01      	subs	r3, #1
 8001634:	54e2      	strb	r2, [r4, r3]
        return HAL_ERROR;
 8001636:	2701      	movs	r7, #1
 8001638:	e000      	b.n	800163c <HAL_RTC_SetTime+0x100>
  __HAL_LOCK(hrtc);
 800163a:	2702      	movs	r7, #2
}
 800163c:	0038      	movs	r0, r7
 800163e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001640:	007f7f7f 	.word	0x007f7f7f
 8001644:	fffbffff 	.word	0xfffbffff

08001648 <HAL_RTC_SetDate>:
{
 8001648:	b570      	push	{r4, r5, r6, lr}
 800164a:	0004      	movs	r4, r0
 800164c:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 800164e:	2320      	movs	r3, #32
 8001650:	5cc3      	ldrb	r3, [r0, r3]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d068      	beq.n	8001728 <HAL_RTC_SetDate+0xe0>
 8001656:	2101      	movs	r1, #1
 8001658:	2320      	movs	r3, #32
 800165a:	54c1      	strb	r1, [r0, r3]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800165c:	3101      	adds	r1, #1
 800165e:	3301      	adds	r3, #1
 8001660:	54c1      	strb	r1, [r0, r3]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001662:	2a00      	cmp	r2, #0
 8001664:	d106      	bne.n	8001674 <HAL_RTC_SetDate+0x2c>
 8001666:	7873      	ldrb	r3, [r6, #1]
 8001668:	06d9      	lsls	r1, r3, #27
 800166a:	d503      	bpl.n	8001674 <HAL_RTC_SetDate+0x2c>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800166c:	2110      	movs	r1, #16
 800166e:	438b      	bics	r3, r1
 8001670:	330a      	adds	r3, #10
 8001672:	7073      	strb	r3, [r6, #1]
  if (Format == RTC_FORMAT_BIN)
 8001674:	2a00      	cmp	r2, #0
 8001676:	d131      	bne.n	80016dc <HAL_RTC_SetDate+0x94>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001678:	78f0      	ldrb	r0, [r6, #3]
 800167a:	f7ff ff53 	bl	8001524 <RTC_ByteToBcd2>
 800167e:	0405      	lsls	r5, r0, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8001680:	7870      	ldrb	r0, [r6, #1]
 8001682:	f7ff ff4f 	bl	8001524 <RTC_ByteToBcd2>
 8001686:	0200      	lsls	r0, r0, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001688:	4305      	orrs	r5, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800168a:	78b0      	ldrb	r0, [r6, #2]
 800168c:	f7ff ff4a 	bl	8001524 <RTC_ByteToBcd2>
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8001690:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->WeekDay << 13U));
 8001692:	7830      	ldrb	r0, [r6, #0]
 8001694:	0340      	lsls	r0, r0, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001696:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001698:	6823      	ldr	r3, [r4, #0]
 800169a:	22ca      	movs	r2, #202	; 0xca
 800169c:	625a      	str	r2, [r3, #36]	; 0x24
 800169e:	6823      	ldr	r3, [r4, #0]
 80016a0:	3a77      	subs	r2, #119	; 0x77
 80016a2:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80016a4:	0020      	movs	r0, r4
 80016a6:	f7ff feb4 	bl	8001412 <RTC_EnterInitMode>
 80016aa:	1e06      	subs	r6, r0, #0
 80016ac:	d121      	bne.n	80016f2 <HAL_RTC_SetDate+0xaa>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80016ae:	6823      	ldr	r3, [r4, #0]
 80016b0:	481f      	ldr	r0, [pc, #124]	; (8001730 <HAL_RTC_SetDate+0xe8>)
 80016b2:	4005      	ands	r5, r0
 80016b4:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80016b6:	6822      	ldr	r2, [r4, #0]
 80016b8:	68d3      	ldr	r3, [r2, #12]
 80016ba:	2180      	movs	r1, #128	; 0x80
 80016bc:	438b      	bics	r3, r1
 80016be:	60d3      	str	r3, [r2, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80016c0:	6823      	ldr	r3, [r4, #0]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	069b      	lsls	r3, r3, #26
 80016c6:	d51f      	bpl.n	8001708 <HAL_RTC_SetDate+0xc0>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80016c8:	6823      	ldr	r3, [r4, #0]
 80016ca:	22ff      	movs	r2, #255	; 0xff
 80016cc:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 80016ce:	3afe      	subs	r2, #254	; 0xfe
 80016d0:	2321      	movs	r3, #33	; 0x21
 80016d2:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(hrtc);
 80016d4:	2200      	movs	r2, #0
 80016d6:	3b01      	subs	r3, #1
 80016d8:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 80016da:	e026      	b.n	800172a <HAL_RTC_SetDate+0xe2>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80016dc:	78f5      	ldrb	r5, [r6, #3]
 80016de:	042d      	lsls	r5, r5, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80016e0:	7870      	ldrb	r0, [r6, #1]
 80016e2:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80016e4:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->Date) | \
 80016e6:	78b0      	ldrb	r0, [r6, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80016e8:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13U));
 80016ea:	7830      	ldrb	r0, [r6, #0]
 80016ec:	0340      	lsls	r0, r0, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80016ee:	4305      	orrs	r5, r0
 80016f0:	e7d2      	b.n	8001698 <HAL_RTC_SetDate+0x50>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80016f2:	6823      	ldr	r3, [r4, #0]
 80016f4:	22ff      	movs	r2, #255	; 0xff
 80016f6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80016f8:	3afb      	subs	r2, #251	; 0xfb
 80016fa:	2321      	movs	r3, #33	; 0x21
 80016fc:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(hrtc);
 80016fe:	2200      	movs	r2, #0
 8001700:	3b01      	subs	r3, #1
 8001702:	54e2      	strb	r2, [r4, r3]
    return HAL_ERROR;
 8001704:	2601      	movs	r6, #1
 8001706:	e010      	b.n	800172a <HAL_RTC_SetDate+0xe2>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001708:	0020      	movs	r0, r4
 800170a:	f7ff fe69 	bl	80013e0 <HAL_RTC_WaitForSynchro>
 800170e:	2800      	cmp	r0, #0
 8001710:	d0da      	beq.n	80016c8 <HAL_RTC_SetDate+0x80>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001712:	6823      	ldr	r3, [r4, #0]
 8001714:	22ff      	movs	r2, #255	; 0xff
 8001716:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001718:	3afb      	subs	r2, #251	; 0xfb
 800171a:	2321      	movs	r3, #33	; 0x21
 800171c:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hrtc);
 800171e:	2200      	movs	r2, #0
 8001720:	3b01      	subs	r3, #1
 8001722:	54e2      	strb	r2, [r4, r3]
        return HAL_ERROR;
 8001724:	2601      	movs	r6, #1
 8001726:	e000      	b.n	800172a <HAL_RTC_SetDate+0xe2>
  __HAL_LOCK(hrtc);
 8001728:	2602      	movs	r6, #2
}
 800172a:	0030      	movs	r0, r6
 800172c:	bd70      	pop	{r4, r5, r6, pc}
 800172e:	46c0      	nop			; (mov r8, r8)
 8001730:	00ffff3f 	.word	0x00ffff3f

08001734 <HAL_RTC_SetAlarm_IT>:
{
 8001734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001736:	0004      	movs	r4, r0
 8001738:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 800173a:	2320      	movs	r3, #32
 800173c:	5cc3      	ldrb	r3, [r0, r3]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d100      	bne.n	8001744 <HAL_RTC_SetAlarm_IT+0x10>
 8001742:	e0cb      	b.n	80018dc <HAL_RTC_SetAlarm_IT+0x1a8>
 8001744:	2101      	movs	r1, #1
 8001746:	2320      	movs	r3, #32
 8001748:	54c1      	strb	r1, [r0, r3]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800174a:	3101      	adds	r1, #1
 800174c:	3301      	adds	r3, #1
 800174e:	54c1      	strb	r1, [r0, r3]
  if (Format == RTC_FORMAT_BIN)
 8001750:	2a00      	cmp	r2, #0
 8001752:	d152      	bne.n	80017fa <HAL_RTC_SetAlarm_IT+0xc6>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001754:	6803      	ldr	r3, [r0, #0]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	065b      	lsls	r3, r3, #25
 800175a:	d401      	bmi.n	8001760 <HAL_RTC_SetAlarm_IT+0x2c>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800175c:	2300      	movs	r3, #0
 800175e:	70eb      	strb	r3, [r5, #3]
    if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8001760:	69ee      	ldr	r6, [r5, #28]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001762:	7828      	ldrb	r0, [r5, #0]
 8001764:	f7ff fede 	bl	8001524 <RTC_ByteToBcd2>
 8001768:	0407      	lsls	r7, r0, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800176a:	7868      	ldrb	r0, [r5, #1]
 800176c:	f7ff feda 	bl	8001524 <RTC_ByteToBcd2>
 8001770:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001772:	4307      	orrs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8001774:	78a8      	ldrb	r0, [r5, #2]
 8001776:	f7ff fed5 	bl	8001524 <RTC_ByteToBcd2>
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800177a:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800177c:	78e8      	ldrb	r0, [r5, #3]
 800177e:	0400      	lsls	r0, r0, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8001780:	4307      	orrs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001782:	2320      	movs	r3, #32
 8001784:	5ce8      	ldrb	r0, [r5, r3]
 8001786:	f7ff fecd 	bl	8001524 <RTC_ByteToBcd2>
 800178a:	0600      	lsls	r0, r0, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800178c:	4307      	orrs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800178e:	433e      	orrs	r6, r7
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001790:	696b      	ldr	r3, [r5, #20]
 8001792:	431e      	orrs	r6, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8001794:	686f      	ldr	r7, [r5, #4]
 8001796:	69ab      	ldr	r3, [r5, #24]
 8001798:	431f      	orrs	r7, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800179a:	6823      	ldr	r3, [r4, #0]
 800179c:	22ca      	movs	r2, #202	; 0xca
 800179e:	625a      	str	r2, [r3, #36]	; 0x24
 80017a0:	6823      	ldr	r3, [r4, #0]
 80017a2:	3a77      	subs	r2, #119	; 0x77
 80017a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 80017a6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80017a8:	2380      	movs	r3, #128	; 0x80
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d03d      	beq.n	800182c <HAL_RTC_SetAlarm_IT+0xf8>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80017b0:	6822      	ldr	r2, [r4, #0]
 80017b2:	6893      	ldr	r3, [r2, #8]
 80017b4:	494a      	ldr	r1, [pc, #296]	; (80018e0 <HAL_RTC_SetAlarm_IT+0x1ac>)
 80017b6:	400b      	ands	r3, r1
 80017b8:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80017ba:	6821      	ldr	r1, [r4, #0]
 80017bc:	68ca      	ldr	r2, [r1, #12]
 80017be:	23ff      	movs	r3, #255	; 0xff
 80017c0:	401a      	ands	r2, r3
 80017c2:	4b48      	ldr	r3, [pc, #288]	; (80018e4 <HAL_RTC_SetAlarm_IT+0x1b0>)
 80017c4:	4313      	orrs	r3, r2
 80017c6:	60cb      	str	r3, [r1, #12]
    tickstart = HAL_GetTick();
 80017c8:	f7fe fe68 	bl	800049c <HAL_GetTick>
 80017cc:	0005      	movs	r5, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80017ce:	6823      	ldr	r3, [r4, #0]
 80017d0:	68da      	ldr	r2, [r3, #12]
 80017d2:	0792      	lsls	r2, r2, #30
 80017d4:	d45f      	bmi.n	8001896 <HAL_RTC_SetAlarm_IT+0x162>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80017d6:	f7fe fe61 	bl	800049c <HAL_GetTick>
 80017da:	1b40      	subs	r0, r0, r5
 80017dc:	23fa      	movs	r3, #250	; 0xfa
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4298      	cmp	r0, r3
 80017e2:	d9f4      	bls.n	80017ce <HAL_RTC_SetAlarm_IT+0x9a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80017e4:	6823      	ldr	r3, [r4, #0]
 80017e6:	22ff      	movs	r2, #255	; 0xff
 80017e8:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80017ea:	3afc      	subs	r2, #252	; 0xfc
 80017ec:	2321      	movs	r3, #33	; 0x21
 80017ee:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hrtc);
 80017f0:	2200      	movs	r2, #0
 80017f2:	3b01      	subs	r3, #1
 80017f4:	54e2      	strb	r2, [r4, r3]
        return HAL_TIMEOUT;
 80017f6:	2003      	movs	r0, #3
 80017f8:	e071      	b.n	80018de <HAL_RTC_SetAlarm_IT+0x1aa>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80017fa:	6803      	ldr	r3, [r0, #0]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	065b      	lsls	r3, r3, #25
 8001800:	d401      	bmi.n	8001806 <HAL_RTC_SetAlarm_IT+0xd2>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8001802:	2300      	movs	r3, #0
 8001804:	70eb      	strb	r3, [r5, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8001806:	782e      	ldrb	r6, [r5, #0]
 8001808:	0436      	lsls	r6, r6, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800180a:	786b      	ldrb	r3, [r5, #1]
 800180c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800180e:	431e      	orrs	r6, r3
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8001810:	78ab      	ldrb	r3, [r5, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001812:	431e      	orrs	r6, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001814:	78eb      	ldrb	r3, [r5, #3]
 8001816:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8001818:	431e      	orrs	r6, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800181a:	2320      	movs	r3, #32
 800181c:	5ceb      	ldrb	r3, [r5, r3]
 800181e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001820:	431e      	orrs	r6, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001822:	69eb      	ldr	r3, [r5, #28]
 8001824:	431e      	orrs	r6, r3
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8001826:	696b      	ldr	r3, [r5, #20]
 8001828:	431e      	orrs	r6, r3
 800182a:	e7b3      	b.n	8001794 <HAL_RTC_SetAlarm_IT+0x60>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800182c:	6822      	ldr	r2, [r4, #0]
 800182e:	6893      	ldr	r3, [r2, #8]
 8001830:	492d      	ldr	r1, [pc, #180]	; (80018e8 <HAL_RTC_SetAlarm_IT+0x1b4>)
 8001832:	400b      	ands	r3, r1
 8001834:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8001836:	6821      	ldr	r1, [r4, #0]
 8001838:	68ca      	ldr	r2, [r1, #12]
 800183a:	23ff      	movs	r3, #255	; 0xff
 800183c:	401a      	ands	r2, r3
 800183e:	4b2b      	ldr	r3, [pc, #172]	; (80018ec <HAL_RTC_SetAlarm_IT+0x1b8>)
 8001840:	4313      	orrs	r3, r2
 8001842:	60cb      	str	r3, [r1, #12]
    tickstart = HAL_GetTick();
 8001844:	f7fe fe2a 	bl	800049c <HAL_GetTick>
 8001848:	0005      	movs	r5, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800184a:	6823      	ldr	r3, [r4, #0]
 800184c:	68da      	ldr	r2, [r3, #12]
 800184e:	07d2      	lsls	r2, r2, #31
 8001850:	d411      	bmi.n	8001876 <HAL_RTC_SetAlarm_IT+0x142>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001852:	f7fe fe23 	bl	800049c <HAL_GetTick>
 8001856:	1b40      	subs	r0, r0, r5
 8001858:	23fa      	movs	r3, #250	; 0xfa
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4298      	cmp	r0, r3
 800185e:	d9f4      	bls.n	800184a <HAL_RTC_SetAlarm_IT+0x116>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001860:	6823      	ldr	r3, [r4, #0]
 8001862:	22ff      	movs	r2, #255	; 0xff
 8001864:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001866:	3afc      	subs	r2, #252	; 0xfc
 8001868:	2321      	movs	r3, #33	; 0x21
 800186a:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hrtc);
 800186c:	2200      	movs	r2, #0
 800186e:	3b01      	subs	r3, #1
 8001870:	54e2      	strb	r2, [r4, r3]
        return HAL_TIMEOUT;
 8001872:	2003      	movs	r0, #3
 8001874:	e033      	b.n	80018de <HAL_RTC_SetAlarm_IT+0x1aa>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8001876:	61de      	str	r6, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8001878:	6823      	ldr	r3, [r4, #0]
 800187a:	645f      	str	r7, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800187c:	6822      	ldr	r2, [r4, #0]
 800187e:	6891      	ldr	r1, [r2, #8]
 8001880:	2380      	movs	r3, #128	; 0x80
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	430b      	orrs	r3, r1
 8001886:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8001888:	6822      	ldr	r2, [r4, #0]
 800188a:	6891      	ldr	r1, [r2, #8]
 800188c:	2380      	movs	r3, #128	; 0x80
 800188e:	015b      	lsls	r3, r3, #5
 8001890:	430b      	orrs	r3, r1
 8001892:	6093      	str	r3, [r2, #8]
 8001894:	e00e      	b.n	80018b4 <HAL_RTC_SetAlarm_IT+0x180>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8001896:	621e      	str	r6, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8001898:	6823      	ldr	r3, [r4, #0]
 800189a:	649f      	str	r7, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800189c:	6822      	ldr	r2, [r4, #0]
 800189e:	6891      	ldr	r1, [r2, #8]
 80018a0:	2380      	movs	r3, #128	; 0x80
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	430b      	orrs	r3, r1
 80018a6:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80018a8:	6822      	ldr	r2, [r4, #0]
 80018aa:	6891      	ldr	r1, [r2, #8]
 80018ac:	2380      	movs	r3, #128	; 0x80
 80018ae:	019b      	lsls	r3, r3, #6
 80018b0:	430b      	orrs	r3, r1
 80018b2:	6093      	str	r3, [r2, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80018b4:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <HAL_RTC_SetAlarm_IT+0x1bc>)
 80018b6:	6819      	ldr	r1, [r3, #0]
 80018b8:	2280      	movs	r2, #128	; 0x80
 80018ba:	0292      	lsls	r2, r2, #10
 80018bc:	4311      	orrs	r1, r2
 80018be:	6019      	str	r1, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80018c0:	6899      	ldr	r1, [r3, #8]
 80018c2:	430a      	orrs	r2, r1
 80018c4:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80018c6:	6823      	ldr	r3, [r4, #0]
 80018c8:	22ff      	movs	r2, #255	; 0xff
 80018ca:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 80018cc:	3afe      	subs	r2, #254	; 0xfe
 80018ce:	2321      	movs	r3, #33	; 0x21
 80018d0:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hrtc);
 80018d2:	2200      	movs	r2, #0
 80018d4:	3b01      	subs	r3, #1
 80018d6:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 80018d8:	2000      	movs	r0, #0
 80018da:	e000      	b.n	80018de <HAL_RTC_SetAlarm_IT+0x1aa>
  __HAL_LOCK(hrtc);
 80018dc:	2002      	movs	r0, #2
}
 80018de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018e0:	fffffdff 	.word	0xfffffdff
 80018e4:	fffffd7f 	.word	0xfffffd7f
 80018e8:	fffffeff 	.word	0xfffffeff
 80018ec:	fffffe7f 	.word	0xfffffe7f
 80018f0:	40010400 	.word	0x40010400

080018f4 <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80018f4:	4770      	bx	lr
	...

080018f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80018f8:	b570      	push	{r4, r5, r6, lr}
 80018fa:	1e04      	subs	r4, r0, #0
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80018fc:	d03b      	beq.n	8001976 <HAL_SPI_Init+0x7e>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018fe:	2300      	movs	r3, #0
 8001900:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001902:	3351      	adds	r3, #81	; 0x51
 8001904:	5cc3      	ldrb	r3, [r0, r3]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d02f      	beq.n	800196a <HAL_SPI_Init+0x72>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800190a:	2151      	movs	r1, #81	; 0x51
 800190c:	2302      	movs	r3, #2
 800190e:	5463      	strb	r3, [r4, r1]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001910:	6822      	ldr	r2, [r4, #0]
 8001912:	6813      	ldr	r3, [r2, #0]
 8001914:	2040      	movs	r0, #64	; 0x40
 8001916:	4383      	bics	r3, r0
 8001918:	6013      	str	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800191a:	6822      	ldr	r2, [r4, #0]
 800191c:	6863      	ldr	r3, [r4, #4]
 800191e:	68a0      	ldr	r0, [r4, #8]
 8001920:	4303      	orrs	r3, r0
 8001922:	68e0      	ldr	r0, [r4, #12]
 8001924:	4303      	orrs	r3, r0
 8001926:	6920      	ldr	r0, [r4, #16]
 8001928:	4303      	orrs	r3, r0
 800192a:	6960      	ldr	r0, [r4, #20]
 800192c:	4303      	orrs	r3, r0
 800192e:	2080      	movs	r0, #128	; 0x80
 8001930:	0080      	lsls	r0, r0, #2
 8001932:	69a5      	ldr	r5, [r4, #24]
 8001934:	4028      	ands	r0, r5
 8001936:	4303      	orrs	r3, r0
 8001938:	69e0      	ldr	r0, [r4, #28]
 800193a:	4303      	orrs	r3, r0
 800193c:	6a20      	ldr	r0, [r4, #32]
 800193e:	4303      	orrs	r3, r0
 8001940:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001942:	4303      	orrs	r3, r0
 8001944:	6013      	str	r3, [r2, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001946:	6822      	ldr	r2, [r4, #0]
 8001948:	8b60      	ldrh	r0, [r4, #26]
 800194a:	2304      	movs	r3, #4
 800194c:	4003      	ands	r3, r0
 800194e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001950:	4303      	orrs	r3, r0
 8001952:	6053      	str	r3, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001954:	6822      	ldr	r2, [r4, #0]
 8001956:	69d3      	ldr	r3, [r2, #28]
 8001958:	4808      	ldr	r0, [pc, #32]	; (800197c <HAL_SPI_Init+0x84>)
 800195a:	4003      	ands	r3, r0
 800195c:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800195e:	2300      	movs	r3, #0
 8001960:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001962:	3301      	adds	r3, #1
 8001964:	5463      	strb	r3, [r4, r1]

  return HAL_OK;
 8001966:	2000      	movs	r0, #0
}
 8001968:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 800196a:	2200      	movs	r2, #0
 800196c:	3350      	adds	r3, #80	; 0x50
 800196e:	54c2      	strb	r2, [r0, r3]
    HAL_SPI_MspInit(hspi);
 8001970:	f000 feda 	bl	8002728 <HAL_SPI_MspInit>
 8001974:	e7c9      	b.n	800190a <HAL_SPI_Init+0x12>
    return HAL_ERROR;
 8001976:	2001      	movs	r0, #1
 8001978:	e7f6      	b.n	8001968 <HAL_SPI_Init+0x70>
 800197a:	46c0      	nop			; (mov r8, r8)
 800197c:	fffff7ff 	.word	0xfffff7ff

08001980 <HAL_SPI_ErrorCallback>:
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8001980:	4770      	bx	lr
	...

08001984 <HAL_SPI_IRQHandler>:
{
 8001984:	b530      	push	{r4, r5, lr}
 8001986:	b085      	sub	sp, #20
 8001988:	0004      	movs	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 800198a:	6801      	ldr	r1, [r0, #0]
 800198c:	6848      	ldr	r0, [r1, #4]
  uint32_t itflag   = hspi->Instance->SR;
 800198e:	688b      	ldr	r3, [r1, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001990:	2241      	movs	r2, #65	; 0x41
 8001992:	401a      	ands	r2, r3
 8001994:	2a01      	cmp	r2, #1
 8001996:	d064      	beq.n	8001a62 <HAL_SPI_IRQHandler+0xde>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8001998:	079a      	lsls	r2, r3, #30
 800199a:	d501      	bpl.n	80019a0 <HAL_SPI_IRQHandler+0x1c>
 800199c:	0602      	lsls	r2, r0, #24
 800199e:	d466      	bmi.n	8001a6e <HAL_SPI_IRQHandler+0xea>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80019a0:	22b0      	movs	r2, #176	; 0xb0
 80019a2:	0052      	lsls	r2, r2, #1
 80019a4:	4213      	tst	r3, r2
 80019a6:	d065      	beq.n	8001a74 <HAL_SPI_IRQHandler+0xf0>
 80019a8:	0682      	lsls	r2, r0, #26
 80019aa:	d563      	bpl.n	8001a74 <HAL_SPI_IRQHandler+0xf0>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80019ac:	065a      	lsls	r2, r3, #25
 80019ae:	d50e      	bpl.n	80019ce <HAL_SPI_IRQHandler+0x4a>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80019b0:	2251      	movs	r2, #81	; 0x51
 80019b2:	5ca2      	ldrb	r2, [r4, r2]
 80019b4:	2a03      	cmp	r2, #3
 80019b6:	d05f      	beq.n	8001a78 <HAL_SPI_IRQHandler+0xf4>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80019b8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80019ba:	2504      	movs	r5, #4
 80019bc:	432a      	orrs	r2, r5
 80019be:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80019c0:	2200      	movs	r2, #0
 80019c2:	9200      	str	r2, [sp, #0]
 80019c4:	68ca      	ldr	r2, [r1, #12]
 80019c6:	9200      	str	r2, [sp, #0]
 80019c8:	688a      	ldr	r2, [r1, #8]
 80019ca:	9200      	str	r2, [sp, #0]
 80019cc:	9a00      	ldr	r2, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80019ce:	069a      	lsls	r2, r3, #26
 80019d0:	d50c      	bpl.n	80019ec <HAL_SPI_IRQHandler+0x68>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80019d2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80019d4:	2501      	movs	r5, #1
 80019d6:	432a      	orrs	r2, r5
 80019d8:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80019da:	2200      	movs	r2, #0
 80019dc:	9202      	str	r2, [sp, #8]
 80019de:	688a      	ldr	r2, [r1, #8]
 80019e0:	9202      	str	r2, [sp, #8]
 80019e2:	680a      	ldr	r2, [r1, #0]
 80019e4:	353f      	adds	r5, #63	; 0x3f
 80019e6:	43aa      	bics	r2, r5
 80019e8:	600a      	str	r2, [r1, #0]
 80019ea:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80019ec:	05db      	lsls	r3, r3, #23
 80019ee:	d509      	bpl.n	8001a04 <HAL_SPI_IRQHandler+0x80>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80019f0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80019f2:	2208      	movs	r2, #8
 80019f4:	4313      	orrs	r3, r2
 80019f6:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80019f8:	2300      	movs	r3, #0
 80019fa:	9303      	str	r3, [sp, #12]
 80019fc:	6823      	ldr	r3, [r4, #0]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	9303      	str	r3, [sp, #12]
 8001a02:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001a04:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d034      	beq.n	8001a74 <HAL_SPI_IRQHandler+0xf0>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001a0a:	6822      	ldr	r2, [r4, #0]
 8001a0c:	6853      	ldr	r3, [r2, #4]
 8001a0e:	21e0      	movs	r1, #224	; 0xe0
 8001a10:	438b      	bics	r3, r1
 8001a12:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8001a14:	2201      	movs	r2, #1
 8001a16:	2351      	movs	r3, #81	; 0x51
 8001a18:	54e2      	strb	r2, [r4, r3]
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001a1a:	0783      	lsls	r3, r0, #30
 8001a1c:	d034      	beq.n	8001a88 <HAL_SPI_IRQHandler+0x104>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001a1e:	6822      	ldr	r2, [r4, #0]
 8001a20:	6853      	ldr	r3, [r2, #4]
 8001a22:	39dd      	subs	r1, #221	; 0xdd
 8001a24:	438b      	bics	r3, r1
 8001a26:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8001a28:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d00a      	beq.n	8001a44 <HAL_SPI_IRQHandler+0xc0>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001a2e:	4a18      	ldr	r2, [pc, #96]	; (8001a90 <HAL_SPI_IRQHandler+0x10c>)
 8001a30:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8001a32:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001a34:	f7fe fe2f 	bl	8000696 <HAL_DMA_Abort_IT>
 8001a38:	2800      	cmp	r0, #0
 8001a3a:	d003      	beq.n	8001a44 <HAL_SPI_IRQHandler+0xc0>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001a3c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001a3e:	2240      	movs	r2, #64	; 0x40
 8001a40:	4313      	orrs	r3, r2
 8001a42:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8001a44:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d014      	beq.n	8001a74 <HAL_SPI_IRQHandler+0xf0>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001a4a:	4a11      	ldr	r2, [pc, #68]	; (8001a90 <HAL_SPI_IRQHandler+0x10c>)
 8001a4c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8001a4e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001a50:	f7fe fe21 	bl	8000696 <HAL_DMA_Abort_IT>
 8001a54:	2800      	cmp	r0, #0
 8001a56:	d00d      	beq.n	8001a74 <HAL_SPI_IRQHandler+0xf0>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001a58:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001a5a:	2240      	movs	r2, #64	; 0x40
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	6563      	str	r3, [r4, #84]	; 0x54
 8001a60:	e008      	b.n	8001a74 <HAL_SPI_IRQHandler+0xf0>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001a62:	0642      	lsls	r2, r0, #25
 8001a64:	d598      	bpl.n	8001998 <HAL_SPI_IRQHandler+0x14>
    hspi->RxISR(hspi);
 8001a66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a68:	0020      	movs	r0, r4
 8001a6a:	4798      	blx	r3
    return;
 8001a6c:	e002      	b.n	8001a74 <HAL_SPI_IRQHandler+0xf0>
    hspi->TxISR(hspi);
 8001a6e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001a70:	0020      	movs	r0, r4
 8001a72:	4798      	blx	r3
}
 8001a74:	b005      	add	sp, #20
 8001a76:	bd30      	pop	{r4, r5, pc}
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001a78:	2300      	movs	r3, #0
 8001a7a:	9301      	str	r3, [sp, #4]
 8001a7c:	68cb      	ldr	r3, [r1, #12]
 8001a7e:	9301      	str	r3, [sp, #4]
 8001a80:	688b      	ldr	r3, [r1, #8]
 8001a82:	9301      	str	r3, [sp, #4]
 8001a84:	9b01      	ldr	r3, [sp, #4]
        return;
 8001a86:	e7f5      	b.n	8001a74 <HAL_SPI_IRQHandler+0xf0>
        HAL_SPI_ErrorCallback(hspi);
 8001a88:	0020      	movs	r0, r4
 8001a8a:	f7ff ff79 	bl	8001980 <HAL_SPI_ErrorCallback>
 8001a8e:	e7f1      	b.n	8001a74 <HAL_SPI_IRQHandler+0xf0>
 8001a90:	08001a95 	.word	0x08001a95

08001a94 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001a94:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001a96:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8001a9c:	86c3      	strh	r3, [r0, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8001a9e:	f7ff ff6f 	bl	8001980 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8001aa2:	bd10      	pop	{r4, pc}

08001aa4 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001aa4:	6802      	ldr	r2, [r0, #0]
 8001aa6:	6813      	ldr	r3, [r2, #0]
 8001aa8:	21c0      	movs	r1, #192	; 0xc0
 8001aaa:	438b      	bics	r3, r1
 8001aac:	6013      	str	r3, [r2, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001aae:	2320      	movs	r3, #32
 8001ab0:	6743      	str	r3, [r0, #116]	; 0x74
}
 8001ab2:	4770      	bx	lr

08001ab4 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ab4:	6802      	ldr	r2, [r0, #0]
 8001ab6:	6813      	ldr	r3, [r2, #0]
 8001ab8:	4906      	ldr	r1, [pc, #24]	; (8001ad4 <UART_EndRxTransfer+0x20>)
 8001aba:	400b      	ands	r3, r1
 8001abc:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001abe:	6802      	ldr	r2, [r0, #0]
 8001ac0:	6893      	ldr	r3, [r2, #8]
 8001ac2:	3123      	adds	r1, #35	; 0x23
 8001ac4:	31ff      	adds	r1, #255	; 0xff
 8001ac6:	438b      	bics	r3, r1
 8001ac8:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001aca:	2320      	movs	r3, #32
 8001acc:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	6603      	str	r3, [r0, #96]	; 0x60
}
 8001ad2:	4770      	bx	lr
 8001ad4:	fffffedf 	.word	0xfffffedf

08001ad8 <HAL_UART_Receive_DMA>:
{
 8001ad8:	b510      	push	{r4, lr}
 8001ada:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8001adc:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8001ade:	2820      	cmp	r0, #32
 8001ae0:	d001      	beq.n	8001ae6 <HAL_UART_Receive_DMA+0xe>
    return HAL_BUSY;
 8001ae2:	2002      	movs	r0, #2
}
 8001ae4:	bd10      	pop	{r4, pc}
    if ((pData == NULL) || (Size == 0U))
 8001ae6:	2900      	cmp	r1, #0
 8001ae8:	d04f      	beq.n	8001b8a <HAL_UART_Receive_DMA+0xb2>
 8001aea:	2a00      	cmp	r2, #0
 8001aec:	d04f      	beq.n	8001b8e <HAL_UART_Receive_DMA+0xb6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001aee:	2380      	movs	r3, #128	; 0x80
 8001af0:	015b      	lsls	r3, r3, #5
 8001af2:	68a0      	ldr	r0, [r4, #8]
 8001af4:	4298      	cmp	r0, r3
 8001af6:	d038      	beq.n	8001b6a <HAL_UART_Receive_DMA+0x92>
    __HAL_LOCK(huart);
 8001af8:	2370      	movs	r3, #112	; 0x70
 8001afa:	5ce3      	ldrb	r3, [r4, r3]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d048      	beq.n	8001b92 <HAL_UART_Receive_DMA+0xba>
 8001b00:	2001      	movs	r0, #1
 8001b02:	2370      	movs	r3, #112	; 0x70
 8001b04:	54e0      	strb	r0, [r4, r3]
    huart->pRxBuffPtr = pData;
 8001b06:	6561      	str	r1, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 8001b08:	3b18      	subs	r3, #24
 8001b0a:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	67e3      	str	r3, [r4, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001b10:	3322      	adds	r3, #34	; 0x22
 8001b12:	67a3      	str	r3, [r4, #120]	; 0x78
    if (huart->hdmarx != NULL)
 8001b14:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d013      	beq.n	8001b42 <HAL_UART_Receive_DMA+0x6a>
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001b1a:	491f      	ldr	r1, [pc, #124]	; (8001b98 <HAL_UART_Receive_DMA+0xc0>)
 8001b1c:	62d9      	str	r1, [r3, #44]	; 0x2c
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001b1e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001b20:	491e      	ldr	r1, [pc, #120]	; (8001b9c <HAL_UART_Receive_DMA+0xc4>)
 8001b22:	6319      	str	r1, [r3, #48]	; 0x30
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001b24:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001b26:	491e      	ldr	r1, [pc, #120]	; (8001ba0 <HAL_UART_Receive_DMA+0xc8>)
 8001b28:	6359      	str	r1, [r3, #52]	; 0x34
      huart->hdmarx->XferAbortCallback = NULL;
 8001b2a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	6399      	str	r1, [r3, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8001b30:	6821      	ldr	r1, [r4, #0]
 8001b32:	3124      	adds	r1, #36	; 0x24
 8001b34:	0013      	movs	r3, r2
 8001b36:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001b38:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001b3a:	f7fe fd71 	bl	8000620 <HAL_DMA_Start_IT>
 8001b3e:	2800      	cmp	r0, #0
 8001b40:	d11a      	bne.n	8001b78 <HAL_UART_Receive_DMA+0xa0>
    __HAL_UNLOCK(huart);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2370      	movs	r3, #112	; 0x70
 8001b46:	54e2      	strb	r2, [r4, r3]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001b48:	6822      	ldr	r2, [r4, #0]
 8001b4a:	6811      	ldr	r1, [r2, #0]
 8001b4c:	3390      	adds	r3, #144	; 0x90
 8001b4e:	430b      	orrs	r3, r1
 8001b50:	6013      	str	r3, [r2, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b52:	6822      	ldr	r2, [r4, #0]
 8001b54:	6893      	ldr	r3, [r2, #8]
 8001b56:	2101      	movs	r1, #1
 8001b58:	430b      	orrs	r3, r1
 8001b5a:	6093      	str	r3, [r2, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001b5c:	6822      	ldr	r2, [r4, #0]
 8001b5e:	6893      	ldr	r3, [r2, #8]
 8001b60:	313f      	adds	r1, #63	; 0x3f
 8001b62:	430b      	orrs	r3, r1
 8001b64:	6093      	str	r3, [r2, #8]
    return HAL_OK;
 8001b66:	2000      	movs	r0, #0
 8001b68:	e7bc      	b.n	8001ae4 <HAL_UART_Receive_DMA+0xc>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b6a:	6923      	ldr	r3, [r4, #16]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1c3      	bne.n	8001af8 <HAL_UART_Receive_DMA+0x20>
      if ((((uint32_t)pData) & 1) != 0)
 8001b70:	07cb      	lsls	r3, r1, #31
 8001b72:	d5c1      	bpl.n	8001af8 <HAL_UART_Receive_DMA+0x20>
        return  HAL_ERROR;
 8001b74:	2001      	movs	r0, #1
 8001b76:	e7b5      	b.n	8001ae4 <HAL_UART_Receive_DMA+0xc>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8001b78:	2310      	movs	r3, #16
 8001b7a:	67e3      	str	r3, [r4, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	3360      	adds	r3, #96	; 0x60
 8001b80:	54e2      	strb	r2, [r4, r3]
        huart->gState = HAL_UART_STATE_READY;
 8001b82:	3b50      	subs	r3, #80	; 0x50
 8001b84:	6763      	str	r3, [r4, #116]	; 0x74
        return HAL_ERROR;
 8001b86:	2001      	movs	r0, #1
 8001b88:	e7ac      	b.n	8001ae4 <HAL_UART_Receive_DMA+0xc>
      return HAL_ERROR;
 8001b8a:	2001      	movs	r0, #1
 8001b8c:	e7aa      	b.n	8001ae4 <HAL_UART_Receive_DMA+0xc>
 8001b8e:	2001      	movs	r0, #1
 8001b90:	e7a8      	b.n	8001ae4 <HAL_UART_Receive_DMA+0xc>
    __HAL_LOCK(huart);
 8001b92:	2002      	movs	r0, #2
 8001b94:	e7a6      	b.n	8001ae4 <HAL_UART_Receive_DMA+0xc>
 8001b96:	46c0      	nop			; (mov r8, r8)
 8001b98:	08001bc1 	.word	0x08001bc1
 8001b9c:	08001c05 	.word	0x08001c05
 8001ba0:	08001c11 	.word	0x08001c11

08001ba4 <HAL_UART_TxCpltCallback>:
}
 8001ba4:	4770      	bx	lr

08001ba6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001ba6:	b510      	push	{r4, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001ba8:	6802      	ldr	r2, [r0, #0]
 8001baa:	6813      	ldr	r3, [r2, #0]
 8001bac:	2140      	movs	r1, #64	; 0x40
 8001bae:	438b      	bics	r3, r1
 8001bb0:	6013      	str	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001bb2:	2320      	movs	r3, #32
 8001bb4:	6743      	str	r3, [r0, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	6643      	str	r3, [r0, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001bba:	f7ff fff3 	bl	8001ba4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001bbe:	bd10      	pop	{r4, pc}

08001bc0 <UART_DMAReceiveCplt>:
{
 8001bc0:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001bc2:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8001bc4:	6802      	ldr	r2, [r0, #0]
 8001bc6:	6812      	ldr	r2, [r2, #0]
 8001bc8:	0692      	lsls	r2, r2, #26
 8001bca:	d414      	bmi.n	8001bf6 <UART_DMAReceiveCplt+0x36>
    huart->RxXferCount = 0U;
 8001bcc:	2100      	movs	r1, #0
 8001bce:	225a      	movs	r2, #90	; 0x5a
 8001bd0:	5299      	strh	r1, [r3, r2]
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001bd2:	6819      	ldr	r1, [r3, #0]
 8001bd4:	680a      	ldr	r2, [r1, #0]
 8001bd6:	480a      	ldr	r0, [pc, #40]	; (8001c00 <UART_DMAReceiveCplt+0x40>)
 8001bd8:	4002      	ands	r2, r0
 8001bda:	600a      	str	r2, [r1, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bdc:	6819      	ldr	r1, [r3, #0]
 8001bde:	688a      	ldr	r2, [r1, #8]
 8001be0:	3003      	adds	r0, #3
 8001be2:	30ff      	adds	r0, #255	; 0xff
 8001be4:	4382      	bics	r2, r0
 8001be6:	608a      	str	r2, [r1, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001be8:	6819      	ldr	r1, [r3, #0]
 8001bea:	688a      	ldr	r2, [r1, #8]
 8001bec:	303f      	adds	r0, #63	; 0x3f
 8001bee:	4382      	bics	r2, r0
 8001bf0:	608a      	str	r2, [r1, #8]
    huart->RxState = HAL_UART_STATE_READY;
 8001bf2:	2220      	movs	r2, #32
 8001bf4:	679a      	str	r2, [r3, #120]	; 0x78
  HAL_UART_RxCpltCallback(huart);
 8001bf6:	0018      	movs	r0, r3
 8001bf8:	f000 fd06 	bl	8002608 <HAL_UART_RxCpltCallback>
}
 8001bfc:	bd10      	pop	{r4, pc}
 8001bfe:	46c0      	nop			; (mov r8, r8)
 8001c00:	fffffeff 	.word	0xfffffeff

08001c04 <UART_DMARxHalfCplt>:
{
 8001c04:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001c06:	6a80      	ldr	r0, [r0, #40]	; 0x28
  HAL_UART_RxHalfCpltCallback(huart);
 8001c08:	f000 fcff 	bl	800260a <HAL_UART_RxHalfCpltCallback>
}
 8001c0c:	bd10      	pop	{r4, pc}

08001c0e <HAL_UART_ErrorCallback>:
}
 8001c0e:	4770      	bx	lr

08001c10 <UART_DMAError>:
{
 8001c10:	b570      	push	{r4, r5, r6, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001c12:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8001c14:	6f62      	ldr	r2, [r4, #116]	; 0x74
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8001c16:	6fa5      	ldr	r5, [r4, #120]	; 0x78
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8001c18:	6823      	ldr	r3, [r4, #0]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	061b      	lsls	r3, r3, #24
 8001c1e:	d501      	bpl.n	8001c24 <UART_DMAError+0x14>
 8001c20:	2a21      	cmp	r2, #33	; 0x21
 8001c22:	d00d      	beq.n	8001c40 <UART_DMAError+0x30>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8001c24:	6823      	ldr	r3, [r4, #0]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	065b      	lsls	r3, r3, #25
 8001c2a:	d501      	bpl.n	8001c30 <UART_DMAError+0x20>
 8001c2c:	2d22      	cmp	r5, #34	; 0x22
 8001c2e:	d00e      	beq.n	8001c4e <UART_DMAError+0x3e>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001c30:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001c32:	2210      	movs	r2, #16
 8001c34:	4313      	orrs	r3, r2
 8001c36:	67e3      	str	r3, [r4, #124]	; 0x7c
  HAL_UART_ErrorCallback(huart);
 8001c38:	0020      	movs	r0, r4
 8001c3a:	f7ff ffe8 	bl	8001c0e <HAL_UART_ErrorCallback>
}
 8001c3e:	bd70      	pop	{r4, r5, r6, pc}
    huart->TxXferCount = 0U;
 8001c40:	2200      	movs	r2, #0
 8001c42:	2352      	movs	r3, #82	; 0x52
 8001c44:	52e2      	strh	r2, [r4, r3]
    UART_EndTxTransfer(huart);
 8001c46:	0020      	movs	r0, r4
 8001c48:	f7ff ff2c 	bl	8001aa4 <UART_EndTxTransfer>
 8001c4c:	e7ea      	b.n	8001c24 <UART_DMAError+0x14>
    huart->RxXferCount = 0U;
 8001c4e:	2200      	movs	r2, #0
 8001c50:	235a      	movs	r3, #90	; 0x5a
 8001c52:	52e2      	strh	r2, [r4, r3]
    UART_EndRxTransfer(huart);
 8001c54:	0020      	movs	r0, r4
 8001c56:	f7ff ff2d 	bl	8001ab4 <UART_EndRxTransfer>
 8001c5a:	e7e9      	b.n	8001c30 <UART_DMAError+0x20>

08001c5c <HAL_UART_IRQHandler>:
{
 8001c5c:	b570      	push	{r4, r5, r6, lr}
 8001c5e:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001c60:	6801      	ldr	r1, [r0, #0]
 8001c62:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001c64:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001c66:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8001c68:	220f      	movs	r2, #15
 8001c6a:	401a      	ands	r2, r3
  if (errorflags == 0U)
 8001c6c:	d10a      	bne.n	8001c84 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001c6e:	069e      	lsls	r6, r3, #26
 8001c70:	d508      	bpl.n	8001c84 <HAL_UART_IRQHandler+0x28>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001c72:	0686      	lsls	r6, r0, #26
 8001c74:	d506      	bpl.n	8001c84 <HAL_UART_IRQHandler+0x28>
      if (huart->RxISR != NULL)
 8001c76:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d100      	bne.n	8001c7e <HAL_UART_IRQHandler+0x22>
 8001c7c:	e089      	b.n	8001d92 <HAL_UART_IRQHandler+0x136>
        huart->RxISR(huart);
 8001c7e:	0020      	movs	r0, r4
 8001c80:	4798      	blx	r3
 8001c82:	e086      	b.n	8001d92 <HAL_UART_IRQHandler+0x136>
  if ((errorflags != 0U)
 8001c84:	2a00      	cmp	r2, #0
 8001c86:	d06b      	beq.n	8001d60 <HAL_UART_IRQHandler+0x104>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001c88:	2201      	movs	r2, #1
 8001c8a:	402a      	ands	r2, r5
 8001c8c:	d103      	bne.n	8001c96 <HAL_UART_IRQHandler+0x3a>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8001c8e:	2690      	movs	r6, #144	; 0x90
 8001c90:	0076      	lsls	r6, r6, #1
 8001c92:	4230      	tst	r0, r6
 8001c94:	d064      	beq.n	8001d60 <HAL_UART_IRQHandler+0x104>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001c96:	07dd      	lsls	r5, r3, #31
 8001c98:	d506      	bpl.n	8001ca8 <HAL_UART_IRQHandler+0x4c>
 8001c9a:	05c5      	lsls	r5, r0, #23
 8001c9c:	d504      	bpl.n	8001ca8 <HAL_UART_IRQHandler+0x4c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001c9e:	2501      	movs	r5, #1
 8001ca0:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001ca2:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001ca4:	4329      	orrs	r1, r5
 8001ca6:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001ca8:	0799      	lsls	r1, r3, #30
 8001caa:	d508      	bpl.n	8001cbe <HAL_UART_IRQHandler+0x62>
 8001cac:	2a00      	cmp	r2, #0
 8001cae:	d006      	beq.n	8001cbe <HAL_UART_IRQHandler+0x62>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001cb0:	6821      	ldr	r1, [r4, #0]
 8001cb2:	2502      	movs	r5, #2
 8001cb4:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001cb6:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001cb8:	3502      	adds	r5, #2
 8001cba:	4329      	orrs	r1, r5
 8001cbc:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001cbe:	0759      	lsls	r1, r3, #29
 8001cc0:	d508      	bpl.n	8001cd4 <HAL_UART_IRQHandler+0x78>
 8001cc2:	2a00      	cmp	r2, #0
 8001cc4:	d006      	beq.n	8001cd4 <HAL_UART_IRQHandler+0x78>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001cc6:	6821      	ldr	r1, [r4, #0]
 8001cc8:	2504      	movs	r5, #4
 8001cca:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001ccc:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001cce:	3d02      	subs	r5, #2
 8001cd0:	4329      	orrs	r1, r5
 8001cd2:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001cd4:	0719      	lsls	r1, r3, #28
 8001cd6:	d509      	bpl.n	8001cec <HAL_UART_IRQHandler+0x90>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001cd8:	0681      	lsls	r1, r0, #26
 8001cda:	d401      	bmi.n	8001ce0 <HAL_UART_IRQHandler+0x84>
 8001cdc:	2a00      	cmp	r2, #0
 8001cde:	d005      	beq.n	8001cec <HAL_UART_IRQHandler+0x90>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001ce0:	6822      	ldr	r2, [r4, #0]
 8001ce2:	2108      	movs	r1, #8
 8001ce4:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001ce6:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001cec:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8001cee:	2a00      	cmp	r2, #0
 8001cf0:	d04f      	beq.n	8001d92 <HAL_UART_IRQHandler+0x136>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001cf2:	069b      	lsls	r3, r3, #26
 8001cf4:	d506      	bpl.n	8001d04 <HAL_UART_IRQHandler+0xa8>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001cf6:	0683      	lsls	r3, r0, #26
 8001cf8:	d504      	bpl.n	8001d04 <HAL_UART_IRQHandler+0xa8>
        if (huart->RxISR != NULL)
 8001cfa:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <HAL_UART_IRQHandler+0xa8>
          huart->RxISR(huart);
 8001d00:	0020      	movs	r0, r4
 8001d02:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8001d04:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001d06:	6823      	ldr	r3, [r4, #0]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	065b      	lsls	r3, r3, #25
 8001d0c:	d401      	bmi.n	8001d12 <HAL_UART_IRQHandler+0xb6>
 8001d0e:	0713      	lsls	r3, r2, #28
 8001d10:	d520      	bpl.n	8001d54 <HAL_UART_IRQHandler+0xf8>
        UART_EndRxTransfer(huart);
 8001d12:	0020      	movs	r0, r4
 8001d14:	f7ff fece 	bl	8001ab4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d18:	6823      	ldr	r3, [r4, #0]
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	0652      	lsls	r2, r2, #25
 8001d1e:	d515      	bpl.n	8001d4c <HAL_UART_IRQHandler+0xf0>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d20:	689a      	ldr	r2, [r3, #8]
 8001d22:	2140      	movs	r1, #64	; 0x40
 8001d24:	438a      	bics	r2, r1
 8001d26:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8001d28:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00a      	beq.n	8001d44 <HAL_UART_IRQHandler+0xe8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001d2e:	4a1b      	ldr	r2, [pc, #108]	; (8001d9c <HAL_UART_IRQHandler+0x140>)
 8001d30:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001d32:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001d34:	f7fe fcaf 	bl	8000696 <HAL_DMA_Abort_IT>
 8001d38:	2800      	cmp	r0, #0
 8001d3a:	d02a      	beq.n	8001d92 <HAL_UART_IRQHandler+0x136>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001d3c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001d3e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001d40:	4798      	blx	r3
 8001d42:	e026      	b.n	8001d92 <HAL_UART_IRQHandler+0x136>
            HAL_UART_ErrorCallback(huart);
 8001d44:	0020      	movs	r0, r4
 8001d46:	f7ff ff62 	bl	8001c0e <HAL_UART_ErrorCallback>
 8001d4a:	e022      	b.n	8001d92 <HAL_UART_IRQHandler+0x136>
          HAL_UART_ErrorCallback(huart);
 8001d4c:	0020      	movs	r0, r4
 8001d4e:	f7ff ff5e 	bl	8001c0e <HAL_UART_ErrorCallback>
 8001d52:	e01e      	b.n	8001d92 <HAL_UART_IRQHandler+0x136>
        HAL_UART_ErrorCallback(huart);
 8001d54:	0020      	movs	r0, r4
 8001d56:	f7ff ff5a 	bl	8001c0e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	67e3      	str	r3, [r4, #124]	; 0x7c
 8001d5e:	e018      	b.n	8001d92 <HAL_UART_IRQHandler+0x136>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8001d60:	02da      	lsls	r2, r3, #11
 8001d62:	d501      	bpl.n	8001d68 <HAL_UART_IRQHandler+0x10c>
 8001d64:	026a      	lsls	r2, r5, #9
 8001d66:	d409      	bmi.n	8001d7c <HAL_UART_IRQHandler+0x120>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8001d68:	061a      	lsls	r2, r3, #24
 8001d6a:	d50e      	bpl.n	8001d8a <HAL_UART_IRQHandler+0x12e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8001d6c:	0602      	lsls	r2, r0, #24
 8001d6e:	d50c      	bpl.n	8001d8a <HAL_UART_IRQHandler+0x12e>
    if (huart->TxISR != NULL)
 8001d70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00d      	beq.n	8001d92 <HAL_UART_IRQHandler+0x136>
      huart->TxISR(huart);
 8001d76:	0020      	movs	r0, r4
 8001d78:	4798      	blx	r3
 8001d7a:	e00a      	b.n	8001d92 <HAL_UART_IRQHandler+0x136>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8001d7c:	2380      	movs	r3, #128	; 0x80
 8001d7e:	035b      	lsls	r3, r3, #13
 8001d80:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8001d82:	0020      	movs	r0, r4
 8001d84:	f000 faec 	bl	8002360 <HAL_UARTEx_WakeupCallback>
    return;
 8001d88:	e003      	b.n	8001d92 <HAL_UART_IRQHandler+0x136>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001d8a:	065b      	lsls	r3, r3, #25
 8001d8c:	d501      	bpl.n	8001d92 <HAL_UART_IRQHandler+0x136>
 8001d8e:	0643      	lsls	r3, r0, #25
 8001d90:	d400      	bmi.n	8001d94 <HAL_UART_IRQHandler+0x138>
}
 8001d92:	bd70      	pop	{r4, r5, r6, pc}
    UART_EndTransmit_IT(huart);
 8001d94:	0020      	movs	r0, r4
 8001d96:	f7ff ff06 	bl	8001ba6 <UART_EndTransmit_IT>
    return;
 8001d9a:	e7fa      	b.n	8001d92 <HAL_UART_IRQHandler+0x136>
 8001d9c:	08001da1 	.word	0x08001da1

08001da0 <UART_DMAAbortOnError>:
{
 8001da0:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001da2:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8001da4:	2300      	movs	r3, #0
 8001da6:	225a      	movs	r2, #90	; 0x5a
 8001da8:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 8001daa:	3a08      	subs	r2, #8
 8001dac:	5283      	strh	r3, [r0, r2]
  HAL_UART_ErrorCallback(huart);
 8001dae:	f7ff ff2e 	bl	8001c0e <HAL_UART_ErrorCallback>
}
 8001db2:	bd10      	pop	{r4, pc}

08001db4 <UART_SetConfig>:
{
 8001db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001db6:	0005      	movs	r5, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8001db8:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001dba:	6883      	ldr	r3, [r0, #8]
 8001dbc:	6902      	ldr	r2, [r0, #16]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	6942      	ldr	r2, [r0, #20]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	69c2      	ldr	r2, [r0, #28]
 8001dc6:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001dc8:	680a      	ldr	r2, [r1, #0]
 8001dca:	48be      	ldr	r0, [pc, #760]	; (80020c4 <UART_SetConfig+0x310>)
 8001dcc:	4002      	ands	r2, r0
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001dd2:	682a      	ldr	r2, [r5, #0]
 8001dd4:	6853      	ldr	r3, [r2, #4]
 8001dd6:	49bc      	ldr	r1, [pc, #752]	; (80020c8 <UART_SetConfig+0x314>)
 8001dd8:	400b      	ands	r3, r1
 8001dda:	68e9      	ldr	r1, [r5, #12]
 8001ddc:	430b      	orrs	r3, r1
 8001dde:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001de0:	69ab      	ldr	r3, [r5, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001de2:	682a      	ldr	r2, [r5, #0]
 8001de4:	49b9      	ldr	r1, [pc, #740]	; (80020cc <UART_SetConfig+0x318>)
 8001de6:	428a      	cmp	r2, r1
 8001de8:	d001      	beq.n	8001dee <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 8001dea:	6a29      	ldr	r1, [r5, #32]
 8001dec:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001dee:	6891      	ldr	r1, [r2, #8]
 8001df0:	48b7      	ldr	r0, [pc, #732]	; (80020d0 <UART_SetConfig+0x31c>)
 8001df2:	4001      	ands	r1, r0
 8001df4:	430b      	orrs	r3, r1
 8001df6:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001df8:	682b      	ldr	r3, [r5, #0]
 8001dfa:	4ab6      	ldr	r2, [pc, #728]	; (80020d4 <UART_SetConfig+0x320>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d01c      	beq.n	8001e3a <UART_SetConfig+0x86>
 8001e00:	4ab5      	ldr	r2, [pc, #724]	; (80020d8 <UART_SetConfig+0x324>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d02d      	beq.n	8001e62 <UART_SetConfig+0xae>
 8001e06:	4ab5      	ldr	r2, [pc, #724]	; (80020dc <UART_SetConfig+0x328>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d05f      	beq.n	8001ecc <UART_SetConfig+0x118>
 8001e0c:	4ab4      	ldr	r2, [pc, #720]	; (80020e0 <UART_SetConfig+0x32c>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d05e      	beq.n	8001ed0 <UART_SetConfig+0x11c>
 8001e12:	4aae      	ldr	r2, [pc, #696]	; (80020cc <UART_SetConfig+0x318>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d039      	beq.n	8001e8c <UART_SetConfig+0xd8>
 8001e18:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8001e1a:	49ac      	ldr	r1, [pc, #688]	; (80020cc <UART_SetConfig+0x318>)
 8001e1c:	428b      	cmp	r3, r1
 8001e1e:	d05b      	beq.n	8001ed8 <UART_SetConfig+0x124>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e20:	2380      	movs	r3, #128	; 0x80
 8001e22:	021b      	lsls	r3, r3, #8
 8001e24:	69e9      	ldr	r1, [r5, #28]
 8001e26:	4299      	cmp	r1, r3
 8001e28:	d100      	bne.n	8001e2c <UART_SetConfig+0x78>
 8001e2a:	e095      	b.n	8001f58 <UART_SetConfig+0x1a4>
    switch (clocksource)
 8001e2c:	2a08      	cmp	r2, #8
 8001e2e:	d900      	bls.n	8001e32 <UART_SetConfig+0x7e>
 8001e30:	e179      	b.n	8002126 <UART_SetConfig+0x372>
 8001e32:	0092      	lsls	r2, r2, #2
 8001e34:	4bab      	ldr	r3, [pc, #684]	; (80020e4 <UART_SetConfig+0x330>)
 8001e36:	589b      	ldr	r3, [r3, r2]
 8001e38:	469f      	mov	pc, r3
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e3a:	4aab      	ldr	r2, [pc, #684]	; (80020e8 <UART_SetConfig+0x334>)
 8001e3c:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8001e3e:	2203      	movs	r2, #3
 8001e40:	400a      	ands	r2, r1
 8001e42:	2a01      	cmp	r2, #1
 8001e44:	d009      	beq.n	8001e5a <UART_SetConfig+0xa6>
 8001e46:	2a00      	cmp	r2, #0
 8001e48:	d005      	beq.n	8001e56 <UART_SetConfig+0xa2>
 8001e4a:	2a02      	cmp	r2, #2
 8001e4c:	d03a      	beq.n	8001ec4 <UART_SetConfig+0x110>
 8001e4e:	2a03      	cmp	r2, #3
 8001e50:	d005      	beq.n	8001e5e <UART_SetConfig+0xaa>
 8001e52:	2210      	movs	r2, #16
 8001e54:	e7e1      	b.n	8001e1a <UART_SetConfig+0x66>
 8001e56:	2201      	movs	r2, #1
 8001e58:	e7df      	b.n	8001e1a <UART_SetConfig+0x66>
 8001e5a:	2204      	movs	r2, #4
 8001e5c:	e7dd      	b.n	8001e1a <UART_SetConfig+0x66>
 8001e5e:	2208      	movs	r2, #8
 8001e60:	e7db      	b.n	8001e1a <UART_SetConfig+0x66>
 8001e62:	4aa1      	ldr	r2, [pc, #644]	; (80020e8 <UART_SetConfig+0x334>)
 8001e64:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8001e66:	220c      	movs	r2, #12
 8001e68:	400a      	ands	r2, r1
 8001e6a:	2a04      	cmp	r2, #4
 8001e6c:	d00a      	beq.n	8001e84 <UART_SetConfig+0xd0>
 8001e6e:	d905      	bls.n	8001e7c <UART_SetConfig+0xc8>
 8001e70:	2a08      	cmp	r2, #8
 8001e72:	d029      	beq.n	8001ec8 <UART_SetConfig+0x114>
 8001e74:	2a0c      	cmp	r2, #12
 8001e76:	d107      	bne.n	8001e88 <UART_SetConfig+0xd4>
 8001e78:	2208      	movs	r2, #8
 8001e7a:	e7ce      	b.n	8001e1a <UART_SetConfig+0x66>
 8001e7c:	2a00      	cmp	r2, #0
 8001e7e:	d103      	bne.n	8001e88 <UART_SetConfig+0xd4>
 8001e80:	2200      	movs	r2, #0
 8001e82:	e7ca      	b.n	8001e1a <UART_SetConfig+0x66>
 8001e84:	2204      	movs	r2, #4
 8001e86:	e7c8      	b.n	8001e1a <UART_SetConfig+0x66>
 8001e88:	2210      	movs	r2, #16
 8001e8a:	e7c6      	b.n	8001e1a <UART_SetConfig+0x66>
 8001e8c:	4a96      	ldr	r2, [pc, #600]	; (80020e8 <UART_SetConfig+0x334>)
 8001e8e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001e90:	21c0      	movs	r1, #192	; 0xc0
 8001e92:	0109      	lsls	r1, r1, #4
 8001e94:	400a      	ands	r2, r1
 8001e96:	2180      	movs	r1, #128	; 0x80
 8001e98:	00c9      	lsls	r1, r1, #3
 8001e9a:	428a      	cmp	r2, r1
 8001e9c:	d00e      	beq.n	8001ebc <UART_SetConfig+0x108>
 8001e9e:	d909      	bls.n	8001eb4 <UART_SetConfig+0x100>
 8001ea0:	2180      	movs	r1, #128	; 0x80
 8001ea2:	0109      	lsls	r1, r1, #4
 8001ea4:	428a      	cmp	r2, r1
 8001ea6:	d015      	beq.n	8001ed4 <UART_SetConfig+0x120>
 8001ea8:	21c0      	movs	r1, #192	; 0xc0
 8001eaa:	0109      	lsls	r1, r1, #4
 8001eac:	428a      	cmp	r2, r1
 8001eae:	d107      	bne.n	8001ec0 <UART_SetConfig+0x10c>
 8001eb0:	2208      	movs	r2, #8
 8001eb2:	e7b2      	b.n	8001e1a <UART_SetConfig+0x66>
 8001eb4:	2a00      	cmp	r2, #0
 8001eb6:	d103      	bne.n	8001ec0 <UART_SetConfig+0x10c>
 8001eb8:	2200      	movs	r2, #0
 8001eba:	e7ae      	b.n	8001e1a <UART_SetConfig+0x66>
 8001ebc:	2204      	movs	r2, #4
 8001ebe:	e7ac      	b.n	8001e1a <UART_SetConfig+0x66>
 8001ec0:	2210      	movs	r2, #16
 8001ec2:	e7aa      	b.n	8001e1a <UART_SetConfig+0x66>
 8001ec4:	2202      	movs	r2, #2
 8001ec6:	e7a8      	b.n	8001e1a <UART_SetConfig+0x66>
 8001ec8:	2202      	movs	r2, #2
 8001eca:	e7a6      	b.n	8001e1a <UART_SetConfig+0x66>
 8001ecc:	2200      	movs	r2, #0
 8001ece:	e7a4      	b.n	8001e1a <UART_SetConfig+0x66>
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	e7a2      	b.n	8001e1a <UART_SetConfig+0x66>
 8001ed4:	2202      	movs	r2, #2
 8001ed6:	e7a0      	b.n	8001e1a <UART_SetConfig+0x66>
    switch (clocksource)
 8001ed8:	2a02      	cmp	r2, #2
 8001eda:	d02c      	beq.n	8001f36 <UART_SetConfig+0x182>
 8001edc:	d925      	bls.n	8001f2a <UART_SetConfig+0x176>
 8001ede:	2a04      	cmp	r2, #4
 8001ee0:	d030      	beq.n	8001f44 <UART_SetConfig+0x190>
 8001ee2:	2a08      	cmp	r2, #8
 8001ee4:	d132      	bne.n	8001f4c <UART_SetConfig+0x198>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8001ee6:	2080      	movs	r0, #128	; 0x80
 8001ee8:	0200      	lsls	r0, r0, #8
  HAL_StatusTypeDef ret               = HAL_OK;
 8001eea:	2400      	movs	r4, #0
    if (lpuart_ker_ck_pres != 0U)
 8001eec:	2800      	cmp	r0, #0
 8001eee:	d100      	bne.n	8001ef2 <UART_SetConfig+0x13e>
 8001ef0:	e0ae      	b.n	8002050 <UART_SetConfig+0x29c>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001ef2:	686a      	ldr	r2, [r5, #4]
 8001ef4:	0053      	lsls	r3, r2, #1
 8001ef6:	189b      	adds	r3, r3, r2
 8001ef8:	4298      	cmp	r0, r3
 8001efa:	d200      	bcs.n	8001efe <UART_SetConfig+0x14a>
 8001efc:	e116      	b.n	800212c <UART_SetConfig+0x378>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8001efe:	0313      	lsls	r3, r2, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001f00:	4298      	cmp	r0, r3
 8001f02:	d900      	bls.n	8001f06 <UART_SetConfig+0x152>
 8001f04:	e114      	b.n	8002130 <UART_SetConfig+0x37c>
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8001f06:	0e07      	lsrs	r7, r0, #24
 8001f08:	0206      	lsls	r6, r0, #8
 8001f0a:	0850      	lsrs	r0, r2, #1
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	1980      	adds	r0, r0, r6
 8001f10:	4179      	adcs	r1, r7
 8001f12:	2300      	movs	r3, #0
 8001f14:	f7fe f984 	bl	8000220 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001f18:	4b74      	ldr	r3, [pc, #464]	; (80020ec <UART_SetConfig+0x338>)
 8001f1a:	18c2      	adds	r2, r0, r3
 8001f1c:	4b74      	ldr	r3, [pc, #464]	; (80020f0 <UART_SetConfig+0x33c>)
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d900      	bls.n	8001f24 <UART_SetConfig+0x170>
 8001f22:	e107      	b.n	8002134 <UART_SetConfig+0x380>
          huart->Instance->BRR = usartdiv;
 8001f24:	682b      	ldr	r3, [r5, #0]
 8001f26:	60d8      	str	r0, [r3, #12]
 8001f28:	e092      	b.n	8002050 <UART_SetConfig+0x29c>
    switch (clocksource)
 8001f2a:	2a00      	cmp	r2, #0
 8001f2c:	d10e      	bne.n	8001f4c <UART_SetConfig+0x198>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8001f2e:	f7ff f90d 	bl	800114c <HAL_RCC_GetPCLK1Freq>
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f32:	2400      	movs	r4, #0
        break;
 8001f34:	e7da      	b.n	8001eec <UART_SetConfig+0x138>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f36:	4b6c      	ldr	r3, [pc, #432]	; (80020e8 <UART_SetConfig+0x334>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	06db      	lsls	r3, r3, #27
 8001f3c:	d509      	bpl.n	8001f52 <UART_SetConfig+0x19e>
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8001f3e:	486d      	ldr	r0, [pc, #436]	; (80020f4 <UART_SetConfig+0x340>)
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f40:	2400      	movs	r4, #0
 8001f42:	e7d3      	b.n	8001eec <UART_SetConfig+0x138>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8001f44:	f7fe fd18 	bl	8000978 <HAL_RCC_GetSysClockFreq>
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f48:	2400      	movs	r4, #0
        break;
 8001f4a:	e7cf      	b.n	8001eec <UART_SetConfig+0x138>
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8001f4c:	2000      	movs	r0, #0
        ret = HAL_ERROR;
 8001f4e:	2401      	movs	r4, #1
 8001f50:	e7cc      	b.n	8001eec <UART_SetConfig+0x138>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8001f52:	4869      	ldr	r0, [pc, #420]	; (80020f8 <UART_SetConfig+0x344>)
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f54:	2400      	movs	r4, #0
 8001f56:	e7c9      	b.n	8001eec <UART_SetConfig+0x138>
    switch (clocksource)
 8001f58:	2a08      	cmp	r2, #8
 8001f5a:	d863      	bhi.n	8002024 <UART_SetConfig+0x270>
 8001f5c:	0092      	lsls	r2, r2, #2
 8001f5e:	4b67      	ldr	r3, [pc, #412]	; (80020fc <UART_SetConfig+0x348>)
 8001f60:	589b      	ldr	r3, [r3, r2]
 8001f62:	469f      	mov	pc, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001f64:	f7ff f8f2 	bl	800114c <HAL_RCC_GetPCLK1Freq>
 8001f68:	0040      	lsls	r0, r0, #1
 8001f6a:	686b      	ldr	r3, [r5, #4]
 8001f6c:	085b      	lsrs	r3, r3, #1
 8001f6e:	18c0      	adds	r0, r0, r3
 8001f70:	6869      	ldr	r1, [r5, #4]
 8001f72:	f7fe f8c9 	bl	8000108 <__udivsi3>
 8001f76:	0400      	lsls	r0, r0, #16
 8001f78:	0c00      	lsrs	r0, r0, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f7a:	2400      	movs	r4, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f7c:	4a60      	ldr	r2, [pc, #384]	; (8002100 <UART_SetConfig+0x34c>)
 8001f7e:	0003      	movs	r3, r0
 8001f80:	3b10      	subs	r3, #16
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d900      	bls.n	8001f88 <UART_SetConfig+0x1d4>
 8001f86:	e0d7      	b.n	8002138 <UART_SetConfig+0x384>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001f88:	230f      	movs	r3, #15
 8001f8a:	0002      	movs	r2, r0
 8001f8c:	439a      	bics	r2, r3
 8001f8e:	0013      	movs	r3, r2
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001f90:	0840      	lsrs	r0, r0, #1
 8001f92:	2207      	movs	r2, #7
 8001f94:	4010      	ands	r0, r2
 8001f96:	4318      	orrs	r0, r3
      huart->Instance->BRR = brrtemp;
 8001f98:	682b      	ldr	r3, [r5, #0]
 8001f9a:	60d8      	str	r0, [r3, #12]
 8001f9c:	e058      	b.n	8002050 <UART_SetConfig+0x29c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001f9e:	f7ff f8e5 	bl	800116c <HAL_RCC_GetPCLK2Freq>
 8001fa2:	0040      	lsls	r0, r0, #1
 8001fa4:	686b      	ldr	r3, [r5, #4]
 8001fa6:	085b      	lsrs	r3, r3, #1
 8001fa8:	18c0      	adds	r0, r0, r3
 8001faa:	6869      	ldr	r1, [r5, #4]
 8001fac:	f7fe f8ac 	bl	8000108 <__udivsi3>
 8001fb0:	0400      	lsls	r0, r0, #16
 8001fb2:	0c00      	lsrs	r0, r0, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8001fb4:	2400      	movs	r4, #0
        break;
 8001fb6:	e7e1      	b.n	8001f7c <UART_SetConfig+0x1c8>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001fb8:	4b4b      	ldr	r3, [pc, #300]	; (80020e8 <UART_SetConfig+0x334>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	06db      	lsls	r3, r3, #27
 8001fbe:	d50b      	bpl.n	8001fd8 <UART_SetConfig+0x224>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8001fc0:	686b      	ldr	r3, [r5, #4]
 8001fc2:	0858      	lsrs	r0, r3, #1
 8001fc4:	4b4f      	ldr	r3, [pc, #316]	; (8002104 <UART_SetConfig+0x350>)
 8001fc6:	469c      	mov	ip, r3
 8001fc8:	4460      	add	r0, ip
 8001fca:	6869      	ldr	r1, [r5, #4]
 8001fcc:	f7fe f89c 	bl	8000108 <__udivsi3>
 8001fd0:	0400      	lsls	r0, r0, #16
 8001fd2:	0c00      	lsrs	r0, r0, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8001fd4:	2400      	movs	r4, #0
 8001fd6:	e7d1      	b.n	8001f7c <UART_SetConfig+0x1c8>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001fd8:	686b      	ldr	r3, [r5, #4]
 8001fda:	0858      	lsrs	r0, r3, #1
 8001fdc:	4b4a      	ldr	r3, [pc, #296]	; (8002108 <UART_SetConfig+0x354>)
 8001fde:	469c      	mov	ip, r3
 8001fe0:	4460      	add	r0, ip
 8001fe2:	6869      	ldr	r1, [r5, #4]
 8001fe4:	f7fe f890 	bl	8000108 <__udivsi3>
 8001fe8:	0400      	lsls	r0, r0, #16
 8001fea:	0c00      	lsrs	r0, r0, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8001fec:	2400      	movs	r4, #0
 8001fee:	e7c5      	b.n	8001f7c <UART_SetConfig+0x1c8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001ff0:	f7fe fcc2 	bl	8000978 <HAL_RCC_GetSysClockFreq>
 8001ff4:	0040      	lsls	r0, r0, #1
 8001ff6:	686b      	ldr	r3, [r5, #4]
 8001ff8:	085b      	lsrs	r3, r3, #1
 8001ffa:	18c0      	adds	r0, r0, r3
 8001ffc:	6869      	ldr	r1, [r5, #4]
 8001ffe:	f7fe f883 	bl	8000108 <__udivsi3>
 8002002:	0400      	lsls	r0, r0, #16
 8002004:	0c00      	lsrs	r0, r0, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8002006:	2400      	movs	r4, #0
        break;
 8002008:	e7b8      	b.n	8001f7c <UART_SetConfig+0x1c8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800200a:	686b      	ldr	r3, [r5, #4]
 800200c:	0858      	lsrs	r0, r3, #1
 800200e:	2380      	movs	r3, #128	; 0x80
 8002010:	025b      	lsls	r3, r3, #9
 8002012:	469c      	mov	ip, r3
 8002014:	4460      	add	r0, ip
 8002016:	6869      	ldr	r1, [r5, #4]
 8002018:	f7fe f876 	bl	8000108 <__udivsi3>
 800201c:	0400      	lsls	r0, r0, #16
 800201e:	0c00      	lsrs	r0, r0, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8002020:	2400      	movs	r4, #0
        break;
 8002022:	e7ab      	b.n	8001f7c <UART_SetConfig+0x1c8>
        ret = HAL_ERROR;
 8002024:	2401      	movs	r4, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002026:	2000      	movs	r0, #0
 8002028:	e7a8      	b.n	8001f7c <UART_SetConfig+0x1c8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800202a:	f7ff f88f 	bl	800114c <HAL_RCC_GetPCLK1Freq>
 800202e:	686b      	ldr	r3, [r5, #4]
 8002030:	085b      	lsrs	r3, r3, #1
 8002032:	18c0      	adds	r0, r0, r3
 8002034:	6869      	ldr	r1, [r5, #4]
 8002036:	f7fe f867 	bl	8000108 <__udivsi3>
 800203a:	0400      	lsls	r0, r0, #16
 800203c:	0c00      	lsrs	r0, r0, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 800203e:	2400      	movs	r4, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002040:	4a2f      	ldr	r2, [pc, #188]	; (8002100 <UART_SetConfig+0x34c>)
 8002042:	0003      	movs	r3, r0
 8002044:	3b10      	subs	r3, #16
 8002046:	4293      	cmp	r3, r2
 8002048:	d900      	bls.n	800204c <UART_SetConfig+0x298>
 800204a:	e077      	b.n	800213c <UART_SetConfig+0x388>
      huart->Instance->BRR = usartdiv;
 800204c:	682b      	ldr	r3, [r5, #0]
 800204e:	60d8      	str	r0, [r3, #12]
  huart->RxISR = NULL;
 8002050:	2300      	movs	r3, #0
 8002052:	662b      	str	r3, [r5, #96]	; 0x60
  huart->TxISR = NULL;
 8002054:	666b      	str	r3, [r5, #100]	; 0x64
}
 8002056:	0020      	movs	r0, r4
 8002058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800205a:	f7ff f887 	bl	800116c <HAL_RCC_GetPCLK2Freq>
 800205e:	686b      	ldr	r3, [r5, #4]
 8002060:	085b      	lsrs	r3, r3, #1
 8002062:	18c0      	adds	r0, r0, r3
 8002064:	6869      	ldr	r1, [r5, #4]
 8002066:	f7fe f84f 	bl	8000108 <__udivsi3>
 800206a:	0400      	lsls	r0, r0, #16
 800206c:	0c00      	lsrs	r0, r0, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 800206e:	2400      	movs	r4, #0
        break;
 8002070:	e7e6      	b.n	8002040 <UART_SetConfig+0x28c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002072:	4b1d      	ldr	r3, [pc, #116]	; (80020e8 <UART_SetConfig+0x334>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	06db      	lsls	r3, r3, #27
 8002078:	d50b      	bpl.n	8002092 <UART_SetConfig+0x2de>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800207a:	686b      	ldr	r3, [r5, #4]
 800207c:	0858      	lsrs	r0, r3, #1
 800207e:	4b1d      	ldr	r3, [pc, #116]	; (80020f4 <UART_SetConfig+0x340>)
 8002080:	469c      	mov	ip, r3
 8002082:	4460      	add	r0, ip
 8002084:	6869      	ldr	r1, [r5, #4]
 8002086:	f7fe f83f 	bl	8000108 <__udivsi3>
 800208a:	0400      	lsls	r0, r0, #16
 800208c:	0c00      	lsrs	r0, r0, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 800208e:	2400      	movs	r4, #0
 8002090:	e7d6      	b.n	8002040 <UART_SetConfig+0x28c>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002092:	686b      	ldr	r3, [r5, #4]
 8002094:	0858      	lsrs	r0, r3, #1
 8002096:	4b18      	ldr	r3, [pc, #96]	; (80020f8 <UART_SetConfig+0x344>)
 8002098:	469c      	mov	ip, r3
 800209a:	4460      	add	r0, ip
 800209c:	6869      	ldr	r1, [r5, #4]
 800209e:	f7fe f833 	bl	8000108 <__udivsi3>
 80020a2:	0400      	lsls	r0, r0, #16
 80020a4:	0c00      	lsrs	r0, r0, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 80020a6:	2400      	movs	r4, #0
 80020a8:	e7ca      	b.n	8002040 <UART_SetConfig+0x28c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80020aa:	f7fe fc65 	bl	8000978 <HAL_RCC_GetSysClockFreq>
 80020ae:	686b      	ldr	r3, [r5, #4]
 80020b0:	085b      	lsrs	r3, r3, #1
 80020b2:	18c0      	adds	r0, r0, r3
 80020b4:	6869      	ldr	r1, [r5, #4]
 80020b6:	f7fe f827 	bl	8000108 <__udivsi3>
 80020ba:	0400      	lsls	r0, r0, #16
 80020bc:	0c00      	lsrs	r0, r0, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 80020be:	2400      	movs	r4, #0
        break;
 80020c0:	e7be      	b.n	8002040 <UART_SetConfig+0x28c>
 80020c2:	46c0      	nop			; (mov r8, r8)
 80020c4:	efff69f3 	.word	0xefff69f3
 80020c8:	ffffcfff 	.word	0xffffcfff
 80020cc:	40004800 	.word	0x40004800
 80020d0:	fffff4ff 	.word	0xfffff4ff
 80020d4:	40013800 	.word	0x40013800
 80020d8:	40004400 	.word	0x40004400
 80020dc:	40004c00 	.word	0x40004c00
 80020e0:	40005000 	.word	0x40005000
 80020e4:	08003260 	.word	0x08003260
 80020e8:	40021000 	.word	0x40021000
 80020ec:	fffffd00 	.word	0xfffffd00
 80020f0:	000ffcff 	.word	0x000ffcff
 80020f4:	003d0900 	.word	0x003d0900
 80020f8:	00f42400 	.word	0x00f42400
 80020fc:	08003284 	.word	0x08003284
 8002100:	0000ffef 	.word	0x0000ffef
 8002104:	007a1200 	.word	0x007a1200
 8002108:	01e84800 	.word	0x01e84800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800210c:	686b      	ldr	r3, [r5, #4]
 800210e:	0858      	lsrs	r0, r3, #1
 8002110:	2380      	movs	r3, #128	; 0x80
 8002112:	021b      	lsls	r3, r3, #8
 8002114:	469c      	mov	ip, r3
 8002116:	4460      	add	r0, ip
 8002118:	6869      	ldr	r1, [r5, #4]
 800211a:	f7fd fff5 	bl	8000108 <__udivsi3>
 800211e:	0400      	lsls	r0, r0, #16
 8002120:	0c00      	lsrs	r0, r0, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8002122:	2400      	movs	r4, #0
        break;
 8002124:	e78c      	b.n	8002040 <UART_SetConfig+0x28c>
        ret = HAL_ERROR;
 8002126:	2401      	movs	r4, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002128:	2000      	movs	r0, #0
 800212a:	e789      	b.n	8002040 <UART_SetConfig+0x28c>
        ret = HAL_ERROR;
 800212c:	2401      	movs	r4, #1
 800212e:	e78f      	b.n	8002050 <UART_SetConfig+0x29c>
 8002130:	2401      	movs	r4, #1
 8002132:	e78d      	b.n	8002050 <UART_SetConfig+0x29c>
          ret = HAL_ERROR;
 8002134:	2401      	movs	r4, #1
 8002136:	e78b      	b.n	8002050 <UART_SetConfig+0x29c>
      ret = HAL_ERROR;
 8002138:	2401      	movs	r4, #1
 800213a:	e789      	b.n	8002050 <UART_SetConfig+0x29c>
      ret = HAL_ERROR;
 800213c:	2401      	movs	r4, #1
 800213e:	e787      	b.n	8002050 <UART_SetConfig+0x29c>

08002140 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002140:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002142:	07db      	lsls	r3, r3, #31
 8002144:	d506      	bpl.n	8002154 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002146:	6802      	ldr	r2, [r0, #0]
 8002148:	6853      	ldr	r3, [r2, #4]
 800214a:	492c      	ldr	r1, [pc, #176]	; (80021fc <UART_AdvFeatureConfig+0xbc>)
 800214c:	400b      	ands	r3, r1
 800214e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002150:	430b      	orrs	r3, r1
 8002152:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002154:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002156:	079b      	lsls	r3, r3, #30
 8002158:	d506      	bpl.n	8002168 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800215a:	6802      	ldr	r2, [r0, #0]
 800215c:	6853      	ldr	r3, [r2, #4]
 800215e:	4928      	ldr	r1, [pc, #160]	; (8002200 <UART_AdvFeatureConfig+0xc0>)
 8002160:	400b      	ands	r3, r1
 8002162:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002164:	430b      	orrs	r3, r1
 8002166:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002168:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800216a:	075b      	lsls	r3, r3, #29
 800216c:	d506      	bpl.n	800217c <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800216e:	6802      	ldr	r2, [r0, #0]
 8002170:	6853      	ldr	r3, [r2, #4]
 8002172:	4924      	ldr	r1, [pc, #144]	; (8002204 <UART_AdvFeatureConfig+0xc4>)
 8002174:	400b      	ands	r3, r1
 8002176:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8002178:	430b      	orrs	r3, r1
 800217a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800217c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800217e:	071b      	lsls	r3, r3, #28
 8002180:	d506      	bpl.n	8002190 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002182:	6802      	ldr	r2, [r0, #0]
 8002184:	6853      	ldr	r3, [r2, #4]
 8002186:	4920      	ldr	r1, [pc, #128]	; (8002208 <UART_AdvFeatureConfig+0xc8>)
 8002188:	400b      	ands	r3, r1
 800218a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800218c:	430b      	orrs	r3, r1
 800218e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002190:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002192:	06db      	lsls	r3, r3, #27
 8002194:	d506      	bpl.n	80021a4 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002196:	6802      	ldr	r2, [r0, #0]
 8002198:	6893      	ldr	r3, [r2, #8]
 800219a:	491c      	ldr	r1, [pc, #112]	; (800220c <UART_AdvFeatureConfig+0xcc>)
 800219c:	400b      	ands	r3, r1
 800219e:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80021a0:	430b      	orrs	r3, r1
 80021a2:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80021a4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80021a6:	069b      	lsls	r3, r3, #26
 80021a8:	d506      	bpl.n	80021b8 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80021aa:	6802      	ldr	r2, [r0, #0]
 80021ac:	6893      	ldr	r3, [r2, #8]
 80021ae:	4918      	ldr	r1, [pc, #96]	; (8002210 <UART_AdvFeatureConfig+0xd0>)
 80021b0:	400b      	ands	r3, r1
 80021b2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80021b4:	430b      	orrs	r3, r1
 80021b6:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80021b8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80021ba:	065b      	lsls	r3, r3, #25
 80021bc:	d50b      	bpl.n	80021d6 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80021be:	6802      	ldr	r2, [r0, #0]
 80021c0:	6853      	ldr	r3, [r2, #4]
 80021c2:	4914      	ldr	r1, [pc, #80]	; (8002214 <UART_AdvFeatureConfig+0xd4>)
 80021c4:	400b      	ands	r3, r1
 80021c6:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80021c8:	430b      	orrs	r3, r1
 80021ca:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80021cc:	2380      	movs	r3, #128	; 0x80
 80021ce:	035b      	lsls	r3, r3, #13
 80021d0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d00a      	beq.n	80021ec <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80021d6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80021d8:	061b      	lsls	r3, r3, #24
 80021da:	d506      	bpl.n	80021ea <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80021dc:	6802      	ldr	r2, [r0, #0]
 80021de:	6853      	ldr	r3, [r2, #4]
 80021e0:	490d      	ldr	r1, [pc, #52]	; (8002218 <UART_AdvFeatureConfig+0xd8>)
 80021e2:	400b      	ands	r3, r1
 80021e4:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80021e6:	430b      	orrs	r3, r1
 80021e8:	6053      	str	r3, [r2, #4]
}
 80021ea:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80021ec:	6802      	ldr	r2, [r0, #0]
 80021ee:	6853      	ldr	r3, [r2, #4]
 80021f0:	490a      	ldr	r1, [pc, #40]	; (800221c <UART_AdvFeatureConfig+0xdc>)
 80021f2:	400b      	ands	r3, r1
 80021f4:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80021f6:	430b      	orrs	r3, r1
 80021f8:	6053      	str	r3, [r2, #4]
 80021fa:	e7ec      	b.n	80021d6 <UART_AdvFeatureConfig+0x96>
 80021fc:	fffdffff 	.word	0xfffdffff
 8002200:	fffeffff 	.word	0xfffeffff
 8002204:	fffbffff 	.word	0xfffbffff
 8002208:	ffff7fff 	.word	0xffff7fff
 800220c:	ffffefff 	.word	0xffffefff
 8002210:	ffffdfff 	.word	0xffffdfff
 8002214:	ffefffff 	.word	0xffefffff
 8002218:	fff7ffff 	.word	0xfff7ffff
 800221c:	ff9fffff 	.word	0xff9fffff

08002220 <UART_WaitOnFlagUntilTimeout>:
{
 8002220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002222:	46c6      	mov	lr, r8
 8002224:	b500      	push	{lr}
 8002226:	0005      	movs	r5, r0
 8002228:	000f      	movs	r7, r1
 800222a:	0016      	movs	r6, r2
 800222c:	4698      	mov	r8, r3
 800222e:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002230:	682b      	ldr	r3, [r5, #0]
 8002232:	69db      	ldr	r3, [r3, #28]
 8002234:	003a      	movs	r2, r7
 8002236:	439a      	bics	r2, r3
 8002238:	0013      	movs	r3, r2
 800223a:	425a      	negs	r2, r3
 800223c:	4153      	adcs	r3, r2
 800223e:	42b3      	cmp	r3, r6
 8002240:	d11c      	bne.n	800227c <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8002242:	1c63      	adds	r3, r4, #1
 8002244:	d0f4      	beq.n	8002230 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002246:	f7fe f929 	bl	800049c <HAL_GetTick>
 800224a:	4643      	mov	r3, r8
 800224c:	1ac0      	subs	r0, r0, r3
 800224e:	4284      	cmp	r4, r0
 8002250:	d301      	bcc.n	8002256 <UART_WaitOnFlagUntilTimeout+0x36>
 8002252:	2c00      	cmp	r4, #0
 8002254:	d1ec      	bne.n	8002230 <UART_WaitOnFlagUntilTimeout+0x10>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002256:	682a      	ldr	r2, [r5, #0]
 8002258:	6813      	ldr	r3, [r2, #0]
 800225a:	490a      	ldr	r1, [pc, #40]	; (8002284 <UART_WaitOnFlagUntilTimeout+0x64>)
 800225c:	400b      	ands	r3, r1
 800225e:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002260:	682a      	ldr	r2, [r5, #0]
 8002262:	6893      	ldr	r3, [r2, #8]
 8002264:	31a3      	adds	r1, #163	; 0xa3
 8002266:	31ff      	adds	r1, #255	; 0xff
 8002268:	438b      	bics	r3, r1
 800226a:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 800226c:	2320      	movs	r3, #32
 800226e:	676b      	str	r3, [r5, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002270:	67ab      	str	r3, [r5, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8002272:	2200      	movs	r2, #0
 8002274:	3350      	adds	r3, #80	; 0x50
 8002276:	54ea      	strb	r2, [r5, r3]
        return HAL_TIMEOUT;
 8002278:	2003      	movs	r0, #3
 800227a:	e000      	b.n	800227e <UART_WaitOnFlagUntilTimeout+0x5e>
  return HAL_OK;
 800227c:	2000      	movs	r0, #0
}
 800227e:	bc04      	pop	{r2}
 8002280:	4690      	mov	r8, r2
 8002282:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002284:	fffffe5f 	.word	0xfffffe5f

08002288 <UART_CheckIdleState>:
{
 8002288:	b530      	push	{r4, r5, lr}
 800228a:	b083      	sub	sp, #12
 800228c:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800228e:	2300      	movs	r3, #0
 8002290:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8002292:	f7fe f903 	bl	800049c <HAL_GetTick>
 8002296:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002298:	6823      	ldr	r3, [r4, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	071b      	lsls	r3, r3, #28
 800229e:	d40c      	bmi.n	80022ba <UART_CheckIdleState+0x32>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80022a0:	6823      	ldr	r3, [r4, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	075b      	lsls	r3, r3, #29
 80022a6:	d415      	bmi.n	80022d4 <UART_CheckIdleState+0x4c>
  huart->gState = HAL_UART_STATE_READY;
 80022a8:	2320      	movs	r3, #32
 80022aa:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80022ac:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 80022ae:	2200      	movs	r2, #0
 80022b0:	3350      	adds	r3, #80	; 0x50
 80022b2:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 80022b4:	2000      	movs	r0, #0
}
 80022b6:	b003      	add	sp, #12
 80022b8:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80022ba:	4b0d      	ldr	r3, [pc, #52]	; (80022f0 <UART_CheckIdleState+0x68>)
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	0003      	movs	r3, r0
 80022c0:	2200      	movs	r2, #0
 80022c2:	2180      	movs	r1, #128	; 0x80
 80022c4:	0389      	lsls	r1, r1, #14
 80022c6:	0020      	movs	r0, r4
 80022c8:	f7ff ffaa 	bl	8002220 <UART_WaitOnFlagUntilTimeout>
 80022cc:	2800      	cmp	r0, #0
 80022ce:	d0e7      	beq.n	80022a0 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 80022d0:	2003      	movs	r0, #3
 80022d2:	e7f0      	b.n	80022b6 <UART_CheckIdleState+0x2e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80022d4:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <UART_CheckIdleState+0x68>)
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	002b      	movs	r3, r5
 80022da:	2200      	movs	r2, #0
 80022dc:	2180      	movs	r1, #128	; 0x80
 80022de:	03c9      	lsls	r1, r1, #15
 80022e0:	0020      	movs	r0, r4
 80022e2:	f7ff ff9d 	bl	8002220 <UART_WaitOnFlagUntilTimeout>
 80022e6:	2800      	cmp	r0, #0
 80022e8:	d0de      	beq.n	80022a8 <UART_CheckIdleState+0x20>
      return HAL_TIMEOUT;
 80022ea:	2003      	movs	r0, #3
 80022ec:	e7e3      	b.n	80022b6 <UART_CheckIdleState+0x2e>
 80022ee:	46c0      	nop			; (mov r8, r8)
 80022f0:	01ffffff 	.word	0x01ffffff

080022f4 <HAL_UART_Init>:
{
 80022f4:	b510      	push	{r4, lr}
 80022f6:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80022f8:	d02e      	beq.n	8002358 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 80022fa:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d021      	beq.n	8002344 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8002300:	2324      	movs	r3, #36	; 0x24
 8002302:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8002304:	6822      	ldr	r2, [r4, #0]
 8002306:	6813      	ldr	r3, [r2, #0]
 8002308:	2101      	movs	r1, #1
 800230a:	438b      	bics	r3, r1
 800230c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800230e:	0020      	movs	r0, r4
 8002310:	f7ff fd50 	bl	8001db4 <UART_SetConfig>
 8002314:	2801      	cmp	r0, #1
 8002316:	d014      	beq.n	8002342 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002318:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800231a:	2b00      	cmp	r3, #0
 800231c:	d118      	bne.n	8002350 <HAL_UART_Init+0x5c>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800231e:	6822      	ldr	r2, [r4, #0]
 8002320:	6853      	ldr	r3, [r2, #4]
 8002322:	490e      	ldr	r1, [pc, #56]	; (800235c <HAL_UART_Init+0x68>)
 8002324:	400b      	ands	r3, r1
 8002326:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002328:	6822      	ldr	r2, [r4, #0]
 800232a:	6893      	ldr	r3, [r2, #8]
 800232c:	212a      	movs	r1, #42	; 0x2a
 800232e:	438b      	bics	r3, r1
 8002330:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8002332:	6822      	ldr	r2, [r4, #0]
 8002334:	6813      	ldr	r3, [r2, #0]
 8002336:	3929      	subs	r1, #41	; 0x29
 8002338:	430b      	orrs	r3, r1
 800233a:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800233c:	0020      	movs	r0, r4
 800233e:	f7ff ffa3 	bl	8002288 <UART_CheckIdleState>
}
 8002342:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002344:	2200      	movs	r2, #0
 8002346:	3370      	adds	r3, #112	; 0x70
 8002348:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 800234a:	f000 fb17 	bl	800297c <HAL_UART_MspInit>
 800234e:	e7d7      	b.n	8002300 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8002350:	0020      	movs	r0, r4
 8002352:	f7ff fef5 	bl	8002140 <UART_AdvFeatureConfig>
 8002356:	e7e2      	b.n	800231e <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8002358:	2001      	movs	r0, #1
 800235a:	e7f2      	b.n	8002342 <HAL_UART_Init+0x4e>
 800235c:	ffffb7ff 	.word	0xffffb7ff

08002360 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002360:	4770      	bx	lr

08002362 <gps_open>:

static int gps_parse_nmea_sentence(GPS_t *gpsHandle, uint8_t *data, uint16_t size);
static void gps_parse_nmea_GPGGA(GPS_t *gpsHandle, uint8_t *data, uint16_t size);

GPS_t *gps_open(GPS_data_type_e dataType)
{
 8002362:	b510      	push	{r4, lr}
	GPS_t *gpsHandle = calloc(1, sizeof(GPS_t));
 8002364:	2128      	movs	r1, #40	; 0x28
 8002366:	2001      	movs	r0, #1
 8002368:	f000 fbcc 	bl	8002b04 <calloc>
	if (gpsHandle != NULL)
 800236c:	2800      	cmp	r0, #0
 800236e:	d001      	beq.n	8002374 <gps_open+0x12>
	{
		gpsHandle->dataType = GPS_DATA_TYPE_NMEA;
 8002370:	2300      	movs	r3, #0
 8002372:	7003      	strb	r3, [r0, #0]
	}

	return gpsHandle;
}
 8002374:	bd10      	pop	{r4, pc}
	...

08002378 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800237a:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800237c:	2214      	movs	r2, #20
 800237e:	2100      	movs	r1, #0
 8002380:	a805      	add	r0, sp, #20
 8002382:	f000 fe1d 	bl	8002fc0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002386:	4b32      	ldr	r3, [pc, #200]	; (8002450 <MX_GPIO_Init+0xd8>)
 8002388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800238a:	2601      	movs	r6, #1
 800238c:	4332      	orrs	r2, r6
 800238e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002392:	4032      	ands	r2, r6
 8002394:	9201      	str	r2, [sp, #4]
 8002396:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800239a:	2402      	movs	r4, #2
 800239c:	4322      	orrs	r2, r4
 800239e:	62da      	str	r2, [r3, #44]	; 0x2c
 80023a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023a2:	4022      	ands	r2, r4
 80023a4:	9202      	str	r2, [sp, #8]
 80023a6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023aa:	2204      	movs	r2, #4
 80023ac:	4311      	orrs	r1, r2
 80023ae:	62d9      	str	r1, [r3, #44]	; 0x2c
 80023b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023b2:	400a      	ands	r2, r1
 80023b4:	9203      	str	r2, [sp, #12]
 80023b6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023ba:	2280      	movs	r2, #128	; 0x80
 80023bc:	4311      	orrs	r1, r2
 80023be:	62d9      	str	r1, [r3, #44]	; 0x2c
 80023c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c2:	401a      	ands	r2, r3
 80023c4:	9204      	str	r2, [sp, #16]
 80023c6:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RADIO_NSS_Pin|RADIO_TCXO_VCC_Pin|RADIO_ANT_SWITCH_RX_Pin, GPIO_PIN_RESET);
 80023c8:	4d22      	ldr	r5, [pc, #136]	; (8002454 <MX_GPIO_Init+0xdc>)
 80023ca:	27a0      	movs	r7, #160	; 0xa0
 80023cc:	05ff      	lsls	r7, r7, #23
 80023ce:	2200      	movs	r2, #0
 80023d0:	0029      	movs	r1, r5
 80023d2:	0038      	movs	r0, r7
 80023d4:	f7fe fab6 	bl	8000944 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RADIO_ANT_SWITCH_TX_BOOST_Pin|RADIO_RESET_Pin|RADIO_ANT_SWITCH_TX_RFO_Pin, GPIO_PIN_RESET);
 80023d8:	2200      	movs	r2, #0
 80023da:	2107      	movs	r1, #7
 80023dc:	481e      	ldr	r0, [pc, #120]	; (8002458 <MX_GPIO_Init+0xe0>)
 80023de:	f7fe fab1 	bl	8000944 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RADIO_NSS_Pin RADIO_TCXO_VCC_Pin RADIO_ANT_SWITCH_RX_Pin */
  GPIO_InitStruct.Pin = RADIO_NSS_Pin|RADIO_TCXO_VCC_Pin|RADIO_ANT_SWITCH_RX_Pin;
 80023e2:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023e4:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e6:	2500      	movs	r5, #0
 80023e8:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023ea:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ec:	a905      	add	r1, sp, #20
 80023ee:	0038      	movs	r0, r7
 80023f0:	f7fe f9d6 	bl	80007a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RADIO_DIO_0_Pin RADIO_DIO_1_Pin RADIO_DIO_2_Pin */
  GPIO_InitStruct.Pin = RADIO_DIO_0_Pin|RADIO_DIO_1_Pin|RADIO_DIO_2_Pin;
 80023f4:	2313      	movs	r3, #19
 80023f6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023f8:	4f18      	ldr	r7, [pc, #96]	; (800245c <MX_GPIO_Init+0xe4>)
 80023fa:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fc:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023fe:	a905      	add	r1, sp, #20
 8002400:	4817      	ldr	r0, [pc, #92]	; (8002460 <MX_GPIO_Init+0xe8>)
 8002402:	f7fe f9cd 	bl	80007a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RADIO_DIO_3_Pin */
  GPIO_InitStruct.Pin = RADIO_DIO_3_Pin;
 8002406:	2380      	movs	r3, #128	; 0x80
 8002408:	019b      	lsls	r3, r3, #6
 800240a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800240c:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240e:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(RADIO_DIO_3_GPIO_Port, &GPIO_InitStruct);
 8002410:	a905      	add	r1, sp, #20
 8002412:	4811      	ldr	r0, [pc, #68]	; (8002458 <MX_GPIO_Init+0xe0>)
 8002414:	f7fe f9c4 	bl	80007a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RADIO_ANT_SWITCH_TX_BOOST_Pin RADIO_RESET_Pin RADIO_ANT_SWITCH_TX_RFO_Pin */
  GPIO_InitStruct.Pin = RADIO_ANT_SWITCH_TX_BOOST_Pin|RADIO_RESET_Pin|RADIO_ANT_SWITCH_TX_RFO_Pin;
 8002418:	2307      	movs	r3, #7
 800241a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800241c:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241e:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002420:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002422:	a905      	add	r1, sp, #20
 8002424:	480c      	ldr	r0, [pc, #48]	; (8002458 <MX_GPIO_Init+0xe0>)
 8002426:	f7fe f9bb 	bl	80007a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 800242a:	2200      	movs	r2, #0
 800242c:	2100      	movs	r1, #0
 800242e:	2005      	movs	r0, #5
 8002430:	f7fe f83a 	bl	80004a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8002434:	2005      	movs	r0, #5
 8002436:	f7fe f869 	bl	800050c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800243a:	2200      	movs	r2, #0
 800243c:	2100      	movs	r1, #0
 800243e:	2007      	movs	r0, #7
 8002440:	f7fe f832 	bl	80004a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002444:	2007      	movs	r0, #7
 8002446:	f7fe f861 	bl	800050c <HAL_NVIC_EnableIRQ>

}
 800244a:	b00b      	add	sp, #44	; 0x2c
 800244c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800244e:	46c0      	nop			; (mov r8, r8)
 8002450:	40021000 	.word	0x40021000
 8002454:	00009002 	.word	0x00009002
 8002458:	50000800 	.word	0x50000800
 800245c:	10110000 	.word	0x10110000
 8002460:	50000400 	.word	0x50000400

08002464 <MX_DMA_Init>:
{
 8002464:	b500      	push	{lr}
 8002466:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002468:	4a09      	ldr	r2, [pc, #36]	; (8002490 <MX_DMA_Init+0x2c>)
 800246a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800246c:	2301      	movs	r3, #1
 800246e:	4319      	orrs	r1, r3
 8002470:	6311      	str	r1, [r2, #48]	; 0x30
 8002472:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002474:	4013      	ands	r3, r2
 8002476:	9301      	str	r3, [sp, #4]
 8002478:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800247a:	2200      	movs	r2, #0
 800247c:	2100      	movs	r1, #0
 800247e:	200a      	movs	r0, #10
 8002480:	f7fe f812 	bl	80004a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8002484:	200a      	movs	r0, #10
 8002486:	f7fe f841 	bl	800050c <HAL_NVIC_EnableIRQ>
}
 800248a:	b003      	add	sp, #12
 800248c:	bd00      	pop	{pc}
 800248e:	46c0      	nop			; (mov r8, r8)
 8002490:	40021000 	.word	0x40021000

08002494 <MX_RTC_Init>:
{
 8002494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002496:	b091      	sub	sp, #68	; 0x44
  RTC_TimeTypeDef sTime = {0};
 8002498:	ae0b      	add	r6, sp, #44	; 0x2c
 800249a:	2214      	movs	r2, #20
 800249c:	2100      	movs	r1, #0
 800249e:	0030      	movs	r0, r6
 80024a0:	f000 fd8e 	bl	8002fc0 <memset>
  RTC_DateTypeDef sDate = {0};
 80024a4:	af0a      	add	r7, sp, #40	; 0x28
 80024a6:	2400      	movs	r4, #0
 80024a8:	940a      	str	r4, [sp, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80024aa:	2228      	movs	r2, #40	; 0x28
 80024ac:	2100      	movs	r1, #0
 80024ae:	4668      	mov	r0, sp
 80024b0:	f000 fd86 	bl	8002fc0 <memset>
  hrtc.Instance = RTC;
 80024b4:	4d1d      	ldr	r5, [pc, #116]	; (800252c <MX_RTC_Init+0x98>)
 80024b6:	4b1e      	ldr	r3, [pc, #120]	; (8002530 <MX_RTC_Init+0x9c>)
 80024b8:	602b      	str	r3, [r5, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80024ba:	606c      	str	r4, [r5, #4]
  hrtc.Init.AsynchPrediv = 31;
 80024bc:	231f      	movs	r3, #31
 80024be:	60ab      	str	r3, [r5, #8]
  hrtc.Init.SynchPrediv = 1023;
 80024c0:	4b1c      	ldr	r3, [pc, #112]	; (8002534 <MX_RTC_Init+0xa0>)
 80024c2:	60eb      	str	r3, [r5, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80024c4:	612c      	str	r4, [r5, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80024c6:	616c      	str	r4, [r5, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80024c8:	61ac      	str	r4, [r5, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80024ca:	61ec      	str	r4, [r5, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80024cc:	0028      	movs	r0, r5
 80024ce:	f7fe ffbd 	bl	800144c <HAL_RTC_Init>
  sTime.Hours = 0;
 80024d2:	7034      	strb	r4, [r6, #0]
  sTime.Minutes = 0;
 80024d4:	7074      	strb	r4, [r6, #1]
  sTime.Seconds = 0;
 80024d6:	70b4      	strb	r4, [r6, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80024d8:	60f4      	str	r4, [r6, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80024da:	6134      	str	r4, [r6, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80024dc:	2200      	movs	r2, #0
 80024de:	0031      	movs	r1, r6
 80024e0:	0028      	movs	r0, r5
 80024e2:	f7ff f82b 	bl	800153c <HAL_RTC_SetTime>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80024e6:	2601      	movs	r6, #1
 80024e8:	703e      	strb	r6, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80024ea:	707e      	strb	r6, [r7, #1]
  sDate.Date = 1;
 80024ec:	70be      	strb	r6, [r7, #2]
  sDate.Year = 0;
 80024ee:	70fc      	strb	r4, [r7, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80024f0:	2200      	movs	r2, #0
 80024f2:	0039      	movs	r1, r7
 80024f4:	0028      	movs	r0, r5
 80024f6:	f7ff f8a7 	bl	8001648 <HAL_RTC_SetDate>
  sAlarm.AlarmTime.Hours = 0;
 80024fa:	466b      	mov	r3, sp
 80024fc:	701c      	strb	r4, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 80024fe:	705c      	strb	r4, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8002500:	709c      	strb	r4, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8002502:	9401      	str	r4, [sp, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002504:	9403      	str	r4, [sp, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002506:	9404      	str	r4, [sp, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002508:	9405      	str	r4, [sp, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 800250a:	23f0      	movs	r3, #240	; 0xf0
 800250c:	051b      	lsls	r3, r3, #20
 800250e:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002510:	9407      	str	r4, [sp, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8002512:	2320      	movs	r3, #32
 8002514:	466a      	mov	r2, sp
 8002516:	54d6      	strb	r6, [r2, r3]
  sAlarm.Alarm = RTC_ALARM_A;
 8002518:	33e0      	adds	r3, #224	; 0xe0
 800251a:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800251c:	2200      	movs	r2, #0
 800251e:	4669      	mov	r1, sp
 8002520:	0028      	movs	r0, r5
 8002522:	f7ff f907 	bl	8001734 <HAL_RTC_SetAlarm_IT>
}
 8002526:	b011      	add	sp, #68	; 0x44
 8002528:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800252a:	46c0      	nop			; (mov r8, r8)
 800252c:	200007d0 	.word	0x200007d0
 8002530:	40002800 	.word	0x40002800
 8002534:	000003ff 	.word	0x000003ff

08002538 <MX_SPI1_Init>:
{
 8002538:	b510      	push	{r4, lr}
  hspi1.Instance = SPI1;
 800253a:	480c      	ldr	r0, [pc, #48]	; (800256c <MX_SPI1_Init+0x34>)
 800253c:	4b0c      	ldr	r3, [pc, #48]	; (8002570 <MX_SPI1_Init+0x38>)
 800253e:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002540:	2382      	movs	r3, #130	; 0x82
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002546:	2300      	movs	r3, #0
 8002548:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800254a:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800254c:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800254e:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002550:	2280      	movs	r2, #128	; 0x80
 8002552:	0092      	lsls	r2, r2, #2
 8002554:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002556:	3ae1      	subs	r2, #225	; 0xe1
 8002558:	3aff      	subs	r2, #255	; 0xff
 800255a:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800255c:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800255e:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002560:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002562:	3307      	adds	r3, #7
 8002564:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002566:	f7ff f9c7 	bl	80018f8 <HAL_SPI_Init>
}
 800256a:	bd10      	pop	{r4, pc}
 800256c:	200007f4 	.word	0x200007f4
 8002570:	40013000 	.word	0x40013000

08002574 <MX_SPI2_Init>:
{
 8002574:	b510      	push	{r4, lr}
  hspi2.Instance = SPI2;
 8002576:	480a      	ldr	r0, [pc, #40]	; (80025a0 <MX_SPI2_Init+0x2c>)
 8002578:	4b0a      	ldr	r3, [pc, #40]	; (80025a4 <MX_SPI2_Init+0x30>)
 800257a:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800257c:	2382      	movs	r3, #130	; 0x82
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002582:	2300      	movs	r3, #0
 8002584:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002586:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002588:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800258a:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 800258c:	6183      	str	r3, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800258e:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002590:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002592:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002594:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002596:	3307      	adds	r3, #7
 8002598:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800259a:	f7ff f9ad 	bl	80018f8 <HAL_SPI_Init>
}
 800259e:	bd10      	pop	{r4, pc}
 80025a0:	20000564 	.word	0x20000564
 80025a4:	40003800 	.word	0x40003800

080025a8 <MX_USART2_UART_Init>:
{
 80025a8:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 80025aa:	4809      	ldr	r0, [pc, #36]	; (80025d0 <MX_USART2_UART_Init+0x28>)
 80025ac:	4b09      	ldr	r3, [pc, #36]	; (80025d4 <MX_USART2_UART_Init+0x2c>)
 80025ae:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80025b0:	23e1      	movs	r3, #225	; 0xe1
 80025b2:	025b      	lsls	r3, r3, #9
 80025b4:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025b6:	2300      	movs	r3, #0
 80025b8:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80025ba:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80025bc:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80025be:	220c      	movs	r2, #12
 80025c0:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025c2:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80025c4:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025c6:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025c8:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80025ca:	f7ff fe93 	bl	80022f4 <HAL_UART_Init>
}
 80025ce:	bd10      	pop	{r4, pc}
 80025d0:	2000084c 	.word	0x2000084c
 80025d4:	40004400 	.word	0x40004400

080025d8 <MX_USART1_UART_Init>:
{
 80025d8:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 80025da:	4809      	ldr	r0, [pc, #36]	; (8002600 <MX_USART1_UART_Init+0x28>)
 80025dc:	4b09      	ldr	r3, [pc, #36]	; (8002604 <MX_USART1_UART_Init+0x2c>)
 80025de:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 80025e0:	2396      	movs	r3, #150	; 0x96
 80025e2:	019b      	lsls	r3, r3, #6
 80025e4:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025e6:	2300      	movs	r3, #0
 80025e8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80025ea:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80025ec:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80025ee:	220c      	movs	r2, #12
 80025f0:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025f2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025f4:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025f6:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025f8:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025fa:	f7ff fe7b 	bl	80022f4 <HAL_UART_Init>
}
 80025fe:	bd10      	pop	{r4, pc}
 8002600:	20000750 	.word	0x20000750
 8002604:	40013800 	.word	0x40013800

08002608 <HAL_UART_RxCpltCallback>:
}
 8002608:	4770      	bx	lr

0800260a <HAL_UART_RxHalfCpltCallback>:
}
 800260a:	4770      	bx	lr

0800260c <SystemClock_Config>:
{
 800260c:	b510      	push	{r4, lr}
 800260e:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002610:	2238      	movs	r2, #56	; 0x38
 8002612:	2100      	movs	r1, #0
 8002614:	a80e      	add	r0, sp, #56	; 0x38
 8002616:	f000 fcd3 	bl	8002fc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800261a:	2214      	movs	r2, #20
 800261c:	2100      	movs	r1, #0
 800261e:	a809      	add	r0, sp, #36	; 0x24
 8002620:	f000 fcce 	bl	8002fc0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002624:	2224      	movs	r2, #36	; 0x24
 8002626:	2100      	movs	r1, #0
 8002628:	4668      	mov	r0, sp
 800262a:	f000 fcc9 	bl	8002fc0 <memset>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800262e:	4919      	ldr	r1, [pc, #100]	; (8002694 <SystemClock_Config+0x88>)
 8002630:	680b      	ldr	r3, [r1, #0]
 8002632:	4a19      	ldr	r2, [pc, #100]	; (8002698 <SystemClock_Config+0x8c>)
 8002634:	401a      	ands	r2, r3
 8002636:	2380      	movs	r3, #128	; 0x80
 8002638:	011b      	lsls	r3, r3, #4
 800263a:	4313      	orrs	r3, r2
 800263c:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800263e:	230a      	movs	r3, #10
 8002640:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002642:	3b09      	subs	r3, #9
 8002644:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002646:	2210      	movs	r2, #16
 8002648:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800264a:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800264c:	3301      	adds	r3, #1
 800264e:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002650:	2400      	movs	r4, #0
 8002652:	9419      	str	r4, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 8002654:	2380      	movs	r3, #128	; 0x80
 8002656:	031b      	lsls	r3, r3, #12
 8002658:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 800265a:	2380      	movs	r3, #128	; 0x80
 800265c:	041b      	lsls	r3, r3, #16
 800265e:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002660:	a80e      	add	r0, sp, #56	; 0x38
 8002662:	f7fe f9d3 	bl	8000a0c <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002666:	230f      	movs	r3, #15
 8002668:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800266a:	3b0c      	subs	r3, #12
 800266c:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800266e:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002670:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002672:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002674:	2101      	movs	r1, #1
 8002676:	a809      	add	r0, sp, #36	; 0x24
 8002678:	f7fe fc8e 	bl	8000f98 <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800267c:	2323      	movs	r3, #35	; 0x23
 800267e:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002680:	9402      	str	r4, [sp, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002682:	9403      	str	r4, [sp, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002684:	2380      	movs	r3, #128	; 0x80
 8002686:	029b      	lsls	r3, r3, #10
 8002688:	9301      	str	r3, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800268a:	4668      	mov	r0, sp
 800268c:	f7fe fd7e 	bl	800118c <HAL_RCCEx_PeriphCLKConfig>
}
 8002690:	b01c      	add	sp, #112	; 0x70
 8002692:	bd10      	pop	{r4, pc}
 8002694:	40007000 	.word	0x40007000
 8002698:	ffffe7ff 	.word	0xffffe7ff

0800269c <main>:
{
 800269c:	b510      	push	{r4, lr}
  HAL_Init();
 800269e:	f7fd fee1 	bl	8000464 <HAL_Init>
  SystemClock_Config();
 80026a2:	f7ff ffb3 	bl	800260c <SystemClock_Config>
  MX_GPIO_Init();
 80026a6:	f7ff fe67 	bl	8002378 <MX_GPIO_Init>
  MX_DMA_Init();
 80026aa:	f7ff fedb 	bl	8002464 <MX_DMA_Init>
  MX_RTC_Init();
 80026ae:	f7ff fef1 	bl	8002494 <MX_RTC_Init>
  MX_SPI1_Init();
 80026b2:	f7ff ff41 	bl	8002538 <MX_SPI1_Init>
  MX_SPI2_Init();
 80026b6:	f7ff ff5d 	bl	8002574 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80026ba:	f7ff ff75 	bl	80025a8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80026be:	f7ff ff8b 	bl	80025d8 <MX_USART1_UART_Init>
  gpsHandle = gps_open(GPS_DATA_TYPE_NMEA);
 80026c2:	2000      	movs	r0, #0
 80026c4:	f7ff fe4d 	bl	8002362 <gps_open>
 80026c8:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <main+0x48>)
 80026ca:	6018      	str	r0, [r3, #0]
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 80026cc:	4806      	ldr	r0, [pc, #24]	; (80026e8 <main+0x4c>)
 80026ce:	6802      	ldr	r2, [r0, #0]
 80026d0:	6813      	ldr	r3, [r2, #0]
 80026d2:	2110      	movs	r1, #16
 80026d4:	430b      	orrs	r3, r1
 80026d6:	6013      	str	r3, [r2, #0]
  HAL_UART_Receive_DMA(&huart1, DMA_buffer, 128);
 80026d8:	2280      	movs	r2, #128	; 0x80
 80026da:	4904      	ldr	r1, [pc, #16]	; (80026ec <main+0x50>)
 80026dc:	f7ff f9fc 	bl	8001ad8 <HAL_UART_Receive_DMA>
 80026e0:	e7fe      	b.n	80026e0 <main+0x44>
 80026e2:	46c0      	nop			; (mov r8, r8)
 80026e4:	20000560 	.word	0x20000560
 80026e8:	20000750 	.word	0x20000750
 80026ec:	200005bc 	.word	0x200005bc

080026f0 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80026f0:	4770      	bx	lr
	...

080026f4 <HAL_RTC_MspInit>:
  }

}

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80026f4:	b510      	push	{r4, lr}

  if(rtcHandle->Instance==RTC)
 80026f6:	6802      	ldr	r2, [r0, #0]
 80026f8:	4b09      	ldr	r3, [pc, #36]	; (8002720 <HAL_RTC_MspInit+0x2c>)
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d000      	beq.n	8002700 <HAL_RTC_MspInit+0xc>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80026fe:	bd10      	pop	{r4, pc}
    __HAL_RCC_RTC_ENABLE();
 8002700:	4a08      	ldr	r2, [pc, #32]	; (8002724 <HAL_RTC_MspInit+0x30>)
 8002702:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8002704:	2380      	movs	r3, #128	; 0x80
 8002706:	02db      	lsls	r3, r3, #11
 8002708:	430b      	orrs	r3, r1
 800270a:	6513      	str	r3, [r2, #80]	; 0x50
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800270c:	2200      	movs	r2, #0
 800270e:	2100      	movs	r1, #0
 8002710:	2002      	movs	r0, #2
 8002712:	f7fd fec9 	bl	80004a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8002716:	2002      	movs	r0, #2
 8002718:	f7fd fef8 	bl	800050c <HAL_NVIC_EnableIRQ>
}
 800271c:	e7ef      	b.n	80026fe <HAL_RTC_MspInit+0xa>
 800271e:	46c0      	nop			; (mov r8, r8)
 8002720:	40002800 	.word	0x40002800
 8002724:	40021000 	.word	0x40021000

08002728 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002728:	b530      	push	{r4, r5, lr}
 800272a:	b089      	sub	sp, #36	; 0x24
 800272c:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800272e:	2214      	movs	r2, #20
 8002730:	2100      	movs	r1, #0
 8002732:	a803      	add	r0, sp, #12
 8002734:	f000 fc44 	bl	8002fc0 <memset>
  if(spiHandle->Instance==SPI1)
 8002738:	6823      	ldr	r3, [r4, #0]
 800273a:	4a3a      	ldr	r2, [pc, #232]	; (8002824 <HAL_SPI_MspInit+0xfc>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d004      	beq.n	800274a <HAL_SPI_MspInit+0x22>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI2)
 8002740:	4a39      	ldr	r2, [pc, #228]	; (8002828 <HAL_SPI_MspInit+0x100>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d035      	beq.n	80027b2 <HAL_SPI_MspInit+0x8a>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002746:	b009      	add	sp, #36	; 0x24
 8002748:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 800274a:	4b38      	ldr	r3, [pc, #224]	; (800282c <HAL_SPI_MspInit+0x104>)
 800274c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800274e:	2280      	movs	r2, #128	; 0x80
 8002750:	0152      	lsls	r2, r2, #5
 8002752:	430a      	orrs	r2, r1
 8002754:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002758:	2402      	movs	r4, #2
 800275a:	4322      	orrs	r2, r4
 800275c:	62da      	str	r2, [r3, #44]	; 0x2c
 800275e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002760:	4022      	ands	r2, r4
 8002762:	9200      	str	r2, [sp, #0]
 8002764:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002766:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002768:	2201      	movs	r2, #1
 800276a:	4311      	orrs	r1, r2
 800276c:	62d9      	str	r1, [r3, #44]	; 0x2c
 800276e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002770:	401a      	ands	r2, r3
 8002772:	9201      	str	r2, [sp, #4]
 8002774:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = RADIO_SCLK_Pin;
 8002776:	2308      	movs	r3, #8
 8002778:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277a:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800277c:	2503      	movs	r5, #3
 800277e:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(RADIO_SCLK_GPIO_Port, &GPIO_InitStruct);
 8002780:	a903      	add	r1, sp, #12
 8002782:	482b      	ldr	r0, [pc, #172]	; (8002830 <HAL_SPI_MspInit+0x108>)
 8002784:	f7fe f80c 	bl	80007a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RADIO_MOSI_Pin|RADIO_MISO_Pin;
 8002788:	23c0      	movs	r3, #192	; 0xc0
 800278a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800278c:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278e:	2300      	movs	r3, #0
 8002790:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002792:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002794:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002796:	a903      	add	r1, sp, #12
 8002798:	20a0      	movs	r0, #160	; 0xa0
 800279a:	05c0      	lsls	r0, r0, #23
 800279c:	f7fe f800 	bl	80007a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80027a0:	2200      	movs	r2, #0
 80027a2:	2100      	movs	r1, #0
 80027a4:	2019      	movs	r0, #25
 80027a6:	f7fd fe7f 	bl	80004a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80027aa:	2019      	movs	r0, #25
 80027ac:	f7fd feae 	bl	800050c <HAL_NVIC_EnableIRQ>
 80027b0:	e7c9      	b.n	8002746 <HAL_SPI_MspInit+0x1e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80027b2:	4b1e      	ldr	r3, [pc, #120]	; (800282c <HAL_SPI_MspInit+0x104>)
 80027b4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80027b6:	2280      	movs	r2, #128	; 0x80
 80027b8:	01d2      	lsls	r2, r2, #7
 80027ba:	430a      	orrs	r2, r1
 80027bc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027c0:	2502      	movs	r5, #2
 80027c2:	432a      	orrs	r2, r5
 80027c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80027c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c8:	402b      	ands	r3, r5
 80027ca:	9302      	str	r3, [sp, #8]
 80027cc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12;
 80027ce:	23f0      	movs	r3, #240	; 0xf0
 80027d0:	021b      	lsls	r3, r3, #8
 80027d2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d4:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027d6:	2303      	movs	r3, #3
 80027d8:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027da:	a903      	add	r1, sp, #12
 80027dc:	4814      	ldr	r0, [pc, #80]	; (8002830 <HAL_SPI_MspInit+0x108>)
 80027de:	f7fd ffdf 	bl	80007a0 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80027e2:	4814      	ldr	r0, [pc, #80]	; (8002834 <HAL_SPI_MspInit+0x10c>)
 80027e4:	4b14      	ldr	r3, [pc, #80]	; (8002838 <HAL_SPI_MspInit+0x110>)
 80027e6:	6003      	str	r3, [r0, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_2;
 80027e8:	6045      	str	r5, [r0, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027ea:	2310      	movs	r3, #16
 80027ec:	6083      	str	r3, [r0, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027ee:	2300      	movs	r3, #0
 80027f0:	60c3      	str	r3, [r0, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80027f2:	2280      	movs	r2, #128	; 0x80
 80027f4:	6102      	str	r2, [r0, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027f6:	6143      	str	r3, [r0, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027f8:	6183      	str	r3, [r0, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80027fa:	61c3      	str	r3, [r0, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80027fc:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80027fe:	f7fd fec3 	bl	8000588 <HAL_DMA_Init>
 8002802:	2800      	cmp	r0, #0
 8002804:	d10b      	bne.n	800281e <HAL_SPI_MspInit+0xf6>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8002806:	4b0b      	ldr	r3, [pc, #44]	; (8002834 <HAL_SPI_MspInit+0x10c>)
 8002808:	64a3      	str	r3, [r4, #72]	; 0x48
 800280a:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800280c:	2200      	movs	r2, #0
 800280e:	2100      	movs	r1, #0
 8002810:	201a      	movs	r0, #26
 8002812:	f7fd fe49 	bl	80004a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002816:	201a      	movs	r0, #26
 8002818:	f7fd fe78 	bl	800050c <HAL_NVIC_EnableIRQ>
}
 800281c:	e793      	b.n	8002746 <HAL_SPI_MspInit+0x1e>
      Error_Handler();
 800281e:	f7ff ff67 	bl	80026f0 <Error_Handler>
 8002822:	e7f0      	b.n	8002806 <HAL_SPI_MspInit+0xde>
 8002824:	40013000 	.word	0x40013000
 8002828:	40003800 	.word	0x40003800
 800282c:	40021000 	.word	0x40021000
 8002830:	50000400 	.word	0x50000400
 8002834:	200008cc 	.word	0x200008cc
 8002838:	40020058 	.word	0x40020058

0800283c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800283c:	4b05      	ldr	r3, [pc, #20]	; (8002854 <HAL_MspInit+0x18>)
 800283e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002840:	2101      	movs	r1, #1
 8002842:	430a      	orrs	r2, r1
 8002844:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002846:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002848:	2280      	movs	r2, #128	; 0x80
 800284a:	0552      	lsls	r2, r2, #21
 800284c:	430a      	orrs	r2, r1
 800284e:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002850:	4770      	bx	lr
 8002852:	46c0      	nop			; (mov r8, r8)
 8002854:	40021000 	.word	0x40021000

08002858 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002858:	4770      	bx	lr

0800285a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800285a:	e7fe      	b.n	800285a <HardFault_Handler>

0800285c <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800285c:	4770      	bx	lr

0800285e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800285e:	4770      	bx	lr

08002860 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002860:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002862:	f7fd fe13 	bl	800048c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002866:	bd10      	pop	{r4, pc}

08002868 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8002868:	b510      	push	{r4, lr}
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800286a:	4802      	ldr	r0, [pc, #8]	; (8002874 <RTC_IRQHandler+0xc>)
 800286c:	f7fe fd84 	bl	8001378 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8002870:	bd10      	pop	{r4, pc}
 8002872:	46c0      	nop			; (mov r8, r8)
 8002874:	200007d0 	.word	0x200007d0

08002878 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8002878:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800287a:	2001      	movs	r0, #1
 800287c:	f7fe f86e 	bl	800095c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002880:	2002      	movs	r0, #2
 8002882:	f7fe f86b 	bl	800095c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8002886:	bd10      	pop	{r4, pc}

08002888 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002888:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800288a:	2010      	movs	r0, #16
 800288c:	f7fe f866 	bl	800095c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002890:	2080      	movs	r0, #128	; 0x80
 8002892:	0180      	lsls	r0, r0, #6
 8002894:	f7fe f862 	bl	800095c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002898:	bd10      	pop	{r4, pc}
	...

0800289c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800289c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800289e:	4803      	ldr	r0, [pc, #12]	; (80028ac <DMA1_Channel2_3_IRQHandler+0x10>)
 80028a0:	f7fd ff20 	bl	80006e4 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80028a4:	4802      	ldr	r0, [pc, #8]	; (80028b0 <DMA1_Channel2_3_IRQHandler+0x14>)
 80028a6:	f7fd ff1d 	bl	80006e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80028aa:	bd10      	pop	{r4, pc}
 80028ac:	200006c0 	.word	0x200006c0
 80028b0:	20000708 	.word	0x20000708

080028b4 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 80028b4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80028b6:	4802      	ldr	r0, [pc, #8]	; (80028c0 <DMA1_Channel4_5_6_7_IRQHandler+0xc>)
 80028b8:	f7fd ff14 	bl	80006e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 80028bc:	bd10      	pop	{r4, pc}
 80028be:	46c0      	nop			; (mov r8, r8)
 80028c0:	200008cc 	.word	0x200008cc

080028c4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80028c4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80028c6:	4802      	ldr	r0, [pc, #8]	; (80028d0 <SPI1_IRQHandler+0xc>)
 80028c8:	f7ff f85c 	bl	8001984 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80028cc:	bd10      	pop	{r4, pc}
 80028ce:	46c0      	nop			; (mov r8, r8)
 80028d0:	200007f4 	.word	0x200007f4

080028d4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80028d4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80028d6:	4802      	ldr	r0, [pc, #8]	; (80028e0 <SPI2_IRQHandler+0xc>)
 80028d8:	f7ff f854 	bl	8001984 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80028dc:	bd10      	pop	{r4, pc}
 80028de:	46c0      	nop			; (mov r8, r8)
 80028e0:	20000564 	.word	0x20000564

080028e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80028e4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

	if(__HAL_UART_GET_IT(&huart1, UART_IT_IDLE))
 80028e6:	4b08      	ldr	r3, [pc, #32]	; (8002908 <USART1_IRQHandler+0x24>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	69da      	ldr	r2, [r3, #28]
 80028ec:	06d2      	lsls	r2, r2, #27
 80028ee:	d403      	bmi.n	80028f8 <USART1_IRQHandler+0x14>
			HAL_UART_Receive_DMA(&huart1, DMA_buffer1, UARTDMA_BUFFER_SIZE);
		}*/

	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80028f0:	4805      	ldr	r0, [pc, #20]	; (8002908 <USART1_IRQHandler+0x24>)
 80028f2:	f7ff f9b3 	bl	8001c5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80028f6:	bd10      	pop	{r4, pc}
		__HAL_UART_CLEAR_IDLEFLAG(&huart1);
 80028f8:	2210      	movs	r2, #16
 80028fa:	621a      	str	r2, [r3, #32]
		HAL_GPIO_TogglePin(LD1_GREEN_GPIO_Port, LD1_GREEN_Pin);
 80028fc:	2120      	movs	r1, #32
 80028fe:	4803      	ldr	r0, [pc, #12]	; (800290c <USART1_IRQHandler+0x28>)
 8002900:	f7fe f826 	bl	8000950 <HAL_GPIO_TogglePin>
 8002904:	e7f4      	b.n	80028f0 <USART1_IRQHandler+0xc>
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	20000750 	.word	0x20000750
 800290c:	50000400 	.word	0x50000400

08002910 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002910:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002912:	4802      	ldr	r0, [pc, #8]	; (800291c <USART2_IRQHandler+0xc>)
 8002914:	f7ff f9a2 	bl	8001c5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002918:	bd10      	pop	{r4, pc}
 800291a:	46c0      	nop			; (mov r8, r8)
 800291c:	2000084c 	.word	0x2000084c

08002920 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8002920:	4b10      	ldr	r3, [pc, #64]	; (8002964 <SystemInit+0x44>)
 8002922:	6819      	ldr	r1, [r3, #0]
 8002924:	2280      	movs	r2, #128	; 0x80
 8002926:	0052      	lsls	r2, r2, #1
 8002928:	430a      	orrs	r2, r1
 800292a:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 800292c:	68da      	ldr	r2, [r3, #12]
 800292e:	490e      	ldr	r1, [pc, #56]	; (8002968 <SystemInit+0x48>)
 8002930:	400a      	ands	r2, r1
 8002932:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	490d      	ldr	r1, [pc, #52]	; (800296c <SystemInit+0x4c>)
 8002938:	400a      	ands	r2, r1
 800293a:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800293c:	689a      	ldr	r2, [r3, #8]
 800293e:	2101      	movs	r1, #1
 8002940:	438a      	bics	r2, r1
 8002942:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	490a      	ldr	r1, [pc, #40]	; (8002970 <SystemInit+0x50>)
 8002948:	400a      	ands	r2, r1
 800294a:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 800294c:	68da      	ldr	r2, [r3, #12]
 800294e:	4909      	ldr	r1, [pc, #36]	; (8002974 <SystemInit+0x54>)
 8002950:	400a      	ands	r2, r1
 8002952:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002954:	2200      	movs	r2, #0
 8002956:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002958:	2280      	movs	r2, #128	; 0x80
 800295a:	0512      	lsls	r2, r2, #20
 800295c:	4b06      	ldr	r3, [pc, #24]	; (8002978 <SystemInit+0x58>)
 800295e:	609a      	str	r2, [r3, #8]
#endif
}
 8002960:	4770      	bx	lr
 8002962:	46c0      	nop			; (mov r8, r8)
 8002964:	40021000 	.word	0x40021000
 8002968:	88ff400c 	.word	0x88ff400c
 800296c:	fef6fff6 	.word	0xfef6fff6
 8002970:	fffbffff 	.word	0xfffbffff
 8002974:	ff02ffff 	.word	0xff02ffff
 8002978:	e000ed00 	.word	0xe000ed00

0800297c <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800297c:	b530      	push	{r4, r5, lr}
 800297e:	b089      	sub	sp, #36	; 0x24
 8002980:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002982:	2214      	movs	r2, #20
 8002984:	2100      	movs	r1, #0
 8002986:	a803      	add	r0, sp, #12
 8002988:	f000 fb1a 	bl	8002fc0 <memset>
  if(uartHandle->Instance==USART1)
 800298c:	6823      	ldr	r3, [r4, #0]
 800298e:	4a41      	ldr	r2, [pc, #260]	; (8002a94 <HAL_UART_MspInit+0x118>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d004      	beq.n	800299e <HAL_UART_MspInit+0x22>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8002994:	4a40      	ldr	r2, [pc, #256]	; (8002a98 <HAL_UART_MspInit+0x11c>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d057      	beq.n	8002a4a <HAL_UART_MspInit+0xce>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800299a:	b009      	add	sp, #36	; 0x24
 800299c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 800299e:	4b3f      	ldr	r3, [pc, #252]	; (8002a9c <HAL_UART_MspInit+0x120>)
 80029a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029a2:	2280      	movs	r2, #128	; 0x80
 80029a4:	01d2      	lsls	r2, r2, #7
 80029a6:	430a      	orrs	r2, r1
 80029a8:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029aa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029ac:	2201      	movs	r2, #1
 80029ae:	4311      	orrs	r1, r2
 80029b0:	62d9      	str	r1, [r3, #44]	; 0x2c
 80029b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b4:	401a      	ands	r2, r3
 80029b6:	9201      	str	r2, [sp, #4]
 80029b8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 80029ba:	23c0      	movs	r3, #192	; 0xc0
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c0:	2302      	movs	r3, #2
 80029c2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029c4:	2503      	movs	r5, #3
 80029c6:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80029c8:	3302      	adds	r3, #2
 80029ca:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029cc:	a903      	add	r1, sp, #12
 80029ce:	20a0      	movs	r0, #160	; 0xa0
 80029d0:	05c0      	lsls	r0, r0, #23
 80029d2:	f7fd fee5 	bl	80007a0 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel3;
 80029d6:	4832      	ldr	r0, [pc, #200]	; (8002aa0 <HAL_UART_MspInit+0x124>)
 80029d8:	4b32      	ldr	r3, [pc, #200]	; (8002aa4 <HAL_UART_MspInit+0x128>)
 80029da:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_3;
 80029dc:	6045      	str	r5, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029de:	2300      	movs	r3, #0
 80029e0:	6083      	str	r3, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029e2:	60c3      	str	r3, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029e4:	2280      	movs	r2, #128	; 0x80
 80029e6:	6102      	str	r2, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029e8:	6143      	str	r3, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029ea:	6183      	str	r3, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80029ec:	3a60      	subs	r2, #96	; 0x60
 80029ee:	61c2      	str	r2, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80029f0:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80029f2:	f7fd fdc9 	bl	8000588 <HAL_DMA_Init>
 80029f6:	2800      	cmp	r0, #0
 80029f8:	d121      	bne.n	8002a3e <HAL_UART_MspInit+0xc2>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80029fa:	4b29      	ldr	r3, [pc, #164]	; (8002aa0 <HAL_UART_MspInit+0x124>)
 80029fc:	66e3      	str	r3, [r4, #108]	; 0x6c
 80029fe:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8002a00:	4829      	ldr	r0, [pc, #164]	; (8002aa8 <HAL_UART_MspInit+0x12c>)
 8002a02:	4b2a      	ldr	r3, [pc, #168]	; (8002aac <HAL_UART_MspInit+0x130>)
 8002a04:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_3;
 8002a06:	2303      	movs	r3, #3
 8002a08:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a0a:	330d      	adds	r3, #13
 8002a0c:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60c3      	str	r3, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a12:	2280      	movs	r2, #128	; 0x80
 8002a14:	6102      	str	r2, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a16:	6143      	str	r3, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a18:	6183      	str	r3, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002a1a:	61c3      	str	r3, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a1c:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002a1e:	f7fd fdb3 	bl	8000588 <HAL_DMA_Init>
 8002a22:	2800      	cmp	r0, #0
 8002a24:	d10e      	bne.n	8002a44 <HAL_UART_MspInit+0xc8>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002a26:	4b20      	ldr	r3, [pc, #128]	; (8002aa8 <HAL_UART_MspInit+0x12c>)
 8002a28:	66a3      	str	r3, [r4, #104]	; 0x68
 8002a2a:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	2100      	movs	r1, #0
 8002a30:	201b      	movs	r0, #27
 8002a32:	f7fd fd39 	bl	80004a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a36:	201b      	movs	r0, #27
 8002a38:	f7fd fd68 	bl	800050c <HAL_NVIC_EnableIRQ>
 8002a3c:	e7ad      	b.n	800299a <HAL_UART_MspInit+0x1e>
      Error_Handler();
 8002a3e:	f7ff fe57 	bl	80026f0 <Error_Handler>
 8002a42:	e7da      	b.n	80029fa <HAL_UART_MspInit+0x7e>
      Error_Handler();
 8002a44:	f7ff fe54 	bl	80026f0 <Error_Handler>
 8002a48:	e7ed      	b.n	8002a26 <HAL_UART_MspInit+0xaa>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a4a:	4b14      	ldr	r3, [pc, #80]	; (8002a9c <HAL_UART_MspInit+0x120>)
 8002a4c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002a4e:	2280      	movs	r2, #128	; 0x80
 8002a50:	0292      	lsls	r2, r2, #10
 8002a52:	430a      	orrs	r2, r1
 8002a54:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a56:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a58:	2201      	movs	r2, #1
 8002a5a:	4311      	orrs	r1, r2
 8002a5c:	62d9      	str	r1, [r3, #44]	; 0x2c
 8002a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a60:	401a      	ands	r2, r3
 8002a62:	9202      	str	r2, [sp, #8]
 8002a64:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002a66:	230c      	movs	r3, #12
 8002a68:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a6a:	3b0a      	subs	r3, #10
 8002a6c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a6e:	3301      	adds	r3, #1
 8002a70:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8002a72:	3301      	adds	r3, #1
 8002a74:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a76:	a903      	add	r1, sp, #12
 8002a78:	20a0      	movs	r0, #160	; 0xa0
 8002a7a:	05c0      	lsls	r0, r0, #23
 8002a7c:	f7fd fe90 	bl	80007a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002a80:	2200      	movs	r2, #0
 8002a82:	2100      	movs	r1, #0
 8002a84:	201c      	movs	r0, #28
 8002a86:	f7fd fd0f 	bl	80004a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a8a:	201c      	movs	r0, #28
 8002a8c:	f7fd fd3e 	bl	800050c <HAL_NVIC_EnableIRQ>
}
 8002a90:	e783      	b.n	800299a <HAL_UART_MspInit+0x1e>
 8002a92:	46c0      	nop			; (mov r8, r8)
 8002a94:	40013800 	.word	0x40013800
 8002a98:	40004400 	.word	0x40004400
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	20000708 	.word	0x20000708
 8002aa4:	40020030 	.word	0x40020030
 8002aa8:	200006c0 	.word	0x200006c0
 8002aac:	4002001c 	.word	0x4002001c

08002ab0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002ab0:	480d      	ldr	r0, [pc, #52]	; (8002ae8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002ab2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8002ab4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002ab6:	e003      	b.n	8002ac0 <LoopCopyDataInit>

08002ab8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002ab8:	4b0c      	ldr	r3, [pc, #48]	; (8002aec <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8002aba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002abc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002abe:	3104      	adds	r1, #4

08002ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8002ac0:	480b      	ldr	r0, [pc, #44]	; (8002af0 <LoopForever+0xa>)
  ldr  r3, =_edata
 8002ac2:	4b0c      	ldr	r3, [pc, #48]	; (8002af4 <LoopForever+0xe>)
  adds  r2, r0, r1
 8002ac4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002ac6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002ac8:	d3f6      	bcc.n	8002ab8 <CopyDataInit>
  ldr  r2, =_sbss
 8002aca:	4a0b      	ldr	r2, [pc, #44]	; (8002af8 <LoopForever+0x12>)
  b  LoopFillZerobss
 8002acc:	e002      	b.n	8002ad4 <LoopFillZerobss>

08002ace <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8002ace:	2300      	movs	r3, #0
  str  r3, [r2]
 8002ad0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ad2:	3204      	adds	r2, #4

08002ad4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8002ad4:	4b09      	ldr	r3, [pc, #36]	; (8002afc <LoopForever+0x16>)
  cmp  r2, r3
 8002ad6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002ad8:	d3f9      	bcc.n	8002ace <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002ada:	f7ff ff21 	bl	8002920 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ade:	f000 f847 	bl	8002b70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ae2:	f7ff fddb 	bl	800269c <main>

08002ae6 <LoopForever>:

LoopForever:
    b LoopForever
 8002ae6:	e7fe      	b.n	8002ae6 <LoopForever>
   ldr   r0, =_estack
 8002ae8:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8002aec:	080032dc 	.word	0x080032dc
  ldr  r0, =_sdata
 8002af0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002af4:	20000508 	.word	0x20000508
  ldr  r2, =_sbss
 8002af8:	20000508 	.word	0x20000508
  ldr  r3, = _ebss
 8002afc:	20000924 	.word	0x20000924

08002b00 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b00:	e7fe      	b.n	8002b00 <ADC1_COMP_IRQHandler>
	...

08002b04 <calloc>:
 8002b04:	b510      	push	{r4, lr}
 8002b06:	4b03      	ldr	r3, [pc, #12]	; (8002b14 <calloc+0x10>)
 8002b08:	000a      	movs	r2, r1
 8002b0a:	0001      	movs	r1, r0
 8002b0c:	6818      	ldr	r0, [r3, #0]
 8002b0e:	f000 f803 	bl	8002b18 <_calloc_r>
 8002b12:	bd10      	pop	{r4, pc}
 8002b14:	20000004 	.word	0x20000004

08002b18 <_calloc_r>:
 8002b18:	b510      	push	{r4, lr}
 8002b1a:	4351      	muls	r1, r2
 8002b1c:	f000 f84c 	bl	8002bb8 <_malloc_r>
 8002b20:	1e04      	subs	r4, r0, #0
 8002b22:	d01a      	beq.n	8002b5a <_calloc_r+0x42>
 8002b24:	0003      	movs	r3, r0
 8002b26:	3b08      	subs	r3, #8
 8002b28:	685a      	ldr	r2, [r3, #4]
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	439a      	bics	r2, r3
 8002b2e:	3a04      	subs	r2, #4
 8002b30:	2a24      	cmp	r2, #36	; 0x24
 8002b32:	d819      	bhi.n	8002b68 <_calloc_r+0x50>
 8002b34:	0003      	movs	r3, r0
 8002b36:	2a13      	cmp	r2, #19
 8002b38:	d90b      	bls.n	8002b52 <_calloc_r+0x3a>
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	3308      	adds	r3, #8
 8002b3e:	6001      	str	r1, [r0, #0]
 8002b40:	6041      	str	r1, [r0, #4]
 8002b42:	2a1b      	cmp	r2, #27
 8002b44:	d905      	bls.n	8002b52 <_calloc_r+0x3a>
 8002b46:	6081      	str	r1, [r0, #8]
 8002b48:	60c1      	str	r1, [r0, #12]
 8002b4a:	2a24      	cmp	r2, #36	; 0x24
 8002b4c:	d007      	beq.n	8002b5e <_calloc_r+0x46>
 8002b4e:	0003      	movs	r3, r0
 8002b50:	3310      	adds	r3, #16
 8002b52:	2200      	movs	r2, #0
 8002b54:	601a      	str	r2, [r3, #0]
 8002b56:	605a      	str	r2, [r3, #4]
 8002b58:	609a      	str	r2, [r3, #8]
 8002b5a:	0020      	movs	r0, r4
 8002b5c:	bd10      	pop	{r4, pc}
 8002b5e:	0003      	movs	r3, r0
 8002b60:	6101      	str	r1, [r0, #16]
 8002b62:	3318      	adds	r3, #24
 8002b64:	6141      	str	r1, [r0, #20]
 8002b66:	e7f4      	b.n	8002b52 <_calloc_r+0x3a>
 8002b68:	2100      	movs	r1, #0
 8002b6a:	f000 fa29 	bl	8002fc0 <memset>
 8002b6e:	e7f4      	b.n	8002b5a <_calloc_r+0x42>

08002b70 <__libc_init_array>:
 8002b70:	b570      	push	{r4, r5, r6, lr}
 8002b72:	2600      	movs	r6, #0
 8002b74:	4d0c      	ldr	r5, [pc, #48]	; (8002ba8 <__libc_init_array+0x38>)
 8002b76:	4c0d      	ldr	r4, [pc, #52]	; (8002bac <__libc_init_array+0x3c>)
 8002b78:	1b64      	subs	r4, r4, r5
 8002b7a:	10a4      	asrs	r4, r4, #2
 8002b7c:	42a6      	cmp	r6, r4
 8002b7e:	d109      	bne.n	8002b94 <__libc_init_array+0x24>
 8002b80:	2600      	movs	r6, #0
 8002b82:	f000 fb61 	bl	8003248 <_init>
 8002b86:	4d0a      	ldr	r5, [pc, #40]	; (8002bb0 <__libc_init_array+0x40>)
 8002b88:	4c0a      	ldr	r4, [pc, #40]	; (8002bb4 <__libc_init_array+0x44>)
 8002b8a:	1b64      	subs	r4, r4, r5
 8002b8c:	10a4      	asrs	r4, r4, #2
 8002b8e:	42a6      	cmp	r6, r4
 8002b90:	d105      	bne.n	8002b9e <__libc_init_array+0x2e>
 8002b92:	bd70      	pop	{r4, r5, r6, pc}
 8002b94:	00b3      	lsls	r3, r6, #2
 8002b96:	58eb      	ldr	r3, [r5, r3]
 8002b98:	4798      	blx	r3
 8002b9a:	3601      	adds	r6, #1
 8002b9c:	e7ee      	b.n	8002b7c <__libc_init_array+0xc>
 8002b9e:	00b3      	lsls	r3, r6, #2
 8002ba0:	58eb      	ldr	r3, [r5, r3]
 8002ba2:	4798      	blx	r3
 8002ba4:	3601      	adds	r6, #1
 8002ba6:	e7f2      	b.n	8002b8e <__libc_init_array+0x1e>
 8002ba8:	080032d4 	.word	0x080032d4
 8002bac:	080032d4 	.word	0x080032d4
 8002bb0:	080032d4 	.word	0x080032d4
 8002bb4:	080032d8 	.word	0x080032d8

08002bb8 <_malloc_r>:
 8002bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bba:	000d      	movs	r5, r1
 8002bbc:	b085      	sub	sp, #20
 8002bbe:	350b      	adds	r5, #11
 8002bc0:	9001      	str	r0, [sp, #4]
 8002bc2:	2d16      	cmp	r5, #22
 8002bc4:	d908      	bls.n	8002bd8 <_malloc_r+0x20>
 8002bc6:	2307      	movs	r3, #7
 8002bc8:	439d      	bics	r5, r3
 8002bca:	d506      	bpl.n	8002bda <_malloc_r+0x22>
 8002bcc:	230c      	movs	r3, #12
 8002bce:	9a01      	ldr	r2, [sp, #4]
 8002bd0:	6013      	str	r3, [r2, #0]
 8002bd2:	2000      	movs	r0, #0
 8002bd4:	b005      	add	sp, #20
 8002bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bd8:	2510      	movs	r5, #16
 8002bda:	428d      	cmp	r5, r1
 8002bdc:	d3f6      	bcc.n	8002bcc <_malloc_r+0x14>
 8002bde:	9801      	ldr	r0, [sp, #4]
 8002be0:	f000 f9f6 	bl	8002fd0 <__malloc_lock>
 8002be4:	23f8      	movs	r3, #248	; 0xf8
 8002be6:	33ff      	adds	r3, #255	; 0xff
 8002be8:	48ba      	ldr	r0, [pc, #744]	; (8002ed4 <_malloc_r+0x31c>)
 8002bea:	429d      	cmp	r5, r3
 8002bec:	d81f      	bhi.n	8002c2e <_malloc_r+0x76>
 8002bee:	002a      	movs	r2, r5
 8002bf0:	3208      	adds	r2, #8
 8002bf2:	1882      	adds	r2, r0, r2
 8002bf4:	0011      	movs	r1, r2
 8002bf6:	6854      	ldr	r4, [r2, #4]
 8002bf8:	3908      	subs	r1, #8
 8002bfa:	08eb      	lsrs	r3, r5, #3
 8002bfc:	428c      	cmp	r4, r1
 8002bfe:	d103      	bne.n	8002c08 <_malloc_r+0x50>
 8002c00:	68d4      	ldr	r4, [r2, #12]
 8002c02:	3302      	adds	r3, #2
 8002c04:	42a2      	cmp	r2, r4
 8002c06:	d029      	beq.n	8002c5c <_malloc_r+0xa4>
 8002c08:	2303      	movs	r3, #3
 8002c0a:	6862      	ldr	r2, [r4, #4]
 8002c0c:	68a1      	ldr	r1, [r4, #8]
 8002c0e:	439a      	bics	r2, r3
 8002c10:	0013      	movs	r3, r2
 8002c12:	68e2      	ldr	r2, [r4, #12]
 8002c14:	18e3      	adds	r3, r4, r3
 8002c16:	60ca      	str	r2, [r1, #12]
 8002c18:	6091      	str	r1, [r2, #8]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	6859      	ldr	r1, [r3, #4]
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	605a      	str	r2, [r3, #4]
 8002c22:	9801      	ldr	r0, [sp, #4]
 8002c24:	f000 f9dc 	bl	8002fe0 <__malloc_unlock>
 8002c28:	0020      	movs	r0, r4
 8002c2a:	3008      	adds	r0, #8
 8002c2c:	e7d2      	b.n	8002bd4 <_malloc_r+0x1c>
 8002c2e:	0a6a      	lsrs	r2, r5, #9
 8002c30:	233f      	movs	r3, #63	; 0x3f
 8002c32:	2a00      	cmp	r2, #0
 8002c34:	d003      	beq.n	8002c3e <_malloc_r+0x86>
 8002c36:	2a04      	cmp	r2, #4
 8002c38:	d828      	bhi.n	8002c8c <_malloc_r+0xd4>
 8002c3a:	09ab      	lsrs	r3, r5, #6
 8002c3c:	3338      	adds	r3, #56	; 0x38
 8002c3e:	2203      	movs	r2, #3
 8002c40:	4694      	mov	ip, r2
 8002c42:	00d9      	lsls	r1, r3, #3
 8002c44:	1809      	adds	r1, r1, r0
 8002c46:	68cc      	ldr	r4, [r1, #12]
 8002c48:	428c      	cmp	r4, r1
 8002c4a:	d006      	beq.n	8002c5a <_malloc_r+0xa2>
 8002c4c:	4666      	mov	r6, ip
 8002c4e:	6862      	ldr	r2, [r4, #4]
 8002c50:	43b2      	bics	r2, r6
 8002c52:	1b57      	subs	r7, r2, r5
 8002c54:	2f0f      	cmp	r7, #15
 8002c56:	dd31      	ble.n	8002cbc <_malloc_r+0x104>
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	0001      	movs	r1, r0
 8002c5e:	6904      	ldr	r4, [r0, #16]
 8002c60:	3108      	adds	r1, #8
 8002c62:	428c      	cmp	r4, r1
 8002c64:	d04e      	beq.n	8002d04 <_malloc_r+0x14c>
 8002c66:	2203      	movs	r2, #3
 8002c68:	6866      	ldr	r6, [r4, #4]
 8002c6a:	4396      	bics	r6, r2
 8002c6c:	0032      	movs	r2, r6
 8002c6e:	1b76      	subs	r6, r6, r5
 8002c70:	2e0f      	cmp	r6, #15
 8002c72:	dd31      	ble.n	8002cd8 <_malloc_r+0x120>
 8002c74:	2701      	movs	r7, #1
 8002c76:	1963      	adds	r3, r4, r5
 8002c78:	433d      	orrs	r5, r7
 8002c7a:	4337      	orrs	r7, r6
 8002c7c:	6065      	str	r5, [r4, #4]
 8002c7e:	6143      	str	r3, [r0, #20]
 8002c80:	6103      	str	r3, [r0, #16]
 8002c82:	60d9      	str	r1, [r3, #12]
 8002c84:	6099      	str	r1, [r3, #8]
 8002c86:	605f      	str	r7, [r3, #4]
 8002c88:	50a6      	str	r6, [r4, r2]
 8002c8a:	e7ca      	b.n	8002c22 <_malloc_r+0x6a>
 8002c8c:	2a14      	cmp	r2, #20
 8002c8e:	d802      	bhi.n	8002c96 <_malloc_r+0xde>
 8002c90:	0013      	movs	r3, r2
 8002c92:	335b      	adds	r3, #91	; 0x5b
 8002c94:	e7d3      	b.n	8002c3e <_malloc_r+0x86>
 8002c96:	2a54      	cmp	r2, #84	; 0x54
 8002c98:	d802      	bhi.n	8002ca0 <_malloc_r+0xe8>
 8002c9a:	0b2b      	lsrs	r3, r5, #12
 8002c9c:	336e      	adds	r3, #110	; 0x6e
 8002c9e:	e7ce      	b.n	8002c3e <_malloc_r+0x86>
 8002ca0:	23aa      	movs	r3, #170	; 0xaa
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d802      	bhi.n	8002cae <_malloc_r+0xf6>
 8002ca8:	0beb      	lsrs	r3, r5, #15
 8002caa:	3377      	adds	r3, #119	; 0x77
 8002cac:	e7c7      	b.n	8002c3e <_malloc_r+0x86>
 8002cae:	498a      	ldr	r1, [pc, #552]	; (8002ed8 <_malloc_r+0x320>)
 8002cb0:	237e      	movs	r3, #126	; 0x7e
 8002cb2:	428a      	cmp	r2, r1
 8002cb4:	d8c3      	bhi.n	8002c3e <_malloc_r+0x86>
 8002cb6:	0cab      	lsrs	r3, r5, #18
 8002cb8:	337c      	adds	r3, #124	; 0x7c
 8002cba:	e7c0      	b.n	8002c3e <_malloc_r+0x86>
 8002cbc:	68e6      	ldr	r6, [r4, #12]
 8002cbe:	2f00      	cmp	r7, #0
 8002cc0:	db08      	blt.n	8002cd4 <_malloc_r+0x11c>
 8002cc2:	68a3      	ldr	r3, [r4, #8]
 8002cc4:	60de      	str	r6, [r3, #12]
 8002cc6:	60b3      	str	r3, [r6, #8]
 8002cc8:	2301      	movs	r3, #1
 8002cca:	18a2      	adds	r2, r4, r2
 8002ccc:	6851      	ldr	r1, [r2, #4]
 8002cce:	430b      	orrs	r3, r1
 8002cd0:	6053      	str	r3, [r2, #4]
 8002cd2:	e7a6      	b.n	8002c22 <_malloc_r+0x6a>
 8002cd4:	0034      	movs	r4, r6
 8002cd6:	e7b7      	b.n	8002c48 <_malloc_r+0x90>
 8002cd8:	6141      	str	r1, [r0, #20]
 8002cda:	6101      	str	r1, [r0, #16]
 8002cdc:	2e00      	cmp	r6, #0
 8002cde:	daf3      	bge.n	8002cc8 <_malloc_r+0x110>
 8002ce0:	497e      	ldr	r1, [pc, #504]	; (8002edc <_malloc_r+0x324>)
 8002ce2:	428a      	cmp	r2, r1
 8002ce4:	d842      	bhi.n	8002d6c <_malloc_r+0x1b4>
 8002ce6:	08d2      	lsrs	r2, r2, #3
 8002ce8:	39ff      	subs	r1, #255	; 0xff
 8002cea:	1096      	asrs	r6, r2, #2
 8002cec:	39ff      	subs	r1, #255	; 0xff
 8002cee:	40b1      	lsls	r1, r6
 8002cf0:	6846      	ldr	r6, [r0, #4]
 8002cf2:	00d2      	lsls	r2, r2, #3
 8002cf4:	4331      	orrs	r1, r6
 8002cf6:	6041      	str	r1, [r0, #4]
 8002cf8:	1810      	adds	r0, r2, r0
 8002cfa:	6882      	ldr	r2, [r0, #8]
 8002cfc:	60e0      	str	r0, [r4, #12]
 8002cfe:	60a2      	str	r2, [r4, #8]
 8002d00:	6084      	str	r4, [r0, #8]
 8002d02:	60d4      	str	r4, [r2, #12]
 8002d04:	2201      	movs	r2, #1
 8002d06:	1099      	asrs	r1, r3, #2
 8002d08:	408a      	lsls	r2, r1
 8002d0a:	4972      	ldr	r1, [pc, #456]	; (8002ed4 <_malloc_r+0x31c>)
 8002d0c:	6848      	ldr	r0, [r1, #4]
 8002d0e:	4282      	cmp	r2, r0
 8002d10:	d900      	bls.n	8002d14 <_malloc_r+0x15c>
 8002d12:	e097      	b.n	8002e44 <_malloc_r+0x28c>
 8002d14:	4210      	tst	r0, r2
 8002d16:	d105      	bne.n	8002d24 <_malloc_r+0x16c>
 8002d18:	2403      	movs	r4, #3
 8002d1a:	43a3      	bics	r3, r4
 8002d1c:	0052      	lsls	r2, r2, #1
 8002d1e:	3304      	adds	r3, #4
 8002d20:	4210      	tst	r0, r2
 8002d22:	d0fb      	beq.n	8002d1c <_malloc_r+0x164>
 8002d24:	469c      	mov	ip, r3
 8002d26:	00d8      	lsls	r0, r3, #3
 8002d28:	1808      	adds	r0, r1, r0
 8002d2a:	9002      	str	r0, [sp, #8]
 8002d2c:	9c02      	ldr	r4, [sp, #8]
 8002d2e:	68e4      	ldr	r4, [r4, #12]
 8002d30:	9e02      	ldr	r6, [sp, #8]
 8002d32:	42b4      	cmp	r4, r6
 8002d34:	d158      	bne.n	8002de8 <_malloc_r+0x230>
 8002d36:	0034      	movs	r4, r6
 8002d38:	3408      	adds	r4, #8
 8002d3a:	9402      	str	r4, [sp, #8]
 8002d3c:	2401      	movs	r4, #1
 8002d3e:	44a4      	add	ip, r4
 8002d40:	4664      	mov	r4, ip
 8002d42:	2603      	movs	r6, #3
 8002d44:	4234      	tst	r4, r6
 8002d46:	d1f1      	bne.n	8002d2c <_malloc_r+0x174>
 8002d48:	2403      	movs	r4, #3
 8002d4a:	4223      	tst	r3, r4
 8002d4c:	d174      	bne.n	8002e38 <_malloc_r+0x280>
 8002d4e:	684b      	ldr	r3, [r1, #4]
 8002d50:	4393      	bics	r3, r2
 8002d52:	604b      	str	r3, [r1, #4]
 8002d54:	6848      	ldr	r0, [r1, #4]
 8002d56:	0052      	lsls	r2, r2, #1
 8002d58:	4282      	cmp	r2, r0
 8002d5a:	d873      	bhi.n	8002e44 <_malloc_r+0x28c>
 8002d5c:	2a00      	cmp	r2, #0
 8002d5e:	d071      	beq.n	8002e44 <_malloc_r+0x28c>
 8002d60:	4663      	mov	r3, ip
 8002d62:	4210      	tst	r0, r2
 8002d64:	d1de      	bne.n	8002d24 <_malloc_r+0x16c>
 8002d66:	3304      	adds	r3, #4
 8002d68:	0052      	lsls	r2, r2, #1
 8002d6a:	e7fa      	b.n	8002d62 <_malloc_r+0x1aa>
 8002d6c:	0a56      	lsrs	r6, r2, #9
 8002d6e:	2e04      	cmp	r6, #4
 8002d70:	d816      	bhi.n	8002da0 <_malloc_r+0x1e8>
 8002d72:	0991      	lsrs	r1, r2, #6
 8002d74:	3138      	adds	r1, #56	; 0x38
 8002d76:	00cf      	lsls	r7, r1, #3
 8002d78:	183e      	adds	r6, r7, r0
 8002d7a:	2703      	movs	r7, #3
 8002d7c:	9602      	str	r6, [sp, #8]
 8002d7e:	46bc      	mov	ip, r7
 8002d80:	68b6      	ldr	r6, [r6, #8]
 8002d82:	9f02      	ldr	r7, [sp, #8]
 8002d84:	42b7      	cmp	r7, r6
 8002d86:	d127      	bne.n	8002dd8 <_malloc_r+0x220>
 8002d88:	2201      	movs	r2, #1
 8002d8a:	1089      	asrs	r1, r1, #2
 8002d8c:	408a      	lsls	r2, r1
 8002d8e:	6841      	ldr	r1, [r0, #4]
 8002d90:	430a      	orrs	r2, r1
 8002d92:	6042      	str	r2, [r0, #4]
 8002d94:	9a02      	ldr	r2, [sp, #8]
 8002d96:	60a6      	str	r6, [r4, #8]
 8002d98:	60e2      	str	r2, [r4, #12]
 8002d9a:	6094      	str	r4, [r2, #8]
 8002d9c:	60f4      	str	r4, [r6, #12]
 8002d9e:	e7b1      	b.n	8002d04 <_malloc_r+0x14c>
 8002da0:	2e14      	cmp	r6, #20
 8002da2:	d802      	bhi.n	8002daa <_malloc_r+0x1f2>
 8002da4:	0031      	movs	r1, r6
 8002da6:	315b      	adds	r1, #91	; 0x5b
 8002da8:	e7e5      	b.n	8002d76 <_malloc_r+0x1be>
 8002daa:	2e54      	cmp	r6, #84	; 0x54
 8002dac:	d802      	bhi.n	8002db4 <_malloc_r+0x1fc>
 8002dae:	0b11      	lsrs	r1, r2, #12
 8002db0:	316e      	adds	r1, #110	; 0x6e
 8002db2:	e7e0      	b.n	8002d76 <_malloc_r+0x1be>
 8002db4:	21aa      	movs	r1, #170	; 0xaa
 8002db6:	0049      	lsls	r1, r1, #1
 8002db8:	428e      	cmp	r6, r1
 8002dba:	d802      	bhi.n	8002dc2 <_malloc_r+0x20a>
 8002dbc:	0bd1      	lsrs	r1, r2, #15
 8002dbe:	3177      	adds	r1, #119	; 0x77
 8002dc0:	e7d9      	b.n	8002d76 <_malloc_r+0x1be>
 8002dc2:	4f45      	ldr	r7, [pc, #276]	; (8002ed8 <_malloc_r+0x320>)
 8002dc4:	217e      	movs	r1, #126	; 0x7e
 8002dc6:	42be      	cmp	r6, r7
 8002dc8:	d8d5      	bhi.n	8002d76 <_malloc_r+0x1be>
 8002dca:	0c91      	lsrs	r1, r2, #18
 8002dcc:	317c      	adds	r1, #124	; 0x7c
 8002dce:	e7d2      	b.n	8002d76 <_malloc_r+0x1be>
 8002dd0:	68b6      	ldr	r6, [r6, #8]
 8002dd2:	9902      	ldr	r1, [sp, #8]
 8002dd4:	42b1      	cmp	r1, r6
 8002dd6:	d004      	beq.n	8002de2 <_malloc_r+0x22a>
 8002dd8:	4660      	mov	r0, ip
 8002dda:	6871      	ldr	r1, [r6, #4]
 8002ddc:	4381      	bics	r1, r0
 8002dde:	428a      	cmp	r2, r1
 8002de0:	d3f6      	bcc.n	8002dd0 <_malloc_r+0x218>
 8002de2:	68f2      	ldr	r2, [r6, #12]
 8002de4:	9202      	str	r2, [sp, #8]
 8002de6:	e7d5      	b.n	8002d94 <_malloc_r+0x1dc>
 8002de8:	2603      	movs	r6, #3
 8002dea:	6867      	ldr	r7, [r4, #4]
 8002dec:	43b7      	bics	r7, r6
 8002dee:	9703      	str	r7, [sp, #12]
 8002df0:	1b7e      	subs	r6, r7, r5
 8002df2:	2e0f      	cmp	r6, #15
 8002df4:	dd11      	ble.n	8002e1a <_malloc_r+0x262>
 8002df6:	2201      	movs	r2, #1
 8002df8:	1963      	adds	r3, r4, r5
 8002dfa:	4315      	orrs	r5, r2
 8002dfc:	6065      	str	r5, [r4, #4]
 8002dfe:	68e0      	ldr	r0, [r4, #12]
 8002e00:	68a5      	ldr	r5, [r4, #8]
 8002e02:	3108      	adds	r1, #8
 8002e04:	60e8      	str	r0, [r5, #12]
 8002e06:	4332      	orrs	r2, r6
 8002e08:	6085      	str	r5, [r0, #8]
 8002e0a:	60cb      	str	r3, [r1, #12]
 8002e0c:	608b      	str	r3, [r1, #8]
 8002e0e:	60d9      	str	r1, [r3, #12]
 8002e10:	6099      	str	r1, [r3, #8]
 8002e12:	605a      	str	r2, [r3, #4]
 8002e14:	003b      	movs	r3, r7
 8002e16:	50e6      	str	r6, [r4, r3]
 8002e18:	e703      	b.n	8002c22 <_malloc_r+0x6a>
 8002e1a:	68e7      	ldr	r7, [r4, #12]
 8002e1c:	2e00      	cmp	r6, #0
 8002e1e:	db09      	blt.n	8002e34 <_malloc_r+0x27c>
 8002e20:	2201      	movs	r2, #1
 8002e22:	9b03      	ldr	r3, [sp, #12]
 8002e24:	18e3      	adds	r3, r4, r3
 8002e26:	6859      	ldr	r1, [r3, #4]
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	605a      	str	r2, [r3, #4]
 8002e2c:	68a3      	ldr	r3, [r4, #8]
 8002e2e:	60df      	str	r7, [r3, #12]
 8002e30:	60bb      	str	r3, [r7, #8]
 8002e32:	e6f6      	b.n	8002c22 <_malloc_r+0x6a>
 8002e34:	003c      	movs	r4, r7
 8002e36:	e77b      	b.n	8002d30 <_malloc_r+0x178>
 8002e38:	3808      	subs	r0, #8
 8002e3a:	6884      	ldr	r4, [r0, #8]
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	42a0      	cmp	r0, r4
 8002e40:	d082      	beq.n	8002d48 <_malloc_r+0x190>
 8002e42:	e787      	b.n	8002d54 <_malloc_r+0x19c>
 8002e44:	2303      	movs	r3, #3
 8002e46:	688f      	ldr	r7, [r1, #8]
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	439a      	bics	r2, r3
 8002e4c:	9202      	str	r2, [sp, #8]
 8002e4e:	4295      	cmp	r5, r2
 8002e50:	d803      	bhi.n	8002e5a <_malloc_r+0x2a2>
 8002e52:	1b52      	subs	r2, r2, r5
 8002e54:	2a0f      	cmp	r2, #15
 8002e56:	dd00      	ble.n	8002e5a <_malloc_r+0x2a2>
 8002e58:	e09f      	b.n	8002f9a <_malloc_r+0x3e2>
 8002e5a:	9b02      	ldr	r3, [sp, #8]
 8002e5c:	18fb      	adds	r3, r7, r3
 8002e5e:	9303      	str	r3, [sp, #12]
 8002e60:	4b1f      	ldr	r3, [pc, #124]	; (8002ee0 <_malloc_r+0x328>)
 8002e62:	681e      	ldr	r6, [r3, #0]
 8002e64:	4b1f      	ldr	r3, [pc, #124]	; (8002ee4 <_malloc_r+0x32c>)
 8002e66:	3610      	adds	r6, #16
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	1976      	adds	r6, r6, r5
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	d005      	beq.n	8002e7c <_malloc_r+0x2c4>
 8002e70:	4b1d      	ldr	r3, [pc, #116]	; (8002ee8 <_malloc_r+0x330>)
 8002e72:	3b01      	subs	r3, #1
 8002e74:	199e      	adds	r6, r3, r6
 8002e76:	4b1c      	ldr	r3, [pc, #112]	; (8002ee8 <_malloc_r+0x330>)
 8002e78:	425b      	negs	r3, r3
 8002e7a:	401e      	ands	r6, r3
 8002e7c:	0031      	movs	r1, r6
 8002e7e:	9801      	ldr	r0, [sp, #4]
 8002e80:	f000 f8b6 	bl	8002ff0 <_sbrk_r>
 8002e84:	0004      	movs	r4, r0
 8002e86:	1c43      	adds	r3, r0, #1
 8002e88:	d05f      	beq.n	8002f4a <_malloc_r+0x392>
 8002e8a:	9b03      	ldr	r3, [sp, #12]
 8002e8c:	4283      	cmp	r3, r0
 8002e8e:	d902      	bls.n	8002e96 <_malloc_r+0x2de>
 8002e90:	4b10      	ldr	r3, [pc, #64]	; (8002ed4 <_malloc_r+0x31c>)
 8002e92:	429f      	cmp	r7, r3
 8002e94:	d159      	bne.n	8002f4a <_malloc_r+0x392>
 8002e96:	4b15      	ldr	r3, [pc, #84]	; (8002eec <_malloc_r+0x334>)
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	18b1      	adds	r1, r6, r2
 8002e9c:	6019      	str	r1, [r3, #0]
 8002e9e:	4b12      	ldr	r3, [pc, #72]	; (8002ee8 <_malloc_r+0x330>)
 8002ea0:	1e5a      	subs	r2, r3, #1
 8002ea2:	9b03      	ldr	r3, [sp, #12]
 8002ea4:	42a3      	cmp	r3, r4
 8002ea6:	d127      	bne.n	8002ef8 <_malloc_r+0x340>
 8002ea8:	4213      	tst	r3, r2
 8002eaa:	d125      	bne.n	8002ef8 <_malloc_r+0x340>
 8002eac:	9a02      	ldr	r2, [sp, #8]
 8002eae:	4b09      	ldr	r3, [pc, #36]	; (8002ed4 <_malloc_r+0x31c>)
 8002eb0:	1992      	adds	r2, r2, r6
 8002eb2:	2601      	movs	r6, #1
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	4316      	orrs	r6, r2
 8002eb8:	605e      	str	r6, [r3, #4]
 8002eba:	4b0c      	ldr	r3, [pc, #48]	; (8002eec <_malloc_r+0x334>)
 8002ebc:	4a0c      	ldr	r2, [pc, #48]	; (8002ef0 <_malloc_r+0x338>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6811      	ldr	r1, [r2, #0]
 8002ec2:	428b      	cmp	r3, r1
 8002ec4:	d900      	bls.n	8002ec8 <_malloc_r+0x310>
 8002ec6:	6013      	str	r3, [r2, #0]
 8002ec8:	4a0a      	ldr	r2, [pc, #40]	; (8002ef4 <_malloc_r+0x33c>)
 8002eca:	6811      	ldr	r1, [r2, #0]
 8002ecc:	428b      	cmp	r3, r1
 8002ece:	d93c      	bls.n	8002f4a <_malloc_r+0x392>
 8002ed0:	6013      	str	r3, [r2, #0]
 8002ed2:	e03a      	b.n	8002f4a <_malloc_r+0x392>
 8002ed4:	200000f8 	.word	0x200000f8
 8002ed8:	00000554 	.word	0x00000554
 8002edc:	000001ff 	.word	0x000001ff
 8002ee0:	20000554 	.word	0x20000554
 8002ee4:	20000500 	.word	0x20000500
 8002ee8:	00000080 	.word	0x00000080
 8002eec:	20000524 	.word	0x20000524
 8002ef0:	2000054c 	.word	0x2000054c
 8002ef4:	20000550 	.word	0x20000550
 8002ef8:	4b2d      	ldr	r3, [pc, #180]	; (8002fb0 <_malloc_r+0x3f8>)
 8002efa:	6818      	ldr	r0, [r3, #0]
 8002efc:	3001      	adds	r0, #1
 8002efe:	d132      	bne.n	8002f66 <_malloc_r+0x3ae>
 8002f00:	601c      	str	r4, [r3, #0]
 8002f02:	2007      	movs	r0, #7
 8002f04:	4020      	ands	r0, r4
 8002f06:	d002      	beq.n	8002f0e <_malloc_r+0x356>
 8002f08:	2308      	movs	r3, #8
 8002f0a:	1a18      	subs	r0, r3, r0
 8002f0c:	1824      	adds	r4, r4, r0
 8002f0e:	4b29      	ldr	r3, [pc, #164]	; (8002fb4 <_malloc_r+0x3fc>)
 8002f10:	19a6      	adds	r6, r4, r6
 8002f12:	1818      	adds	r0, r3, r0
 8002f14:	4016      	ands	r6, r2
 8002f16:	1b86      	subs	r6, r0, r6
 8002f18:	0031      	movs	r1, r6
 8002f1a:	9801      	ldr	r0, [sp, #4]
 8002f1c:	f000 f868 	bl	8002ff0 <_sbrk_r>
 8002f20:	1c43      	adds	r3, r0, #1
 8002f22:	d101      	bne.n	8002f28 <_malloc_r+0x370>
 8002f24:	0020      	movs	r0, r4
 8002f26:	2600      	movs	r6, #0
 8002f28:	4a23      	ldr	r2, [pc, #140]	; (8002fb8 <_malloc_r+0x400>)
 8002f2a:	1b00      	subs	r0, r0, r4
 8002f2c:	6813      	ldr	r3, [r2, #0]
 8002f2e:	199b      	adds	r3, r3, r6
 8002f30:	6013      	str	r3, [r2, #0]
 8002f32:	2301      	movs	r3, #1
 8002f34:	4a21      	ldr	r2, [pc, #132]	; (8002fbc <_malloc_r+0x404>)
 8002f36:	1986      	adds	r6, r0, r6
 8002f38:	431e      	orrs	r6, r3
 8002f3a:	6094      	str	r4, [r2, #8]
 8002f3c:	6066      	str	r6, [r4, #4]
 8002f3e:	4297      	cmp	r7, r2
 8002f40:	d0bb      	beq.n	8002eba <_malloc_r+0x302>
 8002f42:	9a02      	ldr	r2, [sp, #8]
 8002f44:	2a0f      	cmp	r2, #15
 8002f46:	d814      	bhi.n	8002f72 <_malloc_r+0x3ba>
 8002f48:	6063      	str	r3, [r4, #4]
 8002f4a:	2203      	movs	r2, #3
 8002f4c:	4b1b      	ldr	r3, [pc, #108]	; (8002fbc <_malloc_r+0x404>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	4393      	bics	r3, r2
 8002f54:	1b5a      	subs	r2, r3, r5
 8002f56:	429d      	cmp	r5, r3
 8002f58:	d801      	bhi.n	8002f5e <_malloc_r+0x3a6>
 8002f5a:	2a0f      	cmp	r2, #15
 8002f5c:	dc1d      	bgt.n	8002f9a <_malloc_r+0x3e2>
 8002f5e:	9801      	ldr	r0, [sp, #4]
 8002f60:	f000 f83e 	bl	8002fe0 <__malloc_unlock>
 8002f64:	e635      	b.n	8002bd2 <_malloc_r+0x1a>
 8002f66:	9b03      	ldr	r3, [sp, #12]
 8002f68:	1ae3      	subs	r3, r4, r3
 8002f6a:	185b      	adds	r3, r3, r1
 8002f6c:	4912      	ldr	r1, [pc, #72]	; (8002fb8 <_malloc_r+0x400>)
 8002f6e:	600b      	str	r3, [r1, #0]
 8002f70:	e7c7      	b.n	8002f02 <_malloc_r+0x34a>
 8002f72:	2207      	movs	r2, #7
 8002f74:	9e02      	ldr	r6, [sp, #8]
 8002f76:	3e0c      	subs	r6, #12
 8002f78:	4396      	bics	r6, r2
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	2205      	movs	r2, #5
 8002f80:	4333      	orrs	r3, r6
 8002f82:	607b      	str	r3, [r7, #4]
 8002f84:	19bb      	adds	r3, r7, r6
 8002f86:	605a      	str	r2, [r3, #4]
 8002f88:	609a      	str	r2, [r3, #8]
 8002f8a:	2e0f      	cmp	r6, #15
 8002f8c:	d995      	bls.n	8002eba <_malloc_r+0x302>
 8002f8e:	0039      	movs	r1, r7
 8002f90:	9801      	ldr	r0, [sp, #4]
 8002f92:	3108      	adds	r1, #8
 8002f94:	f000 f892 	bl	80030bc <_free_r>
 8002f98:	e78f      	b.n	8002eba <_malloc_r+0x302>
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	4907      	ldr	r1, [pc, #28]	; (8002fbc <_malloc_r+0x404>)
 8002fa0:	4328      	orrs	r0, r5
 8002fa2:	688c      	ldr	r4, [r1, #8]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	1965      	adds	r5, r4, r5
 8002fa8:	6060      	str	r0, [r4, #4]
 8002faa:	608d      	str	r5, [r1, #8]
 8002fac:	606b      	str	r3, [r5, #4]
 8002fae:	e638      	b.n	8002c22 <_malloc_r+0x6a>
 8002fb0:	20000500 	.word	0x20000500
 8002fb4:	00000080 	.word	0x00000080
 8002fb8:	20000524 	.word	0x20000524
 8002fbc:	200000f8 	.word	0x200000f8

08002fc0 <memset>:
 8002fc0:	0003      	movs	r3, r0
 8002fc2:	1882      	adds	r2, r0, r2
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d100      	bne.n	8002fca <memset+0xa>
 8002fc8:	4770      	bx	lr
 8002fca:	7019      	strb	r1, [r3, #0]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	e7f9      	b.n	8002fc4 <memset+0x4>

08002fd0 <__malloc_lock>:
 8002fd0:	b510      	push	{r4, lr}
 8002fd2:	4802      	ldr	r0, [pc, #8]	; (8002fdc <__malloc_lock+0xc>)
 8002fd4:	f000 f926 	bl	8003224 <__retarget_lock_acquire_recursive>
 8002fd8:	bd10      	pop	{r4, pc}
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	20000918 	.word	0x20000918

08002fe0 <__malloc_unlock>:
 8002fe0:	b510      	push	{r4, lr}
 8002fe2:	4802      	ldr	r0, [pc, #8]	; (8002fec <__malloc_unlock+0xc>)
 8002fe4:	f000 f91f 	bl	8003226 <__retarget_lock_release_recursive>
 8002fe8:	bd10      	pop	{r4, pc}
 8002fea:	46c0      	nop			; (mov r8, r8)
 8002fec:	20000918 	.word	0x20000918

08002ff0 <_sbrk_r>:
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	b570      	push	{r4, r5, r6, lr}
 8002ff4:	4c06      	ldr	r4, [pc, #24]	; (8003010 <_sbrk_r+0x20>)
 8002ff6:	0005      	movs	r5, r0
 8002ff8:	0008      	movs	r0, r1
 8002ffa:	6023      	str	r3, [r4, #0]
 8002ffc:	f000 f914 	bl	8003228 <_sbrk>
 8003000:	1c43      	adds	r3, r0, #1
 8003002:	d103      	bne.n	800300c <_sbrk_r+0x1c>
 8003004:	6823      	ldr	r3, [r4, #0]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d000      	beq.n	800300c <_sbrk_r+0x1c>
 800300a:	602b      	str	r3, [r5, #0]
 800300c:	bd70      	pop	{r4, r5, r6, pc}
 800300e:	46c0      	nop			; (mov r8, r8)
 8003010:	20000920 	.word	0x20000920

08003014 <_malloc_trim_r>:
 8003014:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003016:	4f25      	ldr	r7, [pc, #148]	; (80030ac <_malloc_trim_r+0x98>)
 8003018:	000c      	movs	r4, r1
 800301a:	0005      	movs	r5, r0
 800301c:	f7ff ffd8 	bl	8002fd0 <__malloc_lock>
 8003020:	0038      	movs	r0, r7
 8003022:	2203      	movs	r2, #3
 8003024:	4e22      	ldr	r6, [pc, #136]	; (80030b0 <_malloc_trim_r+0x9c>)
 8003026:	3811      	subs	r0, #17
 8003028:	68b3      	ldr	r3, [r6, #8]
 800302a:	1b00      	subs	r0, r0, r4
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	0039      	movs	r1, r7
 8003030:	4393      	bics	r3, r2
 8003032:	18c0      	adds	r0, r0, r3
 8003034:	9301      	str	r3, [sp, #4]
 8003036:	f7fd f867 	bl	8000108 <__udivsi3>
 800303a:	1e44      	subs	r4, r0, #1
 800303c:	437c      	muls	r4, r7
 800303e:	42bc      	cmp	r4, r7
 8003040:	da04      	bge.n	800304c <_malloc_trim_r+0x38>
 8003042:	0028      	movs	r0, r5
 8003044:	f7ff ffcc 	bl	8002fe0 <__malloc_unlock>
 8003048:	2000      	movs	r0, #0
 800304a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800304c:	2100      	movs	r1, #0
 800304e:	0028      	movs	r0, r5
 8003050:	f7ff ffce 	bl	8002ff0 <_sbrk_r>
 8003054:	68b3      	ldr	r3, [r6, #8]
 8003056:	9a01      	ldr	r2, [sp, #4]
 8003058:	189b      	adds	r3, r3, r2
 800305a:	4298      	cmp	r0, r3
 800305c:	d1f1      	bne.n	8003042 <_malloc_trim_r+0x2e>
 800305e:	4261      	negs	r1, r4
 8003060:	0028      	movs	r0, r5
 8003062:	f7ff ffc5 	bl	8002ff0 <_sbrk_r>
 8003066:	1c43      	adds	r3, r0, #1
 8003068:	d110      	bne.n	800308c <_malloc_trim_r+0x78>
 800306a:	2100      	movs	r1, #0
 800306c:	0028      	movs	r0, r5
 800306e:	f7ff ffbf 	bl	8002ff0 <_sbrk_r>
 8003072:	68b2      	ldr	r2, [r6, #8]
 8003074:	1a81      	subs	r1, r0, r2
 8003076:	290f      	cmp	r1, #15
 8003078:	dde3      	ble.n	8003042 <_malloc_trim_r+0x2e>
 800307a:	4b0e      	ldr	r3, [pc, #56]	; (80030b4 <_malloc_trim_r+0xa0>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	1ac0      	subs	r0, r0, r3
 8003080:	4b0d      	ldr	r3, [pc, #52]	; (80030b8 <_malloc_trim_r+0xa4>)
 8003082:	6018      	str	r0, [r3, #0]
 8003084:	2301      	movs	r3, #1
 8003086:	430b      	orrs	r3, r1
 8003088:	6053      	str	r3, [r2, #4]
 800308a:	e7da      	b.n	8003042 <_malloc_trim_r+0x2e>
 800308c:	68b2      	ldr	r2, [r6, #8]
 800308e:	2601      	movs	r6, #1
 8003090:	9b01      	ldr	r3, [sp, #4]
 8003092:	0028      	movs	r0, r5
 8003094:	1b1b      	subs	r3, r3, r4
 8003096:	4333      	orrs	r3, r6
 8003098:	6053      	str	r3, [r2, #4]
 800309a:	4b07      	ldr	r3, [pc, #28]	; (80030b8 <_malloc_trim_r+0xa4>)
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	1b14      	subs	r4, r2, r4
 80030a0:	601c      	str	r4, [r3, #0]
 80030a2:	f7ff ff9d 	bl	8002fe0 <__malloc_unlock>
 80030a6:	0030      	movs	r0, r6
 80030a8:	e7cf      	b.n	800304a <_malloc_trim_r+0x36>
 80030aa:	46c0      	nop			; (mov r8, r8)
 80030ac:	00000080 	.word	0x00000080
 80030b0:	200000f8 	.word	0x200000f8
 80030b4:	20000500 	.word	0x20000500
 80030b8:	20000524 	.word	0x20000524

080030bc <_free_r>:
 80030bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80030be:	1e0d      	subs	r5, r1, #0
 80030c0:	9001      	str	r0, [sp, #4]
 80030c2:	d02d      	beq.n	8003120 <_free_r+0x64>
 80030c4:	f7ff ff84 	bl	8002fd0 <__malloc_lock>
 80030c8:	2301      	movs	r3, #1
 80030ca:	0029      	movs	r1, r5
 80030cc:	469c      	mov	ip, r3
 80030ce:	3908      	subs	r1, #8
 80030d0:	684f      	ldr	r7, [r1, #4]
 80030d2:	4662      	mov	r2, ip
 80030d4:	003b      	movs	r3, r7
 80030d6:	4666      	mov	r6, ip
 80030d8:	4393      	bics	r3, r2
 80030da:	18c8      	adds	r0, r1, r3
 80030dc:	6845      	ldr	r5, [r0, #4]
 80030de:	3202      	adds	r2, #2
 80030e0:	4395      	bics	r5, r2
 80030e2:	4a4a      	ldr	r2, [pc, #296]	; (800320c <_free_r+0x150>)
 80030e4:	4037      	ands	r7, r6
 80030e6:	6896      	ldr	r6, [r2, #8]
 80030e8:	42b0      	cmp	r0, r6
 80030ea:	d11a      	bne.n	8003122 <_free_r+0x66>
 80030ec:	195b      	adds	r3, r3, r5
 80030ee:	2f00      	cmp	r7, #0
 80030f0:	d106      	bne.n	8003100 <_free_r+0x44>
 80030f2:	6808      	ldr	r0, [r1, #0]
 80030f4:	1a09      	subs	r1, r1, r0
 80030f6:	688d      	ldr	r5, [r1, #8]
 80030f8:	181b      	adds	r3, r3, r0
 80030fa:	68c8      	ldr	r0, [r1, #12]
 80030fc:	60e8      	str	r0, [r5, #12]
 80030fe:	6085      	str	r5, [r0, #8]
 8003100:	2001      	movs	r0, #1
 8003102:	4318      	orrs	r0, r3
 8003104:	6048      	str	r0, [r1, #4]
 8003106:	6091      	str	r1, [r2, #8]
 8003108:	4a41      	ldr	r2, [pc, #260]	; (8003210 <_free_r+0x154>)
 800310a:	6812      	ldr	r2, [r2, #0]
 800310c:	4293      	cmp	r3, r2
 800310e:	d304      	bcc.n	800311a <_free_r+0x5e>
 8003110:	4b40      	ldr	r3, [pc, #256]	; (8003214 <_free_r+0x158>)
 8003112:	9801      	ldr	r0, [sp, #4]
 8003114:	6819      	ldr	r1, [r3, #0]
 8003116:	f7ff ff7d 	bl	8003014 <_malloc_trim_r>
 800311a:	9801      	ldr	r0, [sp, #4]
 800311c:	f7ff ff60 	bl	8002fe0 <__malloc_unlock>
 8003120:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003122:	2600      	movs	r6, #0
 8003124:	6045      	str	r5, [r0, #4]
 8003126:	42b7      	cmp	r7, r6
 8003128:	d109      	bne.n	800313e <_free_r+0x82>
 800312a:	680f      	ldr	r7, [r1, #0]
 800312c:	4c3a      	ldr	r4, [pc, #232]	; (8003218 <_free_r+0x15c>)
 800312e:	1bc9      	subs	r1, r1, r7
 8003130:	19db      	adds	r3, r3, r7
 8003132:	688f      	ldr	r7, [r1, #8]
 8003134:	42a7      	cmp	r7, r4
 8003136:	d02b      	beq.n	8003190 <_free_r+0xd4>
 8003138:	68cc      	ldr	r4, [r1, #12]
 800313a:	60fc      	str	r4, [r7, #12]
 800313c:	60a7      	str	r7, [r4, #8]
 800313e:	1947      	adds	r7, r0, r5
 8003140:	687c      	ldr	r4, [r7, #4]
 8003142:	2701      	movs	r7, #1
 8003144:	423c      	tst	r4, r7
 8003146:	d10b      	bne.n	8003160 <_free_r+0xa4>
 8003148:	195b      	adds	r3, r3, r5
 800314a:	6885      	ldr	r5, [r0, #8]
 800314c:	2e00      	cmp	r6, #0
 800314e:	d121      	bne.n	8003194 <_free_r+0xd8>
 8003150:	4c31      	ldr	r4, [pc, #196]	; (8003218 <_free_r+0x15c>)
 8003152:	42a5      	cmp	r5, r4
 8003154:	d11e      	bne.n	8003194 <_free_r+0xd8>
 8003156:	003e      	movs	r6, r7
 8003158:	6151      	str	r1, [r2, #20]
 800315a:	6111      	str	r1, [r2, #16]
 800315c:	60cd      	str	r5, [r1, #12]
 800315e:	608d      	str	r5, [r1, #8]
 8003160:	2001      	movs	r0, #1
 8003162:	0005      	movs	r5, r0
 8003164:	431d      	orrs	r5, r3
 8003166:	604d      	str	r5, [r1, #4]
 8003168:	50cb      	str	r3, [r1, r3]
 800316a:	2e00      	cmp	r6, #0
 800316c:	d1d5      	bne.n	800311a <_free_r+0x5e>
 800316e:	4d2b      	ldr	r5, [pc, #172]	; (800321c <_free_r+0x160>)
 8003170:	42ab      	cmp	r3, r5
 8003172:	d813      	bhi.n	800319c <_free_r+0xe0>
 8003174:	08db      	lsrs	r3, r3, #3
 8003176:	109d      	asrs	r5, r3, #2
 8003178:	40a8      	lsls	r0, r5
 800317a:	6854      	ldr	r4, [r2, #4]
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	4320      	orrs	r0, r4
 8003180:	6050      	str	r0, [r2, #4]
 8003182:	189a      	adds	r2, r3, r2
 8003184:	6893      	ldr	r3, [r2, #8]
 8003186:	60ca      	str	r2, [r1, #12]
 8003188:	608b      	str	r3, [r1, #8]
 800318a:	6091      	str	r1, [r2, #8]
 800318c:	60d9      	str	r1, [r3, #12]
 800318e:	e7c4      	b.n	800311a <_free_r+0x5e>
 8003190:	4666      	mov	r6, ip
 8003192:	e7d4      	b.n	800313e <_free_r+0x82>
 8003194:	68c0      	ldr	r0, [r0, #12]
 8003196:	60e8      	str	r0, [r5, #12]
 8003198:	6085      	str	r5, [r0, #8]
 800319a:	e7e1      	b.n	8003160 <_free_r+0xa4>
 800319c:	0a5d      	lsrs	r5, r3, #9
 800319e:	2d04      	cmp	r5, #4
 80031a0:	d812      	bhi.n	80031c8 <_free_r+0x10c>
 80031a2:	0998      	lsrs	r0, r3, #6
 80031a4:	3038      	adds	r0, #56	; 0x38
 80031a6:	00c6      	lsls	r6, r0, #3
 80031a8:	18b6      	adds	r6, r6, r2
 80031aa:	68b5      	ldr	r5, [r6, #8]
 80031ac:	2703      	movs	r7, #3
 80031ae:	42ae      	cmp	r6, r5
 80031b0:	d125      	bne.n	80031fe <_free_r+0x142>
 80031b2:	2301      	movs	r3, #1
 80031b4:	1080      	asrs	r0, r0, #2
 80031b6:	4083      	lsls	r3, r0
 80031b8:	6850      	ldr	r0, [r2, #4]
 80031ba:	4303      	orrs	r3, r0
 80031bc:	6053      	str	r3, [r2, #4]
 80031be:	60ce      	str	r6, [r1, #12]
 80031c0:	608d      	str	r5, [r1, #8]
 80031c2:	60b1      	str	r1, [r6, #8]
 80031c4:	60e9      	str	r1, [r5, #12]
 80031c6:	e7a8      	b.n	800311a <_free_r+0x5e>
 80031c8:	2d14      	cmp	r5, #20
 80031ca:	d802      	bhi.n	80031d2 <_free_r+0x116>
 80031cc:	0028      	movs	r0, r5
 80031ce:	305b      	adds	r0, #91	; 0x5b
 80031d0:	e7e9      	b.n	80031a6 <_free_r+0xea>
 80031d2:	2d54      	cmp	r5, #84	; 0x54
 80031d4:	d802      	bhi.n	80031dc <_free_r+0x120>
 80031d6:	0b18      	lsrs	r0, r3, #12
 80031d8:	306e      	adds	r0, #110	; 0x6e
 80031da:	e7e4      	b.n	80031a6 <_free_r+0xea>
 80031dc:	20aa      	movs	r0, #170	; 0xaa
 80031de:	0040      	lsls	r0, r0, #1
 80031e0:	4285      	cmp	r5, r0
 80031e2:	d802      	bhi.n	80031ea <_free_r+0x12e>
 80031e4:	0bd8      	lsrs	r0, r3, #15
 80031e6:	3077      	adds	r0, #119	; 0x77
 80031e8:	e7dd      	b.n	80031a6 <_free_r+0xea>
 80031ea:	4e0d      	ldr	r6, [pc, #52]	; (8003220 <_free_r+0x164>)
 80031ec:	207e      	movs	r0, #126	; 0x7e
 80031ee:	42b5      	cmp	r5, r6
 80031f0:	d8d9      	bhi.n	80031a6 <_free_r+0xea>
 80031f2:	0c98      	lsrs	r0, r3, #18
 80031f4:	307c      	adds	r0, #124	; 0x7c
 80031f6:	e7d6      	b.n	80031a6 <_free_r+0xea>
 80031f8:	68ad      	ldr	r5, [r5, #8]
 80031fa:	42ae      	cmp	r6, r5
 80031fc:	d003      	beq.n	8003206 <_free_r+0x14a>
 80031fe:	686a      	ldr	r2, [r5, #4]
 8003200:	43ba      	bics	r2, r7
 8003202:	4293      	cmp	r3, r2
 8003204:	d3f8      	bcc.n	80031f8 <_free_r+0x13c>
 8003206:	68ee      	ldr	r6, [r5, #12]
 8003208:	e7d9      	b.n	80031be <_free_r+0x102>
 800320a:	46c0      	nop			; (mov r8, r8)
 800320c:	200000f8 	.word	0x200000f8
 8003210:	20000504 	.word	0x20000504
 8003214:	20000554 	.word	0x20000554
 8003218:	20000100 	.word	0x20000100
 800321c:	000001ff 	.word	0x000001ff
 8003220:	00000554 	.word	0x00000554

08003224 <__retarget_lock_acquire_recursive>:
 8003224:	4770      	bx	lr

08003226 <__retarget_lock_release_recursive>:
 8003226:	4770      	bx	lr

08003228 <_sbrk>:
 8003228:	4b05      	ldr	r3, [pc, #20]	; (8003240 <_sbrk+0x18>)
 800322a:	0002      	movs	r2, r0
 800322c:	6819      	ldr	r1, [r3, #0]
 800322e:	2900      	cmp	r1, #0
 8003230:	d101      	bne.n	8003236 <_sbrk+0xe>
 8003232:	4904      	ldr	r1, [pc, #16]	; (8003244 <_sbrk+0x1c>)
 8003234:	6019      	str	r1, [r3, #0]
 8003236:	6818      	ldr	r0, [r3, #0]
 8003238:	1882      	adds	r2, r0, r2
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	4770      	bx	lr
 800323e:	46c0      	nop			; (mov r8, r8)
 8003240:	20000558 	.word	0x20000558
 8003244:	20000924 	.word	0x20000924

08003248 <_init>:
 8003248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800324a:	46c0      	nop			; (mov r8, r8)
 800324c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800324e:	bc08      	pop	{r3}
 8003250:	469e      	mov	lr, r3
 8003252:	4770      	bx	lr

08003254 <_fini>:
 8003254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003256:	46c0      	nop			; (mov r8, r8)
 8003258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800325a:	bc08      	pop	{r3}
 800325c:	469e      	mov	lr, r3
 800325e:	4770      	bx	lr
