
STM32F743_NUCLEO_Nokia5510_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000551c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000242c  080057b4  080057b4  000157b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007be0  08007be0  00017be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007be8  08007be8  00017be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007bec  08007bec  00017bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  20000000  08007bf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  2000007c  08007c6c  0002007c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  200000dc  08007ccc  000200dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000650  2000013c  08007d2c  0002013c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000078c  08007d2c  0002078c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026926  00000000  00000000  0002016a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003f90  00000000  00000000  00046a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000b47c  00000000  00000000  0004aa20  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001000  00000000  00000000  00055ea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000f38  00000000  00000000  00056ea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008c54  00000000  00000000  00057dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00006e79  00000000  00000000  00060a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007c  00000000  00000000  000678a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ad8  00000000  00000000  00067924  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2000013c 	.word	0x2000013c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800579c 	.word	0x0800579c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000140 	.word	0x20000140
 80002d4:	0800579c 	.word	0x0800579c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b97a 	b.w	80005e4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	468c      	mov	ip, r1
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	9e08      	ldr	r6, [sp, #32]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d151      	bne.n	80003bc <__udivmoddi4+0xb4>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d96d      	bls.n	80003fa <__udivmoddi4+0xf2>
 800031e:	fab2 fe82 	clz	lr, r2
 8000322:	f1be 0f00 	cmp.w	lr, #0
 8000326:	d00b      	beq.n	8000340 <__udivmoddi4+0x38>
 8000328:	f1ce 0c20 	rsb	ip, lr, #32
 800032c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000330:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000334:	fa02 f70e 	lsl.w	r7, r2, lr
 8000338:	ea4c 0c05 	orr.w	ip, ip, r5
 800033c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000340:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000344:	0c25      	lsrs	r5, r4, #16
 8000346:	fbbc f8fa 	udiv	r8, ip, sl
 800034a:	fa1f f987 	uxth.w	r9, r7
 800034e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000352:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000356:	fb08 f309 	mul.w	r3, r8, r9
 800035a:	42ab      	cmp	r3, r5
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x6c>
 800035e:	19ed      	adds	r5, r5, r7
 8000360:	f108 32ff 	add.w	r2, r8, #4294967295
 8000364:	f080 8123 	bcs.w	80005ae <__udivmoddi4+0x2a6>
 8000368:	42ab      	cmp	r3, r5
 800036a:	f240 8120 	bls.w	80005ae <__udivmoddi4+0x2a6>
 800036e:	f1a8 0802 	sub.w	r8, r8, #2
 8000372:	443d      	add	r5, r7
 8000374:	1aed      	subs	r5, r5, r3
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb5 f0fa 	udiv	r0, r5, sl
 800037c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000384:	fb00 f909 	mul.w	r9, r0, r9
 8000388:	45a1      	cmp	r9, r4
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x98>
 800038c:	19e4      	adds	r4, r4, r7
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000392:	f080 810a 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 8000396:	45a1      	cmp	r9, r4
 8000398:	f240 8107 	bls.w	80005aa <__udivmoddi4+0x2a2>
 800039c:	3802      	subs	r0, #2
 800039e:	443c      	add	r4, r7
 80003a0:	eba4 0409 	sub.w	r4, r4, r9
 80003a4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a8:	2100      	movs	r1, #0
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d061      	beq.n	8000472 <__udivmoddi4+0x16a>
 80003ae:	fa24 f40e 	lsr.w	r4, r4, lr
 80003b2:	2300      	movs	r3, #0
 80003b4:	6034      	str	r4, [r6, #0]
 80003b6:	6073      	str	r3, [r6, #4]
 80003b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003bc:	428b      	cmp	r3, r1
 80003be:	d907      	bls.n	80003d0 <__udivmoddi4+0xc8>
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d054      	beq.n	800046e <__udivmoddi4+0x166>
 80003c4:	2100      	movs	r1, #0
 80003c6:	e886 0021 	stmia.w	r6, {r0, r5}
 80003ca:	4608      	mov	r0, r1
 80003cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d0:	fab3 f183 	clz	r1, r3
 80003d4:	2900      	cmp	r1, #0
 80003d6:	f040 808e 	bne.w	80004f6 <__udivmoddi4+0x1ee>
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xdc>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80fa 	bhi.w	80005d8 <__udivmoddi4+0x2d0>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb65 0503 	sbc.w	r5, r5, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	46ac      	mov	ip, r5
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	d03f      	beq.n	8000472 <__udivmoddi4+0x16a>
 80003f2:	e886 1010 	stmia.w	r6, {r4, ip}
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	b912      	cbnz	r2, 8000402 <__udivmoddi4+0xfa>
 80003fc:	2701      	movs	r7, #1
 80003fe:	fbb7 f7f2 	udiv	r7, r7, r2
 8000402:	fab7 fe87 	clz	lr, r7
 8000406:	f1be 0f00 	cmp.w	lr, #0
 800040a:	d134      	bne.n	8000476 <__udivmoddi4+0x16e>
 800040c:	1beb      	subs	r3, r5, r7
 800040e:	0c3a      	lsrs	r2, r7, #16
 8000410:	fa1f fc87 	uxth.w	ip, r7
 8000414:	2101      	movs	r1, #1
 8000416:	fbb3 f8f2 	udiv	r8, r3, r2
 800041a:	0c25      	lsrs	r5, r4, #16
 800041c:	fb02 3318 	mls	r3, r2, r8, r3
 8000420:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000424:	fb0c f308 	mul.w	r3, ip, r8
 8000428:	42ab      	cmp	r3, r5
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x134>
 800042c:	19ed      	adds	r5, r5, r7
 800042e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x132>
 8000434:	42ab      	cmp	r3, r5
 8000436:	f200 80d1 	bhi.w	80005dc <__udivmoddi4+0x2d4>
 800043a:	4680      	mov	r8, r0
 800043c:	1aed      	subs	r5, r5, r3
 800043e:	b2a3      	uxth	r3, r4
 8000440:	fbb5 f0f2 	udiv	r0, r5, r2
 8000444:	fb02 5510 	mls	r5, r2, r0, r5
 8000448:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800044c:	fb0c fc00 	mul.w	ip, ip, r0
 8000450:	45a4      	cmp	ip, r4
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x15c>
 8000454:	19e4      	adds	r4, r4, r7
 8000456:	f100 33ff 	add.w	r3, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x15a>
 800045c:	45a4      	cmp	ip, r4
 800045e:	f200 80b8 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 8000462:	4618      	mov	r0, r3
 8000464:	eba4 040c 	sub.w	r4, r4, ip
 8000468:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800046c:	e79d      	b.n	80003aa <__udivmoddi4+0xa2>
 800046e:	4631      	mov	r1, r6
 8000470:	4630      	mov	r0, r6
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	f1ce 0420 	rsb	r4, lr, #32
 800047a:	fa05 f30e 	lsl.w	r3, r5, lr
 800047e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000482:	fa20 f804 	lsr.w	r8, r0, r4
 8000486:	0c3a      	lsrs	r2, r7, #16
 8000488:	fa25 f404 	lsr.w	r4, r5, r4
 800048c:	ea48 0803 	orr.w	r8, r8, r3
 8000490:	fbb4 f1f2 	udiv	r1, r4, r2
 8000494:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000498:	fb02 4411 	mls	r4, r2, r1, r4
 800049c:	fa1f fc87 	uxth.w	ip, r7
 80004a0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80004a4:	fb01 f30c 	mul.w	r3, r1, ip
 80004a8:	42ab      	cmp	r3, r5
 80004aa:	fa00 f40e 	lsl.w	r4, r0, lr
 80004ae:	d909      	bls.n	80004c4 <__udivmoddi4+0x1bc>
 80004b0:	19ed      	adds	r5, r5, r7
 80004b2:	f101 30ff 	add.w	r0, r1, #4294967295
 80004b6:	f080 808a 	bcs.w	80005ce <__udivmoddi4+0x2c6>
 80004ba:	42ab      	cmp	r3, r5
 80004bc:	f240 8087 	bls.w	80005ce <__udivmoddi4+0x2c6>
 80004c0:	3902      	subs	r1, #2
 80004c2:	443d      	add	r5, r7
 80004c4:	1aeb      	subs	r3, r5, r3
 80004c6:	fa1f f588 	uxth.w	r5, r8
 80004ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80004ce:	fb02 3310 	mls	r3, r2, r0, r3
 80004d2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004d6:	fb00 f30c 	mul.w	r3, r0, ip
 80004da:	42ab      	cmp	r3, r5
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x1e6>
 80004de:	19ed      	adds	r5, r5, r7
 80004e0:	f100 38ff 	add.w	r8, r0, #4294967295
 80004e4:	d26f      	bcs.n	80005c6 <__udivmoddi4+0x2be>
 80004e6:	42ab      	cmp	r3, r5
 80004e8:	d96d      	bls.n	80005c6 <__udivmoddi4+0x2be>
 80004ea:	3802      	subs	r0, #2
 80004ec:	443d      	add	r5, r7
 80004ee:	1aeb      	subs	r3, r5, r3
 80004f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f4:	e78f      	b.n	8000416 <__udivmoddi4+0x10e>
 80004f6:	f1c1 0720 	rsb	r7, r1, #32
 80004fa:	fa22 f807 	lsr.w	r8, r2, r7
 80004fe:	408b      	lsls	r3, r1
 8000500:	fa05 f401 	lsl.w	r4, r5, r1
 8000504:	ea48 0303 	orr.w	r3, r8, r3
 8000508:	fa20 fe07 	lsr.w	lr, r0, r7
 800050c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000510:	40fd      	lsrs	r5, r7
 8000512:	ea4e 0e04 	orr.w	lr, lr, r4
 8000516:	fbb5 f9fc 	udiv	r9, r5, ip
 800051a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800051e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000522:	fa1f f883 	uxth.w	r8, r3
 8000526:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800052a:	fb09 f408 	mul.w	r4, r9, r8
 800052e:	42ac      	cmp	r4, r5
 8000530:	fa02 f201 	lsl.w	r2, r2, r1
 8000534:	fa00 fa01 	lsl.w	sl, r0, r1
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x244>
 800053a:	18ed      	adds	r5, r5, r3
 800053c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000540:	d243      	bcs.n	80005ca <__udivmoddi4+0x2c2>
 8000542:	42ac      	cmp	r4, r5
 8000544:	d941      	bls.n	80005ca <__udivmoddi4+0x2c2>
 8000546:	f1a9 0902 	sub.w	r9, r9, #2
 800054a:	441d      	add	r5, r3
 800054c:	1b2d      	subs	r5, r5, r4
 800054e:	fa1f fe8e 	uxth.w	lr, lr
 8000552:	fbb5 f0fc 	udiv	r0, r5, ip
 8000556:	fb0c 5510 	mls	r5, ip, r0, r5
 800055a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800055e:	fb00 f808 	mul.w	r8, r0, r8
 8000562:	45a0      	cmp	r8, r4
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x26e>
 8000566:	18e4      	adds	r4, r4, r3
 8000568:	f100 35ff 	add.w	r5, r0, #4294967295
 800056c:	d229      	bcs.n	80005c2 <__udivmoddi4+0x2ba>
 800056e:	45a0      	cmp	r8, r4
 8000570:	d927      	bls.n	80005c2 <__udivmoddi4+0x2ba>
 8000572:	3802      	subs	r0, #2
 8000574:	441c      	add	r4, r3
 8000576:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800057a:	eba4 0408 	sub.w	r4, r4, r8
 800057e:	fba0 8902 	umull	r8, r9, r0, r2
 8000582:	454c      	cmp	r4, r9
 8000584:	46c6      	mov	lr, r8
 8000586:	464d      	mov	r5, r9
 8000588:	d315      	bcc.n	80005b6 <__udivmoddi4+0x2ae>
 800058a:	d012      	beq.n	80005b2 <__udivmoddi4+0x2aa>
 800058c:	b156      	cbz	r6, 80005a4 <__udivmoddi4+0x29c>
 800058e:	ebba 030e 	subs.w	r3, sl, lr
 8000592:	eb64 0405 	sbc.w	r4, r4, r5
 8000596:	fa04 f707 	lsl.w	r7, r4, r7
 800059a:	40cb      	lsrs	r3, r1
 800059c:	431f      	orrs	r7, r3
 800059e:	40cc      	lsrs	r4, r1
 80005a0:	6037      	str	r7, [r6, #0]
 80005a2:	6074      	str	r4, [r6, #4]
 80005a4:	2100      	movs	r1, #0
 80005a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005aa:	4618      	mov	r0, r3
 80005ac:	e6f8      	b.n	80003a0 <__udivmoddi4+0x98>
 80005ae:	4690      	mov	r8, r2
 80005b0:	e6e0      	b.n	8000374 <__udivmoddi4+0x6c>
 80005b2:	45c2      	cmp	sl, r8
 80005b4:	d2ea      	bcs.n	800058c <__udivmoddi4+0x284>
 80005b6:	ebb8 0e02 	subs.w	lr, r8, r2
 80005ba:	eb69 0503 	sbc.w	r5, r9, r3
 80005be:	3801      	subs	r0, #1
 80005c0:	e7e4      	b.n	800058c <__udivmoddi4+0x284>
 80005c2:	4628      	mov	r0, r5
 80005c4:	e7d7      	b.n	8000576 <__udivmoddi4+0x26e>
 80005c6:	4640      	mov	r0, r8
 80005c8:	e791      	b.n	80004ee <__udivmoddi4+0x1e6>
 80005ca:	4681      	mov	r9, r0
 80005cc:	e7be      	b.n	800054c <__udivmoddi4+0x244>
 80005ce:	4601      	mov	r1, r0
 80005d0:	e778      	b.n	80004c4 <__udivmoddi4+0x1bc>
 80005d2:	3802      	subs	r0, #2
 80005d4:	443c      	add	r4, r7
 80005d6:	e745      	b.n	8000464 <__udivmoddi4+0x15c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e708      	b.n	80003ee <__udivmoddi4+0xe6>
 80005dc:	f1a8 0802 	sub.w	r8, r8, #2
 80005e0:	443d      	add	r5, r7
 80005e2:	e72b      	b.n	800043c <__udivmoddi4+0x134>

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005e8:	b510      	push	{r4, lr}
 80005ea:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005ec:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <HAL_InitTick+0x40>)
 80005ee:	7818      	ldrb	r0, [r3, #0]
 80005f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f4:	fbb3 f3f0 	udiv	r3, r3, r0
 80005f8:	4a0c      	ldr	r2, [pc, #48]	; (800062c <HAL_InitTick+0x44>)
 80005fa:	6810      	ldr	r0, [r2, #0]
 80005fc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000600:	f000 f8a8 	bl	8000754 <HAL_SYSTICK_Config>
 8000604:	b968      	cbnz	r0, 8000622 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000606:	2c0f      	cmp	r4, #15
 8000608:	d901      	bls.n	800060e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800060a:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 800060c:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800060e:	2200      	movs	r2, #0
 8000610:	4621      	mov	r1, r4
 8000612:	f04f 30ff 	mov.w	r0, #4294967295
 8000616:	f000 f85f 	bl	80006d8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800061a:	4b05      	ldr	r3, [pc, #20]	; (8000630 <HAL_InitTick+0x48>)
 800061c:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 800061e:	2000      	movs	r0, #0
 8000620:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000622:	2001      	movs	r0, #1
 8000624:	bd10      	pop	{r4, pc}
 8000626:	bf00      	nop
 8000628:	20000000 	.word	0x20000000
 800062c:	20000010 	.word	0x20000010
 8000630:	20000004 	.word	0x20000004

08000634 <HAL_Init>:
{
 8000634:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000636:	2003      	movs	r0, #3
 8000638:	f000 f83c 	bl	80006b4 <HAL_NVIC_SetPriorityGrouping>
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800063c:	2000      	movs	r0, #0
 800063e:	f7ff ffd3 	bl	80005e8 <HAL_InitTick>
 8000642:	b110      	cbz	r0, 800064a <HAL_Init+0x16>
    return HAL_ERROR;
 8000644:	2401      	movs	r4, #1
}
 8000646:	4620      	mov	r0, r4
 8000648:	bd10      	pop	{r4, pc}
 800064a:	4604      	mov	r4, r0
  HAL_MspInit();
 800064c:	f004 fe90 	bl	8005370 <HAL_MspInit>
  return HAL_OK;
 8000650:	e7f9      	b.n	8000646 <HAL_Init+0x12>
	...

08000654 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000654:	4b03      	ldr	r3, [pc, #12]	; (8000664 <HAL_IncTick+0x10>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	4a03      	ldr	r2, [pc, #12]	; (8000668 <HAL_IncTick+0x14>)
 800065a:	6811      	ldr	r1, [r2, #0]
 800065c:	440b      	add	r3, r1
 800065e:	6013      	str	r3, [r2, #0]
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	20000000 	.word	0x20000000
 8000668:	20000158 	.word	0x20000158

0800066c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800066c:	4b01      	ldr	r3, [pc, #4]	; (8000674 <HAL_GetTick+0x8>)
 800066e:	6818      	ldr	r0, [r3, #0]
}
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	20000158 	.word	0x20000158

08000678 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000678:	b538      	push	{r3, r4, r5, lr}
 800067a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800067c:	f7ff fff6 	bl	800066c <HAL_GetTick>
 8000680:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000682:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000686:	d002      	beq.n	800068e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000688:	4b04      	ldr	r3, [pc, #16]	; (800069c <HAL_Delay+0x24>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800068e:	f7ff ffed 	bl	800066c <HAL_GetTick>
 8000692:	1b40      	subs	r0, r0, r5
 8000694:	4284      	cmp	r4, r0
 8000696:	d8fa      	bhi.n	800068e <HAL_Delay+0x16>
  {
  }
}
 8000698:	bd38      	pop	{r3, r4, r5, pc}
 800069a:	bf00      	nop
 800069c:	20000000 	.word	0x20000000

080006a0 <HAL_SYSCFG_ETHInterfaceSelect>:
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));  
 80006a0:	4a03      	ldr	r2, [pc, #12]	; (80006b0 <HAL_SYSCFG_ETHInterfaceSelect+0x10>)
 80006a2:	6853      	ldr	r3, [r2, #4]
 80006a4:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 80006a8:	4318      	orrs	r0, r3
 80006aa:	6050      	str	r0, [r2, #4]
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	58000400 	.word	0x58000400

080006b4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006b4:	4906      	ldr	r1, [pc, #24]	; (80006d0 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 80006b6:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006b8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80006bc:	041b      	lsls	r3, r3, #16
 80006be:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80006c0:	0200      	lsls	r0, r0, #8
 80006c2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006c6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80006c8:	4a02      	ldr	r2, [pc, #8]	; (80006d4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80006ca:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 80006cc:	60ca      	str	r2, [r1, #12]
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00
 80006d4:	05fa0000 	.word	0x05fa0000

080006d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006d8:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006da:	4b14      	ldr	r3, [pc, #80]	; (800072c <HAL_NVIC_SetPriority+0x54>)
 80006dc:	68db      	ldr	r3, [r3, #12]
 80006de:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006e2:	f1c3 0407 	rsb	r4, r3, #7
 80006e6:	2c04      	cmp	r4, #4
 80006e8:	bf28      	it	cs
 80006ea:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ec:	1d1d      	adds	r5, r3, #4
 80006ee:	2d06      	cmp	r5, #6
 80006f0:	d913      	bls.n	800071a <HAL_NVIC_SetPriority+0x42>
 80006f2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f4:	2501      	movs	r5, #1
 80006f6:	fa05 f404 	lsl.w	r4, r5, r4
 80006fa:	3c01      	subs	r4, #1
 80006fc:	4021      	ands	r1, r4
 80006fe:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000700:	fa05 f303 	lsl.w	r3, r5, r3
 8000704:	3b01      	subs	r3, #1
 8000706:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000708:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800070a:	2800      	cmp	r0, #0
 800070c:	db07      	blt.n	800071e <HAL_NVIC_SetPriority+0x46>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070e:	0109      	lsls	r1, r1, #4
 8000710:	b2c9      	uxtb	r1, r1
 8000712:	4b07      	ldr	r3, [pc, #28]	; (8000730 <HAL_NVIC_SetPriority+0x58>)
 8000714:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000716:	bc30      	pop	{r4, r5}
 8000718:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800071a:	2300      	movs	r3, #0
 800071c:	e7ea      	b.n	80006f4 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800071e:	f000 000f 	and.w	r0, r0, #15
 8000722:	0109      	lsls	r1, r1, #4
 8000724:	b2c9      	uxtb	r1, r1
 8000726:	4b03      	ldr	r3, [pc, #12]	; (8000734 <HAL_NVIC_SetPriority+0x5c>)
 8000728:	5419      	strb	r1, [r3, r0]
 800072a:	e7f4      	b.n	8000716 <HAL_NVIC_SetPriority+0x3e>
 800072c:	e000ed00 	.word	0xe000ed00
 8000730:	e000e400 	.word	0xe000e400
 8000734:	e000ed14 	.word	0xe000ed14

08000738 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000738:	2800      	cmp	r0, #0
 800073a:	db08      	blt.n	800074e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800073c:	0942      	lsrs	r2, r0, #5
 800073e:	f000 001f 	and.w	r0, r0, #31
 8000742:	2301      	movs	r3, #1
 8000744:	fa03 f000 	lsl.w	r0, r3, r0
 8000748:	4b01      	ldr	r3, [pc, #4]	; (8000750 <HAL_NVIC_EnableIRQ+0x18>)
 800074a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800074e:	4770      	bx	lr
 8000750:	e000e100 	.word	0xe000e100

08000754 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000754:	3801      	subs	r0, #1
 8000756:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800075a:	d20a      	bcs.n	8000772 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800075c:	4b06      	ldr	r3, [pc, #24]	; (8000778 <HAL_SYSTICK_Config+0x24>)
 800075e:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000760:	21f0      	movs	r1, #240	; 0xf0
 8000762:	4a06      	ldr	r2, [pc, #24]	; (800077c <HAL_SYSTICK_Config+0x28>)
 8000764:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000768:	2000      	movs	r0, #0
 800076a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800076c:	2207      	movs	r2, #7
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000772:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	e000e010 	.word	0xe000e010
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000780:	2804      	cmp	r0, #4
 8000782:	d005      	beq.n	8000790 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000784:	4a05      	ldr	r2, [pc, #20]	; (800079c <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8000786:	6813      	ldr	r3, [r2, #0]
 8000788:	f023 0304 	bic.w	r3, r3, #4
 800078c:	6013      	str	r3, [r2, #0]
 800078e:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000790:	4a02      	ldr	r2, [pc, #8]	; (800079c <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8000792:	6813      	ldr	r3, [r2, #0]
 8000794:	f043 0304 	orr.w	r3, r3, #4
 8000798:	6013      	str	r3, [r2, #0]
 800079a:	4770      	bx	lr
 800079c:	e000e010 	.word	0xe000e010

080007a0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80007a0:	4770      	bx	lr

080007a2 <HAL_SYSTICK_IRQHandler>:
{
 80007a2:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80007a4:	f7ff fffc 	bl	80007a0 <HAL_SYSTICK_Callback>
 80007a8:	bd08      	pop	{r3, pc}
	...

080007ac <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80007ac:	b4f0      	push	{r4, r5, r6, r7}
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80007ae:	6d86      	ldr	r6, [r0, #88]	; 0x58

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80007b0:	6e44      	ldr	r4, [r0, #100]	; 0x64
 80007b2:	6e85      	ldr	r5, [r0, #104]	; 0x68
 80007b4:	6065      	str	r5, [r4, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 80007b6:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
 80007b8:	b114      	cbz	r4, 80007c0 <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80007ba:	6f04      	ldr	r4, [r0, #112]	; 0x70
 80007bc:	6f45      	ldr	r5, [r0, #116]	; 0x74
 80007be:	6065      	str	r5, [r4, #4]
  }

  if(IS_D2_DMA_INSTANCE(hdma) != RESET) /* D2 Domain DMA : DMA1 or DMA2 */
 80007c0:	6805      	ldr	r5, [r0, #0]
 80007c2:	4c1c      	ldr	r4, [pc, #112]	; (8000834 <DMA_SetConfig+0x88>)
 80007c4:	442c      	add	r4, r5
 80007c6:	f5b4 6f95 	cmp.w	r4, #1192	; 0x4a8
 80007ca:	d818      	bhi.n	80007fe <DMA_SetConfig+0x52>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80007cc:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 80007ce:	243f      	movs	r4, #63	; 0x3f
 80007d0:	40ac      	lsls	r4, r5
 80007d2:	60b4      	str	r4, [r6, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80007d4:	6805      	ldr	r5, [r0, #0]
 80007d6:	682c      	ldr	r4, [r5, #0]
 80007d8:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 80007dc:	602c      	str	r4, [r5, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80007de:	6804      	ldr	r4, [r0, #0]
 80007e0:	6063      	str	r3, [r4, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80007e2:	6883      	ldr	r3, [r0, #8]
 80007e4:	2b40      	cmp	r3, #64	; 0x40
 80007e6:	d005      	beq.n	80007f4 <DMA_SetConfig+0x48>
    }
    /* Memory to Peripheral */
    else
    {
      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80007e8:	6803      	ldr	r3, [r0, #0]
 80007ea:	6099      	str	r1, [r3, #8]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80007ec:	6803      	ldr	r3, [r0, #0]
 80007ee:	60da      	str	r2, [r3, #12]

      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CMAR = DstAddress;
    }
  }
}
 80007f0:	bcf0      	pop	{r4, r5, r6, r7}
 80007f2:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80007f4:	6803      	ldr	r3, [r0, #0]
 80007f6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80007f8:	6803      	ldr	r3, [r0, #0]
 80007fa:	60d9      	str	r1, [r3, #12]
 80007fc:	e7f8      	b.n	80007f0 <DMA_SetConfig+0x44>
  else if(IS_D3_DMA_INSTANCE(hdma)) /* D3 Domain BDMA */
 80007fe:	4c0e      	ldr	r4, [pc, #56]	; (8000838 <DMA_SetConfig+0x8c>)
 8000800:	442c      	add	r4, r5
 8000802:	2c8c      	cmp	r4, #140	; 0x8c
 8000804:	d8f4      	bhi.n	80007f0 <DMA_SetConfig+0x44>
    BDMA->IFCR  |= (BDMA_ISR_GIF0 << hdma->StreamIndex);
 8000806:	4e0d      	ldr	r6, [pc, #52]	; (800083c <DMA_SetConfig+0x90>)
 8000808:	6874      	ldr	r4, [r6, #4]
 800080a:	6dc7      	ldr	r7, [r0, #92]	; 0x5c
 800080c:	2501      	movs	r5, #1
 800080e:	40bd      	lsls	r5, r7
 8000810:	432c      	orrs	r4, r5
 8000812:	6074      	str	r4, [r6, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8000814:	6804      	ldr	r4, [r0, #0]
 8000816:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000818:	6883      	ldr	r3, [r0, #8]
 800081a:	2b40      	cmp	r3, #64	; 0x40
 800081c:	d004      	beq.n	8000828 <DMA_SetConfig+0x7c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800081e:	6803      	ldr	r3, [r0, #0]
 8000820:	6099      	str	r1, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CMAR = DstAddress;
 8000822:	6803      	ldr	r3, [r0, #0]
 8000824:	60da      	str	r2, [r3, #12]
}
 8000826:	e7e3      	b.n	80007f0 <DMA_SetConfig+0x44>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8000828:	6803      	ldr	r3, [r0, #0]
 800082a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CMAR = SrcAddress;
 800082c:	6803      	ldr	r3, [r0, #0]
 800082e:	60d9      	str	r1, [r3, #12]
 8000830:	e7de      	b.n	80007f0 <DMA_SetConfig+0x44>
 8000832:	bf00      	nop
 8000834:	bffdfff0 	.word	0xbffdfff0
 8000838:	a7fdabf8 	.word	0xa7fdabf8
 800083c:	58025400 	.word	0x58025400

08000840 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000840:	6802      	ldr	r2, [r0, #0]
 8000842:	b2d3      	uxtb	r3, r2
 8000844:	3b10      	subs	r3, #16
 8000846:	4909      	ldr	r1, [pc, #36]	; (800086c <DMA_CalcBaseAndBitshift+0x2c>)
 8000848:	fba1 1303 	umull	r1, r3, r1, r3
 800084c:	091b      	lsrs	r3, r3, #4

  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800084e:	4908      	ldr	r1, [pc, #32]	; (8000870 <DMA_CalcBaseAndBitshift+0x30>)
 8000850:	5cc9      	ldrb	r1, [r1, r3]
 8000852:	65c1      	str	r1, [r0, #92]	; 0x5c

  if (stream_number > 3U)
 8000854:	2b03      	cmp	r3, #3
 8000856:	d804      	bhi.n	8000862 <DMA_CalcBaseAndBitshift+0x22>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <DMA_CalcBaseAndBitshift+0x34>)
 800085a:	4013      	ands	r3, r2
 800085c:	6583      	str	r3, [r0, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
}
 800085e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000860:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000862:	4b04      	ldr	r3, [pc, #16]	; (8000874 <DMA_CalcBaseAndBitshift+0x34>)
 8000864:	4013      	ands	r3, r2
 8000866:	3304      	adds	r3, #4
 8000868:	6583      	str	r3, [r0, #88]	; 0x58
 800086a:	e7f8      	b.n	800085e <DMA_CalcBaseAndBitshift+0x1e>
 800086c:	aaaaaaab 	.word	0xaaaaaaab
 8000870:	080057b4 	.word	0x080057b4
 8000874:	fffffc00 	.word	0xfffffc00

08000878 <DMA_CheckFifoParam>:
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000878:	6983      	ldr	r3, [r0, #24]
 800087a:	b99b      	cbnz	r3, 80008a4 <DMA_CheckFifoParam+0x2c>
  {
    switch (hdma->Init.FIFOThreshold)
 800087c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800087e:	2b01      	cmp	r3, #1
 8000880:	d00a      	beq.n	8000898 <DMA_CheckFifoParam+0x20>
 8000882:	b11b      	cbz	r3, 800088c <DMA_CheckFifoParam+0x14>
 8000884:	2b02      	cmp	r3, #2
 8000886:	d001      	beq.n	800088c <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 8000888:	2000      	movs	r0, #0
 800088a:	4770      	bx	lr
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800088c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800088e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8000892:	d12e      	bne.n	80008f2 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8000894:	2000      	movs	r0, #0
 8000896:	4770      	bx	lr
          status = HAL_ERROR;
        }
        break;

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000898:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800089a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800089e:	d02a      	beq.n	80008f6 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 80008a0:	2000      	movs	r0, #0
 80008a2:	4770      	bx	lr
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80008a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008a8:	d006      	beq.n	80008b8 <DMA_CheckFifoParam+0x40>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80008aa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80008ac:	2b02      	cmp	r3, #2
 80008ae:	d92a      	bls.n	8000906 <DMA_CheckFifoParam+0x8e>
 80008b0:	2b03      	cmp	r3, #3
 80008b2:	d016      	beq.n	80008e2 <DMA_CheckFifoParam+0x6a>
  HAL_StatusTypeDef status = HAL_OK;
 80008b4:	2000      	movs	r0, #0
 80008b6:	4770      	bx	lr
    switch (hdma->Init.FIFOThreshold)
 80008b8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80008ba:	2b03      	cmp	r3, #3
 80008bc:	d803      	bhi.n	80008c6 <DMA_CheckFifoParam+0x4e>
 80008be:	e8df f003 	tbb	[pc, r3]
 80008c2:	041c      	.short	0x041c
 80008c4:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 80008c6:	2000      	movs	r0, #0
 80008c8:	4770      	bx	lr
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80008ca:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80008cc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80008d0:	d115      	bne.n	80008fe <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 80008d2:	2000      	movs	r0, #0
 80008d4:	4770      	bx	lr
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80008d6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80008d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80008dc:	d011      	beq.n	8000902 <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 80008de:	2000      	movs	r0, #0
 80008e0:	4770      	bx	lr
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;

      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80008e2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80008e4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80008e8:	d001      	beq.n	80008ee <DMA_CheckFifoParam+0x76>
        {
          status = HAL_ERROR;
 80008ea:	2001      	movs	r0, #1
        break;
    }
  }

  return status;
}
 80008ec:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 80008ee:	2000      	movs	r0, #0
 80008f0:	4770      	bx	lr
          status = HAL_ERROR;
 80008f2:	2001      	movs	r0, #1
 80008f4:	4770      	bx	lr
          status = HAL_ERROR;
 80008f6:	2001      	movs	r0, #1
 80008f8:	4770      	bx	lr
        status = HAL_ERROR;
 80008fa:	2001      	movs	r0, #1
 80008fc:	4770      	bx	lr
          status = HAL_ERROR;
 80008fe:	2001      	movs	r0, #1
 8000900:	4770      	bx	lr
          status = HAL_ERROR;
 8000902:	2001      	movs	r0, #1
 8000904:	4770      	bx	lr
        status = HAL_ERROR;
 8000906:	2001      	movs	r0, #1
 8000908:	4770      	bx	lr
	...

0800090c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = 0U;
  uint32_t stream_baseaddress = (uint32_t)hdma->Instance;
 800090c:	6803      	ldr	r3, [r0, #0]

  if((stream_baseaddress <= ((uint32_t)BDMA_Channel7) ) && \
 800090e:	4a15      	ldr	r2, [pc, #84]	; (8000964 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8000910:	441a      	add	r2, r3
 8000912:	2a8c      	cmp	r2, #140	; 0x8c
 8000914:	d915      	bls.n	8000942 <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
    hdma->DMAmuxChannelStatusMask = 1U << stream_number;
  }
  else
  {
    /*DMA1/DMA2 Streams are connected to DMAMUX1 channels*/
    stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000916:	b2da      	uxtb	r2, r3
 8000918:	3a10      	subs	r2, #16
 800091a:	4913      	ldr	r1, [pc, #76]	; (8000968 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 800091c:	fba1 1202 	umull	r1, r2, r1, r2
 8000920:	0912      	lsrs	r2, r2, #4

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8000922:	4912      	ldr	r1, [pc, #72]	; (800096c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 8000924:	4419      	add	r1, r3
 8000926:	29a8      	cmp	r1, #168	; 0xa8
 8000928:	d800      	bhi.n	800092c <DMA_CalcDMAMUXChannelBaseAndMask+0x20>
     (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
 800092a:	3208      	adds	r2, #8
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800092c:	4b10      	ldr	r3, [pc, #64]	; (8000970 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>)
 800092e:	4413      	add	r3, r2
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	6603      	str	r3, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8000934:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8000936:	6643      	str	r3, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1U << stream_number;
 8000938:	2301      	movs	r3, #1
 800093a:	fa03 f202 	lsl.w	r2, r3, r2
 800093e:	6682      	str	r2, [r0, #104]	; 0x68
 8000940:	4770      	bx	lr
    stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000942:	b2db      	uxtb	r3, r3
 8000944:	3b08      	subs	r3, #8
 8000946:	4a0c      	ldr	r2, [pc, #48]	; (8000978 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8000948:	fba2 2303 	umull	r2, r3, r2, r3
 800094c:	091b      	lsrs	r3, r3, #4
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800094e:	4a0b      	ldr	r2, [pc, #44]	; (800097c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8000950:	441a      	add	r2, r3
 8000952:	0092      	lsls	r2, r2, #2
 8000954:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8000956:	4a0a      	ldr	r2, [pc, #40]	; (8000980 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8000958:	6642      	str	r2, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1U << stream_number;
 800095a:	2201      	movs	r2, #1
 800095c:	fa02 f303 	lsl.w	r3, r2, r3
 8000960:	6683      	str	r3, [r0, #104]	; 0x68
 8000962:	4770      	bx	lr
 8000964:	a7fdabf8 	.word	0xa7fdabf8
 8000968:	aaaaaaab 	.word	0xaaaaaaab
 800096c:	bffdfbf0 	.word	0xbffdfbf0
 8000970:	10008200 	.word	0x10008200
 8000974:	40020880 	.word	0x40020880
 8000978:	cccccccd 	.word	0xcccccccd
 800097c:	16009600 	.word	0x16009600
 8000980:	58025880 	.word	0x58025880

08000984 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000984:	b410      	push	{r4}
  uint32_t stream_baseaddress = (uint32_t)hdma->Instance;
 8000986:	6804      	ldr	r4, [r0, #0]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8000988:	7902      	ldrb	r2, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800098a:	1e53      	subs	r3, r2, #1
 800098c:	2b07      	cmp	r3, #7
 800098e:	d80d      	bhi.n	80009ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>
  {
    if((stream_baseaddress <= ((uint32_t)BDMA_Channel7) ) && \
 8000990:	490b      	ldr	r1, [pc, #44]	; (80009c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x3c>)
 8000992:	4421      	add	r1, r4
 8000994:	298c      	cmp	r1, #140	; 0x8c
 8000996:	d80c      	bhi.n	80009b2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x2e>
      (stream_baseaddress >= ((uint32_t)BDMA_Channel0)))
    {
      /*BDMA Channels are connected to DMAMUX2 request generator blocks*/
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8000998:	490a      	ldr	r1, [pc, #40]	; (80009c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800099a:	4411      	add	r1, r2
 800099c:	0089      	lsls	r1, r1, #2
 800099e:	66c1      	str	r1, [r0, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80009a0:	4a09      	ldr	r2, [pc, #36]	; (80009c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80009a2:	6702      	str	r2, [r0, #112]	; 0x70
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1U << (request - 1U);
 80009a4:	2201      	movs	r2, #1
 80009a6:	fa02 f303 	lsl.w	r3, r2, r3
 80009aa:	6743      	str	r3, [r0, #116]	; 0x74
  }
}
 80009ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80009b0:	4770      	bx	lr
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80009b2:	4906      	ldr	r1, [pc, #24]	; (80009cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80009b4:	4411      	add	r1, r2
 80009b6:	0089      	lsls	r1, r1, #2
 80009b8:	66c1      	str	r1, [r0, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80009ba:	4a05      	ldr	r2, [pc, #20]	; (80009d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4c>)
 80009bc:	6702      	str	r2, [r0, #112]	; 0x70
 80009be:	e7f1      	b.n	80009a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>
 80009c0:	a7fdabf8 	.word	0xa7fdabf8
 80009c4:	1600963f 	.word	0x1600963f
 80009c8:	58025940 	.word	0x58025940
 80009cc:	1000823f 	.word	0x1000823f
 80009d0:	40020940 	.word	0x40020940

080009d4 <HAL_DMA_Init>:
{
 80009d4:	b570      	push	{r4, r5, r6, lr}
 80009d6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80009d8:	f7ff fe48 	bl	800066c <HAL_GetTick>
  if(hdma == NULL)
 80009dc:	2c00      	cmp	r4, #0
 80009de:	f000 80c2 	beq.w	8000b66 <HAL_DMA_Init+0x192>
 80009e2:	4605      	mov	r5, r0
  if(IS_D2_DMA_INSTANCE(hdma) != RESET) /*DMA2/DMA1 stream , D2 domain*/
 80009e4:	6822      	ldr	r2, [r4, #0]
 80009e6:	4b61      	ldr	r3, [pc, #388]	; (8000b6c <HAL_DMA_Init+0x198>)
 80009e8:	4413      	add	r3, r2
 80009ea:	f5b3 6f95 	cmp.w	r3, #1192	; 0x4a8
 80009ee:	d855      	bhi.n	8000a9c <HAL_DMA_Init+0xc8>
    __HAL_UNLOCK(hdma);
 80009f0:	2300      	movs	r3, #0
 80009f2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 80009f6:	2302      	movs	r3, #2
 80009f8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80009fc:	6813      	ldr	r3, [r2, #0]
 80009fe:	f023 0301 	bic.w	r3, r3, #1
 8000a02:	6013      	str	r3, [r2, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != RESET)
 8000a04:	6823      	ldr	r3, [r4, #0]
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	f012 0f01 	tst.w	r2, #1
 8000a0c:	d00b      	beq.n	8000a26 <HAL_DMA_Init+0x52>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000a0e:	f7ff fe2d 	bl	800066c <HAL_GetTick>
 8000a12:	1b40      	subs	r0, r0, r5
 8000a14:	2805      	cmp	r0, #5
 8000a16:	d9f5      	bls.n	8000a04 <HAL_DMA_Init+0x30>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000a18:	2320      	movs	r3, #32
 8000a1a:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR;
 8000a22:	2001      	movs	r0, #1
 8000a24:	bd70      	pop	{r4, r5, r6, pc}
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8000a26:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000a28:	4951      	ldr	r1, [pc, #324]	; (8000b70 <HAL_DMA_Init+0x19c>)
 8000a2a:	4011      	ands	r1, r2
    registerValue |=  hdma->Init.Direction           |
 8000a2c:	68a2      	ldr	r2, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a2e:	68e0      	ldr	r0, [r4, #12]
    registerValue |=  hdma->Init.Direction           |
 8000a30:	4302      	orrs	r2, r0
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a32:	6920      	ldr	r0, [r4, #16]
 8000a34:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a36:	6960      	ldr	r0, [r4, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a38:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a3a:	69a0      	ldr	r0, [r4, #24]
 8000a3c:	4302      	orrs	r2, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 8000a3e:	69e0      	ldr	r0, [r4, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a40:	4302      	orrs	r2, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 8000a42:	6a20      	ldr	r0, [r4, #32]
 8000a44:	4302      	orrs	r2, r0
    registerValue |=  hdma->Init.Direction           |
 8000a46:	430a      	orrs	r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000a48:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000a4a:	2904      	cmp	r1, #4
 8000a4c:	d011      	beq.n	8000a72 <HAL_DMA_Init+0x9e>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8000a4e:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8000a50:	6826      	ldr	r6, [r4, #0]
 8000a52:	6975      	ldr	r5, [r6, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000a54:	f025 0507 	bic.w	r5, r5, #7
    registerValue |= hdma->Init.FIFOMode;
 8000a58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000a5a:	431d      	orrs	r5, r3
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000a5c:	2b04      	cmp	r3, #4
 8000a5e:	d00d      	beq.n	8000a7c <HAL_DMA_Init+0xa8>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8000a60:	6175      	str	r5, [r6, #20]
    regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000a62:	4620      	mov	r0, r4
 8000a64:	f7ff feec 	bl	8000840 <DMA_CalcBaseAndBitshift>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a68:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000a6a:	233f      	movs	r3, #63	; 0x3f
 8000a6c:	4093      	lsls	r3, r2
 8000a6e:	6083      	str	r3, [r0, #8]
 8000a70:	e046      	b.n	8000b00 <HAL_DMA_Init+0x12c>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000a72:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000a74:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000a76:	4301      	orrs	r1, r0
 8000a78:	430a      	orrs	r2, r1
 8000a7a:	e7e8      	b.n	8000a4e <HAL_DMA_Init+0x7a>
      registerValue |= hdma->Init.FIFOThreshold;
 8000a7c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000a7e:	431d      	orrs	r5, r3
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000a80:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d0ec      	beq.n	8000a60 <HAL_DMA_Init+0x8c>
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000a86:	4620      	mov	r0, r4
 8000a88:	f7ff fef6 	bl	8000878 <DMA_CheckFifoParam>
 8000a8c:	2800      	cmp	r0, #0
 8000a8e:	d0e7      	beq.n	8000a60 <HAL_DMA_Init+0x8c>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000a90:	2340      	movs	r3, #64	; 0x40
 8000a92:	6563      	str	r3, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8000a94:	2001      	movs	r0, #1
 8000a96:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
          return HAL_ERROR;
 8000a9a:	bd70      	pop	{r4, r5, r6, pc}
  else if(IS_D3_DMA_INSTANCE(hdma) != RESET) /*<BDMA channel , D3 domain*/
 8000a9c:	4b35      	ldr	r3, [pc, #212]	; (8000b74 <HAL_DMA_Init+0x1a0>)
 8000a9e:	4413      	add	r3, r2
 8000aa0:	2b8c      	cmp	r3, #140	; 0x8c
 8000aa2:	d84c      	bhi.n	8000b3e <HAL_DMA_Init+0x16a>
    __HAL_UNLOCK(hdma);
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8000ab0:	6813      	ldr	r3, [r2, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE  | BDMA_CCR_PSIZE  | \
 8000ab2:	4931      	ldr	r1, [pc, #196]	; (8000b78 <HAL_DMA_Init+0x1a4>)
 8000ab4:	4019      	ands	r1, r3
    registerValue |=  D2_TO_D3_DMA_DIRECTION(hdma->Init.Direction)            |
 8000ab6:	68a3      	ldr	r3, [r4, #8]
 8000ab8:	2b40      	cmp	r3, #64	; 0x40
 8000aba:	d03e      	beq.n	8000b3a <HAL_DMA_Init+0x166>
 8000abc:	2b80      	cmp	r3, #128	; 0x80
 8000abe:	d039      	beq.n	8000b34 <HAL_DMA_Init+0x160>
 8000ac0:	2300      	movs	r3, #0
                      D2_TO_D3_DMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8000ac2:	68e0      	ldr	r0, [r4, #12]
    registerValue |=  D2_TO_D3_DMA_DIRECTION(hdma->Init.Direction)            |
 8000ac4:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
                      D2_TO_D3_DMA_MEMORY_INC(hdma->Init.MemInc)              |
 8000ac8:	6920      	ldr	r0, [r4, #16]
                      D2_TO_D3_DMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8000aca:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
                      D2_TO_D3_DMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8000ace:	6960      	ldr	r0, [r4, #20]
                      D2_TO_D3_DMA_MEMORY_INC(hdma->Init.MemInc)              |
 8000ad0:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
                      D2_TO_D3_DMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8000ad4:	69a0      	ldr	r0, [r4, #24]
                      D2_TO_D3_DMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8000ad6:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
                      D2_TO_D3_DMA_MODE(hdma->Init.Mode)                      |
 8000ada:	69e0      	ldr	r0, [r4, #28]
 8000adc:	08c0      	lsrs	r0, r0, #3
 8000ade:	f000 0020 	and.w	r0, r0, #32
                      D2_TO_D3_DMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8000ae2:	4303      	orrs	r3, r0
                      D2_TO_D3_DMA_PRIORITY(hdma->Init.Priority);
 8000ae4:	6a20      	ldr	r0, [r4, #32]
                      D2_TO_D3_DMA_MODE(hdma->Init.Mode)                      |
 8000ae6:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    registerValue |=  D2_TO_D3_DMA_DIRECTION(hdma->Init.Direction)            |
 8000aea:	430b      	orrs	r3, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8000aec:	6013      	str	r3, [r2, #0]
    hdma->StreamIndex = (((uint32_t)hdma->Instance - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8000aee:	6822      	ldr	r2, [r4, #0]
 8000af0:	4b20      	ldr	r3, [pc, #128]	; (8000b74 <HAL_DMA_Init+0x1a0>)
 8000af2:	4413      	add	r3, r2
 8000af4:	4a21      	ldr	r2, [pc, #132]	; (8000b7c <HAL_DMA_Init+0x1a8>)
 8000af6:	fba2 2303 	umull	r2, r3, r2, r3
 8000afa:	091b      	lsrs	r3, r3, #4
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	65e3      	str	r3, [r4, #92]	; 0x5c
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000b00:	4620      	mov	r0, r4
 8000b02:	f7ff ff03 	bl	800090c <DMA_CalcDMAMUXChannelBaseAndMask>
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000b06:	68a3      	ldr	r3, [r4, #8]
 8000b08:	2b80      	cmp	r3, #128	; 0x80
 8000b0a:	d01f      	beq.n	8000b4c <HAL_DMA_Init+0x178>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000b0c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8000b0e:	7922      	ldrb	r2, [r4, #4]
 8000b10:	601a      	str	r2, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000b12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000b14:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8000b16:	605a      	str	r2, [r3, #4]
  if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8000b18:	6863      	ldr	r3, [r4, #4]
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	2b07      	cmp	r3, #7
 8000b1e:	d918      	bls.n	8000b52 <HAL_DMA_Init+0x17e>
    hdma->DMAmuxRequestGen = 0U;
 8000b20:	2300      	movs	r3, #0
 8000b22:	66e3      	str	r3, [r4, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8000b24:	6723      	str	r3, [r4, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000b26:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b28:	2000      	movs	r0, #0
 8000b2a:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000b32:	bd70      	pop	{r4, r5, r6, pc}
    registerValue |=  D2_TO_D3_DMA_DIRECTION(hdma->Init.Direction)            |
 8000b34:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b38:	e7c3      	b.n	8000ac2 <HAL_DMA_Init+0xee>
 8000b3a:	2310      	movs	r3, #16
 8000b3c:	e7c1      	b.n	8000ac2 <HAL_DMA_Init+0xee>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000b3e:	2340      	movs	r3, #64	; 0x40
 8000b40:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8000b42:	2303      	movs	r3, #3
 8000b44:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 8000b48:	2001      	movs	r0, #1
 8000b4a:	bd70      	pop	{r4, r5, r6, pc}
     hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	6063      	str	r3, [r4, #4]
 8000b50:	e7dc      	b.n	8000b0c <HAL_DMA_Init+0x138>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000b52:	4620      	mov	r0, r4
 8000b54:	f7ff ff16 	bl	8000984 <DMA_CalcDMAMUXRequestGenBaseAndMask>
     hdma->DMAmuxRequestGen->RGCR = 0U;
 8000b58:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000b5e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8000b60:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	e7e0      	b.n	8000b28 <HAL_DMA_Init+0x154>
    return HAL_ERROR;
 8000b66:	2001      	movs	r0, #1
}
 8000b68:	bd70      	pop	{r4, r5, r6, pc}
 8000b6a:	bf00      	nop
 8000b6c:	bffdfff0 	.word	0xbffdfff0
 8000b70:	fe10803f 	.word	0xfe10803f
 8000b74:	a7fdabf8 	.word	0xa7fdabf8
 8000b78:	ffff800f 	.word	0xffff800f
 8000b7c:	cccccccd 	.word	0xcccccccd

08000b80 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8000b80:	2800      	cmp	r0, #0
 8000b82:	d074      	beq.n	8000c6e <HAL_DMA_Start_IT+0xee>
{
 8000b84:	b538      	push	{r3, r4, r5, lr}
 8000b86:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8000b88:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8000b8c:	2801      	cmp	r0, #1
 8000b8e:	d070      	beq.n	8000c72 <HAL_DMA_Start_IT+0xf2>
 8000b90:	2001      	movs	r0, #1
 8000b92:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000b96:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 8000b9a:	b2c0      	uxtb	r0, r0
 8000b9c:	2801      	cmp	r0, #1
 8000b9e:	d007      	beq.n	8000bb0 <HAL_DMA_Start_IT+0x30>
    __HAL_UNLOCK(hdma);
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8000ba6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000baa:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 8000bac:	2001      	movs	r0, #1
 8000bae:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8000bb0:	2002      	movs	r0, #2
 8000bb2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	6560      	str	r0, [r4, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8000bba:	6820      	ldr	r0, [r4, #0]
 8000bbc:	4d2e      	ldr	r5, [pc, #184]	; (8000c78 <HAL_DMA_Start_IT+0xf8>)
 8000bbe:	4405      	add	r5, r0
 8000bc0:	f5b5 6f95 	cmp.w	r5, #1192	; 0x4a8
 8000bc4:	d839      	bhi.n	8000c3a <HAL_DMA_Start_IT+0xba>
 8000bc6:	6805      	ldr	r5, [r0, #0]
 8000bc8:	f025 0501 	bic.w	r5, r5, #1
 8000bcc:	6005      	str	r5, [r0, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000bce:	4620      	mov	r0, r4
 8000bd0:	f7ff fdec 	bl	80007ac <DMA_SetConfig>
    if(IS_D2_DMA_INSTANCE(hdma) != RESET) /* D2 Domain DMA : DMA1 or DMA2 */
 8000bd4:	6823      	ldr	r3, [r4, #0]
 8000bd6:	4a28      	ldr	r2, [pc, #160]	; (8000c78 <HAL_DMA_Start_IT+0xf8>)
 8000bd8:	441a      	add	r2, r3
 8000bda:	f5b2 6f95 	cmp.w	r2, #1192	; 0x4a8
 8000bde:	d831      	bhi.n	8000c44 <HAL_DMA_Start_IT+0xc4>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	f022 021e 	bic.w	r2, r2, #30
 8000be6:	f042 0216 	orr.w	r2, r2, #22
 8000bea:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8000bec:	6822      	ldr	r2, [r4, #0]
 8000bee:	6953      	ldr	r3, [r2, #20]
 8000bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bf4:	6153      	str	r3, [r2, #20]
      if(hdma->XferHalfCpltCallback != NULL)
 8000bf6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000bf8:	b123      	cbz	r3, 8000c04 <HAL_DMA_Start_IT+0x84>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8000bfa:	6822      	ldr	r2, [r4, #0]
 8000bfc:	6813      	ldr	r3, [r2, #0]
 8000bfe:	f043 0308 	orr.w	r3, r3, #8
 8000c02:	6013      	str	r3, [r2, #0]
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8000c04:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8000c0c:	d003      	beq.n	8000c16 <HAL_DMA_Start_IT+0x96>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000c14:	601a      	str	r2, [r3, #0]
    if(hdma->DMAmuxRequestGen != 0U)
 8000c16:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8000c18:	b11b      	cbz	r3, 8000c22 <HAL_DMA_Start_IT+0xa2>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000c20:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8000c22:	6823      	ldr	r3, [r4, #0]
 8000c24:	4a14      	ldr	r2, [pc, #80]	; (8000c78 <HAL_DMA_Start_IT+0xf8>)
 8000c26:	441a      	add	r2, r3
 8000c28:	f5b2 6f95 	cmp.w	r2, #1192	; 0x4a8
 8000c2c:	d819      	bhi.n	8000c62 <HAL_DMA_Start_IT+0xe2>
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	f042 0201 	orr.w	r2, r2, #1
 8000c34:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000c36:	2000      	movs	r0, #0
 8000c38:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_DISABLE(hdma);
 8000c3a:	6805      	ldr	r5, [r0, #0]
 8000c3c:	f025 0501 	bic.w	r5, r5, #1
 8000c40:	6005      	str	r5, [r0, #0]
 8000c42:	e7c4      	b.n	8000bce <HAL_DMA_Start_IT+0x4e>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	f022 020e 	bic.w	r2, r2, #14
 8000c4a:	f042 020a 	orr.w	r2, r2, #10
 8000c4e:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8000c50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d0d6      	beq.n	8000c04 <HAL_DMA_Start_IT+0x84>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8000c56:	6822      	ldr	r2, [r4, #0]
 8000c58:	6813      	ldr	r3, [r2, #0]
 8000c5a:	f043 0304 	orr.w	r3, r3, #4
 8000c5e:	6013      	str	r3, [r2, #0]
 8000c60:	e7d0      	b.n	8000c04 <HAL_DMA_Start_IT+0x84>
    __HAL_DMA_ENABLE(hdma);
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	f042 0201 	orr.w	r2, r2, #1
 8000c68:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000c6e:	2001      	movs	r0, #1
 8000c70:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8000c72:	2002      	movs	r0, #2
}
 8000c74:	bd38      	pop	{r3, r4, r5, pc}
 8000c76:	bf00      	nop
 8000c78:	bffdfff0 	.word	0xbffdfff0

08000c7c <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8000c7c:	2800      	cmp	r0, #0
 8000c7e:	d04e      	beq.n	8000d1e <HAL_DMA_Abort_IT+0xa2>
{
 8000c80:	b508      	push	{r3, lr}
 8000c82:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c84:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8000c88:	b2d2      	uxtb	r2, r2
 8000c8a:	2a02      	cmp	r2, #2
 8000c8c:	d003      	beq.n	8000c96 <HAL_DMA_Abort_IT+0x1a>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c8e:	2280      	movs	r2, #128	; 0x80
 8000c90:	6542      	str	r2, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000c92:	2001      	movs	r0, #1
 8000c94:	bd08      	pop	{r3, pc}
    if(IS_D2_DMA_INSTANCE(hdma) != RESET) /* D2 Domain DMA : DMA1 or DMA2*/
 8000c96:	6802      	ldr	r2, [r0, #0]
 8000c98:	4923      	ldr	r1, [pc, #140]	; (8000d28 <HAL_DMA_Abort_IT+0xac>)
 8000c9a:	4411      	add	r1, r2
 8000c9c:	f5b1 6f95 	cmp.w	r1, #1192	; 0x4a8
 8000ca0:	d92f      	bls.n	8000d02 <HAL_DMA_Abort_IT+0x86>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8000ca2:	6811      	ldr	r1, [r2, #0]
 8000ca4:	f021 010e 	bic.w	r1, r1, #14
 8000ca8:	6011      	str	r1, [r2, #0]
      __HAL_DMA_DISABLE(hdma);
 8000caa:	6801      	ldr	r1, [r0, #0]
 8000cac:	4a1e      	ldr	r2, [pc, #120]	; (8000d28 <HAL_DMA_Abort_IT+0xac>)
 8000cae:	440a      	add	r2, r1
 8000cb0:	f5b2 6f95 	cmp.w	r2, #1192	; 0x4a8
 8000cb4:	d82e      	bhi.n	8000d14 <HAL_DMA_Abort_IT+0x98>
 8000cb6:	680a      	ldr	r2, [r1, #0]
 8000cb8:	f022 0201 	bic.w	r2, r2, #1
 8000cbc:	600a      	str	r2, [r1, #0]
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000cbe:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8000cc0:	680a      	ldr	r2, [r1, #0]
 8000cc2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000cc6:	600a      	str	r2, [r1, #0]
      BDMA->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex));
 8000cc8:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8000cca:	2201      	movs	r2, #1
 8000ccc:	408a      	lsls	r2, r1
 8000cce:	4917      	ldr	r1, [pc, #92]	; (8000d2c <HAL_DMA_Abort_IT+0xb0>)
 8000cd0:	604a      	str	r2, [r1, #4]
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000cd2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000cd4:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8000cd6:	6051      	str	r1, [r2, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8000cd8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000cda:	b132      	cbz	r2, 8000cea <HAL_DMA_Abort_IT+0x6e>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000cdc:	6811      	ldr	r1, [r2, #0]
 8000cde:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8000ce2:	6011      	str	r1, [r2, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000ce4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000ce6:	6f59      	ldr	r1, [r3, #116]	; 0x74
 8000ce8:	6051      	str	r1, [r2, #4]
      __HAL_UNLOCK(hdma);
 8000cea:	2200      	movs	r2, #0
 8000cec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 8000cf6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000cf8:	b19a      	cbz	r2, 8000d22 <HAL_DMA_Abort_IT+0xa6>
 8000cfa:	4618      	mov	r0, r3
        hdma->XferAbortCallback(hdma);
 8000cfc:	4790      	blx	r2
  return HAL_OK;
 8000cfe:	2000      	movs	r0, #0
 8000d00:	bd08      	pop	{r3, pc}
      hdma->State = HAL_DMA_STATE_ABORT;
 8000d02:	2104      	movs	r1, #4
 8000d04:	f880 1035 	strb.w	r1, [r0, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8000d08:	6813      	ldr	r3, [r2, #0]
 8000d0a:	f023 0301 	bic.w	r3, r3, #1
 8000d0e:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8000d10:	2000      	movs	r0, #0
 8000d12:	bd08      	pop	{r3, pc}
      __HAL_DMA_DISABLE(hdma);
 8000d14:	680a      	ldr	r2, [r1, #0]
 8000d16:	f022 0201 	bic.w	r2, r2, #1
 8000d1a:	600a      	str	r2, [r1, #0]
 8000d1c:	e7cf      	b.n	8000cbe <HAL_DMA_Abort_IT+0x42>
    return HAL_ERROR;
 8000d1e:	2001      	movs	r0, #1
 8000d20:	4770      	bx	lr
  return HAL_OK;
 8000d22:	2000      	movs	r0, #0
}
 8000d24:	bd08      	pop	{r3, pc}
 8000d26:	bf00      	nop
 8000d28:	bffdfff0 	.word	0xbffdfff0
 8000d2c:	58025400 	.word	0x58025400

08000d30 <HAL_DMA_IRQHandler>:
{
 8000d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d32:	b083      	sub	sp, #12
 8000d34:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8000d36:	2300      	movs	r3, #0
 8000d38:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000d3a:	4b90      	ldr	r3, [pc, #576]	; (8000f7c <HAL_DMA_IRQHandler+0x24c>)
 8000d3c:	681d      	ldr	r5, [r3, #0]
 8000d3e:	4b90      	ldr	r3, [pc, #576]	; (8000f80 <HAL_DMA_IRQHandler+0x250>)
 8000d40:	fba3 3505 	umull	r3, r5, r3, r5
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d44:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8000d46:	683e      	ldr	r6, [r7, #0]
  if(IS_D2_DMA_INSTANCE(hdma) != RESET)  /*D2 domain DMA : DMA1 or DMA2*/
 8000d48:	6802      	ldr	r2, [r0, #0]
 8000d4a:	4b8e      	ldr	r3, [pc, #568]	; (8000f84 <HAL_DMA_IRQHandler+0x254>)
 8000d4c:	4413      	add	r3, r2
 8000d4e:	f5b3 6f95 	cmp.w	r3, #1192	; 0x4a8
 8000d52:	f200 811d 	bhi.w	8000f90 <HAL_DMA_IRQHandler+0x260>
 8000d56:	0aad      	lsrs	r5, r5, #10
    if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000d58:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8000d5a:	2308      	movs	r3, #8
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	421e      	tst	r6, r3
 8000d60:	d00f      	beq.n	8000d82 <HAL_DMA_IRQHandler+0x52>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000d62:	6813      	ldr	r3, [r2, #0]
 8000d64:	f013 0f04 	tst.w	r3, #4
 8000d68:	d00b      	beq.n	8000d82 <HAL_DMA_IRQHandler+0x52>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8000d6a:	6813      	ldr	r3, [r2, #0]
 8000d6c:	f023 0304 	bic.w	r3, r3, #4
 8000d70:	6013      	str	r3, [r2, #0]
        regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000d72:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8000d74:	2308      	movs	r3, #8
 8000d76:	4093      	lsls	r3, r2
 8000d78:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000d7a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6543      	str	r3, [r0, #84]	; 0x54
    if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000d82:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000d84:	4b80      	ldr	r3, [pc, #512]	; (8000f88 <HAL_DMA_IRQHandler+0x258>)
 8000d86:	4093      	lsls	r3, r2
 8000d88:	421e      	tst	r6, r3
 8000d8a:	d00e      	beq.n	8000daa <HAL_DMA_IRQHandler+0x7a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000d8c:	6821      	ldr	r1, [r4, #0]
 8000d8e:	4a7d      	ldr	r2, [pc, #500]	; (8000f84 <HAL_DMA_IRQHandler+0x254>)
 8000d90:	440a      	add	r2, r1
 8000d92:	f5b2 6f95 	cmp.w	r2, #1192	; 0x4a8
 8000d96:	d83a      	bhi.n	8000e0e <HAL_DMA_IRQHandler+0xde>
 8000d98:	694a      	ldr	r2, [r1, #20]
 8000d9a:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8000d9e:	b122      	cbz	r2, 8000daa <HAL_DMA_IRQHandler+0x7a>
        regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000da0:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000da2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000da4:	f043 0302 	orr.w	r3, r3, #2
 8000da8:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000daa:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000dac:	4b77      	ldr	r3, [pc, #476]	; (8000f8c <HAL_DMA_IRQHandler+0x25c>)
 8000dae:	4093      	lsls	r3, r2
 8000db0:	421e      	tst	r6, r3
 8000db2:	d00e      	beq.n	8000dd2 <HAL_DMA_IRQHandler+0xa2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000db4:	6821      	ldr	r1, [r4, #0]
 8000db6:	4a73      	ldr	r2, [pc, #460]	; (8000f84 <HAL_DMA_IRQHandler+0x254>)
 8000db8:	440a      	add	r2, r1
 8000dba:	f5b2 6f95 	cmp.w	r2, #1192	; 0x4a8
 8000dbe:	d829      	bhi.n	8000e14 <HAL_DMA_IRQHandler+0xe4>
 8000dc0:	680a      	ldr	r2, [r1, #0]
 8000dc2:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8000dc6:	b122      	cbz	r2, 8000dd2 <HAL_DMA_IRQHandler+0xa2>
        regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000dc8:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000dca:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000dcc:	f043 0304 	orr.w	r3, r3, #4
 8000dd0:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000dd2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000dd4:	2310      	movs	r3, #16
 8000dd6:	4093      	lsls	r3, r2
 8000dd8:	421e      	tst	r6, r3
 8000dda:	d033      	beq.n	8000e44 <HAL_DMA_IRQHandler+0x114>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000ddc:	6821      	ldr	r1, [r4, #0]
 8000dde:	4a69      	ldr	r2, [pc, #420]	; (8000f84 <HAL_DMA_IRQHandler+0x254>)
 8000de0:	440a      	add	r2, r1
 8000de2:	f5b2 6f95 	cmp.w	r2, #1192	; 0x4a8
 8000de6:	d818      	bhi.n	8000e1a <HAL_DMA_IRQHandler+0xea>
 8000de8:	680a      	ldr	r2, [r1, #0]
 8000dea:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8000dee:	b34a      	cbz	r2, 8000e44 <HAL_DMA_IRQHandler+0x114>
        regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000df0:	60bb      	str	r3, [r7, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000df2:	6823      	ldr	r3, [r4, #0]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8000dfa:	d017      	beq.n	8000e2c <HAL_DMA_IRQHandler+0xfc>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == RESET)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8000e02:	d10e      	bne.n	8000e22 <HAL_DMA_IRQHandler+0xf2>
            if(hdma->XferHalfCpltCallback != NULL)
 8000e04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e06:	b1eb      	cbz	r3, 8000e44 <HAL_DMA_IRQHandler+0x114>
              hdma->XferHalfCpltCallback(hdma);
 8000e08:	4620      	mov	r0, r4
 8000e0a:	4798      	blx	r3
 8000e0c:	e01a      	b.n	8000e44 <HAL_DMA_IRQHandler+0x114>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000e0e:	680a      	ldr	r2, [r1, #0]
 8000e10:	2200      	movs	r2, #0
 8000e12:	e7c4      	b.n	8000d9e <HAL_DMA_IRQHandler+0x6e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000e14:	680a      	ldr	r2, [r1, #0]
 8000e16:	2200      	movs	r2, #0
 8000e18:	e7d5      	b.n	8000dc6 <HAL_DMA_IRQHandler+0x96>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000e1a:	680a      	ldr	r2, [r1, #0]
 8000e1c:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8000e20:	e7e5      	b.n	8000dee <HAL_DMA_IRQHandler+0xbe>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8000e22:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000e24:	b173      	cbz	r3, 8000e44 <HAL_DMA_IRQHandler+0x114>
              hdma->XferM1HalfCpltCallback(hdma);
 8000e26:	4620      	mov	r0, r4
 8000e28:	4798      	blx	r3
 8000e2a:	e00b      	b.n	8000e44 <HAL_DMA_IRQHandler+0x114>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == RESET)
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8000e32:	d103      	bne.n	8000e3c <HAL_DMA_IRQHandler+0x10c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	f022 0208 	bic.w	r2, r2, #8
 8000e3a:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 8000e3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e3e:	b10b      	cbz	r3, 8000e44 <HAL_DMA_IRQHandler+0x114>
            hdma->XferHalfCpltCallback(hdma);
 8000e40:	4620      	mov	r0, r4
 8000e42:	4798      	blx	r3
    if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000e44:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000e46:	2320      	movs	r3, #32
 8000e48:	4093      	lsls	r3, r2
 8000e4a:	421e      	tst	r6, r3
 8000e4c:	d05f      	beq.n	8000f0e <HAL_DMA_IRQHandler+0x1de>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000e4e:	6821      	ldr	r1, [r4, #0]
 8000e50:	4a4c      	ldr	r2, [pc, #304]	; (8000f84 <HAL_DMA_IRQHandler+0x254>)
 8000e52:	440a      	add	r2, r1
 8000e54:	f5b2 6f95 	cmp.w	r2, #1192	; 0x4a8
 8000e58:	d819      	bhi.n	8000e8e <HAL_DMA_IRQHandler+0x15e>
 8000e5a:	680a      	ldr	r2, [r1, #0]
 8000e5c:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8000e60:	2a00      	cmp	r2, #0
 8000e62:	d054      	beq.n	8000f0e <HAL_DMA_IRQHandler+0x1de>
        regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000e64:	60bb      	str	r3, [r7, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8000e66:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	2b04      	cmp	r3, #4
 8000e6e:	d012      	beq.n	8000e96 <HAL_DMA_IRQHandler+0x166>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000e70:	6823      	ldr	r3, [r4, #0]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8000e78:	d037      	beq.n	8000eea <HAL_DMA_IRQHandler+0x1ba>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == RESET)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8000e80:	d12e      	bne.n	8000ee0 <HAL_DMA_IRQHandler+0x1b0>
            if(hdma->XferM1CpltCallback != NULL)
 8000e82:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d042      	beq.n	8000f0e <HAL_DMA_IRQHandler+0x1de>
              hdma->XferM1CpltCallback(hdma);
 8000e88:	4620      	mov	r0, r4
 8000e8a:	4798      	blx	r3
 8000e8c:	e03f      	b.n	8000f0e <HAL_DMA_IRQHandler+0x1de>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000e8e:	680a      	ldr	r2, [r1, #0]
 8000e90:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8000e94:	e7e4      	b.n	8000e60 <HAL_DMA_IRQHandler+0x130>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e96:	6822      	ldr	r2, [r4, #0]
 8000e98:	6813      	ldr	r3, [r2, #0]
 8000e9a:	f023 0316 	bic.w	r3, r3, #22
 8000e9e:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8000ea0:	6822      	ldr	r2, [r4, #0]
 8000ea2:	6953      	ldr	r3, [r2, #20]
 8000ea4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000ea8:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000eaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000eac:	b1a3      	cbz	r3, 8000ed8 <HAL_DMA_IRQHandler+0x1a8>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8000eae:	6822      	ldr	r2, [r4, #0]
 8000eb0:	6813      	ldr	r3, [r2, #0]
 8000eb2:	f023 0308 	bic.w	r3, r3, #8
 8000eb6:	6013      	str	r3, [r2, #0]
          regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000eb8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000eba:	233f      	movs	r3, #63	; 0x3f
 8000ebc:	4093      	lsls	r3, r2
 8000ebe:	60bb      	str	r3, [r7, #8]
          __HAL_UNLOCK(hdma);
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 8000ecc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d049      	beq.n	8000f66 <HAL_DMA_IRQHandler+0x236>
            hdma->XferAbortCallback(hdma);
 8000ed2:	4620      	mov	r0, r4
 8000ed4:	4798      	blx	r3
 8000ed6:	e046      	b.n	8000f66 <HAL_DMA_IRQHandler+0x236>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000ed8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d1e7      	bne.n	8000eae <HAL_DMA_IRQHandler+0x17e>
 8000ede:	e7eb      	b.n	8000eb8 <HAL_DMA_IRQHandler+0x188>
            if(hdma->XferCpltCallback != NULL)
 8000ee0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000ee2:	b1a3      	cbz	r3, 8000f0e <HAL_DMA_IRQHandler+0x1de>
              hdma->XferCpltCallback(hdma);
 8000ee4:	4620      	mov	r0, r4
 8000ee6:	4798      	blx	r3
 8000ee8:	e011      	b.n	8000f0e <HAL_DMA_IRQHandler+0x1de>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == RESET)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	f412 7f80 	tst.w	r2, #256	; 0x100
 8000ef0:	d109      	bne.n	8000f06 <HAL_DMA_IRQHandler+0x1d6>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	f022 0210 	bic.w	r2, r2, #16
 8000ef8:	601a      	str	r2, [r3, #0]
            __HAL_UNLOCK(hdma);
 8000efa:	2300      	movs	r3, #0
 8000efc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8000f00:	2301      	movs	r3, #1
 8000f02:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          if(hdma->XferCpltCallback != NULL)
 8000f06:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000f08:	b10b      	cbz	r3, 8000f0e <HAL_DMA_IRQHandler+0x1de>
            hdma->XferCpltCallback(hdma);
 8000f0a:	4620      	mov	r0, r4
 8000f0c:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000f0e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000f10:	b34b      	cbz	r3, 8000f66 <HAL_DMA_IRQHandler+0x236>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000f12:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000f14:	f013 0f01 	tst.w	r3, #1
 8000f18:	d021      	beq.n	8000f5e <HAL_DMA_IRQHandler+0x22e>
        hdma->State = HAL_DMA_STATE_ABORT;
 8000f1a:	2304      	movs	r3, #4
 8000f1c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8000f20:	6823      	ldr	r3, [r4, #0]
 8000f22:	4a18      	ldr	r2, [pc, #96]	; (8000f84 <HAL_DMA_IRQHandler+0x254>)
 8000f24:	441a      	add	r2, r3
 8000f26:	f5b2 6f95 	cmp.w	r2, #1192	; 0x4a8
 8000f2a:	d81e      	bhi.n	8000f6a <HAL_DMA_IRQHandler+0x23a>
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	f022 0201 	bic.w	r2, r2, #1
 8000f32:	601a      	str	r2, [r3, #0]
          if (++count > timeout)
 8000f34:	9b01      	ldr	r3, [sp, #4]
 8000f36:	3301      	adds	r3, #1
 8000f38:	9301      	str	r3, [sp, #4]
 8000f3a:	429d      	cmp	r5, r3
 8000f3c:	d304      	bcc.n	8000f48 <HAL_DMA_IRQHandler+0x218>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != RESET);
 8000f3e:	6823      	ldr	r3, [r4, #0]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f013 0f01 	tst.w	r3, #1
 8000f46:	d1f5      	bne.n	8000f34 <HAL_DMA_IRQHandler+0x204>
        __HAL_UNLOCK(hdma);
 8000f48:	2300      	movs	r3, #0
 8000f4a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != RESET)
 8000f4e:	6823      	ldr	r3, [r4, #0]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f013 0f01 	tst.w	r3, #1
 8000f56:	d00d      	beq.n	8000f74 <HAL_DMA_IRQHandler+0x244>
          hdma->State = HAL_DMA_STATE_ERROR;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      if(hdma->XferErrorCallback != NULL)
 8000f5e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000f60:	b10b      	cbz	r3, 8000f66 <HAL_DMA_IRQHandler+0x236>
        hdma->XferErrorCallback(hdma);
 8000f62:	4620      	mov	r0, r4
 8000f64:	4798      	blx	r3
}
 8000f66:	b003      	add	sp, #12
 8000f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_DMA_DISABLE(hdma);
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	f022 0201 	bic.w	r2, r2, #1
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	e7df      	b.n	8000f34 <HAL_DMA_IRQHandler+0x204>
          hdma->State = HAL_DMA_STATE_READY;
 8000f74:	2301      	movs	r3, #1
 8000f76:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 8000f7a:	e7f0      	b.n	8000f5e <HAL_DMA_IRQHandler+0x22e>
 8000f7c:	20000010 	.word	0x20000010
 8000f80:	1b4e81b5 	.word	0x1b4e81b5
 8000f84:	bffdfff0 	.word	0xbffdfff0
 8000f88:	00800001 	.word	0x00800001
 8000f8c:	00800004 	.word	0x00800004
  else if(IS_D3_DMA_INSTANCE(hdma) != RESET)  /*D3 domain BDMA */
 8000f90:	4b35      	ldr	r3, [pc, #212]	; (8001068 <HAL_DMA_IRQHandler+0x338>)
 8000f92:	4413      	add	r3, r2
 8000f94:	2b8c      	cmp	r3, #140	; 0x8c
 8000f96:	d8e6      	bhi.n	8000f66 <HAL_DMA_IRQHandler+0x236>
    if ((RESET != (BDMA->ISR & (BDMA_FLAG_HT0 << hdma->StreamIndex))) && (RESET != ((*ccr_reg) & BDMA_CCR_HTIE)))
 8000f98:	4b34      	ldr	r3, [pc, #208]	; (800106c <HAL_DMA_IRQHandler+0x33c>)
 8000f9a:	6818      	ldr	r0, [r3, #0]
 8000f9c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000f9e:	2304      	movs	r3, #4
 8000fa0:	408b      	lsls	r3, r1
 8000fa2:	4218      	tst	r0, r3
 8000fa4:	d018      	beq.n	8000fd8 <HAL_DMA_IRQHandler+0x2a8>
 8000fa6:	6813      	ldr	r3, [r2, #0]
 8000fa8:	f013 0f04 	tst.w	r3, #4
 8000fac:	d014      	beq.n	8000fd8 <HAL_DMA_IRQHandler+0x2a8>
        if(((*ccr_reg) & BDMA_CCR_CIRC) == 0U)
 8000fae:	6813      	ldr	r3, [r2, #0]
 8000fb0:	f013 0f20 	tst.w	r3, #32
 8000fb4:	d103      	bne.n	8000fbe <HAL_DMA_IRQHandler+0x28e>
          (*ccr_reg) &= ~BDMA_CCR_HTIE;
 8000fb6:	6813      	ldr	r3, [r2, #0]
 8000fb8:	f023 0304 	bic.w	r3, r3, #4
 8000fbc:	6013      	str	r3, [r2, #0]
        BDMA->IFCR  |= (BDMA_ISR_HTIF0 << hdma->StreamIndex);
 8000fbe:	492b      	ldr	r1, [pc, #172]	; (800106c <HAL_DMA_IRQHandler+0x33c>)
 8000fc0:	684b      	ldr	r3, [r1, #4]
 8000fc2:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8000fc4:	2204      	movs	r2, #4
 8000fc6:	4082      	lsls	r2, r0
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	604b      	str	r3, [r1, #4]
       if(hdma->XferHalfCpltCallback != NULL)
 8000fcc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d0c9      	beq.n	8000f66 <HAL_DMA_IRQHandler+0x236>
          hdma->XferHalfCpltCallback(hdma);
 8000fd2:	4620      	mov	r0, r4
 8000fd4:	4798      	blx	r3
 8000fd6:	e7c6      	b.n	8000f66 <HAL_DMA_IRQHandler+0x236>
    else if ((RESET != (BDMA->ISR & (BDMA_FLAG_TC0 << hdma->StreamIndex))) && (RESET != ((*ccr_reg) & BDMA_CCR_TCIE)))
 8000fd8:	4b24      	ldr	r3, [pc, #144]	; (800106c <HAL_DMA_IRQHandler+0x33c>)
 8000fda:	6818      	ldr	r0, [r3, #0]
 8000fdc:	2302      	movs	r3, #2
 8000fde:	408b      	lsls	r3, r1
 8000fe0:	4218      	tst	r0, r3
 8000fe2:	d01e      	beq.n	8001022 <HAL_DMA_IRQHandler+0x2f2>
 8000fe4:	6813      	ldr	r3, [r2, #0]
 8000fe6:	f013 0f02 	tst.w	r3, #2
 8000fea:	d01a      	beq.n	8001022 <HAL_DMA_IRQHandler+0x2f2>
      if(((*ccr_reg) & BDMA_CCR_CIRC) == 0U)
 8000fec:	6813      	ldr	r3, [r2, #0]
 8000fee:	f013 0f20 	tst.w	r3, #32
 8000ff2:	d109      	bne.n	8001008 <HAL_DMA_IRQHandler+0x2d8>
        (*ccr_reg) &= ~(BDMA_CCR_TEIE | BDMA_CCR_TCIE);
 8000ff4:	6813      	ldr	r3, [r2, #0]
 8000ff6:	f023 030a 	bic.w	r3, r3, #10
 8000ffa:	6013      	str	r3, [r2, #0]
      __HAL_UNLOCK(hdma);
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8001002:	2301      	movs	r3, #1
 8001004:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      BDMA->IFCR |= (BDMA_ISR_TCIF0 << hdma->StreamIndex);
 8001008:	4918      	ldr	r1, [pc, #96]	; (800106c <HAL_DMA_IRQHandler+0x33c>)
 800100a:	684b      	ldr	r3, [r1, #4]
 800100c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800100e:	2202      	movs	r2, #2
 8001010:	4082      	lsls	r2, r0
 8001012:	4313      	orrs	r3, r2
 8001014:	604b      	str	r3, [r1, #4]
      if(hdma->XferCpltCallback != NULL)
 8001016:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001018:	2b00      	cmp	r3, #0
 800101a:	d0a4      	beq.n	8000f66 <HAL_DMA_IRQHandler+0x236>
        hdma->XferCpltCallback(hdma);
 800101c:	4620      	mov	r0, r4
 800101e:	4798      	blx	r3
 8001020:	e7a1      	b.n	8000f66 <HAL_DMA_IRQHandler+0x236>
    else if (( RESET != (BDMA->ISR & (BDMA_FLAG_TE0 << hdma->StreamIndex))) && (RESET != ((*ccr_reg) & BDMA_CCR_TEIE)))
 8001022:	4b12      	ldr	r3, [pc, #72]	; (800106c <HAL_DMA_IRQHandler+0x33c>)
 8001024:	6818      	ldr	r0, [r3, #0]
 8001026:	2308      	movs	r3, #8
 8001028:	fa03 f101 	lsl.w	r1, r3, r1
 800102c:	4208      	tst	r0, r1
 800102e:	d09a      	beq.n	8000f66 <HAL_DMA_IRQHandler+0x236>
 8001030:	6813      	ldr	r3, [r2, #0]
 8001032:	f013 0f08 	tst.w	r3, #8
 8001036:	d096      	beq.n	8000f66 <HAL_DMA_IRQHandler+0x236>
      (*ccr_reg) &= ~(BDMA_CCR_TEIE | BDMA_CCR_TCIE | BDMA_CCR_HTIE);
 8001038:	6813      	ldr	r3, [r2, #0]
 800103a:	f023 030e 	bic.w	r3, r3, #14
 800103e:	6013      	str	r3, [r2, #0]
      BDMA->IFCR  |= (BDMA_ISR_GIF0 << hdma->StreamIndex);
 8001040:	480a      	ldr	r0, [pc, #40]	; (800106c <HAL_DMA_IRQHandler+0x33c>)
 8001042:	6842      	ldr	r2, [r0, #4]
 8001044:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001046:	2301      	movs	r3, #1
 8001048:	fa03 f101 	lsl.w	r1, r3, r1
 800104c:	430a      	orrs	r2, r1
 800104e:	6042      	str	r2, [r0, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001050:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8001052:	2200      	movs	r2, #0
 8001054:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8001058:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 800105c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800105e:	2b00      	cmp	r3, #0
 8001060:	d081      	beq.n	8000f66 <HAL_DMA_IRQHandler+0x236>
        hdma->XferErrorCallback(hdma);
 8001062:	4620      	mov	r0, r4
 8001064:	4798      	blx	r3
 8001066:	e77e      	b.n	8000f66 <HAL_DMA_IRQHandler+0x236>
 8001068:	a7fdabf8 	.word	0xa7fdabf8
 800106c:	58025400 	.word	0x58025400

08001070 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8001070:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8001072:	4770      	bx	lr

08001074 <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001074:	b430      	push	{r4, r5}
  uint32_t macregval;
  
  /*------------------------ MACCR Configuration --------------------*/  
  macregval =(macconf->InterPacketGapVal |
 8001076:	688b      	ldr	r3, [r1, #8]
              macconf->SourceAddrControl |
 8001078:	680a      	ldr	r2, [r1, #0]
  macregval =(macconf->InterPacketGapVal |
 800107a:	4313      	orrs	r3, r2
                (uint32_t)(macconf->ChecksumOffload << 27) |  
 800107c:	790a      	ldrb	r2, [r1, #4]
              macconf->SourceAddrControl |
 800107e:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
                  (uint32_t)(macconf->GiantPacketSizeLimitControl << 23) |
 8001082:	7b0a      	ldrb	r2, [r1, #12]
                (uint32_t)(macconf->ChecksumOffload << 27) |  
 8001084:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
                    (uint32_t)(macconf->Support2KPacket << 22) |
 8001088:	7b4a      	ldrb	r2, [r1, #13]
                  (uint32_t)(macconf->GiantPacketSizeLimitControl << 23) |
 800108a:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                      (uint32_t)(macconf->CRCStripTypePacket << 21) |
 800108e:	7b8a      	ldrb	r2, [r1, #14]
                    (uint32_t)(macconf->Support2KPacket << 22) |
 8001090:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
                        (uint32_t)(macconf->AutomaticPadCRCStrip << 20) | 
 8001094:	7bca      	ldrb	r2, [r1, #15]
                      (uint32_t)(macconf->CRCStripTypePacket << 21) |
 8001096:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
                          (uint32_t)(!macconf->Watchdog << 19) | 
 800109a:	7c0a      	ldrb	r2, [r1, #16]
 800109c:	2a00      	cmp	r2, #0
 800109e:	f040 80b0 	bne.w	8001202 <ETH_SetMACConfig+0x18e>
 80010a2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
                        (uint32_t)(macconf->AutomaticPadCRCStrip << 20) | 
 80010a6:	431a      	orrs	r2, r3
                            (uint32_t)(!macconf->Jabber << 17) | 
 80010a8:	7c4b      	ldrb	r3, [r1, #17]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	f040 80ab 	bne.w	8001206 <ETH_SetMACConfig+0x192>
 80010b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
                          (uint32_t)(!macconf->Watchdog << 19) | 
 80010b4:	4313      	orrs	r3, r2
                              (uint32_t)(macconf->JumboPacket << 16) |
 80010b6:	7c8a      	ldrb	r2, [r1, #18]
                            (uint32_t)(!macconf->Jabber << 17) | 
 80010b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                                macconf->Speed |
 80010bc:	694a      	ldr	r2, [r1, #20]
                              (uint32_t)(macconf->JumboPacket << 16) |
 80010be:	4313      	orrs	r3, r2
                                  macconf->DuplexMode | 
 80010c0:	698a      	ldr	r2, [r1, #24]
                                macconf->Speed |
 80010c2:	4313      	orrs	r3, r2
                                    (uint32_t)(macconf->LoopbackMode << 12) |
 80010c4:	7f0a      	ldrb	r2, [r1, #28]
                                  macconf->DuplexMode | 
 80010c6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
                                      (uint32_t)(macconf->CarrierSenseBeforeTransmit << 11)|
 80010ca:	7f4a      	ldrb	r2, [r1, #29]
                                    (uint32_t)(macconf->LoopbackMode << 12) |
 80010cc:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
                                        (uint32_t)(!macconf->ReceiveOwn << 10)|
 80010d0:	7f8a      	ldrb	r2, [r1, #30]
 80010d2:	2a00      	cmp	r2, #0
 80010d4:	f040 8099 	bne.w	800120a <ETH_SetMACConfig+0x196>
 80010d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
                                      (uint32_t)(macconf->CarrierSenseBeforeTransmit << 11)|
 80010dc:	4313      	orrs	r3, r2
                                          (uint32_t)(macconf->CarrierSenseDuringTransmit << 9)|
 80010de:	7fca      	ldrb	r2, [r1, #31]
                                        (uint32_t)(!macconf->ReceiveOwn << 10)|
 80010e0:	ea43 2242 	orr.w	r2, r3, r2, lsl #9
                                            (uint32_t)(!macconf->RetryTransmission << 8)| 
 80010e4:	f891 3020 	ldrb.w	r3, [r1, #32]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	f040 8090 	bne.w	800120e <ETH_SetMACConfig+0x19a>
 80010ee:	f44f 7380 	mov.w	r3, #256	; 0x100
                                          (uint32_t)(macconf->CarrierSenseDuringTransmit << 9)|
 80010f2:	4313      	orrs	r3, r2
                                              macconf->BackOffLimit | 
 80010f4:	6a4a      	ldr	r2, [r1, #36]	; 0x24
                                            (uint32_t)(!macconf->RetryTransmission << 8)| 
 80010f6:	4313      	orrs	r3, r2
                                                (uint32_t)(macconf->DeferralCheck << 4)|
 80010f8:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
                                              macconf->BackOffLimit | 
 80010fc:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
                                                  macconf->PreambleLength);
 8001100:	6aca      	ldr	r2, [r1, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8001102:	4313      	orrs	r3, r2
  
  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001104:	6804      	ldr	r4, [r0, #0]
 8001106:	6822      	ldr	r2, [r4, #0]
 8001108:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800110c:	f422 027b 	bic.w	r2, r2, #16449536	; 0xfb0000
 8001110:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001114:	f022 027c 	bic.w	r2, r2, #124	; 0x7c
 8001118:	4313      	orrs	r3, r2
 800111a:	6023      	str	r3, [r4, #0]
  
  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800111c:	6bca      	ldr	r2, [r1, #60]	; 0x3c
               (uint32_t)(macconf->ExtendedInterPacketGap << 24)|
 800111e:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 8001122:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001124:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
                 (uint32_t)(macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001128:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
               (uint32_t)(macconf->ExtendedInterPacketGap << 24)|
 800112c:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
                   (uint32_t)(macconf->SlowProtocolDetect << 17)|
 8001130:	f891 2031 	ldrb.w	r2, [r1, #49]	; 0x31
                 (uint32_t)(macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001134:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
                     (uint32_t)(!macconf->CRCCheckingRxPackets << 16) |
 8001138:	f891 2032 	ldrb.w	r2, [r1, #50]	; 0x32
 800113c:	2a00      	cmp	r2, #0
 800113e:	d168      	bne.n	8001212 <ETH_SetMACConfig+0x19e>
 8001140:	f44f 3280 	mov.w	r2, #65536	; 0x10000
                   (uint32_t)(macconf->SlowProtocolDetect << 17)|
 8001144:	4313      	orrs	r3, r2
                       macconf->GiantPacketSizeLimit);
 8001146:	6b4a      	ldr	r2, [r1, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001148:	4313      	orrs	r3, r2
  
  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800114a:	6804      	ldr	r4, [r0, #0]
 800114c:	6862      	ldr	r2, [r4, #4]
 800114e:	f022 527c 	bic.w	r2, r2, #1056964608	; 0x3f000000
 8001152:	f422 22ef 	bic.w	r2, r2, #489472	; 0x77800
 8001156:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 800115a:	f022 0207 	bic.w	r2, r2, #7
 800115e:	4313      	orrs	r3, r2
 8001160:	6063      	str	r3, [r4, #4]
  
  /*------------------------ MACWTR Configuration --------------------*/
  macregval = ((uint32_t)(macconf->ProgrammableWatchdog << 8) |
 8001162:	f891 2040 	ldrb.w	r2, [r1, #64]	; 0x40
               macconf->WatchdogTimeout);
 8001166:	6c4b      	ldr	r3, [r1, #68]	; 0x44
  macregval = ((uint32_t)(macconf->ProgrammableWatchdog << 8) |
 8001168:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  
  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);   
 800116c:	6804      	ldr	r4, [r0, #0]
 800116e:	68e5      	ldr	r5, [r4, #12]
 8001170:	4a2b      	ldr	r2, [pc, #172]	; (8001220 <ETH_SetMACConfig+0x1ac>)
 8001172:	402a      	ands	r2, r5
 8001174:	4313      	orrs	r3, r2
 8001176:	60e3      	str	r3, [r4, #12]
  
  /*------------------------ MACTFCR Configuration --------------------*/  
  macregval = ((uint32_t)(macconf->TransmitFlowControl << 1) |
 8001178:	f891 2054 	ldrb.w	r2, [r1, #84]	; 0x54
               macconf->PauseLowThreshold | 
 800117c:	6d0b      	ldr	r3, [r1, #80]	; 0x50
  macregval = ((uint32_t)(macconf->TransmitFlowControl << 1) |
 800117e:	ea43 0242 	orr.w	r2, r3, r2, lsl #1
                 (uint32_t)(!macconf->ZeroQuantaPause << 7) |
 8001182:	f891 304c 	ldrb.w	r3, [r1, #76]	; 0x4c
 8001186:	2b00      	cmp	r3, #0
 8001188:	d145      	bne.n	8001216 <ETH_SetMACConfig+0x1a2>
 800118a:	2380      	movs	r3, #128	; 0x80
               macconf->PauseLowThreshold | 
 800118c:	4313      	orrs	r3, r2
                   (macconf->PauseTime << 16));
 800118e:	6c8a      	ldr	r2, [r1, #72]	; 0x48
  macregval = ((uint32_t)(macconf->TransmitFlowControl << 1) |
 8001190:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  
  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval); 
 8001194:	6804      	ldr	r4, [r0, #0]
 8001196:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8001198:	f022 02f2 	bic.w	r2, r2, #242	; 0xf2
 800119c:	0412      	lsls	r2, r2, #16
 800119e:	0c12      	lsrs	r2, r2, #16
 80011a0:	4313      	orrs	r3, r2
 80011a2:	6723      	str	r3, [r4, #112]	; 0x70
  
  /*------------------------ MACRFCR Configuration --------------------*/  
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80011a4:	f891 3056 	ldrb.w	r3, [r1, #86]	; 0x56
               (uint32_t)(macconf->UnicastPausePacketDetect << 1));
 80011a8:	f891 2055 	ldrb.w	r2, [r1, #85]	; 0x55
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80011ac:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
  
  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80011b0:	6804      	ldr	r4, [r0, #0]
 80011b2:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80011b6:	f022 0203 	bic.w	r2, r2, #3
 80011ba:	4313      	orrs	r3, r2
 80011bc:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  
  /*------------------------ MTLTQOMR Configuration --------------------*/  
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80011c0:	6802      	ldr	r2, [r0, #0]
 80011c2:	f8d2 3d00 	ldr.w	r3, [r2, #3328]	; 0xd00
 80011c6:	f023 0372 	bic.w	r3, r3, #114	; 0x72
 80011ca:	6d8c      	ldr	r4, [r1, #88]	; 0x58
 80011cc:	4323      	orrs	r3, r4
 80011ce:	f8c2 3d00 	str.w	r3, [r2, #3328]	; 0xd00
  
  /*------------------------ MTLRQOMR Configuration --------------------*/  
  macregval = (macconf->ReceiveQueueMode |
 80011d2:	6dca      	ldr	r2, [r1, #92]	; 0x5c
               (uint32_t)(!macconf->DropTCPIPChecksumErrorPacket << 6) |
 80011d4:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
 80011d8:	b1fb      	cbz	r3, 800121a <ETH_SetMACConfig+0x1a6>
 80011da:	2300      	movs	r3, #0
  macregval = (macconf->ReceiveQueueMode |
 80011dc:	4313      	orrs	r3, r2
                 (uint32_t)(macconf->ForwardRxErrorPacket << 4) |
 80011de:	f891 2061 	ldrb.w	r2, [r1, #97]	; 0x61
               (uint32_t)(!macconf->DropTCPIPChecksumErrorPacket << 6) |
 80011e2:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
                   (uint32_t)(macconf->ForwardRxUndersizedGoodPacket << 3));
 80011e6:	f891 2062 	ldrb.w	r2, [r1, #98]	; 0x62
  macregval = (macconf->ReceiveQueueMode |
 80011ea:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
  
  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);  
 80011ee:	6801      	ldr	r1, [r0, #0]
 80011f0:	f8d1 2d30 	ldr.w	r2, [r1, #3376]	; 0xd30
 80011f4:	f022 027b 	bic.w	r2, r2, #123	; 0x7b
 80011f8:	4313      	orrs	r3, r2
 80011fa:	f8c1 3d30 	str.w	r3, [r1, #3376]	; 0xd30
}
 80011fe:	bc30      	pop	{r4, r5}
 8001200:	4770      	bx	lr
                          (uint32_t)(!macconf->Watchdog << 19) | 
 8001202:	2200      	movs	r2, #0
 8001204:	e74f      	b.n	80010a6 <ETH_SetMACConfig+0x32>
                            (uint32_t)(!macconf->Jabber << 17) | 
 8001206:	2300      	movs	r3, #0
 8001208:	e754      	b.n	80010b4 <ETH_SetMACConfig+0x40>
                                        (uint32_t)(!macconf->ReceiveOwn << 10)|
 800120a:	2200      	movs	r2, #0
 800120c:	e766      	b.n	80010dc <ETH_SetMACConfig+0x68>
                                            (uint32_t)(!macconf->RetryTransmission << 8)| 
 800120e:	2300      	movs	r3, #0
 8001210:	e76f      	b.n	80010f2 <ETH_SetMACConfig+0x7e>
                     (uint32_t)(!macconf->CRCCheckingRxPackets << 16) |
 8001212:	2200      	movs	r2, #0
 8001214:	e796      	b.n	8001144 <ETH_SetMACConfig+0xd0>
                 (uint32_t)(!macconf->ZeroQuantaPause << 7) |
 8001216:	2300      	movs	r3, #0
 8001218:	e7b8      	b.n	800118c <ETH_SetMACConfig+0x118>
               (uint32_t)(!macconf->DropTCPIPChecksumErrorPacket << 6) |
 800121a:	2340      	movs	r3, #64	; 0x40
 800121c:	e7de      	b.n	80011dc <ETH_SetMACConfig+0x168>
 800121e:	bf00      	nop
 8001220:	fffffef0 	.word	0xfffffef0

08001224 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001224:	b470      	push	{r4, r5, r6}
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/    
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001226:	6802      	ldr	r2, [r0, #0]
 8001228:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800122c:	6814      	ldr	r4, [r2, #0]
 800122e:	4b1e      	ldr	r3, [pc, #120]	; (80012a8 <ETH_SetDMAConfig+0x84>)
 8001230:	4023      	ands	r3, r4
 8001232:	680c      	ldr	r4, [r1, #0]
 8001234:	4323      	orrs	r3, r4
 8001236:	6013      	str	r3, [r2, #0]
  
  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = ((uint32_t)(dmaconf->AddressAlignedBeats << 12) |
 8001238:	790a      	ldrb	r2, [r1, #4]
               dmaconf->BurstMode |
 800123a:	688b      	ldr	r3, [r1, #8]
  dmaregval = ((uint32_t)(dmaconf->AddressAlignedBeats << 12) |
 800123c:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
                 (uint32_t)(dmaconf->RebuildINCRxBurst << 15));
 8001240:	7b0a      	ldrb	r2, [r1, #12]
  dmaregval = ((uint32_t)(dmaconf->AddressAlignedBeats << 12) |
 8001242:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
  
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001246:	6805      	ldr	r5, [r0, #0]
 8001248:	f241 0404 	movw	r4, #4100	; 0x1004
 800124c:	592e      	ldr	r6, [r5, r4]
 800124e:	4a17      	ldr	r2, [pc, #92]	; (80012ac <ETH_SetDMAConfig+0x88>)
 8001250:	4032      	ands	r2, r6
 8001252:	4313      	orrs	r3, r2
 8001254:	512b      	str	r3, [r5, r4]
  
  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = ((uint32_t)(dmaconf->PBLx8Mode <<16) | 
 8001256:	7b4a      	ldrb	r2, [r1, #13]
               dmaconf->MaximumSegmentSize);
 8001258:	6a0b      	ldr	r3, [r1, #32]
  dmaregval = ((uint32_t)(dmaconf->PBLx8Mode <<16) | 
 800125a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800125e:	6802      	ldr	r2, [r0, #0]
 8001260:	f502 5288 	add.w	r2, r2, #4352	; 0x1100
 8001264:	6815      	ldr	r5, [r2, #0]
 8001266:	4c12      	ldr	r4, [pc, #72]	; (80012b0 <ETH_SetDMAConfig+0x8c>)
 8001268:	402c      	ands	r4, r5
 800126a:	4323      	orrs	r3, r4
 800126c:	6013      	str	r3, [r2, #0]
  
  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength | 
 800126e:	690b      	ldr	r3, [r1, #16]
               (uint32_t)(dmaconf->SecondPacketOperate << 4)| 
 8001270:	7d0a      	ldrb	r2, [r1, #20]
  dmaregval = (dmaconf->TxDMABurstLength | 
 8001272:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
                 (uint32_t)(dmaconf->TCPSegmentation << 12));
 8001276:	7f4a      	ldrb	r2, [r1, #29]
  dmaregval = (dmaconf->TxDMABurstLength | 
 8001278:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
  
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800127c:	6805      	ldr	r5, [r0, #0]
 800127e:	f241 1404 	movw	r4, #4356	; 0x1104
 8001282:	592e      	ldr	r6, [r5, r4]
 8001284:	4a0b      	ldr	r2, [pc, #44]	; (80012b4 <ETH_SetDMAConfig+0x90>)
 8001286:	4032      	ands	r2, r6
 8001288:	4313      	orrs	r3, r2
 800128a:	512b      	str	r3, [r5, r4]
  
  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = ((uint32_t)(dmaconf->FlushRxPacket << 31) |
 800128c:	7f0a      	ldrb	r2, [r1, #28]
               dmaconf->RxDMABurstLength);
 800128e:	698b      	ldr	r3, [r1, #24]
  dmaregval = ((uint32_t)(dmaconf->FlushRxPacket << 31) |
 8001290:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
  
  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001294:	6800      	ldr	r0, [r0, #0]
 8001296:	f241 1108 	movw	r1, #4360	; 0x1108
 800129a:	5844      	ldr	r4, [r0, r1]
 800129c:	4a06      	ldr	r2, [pc, #24]	; (80012b8 <ETH_SetDMAConfig+0x94>)
 800129e:	4022      	ands	r2, r4
 80012a0:	4313      	orrs	r3, r2
 80012a2:	5043      	str	r3, [r0, r1]
}
 80012a4:	bc70      	pop	{r4, r5, r6}
 80012a6:	4770      	bx	lr
 80012a8:	ffff87fd 	.word	0xffff87fd
 80012ac:	ffff2ffe 	.word	0xffff2ffe
 80012b0:	fffec000 	.word	0xfffec000
 80012b4:	ffc0efef 	.word	0xffc0efef
 80012b8:	7fc0ffff 	.word	0x7fc0ffff

080012bc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80012bc:	b570      	push	{r4, r5, r6, lr}
 80012be:	b0a2      	sub	sp, #136	; 0x88
 80012c0:	4606      	mov	r6, r0
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;
  
  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80012c2:	2501      	movs	r5, #1
 80012c4:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10; 
 80012c8:	2400      	movs	r4, #0
 80012ca:	9412      	str	r4, [sp, #72]	; 0x48
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE; 
 80012cc:	f88d 4041 	strb.w	r4, [sp, #65]	; 0x41
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80012d0:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
  macDefaultConf.ChecksumOffload = ENABLE; 
 80012d4:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80012d8:	f88d 5056 	strb.w	r5, [sp, #86]	; 0x56
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80012dc:	f88d 5032 	strb.w	r5, [sp, #50]	; 0x32
  macDefaultConf.DeferralCheck = DISABLE;
 80012e0:	f88d 404c 	strb.w	r4, [sp, #76]	; 0x4c
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80012e4:	f88d 5084 	strb.w	r5, [sp, #132]	; 0x84
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80012e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012ec:	930f      	str	r3, [sp, #60]	; 0x3c
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80012ee:	f88d 405c 	strb.w	r4, [sp, #92]	; 0x5c
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80012f2:	9418      	str	r4, [sp, #96]	; 0x60
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80012f4:	f88d 4085 	strb.w	r4, [sp, #133]	; 0x85
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80012f8:	f88d 4086 	strb.w	r4, [sp, #134]	; 0x86
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80012fc:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001300:	9316      	str	r3, [sp, #88]	; 0x58
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001302:	f88d 4030 	strb.w	r4, [sp, #48]	; 0x30
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001306:	940b      	str	r4, [sp, #44]	; 0x2c
  macDefaultConf.Jabber = ENABLE;
 8001308:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  macDefaultConf.JumboPacket = DISABLE;
 800130c:	f88d 4036 	strb.w	r4, [sp, #54]	; 0x36
  macDefaultConf.LoopbackMode = DISABLE;
 8001310:	f88d 4040 	strb.w	r4, [sp, #64]	; 0x40
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001314:	941d      	str	r4, [sp, #116]	; 0x74
  macDefaultConf.PauseTime = 0x0;
 8001316:	941b      	str	r4, [sp, #108]	; 0x6c
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001318:	9414      	str	r4, [sp, #80]	; 0x50
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800131a:	f88d 4064 	strb.w	r4, [sp, #100]	; 0x64
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800131e:	f88d 407a 	strb.w	r4, [sp, #122]	; 0x7a
  macDefaultConf.ReceiveOwn = ENABLE;
 8001322:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001326:	2320      	movs	r3, #32
 8001328:	9320      	str	r3, [sp, #128]	; 0x80
  macDefaultConf.RetryTransmission = ENABLE;
 800132a:	f88d 5044 	strb.w	r5, [sp, #68]	; 0x44
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800132e:	f88d 4055 	strb.w	r4, [sp, #85]	; 0x55
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001332:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001336:	9309      	str	r3, [sp, #36]	; 0x24
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001338:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800133c:	930e      	str	r3, [sp, #56]	; 0x38
  macDefaultConf.Support2KPacket = DISABLE;
 800133e:	f88d 4031 	strb.w	r4, [sp, #49]	; 0x31
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001342:	2302      	movs	r3, #2
 8001344:	931f      	str	r3, [sp, #124]	; 0x7c
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001346:	f88d 4078 	strb.w	r4, [sp, #120]	; 0x78
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800134a:	f88d 4079 	strb.w	r4, [sp, #121]	; 0x79
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800134e:	f88d 4054 	strb.w	r4, [sp, #84]	; 0x54
  macDefaultConf.Watchdog = ENABLE;
 8001352:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001356:	941a      	str	r4, [sp, #104]	; 0x68
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001358:	f88d 5070 	strb.w	r5, [sp, #112]	; 0x70
  
  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800135c:	a909      	add	r1, sp, #36	; 0x24
 800135e:	f7ff fe89 	bl	8001074 <ETH_SetMACConfig>
  
  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001362:	f88d 5004 	strb.w	r5, [sp, #4]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001366:	9502      	str	r5, [sp, #8]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001368:	9400      	str	r4, [sp, #0]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800136a:	f88d 401c 	strb.w	r4, [sp, #28]
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800136e:	f88d 400d 	strb.w	r4, [sp, #13]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001372:	f88d 400c 	strb.w	r4, [sp, #12]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001376:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800137a:	9306      	str	r3, [sp, #24]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800137c:	f88d 4014 	strb.w	r4, [sp, #20]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001380:	9304      	str	r3, [sp, #16]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001382:	f88d 401d 	strb.w	r4, [sp, #29]
  dmaDefaultConf.MaximumSegmentSize = 536;
 8001386:	f44f 7306 	mov.w	r3, #536	; 0x218
 800138a:	9308      	str	r3, [sp, #32]
  
  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800138c:	4669      	mov	r1, sp
 800138e:	4630      	mov	r0, r6
 8001390:	f7ff ff48 	bl	8001224 <ETH_SetDMAConfig>
}
 8001394:	b022      	add	sp, #136	; 0x88
 8001396:	bd70      	pop	{r4, r5, r6, pc}

08001398 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001398:	b430      	push	{r4, r5}
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < ETH_TX_DESC_CNT; i++)
 800139a:	2100      	movs	r1, #0
 800139c:	e019      	b.n	80013d2 <ETH_DMATxDescListInit+0x3a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800139e:	68c5      	ldr	r5, [r0, #12]
 80013a0:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 80013a4:	00dc      	lsls	r4, r3, #3
 80013a6:	192b      	adds	r3, r5, r4

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80013a8:	2200      	movs	r2, #0
 80013aa:	552a      	strb	r2, [r5, r4]
 80013ac:	705a      	strb	r2, [r3, #1]
 80013ae:	709a      	strb	r2, [r3, #2]
 80013b0:	70da      	strb	r2, [r3, #3]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80013b2:	711a      	strb	r2, [r3, #4]
 80013b4:	715a      	strb	r2, [r3, #5]
 80013b6:	719a      	strb	r2, [r3, #6]
 80013b8:	71da      	strb	r2, [r3, #7]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80013ba:	721a      	strb	r2, [r3, #8]
 80013bc:	725a      	strb	r2, [r3, #9]
 80013be:	729a      	strb	r2, [r3, #10]
 80013c0:	72da      	strb	r2, [r3, #11]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80013c2:	731a      	strb	r2, [r3, #12]
 80013c4:	735a      	strb	r2, [r3, #13]
 80013c6:	739a      	strb	r2, [r3, #14]
 80013c8:	73da      	strb	r2, [r3, #15]
    
    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80013ca:	1d8a      	adds	r2, r1, #6
 80013cc:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  for(i=0; i < ETH_TX_DESC_CNT; i++)
 80013d0:	3101      	adds	r1, #1
 80013d2:	2903      	cmp	r1, #3
 80013d4:	d9e3      	bls.n	800139e <ETH_DMATxDescListInit+0x6>
  }
  
  heth->TxDescList.CurTxDesc = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80013da:	6802      	ldr	r2, [r0, #0]
 80013dc:	2103      	movs	r1, #3
 80013de:	f241 132c 	movw	r3, #4396	; 0x112c
 80013e2:	50d1      	str	r1, [r2, r3]
  
  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80013e4:	6802      	ldr	r2, [r0, #0]
 80013e6:	68c1      	ldr	r1, [r0, #12]
 80013e8:	f241 1314 	movw	r3, #4372	; 0x1114
 80013ec:	50d1      	str	r1, [r2, r3]
  
  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80013ee:	6803      	ldr	r3, [r0, #0]
 80013f0:	68c2      	ldr	r2, [r0, #12]
 80013f2:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80013f6:	601a      	str	r2, [r3, #0]
}
 80013f8:	bc30      	pop	{r4, r5}
 80013fa:	4770      	bx	lr

080013fc <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80013fc:	b430      	push	{r4, r5}
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;
  
  for(i = 0; i < ETH_RX_DESC_CNT; i++)
 80013fe:	2100      	movs	r1, #0
 8001400:	e023      	b.n	800144a <ETH_DMARxDescListInit+0x4e>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001402:	6905      	ldr	r5, [r0, #16]
 8001404:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8001408:	00dc      	lsls	r4, r3, #3
 800140a:	192b      	adds	r3, r5, r4
    
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800140c:	2200      	movs	r2, #0
 800140e:	552a      	strb	r2, [r5, r4]
 8001410:	705a      	strb	r2, [r3, #1]
 8001412:	709a      	strb	r2, [r3, #2]
 8001414:	70da      	strb	r2, [r3, #3]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001416:	711a      	strb	r2, [r3, #4]
 8001418:	715a      	strb	r2, [r3, #5]
 800141a:	719a      	strb	r2, [r3, #6]
 800141c:	71da      	strb	r2, [r3, #7]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800141e:	721a      	strb	r2, [r3, #8]
 8001420:	725a      	strb	r2, [r3, #9]
 8001422:	729a      	strb	r2, [r3, #10]
 8001424:	72da      	strb	r2, [r3, #11]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001426:	731a      	strb	r2, [r3, #12]
 8001428:	735a      	strb	r2, [r3, #13]
 800142a:	739a      	strb	r2, [r3, #14]
 800142c:	73da      	strb	r2, [r3, #15]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800142e:	741a      	strb	r2, [r3, #16]
 8001430:	745a      	strb	r2, [r3, #17]
 8001432:	749a      	strb	r2, [r3, #18]
 8001434:	74da      	strb	r2, [r3, #19]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001436:	751a      	strb	r2, [r3, #20]
 8001438:	755a      	strb	r2, [r3, #21]
 800143a:	759a      	strb	r2, [r3, #22]
 800143c:	75da      	strb	r2, [r3, #23]
    
    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800143e:	f101 020a 	add.w	r2, r1, #10
 8001442:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001446:	6053      	str	r3, [r2, #4]
  for(i = 0; i < ETH_RX_DESC_CNT; i++)
 8001448:	3101      	adds	r1, #1
 800144a:	2903      	cmp	r1, #3
 800144c:	d9d9      	bls.n	8001402 <ETH_DMARxDescListInit+0x6>
  }
  
  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 800144e:	2300      	movs	r3, #0
 8001450:	63c3      	str	r3, [r0, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8001452:	6403      	str	r3, [r0, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8001454:	6443      	str	r3, [r0, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001456:	64c3      	str	r3, [r0, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8001458:	6483      	str	r3, [r0, #72]	; 0x48
  
  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, (ETH_RX_DESC_CNT - 1));
 800145a:	6802      	ldr	r2, [r0, #0]
 800145c:	2103      	movs	r1, #3
 800145e:	f241 1330 	movw	r3, #4400	; 0x1130
 8001462:	50d1      	str	r1, [r2, r3]
  
  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001464:	6802      	ldr	r2, [r0, #0]
 8001466:	6901      	ldr	r1, [r0, #16]
 8001468:	f241 131c 	movw	r3, #4380	; 0x111c
 800146c:	50d1      	str	r1, [r2, r3]
  
  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)heth->Init.RxDesc + ((ETH_RX_DESC_CNT - 1)*sizeof(ETH_DMADescTypeDef))));
 800146e:	6801      	ldr	r1, [r0, #0]
 8001470:	6903      	ldr	r3, [r0, #16]
 8001472:	3348      	adds	r3, #72	; 0x48
 8001474:	f241 1228 	movw	r2, #4392	; 0x1128
 8001478:	508b      	str	r3, [r1, r2]
}
 800147a:	bc30      	pop	{r4, r5}
 800147c:	4770      	bx	lr
	...

08001480 <ETH_MAC_MDIO_ClkConfig>:
{
 8001480:	b538      	push	{r3, r4, r5, lr}
 8001482:	4605      	mov	r5, r0
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001484:	6803      	ldr	r3, [r0, #0]
 8001486:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
  tmpreg &= ~ETH_MACMDIOAR_CR;  
 800148a:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
  hclk = HAL_RCC_GetHCLKFreq();
 800148e:	f000 ff11 	bl	80022b4 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001492:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <ETH_MAC_MDIO_ClkConfig+0x58>)
 8001494:	4403      	add	r3, r0
 8001496:	4a11      	ldr	r2, [pc, #68]	; (80014dc <ETH_MAC_MDIO_ClkConfig+0x5c>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d911      	bls.n	80014c0 <ETH_MAC_MDIO_ClkConfig+0x40>
  else if((hclk >= 35000000)&&(hclk < 60000000))
 800149c:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <ETH_MAC_MDIO_ClkConfig+0x60>)
 800149e:	4403      	add	r3, r0
 80014a0:	4a10      	ldr	r2, [pc, #64]	; (80014e4 <ETH_MAC_MDIO_ClkConfig+0x64>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d912      	bls.n	80014cc <ETH_MAC_MDIO_ClkConfig+0x4c>
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80014a6:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <ETH_MAC_MDIO_ClkConfig+0x68>)
 80014a8:	4403      	add	r3, r0
 80014aa:	4a10      	ldr	r2, [pc, #64]	; (80014ec <ETH_MAC_MDIO_ClkConfig+0x6c>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d909      	bls.n	80014c4 <ETH_MAC_MDIO_ClkConfig+0x44>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80014b0:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <ETH_MAC_MDIO_ClkConfig+0x70>)
 80014b2:	4403      	add	r3, r0
 80014b4:	4a0f      	ldr	r2, [pc, #60]	; (80014f4 <ETH_MAC_MDIO_ClkConfig+0x74>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d90b      	bls.n	80014d2 <ETH_MAC_MDIO_ClkConfig+0x52>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;    
 80014ba:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 80014be:	e001      	b.n	80014c4 <ETH_MAC_MDIO_ClkConfig+0x44>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80014c0:	f444 7400 	orr.w	r4, r4, #512	; 0x200
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;		
 80014c4:	682b      	ldr	r3, [r5, #0]
 80014c6:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
 80014ca:	bd38      	pop	{r3, r4, r5, pc}
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80014cc:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 80014d0:	e7f8      	b.n	80014c4 <ETH_MAC_MDIO_ClkConfig+0x44>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80014d2:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 80014d6:	e7f5      	b.n	80014c4 <ETH_MAC_MDIO_ClkConfig+0x44>
 80014d8:	feced300 	.word	0xfeced300
 80014dc:	00e4e1bf 	.word	0x00e4e1bf
 80014e0:	fde9f140 	.word	0xfde9f140
 80014e4:	017d783f 	.word	0x017d783f
 80014e8:	fc6c7900 	.word	0xfc6c7900
 80014ec:	026259ff 	.word	0x026259ff
 80014f0:	fa0a1f00 	.word	0xfa0a1f00
 80014f4:	02faf07f 	.word	0x02faf07f

080014f8 <HAL_ETH_Init>:
  if(heth == NULL)
 80014f8:	2800      	cmp	r0, #0
 80014fa:	f000 8092 	beq.w	8001622 <HAL_ETH_Init+0x12a>
{
 80014fe:	b530      	push	{r4, r5, lr}
 8001500:	b083      	sub	sp, #12
 8001502:	4604      	mov	r4, r0
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001504:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001508:	b39b      	cbz	r3, 8001572 <HAL_ETH_Init+0x7a>
  heth->gState = HAL_ETH_STATE_BUSY;
 800150a:	2323      	movs	r3, #35	; 0x23
 800150c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001510:	4b45      	ldr	r3, [pc, #276]	; (8001628 <HAL_ETH_Init+0x130>)
 8001512:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8001516:	f042 0202 	orr.w	r2, r2, #2
 800151a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 800151e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	9301      	str	r3, [sp, #4]
 8001528:	9b01      	ldr	r3, [sp, #4]
  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800152a:	7a23      	ldrb	r3, [r4, #8]
 800152c:	bb23      	cbnz	r3, 8001578 <HAL_ETH_Init+0x80>
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800152e:	2000      	movs	r0, #0
 8001530:	f7ff f8b6 	bl	80006a0 <HAL_SYSCFG_ETHInterfaceSelect>
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001534:	6823      	ldr	r3, [r4, #0]
 8001536:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	f042 0201 	orr.w	r2, r2, #1
 8001540:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8001542:	f7ff f893 	bl	800066c <HAL_GetTick>
 8001546:	4605      	mov	r5, r0
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR))
 8001548:	6823      	ldr	r3, [r4, #0]
 800154a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f013 0f01 	tst.w	r3, #1
 8001554:	d015      	beq.n	8001582 <HAL_ETH_Init+0x8a>
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001556:	f7ff f889 	bl	800066c <HAL_GetTick>
 800155a:	1b40      	subs	r0, r0, r5
 800155c:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8001560:	d9f2      	bls.n	8001548 <HAL_ETH_Init+0x50>
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001562:	2304      	movs	r3, #4
 8001564:	6563      	str	r3, [r4, #84]	; 0x54
      heth->gState = HAL_ETH_STATE_ERROR;
 8001566:	23e0      	movs	r3, #224	; 0xe0
 8001568:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      return HAL_ERROR;
 800156c:	2001      	movs	r0, #1
}
 800156e:	b003      	add	sp, #12
 8001570:	bd30      	pop	{r4, r5, pc}
    HAL_ETH_MspInit(heth);
 8001572:	f003 fc07 	bl	8004d84 <HAL_ETH_MspInit>
 8001576:	e7c8      	b.n	800150a <HAL_ETH_Init+0x12>
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001578:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800157c:	f7ff f890 	bl	80006a0 <HAL_SYSCFG_ETHInterfaceSelect>
 8001580:	e7d8      	b.n	8001534 <HAL_ETH_Init+0x3c>
  ETH_MAC_MDIO_ClkConfig(heth);
 8001582:	4620      	mov	r0, r4
 8001584:	f7ff ff7c 	bl	8001480 <ETH_MAC_MDIO_ClkConfig>
  WRITE_REG(heth->Instance->MAC1USTCR, ((HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1));
 8001588:	6825      	ldr	r5, [r4, #0]
 800158a:	f000 fe93 	bl	80022b4 <HAL_RCC_GetHCLKFreq>
 800158e:	4b27      	ldr	r3, [pc, #156]	; (800162c <HAL_ETH_Init+0x134>)
 8001590:	fba3 2300 	umull	r2, r3, r3, r0
 8001594:	0c9b      	lsrs	r3, r3, #18
 8001596:	3b01      	subs	r3, #1
 8001598:	f8c5 30dc 	str.w	r3, [r5, #220]	; 0xdc
  ETH_MACDMAConfig(heth);
 800159c:	4620      	mov	r0, r4
 800159e:	f7ff fe8d 	bl	80012bc <ETH_MACDMAConfig>
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);	
 80015a2:	6822      	ldr	r2, [r4, #0]
 80015a4:	f502 5288 	add.w	r2, r2, #4352	; 0x1100
 80015a8:	6813      	ldr	r3, [r2, #0]
 80015aa:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80015ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80015b2:	6013      	str	r3, [r2, #0]
  if ((heth->Init.RxBuffLen % 4) != 0)
 80015b4:	6963      	ldr	r3, [r4, #20]
 80015b6:	f013 0f03 	tst.w	r3, #3
 80015ba:	d005      	beq.n	80015c8 <HAL_ETH_Init+0xd0>
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80015bc:	2001      	movs	r0, #1
 80015be:	6560      	str	r0, [r4, #84]	; 0x54
    heth->gState = HAL_ETH_STATE_ERROR;
 80015c0:	23e0      	movs	r3, #224	; 0xe0
 80015c2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    return HAL_ERROR;
 80015c6:	e7d2      	b.n	800156e <HAL_ETH_Init+0x76>
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80015c8:	6820      	ldr	r0, [r4, #0]
 80015ca:	f241 1108 	movw	r1, #4360	; 0x1108
 80015ce:	5845      	ldr	r5, [r0, r1]
 80015d0:	4a17      	ldr	r2, [pc, #92]	; (8001630 <HAL_ETH_Init+0x138>)
 80015d2:	402a      	ands	r2, r5
 80015d4:	ea42 0343 	orr.w	r3, r2, r3, lsl #1
 80015d8:	5043      	str	r3, [r0, r1]
  ETH_DMATxDescListInit(heth);
 80015da:	4620      	mov	r0, r4
 80015dc:	f7ff fedc 	bl	8001398 <ETH_DMATxDescListInit>
  ETH_DMARxDescListInit(heth);
 80015e0:	4620      	mov	r0, r4
 80015e2:	f7ff ff0b 	bl	80013fc <ETH_DMARxDescListInit>
  heth->Instance->MACA0HR = ((heth->Init.MACAddr[5] << 8) | heth->Init.MACAddr[4]);
 80015e6:	6821      	ldr	r1, [r4, #0]
 80015e8:	6862      	ldr	r2, [r4, #4]
 80015ea:	7950      	ldrb	r0, [r2, #5]
 80015ec:	7913      	ldrb	r3, [r2, #4]
 80015ee:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80015f2:	f8c1 3300 	str.w	r3, [r1, #768]	; 0x300
  heth->Instance->MACA0LR = ((heth->Init.MACAddr[3] << 24) | (heth->Init.MACAddr[2] << 16) | (heth->Init.MACAddr[1] << 8) | heth->Init.MACAddr[0]);
 80015f6:	6821      	ldr	r1, [r4, #0]
 80015f8:	6862      	ldr	r2, [r4, #4]
 80015fa:	78d0      	ldrb	r0, [r2, #3]
 80015fc:	7893      	ldrb	r3, [r2, #2]
 80015fe:	041b      	lsls	r3, r3, #16
 8001600:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001604:	7850      	ldrb	r0, [r2, #1]
 8001606:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800160a:	7812      	ldrb	r2, [r2, #0]
 800160c:	4313      	orrs	r3, r2
 800160e:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001612:	2000      	movs	r0, #0
 8001614:	6560      	str	r0, [r4, #84]	; 0x54
  heth->gState = HAL_ETH_STATE_READY;
 8001616:	2310      	movs	r3, #16
 8001618:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  heth->RxState = HAL_ETH_STATE_READY;
 800161c:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
  return HAL_OK;
 8001620:	e7a5      	b.n	800156e <HAL_ETH_Init+0x76>
    return HAL_ERROR;
 8001622:	2001      	movs	r0, #1
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	58024400 	.word	0x58024400
 800162c:	431bde83 	.word	0x431bde83
 8001630:	ffff8001 	.word	0xffff8001

08001634 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001636:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001638:	2400      	movs	r4, #0
 800163a:	e03b      	b.n	80016b4 <HAL_GPIO_Init+0x80>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800163c:	2609      	movs	r6, #9
 800163e:	e000      	b.n	8001642 <HAL_GPIO_Init+0xe>
 8001640:	2600      	movs	r6, #0
 8001642:	fa06 f60e 	lsl.w	r6, r6, lr
 8001646:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8001648:	3302      	adds	r3, #2
 800164a:	4e70      	ldr	r6, [pc, #448]	; (800180c <HAL_GPIO_Init+0x1d8>)
 800164c:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
     
        /* Clear EXTI line configuration */
        temp = EXTI_Ptr->IMR1;
 8001650:	4b6f      	ldr	r3, [pc, #444]	; (8001810 <HAL_GPIO_Init+0x1dc>)
 8001652:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 8001654:	43eb      	mvns	r3, r5
 8001656:	ea02 0603 	and.w	r6, r2, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800165a:	684f      	ldr	r7, [r1, #4]
 800165c:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001660:	d001      	beq.n	8001666 <HAL_GPIO_Init+0x32>
        {
          temp |= iocurrent;
 8001662:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI_Ptr->IMR1 = temp;
 8001666:	4a6a      	ldr	r2, [pc, #424]	; (8001810 <HAL_GPIO_Init+0x1dc>)
 8001668:	6016      	str	r6, [r2, #0]

        temp = EXTI_Ptr->EMR1;
 800166a:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 800166c:	ea03 0206 	and.w	r2, r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001670:	684f      	ldr	r7, [r1, #4]
 8001672:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001676:	d001      	beq.n	800167c <HAL_GPIO_Init+0x48>
        {
          temp |= iocurrent;
 8001678:	ea45 0206 	orr.w	r2, r5, r6
        }
        EXTI_Ptr->EMR1 = temp;
 800167c:	4e64      	ldr	r6, [pc, #400]	; (8001810 <HAL_GPIO_Init+0x1dc>)
 800167e:	6072      	str	r2, [r6, #4]
             
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001680:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001684:	6812      	ldr	r2, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001686:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800168a:	684f      	ldr	r7, [r1, #4]
 800168c:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001690:	d001      	beq.n	8001696 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8001692:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->RTSR1 = temp;
 8001696:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800169a:	6016      	str	r6, [r2, #0]

        temp = EXTI->FTSR1;
 800169c:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 800169e:	4013      	ands	r3, r2
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016a0:	684e      	ldr	r6, [r1, #4]
 80016a2:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80016a6:	d001      	beq.n	80016ac <HAL_GPIO_Init+0x78>
        {
          temp |= iocurrent;
 80016a8:	ea45 0302 	orr.w	r3, r5, r2
        }
        EXTI->FTSR1 = temp;
 80016ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016b0:	6053      	str	r3, [r2, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 80016b2:	3401      	adds	r4, #1
 80016b4:	2c0f      	cmp	r4, #15
 80016b6:	f200 80a6 	bhi.w	8001806 <HAL_GPIO_Init+0x1d2>
    ioposition = ((uint32_t)0x01) << position;
 80016ba:	2301      	movs	r3, #1
 80016bc:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016be:	680a      	ldr	r2, [r1, #0]
 80016c0:	ea03 0502 	and.w	r5, r3, r2
    if(iocurrent == ioposition)
 80016c4:	42ab      	cmp	r3, r5
 80016c6:	d1f4      	bne.n	80016b2 <HAL_GPIO_Init+0x7e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016c8:	684a      	ldr	r2, [r1, #4]
 80016ca:	2a12      	cmp	r2, #18
 80016cc:	bf18      	it	ne
 80016ce:	2a02      	cmpne	r2, #2
 80016d0:	d112      	bne.n	80016f8 <HAL_GPIO_Init+0xc4>
        temp = GPIOx->AFR[position >> 3];
 80016d2:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 80016d6:	f10e 0e08 	add.w	lr, lr, #8
 80016da:	f850 202e 	ldr.w	r2, [r0, lr, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80016de:	f004 0607 	and.w	r6, r4, #7
 80016e2:	00b6      	lsls	r6, r6, #2
 80016e4:	270f      	movs	r7, #15
 80016e6:	40b7      	lsls	r7, r6
 80016e8:	ea22 0207 	bic.w	r2, r2, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80016ec:	690f      	ldr	r7, [r1, #16]
 80016ee:	fa07 f606 	lsl.w	r6, r7, r6
 80016f2:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3] = temp;
 80016f4:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
      temp = GPIOx->MODER;
 80016f8:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80016fa:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 80016fe:	2203      	movs	r2, #3
 8001700:	fa02 f20e 	lsl.w	r2, r2, lr
 8001704:	43d2      	mvns	r2, r2
 8001706:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001708:	684f      	ldr	r7, [r1, #4]
 800170a:	f007 0703 	and.w	r7, r7, #3
 800170e:	fa07 f70e 	lsl.w	r7, r7, lr
 8001712:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8001714:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001716:	684e      	ldr	r6, [r1, #4]
 8001718:	1e77      	subs	r7, r6, #1
 800171a:	2e11      	cmp	r6, #17
 800171c:	bf18      	it	ne
 800171e:	2f01      	cmpne	r7, #1
 8001720:	d901      	bls.n	8001726 <HAL_GPIO_Init+0xf2>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001722:	2e12      	cmp	r6, #18
 8001724:	d10f      	bne.n	8001746 <HAL_GPIO_Init+0x112>
        temp = GPIOx->OSPEEDR; 
 8001726:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001728:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2));
 800172a:	68cf      	ldr	r7, [r1, #12]
 800172c:	fa07 f70e 	lsl.w	r7, r7, lr
 8001730:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8001732:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001734:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001736:	ea26 0303 	bic.w	r3, r6, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800173a:	684e      	ldr	r6, [r1, #4]
 800173c:	f3c6 1600 	ubfx	r6, r6, #4, #1
 8001740:	40a6      	lsls	r6, r4
 8001742:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 8001744:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 8001746:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001748:	401a      	ands	r2, r3
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800174a:	688b      	ldr	r3, [r1, #8]
 800174c:	fa03 f30e 	lsl.w	r3, r3, lr
 8001750:	431a      	orrs	r2, r3
      GPIOx->PUPDR = temp;
 8001752:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001754:	684b      	ldr	r3, [r1, #4]
 8001756:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800175a:	d0aa      	beq.n	80016b2 <HAL_GPIO_Init+0x7e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800175c:	4b2d      	ldr	r3, [pc, #180]	; (8001814 <HAL_GPIO_Init+0x1e0>)
 800175e:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8001762:	f042 0202 	orr.w	r2, r2, #2
 8001766:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 800176a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	9301      	str	r3, [sp, #4]
 8001774:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8001776:	08a3      	lsrs	r3, r4, #2
 8001778:	1c9e      	adds	r6, r3, #2
 800177a:	4a24      	ldr	r2, [pc, #144]	; (800180c <HAL_GPIO_Init+0x1d8>)
 800177c:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001780:	f004 0603 	and.w	r6, r4, #3
 8001784:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 8001788:	260f      	movs	r6, #15
 800178a:	fa06 f60e 	lsl.w	r6, r6, lr
 800178e:	ea22 0206 	bic.w	r2, r2, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001792:	4f21      	ldr	r7, [pc, #132]	; (8001818 <HAL_GPIO_Init+0x1e4>)
 8001794:	42b8      	cmp	r0, r7
 8001796:	f43f af53 	beq.w	8001640 <HAL_GPIO_Init+0xc>
 800179a:	4e20      	ldr	r6, [pc, #128]	; (800181c <HAL_GPIO_Init+0x1e8>)
 800179c:	42b0      	cmp	r0, r6
 800179e:	d022      	beq.n	80017e6 <HAL_GPIO_Init+0x1b2>
 80017a0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80017a4:	42b0      	cmp	r0, r6
 80017a6:	d020      	beq.n	80017ea <HAL_GPIO_Init+0x1b6>
 80017a8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80017ac:	42b0      	cmp	r0, r6
 80017ae:	d01e      	beq.n	80017ee <HAL_GPIO_Init+0x1ba>
 80017b0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80017b4:	42b0      	cmp	r0, r6
 80017b6:	d01c      	beq.n	80017f2 <HAL_GPIO_Init+0x1be>
 80017b8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80017bc:	42b0      	cmp	r0, r6
 80017be:	d01a      	beq.n	80017f6 <HAL_GPIO_Init+0x1c2>
 80017c0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80017c4:	42b0      	cmp	r0, r6
 80017c6:	d018      	beq.n	80017fa <HAL_GPIO_Init+0x1c6>
 80017c8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80017cc:	42b0      	cmp	r0, r6
 80017ce:	d016      	beq.n	80017fe <HAL_GPIO_Init+0x1ca>
 80017d0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80017d4:	42b0      	cmp	r0, r6
 80017d6:	d014      	beq.n	8001802 <HAL_GPIO_Init+0x1ce>
 80017d8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80017dc:	42b0      	cmp	r0, r6
 80017de:	f43f af2d 	beq.w	800163c <HAL_GPIO_Init+0x8>
 80017e2:	260a      	movs	r6, #10
 80017e4:	e72d      	b.n	8001642 <HAL_GPIO_Init+0xe>
 80017e6:	2601      	movs	r6, #1
 80017e8:	e72b      	b.n	8001642 <HAL_GPIO_Init+0xe>
 80017ea:	2602      	movs	r6, #2
 80017ec:	e729      	b.n	8001642 <HAL_GPIO_Init+0xe>
 80017ee:	2603      	movs	r6, #3
 80017f0:	e727      	b.n	8001642 <HAL_GPIO_Init+0xe>
 80017f2:	2604      	movs	r6, #4
 80017f4:	e725      	b.n	8001642 <HAL_GPIO_Init+0xe>
 80017f6:	2605      	movs	r6, #5
 80017f8:	e723      	b.n	8001642 <HAL_GPIO_Init+0xe>
 80017fa:	2606      	movs	r6, #6
 80017fc:	e721      	b.n	8001642 <HAL_GPIO_Init+0xe>
 80017fe:	2607      	movs	r6, #7
 8001800:	e71f      	b.n	8001642 <HAL_GPIO_Init+0xe>
 8001802:	2608      	movs	r6, #8
 8001804:	e71d      	b.n	8001642 <HAL_GPIO_Init+0xe>
      }      
    }
  }
}
 8001806:	b003      	add	sp, #12
 8001808:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800180a:	bf00      	nop
 800180c:	58000400 	.word	0x58000400
 8001810:	58000080 	.word	0x58000080
 8001814:	58024400 	.word	0x58024400
 8001818:	58020000 	.word	0x58020000
 800181c:	58020400 	.word	0x58020400

08001820 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001820:	b90a      	cbnz	r2, 8001826 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8001822:	8341      	strh	r1, [r0, #26]
 8001824:	4770      	bx	lr
    GPIOx->BSRRL = GPIO_Pin;
 8001826:	8301      	strh	r1, [r0, #24]
 8001828:	4770      	bx	lr

0800182a <HAL_PCD_Init>:
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
  uint32_t i = 0;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 800182a:	2800      	cmp	r0, #0
 800182c:	d079      	beq.n	8001922 <HAL_PCD_Init+0xf8>
{ 
 800182e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001830:	b08b      	sub	sp, #44	; 0x2c
 8001832:	4604      	mov	r4, r0
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001834:	2303      	movs	r3, #3
 8001836:	f880 33b9 	strb.w	r3, [r0, #953]	; 0x3b9
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);
 800183a:	f003 fe9f 	bl	800557c <HAL_PCD_MspInit>

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 800183e:	6820      	ldr	r0, [r4, #0]
 8001840:	f002 ff98 	bl	8004774 <USB_DisableGlobalInt>
 
 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8001844:	4625      	mov	r5, r4
 8001846:	f855 7b10 	ldr.w	r7, [r5], #16
 800184a:	466e      	mov	r6, sp
 800184c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800184e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001850:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001852:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001854:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001858:	e886 0003 	stmia.w	r6, {r0, r1}
 800185c:	1d23      	adds	r3, r4, #4
 800185e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001860:	4638      	mov	r0, r7
 8001862:	f002 ff49 	bl	80046f8 <USB_CoreInit>
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8001866:	2100      	movs	r1, #0
 8001868:	6820      	ldr	r0, [r4, #0]
 800186a:	f002 ff89 	bl	8004780 <USB_SetCurrentMode>
 
 /* Init endpoints structures */
 for (i = 0; i < 15 ; i++)
 800186e:	2200      	movs	r2, #0
 8001870:	e010      	b.n	8001894 <HAL_PCD_Init+0x6a>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1;
 8001872:	00d1      	lsls	r1, r2, #3
 8001874:	1a89      	subs	r1, r1, r2
 8001876:	008b      	lsls	r3, r1, #2
 8001878:	4423      	add	r3, r4
 800187a:	2101      	movs	r1, #1
 800187c:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
   hpcd->IN_ep[i].num = i;
 8001880:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
   hpcd->IN_ep[i].tx_fifo_num = i;
 8001884:	87da      	strh	r2, [r3, #62]	; 0x3e
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001886:	2100      	movs	r1, #0
 8001888:	f883 103b 	strb.w	r1, [r3, #59]	; 0x3b
   hpcd->IN_ep[i].maxpacket =  0;
 800188c:	6419      	str	r1, [r3, #64]	; 0x40
   hpcd->IN_ep[i].xfer_buff = 0;
 800188e:	6459      	str	r1, [r3, #68]	; 0x44
   hpcd->IN_ep[i].xfer_len = 0;
 8001890:	64d9      	str	r1, [r3, #76]	; 0x4c
 for (i = 0; i < 15 ; i++)
 8001892:	3201      	adds	r2, #1
 8001894:	2a0e      	cmp	r2, #14
 8001896:	d9ec      	bls.n	8001872 <HAL_PCD_Init+0x48>
 8001898:	2200      	movs	r2, #0
 800189a:	e018      	b.n	80018ce <HAL_PCD_Init+0xa4>
 }
 
 for (i = 0; i < 15 ; i++)
 {
   hpcd->OUT_ep[i].is_in = 0;
 800189c:	00d1      	lsls	r1, r2, #3
 800189e:	1a89      	subs	r1, r1, r2
 80018a0:	008b      	lsls	r3, r1, #2
 80018a2:	4423      	add	r3, r4
 80018a4:	2100      	movs	r1, #0
 80018a6:	f883 11f9 	strb.w	r1, [r3, #505]	; 0x1f9
   hpcd->OUT_ep[i].num = i;
 80018aa:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
   hpcd->IN_ep[i].tx_fifo_num = i;
 80018ae:	87da      	strh	r2, [r3, #62]	; 0x3e
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80018b0:	f883 11fb 	strb.w	r1, [r3, #507]	; 0x1fb
   hpcd->OUT_ep[i].maxpacket = 0;
 80018b4:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
   hpcd->OUT_ep[i].xfer_buff = 0;
 80018b8:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
   hpcd->OUT_ep[i].xfer_len = 0;
 80018bc:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
   
   hpcd->Instance->DIEPTXF[i] = 0;
 80018c0:	6823      	ldr	r3, [r4, #0]
 80018c2:	f102 0040 	add.w	r0, r2, #64	; 0x40
 80018c6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80018ca:	6059      	str	r1, [r3, #4]
 for (i = 0; i < 15 ; i++)
 80018cc:	3201      	adds	r2, #1
 80018ce:	2a0e      	cmp	r2, #14
 80018d0:	d9e4      	bls.n	800189c <HAL_PCD_Init+0x72>
 }
 
 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 80018d2:	4625      	mov	r5, r4
 80018d4:	f855 7b10 	ldr.w	r7, [r5], #16
 80018d8:	466e      	mov	r6, sp
 80018da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018dc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80018de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018e0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80018e2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80018e6:	e886 0003 	stmia.w	r6, {r0, r1}
 80018ea:	1d23      	adds	r3, r4, #4
 80018ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018ee:	4638      	mov	r0, r7
 80018f0:	f002 ff5c 	bl	80047ac <USB_DevInit>
 
 hpcd->State= HAL_PCD_STATE_READY;
 80018f4:	2301      	movs	r3, #1
 80018f6:	f884 33b9 	strb.w	r3, [r4, #953]	; 0x3b9
 
 /* Activate LPM */
 if (hpcd->Init.lpm_enable == 1)
 80018fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d008      	beq.n	8001912 <HAL_PCD_Init+0xe8>
   HAL_PCDEx_ActivateLPM(hpcd);
 }
 
#if defined (USB_OTG_GCCFG_BCDEN)	
 /* Activate Battery charging */
 if (hpcd->Init.battery_charging_enable ==1)
 8001900:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001902:	2b01      	cmp	r3, #1
 8001904:	d009      	beq.n	800191a <HAL_PCD_Init+0xf0>
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */
 
 USB_DevDisconnect (hpcd->Instance);  
 8001906:	6820      	ldr	r0, [r4, #0]
 8001908:	f003 f82b 	bl	8004962 <USB_DevDisconnect>
 return HAL_OK;
 800190c:	2000      	movs	r0, #0
}
 800190e:	b00b      	add	sp, #44	; 0x2c
 8001910:	bdf0      	pop	{r4, r5, r6, r7, pc}
   HAL_PCDEx_ActivateLPM(hpcd);
 8001912:	4620      	mov	r0, r4
 8001914:	f000 f808 	bl	8001928 <HAL_PCDEx_ActivateLPM>
 8001918:	e7f2      	b.n	8001900 <HAL_PCD_Init+0xd6>
   HAL_PCDEx_ActivateBCD(hpcd);
 800191a:	4620      	mov	r0, r4
 800191c:	f000 f818 	bl	8001950 <HAL_PCDEx_ActivateBCD>
 8001920:	e7f1      	b.n	8001906 <HAL_PCD_Init+0xdc>
    return HAL_ERROR;
 8001922:	2001      	movs	r0, #1
 8001924:	4770      	bx	lr
	...

08001928 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM Feature.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001928:	4602      	mov	r2, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 800192a:	6803      	ldr	r3, [r0, #0]
  
  hpcd->lpm_active = ENABLE;
 800192c:	2101      	movs	r1, #1
 800192e:	f8c0 13f4 	str.w	r1, [r0, #1012]	; 0x3f4
  hpcd->LPM_State = LPM_L0;
 8001932:	2000      	movs	r0, #0
 8001934:	f882 03ec 	strb.w	r0, [r2, #1004]	; 0x3ec
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001938:	699a      	ldr	r2, [r3, #24]
 800193a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800193e:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001940:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001942:	4a02      	ldr	r2, [pc, #8]	; (800194c <HAL_PCDEx_ActivateLPM+0x24>)
 8001944:	430a      	orrs	r2, r1
 8001946:	655a      	str	r2, [r3, #84]	; 0x54
  
  return HAL_OK;  
}
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	10000003 	.word	0x10000003

08001950 <HAL_PCDEx_ActivateBCD>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8001950:	6803      	ldr	r3, [r0, #0]

  hpcd->battery_charging_active = ENABLE; 
 8001952:	2201      	movs	r2, #1
 8001954:	f8c0 23f8 	str.w	r2, [r0, #1016]	; 0x3f8
  USBx->GCCFG |= (USB_OTG_GCCFG_BCDEN);
 8001958:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800195a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800195e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Enable DCD : Data Contact Detect */
  USBx->GCCFG |= USB_OTG_GCCFG_DCDEN;
 8001960:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001962:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001966:	639a      	str	r2, [r3, #56]	; 0x38
  
  return HAL_OK;  
}
 8001968:	2000      	movs	r0, #0
 800196a:	4770      	bx	lr

0800196c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800196c:	b538      	push	{r3, r4, r5, lr}
 800196e:	4604      	mov	r4, r0
  uint32_t tickstart = 0;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001970:	6803      	ldr	r3, [r0, #0]
 8001972:	f013 0f01 	tst.w	r3, #1
 8001976:	d03b      	beq.n	80019f0 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001978:	4bad      	ldr	r3, [pc, #692]	; (8001c30 <HAL_RCC_OscConfig+0x2c4>)
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001980:	2b10      	cmp	r3, #16
 8001982:	d02c      	beq.n	80019de <HAL_RCC_OscConfig+0x72>
 8001984:	4baa      	ldr	r3, [pc, #680]	; (8001c30 <HAL_RCC_OscConfig+0x2c4>)
 8001986:	691b      	ldr	r3, [r3, #16]
 8001988:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800198c:	2b18      	cmp	r3, #24
 800198e:	d020      	beq.n	80019d2 <HAL_RCC_OscConfig+0x66>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001990:	6863      	ldr	r3, [r4, #4]
 8001992:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001996:	d055      	beq.n	8001a44 <HAL_RCC_OscConfig+0xd8>
 8001998:	2b00      	cmp	r3, #0
 800199a:	d159      	bne.n	8001a50 <HAL_RCC_OscConfig+0xe4>
 800199c:	4ba4      	ldr	r3, [pc, #656]	; (8001c30 <HAL_RCC_OscConfig+0x2c4>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80019ac:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019ae:	6863      	ldr	r3, [r4, #4]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d064      	beq.n	8001a7e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b4:	f7fe fe5a 	bl	800066c <HAL_GetTick>
 80019b8:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ba:	4b9d      	ldr	r3, [pc, #628]	; (8001c30 <HAL_RCC_OscConfig+0x2c4>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80019c2:	d115      	bne.n	80019f0 <HAL_RCC_OscConfig+0x84>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019c4:	f7fe fe52 	bl	800066c <HAL_GetTick>
 80019c8:	1b40      	subs	r0, r0, r5
 80019ca:	2864      	cmp	r0, #100	; 0x64
 80019cc:	d9f5      	bls.n	80019ba <HAL_RCC_OscConfig+0x4e>
          {
            return HAL_TIMEOUT;
 80019ce:	2003      	movs	r0, #3
 80019d0:	bd38      	pop	{r3, r4, r5, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80019d2:	4b97      	ldr	r3, [pc, #604]	; (8001c30 <HAL_RCC_OscConfig+0x2c4>)
 80019d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d6:	f003 0303 	and.w	r3, r3, #3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d1d8      	bne.n	8001990 <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019de:	4b94      	ldr	r3, [pc, #592]	; (8001c30 <HAL_RCC_OscConfig+0x2c4>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80019e6:	d003      	beq.n	80019f0 <HAL_RCC_OscConfig+0x84>
 80019e8:	6863      	ldr	r3, [r4, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f000 8274 	beq.w	8001ed8 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019f0:	6823      	ldr	r3, [r4, #0]
 80019f2:	f013 0f02 	tst.w	r3, #2
 80019f6:	f000 8084 	beq.w	8001b02 <HAL_RCC_OscConfig+0x196>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80019fa:	4b8d      	ldr	r3, [pc, #564]	; (8001c30 <HAL_RCC_OscConfig+0x2c4>)
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	f013 0f38 	tst.w	r3, #56	; 0x38
 8001a02:	d050      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x13a>
 8001a04:	4b8a      	ldr	r3, [pc, #552]	; (8001c30 <HAL_RCC_OscConfig+0x2c4>)
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a0c:	2b18      	cmp	r3, #24
 8001a0e:	d045      	beq.n	8001a9c <HAL_RCC_OscConfig+0x130>
    }
    
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a10:	68e3      	ldr	r3, [r4, #12]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f000 80ad 	beq.w	8001b72 <HAL_RCC_OscConfig+0x206>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001a18:	4985      	ldr	r1, [pc, #532]	; (8001c30 <HAL_RCC_OscConfig+0x2c4>)
 8001a1a:	680a      	ldr	r2, [r1, #0]
 8001a1c:	f022 0219 	bic.w	r2, r2, #25
 8001a20:	4313      	orrs	r3, r2
 8001a22:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a24:	f7fe fe22 	bl	800066c <HAL_GetTick>
 8001a28:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a2a:	4b81      	ldr	r3, [pc, #516]	; (8001c30 <HAL_RCC_OscConfig+0x2c4>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f013 0f04 	tst.w	r3, #4
 8001a32:	f040 808e 	bne.w	8001b52 <HAL_RCC_OscConfig+0x1e6>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a36:	f7fe fe19 	bl	800066c <HAL_GetTick>
 8001a3a:	1b40      	subs	r0, r0, r5
 8001a3c:	2802      	cmp	r0, #2
 8001a3e:	d9f4      	bls.n	8001a2a <HAL_RCC_OscConfig+0xbe>
          {
            return HAL_TIMEOUT;
 8001a40:	2003      	movs	r0, #3
 8001a42:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a44:	4a7a      	ldr	r2, [pc, #488]	; (8001c30 <HAL_RCC_OscConfig+0x2c4>)
 8001a46:	6813      	ldr	r3, [r2, #0]
 8001a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a4c:	6013      	str	r3, [r2, #0]
 8001a4e:	e7ae      	b.n	80019ae <HAL_RCC_OscConfig+0x42>
 8001a50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a54:	d009      	beq.n	8001a6a <HAL_RCC_OscConfig+0xfe>
 8001a56:	4b76      	ldr	r3, [pc, #472]	; (8001c30 <HAL_RCC_OscConfig+0x2c4>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	e7a1      	b.n	80019ae <HAL_RCC_OscConfig+0x42>
 8001a6a:	4b71      	ldr	r3, [pc, #452]	; (8001c30 <HAL_RCC_OscConfig+0x2c4>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	e797      	b.n	80019ae <HAL_RCC_OscConfig+0x42>
        tickstart = HAL_GetTick();
 8001a7e:	f7fe fdf5 	bl	800066c <HAL_GetTick>
 8001a82:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a84:	4b6a      	ldr	r3, [pc, #424]	; (8001c30 <HAL_RCC_OscConfig+0x2c4>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001a8c:	d0b0      	beq.n	80019f0 <HAL_RCC_OscConfig+0x84>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a8e:	f7fe fded 	bl	800066c <HAL_GetTick>
 8001a92:	1b40      	subs	r0, r0, r5
 8001a94:	2864      	cmp	r0, #100	; 0x64
 8001a96:	d9f5      	bls.n	8001a84 <HAL_RCC_OscConfig+0x118>
            return HAL_TIMEOUT;
 8001a98:	2003      	movs	r0, #3
 8001a9a:	bd38      	pop	{r3, r4, r5, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001a9c:	4b64      	ldr	r3, [pc, #400]	; (8001c30 <HAL_RCC_OscConfig+0x2c4>)
 8001a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa0:	f013 0f03 	tst.w	r3, #3
 8001aa4:	d1b4      	bne.n	8001a10 <HAL_RCC_OscConfig+0xa4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001aa6:	4b62      	ldr	r3, [pc, #392]	; (8001c30 <HAL_RCC_OscConfig+0x2c4>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f013 0f04 	tst.w	r3, #4
 8001aae:	d003      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x14c>
 8001ab0:	68e3      	ldr	r3, [r4, #12]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f000 8212 	beq.w	8001edc <HAL_RCC_OscConfig+0x570>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001ab8:	4a5d      	ldr	r2, [pc, #372]	; (8001c30 <HAL_RCC_OscConfig+0x2c4>)
 8001aba:	6813      	ldr	r3, [r2, #0]
 8001abc:	f023 0319 	bic.w	r3, r3, #25
 8001ac0:	68e1      	ldr	r1, [r4, #12]
 8001ac2:	430b      	orrs	r3, r1
 8001ac4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001ac6:	f7fe fdd1 	bl	800066c <HAL_GetTick>
 8001aca:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001acc:	4b58      	ldr	r3, [pc, #352]	; (8001c30 <HAL_RCC_OscConfig+0x2c4>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f013 0f04 	tst.w	r3, #4
 8001ad4:	d106      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x178>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ad6:	f7fe fdc9 	bl	800066c <HAL_GetTick>
 8001ada:	1b40      	subs	r0, r0, r5
 8001adc:	2802      	cmp	r0, #2
 8001ade:	d9f5      	bls.n	8001acc <HAL_RCC_OscConfig+0x160>
            return HAL_TIMEOUT;
 8001ae0:	2003      	movs	r0, #3
 8001ae2:	bd38      	pop	{r3, r4, r5, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae4:	4852      	ldr	r0, [pc, #328]	; (8001c30 <HAL_RCC_OscConfig+0x2c4>)
 8001ae6:	6843      	ldr	r3, [r0, #4]
 8001ae8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001aec:	6921      	ldr	r1, [r4, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aee:	f44f 327c 	mov.w	r2, #258048	; 0x3f000
 8001af2:	fa92 f2a2 	rbit	r2, r2
 8001af6:	fab2 f282 	clz	r2, r2
 8001afa:	fa01 f202 	lsl.w	r2, r1, r2
 8001afe:	4313      	orrs	r3, r2
 8001b00:	6043      	str	r3, [r0, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001b02:	6823      	ldr	r3, [r4, #0]
 8001b04:	f013 0f10 	tst.w	r3, #16
 8001b08:	d066      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x26c>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_CSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001b0a:	4b49      	ldr	r3, [pc, #292]	; (8001c30 <HAL_RCC_OscConfig+0x2c4>)
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b12:	2b08      	cmp	r3, #8
 8001b14:	d047      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x23a>
 8001b16:	4b46      	ldr	r3, [pc, #280]	; (8001c30 <HAL_RCC_OscConfig+0x2c4>)
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b1e:	2b18      	cmp	r3, #24
 8001b20:	d03b      	beq.n	8001b9a <HAL_RCC_OscConfig+0x22e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001b22:	69e3      	ldr	r3, [r4, #28]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f000 8085 	beq.w	8001c34 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001b2a:	4a41      	ldr	r2, [pc, #260]	; (8001c30 <HAL_RCC_OscConfig+0x2c4>)
 8001b2c:	6813      	ldr	r3, [r2, #0]
 8001b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b34:	f7fe fd9a 	bl	800066c <HAL_GetTick>
 8001b38:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 8001b3a:	4b3d      	ldr	r3, [pc, #244]	; (8001c30 <HAL_RCC_OscConfig+0x2c4>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001b42:	d164      	bne.n	8001c0e <HAL_RCC_OscConfig+0x2a2>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001b44:	f7fe fd92 	bl	800066c <HAL_GetTick>
 8001b48:	1b40      	subs	r0, r0, r5
 8001b4a:	2802      	cmp	r0, #2
 8001b4c:	d9f5      	bls.n	8001b3a <HAL_RCC_OscConfig+0x1ce>
          {
            return HAL_TIMEOUT;
 8001b4e:	2003      	movs	r0, #3
 8001b50:	bd38      	pop	{r3, r4, r5, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b52:	4837      	ldr	r0, [pc, #220]	; (8001c30 <HAL_RCC_OscConfig+0x2c4>)
 8001b54:	6843      	ldr	r3, [r0, #4]
 8001b56:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001b5a:	6921      	ldr	r1, [r4, #16]
 8001b5c:	f44f 327c 	mov.w	r2, #258048	; 0x3f000
 8001b60:	fa92 f2a2 	rbit	r2, r2
 8001b64:	fab2 f282 	clz	r2, r2
 8001b68:	fa01 f202 	lsl.w	r2, r1, r2
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	6043      	str	r3, [r0, #4]
 8001b70:	e7c7      	b.n	8001b02 <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_HSI_DISABLE();
 8001b72:	4a2f      	ldr	r2, [pc, #188]	; (8001c30 <HAL_RCC_OscConfig+0x2c4>)
 8001b74:	6813      	ldr	r3, [r2, #0]
 8001b76:	f023 0301 	bic.w	r3, r3, #1
 8001b7a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001b7c:	f7fe fd76 	bl	800066c <HAL_GetTick>
 8001b80:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b82:	4b2b      	ldr	r3, [pc, #172]	; (8001c30 <HAL_RCC_OscConfig+0x2c4>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f013 0f04 	tst.w	r3, #4
 8001b8a:	d0ba      	beq.n	8001b02 <HAL_RCC_OscConfig+0x196>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b8c:	f7fe fd6e 	bl	800066c <HAL_GetTick>
 8001b90:	1b40      	subs	r0, r0, r5
 8001b92:	2802      	cmp	r0, #2
 8001b94:	d9f5      	bls.n	8001b82 <HAL_RCC_OscConfig+0x216>
            return HAL_TIMEOUT;
 8001b96:	2003      	movs	r0, #3
 8001b98:	bd38      	pop	{r3, r4, r5, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_CSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001b9a:	4b25      	ldr	r3, [pc, #148]	; (8001c30 <HAL_RCC_OscConfig+0x2c4>)
 8001b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d1bd      	bne.n	8001b22 <HAL_RCC_OscConfig+0x1b6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ba6:	4b22      	ldr	r3, [pc, #136]	; (8001c30 <HAL_RCC_OscConfig+0x2c4>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001bae:	d004      	beq.n	8001bba <HAL_RCC_OscConfig+0x24e>
 8001bb0:	69e3      	ldr	r3, [r4, #28]
 8001bb2:	2b80      	cmp	r3, #128	; 0x80
 8001bb4:	d001      	beq.n	8001bba <HAL_RCC_OscConfig+0x24e>
        return HAL_ERROR;
 8001bb6:	2001      	movs	r0, #1
 8001bb8:	bd38      	pop	{r3, r4, r5, pc}
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001bba:	481d      	ldr	r0, [pc, #116]	; (8001c30 <HAL_RCC_OscConfig+0x2c4>)
 8001bbc:	6843      	ldr	r3, [r0, #4]
 8001bbe:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001bc2:	6a21      	ldr	r1, [r4, #32]
 8001bc4:	f04f 42f8 	mov.w	r2, #2080374784	; 0x7c000000
 8001bc8:	fa92 f2a2 	rbit	r2, r2
 8001bcc:	fab2 f282 	clz	r2, r2
 8001bd0:	fa01 f202 	lsl.w	r2, r1, r2
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	6043      	str	r3, [r0, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bd8:	6823      	ldr	r3, [r4, #0]
 8001bda:	f013 0f08 	tst.w	r3, #8
 8001bde:	d051      	beq.n	8001c84 <HAL_RCC_OscConfig+0x318>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001be0:	6963      	ldr	r3, [r4, #20]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d03a      	beq.n	8001c5c <HAL_RCC_OscConfig+0x2f0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001be6:	4a12      	ldr	r2, [pc, #72]	; (8001c30 <HAL_RCC_OscConfig+0x2c4>)
 8001be8:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf0:	f7fe fd3c 	bl	800066c <HAL_GetTick>
 8001bf4:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bf6:	4b0e      	ldr	r3, [pc, #56]	; (8001c30 <HAL_RCC_OscConfig+0x2c4>)
 8001bf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bfa:	f013 0f02 	tst.w	r3, #2
 8001bfe:	d141      	bne.n	8001c84 <HAL_RCC_OscConfig+0x318>
      {
        if((int32_t) (HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c00:	f7fe fd34 	bl	800066c <HAL_GetTick>
 8001c04:	1b40      	subs	r0, r0, r5
 8001c06:	2802      	cmp	r0, #2
 8001c08:	d9f5      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x28a>
        {
          return HAL_TIMEOUT;
 8001c0a:	2003      	movs	r0, #3
 8001c0c:	bd38      	pop	{r3, r4, r5, pc}
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c0e:	4808      	ldr	r0, [pc, #32]	; (8001c30 <HAL_RCC_OscConfig+0x2c4>)
 8001c10:	6843      	ldr	r3, [r0, #4]
 8001c12:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001c16:	6a21      	ldr	r1, [r4, #32]
 8001c18:	f04f 42f8 	mov.w	r2, #2080374784	; 0x7c000000
 8001c1c:	fa92 f2a2 	rbit	r2, r2
 8001c20:	fab2 f282 	clz	r2, r2
 8001c24:	fa01 f202 	lsl.w	r2, r1, r2
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	6043      	str	r3, [r0, #4]
 8001c2c:	e7d4      	b.n	8001bd8 <HAL_RCC_OscConfig+0x26c>
 8001c2e:	bf00      	nop
 8001c30:	58024400 	.word	0x58024400
        __HAL_RCC_CSI_DISABLE();
 8001c34:	4aac      	ldr	r2, [pc, #688]	; (8001ee8 <HAL_RCC_OscConfig+0x57c>)
 8001c36:	6813      	ldr	r3, [r2, #0]
 8001c38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c3c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001c3e:	f7fe fd15 	bl	800066c <HAL_GetTick>
 8001c42:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
 8001c44:	4ba8      	ldr	r3, [pc, #672]	; (8001ee8 <HAL_RCC_OscConfig+0x57c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001c4c:	d0c4      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x26c>
          if((int32_t) (HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001c4e:	f7fe fd0d 	bl	800066c <HAL_GetTick>
 8001c52:	1b40      	subs	r0, r0, r5
 8001c54:	2802      	cmp	r0, #2
 8001c56:	d9f5      	bls.n	8001c44 <HAL_RCC_OscConfig+0x2d8>
            return HAL_TIMEOUT;
 8001c58:	2003      	movs	r0, #3
 8001c5a:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c5c:	4aa2      	ldr	r2, [pc, #648]	; (8001ee8 <HAL_RCC_OscConfig+0x57c>)
 8001c5e:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8001c60:	f023 0301 	bic.w	r3, r3, #1
 8001c64:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c66:	f7fe fd01 	bl	800066c <HAL_GetTick>
 8001c6a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c6c:	4b9e      	ldr	r3, [pc, #632]	; (8001ee8 <HAL_RCC_OscConfig+0x57c>)
 8001c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c70:	f013 0f02 	tst.w	r3, #2
 8001c74:	d006      	beq.n	8001c84 <HAL_RCC_OscConfig+0x318>
      {
        if((int32_t) (HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c76:	f7fe fcf9 	bl	800066c <HAL_GetTick>
 8001c7a:	1b40      	subs	r0, r0, r5
 8001c7c:	2802      	cmp	r0, #2
 8001c7e:	d9f5      	bls.n	8001c6c <HAL_RCC_OscConfig+0x300>
        {
          return HAL_TIMEOUT;
 8001c80:	2003      	movs	r0, #3
 8001c82:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c84:	6823      	ldr	r3, [r4, #0]
 8001c86:	f013 0f20 	tst.w	r3, #32
 8001c8a:	d029      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x374>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
    
    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001c8c:	69a3      	ldr	r3, [r4, #24]
 8001c8e:	b19b      	cbz	r3, 8001cb8 <HAL_RCC_OscConfig+0x34c>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c90:	4a95      	ldr	r2, [pc, #596]	; (8001ee8 <HAL_RCC_OscConfig+0x57c>)
 8001c92:	6813      	ldr	r3, [r2, #0]
 8001c94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c98:	6013      	str	r3, [r2, #0]
      
      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c9a:	f7fe fce7 	bl	800066c <HAL_GetTick>
 8001c9e:	4605      	mov	r5, r0
      
      /* Wait till HSI48 is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001ca0:	4b91      	ldr	r3, [pc, #580]	; (8001ee8 <HAL_RCC_OscConfig+0x57c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8001ca8:	d11a      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001caa:	f7fe fcdf 	bl	800066c <HAL_GetTick>
 8001cae:	1b40      	subs	r0, r0, r5
 8001cb0:	2802      	cmp	r0, #2
 8001cb2:	d9f5      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x334>
        {
          return HAL_TIMEOUT;
 8001cb4:	2003      	movs	r0, #3
 8001cb6:	bd38      	pop	{r3, r4, r5, pc}
      } 
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001cb8:	4a8b      	ldr	r2, [pc, #556]	; (8001ee8 <HAL_RCC_OscConfig+0x57c>)
 8001cba:	6813      	ldr	r3, [r2, #0]
 8001cbc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001cc0:	6013      	str	r3, [r2, #0]
      
      /* Get time-out */
      tickstart = HAL_GetTick();
 8001cc2:	f7fe fcd3 	bl	800066c <HAL_GetTick>
 8001cc6:	4605      	mov	r5, r0
      
      /* Wait till HSI48 is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001cc8:	4b87      	ldr	r3, [pc, #540]	; (8001ee8 <HAL_RCC_OscConfig+0x57c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8001cd0:	d006      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001cd2:	f7fe fccb 	bl	800066c <HAL_GetTick>
 8001cd6:	1b40      	subs	r0, r0, r5
 8001cd8:	2802      	cmp	r0, #2
 8001cda:	d9f5      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x35c>
        {
          return HAL_TIMEOUT;
 8001cdc:	2003      	movs	r0, #3
 8001cde:	bd38      	pop	{r3, r4, r5, pc}
        }      
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ce0:	6823      	ldr	r3, [r4, #0]
 8001ce2:	f013 0f04 	tst.w	r3, #4
 8001ce6:	d121      	bne.n	8001d2c <HAL_RCC_OscConfig+0x3c0>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ce8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f000 80f8 	beq.w	8001ee0 <HAL_RCC_OscConfig+0x574>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001cf0:	4a7d      	ldr	r2, [pc, #500]	; (8001ee8 <HAL_RCC_OscConfig+0x57c>)
 8001cf2:	6912      	ldr	r2, [r2, #16]
 8001cf4:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8001cf8:	2a18      	cmp	r2, #24
 8001cfa:	f000 80f3 	beq.w	8001ee4 <HAL_RCC_OscConfig+0x578>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d075      	beq.n	8001dee <HAL_RCC_OscConfig+0x482>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d02:	4a79      	ldr	r2, [pc, #484]	; (8001ee8 <HAL_RCC_OscConfig+0x57c>)
 8001d04:	6813      	ldr	r3, [r2, #0]
 8001d06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d0c:	f7fe fcae 	bl	800066c <HAL_GetTick>
 8001d10:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d12:	4b75      	ldr	r3, [pc, #468]	; (8001ee8 <HAL_RCC_OscConfig+0x57c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001d1a:	f000 80db 	beq.w	8001ed4 <HAL_RCC_OscConfig+0x568>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d1e:	f7fe fca5 	bl	800066c <HAL_GetTick>
 8001d22:	1b00      	subs	r0, r0, r4
 8001d24:	2802      	cmp	r0, #2
 8001d26:	d9f4      	bls.n	8001d12 <HAL_RCC_OscConfig+0x3a6>
          {
            return HAL_TIMEOUT;
 8001d28:	2003      	movs	r0, #3
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001d2a:	bd38      	pop	{r3, r4, r5, pc}
    PWR->CR1 |= PWR_CR1_DBP;
 8001d2c:	4a6f      	ldr	r2, [pc, #444]	; (8001eec <HAL_RCC_OscConfig+0x580>)
 8001d2e:	6813      	ldr	r3, [r2, #0]
 8001d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d34:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001d36:	f7fe fc99 	bl	800066c <HAL_GetTick>
 8001d3a:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001d3c:	4b6b      	ldr	r3, [pc, #428]	; (8001eec <HAL_RCC_OscConfig+0x580>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001d44:	d106      	bne.n	8001d54 <HAL_RCC_OscConfig+0x3e8>
      if((int32_t) (HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001d46:	f7fe fc91 	bl	800066c <HAL_GetTick>
 8001d4a:	1b40      	subs	r0, r0, r5
 8001d4c:	2864      	cmp	r0, #100	; 0x64
 8001d4e:	d9f5      	bls.n	8001d3c <HAL_RCC_OscConfig+0x3d0>
        return HAL_TIMEOUT;
 8001d50:	2003      	movs	r0, #3
 8001d52:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d54:	68a3      	ldr	r3, [r4, #8]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d01c      	beq.n	8001d94 <HAL_RCC_OscConfig+0x428>
 8001d5a:	bb0b      	cbnz	r3, 8001da0 <HAL_RCC_OscConfig+0x434>
 8001d5c:	4b62      	ldr	r3, [pc, #392]	; (8001ee8 <HAL_RCC_OscConfig+0x57c>)
 8001d5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001d60:	f022 0201 	bic.w	r2, r2, #1
 8001d64:	671a      	str	r2, [r3, #112]	; 0x70
 8001d66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001d68:	f022 0204 	bic.w	r2, r2, #4
 8001d6c:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d6e:	68a3      	ldr	r3, [r4, #8]
 8001d70:	b363      	cbz	r3, 8001dcc <HAL_RCC_OscConfig+0x460>
      tickstart = HAL_GetTick();
 8001d72:	f7fe fc7b 	bl	800066c <HAL_GetTick>
 8001d76:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d78:	4b5b      	ldr	r3, [pc, #364]	; (8001ee8 <HAL_RCC_OscConfig+0x57c>)
 8001d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7c:	f013 0f02 	tst.w	r3, #2
 8001d80:	d1b2      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x37c>
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d82:	f7fe fc73 	bl	800066c <HAL_GetTick>
 8001d86:	1b40      	subs	r0, r0, r5
 8001d88:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d8c:	4298      	cmp	r0, r3
 8001d8e:	d9f3      	bls.n	8001d78 <HAL_RCC_OscConfig+0x40c>
          return HAL_TIMEOUT;
 8001d90:	2003      	movs	r0, #3
 8001d92:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d94:	4a54      	ldr	r2, [pc, #336]	; (8001ee8 <HAL_RCC_OscConfig+0x57c>)
 8001d96:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d9e:	e7e6      	b.n	8001d6e <HAL_RCC_OscConfig+0x402>
 8001da0:	2b05      	cmp	r3, #5
 8001da2:	d009      	beq.n	8001db8 <HAL_RCC_OscConfig+0x44c>
 8001da4:	4b50      	ldr	r3, [pc, #320]	; (8001ee8 <HAL_RCC_OscConfig+0x57c>)
 8001da6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001da8:	f022 0201 	bic.w	r2, r2, #1
 8001dac:	671a      	str	r2, [r3, #112]	; 0x70
 8001dae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001db0:	f022 0204 	bic.w	r2, r2, #4
 8001db4:	671a      	str	r2, [r3, #112]	; 0x70
 8001db6:	e7da      	b.n	8001d6e <HAL_RCC_OscConfig+0x402>
 8001db8:	4b4b      	ldr	r3, [pc, #300]	; (8001ee8 <HAL_RCC_OscConfig+0x57c>)
 8001dba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001dbc:	f042 0204 	orr.w	r2, r2, #4
 8001dc0:	671a      	str	r2, [r3, #112]	; 0x70
 8001dc2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001dc4:	f042 0201 	orr.w	r2, r2, #1
 8001dc8:	671a      	str	r2, [r3, #112]	; 0x70
 8001dca:	e7d0      	b.n	8001d6e <HAL_RCC_OscConfig+0x402>
      tickstart = HAL_GetTick();
 8001dcc:	f7fe fc4e 	bl	800066c <HAL_GetTick>
 8001dd0:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dd2:	4b45      	ldr	r3, [pc, #276]	; (8001ee8 <HAL_RCC_OscConfig+0x57c>)
 8001dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd6:	f013 0f02 	tst.w	r3, #2
 8001dda:	d085      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x37c>
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ddc:	f7fe fc46 	bl	800066c <HAL_GetTick>
 8001de0:	1b40      	subs	r0, r0, r5
 8001de2:	f241 3388 	movw	r3, #5000	; 0x1388
 8001de6:	4298      	cmp	r0, r3
 8001de8:	d9f3      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x466>
          return HAL_TIMEOUT;
 8001dea:	2003      	movs	r0, #3
 8001dec:	bd38      	pop	{r3, r4, r5, pc}
        __HAL_RCC_PLL_DISABLE();
 8001dee:	4a3e      	ldr	r2, [pc, #248]	; (8001ee8 <HAL_RCC_OscConfig+0x57c>)
 8001df0:	6813      	ldr	r3, [r2, #0]
 8001df2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001df6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001df8:	f7fe fc38 	bl	800066c <HAL_GetTick>
 8001dfc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dfe:	4b3a      	ldr	r3, [pc, #232]	; (8001ee8 <HAL_RCC_OscConfig+0x57c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001e06:	d006      	beq.n	8001e16 <HAL_RCC_OscConfig+0x4aa>
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e08:	f7fe fc30 	bl	800066c <HAL_GetTick>
 8001e0c:	1b40      	subs	r0, r0, r5
 8001e0e:	2802      	cmp	r0, #2
 8001e10:	d9f5      	bls.n	8001dfe <HAL_RCC_OscConfig+0x492>
            return HAL_TIMEOUT;
 8001e12:	2003      	movs	r0, #3
 8001e14:	bd38      	pop	{r3, r4, r5, pc}
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e16:	4b34      	ldr	r3, [pc, #208]	; (8001ee8 <HAL_RCC_OscConfig+0x57c>)
 8001e18:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001e1a:	4a35      	ldr	r2, [pc, #212]	; (8001ef0 <HAL_RCC_OscConfig+0x584>)
 8001e1c:	400a      	ands	r2, r1
 8001e1e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001e20:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001e22:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8001e26:	430a      	orrs	r2, r1
 8001e28:	629a      	str	r2, [r3, #40]	; 0x28
 8001e2a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001e2c:	3a01      	subs	r2, #1
 8001e2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001e34:	3901      	subs	r1, #1
 8001e36:	0249      	lsls	r1, r1, #9
 8001e38:	b289      	uxth	r1, r1
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001e3e:	3901      	subs	r1, #1
 8001e40:	0409      	lsls	r1, r1, #16
 8001e42:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8001e46:	430a      	orrs	r2, r1
 8001e48:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001e4a:	3901      	subs	r1, #1
 8001e4c:	0609      	lsls	r1, r1, #24
 8001e4e:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8001e52:	430a      	orrs	r2, r1
 8001e54:	631a      	str	r2, [r3, #48]	; 0x30
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001e56:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e58:	4a26      	ldr	r2, [pc, #152]	; (8001ef4 <HAL_RCC_OscConfig+0x588>)
 8001e5a:	400a      	ands	r2, r1
 8001e5c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001e5e:	f64f 71f8 	movw	r1, #65528	; 0xfff8
 8001e62:	fa91 f1a1 	rbit	r1, r1
 8001e66:	fab1 f181 	clz	r1, r1
 8001e6a:	fa00 f101 	lsl.w	r1, r0, r1
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e74:	f022 020c 	bic.w	r2, r2, #12
 8001e78:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e80:	f022 0202 	bic.w	r2, r2, #2
 8001e84:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001e86:	430a      	orrs	r2, r1
 8001e88:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e8c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001e90:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e94:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001e98:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e9c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001ea0:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8001ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ea4:	f042 0201 	orr.w	r2, r2, #1
 8001ea8:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001eb0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001eb2:	f7fe fbdb 	bl	800066c <HAL_GetTick>
 8001eb6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <HAL_RCC_OscConfig+0x57c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001ec0:	d106      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x564>
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ec2:	f7fe fbd3 	bl	800066c <HAL_GetTick>
 8001ec6:	1b00      	subs	r0, r0, r4
 8001ec8:	2802      	cmp	r0, #2
 8001eca:	d9f5      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x54c>
            return HAL_TIMEOUT;
 8001ecc:	2003      	movs	r0, #3
 8001ece:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8001ed0:	2000      	movs	r0, #0
 8001ed2:	bd38      	pop	{r3, r4, r5, pc}
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 8001ed8:	2001      	movs	r0, #1
 8001eda:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 8001edc:	2001      	movs	r0, #1
 8001ede:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8001ee0:	2000      	movs	r0, #0
 8001ee2:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	bd38      	pop	{r3, r4, r5, pc}
 8001ee8:	58024400 	.word	0x58024400
 8001eec:	58024800 	.word	0x58024800
 8001ef0:	fffffc0c 	.word	0xfffffc0c
 8001ef4:	ffff0007 	.word	0xffff0007

08001ef8 <HAL_RCC_GetSysClockFreq>:
 uint32_t pllp = 1, pllsource = 0, pllm = 1 ,pllfracen =0 , hsivalue = 0;
 float fracn1=0, pllvco = 0;
 uint32_t sysclockfreq = 0;
  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ef8:	4b6d      	ldr	r3, [pc, #436]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f00:	2b10      	cmp	r3, #16
 8001f02:	f000 80d2 	beq.w	80020aa <HAL_RCC_GetSysClockFreq+0x1b2>
 8001f06:	2b18      	cmp	r3, #24
 8001f08:	d010      	beq.n	8001f2c <HAL_RCC_GetSysClockFreq+0x34>
 8001f0a:	b10b      	cbz	r3, 8001f10 <HAL_RCC_GetSysClockFreq+0x18>
      }
      
    break;

  case 0x08:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001f0c:	4869      	ldr	r0, [pc, #420]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001f0e:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f10:	4b67      	ldr	r3, [pc, #412]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f013 0f20 	tst.w	r3, #32
 8001f18:	d101      	bne.n	8001f1e <HAL_RCC_GetSysClockFreq+0x26>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001f1a:	4867      	ldr	r0, [pc, #412]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x1c0>)
  default:
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
 8001f1c:	4770      	bx	lr
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001f1e:	4b64      	ldr	r3, [pc, #400]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8001f26:	4864      	ldr	r0, [pc, #400]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001f28:	40d8      	lsrs	r0, r3
 8001f2a:	4770      	bx	lr
{
 8001f2c:	b4f0      	push	{r4, r5, r6, r7}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001f2e:	4d60      	ldr	r5, [pc, #384]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f30:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8001f32:	f004 0403 	and.w	r4, r4, #3
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001f36:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 8001f38:	f3c7 1705 	ubfx	r7, r7, #4, #6
    pllfracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8001f3c:	6aee      	ldr	r6, [r5, #44]	; 0x2c
 8001f3e:	f006 0601 	and.w	r6, r6, #1
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001f42:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001f44:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8001f48:	fb03 f306 	mul.w	r3, r3, r6
 8001f4c:	ee07 3a90 	vmov	s15, r3
 8001f50:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8001f54:	2c01      	cmp	r4, #1
 8001f56:	d060      	beq.n	800201a <HAL_RCC_GetSysClockFreq+0x122>
 8001f58:	b1f4      	cbz	r4, 8001f98 <HAL_RCC_GetSysClockFreq+0xa0>
 8001f5a:	2c02      	cmp	r4, #2
 8001f5c:	f000 8089 	beq.w	8002072 <HAL_RCC_GetSysClockFreq+0x17a>
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8001f60:	4b54      	ldr	r3, [pc, #336]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001f62:	fbb3 f3f7 	udiv	r3, r3, r7
 8001f66:	ee07 3a10 	vmov	s14, r3
 8001f6a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001f6e:	4b50      	ldr	r3, [pc, #320]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f76:	eddf 6a51 	vldr	s13, [pc, #324]	; 80020bc <HAL_RCC_GetSysClockFreq+0x1c4>
 8001f7a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001f7e:	ee06 3a90 	vmov	s13, r3
 8001f82:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8001f86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f92:	ee27 7a27 	vmul.f32	s14, s14, s15
      break;
 8001f96:	e05b      	b.n	8002050 <HAL_RCC_GetSysClockFreq+0x158>
     if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f98:	4b45      	ldr	r3, [pc, #276]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f013 0f20 	tst.w	r3, #32
 8001fa0:	d01f      	beq.n	8001fe2 <HAL_RCC_GetSysClockFreq+0xea>
        hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001fa2:	4a43      	ldr	r2, [pc, #268]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001fa4:	6813      	ldr	r3, [r2, #0]
 8001fa6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8001faa:	4843      	ldr	r0, [pc, #268]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001fac:	40d8      	lsrs	r0, r3
        pllvco = ( hsivalue / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8001fae:	fbb0 f3f7 	udiv	r3, r0, r7
 8001fb2:	ee07 3a10 	vmov	s14, r3
 8001fb6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001fba:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001fbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fc0:	eddf 6a3e 	vldr	s13, [pc, #248]	; 80020bc <HAL_RCC_GetSysClockFreq+0x1c4>
 8001fc4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001fc8:	ee06 3a90 	vmov	s13, r3
 8001fcc:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8001fd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fd4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001fd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fe0:	e036      	b.n	8002050 <HAL_RCC_GetSysClockFreq+0x158>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8001fe2:	4835      	ldr	r0, [pc, #212]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001fe4:	fbb0 f3f7 	udiv	r3, r0, r7
 8001fe8:	ee07 3a10 	vmov	s14, r3
 8001fec:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001ff0:	4b2f      	ldr	r3, [pc, #188]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ff8:	eddf 6a30 	vldr	s13, [pc, #192]	; 80020bc <HAL_RCC_GetSysClockFreq+0x1c4>
 8001ffc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002000:	ee06 3a90 	vmov	s13, r3
 8002004:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8002008:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800200c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002010:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002014:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002018:	e01a      	b.n	8002050 <HAL_RCC_GetSysClockFreq+0x158>
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 800201a:	4926      	ldr	r1, [pc, #152]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800201c:	fbb1 f3f7 	udiv	r3, r1, r7
 8002020:	ee07 3a10 	vmov	s14, r3
 8002024:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002028:	4b21      	ldr	r3, [pc, #132]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800202a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002030:	eddf 6a22 	vldr	s13, [pc, #136]	; 80020bc <HAL_RCC_GetSysClockFreq+0x1c4>
 8002034:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002038:	ee06 3a90 	vmov	s13, r3
 800203c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8002040:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002044:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002048:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800204c:	ee27 7a27 	vmul.f32	s14, s14, s15
    pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1 ) ;
 8002050:	4b17      	ldr	r3, [pc, #92]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002054:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002058:	3301      	adds	r3, #1
    sysclockfreq =  (uint32_t)(pllvco/pllp);
 800205a:	ee07 3a90 	vmov	s15, r3
 800205e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002062:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002066:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800206a:	ee17 0a90 	vmov	r0, s15
}
 800206e:	bcf0      	pop	{r4, r5, r6, r7}
 8002070:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8002072:	4a13      	ldr	r2, [pc, #76]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x1c8>)
 8002074:	fbb2 f3f7 	udiv	r3, r2, r7
 8002078:	ee07 3a10 	vmov	s14, r3
 800207c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002080:	4b0b      	ldr	r3, [pc, #44]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002084:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002088:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80020bc <HAL_RCC_GetSysClockFreq+0x1c4>
 800208c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002090:	ee06 3a90 	vmov	s13, r3
 8002094:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8002098:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800209c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80020a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80020a4:	ee27 7a27 	vmul.f32	s14, s14, s15
      break;
 80020a8:	e7d2      	b.n	8002050 <HAL_RCC_GetSysClockFreq+0x158>
    sysclockfreq = HSE_VALUE;
 80020aa:	4805      	ldr	r0, [pc, #20]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x1c8>)
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	58024400 	.word	0x58024400
 80020b4:	003d0900 	.word	0x003d0900
 80020b8:	03d09000 	.word	0x03d09000
 80020bc:	39000000 	.word	0x39000000
 80020c0:	007a1200 	.word	0x007a1200

080020c4 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80020c4:	4b77      	ldr	r3, [pc, #476]	; (80022a4 <HAL_RCC_ClockConfig+0x1e0>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0307 	and.w	r3, r3, #7
 80020cc:	428b      	cmp	r3, r1
 80020ce:	d20c      	bcs.n	80020ea <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020d0:	4a74      	ldr	r2, [pc, #464]	; (80022a4 <HAL_RCC_ClockConfig+0x1e0>)
 80020d2:	6813      	ldr	r3, [r2, #0]
 80020d4:	f023 0307 	bic.w	r3, r3, #7
 80020d8:	430b      	orrs	r3, r1
 80020da:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020dc:	6813      	ldr	r3, [r2, #0]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	4299      	cmp	r1, r3
 80020e4:	d001      	beq.n	80020ea <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
 80020e6:	2001      	movs	r0, #1
 80020e8:	4770      	bx	lr
{
 80020ea:	b570      	push	{r4, r5, r6, lr}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020ec:	6803      	ldr	r3, [r0, #0]
 80020ee:	f013 0f02 	tst.w	r3, #2
 80020f2:	d006      	beq.n	8002102 <HAL_RCC_ClockConfig+0x3e>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f4:	4a6c      	ldr	r2, [pc, #432]	; (80022a8 <HAL_RCC_ClockConfig+0x1e4>)
 80020f6:	6993      	ldr	r3, [r2, #24]
 80020f8:	f023 030f 	bic.w	r3, r3, #15
 80020fc:	68c4      	ldr	r4, [r0, #12]
 80020fe:	4323      	orrs	r3, r4
 8002100:	6193      	str	r3, [r2, #24]
 8002102:	460d      	mov	r5, r1
 8002104:	4604      	mov	r4, r0
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002106:	6803      	ldr	r3, [r0, #0]
 8002108:	f013 0f01 	tst.w	r3, #1
 800210c:	d072      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x130>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800210e:	4a66      	ldr	r2, [pc, #408]	; (80022a8 <HAL_RCC_ClockConfig+0x1e4>)
 8002110:	6993      	ldr	r3, [r2, #24]
 8002112:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002116:	6881      	ldr	r1, [r0, #8]
 8002118:	430b      	orrs	r3, r1
 800211a:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800211c:	6843      	ldr	r3, [r0, #4]
 800211e:	2b02      	cmp	r3, #2
 8002120:	d027      	beq.n	8002172 <HAL_RCC_ClockConfig+0xae>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002122:	2b03      	cmp	r3, #3
 8002124:	d02b      	beq.n	800217e <HAL_RCC_ClockConfig+0xba>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002126:	2b01      	cmp	r3, #1
 8002128:	d030      	beq.n	800218c <HAL_RCC_ClockConfig+0xc8>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800212a:	4a5f      	ldr	r2, [pc, #380]	; (80022a8 <HAL_RCC_ClockConfig+0x1e4>)
 800212c:	6812      	ldr	r2, [r2, #0]
 800212e:	f012 0f04 	tst.w	r2, #4
 8002132:	f000 80b5 	beq.w	80022a0 <HAL_RCC_ClockConfig+0x1dc>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002136:	495c      	ldr	r1, [pc, #368]	; (80022a8 <HAL_RCC_ClockConfig+0x1e4>)
 8002138:	690a      	ldr	r2, [r1, #16]
 800213a:	f022 0207 	bic.w	r2, r2, #7
 800213e:	4313      	orrs	r3, r2
 8002140:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 8002142:	f7fe fa93 	bl	800066c <HAL_GetTick>
 8002146:	4606      	mov	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002148:	6863      	ldr	r3, [r4, #4]
 800214a:	2b02      	cmp	r3, #2
 800214c:	d025      	beq.n	800219a <HAL_RCC_ClockConfig+0xd6>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800214e:	2b03      	cmp	r3, #3
 8002150:	d032      	beq.n	80021b8 <HAL_RCC_ClockConfig+0xf4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002152:	2b01      	cmp	r3, #1
 8002154:	d03f      	beq.n	80021d6 <HAL_RCC_ClockConfig+0x112>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8002156:	4b54      	ldr	r3, [pc, #336]	; (80022a8 <HAL_RCC_ClockConfig+0x1e4>)
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	f013 0f38 	tst.w	r3, #56	; 0x38
 800215e:	d049      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x130>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002160:	f7fe fa84 	bl	800066c <HAL_GetTick>
 8002164:	1b80      	subs	r0, r0, r6
 8002166:	f241 3388 	movw	r3, #5000	; 0x1388
 800216a:	4298      	cmp	r0, r3
 800216c:	d9f3      	bls.n	8002156 <HAL_RCC_ClockConfig+0x92>
            return HAL_TIMEOUT;
 800216e:	2003      	movs	r0, #3
 8002170:	bd70      	pop	{r4, r5, r6, pc}
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002172:	6812      	ldr	r2, [r2, #0]
 8002174:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002178:	d1dd      	bne.n	8002136 <HAL_RCC_ClockConfig+0x72>
          return HAL_ERROR;
 800217a:	2001      	movs	r0, #1
 800217c:	bd70      	pop	{r4, r5, r6, pc}
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800217e:	4a4a      	ldr	r2, [pc, #296]	; (80022a8 <HAL_RCC_ClockConfig+0x1e4>)
 8002180:	6812      	ldr	r2, [r2, #0]
 8002182:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002186:	d1d6      	bne.n	8002136 <HAL_RCC_ClockConfig+0x72>
          return HAL_ERROR;
 8002188:	2001      	movs	r0, #1
 800218a:	bd70      	pop	{r4, r5, r6, pc}
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 800218c:	4a46      	ldr	r2, [pc, #280]	; (80022a8 <HAL_RCC_ClockConfig+0x1e4>)
 800218e:	6812      	ldr	r2, [r2, #0]
 8002190:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002194:	d1cf      	bne.n	8002136 <HAL_RCC_ClockConfig+0x72>
          return HAL_ERROR;
 8002196:	2001      	movs	r0, #1
 8002198:	bd70      	pop	{r4, r5, r6, pc}
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 800219a:	4b43      	ldr	r3, [pc, #268]	; (80022a8 <HAL_RCC_ClockConfig+0x1e4>)
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021a2:	2b10      	cmp	r3, #16
 80021a4:	d026      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x130>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021a6:	f7fe fa61 	bl	800066c <HAL_GetTick>
 80021aa:	1b80      	subs	r0, r0, r6
 80021ac:	f241 3388 	movw	r3, #5000	; 0x1388
 80021b0:	4298      	cmp	r0, r3
 80021b2:	d9f2      	bls.n	800219a <HAL_RCC_ClockConfig+0xd6>
            return HAL_TIMEOUT;
 80021b4:	2003      	movs	r0, #3
 80021b6:	bd70      	pop	{r4, r5, r6, pc}
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80021b8:	4b3b      	ldr	r3, [pc, #236]	; (80022a8 <HAL_RCC_ClockConfig+0x1e4>)
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021c0:	2b18      	cmp	r3, #24
 80021c2:	d017      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x130>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021c4:	f7fe fa52 	bl	800066c <HAL_GetTick>
 80021c8:	1b80      	subs	r0, r0, r6
 80021ca:	f241 3388 	movw	r3, #5000	; 0x1388
 80021ce:	4298      	cmp	r0, r3
 80021d0:	d9f2      	bls.n	80021b8 <HAL_RCC_ClockConfig+0xf4>
            return HAL_TIMEOUT;
 80021d2:	2003      	movs	r0, #3
 80021d4:	bd70      	pop	{r4, r5, r6, pc}
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_CSI)
 80021d6:	4b34      	ldr	r3, [pc, #208]	; (80022a8 <HAL_RCC_ClockConfig+0x1e4>)
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021de:	2b08      	cmp	r3, #8
 80021e0:	d008      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x130>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e2:	f7fe fa43 	bl	800066c <HAL_GetTick>
 80021e6:	1b80      	subs	r0, r0, r6
 80021e8:	f241 3388 	movw	r3, #5000	; 0x1388
 80021ec:	4298      	cmp	r0, r3
 80021ee:	d9f2      	bls.n	80021d6 <HAL_RCC_ClockConfig+0x112>
            return HAL_TIMEOUT;
 80021f0:	2003      	movs	r0, #3
 80021f2:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80021f4:	4b2b      	ldr	r3, [pc, #172]	; (80022a4 <HAL_RCC_ClockConfig+0x1e0>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	429d      	cmp	r5, r3
 80021fe:	d20c      	bcs.n	800221a <HAL_RCC_ClockConfig+0x156>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002200:	4a28      	ldr	r2, [pc, #160]	; (80022a4 <HAL_RCC_ClockConfig+0x1e0>)
 8002202:	6813      	ldr	r3, [r2, #0]
 8002204:	f023 0307 	bic.w	r3, r3, #7
 8002208:	432b      	orrs	r3, r5
 800220a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800220c:	6813      	ldr	r3, [r2, #0]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	429d      	cmp	r5, r3
 8002214:	d001      	beq.n	800221a <HAL_RCC_ClockConfig+0x156>
      return HAL_ERROR;
 8002216:	2001      	movs	r0, #1
}
 8002218:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800221a:	6823      	ldr	r3, [r4, #0]
 800221c:	f013 0f04 	tst.w	r3, #4
 8002220:	d006      	beq.n	8002230 <HAL_RCC_ClockConfig+0x16c>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002222:	4a21      	ldr	r2, [pc, #132]	; (80022a8 <HAL_RCC_ClockConfig+0x1e4>)
 8002224:	6993      	ldr	r3, [r2, #24]
 8002226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800222a:	6921      	ldr	r1, [r4, #16]
 800222c:	430b      	orrs	r3, r1
 800222e:	6193      	str	r3, [r2, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002230:	6823      	ldr	r3, [r4, #0]
 8002232:	f013 0f08 	tst.w	r3, #8
 8002236:	d006      	beq.n	8002246 <HAL_RCC_ClockConfig+0x182>
    MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002238:	4a1b      	ldr	r2, [pc, #108]	; (80022a8 <HAL_RCC_ClockConfig+0x1e4>)
 800223a:	69d3      	ldr	r3, [r2, #28]
 800223c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002240:	6961      	ldr	r1, [r4, #20]
 8002242:	430b      	orrs	r3, r1
 8002244:	61d3      	str	r3, [r2, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002246:	6823      	ldr	r3, [r4, #0]
 8002248:	f013 0f10 	tst.w	r3, #16
 800224c:	d006      	beq.n	800225c <HAL_RCC_ClockConfig+0x198>
    MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800224e:	4a16      	ldr	r2, [pc, #88]	; (80022a8 <HAL_RCC_ClockConfig+0x1e4>)
 8002250:	69d3      	ldr	r3, [r2, #28]
 8002252:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002256:	69a1      	ldr	r1, [r4, #24]
 8002258:	430b      	orrs	r3, r1
 800225a:	61d3      	str	r3, [r2, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800225c:	6823      	ldr	r3, [r4, #0]
 800225e:	f013 0f20 	tst.w	r3, #32
 8002262:	d006      	beq.n	8002272 <HAL_RCC_ClockConfig+0x1ae>
    MODIFY_REG(RCC->D3CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002264:	4a10      	ldr	r2, [pc, #64]	; (80022a8 <HAL_RCC_ClockConfig+0x1e4>)
 8002266:	6a13      	ldr	r3, [r2, #32]
 8002268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800226c:	69e1      	ldr	r1, [r4, #28]
 800226e:	430b      	orrs	r3, r1
 8002270:	6213      	str	r3, [r2, #32]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> POSITION_VAL(RCC_D1CFGR_D1CPRE_0)];
 8002272:	f7ff fe41 	bl	8001ef8 <HAL_RCC_GetSysClockFreq>
 8002276:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <HAL_RCC_ClockConfig+0x1e4>)
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800227e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002282:	fa92 f2a2 	rbit	r2, r2
 8002286:	fab2 f282 	clz	r2, r2
 800228a:	40d3      	lsrs	r3, r2
 800228c:	4a07      	ldr	r2, [pc, #28]	; (80022ac <HAL_RCC_ClockConfig+0x1e8>)
 800228e:	5cd3      	ldrb	r3, [r2, r3]
 8002290:	40d8      	lsrs	r0, r3
 8002292:	4b07      	ldr	r3, [pc, #28]	; (80022b0 <HAL_RCC_ClockConfig+0x1ec>)
 8002294:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002296:	2000      	movs	r0, #0
 8002298:	f7fe f9a6 	bl	80005e8 <HAL_InitTick>
  return HAL_OK;
 800229c:	2000      	movs	r0, #0
 800229e:	bd70      	pop	{r4, r5, r6, pc}
          return HAL_ERROR;
 80022a0:	2001      	movs	r0, #1
 80022a2:	bd70      	pop	{r4, r5, r6, pc}
 80022a4:	52002000 	.word	0x52002000
 80022a8:	58024400 	.word	0x58024400
 80022ac:	08007bac 	.word	0x08007bac
 80022b0:	20000010 	.word	0x20000010

080022b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022b4:	b508      	push	{r3, lr}
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> POSITION_VAL(RCC_D1CFGR_HPRE_0)]);
 80022b6:	f000 ffbf 	bl	8003238 <HAL_RCCEx_GetD1SysClockFreq>
 80022ba:	4b08      	ldr	r3, [pc, #32]	; (80022dc <HAL_RCC_GetHCLKFreq+0x28>)
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	f003 030f 	and.w	r3, r3, #15
 80022c2:	2201      	movs	r2, #1
 80022c4:	fa92 f2a2 	rbit	r2, r2
 80022c8:	fab2 f282 	clz	r2, r2
 80022cc:	40d3      	lsrs	r3, r2
 80022ce:	4a04      	ldr	r2, [pc, #16]	; (80022e0 <HAL_RCC_GetHCLKFreq+0x2c>)
 80022d0:	5cd3      	ldrb	r3, [r2, r3]
 80022d2:	40d8      	lsrs	r0, r3
 80022d4:	4b03      	ldr	r3, [pc, #12]	; (80022e4 <HAL_RCC_GetHCLKFreq+0x30>)
 80022d6:	6018      	str	r0, [r3, #0]
  return SystemD2Clock;
}
 80022d8:	bd08      	pop	{r3, pc}
 80022da:	bf00      	nop
 80022dc:	58024400 	.word	0x58024400
 80022e0:	08007bac 	.word	0x08007bac
 80022e4:	20000014 	.word	0x20000014

080022e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022e8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)]);
 80022ea:	f7ff ffe3 	bl	80022b4 <HAL_RCC_GetHCLKFreq>
 80022ee:	4b07      	ldr	r3, [pc, #28]	; (800230c <HAL_RCC_GetPCLK1Freq+0x24>)
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022f6:	2210      	movs	r2, #16
 80022f8:	fa92 f2a2 	rbit	r2, r2
 80022fc:	fab2 f282 	clz	r2, r2
 8002300:	40d3      	lsrs	r3, r2
 8002302:	4a03      	ldr	r2, [pc, #12]	; (8002310 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002304:	5cd3      	ldrb	r3, [r2, r3]
}
 8002306:	40d8      	lsrs	r0, r3
 8002308:	bd08      	pop	{r3, pc}
 800230a:	bf00      	nop
 800230c:	58024400 	.word	0x58024400
 8002310:	08007bac 	.word	0x08007bac

08002314 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002314:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> POSITION_VAL(RCC_D2CFGR_D2PPRE2_0)]);
 8002316:	f7ff ffcd 	bl	80022b4 <HAL_RCC_GetHCLKFreq>
 800231a:	4b07      	ldr	r3, [pc, #28]	; (8002338 <HAL_RCC_GetPCLK2Freq+0x24>)
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002322:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002326:	fa92 f2a2 	rbit	r2, r2
 800232a:	fab2 f282 	clz	r2, r2
 800232e:	40d3      	lsrs	r3, r2
 8002330:	4a02      	ldr	r2, [pc, #8]	; (800233c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002332:	5cd3      	ldrb	r3, [r2, r3]
}
 8002334:	40d8      	lsrs	r0, r3
 8002336:	bd08      	pop	{r3, pc}
 8002338:	58024400 	.word	0x58024400
 800233c:	08007bac 	.word	0x08007bac

08002340 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2P_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLL2R_VALUE(pll2->PLL2R));
  assert_param(IS_RCC_PLL2Q_VALUE(pll2->PLL2Q));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8002340:	4b38      	ldr	r3, [pc, #224]	; (8002424 <RCCEx_PLL2_Config+0xe4>)
 8002342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002344:	f003 0303 	and.w	r3, r3, #3
 8002348:	2b03      	cmp	r3, #3
 800234a:	d069      	beq.n	8002420 <RCCEx_PLL2_Config+0xe0>
{
 800234c:	b570      	push	{r4, r5, r6, lr}
 800234e:	460e      	mov	r6, r1
 8002350:	4605      	mov	r5, r0


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8002352:	4a34      	ldr	r2, [pc, #208]	; (8002424 <RCCEx_PLL2_Config+0xe4>)
 8002354:	6813      	ldr	r3, [r2, #0]
 8002356:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800235a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800235c:	f7fe f986 	bl	800066c <HAL_GetTick>
 8002360:	4604      	mov	r4, r0

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002362:	4b30      	ldr	r3, [pc, #192]	; (8002424 <RCCEx_PLL2_Config+0xe4>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800236a:	d006      	beq.n	800237a <RCCEx_PLL2_Config+0x3a>
    {
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800236c:	f7fe f97e 	bl	800066c <HAL_GetTick>
 8002370:	1b00      	subs	r0, r0, r4
 8002372:	2802      	cmp	r0, #2
 8002374:	d9f5      	bls.n	8002362 <RCCEx_PLL2_Config+0x22>
      {
        return HAL_TIMEOUT;
 8002376:	2003      	movs	r0, #3
 8002378:	bd70      	pop	{r4, r5, r6, pc}
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800237a:	4a2a      	ldr	r2, [pc, #168]	; (8002424 <RCCEx_PLL2_Config+0xe4>)
 800237c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800237e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002382:	6829      	ldr	r1, [r5, #0]
 8002384:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8002388:	6293      	str	r3, [r2, #40]	; 0x28
 800238a:	686b      	ldr	r3, [r5, #4]
 800238c:	3b01      	subs	r3, #1
 800238e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002392:	68a9      	ldr	r1, [r5, #8]
 8002394:	3901      	subs	r1, #1
 8002396:	0249      	lsls	r1, r1, #9
 8002398:	b289      	uxth	r1, r1
 800239a:	430b      	orrs	r3, r1
 800239c:	68e9      	ldr	r1, [r5, #12]
 800239e:	3901      	subs	r1, #1
 80023a0:	0409      	lsls	r1, r1, #16
 80023a2:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 80023a6:	430b      	orrs	r3, r1
 80023a8:	6929      	ldr	r1, [r5, #16]
 80023aa:	3901      	subs	r1, #1
 80023ac:	0609      	lsls	r1, r1, #24
 80023ae:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 80023b2:	430b      	orrs	r3, r1
 80023b4:	6393      	str	r3, [r2, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80023b6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80023b8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80023bc:	6969      	ldr	r1, [r5, #20]
 80023be:	430b      	orrs	r3, r1
 80023c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80023c2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80023c4:	f023 0320 	bic.w	r3, r3, #32
 80023c8:	69a9      	ldr	r1, [r5, #24]
 80023ca:	430b      	orrs	r3, r1
 80023cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80023ce:	b9be      	cbnz	r6, 8002400 <RCCEx_PLL2_Config+0xc0>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80023d0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80023d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80023d6:	62d3      	str	r3, [r2, #44]	; 0x2c
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80023d8:	4a12      	ldr	r2, [pc, #72]	; (8002424 <RCCEx_PLL2_Config+0xe4>)
 80023da:	6813      	ldr	r3, [r2, #0]
 80023dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80023e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023e2:	f7fe f943 	bl	800066c <HAL_GetTick>
 80023e6:	4604      	mov	r4, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
 80023e8:	4b0e      	ldr	r3, [pc, #56]	; (8002424 <RCCEx_PLL2_Config+0xe4>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80023f0:	d114      	bne.n	800241c <RCCEx_PLL2_Config+0xdc>
    {
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80023f2:	f7fe f93b 	bl	800066c <HAL_GetTick>
 80023f6:	1b00      	subs	r0, r0, r4
 80023f8:	2802      	cmp	r0, #2
 80023fa:	d9f5      	bls.n	80023e8 <RCCEx_PLL2_Config+0xa8>
      {
        return HAL_TIMEOUT;
 80023fc:	2003      	movs	r0, #3

  }


  return status;
}
 80023fe:	bd70      	pop	{r4, r5, r6, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8002400:	2e01      	cmp	r6, #1
 8002402:	d005      	beq.n	8002410 <RCCEx_PLL2_Config+0xd0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8002404:	4a07      	ldr	r2, [pc, #28]	; (8002424 <RCCEx_PLL2_Config+0xe4>)
 8002406:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002408:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800240c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800240e:	e7e3      	b.n	80023d8 <RCCEx_PLL2_Config+0x98>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8002410:	4a04      	ldr	r2, [pc, #16]	; (8002424 <RCCEx_PLL2_Config+0xe4>)
 8002412:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002414:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002418:	62d3      	str	r3, [r2, #44]	; 0x2c
 800241a:	e7dd      	b.n	80023d8 <RCCEx_PLL2_Config+0x98>
  return status;
 800241c:	2000      	movs	r0, #0
 800241e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002420:	2001      	movs	r0, #1
 8002422:	4770      	bx	lr
 8002424:	58024400 	.word	0x58024400

08002428 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3P_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLL3R_VALUE(pll3->PLL3R));
  assert_param(IS_RCC_PLL3Q_VALUE(pll3->PLL3Q));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8002428:	4b38      	ldr	r3, [pc, #224]	; (800250c <RCCEx_PLL3_Config+0xe4>)
 800242a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242c:	f003 0303 	and.w	r3, r3, #3
 8002430:	2b03      	cmp	r3, #3
 8002432:	d069      	beq.n	8002508 <RCCEx_PLL3_Config+0xe0>
{
 8002434:	b570      	push	{r4, r5, r6, lr}
 8002436:	460e      	mov	r6, r1
 8002438:	4605      	mov	r5, r0


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800243a:	4a34      	ldr	r2, [pc, #208]	; (800250c <RCCEx_PLL3_Config+0xe4>)
 800243c:	6813      	ldr	r3, [r2, #0]
 800243e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002442:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002444:	f7fe f912 	bl	800066c <HAL_GetTick>
 8002448:	4604      	mov	r4, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
 800244a:	4b30      	ldr	r3, [pc, #192]	; (800250c <RCCEx_PLL3_Config+0xe4>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8002452:	d006      	beq.n	8002462 <RCCEx_PLL3_Config+0x3a>
    {
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8002454:	f7fe f90a 	bl	800066c <HAL_GetTick>
 8002458:	1b00      	subs	r0, r0, r4
 800245a:	2802      	cmp	r0, #2
 800245c:	d9f5      	bls.n	800244a <RCCEx_PLL3_Config+0x22>
      {
        return HAL_TIMEOUT;
 800245e:	2003      	movs	r0, #3
 8002460:	bd70      	pop	{r4, r5, r6, pc}
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8002462:	4a2a      	ldr	r2, [pc, #168]	; (800250c <RCCEx_PLL3_Config+0xe4>)
 8002464:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002466:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 800246a:	6829      	ldr	r1, [r5, #0]
 800246c:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 8002470:	6293      	str	r3, [r2, #40]	; 0x28
 8002472:	686b      	ldr	r3, [r5, #4]
 8002474:	3b01      	subs	r3, #1
 8002476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800247a:	68a9      	ldr	r1, [r5, #8]
 800247c:	3901      	subs	r1, #1
 800247e:	0249      	lsls	r1, r1, #9
 8002480:	b289      	uxth	r1, r1
 8002482:	430b      	orrs	r3, r1
 8002484:	68e9      	ldr	r1, [r5, #12]
 8002486:	3901      	subs	r1, #1
 8002488:	0409      	lsls	r1, r1, #16
 800248a:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 800248e:	430b      	orrs	r3, r1
 8002490:	6929      	ldr	r1, [r5, #16]
 8002492:	3901      	subs	r1, #1
 8002494:	0609      	lsls	r1, r1, #24
 8002496:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 800249a:	430b      	orrs	r3, r1
 800249c:	6413      	str	r3, [r2, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800249e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80024a0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80024a4:	6969      	ldr	r1, [r5, #20]
 80024a6:	430b      	orrs	r3, r1
 80024a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80024aa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80024ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80024b0:	69a9      	ldr	r1, [r5, #24]
 80024b2:	430b      	orrs	r3, r1
 80024b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80024b6:	b9be      	cbnz	r6, 80024e8 <RCCEx_PLL3_Config+0xc0>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80024b8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80024ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024be:	62d3      	str	r3, [r2, #44]	; 0x2c
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80024c0:	4a12      	ldr	r2, [pc, #72]	; (800250c <RCCEx_PLL3_Config+0xe4>)
 80024c2:	6813      	ldr	r3, [r2, #0]
 80024c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024ca:	f7fe f8cf 	bl	800066c <HAL_GetTick>
 80024ce:	4604      	mov	r4, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
 80024d0:	4b0e      	ldr	r3, [pc, #56]	; (800250c <RCCEx_PLL3_Config+0xe4>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80024d8:	d114      	bne.n	8002504 <RCCEx_PLL3_Config+0xdc>
    {
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80024da:	f7fe f8c7 	bl	800066c <HAL_GetTick>
 80024de:	1b00      	subs	r0, r0, r4
 80024e0:	2802      	cmp	r0, #2
 80024e2:	d9f5      	bls.n	80024d0 <RCCEx_PLL3_Config+0xa8>
      {
        return HAL_TIMEOUT;
 80024e4:	2003      	movs	r0, #3

  }


  return status;
}
 80024e6:	bd70      	pop	{r4, r5, r6, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 80024e8:	2e01      	cmp	r6, #1
 80024ea:	d005      	beq.n	80024f8 <RCCEx_PLL3_Config+0xd0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80024ec:	4a07      	ldr	r2, [pc, #28]	; (800250c <RCCEx_PLL3_Config+0xe4>)
 80024ee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80024f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024f4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80024f6:	e7e3      	b.n	80024c0 <RCCEx_PLL3_Config+0x98>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80024f8:	4a04      	ldr	r2, [pc, #16]	; (800250c <RCCEx_PLL3_Config+0xe4>)
 80024fa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80024fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002500:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002502:	e7dd      	b.n	80024c0 <RCCEx_PLL3_Config+0x98>
  return status;
 8002504:	2000      	movs	r0, #0
 8002506:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002508:	2001      	movs	r0, #1
 800250a:	4770      	bx	lr
 800250c:	58024400 	.word	0x58024400

08002510 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002512:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002514:	6803      	ldr	r3, [r0, #0]
 8002516:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800251a:	d02b      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x64>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800251c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800251e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002522:	d019      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8002524:	d910      	bls.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x38>
 8002526:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800252a:	d01b      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800252c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002530:	d11e      	bne.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x60>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002532:	2600      	movs	r6, #0
    if(ret == HAL_OK)
 8002534:	bb66      	cbnz	r6, 8002590 <HAL_RCCEx_PeriphCLKConfig+0x80>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002536:	4a93      	ldr	r2, [pc, #588]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8002538:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800253a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800253e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8002540:	430b      	orrs	r3, r1
 8002542:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002544:	4635      	mov	r5, r6
 8002546:	e017      	b.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x68>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8002548:	b993      	cbnz	r3, 8002570 <HAL_RCCEx_PeriphCLKConfig+0x60>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800254a:	4a8e      	ldr	r2, [pc, #568]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 800254c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800254e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002552:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002554:	2600      	movs	r6, #0
      break;
 8002556:	e7ed      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x24>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002558:	2102      	movs	r1, #2
 800255a:	3004      	adds	r0, #4
 800255c:	f7ff fef0 	bl	8002340 <RCCEx_PLL2_Config>
 8002560:	4606      	mov	r6, r0
      break;
 8002562:	e7e7      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x24>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002564:	2102      	movs	r1, #2
 8002566:	3024      	adds	r0, #36	; 0x24
 8002568:	f7ff ff5e 	bl	8002428 <RCCEx_PLL3_Config>
 800256c:	4606      	mov	r6, r0
      break;
 800256e:	e7e1      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x24>
      ret = HAL_ERROR;
 8002570:	2601      	movs	r6, #1
 8002572:	e7df      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x24>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002574:	2500      	movs	r5, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002576:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002578:	6823      	ldr	r3, [r4, #0]
 800257a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800257e:	d016      	beq.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x9e>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002580:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002582:	2b04      	cmp	r3, #4
 8002584:	d831      	bhi.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002586:	e8df f003 	tbb	[pc, r3]
 800258a:	2305      	.short	0x2305
 800258c:	0a29      	.short	0x0a29
 800258e:	0a          	.byte	0x0a
 800258f:	00          	.byte	0x00
      status |= ret;
 8002590:	4635      	mov	r5, r6
 8002592:	e7f1      	b.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x68>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002594:	4a7b      	ldr	r2, [pc, #492]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8002596:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800259c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800259e:	bb36      	cbnz	r6, 80025ee <HAL_RCCEx_PeriphCLKConfig+0xde>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025a0:	4a78      	ldr	r2, [pc, #480]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80025a2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80025a4:	f023 0307 	bic.w	r3, r3, #7
 80025a8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80025aa:	430b      	orrs	r3, r1
 80025ac:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80025ae:	6823      	ldr	r3, [r4, #0]
 80025b0:	f413 7f00 	tst.w	r3, #512	; 0x200
 80025b4:	d032      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x10c>
    switch(PeriphClkInit->Sai23ClockSelection)
 80025b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80025b8:	2b80      	cmp	r3, #128	; 0x80
 80025ba:	d043      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x134>
 80025bc:	d81a      	bhi.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 80025be:	b303      	cbz	r3, 8002602 <HAL_RCCEx_PeriphCLKConfig+0xf2>
 80025c0:	2b40      	cmp	r3, #64	; 0x40
 80025c2:	d11c      	bne.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0xee>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80025c4:	2100      	movs	r1, #0
 80025c6:	1d20      	adds	r0, r4, #4
 80025c8:	f7ff feba 	bl	8002340 <RCCEx_PLL2_Config>
 80025cc:	4606      	mov	r6, r0
      break;
 80025ce:	e01d      	b.n	800260c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80025d0:	2100      	movs	r1, #0
 80025d2:	1d20      	adds	r0, r4, #4
 80025d4:	f7ff feb4 	bl	8002340 <RCCEx_PLL2_Config>
 80025d8:	4606      	mov	r6, r0
      break;
 80025da:	e7e0      	b.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80025dc:	2100      	movs	r1, #0
 80025de:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80025e2:	f7ff ff21 	bl	8002428 <RCCEx_PLL3_Config>
 80025e6:	4606      	mov	r6, r0
      break;
 80025e8:	e7d9      	b.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      ret = HAL_ERROR;
 80025ea:	2601      	movs	r6, #1
 80025ec:	e7d7      	b.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      status |= ret;
 80025ee:	4335      	orrs	r5, r6
 80025f0:	b2ed      	uxtb	r5, r5
 80025f2:	e7dc      	b.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x9e>
    switch(PeriphClkInit->Sai23ClockSelection)
 80025f4:	2bc0      	cmp	r3, #192	; 0xc0
 80025f6:	d009      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0xfc>
 80025f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025fc:	d006      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      ret = HAL_ERROR;
 80025fe:	2601      	movs	r6, #1
 8002600:	e004      	b.n	800260c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002602:	4a60      	ldr	r2, [pc, #384]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8002604:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800260a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800260c:	bb0e      	cbnz	r6, 8002652 <HAL_RCCEx_PeriphCLKConfig+0x142>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800260e:	4a5d      	ldr	r2, [pc, #372]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8002610:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002612:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8002616:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002618:	430b      	orrs	r3, r1
 800261a:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800261c:	6823      	ldr	r3, [r4, #0]
 800261e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002622:	d02f      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x174>
    switch(PeriphClkInit->Sai4AClockSelection)
 8002624:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8002628:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800262c:	d03e      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800262e:	d813      	bhi.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8002630:	b1d3      	cbz	r3, 8002668 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8002632:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002636:	d115      	bne.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x154>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002638:	2100      	movs	r1, #0
 800263a:	1d20      	adds	r0, r4, #4
 800263c:	f7ff fe80 	bl	8002340 <RCCEx_PLL2_Config>
 8002640:	4606      	mov	r6, r0
      break;
 8002642:	e016      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x162>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002644:	2100      	movs	r1, #0
 8002646:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800264a:	f7ff feed 	bl	8002428 <RCCEx_PLL3_Config>
 800264e:	4606      	mov	r6, r0
      break;
 8002650:	e7dc      	b.n	800260c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      status |= ret;
 8002652:	4335      	orrs	r5, r6
 8002654:	b2ed      	uxtb	r5, r5
 8002656:	e7e1      	b.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x10c>
    switch(PeriphClkInit->Sai4AClockSelection)
 8002658:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800265c:	d009      	beq.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x162>
 800265e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002662:	d006      	beq.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x162>
      ret = HAL_ERROR;
 8002664:	2601      	movs	r6, #1
 8002666:	e004      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x162>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002668:	4a46      	ldr	r2, [pc, #280]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 800266a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800266c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002670:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8002672:	bb16      	cbnz	r6, 80026ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002674:	4a43      	ldr	r2, [pc, #268]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8002676:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002678:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 800267c:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8002680:	430b      	orrs	r3, r1
 8002682:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002684:	6823      	ldr	r3, [r4, #0]
 8002686:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800268a:	d02f      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    switch(PeriphClkInit->Sai4BClockSelection)
 800268c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8002690:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002694:	d037      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8002696:	d813      	bhi.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
 8002698:	b1d3      	cbz	r3, 80026d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800269a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800269e:	d115      	bne.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80026a0:	2100      	movs	r1, #0
 80026a2:	1d20      	adds	r0, r4, #4
 80026a4:	f7ff fe4c 	bl	8002340 <RCCEx_PLL2_Config>
 80026a8:	4606      	mov	r6, r0
      break;
 80026aa:	e016      	b.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80026ac:	2100      	movs	r1, #0
 80026ae:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80026b2:	f7ff feb9 	bl	8002428 <RCCEx_PLL3_Config>
 80026b6:	4606      	mov	r6, r0
      break;
 80026b8:	e7db      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x162>
      status |= ret;
 80026ba:	4335      	orrs	r5, r6
 80026bc:	b2ed      	uxtb	r5, r5
 80026be:	e7e1      	b.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x174>
    switch(PeriphClkInit->Sai4BClockSelection)
 80026c0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80026c4:	d009      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 80026c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026ca:	d006      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      ret = HAL_ERROR;
 80026cc:	2601      	movs	r6, #1
 80026ce:	e004      	b.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026d0:	4a2c      	ldr	r2, [pc, #176]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80026d2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80026d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80026da:	b9de      	cbnz	r6, 8002714 <HAL_RCCEx_PeriphCLKConfig+0x204>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80026dc:	4a29      	ldr	r2, [pc, #164]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80026de:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80026e0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80026e4:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 80026e8:	430b      	orrs	r3, r1
 80026ea:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80026ec:	6823      	ldr	r3, [r4, #0]
 80026ee:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80026f2:	d022      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    switch(PeriphClkInit->QspiClockSelection)
 80026f4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80026f6:	2b10      	cmp	r3, #16
 80026f8:	d012      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80026fa:	d90e      	bls.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80026fc:	2b20      	cmp	r3, #32
 80026fe:	d02f      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x250>
 8002700:	2b30      	cmp	r3, #48	; 0x30
 8002702:	d012      	beq.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8002704:	e00a      	b.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x20c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002706:	2100      	movs	r1, #0
 8002708:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800270c:	f7ff fe8c 	bl	8002428 <RCCEx_PLL3_Config>
 8002710:	4606      	mov	r6, r0
      break;
 8002712:	e7e2      	b.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      status |= ret;
 8002714:	4335      	orrs	r5, r6
 8002716:	b2ed      	uxtb	r5, r5
 8002718:	e7e8      	b.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    switch(PeriphClkInit->QspiClockSelection)
 800271a:	b133      	cbz	r3, 800272a <HAL_RCCEx_PeriphCLKConfig+0x21a>
      ret = HAL_ERROR;
 800271c:	2601      	movs	r6, #1
 800271e:	e004      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x21a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002720:	4a18      	ldr	r2, [pc, #96]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8002722:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002728:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800272a:	b9fe      	cbnz	r6, 800276c <HAL_RCCEx_PeriphCLKConfig+0x25c>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800272c:	4a15      	ldr	r2, [pc, #84]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 800272e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002730:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002734:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002736:	430b      	orrs	r3, r1
 8002738:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800273a:	6823      	ldr	r3, [r4, #0]
 800273c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002740:	d030      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x294>
    switch(PeriphClkInit->Spi123ClockSelection)
 8002742:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002744:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002748:	d073      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x322>
 800274a:	d812      	bhi.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x262>
 800274c:	b1e3      	cbz	r3, 8002788 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800274e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002752:	d114      	bne.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x26e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002754:	2100      	movs	r1, #0
 8002756:	1d20      	adds	r0, r4, #4
 8002758:	f7ff fdf2 	bl	8002340 <RCCEx_PLL2_Config>
 800275c:	4606      	mov	r6, r0
      break;
 800275e:	e018      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x282>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002760:	2102      	movs	r1, #2
 8002762:	1d20      	adds	r0, r4, #4
 8002764:	f7ff fdec 	bl	8002340 <RCCEx_PLL2_Config>
 8002768:	4606      	mov	r6, r0
      break;
 800276a:	e7de      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x21a>
      status |= ret;
 800276c:	4335      	orrs	r5, r6
 800276e:	b2ed      	uxtb	r5, r5
 8002770:	e7e3      	b.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    switch(PeriphClkInit->Spi123ClockSelection)
 8002772:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002776:	d00c      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x282>
 8002778:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800277c:	d009      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x282>
      ret = HAL_ERROR;
 800277e:	2601      	movs	r6, #1
 8002780:	e007      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x282>
 8002782:	bf00      	nop
 8002784:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002788:	4a95      	ldr	r2, [pc, #596]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 800278a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800278c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002790:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8002792:	2e00      	cmp	r6, #0
 8002794:	d154      	bne.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x330>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002796:	4a92      	ldr	r2, [pc, #584]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8002798:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800279a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800279e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80027a0:	430b      	orrs	r3, r1
 80027a2:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80027a4:	6823      	ldr	r3, [r4, #0]
 80027a6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80027aa:	d016      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    switch(PeriphClkInit->Spi45ClockSelection)
 80027ac:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80027ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80027b2:	d053      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80027b4:	d847      	bhi.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x336>
 80027b6:	b13b      	cbz	r3, 80027c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80027b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027bc:	d14c      	bne.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x348>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80027be:	2101      	movs	r1, #1
 80027c0:	1d20      	adds	r0, r4, #4
 80027c2:	f7ff fdbd 	bl	8002340 <RCCEx_PLL2_Config>
 80027c6:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80027c8:	2e00      	cmp	r6, #0
 80027ca:	d14e      	bne.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x35a>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80027cc:	4a84      	ldr	r2, [pc, #528]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 80027ce:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80027d0:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80027d4:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80027d6:	430b      	orrs	r3, r1
 80027d8:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80027da:	6823      	ldr	r3, [r4, #0]
 80027dc:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80027e0:	d018      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x304>
    switch(PeriphClkInit->Spi6ClockSelection)
 80027e2:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 80027e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027ea:	d04c      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80027ec:	d840      	bhi.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80027ee:	b13b      	cbz	r3, 8002800 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 80027f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027f4:	d145      	bne.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x372>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80027f6:	2101      	movs	r1, #1
 80027f8:	1d20      	adds	r0, r4, #4
 80027fa:	f7ff fda1 	bl	8002340 <RCCEx_PLL2_Config>
 80027fe:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002800:	2e00      	cmp	r6, #0
 8002802:	d147      	bne.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x384>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002804:	4a76      	ldr	r2, [pc, #472]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8002806:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002808:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800280c:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8002810:	430b      	orrs	r3, r1
 8002812:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002814:	6823      	ldr	r3, [r4, #0]
 8002816:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800281a:	d04b      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    switch(PeriphClkInit->FdcanClockSelection)
 800281c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800281e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002822:	d03a      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x38a>
 8002824:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002828:	d04f      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800282a:	2b00      	cmp	r3, #0
 800282c:	d03a      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x394>
      ret = HAL_ERROR;
 800282e:	2601      	movs	r6, #1
 8002830:	e038      	b.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x394>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002832:	2100      	movs	r1, #0
 8002834:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002838:	f7ff fdf6 	bl	8002428 <RCCEx_PLL3_Config>
 800283c:	4606      	mov	r6, r0
      break;
 800283e:	e7a8      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x282>
      status |= ret;
 8002840:	4335      	orrs	r5, r6
 8002842:	b2ed      	uxtb	r5, r5
 8002844:	e7ae      	b.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x294>
    switch(PeriphClkInit->Spi45ClockSelection)
 8002846:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800284a:	d0bd      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800284c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002850:	d0ba      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002852:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002856:	d0b7      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      ret = HAL_ERROR;
 8002858:	2601      	movs	r6, #1
 800285a:	e7b5      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800285c:	2101      	movs	r1, #1
 800285e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002862:	f7ff fde1 	bl	8002428 <RCCEx_PLL3_Config>
 8002866:	4606      	mov	r6, r0
      break;
 8002868:	e7ae      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      status |= ret;
 800286a:	4335      	orrs	r5, r6
 800286c:	b2ed      	uxtb	r5, r5
 800286e:	e7b4      	b.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    switch(PeriphClkInit->Spi6ClockSelection)
 8002870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002874:	d0c4      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 8002876:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800287a:	d0c1      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 800287c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002880:	d0be      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
      ret = HAL_ERROR;
 8002882:	2601      	movs	r6, #1
 8002884:	e7bc      	b.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002886:	2101      	movs	r1, #1
 8002888:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800288c:	f7ff fdcc 	bl	8002428 <RCCEx_PLL3_Config>
 8002890:	4606      	mov	r6, r0
      break;
 8002892:	e7b5      	b.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
      status |= ret;
 8002894:	4335      	orrs	r5, r6
 8002896:	b2ed      	uxtb	r5, r5
 8002898:	e7bc      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x304>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800289a:	4a51      	ldr	r2, [pc, #324]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 800289c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800289e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028a2:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80028a4:	b9be      	cbnz	r6, 80028d6 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80028a6:	4a4e      	ldr	r2, [pc, #312]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 80028a8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80028aa:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80028ae:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80028b0:	430b      	orrs	r3, r1
 80028b2:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80028b4:	6823      	ldr	r3, [r4, #0]
 80028b6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80028ba:	d01c      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
    switch(PeriphClkInit->FmcClockSelection)
 80028bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80028be:	2b03      	cmp	r3, #3
 80028c0:	d843      	bhi.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80028c2:	e8df f003 	tbb	[pc, r3]
 80028c6:	0b10      	.short	0x0b10
 80028c8:	103c      	.short	0x103c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80028ca:	2101      	movs	r1, #1
 80028cc:	1d20      	adds	r0, r4, #4
 80028ce:	f7ff fd37 	bl	8002340 <RCCEx_PLL2_Config>
 80028d2:	4606      	mov	r6, r0
      break;
 80028d4:	e7e6      	b.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x394>
      status |= ret;
 80028d6:	4335      	orrs	r5, r6
 80028d8:	b2ed      	uxtb	r5, r5
 80028da:	e7eb      	b.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028dc:	4a40      	ldr	r2, [pc, #256]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 80028de:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80028e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80028e6:	bb96      	cbnz	r6, 800294e <HAL_RCCEx_PeriphCLKConfig+0x43e>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80028e8:	4a3d      	ldr	r2, [pc, #244]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 80028ea:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80028ec:	f023 0303 	bic.w	r3, r3, #3
 80028f0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80028f2:	430b      	orrs	r3, r1
 80028f4:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028f6:	6823      	ldr	r3, [r4, #0]
 80028f8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80028fc:	d12a      	bne.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x444>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80028fe:	6823      	ldr	r3, [r4, #0]
 8002900:	f013 0f01 	tst.w	r3, #1
 8002904:	f000 809e 	beq.w	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x534>
    switch(PeriphClkInit->Usart16ClockSelection)
 8002908:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800290a:	2b28      	cmp	r3, #40	; 0x28
 800290c:	f200 80ad 	bhi.w	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x55a>
 8002910:	e8df f003 	tbb	[pc, r3]
 8002914:	ababab90 	.word	0xababab90
 8002918:	abababab 	.word	0xabababab
 800291c:	ababab8b 	.word	0xababab8b
 8002920:	abababab 	.word	0xabababab
 8002924:	abababa4 	.word	0xabababa4
 8002928:	abababab 	.word	0xabababab
 800292c:	ababab90 	.word	0xababab90
 8002930:	abababab 	.word	0xabababab
 8002934:	ababab90 	.word	0xababab90
 8002938:	abababab 	.word	0xabababab
 800293c:	90          	.byte	0x90
 800293d:	00          	.byte	0x00
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800293e:	2102      	movs	r1, #2
 8002940:	1d20      	adds	r0, r4, #4
 8002942:	f7ff fcfd 	bl	8002340 <RCCEx_PLL2_Config>
 8002946:	4606      	mov	r6, r0
      break;
 8002948:	e7cd      	b.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      ret = HAL_ERROR;
 800294a:	2601      	movs	r6, #1
 800294c:	e7cb      	b.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      status |= ret;
 800294e:	4335      	orrs	r5, r6
 8002950:	b2ed      	uxtb	r5, r5
 8002952:	e7d0      	b.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002954:	4a23      	ldr	r2, [pc, #140]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002956:	6813      	ldr	r3, [r2, #0]
 8002958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800295c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800295e:	f7fd fe85 	bl	800066c <HAL_GetTick>
 8002962:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002964:	4b1f      	ldr	r3, [pc, #124]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f413 7f80 	tst.w	r3, #256	; 0x100
 800296c:	d105      	bne.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x46a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800296e:	f7fd fe7d 	bl	800066c <HAL_GetTick>
 8002972:	1bc0      	subs	r0, r0, r7
 8002974:	2864      	cmp	r0, #100	; 0x64
 8002976:	d9f5      	bls.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x454>
        ret = HAL_TIMEOUT;
 8002978:	2603      	movs	r6, #3
    if(ret == HAL_OK)
 800297a:	2e00      	cmp	r6, #0
 800297c:	d152      	bne.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x514>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800297e:	4b18      	ldr	r3, [pc, #96]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8002980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002982:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8002986:	4053      	eors	r3, r2
 8002988:	f413 7f40 	tst.w	r3, #768	; 0x300
 800298c:	d00c      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x498>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800298e:	4b14      	ldr	r3, [pc, #80]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8002990:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002992:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8002996:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002998:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800299c:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800299e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80029a0:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80029a4:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 80029a6:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80029a8:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80029ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029b0:	d01a      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
      if(ret == HAL_OK)
 80029b2:	2e00      	cmp	r6, #0
 80029b4:	d133      	bne.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x50e>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029b6:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80029ba:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80029be:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80029c2:	d022      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80029c4:	4a06      	ldr	r2, [pc, #24]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 80029c6:	6913      	ldr	r3, [r2, #16]
 80029c8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80029cc:	6113      	str	r3, [r2, #16]
 80029ce:	4904      	ldr	r1, [pc, #16]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 80029d0:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 80029d2:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 80029d6:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80029da:	4313      	orrs	r3, r2
 80029dc:	670b      	str	r3, [r1, #112]	; 0x70
 80029de:	e78e      	b.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 80029e0:	58024400 	.word	0x58024400
 80029e4:	58024800 	.word	0x58024800
        tickstart = HAL_GetTick();
 80029e8:	f7fd fe40 	bl	800066c <HAL_GetTick>
 80029ec:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ee:	4bb7      	ldr	r3, [pc, #732]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x7bc>)
 80029f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f2:	f013 0f02 	tst.w	r3, #2
 80029f6:	d1dc      	bne.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029f8:	f7fd fe38 	bl	800066c <HAL_GetTick>
 80029fc:	1bc0      	subs	r0, r0, r7
 80029fe:	f241 3388 	movw	r3, #5000	; 0x1388
 8002a02:	4298      	cmp	r0, r3
 8002a04:	d9f3      	bls.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x4de>
            ret = HAL_TIMEOUT;
 8002a06:	2603      	movs	r6, #3
 8002a08:	e7d3      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a0a:	48b0      	ldr	r0, [pc, #704]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x7bc>)
 8002a0c:	6902      	ldr	r2, [r0, #16]
 8002a0e:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8002a12:	49af      	ldr	r1, [pc, #700]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8002a14:	ea01 1313 	and.w	r3, r1, r3, lsr #4
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	6103      	str	r3, [r0, #16]
 8002a1c:	e7d7      	b.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x4be>
        status |= ret;
 8002a1e:	4335      	orrs	r5, r6
 8002a20:	b2ed      	uxtb	r5, r5
 8002a22:	e76c      	b.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x3ee>
      status |= ret;
 8002a24:	4335      	orrs	r5, r6
 8002a26:	b2ed      	uxtb	r5, r5
 8002a28:	e769      	b.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x3ee>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	1d20      	adds	r0, r4, #4
 8002a2e:	f7ff fc87 	bl	8002340 <RCCEx_PLL2_Config>
 8002a32:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002a34:	b9de      	cbnz	r6, 8002a6e <HAL_RCCEx_PeriphCLKConfig+0x55e>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002a36:	4aa5      	ldr	r2, [pc, #660]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x7bc>)
 8002a38:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002a3a:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8002a3e:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8002a40:	430b      	orrs	r3, r1
 8002a42:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002a44:	6823      	ldr	r3, [r4, #0]
 8002a46:	f013 0f02 	tst.w	r3, #2
 8002a4a:	d020      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x57e>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002a4c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8002a4e:	2b05      	cmp	r3, #5
 8002a50:	d832      	bhi.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 8002a52:	e8df f003 	tbb	[pc, r3]
 8002a56:	0f14      	.short	0x0f14
 8002a58:	1414142a 	.word	0x1414142a
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002a5c:	2101      	movs	r1, #1
 8002a5e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002a62:	f7ff fce1 	bl	8002428 <RCCEx_PLL3_Config>
 8002a66:	4606      	mov	r6, r0
      break;
 8002a68:	e7e4      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x524>
      ret = HAL_ERROR;
 8002a6a:	2601      	movs	r6, #1
 8002a6c:	e7e2      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x524>
      status |= ret;
 8002a6e:	4335      	orrs	r5, r6
 8002a70:	b2ed      	uxtb	r5, r5
 8002a72:	e7e7      	b.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x534>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002a74:	2101      	movs	r1, #1
 8002a76:	1d20      	adds	r0, r4, #4
 8002a78:	f7ff fc62 	bl	8002340 <RCCEx_PLL2_Config>
 8002a7c:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002a7e:	b9ee      	cbnz	r6, 8002abc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002a80:	4a92      	ldr	r2, [pc, #584]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x7bc>)
 8002a82:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002a84:	f023 0307 	bic.w	r3, r3, #7
 8002a88:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8002a8a:	430b      	orrs	r3, r1
 8002a8c:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a8e:	6823      	ldr	r3, [r4, #0]
 8002a90:	f013 0f04 	tst.w	r3, #4
 8002a94:	d025      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002a96:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002a9a:	2b05      	cmp	r3, #5
 8002a9c:	f200 80bb 	bhi.w	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x706>
 8002aa0:	e8df f003 	tbb	[pc, r3]
 8002aa4:	14b20f14 	.word	0x14b20f14
 8002aa8:	1414      	.short	0x1414
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002aaa:	2101      	movs	r1, #1
 8002aac:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002ab0:	f7ff fcba 	bl	8002428 <RCCEx_PLL3_Config>
 8002ab4:	4606      	mov	r6, r0
      break;
 8002ab6:	e7e2      	b.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x56e>
      ret = HAL_ERROR;
 8002ab8:	2601      	movs	r6, #1
 8002aba:	e7e0      	b.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x56e>
      status |= ret;
 8002abc:	4335      	orrs	r5, r6
 8002abe:	b2ed      	uxtb	r5, r5
 8002ac0:	e7e5      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x57e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	1d20      	adds	r0, r4, #4
 8002ac6:	f7ff fc3b 	bl	8002340 <RCCEx_PLL2_Config>
 8002aca:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002acc:	2e00      	cmp	r6, #0
 8002ace:	f040 80a4 	bne.w	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x70a>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ad2:	4a7e      	ldr	r2, [pc, #504]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x7bc>)
 8002ad4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002ad6:	f023 0307 	bic.w	r3, r3, #7
 8002ada:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8002ade:	430b      	orrs	r3, r1
 8002ae0:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ae2:	6823      	ldr	r3, [r4, #0]
 8002ae4:	f013 0f20 	tst.w	r3, #32
 8002ae8:	d01c      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x614>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002aea:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8002aee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002af2:	f000 80a3 	beq.w	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8002af6:	f200 8093 	bhi.w	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x710>
 8002afa:	b143      	cbz	r3, 8002b0e <HAL_RCCEx_PeriphCLKConfig+0x5fe>
 8002afc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b00:	f040 809a 	bne.w	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x728>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b04:	2100      	movs	r1, #0
 8002b06:	1d20      	adds	r0, r4, #4
 8002b08:	f7ff fc1a 	bl	8002340 <RCCEx_PLL2_Config>
 8002b0c:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002b0e:	2e00      	cmp	r6, #0
 8002b10:	f040 809b 	bne.w	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x73a>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b14:	4a6d      	ldr	r2, [pc, #436]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x7bc>)
 8002b16:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002b18:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8002b1c:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8002b20:	430b      	orrs	r3, r1
 8002b22:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002b24:	6823      	ldr	r3, [r4, #0]
 8002b26:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002b2a:	d01c      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x656>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002b2c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8002b30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b34:	f000 809a 	beq.w	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x75c>
 8002b38:	f200 808a 	bhi.w	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8002b3c:	b143      	cbz	r3, 8002b50 <HAL_RCCEx_PeriphCLKConfig+0x640>
 8002b3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b42:	f040 8091 	bne.w	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x758>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b46:	2100      	movs	r1, #0
 8002b48:	1d20      	adds	r0, r4, #4
 8002b4a:	f7ff fbf9 	bl	8002340 <RCCEx_PLL2_Config>
 8002b4e:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002b50:	2e00      	cmp	r6, #0
 8002b52:	f040 8092 	bne.w	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x76a>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b56:	4a5d      	ldr	r2, [pc, #372]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x7bc>)
 8002b58:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002b5a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002b5e:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8002b62:	430b      	orrs	r3, r1
 8002b64:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002b66:	6823      	ldr	r3, [r4, #0]
 8002b68:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002b6c:	d01c      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002b6e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8002b72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b76:	f000 808f 	beq.w	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x788>
 8002b7a:	f200 8081 	bhi.w	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x770>
 8002b7e:	b143      	cbz	r3, 8002b92 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002b80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b84:	f040 8086 	bne.w	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x784>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b88:	2100      	movs	r1, #0
 8002b8a:	1d20      	adds	r0, r4, #4
 8002b8c:	f7ff fbd8 	bl	8002340 <RCCEx_PLL2_Config>
 8002b90:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002b92:	2e00      	cmp	r6, #0
 8002b94:	f040 8087 	bne.w	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x796>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002b98:	4a4c      	ldr	r2, [pc, #304]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x7bc>)
 8002b9a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002b9c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002ba0:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8002ba4:	430b      	orrs	r3, r1
 8002ba6:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002ba8:	6823      	ldr	r3, [r4, #0]
 8002baa:	f013 0f08 	tst.w	r3, #8
 8002bae:	d00a      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002bb0:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8002bb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bb8:	d078      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x79c>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002bba:	4944      	ldr	r1, [pc, #272]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x7bc>)
 8002bbc:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8002bbe:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	654b      	str	r3, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002bc6:	6823      	ldr	r3, [r4, #0]
 8002bc8:	f013 0f10 	tst.w	r3, #16
 8002bcc:	d00a      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002bce:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002bd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bd6:	d071      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002bd8:	493c      	ldr	r1, [pc, #240]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x7bc>)
 8002bda:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8002bdc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002be0:	4313      	orrs	r3, r2
 8002be2:	658b      	str	r3, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002be4:	6823      	ldr	r3, [r4, #0]
 8002be6:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002bea:	f000 8081 	beq.w	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    switch(PeriphClkInit->AdcClockSelection)
 8002bee:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8002bf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf6:	f000 808c 	beq.w	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x802>
 8002bfa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bfe:	d06e      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d067      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      ret = HAL_ERROR;
 8002c04:	2601      	movs	r6, #1
 8002c06:	e06a      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002c08:	2101      	movs	r1, #1
 8002c0a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002c0e:	f7ff fc0b 	bl	8002428 <RCCEx_PLL3_Config>
 8002c12:	4606      	mov	r6, r0
      break;
 8002c14:	e75a      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      ret = HAL_ERROR;
 8002c16:	2601      	movs	r6, #1
 8002c18:	e758      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      status |= ret;
 8002c1a:	4335      	orrs	r5, r6
 8002c1c:	b2ed      	uxtb	r5, r5
 8002c1e:	e760      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002c20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c24:	f43f af73 	beq.w	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x5fe>
 8002c28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c2c:	f43f af6f 	beq.w	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x5fe>
 8002c30:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002c34:	f43f af6b 	beq.w	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x5fe>
      ret = HAL_ERROR;
 8002c38:	2601      	movs	r6, #1
 8002c3a:	e768      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x5fe>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002c3c:	2102      	movs	r1, #2
 8002c3e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002c42:	f7ff fbf1 	bl	8002428 <RCCEx_PLL3_Config>
 8002c46:	4606      	mov	r6, r0
      break;
 8002c48:	e761      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x5fe>
      status |= ret;
 8002c4a:	4335      	orrs	r5, r6
 8002c4c:	b2ed      	uxtb	r5, r5
 8002c4e:	e769      	b.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x614>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002c50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c54:	f43f af7c 	beq.w	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x640>
 8002c58:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002c5c:	f43f af78 	beq.w	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x640>
 8002c60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c64:	f43f af74 	beq.w	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x640>
      ret = HAL_ERROR;
 8002c68:	2601      	movs	r6, #1
 8002c6a:	e771      	b.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x640>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002c6c:	2102      	movs	r1, #2
 8002c6e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002c72:	f7ff fbd9 	bl	8002428 <RCCEx_PLL3_Config>
 8002c76:	4606      	mov	r6, r0
      break;
 8002c78:	e76a      	b.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x640>
      status |= ret;
 8002c7a:	4335      	orrs	r5, r6
 8002c7c:	b2ed      	uxtb	r5, r5
 8002c7e:	e772      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x656>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002c80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c84:	d085      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002c86:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002c8a:	d082      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002c8c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002c90:	f43f af7f 	beq.w	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x682>
      ret = HAL_ERROR;
 8002c94:	2601      	movs	r6, #1
 8002c96:	e77c      	b.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x682>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002c98:	2102      	movs	r1, #2
 8002c9a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002c9e:	f7ff fbc3 	bl	8002428 <RCCEx_PLL3_Config>
 8002ca2:	4606      	mov	r6, r0
      break;
 8002ca4:	e775      	b.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x682>
      status |= ret;
 8002ca6:	4335      	orrs	r5, r6
 8002ca8:	b2ed      	uxtb	r5, r5
 8002caa:	e77d      	b.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x698>
      status |= RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002cac:	2102      	movs	r1, #2
 8002cae:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002cb2:	f7ff fbb9 	bl	8002428 <RCCEx_PLL3_Config>
 8002cb6:	4305      	orrs	r5, r0
 8002cb8:	b2ed      	uxtb	r5, r5
 8002cba:	e784      	b.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
      status |= RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002cbc:	2102      	movs	r1, #2
 8002cbe:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002cc2:	f7ff fbb1 	bl	8002428 <RCCEx_PLL3_Config>
 8002cc6:	4305      	orrs	r5, r0
 8002cc8:	b2ed      	uxtb	r5, r5
 8002cca:	e78b      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
 8002ccc:	58024400 	.word	0x58024400
 8002cd0:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	1d20      	adds	r0, r4, #4
 8002cd8:	f7ff fb32 	bl	8002340 <RCCEx_PLL2_Config>
 8002cdc:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002cde:	b9fe      	cbnz	r6, 8002d20 <HAL_RCCEx_PeriphCLKConfig+0x810>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ce0:	4a65      	ldr	r2, [pc, #404]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8002ce2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002ce4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002ce8:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8002cec:	430b      	orrs	r3, r1
 8002cee:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002cf0:	6823      	ldr	r3, [r4, #0]
 8002cf2:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002cf6:	d024      	beq.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x832>
    switch(PeriphClkInit->UsbClockSelection)
 8002cf8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8002cfc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d00:	d02a      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8002d02:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002d06:	d013      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x820>
 8002d08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d0c:	d00b      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x816>
      ret = HAL_ERROR;
 8002d0e:	2601      	movs	r6, #1
 8002d10:	e00e      	b.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x820>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002d12:	2102      	movs	r1, #2
 8002d14:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002d18:	f7ff fb86 	bl	8002428 <RCCEx_PLL3_Config>
 8002d1c:	4606      	mov	r6, r0
      break;
 8002d1e:	e7de      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      status |= ret;
 8002d20:	4335      	orrs	r5, r6
 8002d22:	b2ed      	uxtb	r5, r5
 8002d24:	e7e4      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d26:	4a54      	ldr	r2, [pc, #336]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8002d28:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002d2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d2e:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8002d30:	b9ce      	cbnz	r6, 8002d66 <HAL_RCCEx_PeriphCLKConfig+0x856>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d32:	4a51      	ldr	r2, [pc, #324]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8002d34:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002d36:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002d3a:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8002d3e:	430b      	orrs	r3, r1
 8002d40:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002d42:	6823      	ldr	r3, [r4, #0]
 8002d44:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002d48:	d01d      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x876>
    switch(PeriphClkInit->SdmmcClockSelection)
 8002d4a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002d4c:	b173      	cbz	r3, 8002d6c <HAL_RCCEx_PeriphCLKConfig+0x85c>
 8002d4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d52:	d02c      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x89e>
      ret = HAL_ERROR;
 8002d54:	2601      	movs	r6, #1
 8002d56:	e00e      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x866>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d58:	2101      	movs	r1, #1
 8002d5a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002d5e:	f7ff fb63 	bl	8002428 <RCCEx_PLL3_Config>
 8002d62:	4606      	mov	r6, r0
      break;
 8002d64:	e7e4      	b.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x820>
      status |= ret;
 8002d66:	4335      	orrs	r5, r6
 8002d68:	b2ed      	uxtb	r5, r5
 8002d6a:	e7ea      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x832>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d6c:	4a42      	ldr	r2, [pc, #264]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8002d6e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d74:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8002d76:	bb06      	cbnz	r6, 8002dba <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8002d78:	4a3f      	ldr	r2, [pc, #252]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8002d7a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002d7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d80:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8002d82:	430b      	orrs	r3, r1
 8002d84:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002d86:	6823      	ldr	r3, [r4, #0]
 8002d88:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8002d8c:	d118      	bne.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002d8e:	6823      	ldr	r3, [r4, #0]
 8002d90:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002d94:	d02d      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
    switch(PeriphClkInit->RngClockSelection)
 8002d96:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002d98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d9c:	d01b      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
 8002d9e:	d917      	bls.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8002da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002da4:	d01c      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
 8002da6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002daa:	d112      	bne.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
 8002dac:	e018      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002dae:	2102      	movs	r1, #2
 8002db0:	1d20      	adds	r0, r4, #4
 8002db2:	f7ff fac5 	bl	8002340 <RCCEx_PLL2_Config>
 8002db6:	4606      	mov	r6, r0
      break;
 8002db8:	e7dd      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x866>
      status |= ret;
 8002dba:	4335      	orrs	r5, r6
 8002dbc:	b2ed      	uxtb	r5, r5
 8002dbe:	e7e2      	b.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x876>
    status |= RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002dc0:	2102      	movs	r1, #2
 8002dc2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002dc6:	f7ff fb2f 	bl	8002428 <RCCEx_PLL3_Config>
 8002dca:	4305      	orrs	r5, r0
 8002dcc:	b2ed      	uxtb	r5, r5
 8002dce:	e7de      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x87e>
    switch(PeriphClkInit->RngClockSelection)
 8002dd0:	b133      	cbz	r3, 8002de0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
      ret = HAL_ERROR;
 8002dd2:	2601      	movs	r6, #1
 8002dd4:	e004      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dd6:	4a28      	ldr	r2, [pc, #160]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8002dd8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002dda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dde:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8002de0:	2e00      	cmp	r6, #0
 8002de2:	d13d      	bne.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x950>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002de4:	4a24      	ldr	r2, [pc, #144]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8002de6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002de8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dec:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8002dee:	430b      	orrs	r3, r1
 8002df0:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002df2:	6823      	ldr	r3, [r4, #0]
 8002df4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002df8:	d006      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002dfa:	4a1f      	ldr	r2, [pc, #124]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8002dfc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002dfe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e02:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8002e04:	430b      	orrs	r3, r1
 8002e06:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002e08:	6823      	ldr	r3, [r4, #0]
 8002e0a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002e0e:	d007      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x910>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002e10:	4a19      	ldr	r2, [pc, #100]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8002e12:	6913      	ldr	r3, [r2, #16]
 8002e14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e18:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 8002e1c:	430b      	orrs	r3, r1
 8002e1e:	6113      	str	r3, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e20:	6823      	ldr	r3, [r4, #0]
 8002e22:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8002e26:	d006      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x926>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e28:	4a13      	ldr	r2, [pc, #76]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8002e2a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002e2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e30:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002e32:	430b      	orrs	r3, r1
 8002e34:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002e36:	6823      	ldr	r3, [r4, #0]
 8002e38:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8002e3c:	d009      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x942>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e3e:	4b0e      	ldr	r3, [pc, #56]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8002e40:	691a      	ldr	r2, [r3, #16]
 8002e42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e46:	611a      	str	r2, [r3, #16]
 8002e48:	691a      	ldr	r2, [r3, #16]
 8002e4a:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	611a      	str	r2, [r3, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002e52:	6823      	ldr	r3, [r4, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	db06      	blt.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x956>
  if (status == HAL_OK)
 8002e58:	b105      	cbz	r5, 8002e5c <HAL_RCCEx_PeriphCLKConfig+0x94c>
  return HAL_ERROR;
 8002e5a:	2501      	movs	r5, #1
}
 8002e5c:	4628      	mov	r0, r5
 8002e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      status |= ret;
 8002e60:	4335      	orrs	r5, r6
 8002e62:	b2ed      	uxtb	r5, r5
 8002e64:	e7c5      	b.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8002e66:	4a04      	ldr	r2, [pc, #16]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8002e68:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002e6a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002e6e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002e70:	430b      	orrs	r3, r1
 8002e72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e74:	e7f0      	b.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x948>
 8002e76:	bf00      	nop
 8002e78:	58024400 	.word	0x58024400

08002e7c <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8002e7c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> POSITION_VAL(RCC_D3CFGR_D3PPRE_0)]);
 8002e7e:	f7ff fa19 	bl	80022b4 <HAL_RCC_GetHCLKFreq>
 8002e82:	4b07      	ldr	r3, [pc, #28]	; (8002ea0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e8a:	2210      	movs	r2, #16
 8002e8c:	fa92 f2a2 	rbit	r2, r2
 8002e90:	fab2 f282 	clz	r2, r2
 8002e94:	40d3      	lsrs	r3, r2
 8002e96:	4a03      	ldr	r2, [pc, #12]	; (8002ea4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8002e98:	5cd3      	ldrb	r3, [r2, r3]
}
 8002e9a:	40d8      	lsrs	r0, r3
 8002e9c:	bd08      	pop	{r3, pc}
 8002e9e:	bf00      	nop
 8002ea0:	58024400 	.word	0x58024400
 8002ea4:	08007bac 	.word	0x08007bac

08002ea8 <HAL_RCCEx_GetPLL2ClockFreq>:
{
 8002ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002eaa:	4c6c      	ldr	r4, [pc, #432]	; (800305c <HAL_RCCEx_GetPLL2ClockFreq+0x1b4>)
 8002eac:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8002eae:	f007 0703 	and.w	r7, r7, #3
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 8002eb2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002eb4:	f3c1 3e05 	ubfx	lr, r1, #12, #6
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8002eb8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002eba:	f003 0310 	and.w	r3, r3, #16
  fracn2 =(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8002ebe:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 8002ec0:	f3c6 06cc 	ubfx	r6, r6, #3, #13
 8002ec4:	fb06 f603 	mul.w	r6, r6, r3
 8002ec8:	ee07 6a90 	vmov	s15, r6
 8002ecc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  switch (pllsource)
 8002ed0:	2f01      	cmp	r7, #1
 8002ed2:	d060      	beq.n	8002f96 <HAL_RCCEx_GetPLL2ClockFreq+0xee>
 8002ed4:	b1f7      	cbz	r7, 8002f14 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8002ed6:	2f02      	cmp	r7, #2
 8002ed8:	f000 80a4 	beq.w	8003024 <HAL_RCCEx_GetPLL2ClockFreq+0x17c>
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8002edc:	4b60      	ldr	r3, [pc, #384]	; (8003060 <HAL_RCCEx_GetPLL2ClockFreq+0x1b8>)
 8002ede:	fbb3 f3fe 	udiv	r3, r3, lr
 8002ee2:	ee07 3a90 	vmov	s15, r3
 8002ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eea:	4b5c      	ldr	r3, [pc, #368]	; (800305c <HAL_RCCEx_GetPLL2ClockFreq+0x1b4>)
 8002eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ef2:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8003064 <HAL_RCCEx_GetPLL2ClockFreq+0x1bc>
 8002ef6:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002efa:	ee06 3a90 	vmov	s13, r3
 8002efe:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8002f02:	ee36 7a87 	vadd.f32	s14, s13, s14
 8002f06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f0a:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002f0e:	ee67 7a87 	vmul.f32	s15, s15, s14
    break;
 8002f12:	e05b      	b.n	8002fcc <HAL_RCCEx_GetPLL2ClockFreq+0x124>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f14:	4b51      	ldr	r3, [pc, #324]	; (800305c <HAL_RCCEx_GetPLL2ClockFreq+0x1b4>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f013 0f20 	tst.w	r3, #32
 8002f1c:	d01f      	beq.n	8002f5e <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002f1e:	4a4f      	ldr	r2, [pc, #316]	; (800305c <HAL_RCCEx_GetPLL2ClockFreq+0x1b4>)
 8002f20:	6813      	ldr	r3, [r2, #0]
 8002f22:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002f26:	4d50      	ldr	r5, [pc, #320]	; (8003068 <HAL_RCCEx_GetPLL2ClockFreq+0x1c0>)
 8002f28:	40dd      	lsrs	r5, r3
      pll2vco = ( hsivalue / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8002f2a:	fbb5 f3fe 	udiv	r3, r5, lr
 8002f2e:	ee07 3a90 	vmov	s15, r3
 8002f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f36:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002f38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f3c:	eddf 6a49 	vldr	s13, [pc, #292]	; 8003064 <HAL_RCCEx_GetPLL2ClockFreq+0x1bc>
 8002f40:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002f44:	ee06 3a90 	vmov	s13, r3
 8002f48:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8002f4c:	ee36 7a87 	vadd.f32	s14, s13, s14
 8002f50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f54:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002f58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f5c:	e036      	b.n	8002fcc <HAL_RCCEx_GetPLL2ClockFreq+0x124>
      pll2vco = (HSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8002f5e:	4c42      	ldr	r4, [pc, #264]	; (8003068 <HAL_RCCEx_GetPLL2ClockFreq+0x1c0>)
 8002f60:	fbb4 f3fe 	udiv	r3, r4, lr
 8002f64:	ee07 3a90 	vmov	s15, r3
 8002f68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f6c:	4b3b      	ldr	r3, [pc, #236]	; (800305c <HAL_RCCEx_GetPLL2ClockFreq+0x1b4>)
 8002f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f74:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8003064 <HAL_RCCEx_GetPLL2ClockFreq+0x1bc>
 8002f78:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002f7c:	ee06 3a90 	vmov	s13, r3
 8002f80:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8002f84:	ee36 7a87 	vadd.f32	s14, s13, s14
 8002f88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f8c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002f90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f94:	e01a      	b.n	8002fcc <HAL_RCCEx_GetPLL2ClockFreq+0x124>
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8002f96:	4932      	ldr	r1, [pc, #200]	; (8003060 <HAL_RCCEx_GetPLL2ClockFreq+0x1b8>)
 8002f98:	fbb1 f3fe 	udiv	r3, r1, lr
 8002f9c:	ee07 3a90 	vmov	s15, r3
 8002fa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fa4:	4b2d      	ldr	r3, [pc, #180]	; (800305c <HAL_RCCEx_GetPLL2ClockFreq+0x1b4>)
 8002fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fac:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8003064 <HAL_RCCEx_GetPLL2ClockFreq+0x1bc>
 8002fb0:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002fb4:	ee06 3a90 	vmov	s13, r3
 8002fb8:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8002fbc:	ee36 7a87 	vadd.f32	s14, s13, s14
 8002fc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002fc4:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002fc8:	ee67 7a87 	vmul.f32	s15, s15, s14
  PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9) + 1  )) ;
 8002fcc:	4a23      	ldr	r2, [pc, #140]	; (800305c <HAL_RCCEx_GetPLL2ClockFreq+0x1b4>)
 8002fce:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002fd0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	ee07 3a10 	vmov	s14, r3
 8002fda:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002fde:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002fe2:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8002fe6:	edc0 6a00 	vstr	s13, [r0]
  PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + 1 )) ;
 8002fea:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002fec:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	ee07 3a10 	vmov	s14, r3
 8002ff6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002ffa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002ffe:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8003002:	edc0 6a01 	vstr	s13, [r0, #4]
  PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + 1 )) ;
 8003006:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8003008:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800300c:	3301      	adds	r3, #1
 800300e:	ee07 3a10 	vmov	s14, r3
 8003012:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003016:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800301a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800301e:	edc0 6a02 	vstr	s13, [r0, #8]
 8003022:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pll2vco = (HSE_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8003024:	4a11      	ldr	r2, [pc, #68]	; (800306c <HAL_RCCEx_GetPLL2ClockFreq+0x1c4>)
 8003026:	fbb2 f3fe 	udiv	r3, r2, lr
 800302a:	ee07 3a90 	vmov	s15, r3
 800302e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003032:	4b0a      	ldr	r3, [pc, #40]	; (800305c <HAL_RCCEx_GetPLL2ClockFreq+0x1b4>)
 8003034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800303a:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8003064 <HAL_RCCEx_GetPLL2ClockFreq+0x1bc>
 800303e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003042:	ee06 3a90 	vmov	s13, r3
 8003046:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800304a:	ee36 7a87 	vadd.f32	s14, s13, s14
 800304e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003052:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003056:	ee67 7a87 	vmul.f32	s15, s15, s14
    break;
 800305a:	e7b7      	b.n	8002fcc <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 800305c:	58024400 	.word	0x58024400
 8003060:	003d0900 	.word	0x003d0900
 8003064:	39000000 	.word	0x39000000
 8003068:	03d09000 	.word	0x03d09000
 800306c:	007a1200 	.word	0x007a1200

08003070 <HAL_RCCEx_GetPLL3ClockFreq>:
{
 8003070:	b5f0      	push	{r4, r5, r6, r7, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003072:	4c6c      	ldr	r4, [pc, #432]	; (8003224 <HAL_RCCEx_GetPLL3ClockFreq+0x1b4>)
 8003074:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8003076:	f007 0703 	and.w	r7, r7, #3
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800307a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800307c:	f3c1 5e05 	ubfx	lr, r1, #20, #6
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8003080:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003082:	f403 7380 	and.w	r3, r3, #256	; 0x100
  fracn3 = (pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003086:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8003088:	f3c6 06cc 	ubfx	r6, r6, #3, #13
 800308c:	fb06 f603 	mul.w	r6, r6, r3
 8003090:	ee07 6a90 	vmov	s15, r6
 8003094:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  switch (pllsource)
 8003098:	2f01      	cmp	r7, #1
 800309a:	d060      	beq.n	800315e <HAL_RCCEx_GetPLL3ClockFreq+0xee>
 800309c:	b1f7      	cbz	r7, 80030dc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800309e:	2f02      	cmp	r7, #2
 80030a0:	f000 80a4 	beq.w	80031ec <HAL_RCCEx_GetPLL3ClockFreq+0x17c>
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 80030a4:	4b60      	ldr	r3, [pc, #384]	; (8003228 <HAL_RCCEx_GetPLL3ClockFreq+0x1b8>)
 80030a6:	fbb3 f3fe 	udiv	r3, r3, lr
 80030aa:	ee07 3a90 	vmov	s15, r3
 80030ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030b2:	4b5c      	ldr	r3, [pc, #368]	; (8003224 <HAL_RCCEx_GetPLL3ClockFreq+0x1b4>)
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030ba:	eddf 6a5c 	vldr	s13, [pc, #368]	; 800322c <HAL_RCCEx_GetPLL3ClockFreq+0x1bc>
 80030be:	ee27 7a26 	vmul.f32	s14, s14, s13
 80030c2:	ee06 3a90 	vmov	s13, r3
 80030c6:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80030ca:	ee36 7a87 	vadd.f32	s14, s13, s14
 80030ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030d2:	ee37 7a26 	vadd.f32	s14, s14, s13
 80030d6:	ee67 7a87 	vmul.f32	s15, s15, s14
    break;
 80030da:	e05b      	b.n	8003194 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030dc:	4b51      	ldr	r3, [pc, #324]	; (8003224 <HAL_RCCEx_GetPLL3ClockFreq+0x1b4>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f013 0f20 	tst.w	r3, #32
 80030e4:	d01f      	beq.n	8003126 <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80030e6:	4a4f      	ldr	r2, [pc, #316]	; (8003224 <HAL_RCCEx_GetPLL3ClockFreq+0x1b4>)
 80030e8:	6813      	ldr	r3, [r2, #0]
 80030ea:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80030ee:	4d50      	ldr	r5, [pc, #320]	; (8003230 <HAL_RCCEx_GetPLL3ClockFreq+0x1c0>)
 80030f0:	40dd      	lsrs	r5, r3
      pll3vco = (hsivalue / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 80030f2:	fbb5 f3fe 	udiv	r3, r5, lr
 80030f6:	ee07 3a90 	vmov	s15, r3
 80030fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030fe:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003104:	eddf 6a49 	vldr	s13, [pc, #292]	; 800322c <HAL_RCCEx_GetPLL3ClockFreq+0x1bc>
 8003108:	ee27 7a26 	vmul.f32	s14, s14, s13
 800310c:	ee06 3a90 	vmov	s13, r3
 8003110:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8003114:	ee36 7a87 	vadd.f32	s14, s13, s14
 8003118:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800311c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003120:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003124:	e036      	b.n	8003194 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
      pll3vco = (HSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8003126:	4c42      	ldr	r4, [pc, #264]	; (8003230 <HAL_RCCEx_GetPLL3ClockFreq+0x1c0>)
 8003128:	fbb4 f3fe 	udiv	r3, r4, lr
 800312c:	ee07 3a90 	vmov	s15, r3
 8003130:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003134:	4b3b      	ldr	r3, [pc, #236]	; (8003224 <HAL_RCCEx_GetPLL3ClockFreq+0x1b4>)
 8003136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003138:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800313c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800322c <HAL_RCCEx_GetPLL3ClockFreq+0x1bc>
 8003140:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003144:	ee06 3a90 	vmov	s13, r3
 8003148:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800314c:	ee36 7a87 	vadd.f32	s14, s13, s14
 8003150:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003154:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003158:	ee67 7a87 	vmul.f32	s15, s15, s14
 800315c:	e01a      	b.n	8003194 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 800315e:	4932      	ldr	r1, [pc, #200]	; (8003228 <HAL_RCCEx_GetPLL3ClockFreq+0x1b8>)
 8003160:	fbb1 f3fe 	udiv	r3, r1, lr
 8003164:	ee07 3a90 	vmov	s15, r3
 8003168:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800316c:	4b2d      	ldr	r3, [pc, #180]	; (8003224 <HAL_RCCEx_GetPLL3ClockFreq+0x1b4>)
 800316e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003170:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003174:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800322c <HAL_RCCEx_GetPLL3ClockFreq+0x1bc>
 8003178:	ee27 7a26 	vmul.f32	s14, s14, s13
 800317c:	ee06 3a90 	vmov	s13, r3
 8003180:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8003184:	ee36 7a87 	vadd.f32	s14, s13, s14
 8003188:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800318c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003190:	ee67 7a87 	vmul.f32	s15, s15, s14
  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + 1 )) ;
 8003194:	4a23      	ldr	r2, [pc, #140]	; (8003224 <HAL_RCCEx_GetPLL3ClockFreq+0x1b4>)
 8003196:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003198:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800319c:	3301      	adds	r3, #1
 800319e:	ee07 3a10 	vmov	s14, r3
 80031a2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80031a6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80031aa:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80031ae:	edc0 6a00 	vstr	s13, [r0]
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + 1 )) ;
 80031b2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80031b4:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80031b8:	3301      	adds	r3, #1
 80031ba:	ee07 3a10 	vmov	s14, r3
 80031be:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80031c2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80031c6:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80031ca:	edc0 6a01 	vstr	s13, [r0, #4]
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + 1 )) ;
 80031ce:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80031d0:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80031d4:	3301      	adds	r3, #1
 80031d6:	ee07 3a10 	vmov	s14, r3
 80031da:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80031de:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80031e2:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80031e6:	edc0 6a02 	vstr	s13, [r0, #8]
 80031ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pll3vco = (HSE_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 80031ec:	4a11      	ldr	r2, [pc, #68]	; (8003234 <HAL_RCCEx_GetPLL3ClockFreq+0x1c4>)
 80031ee:	fbb2 f3fe 	udiv	r3, r2, lr
 80031f2:	ee07 3a90 	vmov	s15, r3
 80031f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031fa:	4b0a      	ldr	r3, [pc, #40]	; (8003224 <HAL_RCCEx_GetPLL3ClockFreq+0x1b4>)
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003202:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800322c <HAL_RCCEx_GetPLL3ClockFreq+0x1bc>
 8003206:	ee27 7a26 	vmul.f32	s14, s14, s13
 800320a:	ee06 3a90 	vmov	s13, r3
 800320e:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8003212:	ee36 7a87 	vadd.f32	s14, s13, s14
 8003216:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800321a:	ee37 7a26 	vadd.f32	s14, s14, s13
 800321e:	ee67 7a87 	vmul.f32	s15, s15, s14
    break;
 8003222:	e7b7      	b.n	8003194 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 8003224:	58024400 	.word	0x58024400
 8003228:	003d0900 	.word	0x003d0900
 800322c:	39000000 	.word	0x39000000
 8003230:	03d09000 	.word	0x03d09000
 8003234:	007a1200 	.word	0x007a1200

08003238 <HAL_RCCEx_GetD1SysClockFreq>:
{
 8003238:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> POSITION_VAL(RCC_D1CFGR_D1CPRE_0)];
 800323a:	f7fe fe5d 	bl	8001ef8 <HAL_RCC_GetSysClockFreq>
 800323e:	4b08      	ldr	r3, [pc, #32]	; (8003260 <HAL_RCCEx_GetD1SysClockFreq+0x28>)
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003246:	f44f 7280 	mov.w	r2, #256	; 0x100
 800324a:	fa92 f2a2 	rbit	r2, r2
 800324e:	fab2 f282 	clz	r2, r2
 8003252:	40d3      	lsrs	r3, r2
 8003254:	4a03      	ldr	r2, [pc, #12]	; (8003264 <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 8003256:	5cd3      	ldrb	r3, [r2, r3]
 8003258:	40d8      	lsrs	r0, r3
 800325a:	4b03      	ldr	r3, [pc, #12]	; (8003268 <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 800325c:	6018      	str	r0, [r3, #0]
}
 800325e:	bd08      	pop	{r3, pc}
 8003260:	58024400 	.word	0x58024400
 8003264:	08007bac 	.word	0x08007bac
 8003268:	20000010 	.word	0x20000010

0800326c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800326c:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
 800326e:	6802      	ldr	r2, [r0, #0]
 8003270:	6953      	ldr	r3, [r2, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8003272:	6991      	ldr	r1, [r2, #24]
 8003274:	f041 0108 	orr.w	r1, r1, #8
 8003278:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800327a:	6801      	ldr	r1, [r0, #0]
 800327c:	698a      	ldr	r2, [r1, #24]
 800327e:	f042 0210 	orr.w	r2, r2, #16
 8003282:	618a      	str	r2, [r1, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003284:	6801      	ldr	r1, [r0, #0]
 8003286:	680a      	ldr	r2, [r1, #0]
 8003288:	f022 0201 	bic.w	r2, r2, #1
 800328c:	600a      	str	r2, [r1, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800328e:	6801      	ldr	r1, [r0, #0]
 8003290:	690c      	ldr	r4, [r1, #16]
 8003292:	4a29      	ldr	r2, [pc, #164]	; (8003338 <SPI_CloseTransfer+0xcc>)
 8003294:	4022      	ands	r2, r4
 8003296:	610a      	str	r2, [r1, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN|SPI_CFG1_RXDMAEN);
 8003298:	6801      	ldr	r1, [r0, #0]
 800329a:	688a      	ldr	r2, [r1, #8]
 800329c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80032a0:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80032a2:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 80032a6:	b2d2      	uxtb	r2, r2
 80032a8:	2a04      	cmp	r2, #4
 80032aa:	d00d      	beq.n	80032c8 <SPI_CloseTransfer+0x5c>
  {
    if ((itflag & SPI_FLAG_UDR) != RESET)
 80032ac:	f013 0f20 	tst.w	r3, #32
 80032b0:	d00a      	beq.n	80032c8 <SPI_CloseTransfer+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80032b2:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 80032b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80032ba:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80032be:	6801      	ldr	r1, [r0, #0]
 80032c0:	698a      	ldr	r2, [r1, #24]
 80032c2:	f042 0220 	orr.w	r2, r2, #32
 80032c6:	618a      	str	r2, [r1, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80032c8:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 80032cc:	b2d2      	uxtb	r2, r2
 80032ce:	2a03      	cmp	r2, #3
 80032d0:	d00d      	beq.n	80032ee <SPI_CloseTransfer+0x82>
  {
    if ((itflag & SPI_FLAG_OVR) != RESET)
 80032d2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80032d6:	d00a      	beq.n	80032ee <SPI_CloseTransfer+0x82>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80032d8:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 80032dc:	f042 0204 	orr.w	r2, r2, #4
 80032e0:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032e4:	6801      	ldr	r1, [r0, #0]
 80032e6:	698a      	ldr	r2, [r1, #24]
 80032e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032ec:	618a      	str	r2, [r1, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != RESET)
 80032ee:	f413 7f00 	tst.w	r3, #512	; 0x200
 80032f2:	d00a      	beq.n	800330a <SPI_CloseTransfer+0x9e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80032f4:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 80032f8:	f042 0201 	orr.w	r2, r2, #1
 80032fc:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003300:	6801      	ldr	r1, [r0, #0]
 8003302:	698a      	ldr	r2, [r1, #24]
 8003304:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003308:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != RESET)
 800330a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800330e:	d00a      	beq.n	8003326 <SPI_CloseTransfer+0xba>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003310:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8003314:	f043 0308 	orr.w	r3, r3, #8
 8003318:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800331c:	6802      	ldr	r2, [r0, #0]
 800331e:	6993      	ldr	r3, [r2, #24]
 8003320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003324:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = 0U;
 8003326:	2300      	movs	r3, #0
 8003328:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = 0U;
 800332c:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 8003330:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	fffffc94 	.word	0xfffffc94

0800333c <SPI_GetPacketSize>:
  *               the configuration information for SPI module.
  * @retval Packet size occuppied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold>>SPI_CFG1_FTHLV_Pos) + 1;
 800333c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800333e:	095b      	lsrs	r3, r3, #5
  uint32_t data_size       = (hspi->Init.DataSize     >>SPI_CFG1_DSIZE_Pos) + 1;
 8003340:	68c0      	ldr	r0, [r0, #12]

  /* Convert data size to Byte */
  data_size = (data_size+7)/8;
 8003342:	3008      	adds	r0, #8
 8003344:	08c0      	lsrs	r0, r0, #3

  return data_size * fifo_threashold;
}
 8003346:	fb03 0000 	mla	r0, r3, r0, r0
 800334a:	4770      	bx	lr

0800334c <SPI_WaitOnFlagUntilTimeout>:
{
 800334c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003350:	4607      	mov	r7, r0
 8003352:	460e      	mov	r6, r1
 8003354:	4615      	mov	r5, r2
 8003356:	4698      	mov	r8, r3
 8003358:	9c06      	ldr	r4, [sp, #24]
  while((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	ea36 0303 	bics.w	r3, r6, r3
 8003362:	bf0c      	ite	eq
 8003364:	2301      	moveq	r3, #1
 8003366:	2300      	movne	r3, #0
 8003368:	42ab      	cmp	r3, r5
 800336a:	d10c      	bne.n	8003386 <SPI_WaitOnFlagUntilTimeout+0x3a>
    if(Timeout != HAL_MAX_DELAY)
 800336c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003370:	d0f3      	beq.n	800335a <SPI_WaitOnFlagUntilTimeout+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8003372:	b15c      	cbz	r4, 800338c <SPI_WaitOnFlagUntilTimeout+0x40>
 8003374:	f7fd f97a 	bl	800066c <HAL_GetTick>
 8003378:	eba0 0008 	sub.w	r0, r0, r8
 800337c:	4284      	cmp	r4, r0
 800337e:	d2ec      	bcs.n	800335a <SPI_WaitOnFlagUntilTimeout+0xe>
        return HAL_TIMEOUT;
 8003380:	2003      	movs	r0, #3
}
 8003382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 8003386:	2000      	movs	r0, #0
 8003388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_TIMEOUT;
 800338c:	2003      	movs	r0, #3
 800338e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08003394 <HAL_SPI_Init>:
  if (hspi == NULL)
 8003394:	2800      	cmp	r0, #0
 8003396:	f000 8099 	beq.w	80034cc <HAL_SPI_Init+0x138>
{
 800339a:	b570      	push	{r4, r5, r6, lr}
 800339c:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800339e:	2300      	movs	r3, #0
 80033a0:	6283      	str	r3, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80033a2:	6805      	ldr	r5, [r0, #0]
 80033a4:	4b4c      	ldr	r3, [pc, #304]	; (80034d8 <HAL_SPI_Init+0x144>)
 80033a6:	4e4d      	ldr	r6, [pc, #308]	; (80034dc <HAL_SPI_Init+0x148>)
 80033a8:	429d      	cmp	r5, r3
 80033aa:	bf18      	it	ne
 80033ac:	42b5      	cmpne	r5, r6
 80033ae:	bf14      	ite	ne
 80033b0:	2601      	movne	r6, #1
 80033b2:	2600      	moveq	r6, #0
 80033b4:	d007      	beq.n	80033c6 <HAL_SPI_Init+0x32>
 80033b6:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 80033ba:	429d      	cmp	r5, r3
 80033bc:	d003      	beq.n	80033c6 <HAL_SPI_Init+0x32>
 80033be:	68c3      	ldr	r3, [r0, #12]
 80033c0:	2b0f      	cmp	r3, #15
 80033c2:	f200 8085 	bhi.w	80034d0 <HAL_SPI_Init+0x13c>
  packet_length = SPI_GetPacketSize(hspi);
 80033c6:	4620      	mov	r0, r4
 80033c8:	f7ff ffb8 	bl	800333c <SPI_GetPacketSize>
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE )) ||
 80033cc:	b126      	cbz	r6, 80033d8 <HAL_SPI_Init+0x44>
 80033ce:	4b44      	ldr	r3, [pc, #272]	; (80034e0 <HAL_SPI_Init+0x14c>)
 80033d0:	429d      	cmp	r5, r3
 80033d2:	d001      	beq.n	80033d8 <HAL_SPI_Init+0x44>
 80033d4:	2808      	cmp	r0, #8
 80033d6:	d87d      	bhi.n	80034d4 <HAL_SPI_Init+0x140>
 80033d8:	4b40      	ldr	r3, [pc, #256]	; (80034dc <HAL_SPI_Init+0x148>)
 80033da:	4a3f      	ldr	r2, [pc, #252]	; (80034d8 <HAL_SPI_Init+0x144>)
 80033dc:	429d      	cmp	r5, r3
 80033de:	bf18      	it	ne
 80033e0:	4295      	cmpne	r5, r2
 80033e2:	d05c      	beq.n	800349e <HAL_SPI_Init+0x10a>
      (( IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)) )
 80033e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033e8:	429d      	cmp	r5, r3
 80033ea:	d058      	beq.n	800349e <HAL_SPI_Init+0x10a>
  if (hspi->State == HAL_SPI_STATE_RESET)
 80033ec:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d058      	beq.n	80034a6 <HAL_SPI_Init+0x112>
  hspi->State = HAL_SPI_STATE_BUSY;
 80033f4:	2302      	movs	r3, #2
 80033f6:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 80033fa:	6822      	ldr	r2, [r4, #0]
 80033fc:	6813      	ldr	r3, [r2, #0]
 80033fe:	f023 0301 	bic.w	r3, r3, #1
 8003402:	6013      	str	r3, [r2, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8003404:	69a3      	ldr	r3, [r4, #24]
 8003406:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800340a:	d052      	beq.n	80034b2 <HAL_SPI_Init+0x11e>
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800340c:	6822      	ldr	r2, [r4, #0]
 800340e:	69e3      	ldr	r3, [r4, #28]
 8003410:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003412:	430b      	orrs	r3, r1
 8003414:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003416:	430b      	orrs	r3, r1
 8003418:	68e1      	ldr	r1, [r4, #12]
 800341a:	430b      	orrs	r3, r1
 800341c:	6093      	str	r3, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800341e:	6822      	ldr	r2, [r4, #0]
 8003420:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003422:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003424:	430b      	orrs	r3, r1
 8003426:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003428:	430b      	orrs	r3, r1
 800342a:	69a1      	ldr	r1, [r4, #24]
 800342c:	430b      	orrs	r3, r1
 800342e:	6921      	ldr	r1, [r4, #16]
 8003430:	430b      	orrs	r3, r1
 8003432:	6961      	ldr	r1, [r4, #20]
 8003434:	430b      	orrs	r3, r1
 8003436:	6a21      	ldr	r1, [r4, #32]
 8003438:	430b      	orrs	r3, r1
 800343a:	6861      	ldr	r1, [r4, #4]
 800343c:	430b      	orrs	r3, r1
 800343e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8003440:	430b      	orrs	r3, r1
 8003442:	68a1      	ldr	r1, [r4, #8]
 8003444:	430b      	orrs	r3, r1
 8003446:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003448:	430b      	orrs	r3, r1
 800344a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800344c:	430b      	orrs	r3, r1
 800344e:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8003450:	6863      	ldr	r3, [r4, #4]
 8003452:	b96b      	cbnz	r3, 8003470 <HAL_SPI_Init+0xdc>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8003454:	6822      	ldr	r2, [r4, #0]
 8003456:	6893      	ldr	r3, [r2, #8]
 8003458:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800345c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003460:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8003462:	6822      	ldr	r2, [r4, #0]
 8003464:	6893      	ldr	r3, [r2, #8]
 8003466:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800346a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800346e:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003470:	6822      	ldr	r2, [r4, #0]
 8003472:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003474:	f023 0301 	bic.w	r3, r3, #1
 8003478:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800347a:	6863      	ldr	r3, [r4, #4]
 800347c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003480:	d006      	beq.n	8003490 <HAL_SPI_Init+0xfc>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8003482:	6822      	ldr	r2, [r4, #0]
 8003484:	68d3      	ldr	r3, [r2, #12]
 8003486:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800348a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800348c:	430b      	orrs	r3, r1
 800348e:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003490:	2000      	movs	r0, #0
 8003492:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8003496:	2301      	movs	r3, #1
 8003498:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  return HAL_OK;
 800349c:	bd70      	pop	{r4, r5, r6, pc}
      (( IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)) )
 800349e:	2810      	cmp	r0, #16
 80034a0:	d9a4      	bls.n	80033ec <HAL_SPI_Init+0x58>
    return HAL_ERROR;
 80034a2:	2001      	movs	r0, #1
}
 80034a4:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 80034a6:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 80034aa:	4620      	mov	r0, r4
 80034ac:	f001 ff00 	bl	80052b0 <HAL_SPI_MspInit>
 80034b0:	e7a0      	b.n	80033f4 <HAL_SPI_Init+0x60>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 80034b2:	6863      	ldr	r3, [r4, #4]
 80034b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034b8:	d1a8      	bne.n	800340c <HAL_SPI_Init+0x78>
 80034ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d1a5      	bne.n	800340c <HAL_SPI_Init+0x78>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80034c0:	6822      	ldr	r2, [r4, #0]
 80034c2:	6813      	ldr	r3, [r2, #0]
 80034c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034c8:	6013      	str	r3, [r2, #0]
 80034ca:	e79f      	b.n	800340c <HAL_SPI_Init+0x78>
    return HAL_ERROR;
 80034cc:	2001      	movs	r0, #1
 80034ce:	4770      	bx	lr
    return HAL_ERROR;
 80034d0:	2001      	movs	r0, #1
 80034d2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80034d4:	2001      	movs	r0, #1
 80034d6:	bd70      	pop	{r4, r5, r6, pc}
 80034d8:	40013000 	.word	0x40013000
 80034dc:	40003800 	.word	0x40003800
 80034e0:	40003c00 	.word	0x40003c00

080034e4 <HAL_SPI_Transmit>:
{
 80034e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034e8:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 80034ea:	f890 4080 	ldrb.w	r4, [r0, #128]	; 0x80
 80034ee:	2c01      	cmp	r4, #1
 80034f0:	d103      	bne.n	80034fa <HAL_SPI_Transmit+0x16>
 80034f2:	2002      	movs	r0, #2
}
 80034f4:	b002      	add	sp, #8
 80034f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034fa:	461d      	mov	r5, r3
 80034fc:	4617      	mov	r7, r2
 80034fe:	460e      	mov	r6, r1
 8003500:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8003502:	2301      	movs	r3, #1
 8003504:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8003508:	f7fd f8b0 	bl	800066c <HAL_GetTick>
 800350c:	4680      	mov	r8, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800350e:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 8003512:	b2db      	uxtb	r3, r3
 8003514:	2b01      	cmp	r3, #1
 8003516:	d004      	beq.n	8003522 <HAL_SPI_Transmit+0x3e>
    __HAL_UNLOCK(hspi);
 8003518:	2300      	movs	r3, #0
 800351a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 800351e:	2002      	movs	r0, #2
 8003520:	e7e8      	b.n	80034f4 <HAL_SPI_Transmit+0x10>
  if ((pData == NULL) || (Size == 0U))
 8003522:	2f00      	cmp	r7, #0
 8003524:	bf18      	it	ne
 8003526:	2e00      	cmpne	r6, #0
 8003528:	d02a      	beq.n	8003580 <HAL_SPI_Transmit+0x9c>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800352a:	2303      	movs	r3, #3
 800352c:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003530:	2300      	movs	r3, #0
 8003532:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003536:	65e6      	str	r6, [r4, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8003538:	f8a4 7060 	strh.w	r7, [r4, #96]	; 0x60
  hspi->TxXferCount = Size;
 800353c:	f8a4 7062 	strh.w	r7, [r4, #98]	; 0x62
  hspi->pRxBuffPtr  = NULL;
 8003540:	6663      	str	r3, [r4, #100]	; 0x64
  hspi->RxXferSize  = 0U;
 8003542:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  hspi->RxXferCount = 0U;
 8003546:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800354a:	6763      	str	r3, [r4, #116]	; 0x74
  hspi->RxISR       = NULL;
 800354c:	6723      	str	r3, [r4, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800354e:	68a3      	ldr	r3, [r4, #8]
 8003550:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8003554:	d019      	beq.n	800358a <HAL_SPI_Transmit+0xa6>
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8003556:	6823      	ldr	r3, [r4, #0]
 8003558:	6859      	ldr	r1, [r3, #4]
 800355a:	4a8d      	ldr	r2, [pc, #564]	; (8003790 <HAL_SPI_Transmit+0x2ac>)
 800355c:	400a      	ands	r2, r1
 800355e:	433a      	orrs	r2, r7
 8003560:	605a      	str	r2, [r3, #4]
  __HAL_SPI_ENABLE(hspi);
 8003562:	6822      	ldr	r2, [r4, #0]
 8003564:	6813      	ldr	r3, [r2, #0]
 8003566:	f043 0301 	orr.w	r3, r3, #1
 800356a:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800356c:	6863      	ldr	r3, [r4, #4]
 800356e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003572:	d010      	beq.n	8003596 <HAL_SPI_Transmit+0xb2>
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8003574:	68e3      	ldr	r3, [r4, #12]
 8003576:	2b0f      	cmp	r3, #15
 8003578:	d81d      	bhi.n	80035b6 <HAL_SPI_Transmit+0xd2>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800357a:	2b07      	cmp	r3, #7
 800357c:	d851      	bhi.n	8003622 <HAL_SPI_Transmit+0x13e>
 800357e:	e0b9      	b.n	80036f4 <HAL_SPI_Transmit+0x210>
    __HAL_UNLOCK(hspi);
 8003580:	2300      	movs	r3, #0
 8003582:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 8003586:	2001      	movs	r0, #1
 8003588:	e7b4      	b.n	80034f4 <HAL_SPI_Transmit+0x10>
    SPI_1LINE_TX(hspi);
 800358a:	6822      	ldr	r2, [r4, #0]
 800358c:	6813      	ldr	r3, [r2, #0]
 800358e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003592:	6013      	str	r3, [r2, #0]
 8003594:	e7df      	b.n	8003556 <HAL_SPI_Transmit+0x72>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8003596:	6822      	ldr	r2, [r4, #0]
 8003598:	6813      	ldr	r3, [r2, #0]
 800359a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800359e:	6013      	str	r3, [r2, #0]
 80035a0:	e7e8      	b.n	8003574 <HAL_SPI_Transmit+0x90>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80035a2:	b30d      	cbz	r5, 80035e8 <HAL_SPI_Transmit+0x104>
 80035a4:	f1b5 3fff 	cmp.w	r5, #4294967295
 80035a8:	d005      	beq.n	80035b6 <HAL_SPI_Transmit+0xd2>
 80035aa:	f7fd f85f 	bl	800066c <HAL_GetTick>
 80035ae:	eba0 0008 	sub.w	r0, r0, r8
 80035b2:	4285      	cmp	r5, r0
 80035b4:	d918      	bls.n	80035e8 <HAL_SPI_Transmit+0x104>
    while (hspi->TxXferCount > 0U)
 80035b6:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f000 80c8 	beq.w	8003752 <HAL_SPI_Transmit+0x26e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035c2:	6823      	ldr	r3, [r4, #0]
 80035c4:	695a      	ldr	r2, [r3, #20]
 80035c6:	f012 0f02 	tst.w	r2, #2
 80035ca:	d0ea      	beq.n	80035a2 <HAL_SPI_Transmit+0xbe>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80035cc:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80035ce:	6812      	ldr	r2, [r2, #0]
 80035d0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80035d2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80035d4:	3304      	adds	r3, #4
 80035d6:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount--;
 80035d8:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80035dc:	b29b      	uxth	r3, r3
 80035de:	3b01      	subs	r3, #1
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 80035e6:	e7e6      	b.n	80035b6 <HAL_SPI_Transmit+0xd2>
          SPI_CloseTransfer(hspi);
 80035e8:	4620      	mov	r0, r4
 80035ea:	f7ff fe3f 	bl	800326c <SPI_CloseTransfer>
          __HAL_UNLOCK(hspi);
 80035ee:	2300      	movs	r3, #0
 80035f0:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80035f4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80035f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035fc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8003600:	2001      	movs	r0, #1
 8003602:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
          return HAL_ERROR;
 8003606:	e775      	b.n	80034f4 <HAL_SPI_Transmit+0x10>
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
 8003608:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800360a:	8812      	ldrh	r2, [r2, #0]
 800360c:	841a      	strh	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800360e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003610:	3302      	adds	r3, #2
 8003612:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 8003614:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8003618:	b29b      	uxth	r3, r3
 800361a:	3b01      	subs	r3, #1
 800361c:	b29b      	uxth	r3, r3
 800361e:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    while (hspi->TxXferCount > 0U)
 8003622:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8003626:	b29b      	uxth	r3, r3
 8003628:	2b00      	cmp	r3, #0
 800362a:	f000 8092 	beq.w	8003752 <HAL_SPI_Transmit+0x26e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800362e:	6823      	ldr	r3, [r4, #0]
 8003630:	695a      	ldr	r2, [r3, #20]
 8003632:	f012 0f02 	tst.w	r2, #2
 8003636:	d015      	beq.n	8003664 <HAL_SPI_Transmit+0x180>
        if ( (hspi->TxXferCount > 1U) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8003638:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800363c:	b292      	uxth	r2, r2
 800363e:	2a01      	cmp	r2, #1
 8003640:	d9e2      	bls.n	8003608 <HAL_SPI_Transmit+0x124>
 8003642:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003644:	2a00      	cmp	r2, #0
 8003646:	d0df      	beq.n	8003608 <HAL_SPI_Transmit+0x124>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8003648:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800364a:	6812      	ldr	r2, [r2, #0]
 800364c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800364e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003650:	3304      	adds	r3, #4
 8003652:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount-=2;
 8003654:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8003658:	b29b      	uxth	r3, r3
 800365a:	3b02      	subs	r3, #2
 800365c:	b29b      	uxth	r3, r3
 800365e:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 8003662:	e7de      	b.n	8003622 <HAL_SPI_Transmit+0x13e>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8003664:	b145      	cbz	r5, 8003678 <HAL_SPI_Transmit+0x194>
 8003666:	f1b5 3fff 	cmp.w	r5, #4294967295
 800366a:	d0da      	beq.n	8003622 <HAL_SPI_Transmit+0x13e>
 800366c:	f7fc fffe 	bl	800066c <HAL_GetTick>
 8003670:	eba0 0008 	sub.w	r0, r0, r8
 8003674:	4285      	cmp	r5, r0
 8003676:	d8d4      	bhi.n	8003622 <HAL_SPI_Transmit+0x13e>
          SPI_CloseTransfer(hspi);
 8003678:	4620      	mov	r0, r4
 800367a:	f7ff fdf7 	bl	800326c <SPI_CloseTransfer>
          __HAL_UNLOCK(hspi);
 800367e:	2300      	movs	r3, #0
 8003680:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8003684:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8003688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800368c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8003690:	2001      	movs	r0, #1
 8003692:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
          return HAL_ERROR;
 8003696:	e72d      	b.n	80034f4 <HAL_SPI_Transmit+0x10>
        else if ((hspi->TxXferCount > 1U) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8003698:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800369c:	b292      	uxth	r2, r2
 800369e:	2a01      	cmp	r2, #1
 80036a0:	d90f      	bls.n	80036c2 <HAL_SPI_Transmit+0x1de>
 80036a2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80036a4:	b16a      	cbz	r2, 80036c2 <HAL_SPI_Transmit+0x1de>
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
 80036a6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80036a8:	8812      	ldrh	r2, [r2, #0]
 80036aa:	841a      	strh	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80036ac:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80036ae:	3302      	adds	r3, #2
 80036b0:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount-=2;
 80036b2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	3b02      	subs	r3, #2
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 80036c0:	e018      	b.n	80036f4 <HAL_SPI_Transmit+0x210>
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80036c2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80036c4:	7812      	ldrb	r2, [r2, #0]
 80036c6:	f883 2020 	strb.w	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80036ca:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80036cc:	3301      	adds	r3, #1
 80036ce:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 80036d0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	3b01      	subs	r3, #1
 80036d8:	b29b      	uxth	r3, r3
 80036da:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 80036de:	e009      	b.n	80036f4 <HAL_SPI_Transmit+0x210>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80036e0:	b33d      	cbz	r5, 8003732 <HAL_SPI_Transmit+0x24e>
 80036e2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80036e6:	d005      	beq.n	80036f4 <HAL_SPI_Transmit+0x210>
 80036e8:	f7fc ffc0 	bl	800066c <HAL_GetTick>
 80036ec:	eba0 0008 	sub.w	r0, r0, r8
 80036f0:	4285      	cmp	r5, r0
 80036f2:	d91e      	bls.n	8003732 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80036f4:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	b353      	cbz	r3, 8003752 <HAL_SPI_Transmit+0x26e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036fc:	6823      	ldr	r3, [r4, #0]
 80036fe:	695a      	ldr	r2, [r3, #20]
 8003700:	f012 0f02 	tst.w	r2, #2
 8003704:	d0ec      	beq.n	80036e0 <HAL_SPI_Transmit+0x1fc>
        if ((hspi->TxXferCount > 3U) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8003706:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800370a:	b292      	uxth	r2, r2
 800370c:	2a03      	cmp	r2, #3
 800370e:	d9c3      	bls.n	8003698 <HAL_SPI_Transmit+0x1b4>
 8003710:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003712:	2a40      	cmp	r2, #64	; 0x40
 8003714:	d9c0      	bls.n	8003698 <HAL_SPI_Transmit+0x1b4>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8003716:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003718:	6812      	ldr	r2, [r2, #0]
 800371a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800371c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800371e:	3304      	adds	r3, #4
 8003720:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount-=4;
 8003722:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8003726:	b29b      	uxth	r3, r3
 8003728:	3b04      	subs	r3, #4
 800372a:	b29b      	uxth	r3, r3
 800372c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 8003730:	e7e0      	b.n	80036f4 <HAL_SPI_Transmit+0x210>
          SPI_CloseTransfer(hspi);
 8003732:	4620      	mov	r0, r4
 8003734:	f7ff fd9a 	bl	800326c <SPI_CloseTransfer>
          __HAL_UNLOCK(hspi);
 8003738:	2300      	movs	r3, #0
 800373a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800373e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8003742:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003746:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800374a:	2001      	movs	r0, #1
 800374c:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
          return HAL_ERROR;
 8003750:	e6d0      	b.n	80034f4 <HAL_SPI_Transmit+0x10>
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8003752:	9500      	str	r5, [sp, #0]
 8003754:	4643      	mov	r3, r8
 8003756:	2200      	movs	r2, #0
 8003758:	2108      	movs	r1, #8
 800375a:	4620      	mov	r0, r4
 800375c:	f7ff fdf6 	bl	800334c <SPI_WaitOnFlagUntilTimeout>
 8003760:	b128      	cbz	r0, 800376e <HAL_SPI_Transmit+0x28a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003762:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8003766:	f043 0320 	orr.w	r3, r3, #32
 800376a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  SPI_CloseTransfer(hspi);
 800376e:	4620      	mov	r0, r4
 8003770:	f7ff fd7c 	bl	800326c <SPI_CloseTransfer>
  __HAL_UNLOCK(hspi);
 8003774:	2300      	movs	r3, #0
 8003776:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_READY;
 800377a:	2301      	movs	r3, #1
 800377c:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003780:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8003784:	b90b      	cbnz	r3, 800378a <HAL_SPI_Transmit+0x2a6>
  return HAL_OK;
 8003786:	2000      	movs	r0, #0
 8003788:	e6b4      	b.n	80034f4 <HAL_SPI_Transmit+0x10>
    return HAL_ERROR;
 800378a:	2001      	movs	r0, #1
 800378c:	e6b2      	b.n	80034f4 <HAL_SPI_Transmit+0x10>
 800378e:	bf00      	nop
 8003790:	ffff0000 	.word	0xffff0000

08003794 <HAL_SPI_Transmit_DMA>:
{
 8003794:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hspi);
 8003796:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800379a:	2b01      	cmp	r3, #1
 800379c:	f000 80c0 	beq.w	8003920 <HAL_SPI_Transmit_DMA+0x18c>
 80037a0:	2301      	movs	r3, #1
 80037a2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 80037a6:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d004      	beq.n	80037ba <HAL_SPI_Transmit_DMA+0x26>
    __HAL_UNLOCK(hspi);
 80037b0:	2300      	movs	r3, #0
 80037b2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return errorcode;
 80037b6:	2002      	movs	r0, #2
 80037b8:	bd38      	pop	{r3, r4, r5, pc}
  if ((pData == NULL) || (Size == 0U))
 80037ba:	2a00      	cmp	r2, #0
 80037bc:	bf18      	it	ne
 80037be:	2900      	cmpne	r1, #0
 80037c0:	d022      	beq.n	8003808 <HAL_SPI_Transmit_DMA+0x74>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80037c2:	2303      	movs	r3, #3
 80037c4:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037c8:	2300      	movs	r3, #0
 80037ca:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80037ce:	65c1      	str	r1, [r0, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80037d0:	f8a0 2060 	strh.w	r2, [r0, #96]	; 0x60
  hspi->TxXferCount = Size;
 80037d4:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62
  hspi->pRxBuffPtr  = NULL;
 80037d8:	6643      	str	r3, [r0, #100]	; 0x64
  hspi->TxISR       = NULL;
 80037da:	6743      	str	r3, [r0, #116]	; 0x74
  hspi->RxISR       = NULL;
 80037dc:	6703      	str	r3, [r0, #112]	; 0x70
  hspi->RxXferSize  = 0U;
 80037de:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  hspi->RxXferCount = 0U;
 80037e2:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037e6:	6883      	ldr	r3, [r0, #8]
 80037e8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80037ec:	d011      	beq.n	8003812 <HAL_SPI_Transmit_DMA+0x7e>
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80037ee:	68c3      	ldr	r3, [r0, #12]
 80037f0:	2b0f      	cmp	r3, #15
 80037f2:	d914      	bls.n	800381e <HAL_SPI_Transmit_DMA+0x8a>
 80037f4:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
 80037f6:	6989      	ldr	r1, [r1, #24]
 80037f8:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 80037fc:	d00f      	beq.n	800381e <HAL_SPI_Transmit_DMA+0x8a>
    __HAL_UNLOCK(hspi);
 80037fe:	2300      	movs	r3, #0
 8003800:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return errorcode;
 8003804:	2001      	movs	r0, #1
 8003806:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(hspi);
 8003808:	2300      	movs	r3, #0
 800380a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return errorcode;
 800380e:	2001      	movs	r0, #1
 8003810:	bd38      	pop	{r3, r4, r5, pc}
    SPI_1LINE_TX(hspi);
 8003812:	6801      	ldr	r1, [r0, #0]
 8003814:	680b      	ldr	r3, [r1, #0]
 8003816:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800381a:	600b      	str	r3, [r1, #0]
 800381c:	e7e7      	b.n	80037ee <HAL_SPI_Transmit_DMA+0x5a>
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800381e:	2b07      	cmp	r3, #7
 8003820:	d907      	bls.n	8003832 <HAL_SPI_Transmit_DMA+0x9e>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8003822:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
 8003824:	6989      	ldr	r1, [r1, #24]
 8003826:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800382a:	bf18      	it	ne
 800382c:	f5b1 4f80 	cmpne.w	r1, #16384	; 0x4000
 8003830:	d1e5      	bne.n	80037fe <HAL_SPI_Transmit_DMA+0x6a>
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003832:	2b07      	cmp	r3, #7
 8003834:	d858      	bhi.n	80038e8 <HAL_SPI_Transmit_DMA+0x154>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003836:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8003838:	6999      	ldr	r1, [r3, #24]
 800383a:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800383e:	d041      	beq.n	80038c4 <HAL_SPI_Transmit_DMA+0x130>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003846:	d046      	beq.n	80038d6 <HAL_SPI_Transmit_DMA+0x142>
 8003848:	4615      	mov	r5, r2
 800384a:	4604      	mov	r4, r0
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800384c:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800384e:	4a35      	ldr	r2, [pc, #212]	; (8003924 <HAL_SPI_Transmit_DMA+0x190>)
 8003850:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003852:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8003854:	4a34      	ldr	r2, [pc, #208]	; (8003928 <HAL_SPI_Transmit_DMA+0x194>)
 8003856:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003858:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800385a:	4a34      	ldr	r2, [pc, #208]	; (800392c <HAL_SPI_Transmit_DMA+0x198>)
 800385c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback = NULL;
 800385e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8003860:	2200      	movs	r2, #0
 8003862:	651a      	str	r2, [r3, #80]	; 0x50
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8003864:	6802      	ldr	r2, [r0, #0]
 8003866:	6893      	ldr	r3, [r2, #8]
 8003868:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800386c:	6093      	str	r3, [r2, #8]
  HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount);
 800386e:	6802      	ldr	r2, [r0, #0]
 8003870:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 8003874:	b29b      	uxth	r3, r3
 8003876:	3220      	adds	r2, #32
 8003878:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 800387a:	6f80      	ldr	r0, [r0, #120]	; 0x78
 800387c:	f7fd f980 	bl	8000b80 <HAL_DMA_Start_IT>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8003880:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8003882:	69db      	ldr	r3, [r3, #28]
 8003884:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003888:	d03e      	beq.n	8003908 <HAL_SPI_Transmit_DMA+0x174>
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800388a:	6823      	ldr	r3, [r4, #0]
 800388c:	6859      	ldr	r1, [r3, #4]
 800388e:	4a28      	ldr	r2, [pc, #160]	; (8003930 <HAL_SPI_Transmit_DMA+0x19c>)
 8003890:	400a      	ands	r2, r1
 8003892:	432a      	orrs	r2, r5
 8003894:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8003896:	6822      	ldr	r2, [r4, #0]
 8003898:	6893      	ldr	r3, [r2, #8]
 800389a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800389e:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 80038a0:	6822      	ldr	r2, [r4, #0]
 80038a2:	6913      	ldr	r3, [r2, #16]
 80038a4:	f443 7348 	orr.w	r3, r3, #800	; 0x320
 80038a8:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 80038aa:	6822      	ldr	r2, [r4, #0]
 80038ac:	6813      	ldr	r3, [r2, #0]
 80038ae:	f043 0301 	orr.w	r3, r3, #1
 80038b2:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038b4:	6863      	ldr	r3, [r4, #4]
 80038b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038ba:	d02b      	beq.n	8003914 <HAL_SPI_Transmit_DMA+0x180>
  __HAL_UNLOCK(hspi);
 80038bc:	2000      	movs	r0, #0
 80038be:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  return errorcode;
 80038c2:	bd38      	pop	{r3, r4, r5, pc}
      hspi->TxXferCount = (hspi->TxXferCount + 1U) >> 1U;
 80038c4:	f8b0 1062 	ldrh.w	r1, [r0, #98]	; 0x62
 80038c8:	b289      	uxth	r1, r1
 80038ca:	3101      	adds	r1, #1
 80038cc:	f3c1 014f 	ubfx	r1, r1, #1, #16
 80038d0:	f8a0 1062 	strh.w	r1, [r0, #98]	; 0x62
 80038d4:	e7b4      	b.n	8003840 <HAL_SPI_Transmit_DMA+0xac>
      hspi->TxXferCount = (hspi->TxXferCount + 3U) >> 2U;
 80038d6:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 80038da:	b29b      	uxth	r3, r3
 80038dc:	3303      	adds	r3, #3
 80038de:	f3c3 038f 	ubfx	r3, r3, #2, #16
 80038e2:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
 80038e6:	e7af      	b.n	8003848 <HAL_SPI_Transmit_DMA+0xb4>
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80038e8:	2b0f      	cmp	r3, #15
 80038ea:	d8ad      	bhi.n	8003848 <HAL_SPI_Transmit_DMA+0xb4>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80038ec:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038f4:	d1a8      	bne.n	8003848 <HAL_SPI_Transmit_DMA+0xb4>
      hspi->TxXferCount = (hspi->TxXferCount + 1U) >> 1U;
 80038f6:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	3301      	adds	r3, #1
 80038fe:	f3c3 034f 	ubfx	r3, r3, #1, #16
 8003902:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
 8003906:	e79f      	b.n	8003848 <HAL_SPI_Transmit_DMA+0xb4>
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0);
 8003908:	6822      	ldr	r2, [r4, #0]
 800390a:	6851      	ldr	r1, [r2, #4]
 800390c:	4b08      	ldr	r3, [pc, #32]	; (8003930 <HAL_SPI_Transmit_DMA+0x19c>)
 800390e:	400b      	ands	r3, r1
 8003910:	6053      	str	r3, [r2, #4]
 8003912:	e7c0      	b.n	8003896 <HAL_SPI_Transmit_DMA+0x102>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8003914:	6822      	ldr	r2, [r4, #0]
 8003916:	6813      	ldr	r3, [r2, #0]
 8003918:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800391c:	6013      	str	r3, [r2, #0]
 800391e:	e7cd      	b.n	80038bc <HAL_SPI_Transmit_DMA+0x128>
  __HAL_LOCK(hspi);
 8003920:	2002      	movs	r0, #2
}
 8003922:	bd38      	pop	{r3, r4, r5, pc}
 8003924:	08003967 	.word	0x08003967
 8003928:	08003937 	.word	0x08003937
 800392c:	08003973 	.word	0x08003973
 8003930:	ffff0000 	.word	0xffff0000

08003934 <HAL_SPI_TxCpltCallback>:
{
 8003934:	4770      	bx	lr

08003936 <SPI_DMATransmitCplt>:
{
 8003936:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003938:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 800393a:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b07      	cmp	r3, #7
 8003942:	d009      	beq.n	8003958 <SPI_DMATransmitCplt+0x22>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8003944:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8003946:	69db      	ldr	r3, [r3, #28]
 8003948:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800394c:	d005      	beq.n	800395a <SPI_DMATransmitCplt+0x24>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800394e:	6802      	ldr	r2, [r0, #0]
 8003950:	6913      	ldr	r3, [r2, #16]
 8003952:	f043 0308 	orr.w	r3, r3, #8
 8003956:	6113      	str	r3, [r2, #16]
 8003958:	bd08      	pop	{r3, pc}
      HAL_SPI_TxCpltCallback(hspi);
 800395a:	f7ff ffeb 	bl	8003934 <HAL_SPI_TxCpltCallback>
 800395e:	bd08      	pop	{r3, pc}

08003960 <HAL_SPI_RxCpltCallback>:
{
 8003960:	4770      	bx	lr

08003962 <HAL_SPI_TxRxCpltCallback>:
{
 8003962:	4770      	bx	lr

08003964 <HAL_SPI_TxHalfCpltCallback>:
{
 8003964:	4770      	bx	lr

08003966 <SPI_DMAHalfTransmitCplt>:
{
 8003966:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003968:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800396a:	f7ff fffb 	bl	8003964 <HAL_SPI_TxHalfCpltCallback>
 800396e:	bd08      	pop	{r3, pc}

08003970 <HAL_SPI_ErrorCallback>:
{
 8003970:	4770      	bx	lr

08003972 <SPI_DMAError>:
{
 8003972:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003974:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8003976:	f7fd fb7b 	bl	8001070 <HAL_DMA_GetError>
 800397a:	2802      	cmp	r0, #2
 800397c:	d00e      	beq.n	800399c <SPI_DMAError+0x2a>
    SPI_CloseTransfer(hspi);
 800397e:	4620      	mov	r0, r4
 8003980:	f7ff fc74 	bl	800326c <SPI_CloseTransfer>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003984:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8003988:	f043 0310 	orr.w	r3, r3, #16
 800398c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8003990:	2301      	movs	r3, #1
 8003992:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    HAL_SPI_ErrorCallback(hspi);
 8003996:	4620      	mov	r0, r4
 8003998:	f7ff ffea 	bl	8003970 <HAL_SPI_ErrorCallback>
 800399c:	bd10      	pop	{r4, pc}
	...

080039a0 <HAL_SPI_IRQHandler>:
{
 80039a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039a4:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
 80039a6:	6803      	ldr	r3, [r0, #0]
 80039a8:	691f      	ldr	r7, [r3, #16]
  uint32_t itflag   = hspi->Instance->SR;
 80039aa:	f8d3 8014 	ldr.w	r8, [r3, #20]
  uint32_t trigger  = itsource & itflag;
 80039ae:	ea07 0608 	and.w	r6, r7, r8
  uint32_t cfg1     = hspi->Instance->CFG1;
 80039b2:	f8d3 9008 	ldr.w	r9, [r3, #8]
  HAL_SPI_StateTypeDef State = hspi->State;
 80039b6:	f890 5081 	ldrb.w	r5, [r0, #129]	; 0x81
 80039ba:	b2ed      	uxtb	r5, r5
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXNE))
 80039bc:	f006 0341 	and.w	r3, r6, #65	; 0x41
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d041      	beq.n	8003a48 <HAL_SPI_IRQHandler+0xa8>
  uint32_t handled  = 0;
 80039c4:	2300      	movs	r3, #0
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXE))
 80039c6:	f006 0222 	and.w	r2, r6, #34	; 0x22
 80039ca:	2a02      	cmp	r2, #2
 80039cc:	d040      	beq.n	8003a50 <HAL_SPI_IRQHandler+0xb0>
  if (handled != 0)
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d138      	bne.n	8003a44 <HAL_SPI_IRQHandler+0xa4>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80039d2:	f016 0f08 	tst.w	r6, #8
 80039d6:	d07d      	beq.n	8003ad4 <HAL_SPI_IRQHandler+0x134>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80039d8:	6822      	ldr	r2, [r4, #0]
 80039da:	6993      	ldr	r3, [r2, #24]
 80039dc:	f043 0308 	orr.w	r3, r3, #8
 80039e0:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80039e2:	6822      	ldr	r2, [r4, #0]
 80039e4:	6993      	ldr	r3, [r2, #24]
 80039e6:	f043 0310 	orr.w	r3, r3, #16
 80039ea:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80039ec:	6822      	ldr	r2, [r4, #0]
 80039ee:	6993      	ldr	r3, [r2, #24]
 80039f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80039f4:	6193      	str	r3, [r2, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80039f6:	6822      	ldr	r2, [r4, #0]
 80039f8:	6913      	ldr	r3, [r2, #16]
 80039fa:	f023 0308 	bic.w	r3, r3, #8
 80039fe:	6113      	str	r3, [r2, #16]
    if( HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN|SPI_CFG1_RXDMAEN) ||                       // IT based transfer is done
 8003a00:	f419 4f40 	tst.w	r9, #49152	; 0xc000
 8003a04:	d009      	beq.n	8003a1a <HAL_SPI_IRQHandler+0x7a>
 8003a06:	2d04      	cmp	r5, #4
 8003a08:	d002      	beq.n	8003a10 <HAL_SPI_IRQHandler+0x70>
       ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8003a0a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	b123      	cbz	r3, 8003a1a <HAL_SPI_IRQHandler+0x7a>
 8003a10:	2d03      	cmp	r5, #3
 8003a12:	d011      	beq.n	8003a38 <HAL_SPI_IRQHandler+0x98>
       ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)) )   // DMA is used in normal mode
 8003a14:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8003a16:	69db      	ldr	r3, [r3, #28]
 8003a18:	b973      	cbnz	r3, 8003a38 <HAL_SPI_IRQHandler+0x98>
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN|SPI_CFG1_RXDMAEN))
 8003a1a:	6823      	ldr	r3, [r4, #0]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 8003a22:	d02a      	beq.n	8003a7a <HAL_SPI_IRQHandler+0xda>
      SPI_CloseTransfer(hspi);
 8003a24:	4620      	mov	r0, r4
 8003a26:	f7ff fc21 	bl	800326c <SPI_CloseTransfer>
      hspi->State = HAL_SPI_STATE_READY;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a30:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d139      	bne.n	8003aac <HAL_SPI_IRQHandler+0x10c>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8003a38:	2d05      	cmp	r5, #5
 8003a3a:	d03c      	beq.n	8003ab6 <HAL_SPI_IRQHandler+0x116>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8003a3c:	2d04      	cmp	r5, #4
 8003a3e:	d03f      	beq.n	8003ac0 <HAL_SPI_IRQHandler+0x120>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8003a40:	2d03      	cmp	r5, #3
 8003a42:	d042      	beq.n	8003aca <HAL_SPI_IRQHandler+0x12a>
 8003a44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hspi->RxISR(hspi);
 8003a48:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8003a4a:	4798      	blx	r3
    handled = 1;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e7ba      	b.n	80039c6 <HAL_SPI_IRQHandler+0x26>
    hspi->TxISR(hspi);
 8003a50:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8003a52:	4620      	mov	r0, r4
 8003a54:	4798      	blx	r3
    handled = 1;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e7b9      	b.n	80039ce <HAL_SPI_IRQHandler+0x2e>
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a5a:	2b07      	cmp	r3, #7
 8003a5c:	d91d      	bls.n	8003a9a <HAL_SPI_IRQHandler+0xfa>
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
 8003a5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a60:	6822      	ldr	r2, [r4, #0]
 8003a62:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8003a64:	801a      	strh	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a68:	3302      	adds	r3, #2
 8003a6a:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 8003a6c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	3b01      	subs	r3, #1
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        while (hspi->RxXferCount != 0)
 8003a7a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d0cf      	beq.n	8003a24 <HAL_SPI_IRQHandler+0x84>
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8003a84:	68e3      	ldr	r3, [r4, #12]
 8003a86:	2b0f      	cmp	r3, #15
 8003a88:	d9e7      	bls.n	8003a5a <HAL_SPI_IRQHandler+0xba>
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8003a8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a8c:	6822      	ldr	r2, [r4, #0]
 8003a8e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a90:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8003a92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a94:	3304      	adds	r3, #4
 8003a96:	6663      	str	r3, [r4, #100]	; 0x64
 8003a98:	e7e8      	b.n	8003a6c <HAL_SPI_IRQHandler+0xcc>
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8003a9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a9c:	6822      	ldr	r2, [r4, #0]
 8003a9e:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8003aa2:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8003aa4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	6663      	str	r3, [r4, #100]	; 0x64
 8003aaa:	e7df      	b.n	8003a6c <HAL_SPI_IRQHandler+0xcc>
        HAL_SPI_ErrorCallback(hspi);
 8003aac:	4620      	mov	r0, r4
 8003aae:	f7ff ff5f 	bl	8003970 <HAL_SPI_ErrorCallback>
        return;
 8003ab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      HAL_SPI_TxRxCpltCallback(hspi);
 8003ab6:	4620      	mov	r0, r4
 8003ab8:	f7ff ff53 	bl	8003962 <HAL_SPI_TxRxCpltCallback>
 8003abc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      HAL_SPI_RxCpltCallback(hspi);
 8003ac0:	4620      	mov	r0, r4
 8003ac2:	f7ff ff4d 	bl	8003960 <HAL_SPI_RxCpltCallback>
 8003ac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      HAL_SPI_TxCpltCallback(hspi);
 8003aca:	4620      	mov	r0, r4
 8003acc:	f7ff ff32 	bl	8003934 <HAL_SPI_TxCpltCallback>
 8003ad0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT) && HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP ))
 8003ad4:	f017 0f08 	tst.w	r7, #8
 8003ad8:	d002      	beq.n	8003ae0 <HAL_SPI_IRQHandler+0x140>
 8003ada:	f418 6f00 	tst.w	r8, #2048	; 0x800
 8003ade:	d163      	bne.n	8003ba8 <HAL_SPI_IRQHandler+0x208>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != RESET)
 8003ae0:	f416 7f58 	tst.w	r6, #864	; 0x360
 8003ae4:	d0ae      	beq.n	8003a44 <HAL_SPI_IRQHandler+0xa4>
    if ((trigger & SPI_FLAG_OVR) != RESET)
 8003ae6:	f016 0f40 	tst.w	r6, #64	; 0x40
 8003aea:	d00a      	beq.n	8003b02 <HAL_SPI_IRQHandler+0x162>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003aec:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8003af0:	f043 0304 	orr.w	r3, r3, #4
 8003af4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003af8:	6822      	ldr	r2, [r4, #0]
 8003afa:	6993      	ldr	r3, [r2, #24]
 8003afc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b00:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != RESET)
 8003b02:	f416 7f00 	tst.w	r6, #512	; 0x200
 8003b06:	d00a      	beq.n	8003b1e <HAL_SPI_IRQHandler+0x17e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003b08:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8003b0c:	f043 0301 	orr.w	r3, r3, #1
 8003b10:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003b14:	6822      	ldr	r2, [r4, #0]
 8003b16:	6993      	ldr	r3, [r2, #24]
 8003b18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b1c:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != RESET)
 8003b1e:	f416 7f80 	tst.w	r6, #256	; 0x100
 8003b22:	d00a      	beq.n	8003b3a <HAL_SPI_IRQHandler+0x19a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003b24:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8003b28:	f043 0308 	orr.w	r3, r3, #8
 8003b2c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003b30:	6822      	ldr	r2, [r4, #0]
 8003b32:	6993      	ldr	r3, [r2, #24]
 8003b34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b38:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != RESET)
 8003b3a:	f016 0f20 	tst.w	r6, #32
 8003b3e:	d00a      	beq.n	8003b56 <HAL_SPI_IRQHandler+0x1b6>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8003b40:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8003b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b48:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8003b4c:	6822      	ldr	r2, [r4, #0]
 8003b4e:	6993      	ldr	r3, [r2, #24]
 8003b50:	f043 0320 	orr.w	r3, r3, #32
 8003b54:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b56:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f43f af72 	beq.w	8003a44 <HAL_SPI_IRQHandler+0xa4>
      __HAL_SPI_DISABLE(hspi);
 8003b60:	6822      	ldr	r2, [r4, #0]
 8003b62:	6813      	ldr	r3, [r2, #0]
 8003b64:	f023 0301 	bic.w	r3, r3, #1
 8003b68:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8003b6a:	6822      	ldr	r2, [r4, #0]
 8003b6c:	6911      	ldr	r1, [r2, #16]
 8003b6e:	4b15      	ldr	r3, [pc, #84]	; (8003bc4 <HAL_SPI_IRQHandler+0x224>)
 8003b70:	400b      	ands	r3, r1
 8003b72:	6113      	str	r3, [r2, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN|SPI_CFG1_RXDMAEN))
 8003b74:	f419 4f40 	tst.w	r9, #49152	; 0xc000
 8003b78:	d01d      	beq.n	8003bb6 <HAL_SPI_IRQHandler+0x216>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8003b7a:	6822      	ldr	r2, [r4, #0]
 8003b7c:	6893      	ldr	r3, [r2, #8]
 8003b7e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003b82:	6093      	str	r3, [r2, #8]
        if (hspi->hdmarx != NULL)
 8003b84:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8003b86:	b123      	cbz	r3, 8003b92 <HAL_SPI_IRQHandler+0x1f2>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003b88:	4a0f      	ldr	r2, [pc, #60]	; (8003bc8 <HAL_SPI_IRQHandler+0x228>)
 8003b8a:	651a      	str	r2, [r3, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmarx);
 8003b8c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8003b8e:	f7fd f875 	bl	8000c7c <HAL_DMA_Abort_IT>
        if (hspi->hdmatx != NULL)
 8003b92:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f43f af55 	beq.w	8003a44 <HAL_SPI_IRQHandler+0xa4>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003b9a:	4a0b      	ldr	r2, [pc, #44]	; (8003bc8 <HAL_SPI_IRQHandler+0x228>)
 8003b9c:	651a      	str	r2, [r3, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8003b9e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8003ba0:	f7fd f86c 	bl	8000c7c <HAL_DMA_Abort_IT>
 8003ba4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8003ba8:	6822      	ldr	r2, [r4, #0]
 8003baa:	6993      	ldr	r3, [r2, #24]
 8003bac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003bb0:	6193      	str	r3, [r2, #24]
    return;
 8003bb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        hspi->State = HAL_SPI_STATE_READY;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8003bbc:	4620      	mov	r0, r4
 8003bbe:	f7ff fed7 	bl	8003970 <HAL_SPI_ErrorCallback>
 8003bc2:	e73f      	b.n	8003a44 <HAL_SPI_IRQHandler+0xa4>
 8003bc4:	fffffc94 	.word	0xfffffc94
 8003bc8:	08003bcd 	.word	0x08003bcd

08003bcc <SPI_DMAAbortOnError>:
{
 8003bcc:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bce:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = 0U;
 8003bd6:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 8003be0:	f7ff fec6 	bl	8003970 <HAL_SPI_ErrorCallback>
 8003be4:	bd08      	pop	{r3, pc}
	...

08003be8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003be8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003bec:	b087      	sub	sp, #28
 8003bee:	4604      	mov	r4, r0
  PLL2_ClocksTypeDef pll2_clocks;
  PLL3_ClocksTypeDef pll3_clocks;
  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if(UART_INSTANCE_LOWPOWER(huart))
 8003bf0:	6801      	ldr	r1, [r0, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  assert_param(IS_UART_PRESCALER(huart->Init.Prescaler));
  assert_param(IS_UART_FIFO_MODE_STATE(huart->Init.FIFOMode));
  if (huart->Init.FIFOMode == UART_FIFOMODE_ENABLE)
 8003bf2:	6a82      	ldr	r2, [r0, #40]	; 0x28
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bf4:	6883      	ldr	r3, [r0, #8]
 8003bf6:	6900      	ldr	r0, [r0, #16]
 8003bf8:	4303      	orrs	r3, r0
 8003bfa:	6960      	ldr	r0, [r4, #20]
 8003bfc:	4303      	orrs	r3, r0
 8003bfe:	69e0      	ldr	r0, [r4, #28]
 8003c00:	4303      	orrs	r3, r0
  tmpreg |=  (uint32_t)huart->Init.FIFOMode;
 8003c02:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003c04:	6808      	ldr	r0, [r1, #0]
 8003c06:	4a8f      	ldr	r2, [pc, #572]	; (8003e44 <UART_SetConfig+0x25c>)
 8003c08:	4002      	ands	r2, r0
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c0e:	6822      	ldr	r2, [r4, #0]
 8003c10:	6853      	ldr	r3, [r2, #4]
 8003c12:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003c16:	68e1      	ldr	r1, [r4, #12]
 8003c18:	430b      	orrs	r3, r1
 8003c1a:	6053      	str	r3, [r2, #4]
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART)
   * - set TXFTCFG bit according to husart->Init.TXFIFOThreshold value
   * - set RXFTCFG bit according to husart->Init.RXFIFOThreshold value */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c1c:	69a3      	ldr	r3, [r4, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c1e:	6822      	ldr	r2, [r4, #0]
 8003c20:	4989      	ldr	r1, [pc, #548]	; (8003e48 <UART_SetConfig+0x260>)
 8003c22:	428a      	cmp	r2, r1
 8003c24:	d001      	beq.n	8003c2a <UART_SetConfig+0x42>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c26:	6a21      	ldr	r1, [r4, #32]
 8003c28:	430b      	orrs	r3, r1
  }

  if (huart->Init.FIFOMode == UART_FIFOMODE_ENABLE)
 8003c2a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003c2c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8003c30:	d07f      	beq.n	8003d32 <UART_SetConfig+0x14a>
  {
    tmpreg |= ((uint32_t)huart->Init.TXFIFOThreshold | (uint32_t)huart->Init.RXFIFOThreshold);
  }

  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c32:	6890      	ldr	r0, [r2, #8]
 8003c34:	4985      	ldr	r1, [pc, #532]	; (8003e4c <UART_SetConfig+0x264>)
 8003c36:	4001      	ands	r1, r0
 8003c38:	430b      	orrs	r3, r1
 8003c3a:	6093      	str	r3, [r2, #8]

/*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - UART Clock Prescaler : set PRESCALER according to huart->Init.Prescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.Prescaler);
 8003c3c:	6822      	ldr	r2, [r4, #0]
 8003c3e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003c40:	f023 030f 	bic.w	r3, r3, #15
 8003c44:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003c46:	430b      	orrs	r3, r1
 8003c48:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c4a:	6825      	ldr	r5, [r4, #0]
 8003c4c:	4b80      	ldr	r3, [pc, #512]	; (8003e50 <UART_SetConfig+0x268>)
 8003c4e:	429d      	cmp	r5, r3
 8003c50:	d074      	beq.n	8003d3c <UART_SetConfig+0x154>
 8003c52:	4b80      	ldr	r3, [pc, #512]	; (8003e54 <UART_SetConfig+0x26c>)
 8003c54:	429d      	cmp	r5, r3
 8003c56:	f000 80ae 	beq.w	8003db6 <UART_SetConfig+0x1ce>
 8003c5a:	4b7f      	ldr	r3, [pc, #508]	; (8003e58 <UART_SetConfig+0x270>)
 8003c5c:	429d      	cmp	r5, r3
 8003c5e:	f000 80c4 	beq.w	8003dea <UART_SetConfig+0x202>
 8003c62:	4b7e      	ldr	r3, [pc, #504]	; (8003e5c <UART_SetConfig+0x274>)
 8003c64:	429d      	cmp	r5, r3
 8003c66:	f000 80d7 	beq.w	8003e18 <UART_SetConfig+0x230>
 8003c6a:	4b7d      	ldr	r3, [pc, #500]	; (8003e60 <UART_SetConfig+0x278>)
 8003c6c:	429d      	cmp	r5, r3
 8003c6e:	f000 8103 	beq.w	8003e78 <UART_SetConfig+0x290>
 8003c72:	4b7c      	ldr	r3, [pc, #496]	; (8003e64 <UART_SetConfig+0x27c>)
 8003c74:	429d      	cmp	r5, r3
 8003c76:	f000 8116 	beq.w	8003ea6 <UART_SetConfig+0x2be>
 8003c7a:	4b7b      	ldr	r3, [pc, #492]	; (8003e68 <UART_SetConfig+0x280>)
 8003c7c:	429d      	cmp	r5, r3
 8003c7e:	f000 813b 	beq.w	8003ef8 <UART_SetConfig+0x310>
 8003c82:	4b7a      	ldr	r3, [pc, #488]	; (8003e6c <UART_SetConfig+0x284>)
 8003c84:	429d      	cmp	r5, r3
 8003c86:	f000 814e 	beq.w	8003f26 <UART_SetConfig+0x33e>
 8003c8a:	4b6f      	ldr	r3, [pc, #444]	; (8003e48 <UART_SetConfig+0x260>)
 8003c8c:	429d      	cmp	r5, r3
 8003c8e:	f000 8161 	beq.w	8003f54 <UART_SetConfig+0x36c>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8003c92:	2680      	movs	r6, #128	; 0x80

  /* Check LPUART instance */
  if(UART_INSTANCE_LOWPOWER(huart))
 8003c94:	4b6c      	ldr	r3, [pc, #432]	; (8003e48 <UART_SetConfig+0x260>)
 8003c96:	429d      	cmp	r5, r3
 8003c98:	f000 8186 	beq.w	8003fa8 <UART_SetConfig+0x3c0>
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c9c:	69e3      	ldr	r3, [r4, #28]
 8003c9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ca2:	f000 82af 	beq.w	8004204 <UART_SetConfig+0x61c>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 8003ca6:	2e40      	cmp	r6, #64	; 0x40
 8003ca8:	f200 8417 	bhi.w	80044da <UART_SetConfig+0x8f2>
 8003cac:	e8df f016 	tbh	[pc, r6, lsl #1]
 8003cb0:	038b037a 	.word	0x038b037a
 8003cb4:	04150415 	.word	0x04150415
 8003cb8:	0415039c 	.word	0x0415039c
 8003cbc:	04150415 	.word	0x04150415
 8003cc0:	041503c4 	.word	0x041503c4
 8003cc4:	04150415 	.word	0x04150415
 8003cc8:	04150415 	.word	0x04150415
 8003ccc:	04150415 	.word	0x04150415
 8003cd0:	041503ee 	.word	0x041503ee
 8003cd4:	04150415 	.word	0x04150415
 8003cd8:	04150415 	.word	0x04150415
 8003cdc:	04150415 	.word	0x04150415
 8003ce0:	04150415 	.word	0x04150415
 8003ce4:	04150415 	.word	0x04150415
 8003ce8:	04150415 	.word	0x04150415
 8003cec:	04150415 	.word	0x04150415
 8003cf0:	041503fe 	.word	0x041503fe
 8003cf4:	04150415 	.word	0x04150415
 8003cf8:	04150415 	.word	0x04150415
 8003cfc:	04150415 	.word	0x04150415
 8003d00:	04150415 	.word	0x04150415
 8003d04:	04150415 	.word	0x04150415
 8003d08:	04150415 	.word	0x04150415
 8003d0c:	04150415 	.word	0x04150415
 8003d10:	04150415 	.word	0x04150415
 8003d14:	04150415 	.word	0x04150415
 8003d18:	04150415 	.word	0x04150415
 8003d1c:	04150415 	.word	0x04150415
 8003d20:	04150415 	.word	0x04150415
 8003d24:	04150415 	.word	0x04150415
 8003d28:	04150415 	.word	0x04150415
 8003d2c:	04150415 	.word	0x04150415
 8003d30:	03b0      	.short	0x03b0
    tmpreg |= ((uint32_t)huart->Init.TXFIFOThreshold | (uint32_t)huart->Init.RXFIFOThreshold);
 8003d32:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003d34:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003d36:	4301      	orrs	r1, r0
 8003d38:	430b      	orrs	r3, r1
 8003d3a:	e77a      	b.n	8003c32 <UART_SetConfig+0x4a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d3c:	4b4c      	ldr	r3, [pc, #304]	; (8003e70 <UART_SetConfig+0x288>)
 8003d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d44:	2b28      	cmp	r3, #40	; 0x28
 8003d46:	d82a      	bhi.n	8003d9e <UART_SetConfig+0x1b6>
 8003d48:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003d4c:	0029011c 	.word	0x0029011c
 8003d50:	00290029 	.word	0x00290029
 8003d54:	00290029 	.word	0x00290029
 8003d58:	00290029 	.word	0x00290029
 8003d5c:	0029002b 	.word	0x0029002b
 8003d60:	00290029 	.word	0x00290029
 8003d64:	00290029 	.word	0x00290029
 8003d68:	00290029 	.word	0x00290029
 8003d6c:	0029002d 	.word	0x0029002d
 8003d70:	00290029 	.word	0x00290029
 8003d74:	00290029 	.word	0x00290029
 8003d78:	00290029 	.word	0x00290029
 8003d7c:	0029002f 	.word	0x0029002f
 8003d80:	00290029 	.word	0x00290029
 8003d84:	00290029 	.word	0x00290029
 8003d88:	00290029 	.word	0x00290029
 8003d8c:	00290031 	.word	0x00290031
 8003d90:	00290029 	.word	0x00290029
 8003d94:	00290029 	.word	0x00290029
 8003d98:	00290029 	.word	0x00290029
 8003d9c:	0033      	.short	0x0033
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8003d9e:	2680      	movs	r6, #128	; 0x80
 8003da0:	e778      	b.n	8003c94 <UART_SetConfig+0xac>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003da2:	2604      	movs	r6, #4
 8003da4:	e776      	b.n	8003c94 <UART_SetConfig+0xac>
 8003da6:	2640      	movs	r6, #64	; 0x40
 8003da8:	e774      	b.n	8003c94 <UART_SetConfig+0xac>
 8003daa:	2608      	movs	r6, #8
 8003dac:	e772      	b.n	8003c94 <UART_SetConfig+0xac>
 8003dae:	2610      	movs	r6, #16
 8003db0:	e770      	b.n	8003c94 <UART_SetConfig+0xac>
 8003db2:	2620      	movs	r6, #32
 8003db4:	e76e      	b.n	8003c94 <UART_SetConfig+0xac>
 8003db6:	4b2e      	ldr	r3, [pc, #184]	; (8003e70 <UART_SetConfig+0x288>)
 8003db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dba:	f003 0307 	and.w	r3, r3, #7
 8003dbe:	2b05      	cmp	r3, #5
 8003dc0:	d807      	bhi.n	8003dd2 <UART_SetConfig+0x1ea>
 8003dc2:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003dc6:	00e1      	.short	0x00e1
 8003dc8:	000a0008 	.word	0x000a0008
 8003dcc:	000e000c 	.word	0x000e000c
 8003dd0:	0010      	.short	0x0010
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8003dd2:	2680      	movs	r6, #128	; 0x80
 8003dd4:	e75e      	b.n	8003c94 <UART_SetConfig+0xac>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003dd6:	2604      	movs	r6, #4
 8003dd8:	e75c      	b.n	8003c94 <UART_SetConfig+0xac>
 8003dda:	2640      	movs	r6, #64	; 0x40
 8003ddc:	e75a      	b.n	8003c94 <UART_SetConfig+0xac>
 8003dde:	2608      	movs	r6, #8
 8003de0:	e758      	b.n	8003c94 <UART_SetConfig+0xac>
 8003de2:	2610      	movs	r6, #16
 8003de4:	e756      	b.n	8003c94 <UART_SetConfig+0xac>
 8003de6:	2620      	movs	r6, #32
 8003de8:	e754      	b.n	8003c94 <UART_SetConfig+0xac>
 8003dea:	4b21      	ldr	r3, [pc, #132]	; (8003e70 <UART_SetConfig+0x288>)
 8003dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dee:	f003 0307 	and.w	r3, r3, #7
 8003df2:	2b05      	cmp	r3, #5
 8003df4:	d804      	bhi.n	8003e00 <UART_SetConfig+0x218>
 8003df6:	e8df f003 	tbb	[pc, r3]
 8003dfa:	05c9      	.short	0x05c9
 8003dfc:	0d0b0907 	.word	0x0d0b0907
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8003e00:	2680      	movs	r6, #128	; 0x80
 8003e02:	e747      	b.n	8003c94 <UART_SetConfig+0xac>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e04:	2604      	movs	r6, #4
 8003e06:	e745      	b.n	8003c94 <UART_SetConfig+0xac>
 8003e08:	2640      	movs	r6, #64	; 0x40
 8003e0a:	e743      	b.n	8003c94 <UART_SetConfig+0xac>
 8003e0c:	2608      	movs	r6, #8
 8003e0e:	e741      	b.n	8003c94 <UART_SetConfig+0xac>
 8003e10:	2610      	movs	r6, #16
 8003e12:	e73f      	b.n	8003c94 <UART_SetConfig+0xac>
 8003e14:	2620      	movs	r6, #32
 8003e16:	e73d      	b.n	8003c94 <UART_SetConfig+0xac>
 8003e18:	4b15      	ldr	r3, [pc, #84]	; (8003e70 <UART_SetConfig+0x288>)
 8003e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e1c:	f003 0307 	and.w	r3, r3, #7
 8003e20:	2b05      	cmp	r3, #5
 8003e22:	d804      	bhi.n	8003e2e <UART_SetConfig+0x246>
 8003e24:	e8df f003 	tbb	[pc, r3]
 8003e28:	090705b4 	.word	0x090705b4
 8003e2c:	260b      	.short	0x260b
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8003e2e:	2680      	movs	r6, #128	; 0x80
 8003e30:	e730      	b.n	8003c94 <UART_SetConfig+0xac>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e32:	2604      	movs	r6, #4
 8003e34:	e72e      	b.n	8003c94 <UART_SetConfig+0xac>
 8003e36:	2640      	movs	r6, #64	; 0x40
 8003e38:	e72c      	b.n	8003c94 <UART_SetConfig+0xac>
 8003e3a:	2608      	movs	r6, #8
 8003e3c:	e72a      	b.n	8003c94 <UART_SetConfig+0xac>
 8003e3e:	2610      	movs	r6, #16
 8003e40:	e728      	b.n	8003c94 <UART_SetConfig+0xac>
 8003e42:	bf00      	nop
 8003e44:	cfff69f3 	.word	0xcfff69f3
 8003e48:	58000c00 	.word	0x58000c00
 8003e4c:	11fff4ff 	.word	0x11fff4ff
 8003e50:	40011000 	.word	0x40011000
 8003e54:	40004400 	.word	0x40004400
 8003e58:	40004800 	.word	0x40004800
 8003e5c:	40004c00 	.word	0x40004c00
 8003e60:	40005000 	.word	0x40005000
 8003e64:	40011400 	.word	0x40011400
 8003e68:	40007800 	.word	0x40007800
 8003e6c:	40007c00 	.word	0x40007c00
 8003e70:	58024400 	.word	0x58024400
 8003e74:	2620      	movs	r6, #32
 8003e76:	e70d      	b.n	8003c94 <UART_SetConfig+0xac>
 8003e78:	4b85      	ldr	r3, [pc, #532]	; (8004090 <UART_SetConfig+0x4a8>)
 8003e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e7c:	f003 0307 	and.w	r3, r3, #7
 8003e80:	2b05      	cmp	r3, #5
 8003e82:	d804      	bhi.n	8003e8e <UART_SetConfig+0x2a6>
 8003e84:	e8df f003 	tbb	[pc, r3]
 8003e88:	09070586 	.word	0x09070586
 8003e8c:	0d0b      	.short	0x0d0b
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8003e8e:	2680      	movs	r6, #128	; 0x80
 8003e90:	e700      	b.n	8003c94 <UART_SetConfig+0xac>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e92:	2604      	movs	r6, #4
 8003e94:	e6fe      	b.n	8003c94 <UART_SetConfig+0xac>
 8003e96:	2640      	movs	r6, #64	; 0x40
 8003e98:	e6fc      	b.n	8003c94 <UART_SetConfig+0xac>
 8003e9a:	2608      	movs	r6, #8
 8003e9c:	e6fa      	b.n	8003c94 <UART_SetConfig+0xac>
 8003e9e:	2610      	movs	r6, #16
 8003ea0:	e6f8      	b.n	8003c94 <UART_SetConfig+0xac>
 8003ea2:	2620      	movs	r6, #32
 8003ea4:	e6f6      	b.n	8003c94 <UART_SetConfig+0xac>
 8003ea6:	4b7a      	ldr	r3, [pc, #488]	; (8004090 <UART_SetConfig+0x4a8>)
 8003ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eaa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003eae:	2b28      	cmp	r3, #40	; 0x28
 8003eb0:	d816      	bhi.n	8003ee0 <UART_SetConfig+0x2f8>
 8003eb2:	e8df f003 	tbb	[pc, r3]
 8003eb6:	1571      	.short	0x1571
 8003eb8:	15151515 	.word	0x15151515
 8003ebc:	15171515 	.word	0x15171515
 8003ec0:	15151515 	.word	0x15151515
 8003ec4:	15191515 	.word	0x15191515
 8003ec8:	15151515 	.word	0x15151515
 8003ecc:	151b1515 	.word	0x151b1515
 8003ed0:	15151515 	.word	0x15151515
 8003ed4:	151d1515 	.word	0x151d1515
 8003ed8:	15151515 	.word	0x15151515
 8003edc:	1515      	.short	0x1515
 8003ede:	1f          	.byte	0x1f
 8003edf:	00          	.byte	0x00
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8003ee0:	2680      	movs	r6, #128	; 0x80
 8003ee2:	e6d7      	b.n	8003c94 <UART_SetConfig+0xac>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ee4:	2604      	movs	r6, #4
 8003ee6:	e6d5      	b.n	8003c94 <UART_SetConfig+0xac>
 8003ee8:	2640      	movs	r6, #64	; 0x40
 8003eea:	e6d3      	b.n	8003c94 <UART_SetConfig+0xac>
 8003eec:	2608      	movs	r6, #8
 8003eee:	e6d1      	b.n	8003c94 <UART_SetConfig+0xac>
 8003ef0:	2610      	movs	r6, #16
 8003ef2:	e6cf      	b.n	8003c94 <UART_SetConfig+0xac>
 8003ef4:	2620      	movs	r6, #32
 8003ef6:	e6cd      	b.n	8003c94 <UART_SetConfig+0xac>
 8003ef8:	4b65      	ldr	r3, [pc, #404]	; (8004090 <UART_SetConfig+0x4a8>)
 8003efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003efc:	f003 0307 	and.w	r3, r3, #7
 8003f00:	2b05      	cmp	r3, #5
 8003f02:	d804      	bhi.n	8003f0e <UART_SetConfig+0x326>
 8003f04:	e8df f003 	tbb	[pc, r3]
 8003f08:	0907054a 	.word	0x0907054a
 8003f0c:	0d0b      	.short	0x0d0b
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8003f0e:	2680      	movs	r6, #128	; 0x80
 8003f10:	e6c0      	b.n	8003c94 <UART_SetConfig+0xac>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f12:	2604      	movs	r6, #4
 8003f14:	e6be      	b.n	8003c94 <UART_SetConfig+0xac>
 8003f16:	2640      	movs	r6, #64	; 0x40
 8003f18:	e6bc      	b.n	8003c94 <UART_SetConfig+0xac>
 8003f1a:	2608      	movs	r6, #8
 8003f1c:	e6ba      	b.n	8003c94 <UART_SetConfig+0xac>
 8003f1e:	2610      	movs	r6, #16
 8003f20:	e6b8      	b.n	8003c94 <UART_SetConfig+0xac>
 8003f22:	2620      	movs	r6, #32
 8003f24:	e6b6      	b.n	8003c94 <UART_SetConfig+0xac>
 8003f26:	4b5a      	ldr	r3, [pc, #360]	; (8004090 <UART_SetConfig+0x4a8>)
 8003f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2a:	f003 0307 	and.w	r3, r3, #7
 8003f2e:	2b05      	cmp	r3, #5
 8003f30:	d804      	bhi.n	8003f3c <UART_SetConfig+0x354>
 8003f32:	e8df f003 	tbb	[pc, r3]
 8003f36:	0535      	.short	0x0535
 8003f38:	0d0b0907 	.word	0x0d0b0907
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8003f3c:	2680      	movs	r6, #128	; 0x80
 8003f3e:	e6a9      	b.n	8003c94 <UART_SetConfig+0xac>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f40:	2604      	movs	r6, #4
 8003f42:	e6a7      	b.n	8003c94 <UART_SetConfig+0xac>
 8003f44:	2640      	movs	r6, #64	; 0x40
 8003f46:	e6a5      	b.n	8003c94 <UART_SetConfig+0xac>
 8003f48:	2608      	movs	r6, #8
 8003f4a:	e6a3      	b.n	8003c94 <UART_SetConfig+0xac>
 8003f4c:	2610      	movs	r6, #16
 8003f4e:	e6a1      	b.n	8003c94 <UART_SetConfig+0xac>
 8003f50:	2620      	movs	r6, #32
 8003f52:	e69f      	b.n	8003c94 <UART_SetConfig+0xac>
 8003f54:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8003f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f5a:	f003 0307 	and.w	r3, r3, #7
 8003f5e:	2b05      	cmp	r3, #5
 8003f60:	d804      	bhi.n	8003f6c <UART_SetConfig+0x384>
 8003f62:	e8df f003 	tbb	[pc, r3]
 8003f66:	051f      	.short	0x051f
 8003f68:	0d0b0907 	.word	0x0d0b0907
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8003f6c:	2680      	movs	r6, #128	; 0x80
 8003f6e:	e691      	b.n	8003c94 <UART_SetConfig+0xac>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f70:	2604      	movs	r6, #4
 8003f72:	e68f      	b.n	8003c94 <UART_SetConfig+0xac>
 8003f74:	2640      	movs	r6, #64	; 0x40
 8003f76:	e68d      	b.n	8003c94 <UART_SetConfig+0xac>
 8003f78:	2608      	movs	r6, #8
 8003f7a:	e68b      	b.n	8003c94 <UART_SetConfig+0xac>
 8003f7c:	2610      	movs	r6, #16
 8003f7e:	e689      	b.n	8003c94 <UART_SetConfig+0xac>
 8003f80:	2620      	movs	r6, #32
 8003f82:	e687      	b.n	8003c94 <UART_SetConfig+0xac>
 8003f84:	2601      	movs	r6, #1
 8003f86:	e685      	b.n	8003c94 <UART_SetConfig+0xac>
 8003f88:	2600      	movs	r6, #0
 8003f8a:	e683      	b.n	8003c94 <UART_SetConfig+0xac>
 8003f8c:	2600      	movs	r6, #0
 8003f8e:	e681      	b.n	8003c94 <UART_SetConfig+0xac>
 8003f90:	2600      	movs	r6, #0
 8003f92:	e67f      	b.n	8003c94 <UART_SetConfig+0xac>
 8003f94:	2600      	movs	r6, #0
 8003f96:	e67d      	b.n	8003c94 <UART_SetConfig+0xac>
 8003f98:	2601      	movs	r6, #1
 8003f9a:	e67b      	b.n	8003c94 <UART_SetConfig+0xac>
 8003f9c:	2600      	movs	r6, #0
 8003f9e:	e679      	b.n	8003c94 <UART_SetConfig+0xac>
 8003fa0:	2600      	movs	r6, #0
 8003fa2:	e677      	b.n	8003c94 <UART_SetConfig+0xac>
 8003fa4:	2602      	movs	r6, #2
 8003fa6:	e675      	b.n	8003c94 <UART_SetConfig+0xac>
    switch (clocksource)
 8003fa8:	2e08      	cmp	r6, #8
 8003faa:	d03a      	beq.n	8004022 <UART_SetConfig+0x43a>
 8003fac:	d908      	bls.n	8003fc0 <UART_SetConfig+0x3d8>
 8003fae:	2e20      	cmp	r6, #32
 8003fb0:	d044      	beq.n	800403c <UART_SetConfig+0x454>
 8003fb2:	2e40      	cmp	r6, #64	; 0x40
 8003fb4:	d02f      	beq.n	8004016 <UART_SetConfig+0x42e>
 8003fb6:	2e10      	cmp	r6, #16
 8003fb8:	d00c      	beq.n	8003fd4 <UART_SetConfig+0x3ec>
        ret = HAL_ERROR;
 8003fba:	2501      	movs	r5, #1
    tmpreg = 0U;
 8003fbc:	2000      	movs	r0, #0
      break;
 8003fbe:	e00b      	b.n	8003fd8 <UART_SetConfig+0x3f0>
    switch (clocksource)
 8003fc0:	2e02      	cmp	r6, #2
 8003fc2:	d024      	beq.n	800400e <UART_SetConfig+0x426>
 8003fc4:	2e04      	cmp	r6, #4
 8003fc6:	d1f8      	bne.n	8003fba <UART_SetConfig+0x3d2>
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003fc8:	a803      	add	r0, sp, #12
 8003fca:	f7fe ff6d 	bl	8002ea8 <HAL_RCCEx_GetPLL2ClockFreq>
      tmpreg = pll2_clocks.PLL2_Q_Frequency;
 8003fce:	9804      	ldr	r0, [sp, #16]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fd0:	2500      	movs	r5, #0
      break;
 8003fd2:	e001      	b.n	8003fd8 <UART_SetConfig+0x3f0>
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fd4:	2500      	movs	r5, #0
      tmpreg =(uint32_t) CSI_VALUE;
 8003fd6:	482f      	ldr	r0, [pc, #188]	; (8004094 <UART_SetConfig+0x4ac>)
    if (tmpreg != 0U)
 8003fd8:	2800      	cmp	r0, #0
 8003fda:	f000 8150 	beq.w	800427e <UART_SetConfig+0x696>
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8003fde:	6867      	ldr	r7, [r4, #4]
 8003fe0:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 8003fe4:	4298      	cmp	r0, r3
 8003fe6:	f0c0 8272 	bcc.w	80044ce <UART_SetConfig+0x8e6>
 8003fea:	ebb0 3f07 	cmp.w	r0, r7, lsl #12
 8003fee:	f200 8270 	bhi.w	80044d2 <UART_SetConfig+0x8ea>
        switch (clocksource)
 8003ff2:	2e08      	cmp	r6, #8
 8003ff4:	f000 8096 	beq.w	8004124 <UART_SetConfig+0x53c>
 8003ff8:	d927      	bls.n	800404a <UART_SetConfig+0x462>
 8003ffa:	2e20      	cmp	r6, #32
 8003ffc:	f000 80ee 	beq.w	80041dc <UART_SetConfig+0x5f4>
 8004000:	2e40      	cmp	r6, #64	; 0x40
 8004002:	d071      	beq.n	80040e8 <UART_SetConfig+0x500>
 8004004:	2e10      	cmp	r6, #16
 8004006:	f000 80ce 	beq.w	80041a6 <UART_SetConfig+0x5be>
          ret = HAL_ERROR;
 800400a:	2501      	movs	r5, #1
 800400c:	e063      	b.n	80040d6 <UART_SetConfig+0x4ee>
      tmpreg = HAL_RCCEx_GetD3PCLK1Freq();
 800400e:	f7fe ff35 	bl	8002e7c <HAL_RCCEx_GetD3PCLK1Freq>
  HAL_StatusTypeDef ret               = HAL_OK;
 8004012:	2500      	movs	r5, #0
      break;
 8004014:	e7e0      	b.n	8003fd8 <UART_SetConfig+0x3f0>
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004016:	4668      	mov	r0, sp
 8004018:	f7ff f82a 	bl	8003070 <HAL_RCCEx_GetPLL3ClockFreq>
      tmpreg = pll3_clocks.PLL3_Q_Frequency;
 800401c:	9801      	ldr	r0, [sp, #4]
  HAL_StatusTypeDef ret               = HAL_OK;
 800401e:	2500      	movs	r5, #0
      break;
 8004020:	e7da      	b.n	8003fd8 <UART_SetConfig+0x3f0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004022:	4b1b      	ldr	r3, [pc, #108]	; (8004090 <UART_SetConfig+0x4a8>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f013 0f20 	tst.w	r3, #32
 800402a:	d00b      	beq.n	8004044 <UART_SetConfig+0x45c>
        tmpreg = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800402c:	4b18      	ldr	r3, [pc, #96]	; (8004090 <UART_SetConfig+0x4a8>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004034:	4818      	ldr	r0, [pc, #96]	; (8004098 <UART_SetConfig+0x4b0>)
 8004036:	40d8      	lsrs	r0, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004038:	2500      	movs	r5, #0
 800403a:	e7cd      	b.n	8003fd8 <UART_SetConfig+0x3f0>
 800403c:	2500      	movs	r5, #0
      tmpreg = (uint32_t) LSE_VALUE;
 800403e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004042:	e7c9      	b.n	8003fd8 <UART_SetConfig+0x3f0>
  HAL_StatusTypeDef ret               = HAL_OK;
 8004044:	2500      	movs	r5, #0
        tmpreg = (uint32_t) HSI_VALUE;
 8004046:	4814      	ldr	r0, [pc, #80]	; (8004098 <UART_SetConfig+0x4b0>)
 8004048:	e7c6      	b.n	8003fd8 <UART_SetConfig+0x3f0>
        switch (clocksource)
 800404a:	2e02      	cmp	r6, #2
 800404c:	d028      	beq.n	80040a0 <UART_SetConfig+0x4b8>
 800404e:	2e04      	cmp	r6, #4
 8004050:	d1db      	bne.n	800400a <UART_SetConfig+0x422>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004052:	a803      	add	r0, sp, #12
 8004054:	f7fe ff28 	bl	8002ea8 <HAL_RCCEx_GetPLL2ClockFreq>
          tmpreg = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8004058:	f04f 0800 	mov.w	r8, #0
 800405c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800405e:	4b0f      	ldr	r3, [pc, #60]	; (800409c <UART_SetConfig+0x4b4>)
 8004060:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8004064:	2300      	movs	r3, #0
 8004066:	9804      	ldr	r0, [sp, #16]
 8004068:	4641      	mov	r1, r8
 800406a:	f7fc f935 	bl	80002d8 <__aeabi_uldivmod>
 800406e:	020f      	lsls	r7, r1, #8
 8004070:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8004074:	0206      	lsls	r6, r0, #8
 8004076:	6862      	ldr	r2, [r4, #4]
 8004078:	0850      	lsrs	r0, r2, #1
 800407a:	4643      	mov	r3, r8
 800407c:	eb16 0800 	adds.w	r8, r6, r0
 8004080:	f147 0900 	adc.w	r9, r7, #0
 8004084:	4640      	mov	r0, r8
 8004086:	4649      	mov	r1, r9
 8004088:	f7fc f926 	bl	80002d8 <__aeabi_uldivmod>
          break;
 800408c:	e023      	b.n	80040d6 <UART_SetConfig+0x4ee>
 800408e:	bf00      	nop
 8004090:	58024400 	.word	0x58024400
 8004094:	003d0900 	.word	0x003d0900
 8004098:	03d09000 	.word	0x03d09000
 800409c:	080057bc 	.word	0x080057bc
          tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCCEx_GetD3PCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 80040a0:	f7fe feec 	bl	8002e7c <HAL_RCCEx_GetD3PCLK1Freq>
 80040a4:	f04f 0800 	mov.w	r8, #0
 80040a8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80040aa:	4b9f      	ldr	r3, [pc, #636]	; (8004328 <UART_SetConfig+0x740>)
 80040ac:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80040b0:	2300      	movs	r3, #0
 80040b2:	4641      	mov	r1, r8
 80040b4:	f7fc f910 	bl	80002d8 <__aeabi_uldivmod>
 80040b8:	020f      	lsls	r7, r1, #8
 80040ba:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 80040be:	0206      	lsls	r6, r0, #8
 80040c0:	6862      	ldr	r2, [r4, #4]
 80040c2:	0850      	lsrs	r0, r2, #1
 80040c4:	4643      	mov	r3, r8
 80040c6:	eb16 0800 	adds.w	r8, r6, r0
 80040ca:	f147 0900 	adc.w	r9, r7, #0
 80040ce:	4640      	mov	r0, r8
 80040d0:	4649      	mov	r1, r9
 80040d2:	f7fc f901 	bl	80002d8 <__aeabi_uldivmod>
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 80040d6:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 80040da:	4b94      	ldr	r3, [pc, #592]	; (800432c <UART_SetConfig+0x744>)
 80040dc:	429a      	cmp	r2, r3
 80040de:	f200 81fa 	bhi.w	80044d6 <UART_SetConfig+0x8ee>
           huart->Instance->BRR = tmpreg;
 80040e2:	6823      	ldr	r3, [r4, #0]
 80040e4:	60d8      	str	r0, [r3, #12]
 80040e6:	e0ca      	b.n	800427e <UART_SetConfig+0x696>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80040e8:	4668      	mov	r0, sp
 80040ea:	f7fe ffc1 	bl	8003070 <HAL_RCCEx_GetPLL3ClockFreq>
          tmpreg = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 80040ee:	f04f 0800 	mov.w	r8, #0
 80040f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80040f4:	4b8c      	ldr	r3, [pc, #560]	; (8004328 <UART_SetConfig+0x740>)
 80040f6:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80040fa:	2300      	movs	r3, #0
 80040fc:	9801      	ldr	r0, [sp, #4]
 80040fe:	4641      	mov	r1, r8
 8004100:	f7fc f8ea 	bl	80002d8 <__aeabi_uldivmod>
 8004104:	020f      	lsls	r7, r1, #8
 8004106:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 800410a:	0206      	lsls	r6, r0, #8
 800410c:	6862      	ldr	r2, [r4, #4]
 800410e:	0850      	lsrs	r0, r2, #1
 8004110:	4643      	mov	r3, r8
 8004112:	eb16 0800 	adds.w	r8, r6, r0
 8004116:	f147 0900 	adc.w	r9, r7, #0
 800411a:	4640      	mov	r0, r8
 800411c:	4649      	mov	r1, r9
 800411e:	f7fc f8db 	bl	80002d8 <__aeabi_uldivmod>
          break;
 8004122:	e7d8      	b.n	80040d6 <UART_SetConfig+0x4ee>
          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004124:	4b82      	ldr	r3, [pc, #520]	; (8004330 <UART_SetConfig+0x748>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f013 0f20 	tst.w	r3, #32
 800412c:	d020      	beq.n	8004170 <UART_SetConfig+0x588>
            tmpreg = (uint32_t)(UART_DIV_LPUART((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 800412e:	4b80      	ldr	r3, [pc, #512]	; (8004330 <UART_SetConfig+0x748>)
 8004130:	6819      	ldr	r1, [r3, #0]
 8004132:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8004136:	2600      	movs	r6, #0
 8004138:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800413a:	4b7b      	ldr	r3, [pc, #492]	; (8004328 <UART_SetConfig+0x740>)
 800413c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8004140:	2300      	movs	r3, #0
 8004142:	487c      	ldr	r0, [pc, #496]	; (8004334 <UART_SetConfig+0x74c>)
 8004144:	40c8      	lsrs	r0, r1
 8004146:	4631      	mov	r1, r6
 8004148:	f7fc f8c6 	bl	80002d8 <__aeabi_uldivmod>
 800414c:	ea4f 2901 	mov.w	r9, r1, lsl #8
 8004150:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 8004154:	ea4f 2800 	mov.w	r8, r0, lsl #8
 8004158:	0878      	lsrs	r0, r7, #1
 800415a:	463a      	mov	r2, r7
 800415c:	4633      	mov	r3, r6
 800415e:	eb18 0600 	adds.w	r6, r8, r0
 8004162:	f149 0700 	adc.w	r7, r9, #0
 8004166:	4630      	mov	r0, r6
 8004168:	4639      	mov	r1, r7
 800416a:	f7fc f8b5 	bl	80002d8 <__aeabi_uldivmod>
 800416e:	e7b2      	b.n	80040d6 <UART_SetConfig+0x4ee>
            tmpreg = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8004170:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004172:	4b6d      	ldr	r3, [pc, #436]	; (8004328 <UART_SetConfig+0x740>)
 8004174:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8004178:	2300      	movs	r3, #0
 800417a:	486e      	ldr	r0, [pc, #440]	; (8004334 <UART_SetConfig+0x74c>)
 800417c:	2100      	movs	r1, #0
 800417e:	f7fc f8ab 	bl	80002d8 <__aeabi_uldivmod>
 8004182:	ea4f 2901 	mov.w	r9, r1, lsl #8
 8004186:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 800418a:	ea4f 2800 	mov.w	r8, r0, lsl #8
 800418e:	0878      	lsrs	r0, r7, #1
 8004190:	463a      	mov	r2, r7
 8004192:	2300      	movs	r3, #0
 8004194:	eb18 0600 	adds.w	r6, r8, r0
 8004198:	f149 0700 	adc.w	r7, r9, #0
 800419c:	4630      	mov	r0, r6
 800419e:	4639      	mov	r1, r7
 80041a0:	f7fc f89a 	bl	80002d8 <__aeabi_uldivmod>
 80041a4:	e797      	b.n	80040d6 <UART_SetConfig+0x4ee>
          tmpreg = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80041a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80041a8:	4b5f      	ldr	r3, [pc, #380]	; (8004328 <UART_SetConfig+0x740>)
 80041aa:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80041ae:	2300      	movs	r3, #0
 80041b0:	4861      	ldr	r0, [pc, #388]	; (8004338 <UART_SetConfig+0x750>)
 80041b2:	2100      	movs	r1, #0
 80041b4:	f7fc f890 	bl	80002d8 <__aeabi_uldivmod>
 80041b8:	ea4f 2901 	mov.w	r9, r1, lsl #8
 80041bc:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 80041c0:	ea4f 2800 	mov.w	r8, r0, lsl #8
 80041c4:	0878      	lsrs	r0, r7, #1
 80041c6:	463a      	mov	r2, r7
 80041c8:	2300      	movs	r3, #0
 80041ca:	eb18 0600 	adds.w	r6, r8, r0
 80041ce:	f149 0700 	adc.w	r7, r9, #0
 80041d2:	4630      	mov	r0, r6
 80041d4:	4639      	mov	r1, r7
 80041d6:	f7fc f87f 	bl	80002d8 <__aeabi_uldivmod>
          break;
 80041da:	e77c      	b.n	80040d6 <UART_SetConfig+0x4ee>
          tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80041dc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80041de:	4b52      	ldr	r3, [pc, #328]	; (8004328 <UART_SetConfig+0x740>)
 80041e0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80041e4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80041e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80041ec:	b292      	uxth	r2, r2
 80041ee:	2100      	movs	r1, #0
 80041f0:	0210      	lsls	r0, r2, #8
 80041f2:	087e      	lsrs	r6, r7, #1
 80041f4:	463a      	mov	r2, r7
 80041f6:	2300      	movs	r3, #0
 80041f8:	1980      	adds	r0, r0, r6
 80041fa:	f141 0100 	adc.w	r1, r1, #0
 80041fe:	f7fc f86b 	bl	80002d8 <__aeabi_uldivmod>
          break;
 8004202:	e768      	b.n	80040d6 <UART_SetConfig+0x4ee>
    switch (clocksource)
 8004204:	2e40      	cmp	r6, #64	; 0x40
 8004206:	f200 80ca 	bhi.w	800439e <UART_SetConfig+0x7b6>
 800420a:	e8df f006 	tbb	[pc, r6]
 800420e:	3c21      	.short	0x3c21
 8004210:	c84dc8c8 	.word	0xc84dc8c8
 8004214:	c873c8c8 	.word	0xc873c8c8
 8004218:	c8c8c8c8 	.word	0xc8c8c8c8
 800421c:	c8a7c8c8 	.word	0xc8a7c8c8
 8004220:	c8c8c8c8 	.word	0xc8c8c8c8
 8004224:	c8c8c8c8 	.word	0xc8c8c8c8
 8004228:	c8c8c8c8 	.word	0xc8c8c8c8
 800422c:	c8b7c8c8 	.word	0xc8b7c8c8
 8004230:	c8c8c8c8 	.word	0xc8c8c8c8
 8004234:	c8c8c8c8 	.word	0xc8c8c8c8
 8004238:	c8c8c8c8 	.word	0xc8c8c8c8
 800423c:	c8c8c8c8 	.word	0xc8c8c8c8
 8004240:	c8c8c8c8 	.word	0xc8c8c8c8
 8004244:	c8c8c8c8 	.word	0xc8c8c8c8
 8004248:	c8c8c8c8 	.word	0xc8c8c8c8
 800424c:	c8c8      	.short	0xc8c8
 800424e:	60          	.byte	0x60
 800424f:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8004250:	f7fe f84a 	bl	80022e8 <HAL_RCC_GetPCLK1Freq>
 8004254:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004256:	4b34      	ldr	r3, [pc, #208]	; (8004328 <UART_SetConfig+0x740>)
 8004258:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800425c:	fbb0 f0f3 	udiv	r0, r0, r3
 8004260:	6862      	ldr	r2, [r4, #4]
 8004262:	0853      	lsrs	r3, r2, #1
 8004264:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8004268:	fbb3 f3f2 	udiv	r3, r3, r2
 800426c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800426e:	2500      	movs	r5, #0
    brrtemp = usartdiv & 0xFFF0U;
 8004270:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004274:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8004278:	4313      	orrs	r3, r2
    huart->Instance->BRR = brrtemp;
 800427a:	6822      	ldr	r2, [r4, #0]
 800427c:	60d3      	str	r3, [r2, #12]
      break;
    }
  }

  return ret;
}
 800427e:	4628      	mov	r0, r5
 8004280:	b007      	add	sp, #28
 8004282:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8004286:	f7fe f845 	bl	8002314 <HAL_RCC_GetPCLK2Freq>
 800428a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800428c:	4b26      	ldr	r3, [pc, #152]	; (8004328 <UART_SetConfig+0x740>)
 800428e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004292:	fbb0 f0f3 	udiv	r0, r0, r3
 8004296:	6862      	ldr	r2, [r4, #4]
 8004298:	0853      	lsrs	r3, r2, #1
 800429a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800429e:	fbb3 f3f2 	udiv	r3, r3, r2
 80042a2:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80042a4:	2500      	movs	r5, #0
      break;
 80042a6:	e7e3      	b.n	8004270 <UART_SetConfig+0x688>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80042a8:	a803      	add	r0, sp, #12
 80042aa:	f7fe fdfd 	bl	8002ea8 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 80042ae:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80042b0:	4b1d      	ldr	r3, [pc, #116]	; (8004328 <UART_SetConfig+0x740>)
 80042b2:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80042b6:	9b04      	ldr	r3, [sp, #16]
 80042b8:	fbb3 f2f2 	udiv	r2, r3, r2
 80042bc:	6861      	ldr	r1, [r4, #4]
 80042be:	084b      	lsrs	r3, r1, #1
 80042c0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80042c4:	fbb3 f3f1 	udiv	r3, r3, r1
 80042c8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80042ca:	2500      	movs	r5, #0
      break;
 80042cc:	e7d0      	b.n	8004270 <UART_SetConfig+0x688>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80042ce:	4668      	mov	r0, sp
 80042d0:	f7fe fece 	bl	8003070 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 80042d4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80042d6:	4b14      	ldr	r3, [pc, #80]	; (8004328 <UART_SetConfig+0x740>)
 80042d8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80042dc:	9b01      	ldr	r3, [sp, #4]
 80042de:	fbb3 f2f2 	udiv	r2, r3, r2
 80042e2:	6861      	ldr	r1, [r4, #4]
 80042e4:	084b      	lsrs	r3, r1, #1
 80042e6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80042ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80042ee:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80042f0:	2500      	movs	r5, #0
      break;
 80042f2:	e7bd      	b.n	8004270 <UART_SetConfig+0x688>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042f4:	4b0e      	ldr	r3, [pc, #56]	; (8004330 <UART_SetConfig+0x748>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f013 0f20 	tst.w	r3, #32
 80042fc:	d01e      	beq.n	800433c <UART_SetConfig+0x754>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 80042fe:	4b0c      	ldr	r3, [pc, #48]	; (8004330 <UART_SetConfig+0x748>)
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8004306:	4b0b      	ldr	r3, [pc, #44]	; (8004334 <UART_SetConfig+0x74c>)
 8004308:	40d3      	lsrs	r3, r2
 800430a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800430c:	4a06      	ldr	r2, [pc, #24]	; (8004328 <UART_SetConfig+0x740>)
 800430e:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8004312:	fbb3 f2f2 	udiv	r2, r3, r2
 8004316:	6861      	ldr	r1, [r4, #4]
 8004318:	084b      	lsrs	r3, r1, #1
 800431a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800431e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004322:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004324:	2500      	movs	r5, #0
 8004326:	e7a3      	b.n	8004270 <UART_SetConfig+0x688>
 8004328:	080057bc 	.word	0x080057bc
 800432c:	000ffcff 	.word	0x000ffcff
 8004330:	58024400 	.word	0x58024400
 8004334:	03d09000 	.word	0x03d09000
 8004338:	003d0900 	.word	0x003d0900
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 800433c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800433e:	4b68      	ldr	r3, [pc, #416]	; (80044e0 <UART_SetConfig+0x8f8>)
 8004340:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8004344:	4b67      	ldr	r3, [pc, #412]	; (80044e4 <UART_SetConfig+0x8fc>)
 8004346:	fbb3 f2f2 	udiv	r2, r3, r2
 800434a:	6861      	ldr	r1, [r4, #4]
 800434c:	084b      	lsrs	r3, r1, #1
 800434e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8004352:	fbb3 f3f1 	udiv	r3, r3, r1
 8004356:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004358:	2500      	movs	r5, #0
 800435a:	e789      	b.n	8004270 <UART_SetConfig+0x688>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 800435c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800435e:	4b60      	ldr	r3, [pc, #384]	; (80044e0 <UART_SetConfig+0x8f8>)
 8004360:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8004364:	4b60      	ldr	r3, [pc, #384]	; (80044e8 <UART_SetConfig+0x900>)
 8004366:	fbb3 f2f2 	udiv	r2, r3, r2
 800436a:	6861      	ldr	r1, [r4, #4]
 800436c:	084b      	lsrs	r3, r1, #1
 800436e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8004372:	fbb3 f3f1 	udiv	r3, r3, r1
 8004376:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004378:	2500      	movs	r5, #0
      break;
 800437a:	e779      	b.n	8004270 <UART_SetConfig+0x688>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 800437c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800437e:	4b58      	ldr	r3, [pc, #352]	; (80044e0 <UART_SetConfig+0x8f8>)
 8004380:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8004384:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004388:	fbb3 f2f2 	udiv	r2, r3, r2
 800438c:	6861      	ldr	r1, [r4, #4]
 800438e:	084b      	lsrs	r3, r1, #1
 8004390:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8004394:	fbb3 f3f1 	udiv	r3, r3, r1
 8004398:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800439a:	2500      	movs	r5, #0
      break;
 800439c:	e768      	b.n	8004270 <UART_SetConfig+0x688>
        ret = HAL_ERROR;
 800439e:	2501      	movs	r5, #1
  uint16_t usartdiv                   = 0x0000U;
 80043a0:	2300      	movs	r3, #0
 80043a2:	e765      	b.n	8004270 <UART_SetConfig+0x688>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 80043a4:	f7fd ffa0 	bl	80022e8 <HAL_RCC_GetPCLK1Freq>
 80043a8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80043aa:	4b4d      	ldr	r3, [pc, #308]	; (80044e0 <UART_SetConfig+0x8f8>)
 80043ac:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80043b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80043b4:	6860      	ldr	r0, [r4, #4]
 80043b6:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 80043ba:	fbb3 f3f0 	udiv	r3, r3, r0
 80043be:	b29b      	uxth	r3, r3
 80043c0:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80043c2:	2500      	movs	r5, #0
      break;
 80043c4:	e75b      	b.n	800427e <UART_SetConfig+0x696>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 80043c6:	f7fd ffa5 	bl	8002314 <HAL_RCC_GetPCLK2Freq>
 80043ca:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80043cc:	4b44      	ldr	r3, [pc, #272]	; (80044e0 <UART_SetConfig+0x8f8>)
 80043ce:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80043d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80043d6:	6860      	ldr	r0, [r4, #4]
 80043d8:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 80043dc:	fbb3 f3f0 	udiv	r3, r3, r0
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80043e4:	2500      	movs	r5, #0
      break;
 80043e6:	e74a      	b.n	800427e <UART_SetConfig+0x696>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80043e8:	a803      	add	r0, sp, #12
 80043ea:	f7fe fd5d 	bl	8002ea8 <HAL_RCCEx_GetPLL2ClockFreq>
        huart->Instance->BRR =  (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 80043ee:	6821      	ldr	r1, [r4, #0]
 80043f0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80043f2:	4b3b      	ldr	r3, [pc, #236]	; (80044e0 <UART_SetConfig+0x8f8>)
 80043f4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80043f8:	9b04      	ldr	r3, [sp, #16]
 80043fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80043fe:	6862      	ldr	r2, [r4, #4]
 8004400:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8004404:	fbb3 f3f2 	udiv	r3, r3, r2
 8004408:	b29b      	uxth	r3, r3
 800440a:	60cb      	str	r3, [r1, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800440c:	2500      	movs	r5, #0
      break;
 800440e:	e736      	b.n	800427e <UART_SetConfig+0x696>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004410:	4668      	mov	r0, sp
 8004412:	f7fe fe2d 	bl	8003070 <HAL_RCCEx_GetPLL3ClockFreq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8004416:	6821      	ldr	r1, [r4, #0]
 8004418:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800441a:	4b31      	ldr	r3, [pc, #196]	; (80044e0 <UART_SetConfig+0x8f8>)
 800441c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8004420:	9b01      	ldr	r3, [sp, #4]
 8004422:	fbb3 f3f2 	udiv	r3, r3, r2
 8004426:	6862      	ldr	r2, [r4, #4]
 8004428:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800442c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004430:	b29b      	uxth	r3, r3
 8004432:	60cb      	str	r3, [r1, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004434:	2500      	movs	r5, #0
      break;
 8004436:	e722      	b.n	800427e <UART_SetConfig+0x696>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004438:	4b2c      	ldr	r3, [pc, #176]	; (80044ec <UART_SetConfig+0x904>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f013 0f20 	tst.w	r3, #32
 8004440:	d014      	beq.n	800446c <UART_SetConfig+0x884>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 8004442:	4b2a      	ldr	r3, [pc, #168]	; (80044ec <UART_SetConfig+0x904>)
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800444a:	4b26      	ldr	r3, [pc, #152]	; (80044e4 <UART_SetConfig+0x8fc>)
 800444c:	40d3      	lsrs	r3, r2
 800444e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004450:	4a23      	ldr	r2, [pc, #140]	; (80044e0 <UART_SetConfig+0x8f8>)
 8004452:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8004456:	fbb3 f3f2 	udiv	r3, r3, r2
 800445a:	6862      	ldr	r2, [r4, #4]
 800445c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8004460:	fbb3 f3f2 	udiv	r3, r3, r2
 8004464:	b29b      	uxth	r3, r3
 8004466:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004468:	2500      	movs	r5, #0
 800446a:	e708      	b.n	800427e <UART_SetConfig+0x696>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 800446c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800446e:	4b1c      	ldr	r3, [pc, #112]	; (80044e0 <UART_SetConfig+0x8f8>)
 8004470:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8004474:	4b1b      	ldr	r3, [pc, #108]	; (80044e4 <UART_SetConfig+0x8fc>)
 8004476:	fbb3 f3f2 	udiv	r3, r3, r2
 800447a:	6862      	ldr	r2, [r4, #4]
 800447c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8004480:	fbb3 f3f2 	udiv	r3, r3, r2
 8004484:	b29b      	uxth	r3, r3
 8004486:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004488:	2500      	movs	r5, #0
 800448a:	e6f8      	b.n	800427e <UART_SetConfig+0x696>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 800448c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800448e:	4b14      	ldr	r3, [pc, #80]	; (80044e0 <UART_SetConfig+0x8f8>)
 8004490:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8004494:	4b14      	ldr	r3, [pc, #80]	; (80044e8 <UART_SetConfig+0x900>)
 8004496:	fbb3 f3f2 	udiv	r3, r3, r2
 800449a:	6862      	ldr	r2, [r4, #4]
 800449c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80044a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80044a8:	2500      	movs	r5, #0
      break;
 80044aa:	e6e8      	b.n	800427e <UART_SetConfig+0x696>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80044ac:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80044ae:	4b0c      	ldr	r3, [pc, #48]	; (80044e0 <UART_SetConfig+0x8f8>)
 80044b0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80044b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80044bc:	6862      	ldr	r2, [r4, #4]
 80044be:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80044c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80044ca:	2500      	movs	r5, #0
      break;
 80044cc:	e6d7      	b.n	800427e <UART_SetConfig+0x696>
        ret = HAL_ERROR;
 80044ce:	2501      	movs	r5, #1
 80044d0:	e6d5      	b.n	800427e <UART_SetConfig+0x696>
 80044d2:	2501      	movs	r5, #1
 80044d4:	e6d3      	b.n	800427e <UART_SetConfig+0x696>
          ret = HAL_ERROR;
 80044d6:	2501      	movs	r5, #1
 80044d8:	e6d1      	b.n	800427e <UART_SetConfig+0x696>
        ret = HAL_ERROR;
 80044da:	2501      	movs	r5, #1
 80044dc:	e6cf      	b.n	800427e <UART_SetConfig+0x696>
 80044de:	bf00      	nop
 80044e0:	080057bc 	.word	0x080057bc
 80044e4:	03d09000 	.word	0x03d09000
 80044e8:	003d0900 	.word	0x003d0900
 80044ec:	58024400 	.word	0x58024400

080044f0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044f0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80044f2:	f013 0f01 	tst.w	r3, #1
 80044f6:	d006      	beq.n	8004506 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044f8:	6802      	ldr	r2, [r0, #0]
 80044fa:	6853      	ldr	r3, [r2, #4]
 80044fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004500:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8004502:	430b      	orrs	r3, r1
 8004504:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004506:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004508:	f013 0f02 	tst.w	r3, #2
 800450c:	d006      	beq.n	800451c <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800450e:	6802      	ldr	r2, [r0, #0]
 8004510:	6853      	ldr	r3, [r2, #4]
 8004512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004516:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8004518:	430b      	orrs	r3, r1
 800451a:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800451c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800451e:	f013 0f04 	tst.w	r3, #4
 8004522:	d006      	beq.n	8004532 <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004524:	6802      	ldr	r2, [r0, #0]
 8004526:	6853      	ldr	r3, [r2, #4]
 8004528:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800452c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800452e:	430b      	orrs	r3, r1
 8004530:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004532:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004534:	f013 0f08 	tst.w	r3, #8
 8004538:	d006      	beq.n	8004548 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800453a:	6802      	ldr	r2, [r0, #0]
 800453c:	6853      	ldr	r3, [r2, #4]
 800453e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004542:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8004544:	430b      	orrs	r3, r1
 8004546:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004548:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800454a:	f013 0f10 	tst.w	r3, #16
 800454e:	d006      	beq.n	800455e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004550:	6802      	ldr	r2, [r0, #0]
 8004552:	6893      	ldr	r3, [r2, #8]
 8004554:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004558:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800455a:	430b      	orrs	r3, r1
 800455c:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800455e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004560:	f013 0f20 	tst.w	r3, #32
 8004564:	d006      	beq.n	8004574 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004566:	6802      	ldr	r2, [r0, #0]
 8004568:	6893      	ldr	r3, [r2, #8]
 800456a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800456e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8004570:	430b      	orrs	r3, r1
 8004572:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004574:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004576:	f013 0f40 	tst.w	r3, #64	; 0x40
 800457a:	d00a      	beq.n	8004592 <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800457c:	6802      	ldr	r2, [r0, #0]
 800457e:	6853      	ldr	r3, [r2, #4]
 8004580:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004584:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8004586:	430b      	orrs	r3, r1
 8004588:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800458a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800458c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004590:	d00b      	beq.n	80045aa <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004592:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004594:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004598:	d006      	beq.n	80045a8 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800459a:	6802      	ldr	r2, [r0, #0]
 800459c:	6853      	ldr	r3, [r2, #4]
 800459e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80045a2:	6d81      	ldr	r1, [r0, #88]	; 0x58
 80045a4:	430b      	orrs	r3, r1
 80045a6:	6053      	str	r3, [r2, #4]
 80045a8:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045aa:	6802      	ldr	r2, [r0, #0]
 80045ac:	6853      	ldr	r3, [r2, #4]
 80045ae:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80045b2:	6d41      	ldr	r1, [r0, #84]	; 0x54
 80045b4:	430b      	orrs	r3, r1
 80045b6:	6053      	str	r3, [r2, #4]
 80045b8:	e7eb      	b.n	8004592 <UART_AdvFeatureConfig+0xa2>

080045ba <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80045ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045be:	4605      	mov	r5, r0
 80045c0:	460f      	mov	r7, r1
 80045c2:	4616      	mov	r6, r2
 80045c4:	4698      	mov	r8, r3
 80045c6:	9c06      	ldr	r4, [sp, #24]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045c8:	682b      	ldr	r3, [r5, #0]
 80045ca:	69db      	ldr	r3, [r3, #28]
 80045cc:	ea37 0303 	bics.w	r3, r7, r3
 80045d0:	bf0c      	ite	eq
 80045d2:	2301      	moveq	r3, #1
 80045d4:	2300      	movne	r3, #0
 80045d6:	42b3      	cmp	r3, r6
 80045d8:	d11e      	bne.n	8004618 <UART_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80045da:	f1b4 3fff 	cmp.w	r4, #4294967295
 80045de:	d0f3      	beq.n	80045c8 <UART_WaitOnFlagUntilTimeout+0xe>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80045e0:	b12c      	cbz	r4, 80045ee <UART_WaitOnFlagUntilTimeout+0x34>
 80045e2:	f7fc f843 	bl	800066c <HAL_GetTick>
 80045e6:	eba0 0008 	sub.w	r0, r0, r8
 80045ea:	4284      	cmp	r4, r0
 80045ec:	d2ec      	bcs.n	80045c8 <UART_WaitOnFlagUntilTimeout+0xe>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045ee:	682a      	ldr	r2, [r5, #0]
 80045f0:	6813      	ldr	r3, [r2, #0]
 80045f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80045f6:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045f8:	682a      	ldr	r2, [r5, #0]
 80045fa:	6893      	ldr	r3, [r2, #8]
 80045fc:	f023 0301 	bic.w	r3, r3, #1
 8004600:	6093      	str	r3, [r2, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004602:	2320      	movs	r3, #32
 8004604:	f885 3079 	strb.w	r3, [r5, #121]	; 0x79
        huart->RxState = HAL_UART_STATE_READY;
 8004608:	f885 307a 	strb.w	r3, [r5, #122]	; 0x7a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800460c:	2300      	movs	r3, #0
 800460e:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78

        return HAL_TIMEOUT;
 8004612:	2003      	movs	r0, #3
 8004614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      }
    }
  }
  return HAL_OK;
 8004618:	2000      	movs	r0, #0
}
 800461a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800461e <UART_CheckIdleState>:
{
 800461e:	b530      	push	{r4, r5, lr}
 8004620:	b083      	sub	sp, #12
 8004622:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004624:	2300      	movs	r3, #0
 8004626:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8004628:	f7fc f820 	bl	800066c <HAL_GetTick>
 800462c:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800462e:	6823      	ldr	r3, [r4, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f013 0f08 	tst.w	r3, #8
 8004636:	d10e      	bne.n	8004656 <UART_CheckIdleState+0x38>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004638:	6823      	ldr	r3, [r4, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f013 0f04 	tst.w	r3, #4
 8004640:	d117      	bne.n	8004672 <UART_CheckIdleState+0x54>
  huart->gState = HAL_UART_STATE_READY;
 8004642:	2320      	movs	r3, #32
 8004644:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
  huart->RxState = HAL_UART_STATE_READY;
 8004648:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
  __HAL_UNLOCK(huart);
 800464c:	2000      	movs	r0, #0
 800464e:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
}
 8004652:	b003      	add	sp, #12
 8004654:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004656:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800465a:	9300      	str	r3, [sp, #0]
 800465c:	4603      	mov	r3, r0
 800465e:	2200      	movs	r2, #0
 8004660:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004664:	4620      	mov	r0, r4
 8004666:	f7ff ffa8 	bl	80045ba <UART_WaitOnFlagUntilTimeout>
 800466a:	2800      	cmp	r0, #0
 800466c:	d0e4      	beq.n	8004638 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 800466e:	2003      	movs	r0, #3
 8004670:	e7ef      	b.n	8004652 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004672:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004676:	9300      	str	r3, [sp, #0]
 8004678:	462b      	mov	r3, r5
 800467a:	2200      	movs	r2, #0
 800467c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004680:	4620      	mov	r0, r4
 8004682:	f7ff ff9a 	bl	80045ba <UART_WaitOnFlagUntilTimeout>
 8004686:	2800      	cmp	r0, #0
 8004688:	d0db      	beq.n	8004642 <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 800468a:	2003      	movs	r0, #3
 800468c:	e7e1      	b.n	8004652 <UART_CheckIdleState+0x34>

0800468e <HAL_UART_Init>:
  if(huart == NULL)
 800468e:	b378      	cbz	r0, 80046f0 <HAL_UART_Init+0x62>
{
 8004690:	b510      	push	{r4, lr}
 8004692:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 8004694:	f890 3079 	ldrb.w	r3, [r0, #121]	; 0x79
 8004698:	b30b      	cbz	r3, 80046de <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800469a:	2324      	movs	r3, #36	; 0x24
 800469c:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
  __HAL_UART_DISABLE(huart);
 80046a0:	6822      	ldr	r2, [r4, #0]
 80046a2:	6813      	ldr	r3, [r2, #0]
 80046a4:	f023 0301 	bic.w	r3, r3, #1
 80046a8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046aa:	4620      	mov	r0, r4
 80046ac:	f7ff fa9c 	bl	8003be8 <UART_SetConfig>
 80046b0:	2801      	cmp	r0, #1
 80046b2:	d01f      	beq.n	80046f4 <HAL_UART_Init+0x66>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80046b6:	b9bb      	cbnz	r3, 80046e8 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046b8:	6822      	ldr	r2, [r4, #0]
 80046ba:	6853      	ldr	r3, [r2, #4]
 80046bc:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80046c0:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046c2:	6822      	ldr	r2, [r4, #0]
 80046c4:	6893      	ldr	r3, [r2, #8]
 80046c6:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80046ca:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80046cc:	6822      	ldr	r2, [r4, #0]
 80046ce:	6813      	ldr	r3, [r2, #0]
 80046d0:	f043 0301 	orr.w	r3, r3, #1
 80046d4:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80046d6:	4620      	mov	r0, r4
 80046d8:	f7ff ffa1 	bl	800461e <UART_CheckIdleState>
 80046dc:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80046de:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 80046e2:	f000 fefd 	bl	80054e0 <HAL_UART_MspInit>
 80046e6:	e7d8      	b.n	800469a <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 80046e8:	4620      	mov	r0, r4
 80046ea:	f7ff ff01 	bl	80044f0 <UART_AdvFeatureConfig>
 80046ee:	e7e3      	b.n	80046b8 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 80046f0:	2001      	movs	r0, #1
 80046f2:	4770      	bx	lr
}
 80046f4:	bd10      	pop	{r4, pc}
	...

080046f8 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046f8:	b084      	sub	sp, #16
 80046fa:	b510      	push	{r4, lr}
 80046fc:	4604      	mov	r4, r0
 80046fe:	a803      	add	r0, sp, #12
 8004700:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004704:	9b08      	ldr	r3, [sp, #32]
 8004706:	2b01      	cmp	r3, #1
 8004708:	d011      	beq.n	800472e <USB_CoreInit+0x36>
  }
  else /* FS interface (embedded Phy) */
  {
    
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800470a:	68e3      	ldr	r3, [r4, #12]
 800470c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004710:	60e3      	str	r3, [r4, #12]
    
    /* Reset after a PHY select and set Host mode */
    USB_CoreReset(USBx);
 8004712:	4620      	mov	r0, r4
 8004714:	f000 f932 	bl	800497c <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8004718:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800471c:	63a3      	str	r3, [r4, #56]	; 0x38
  }
 
  if(cfg.dma_enable == ENABLE)
 800471e:	9b06      	ldr	r3, [sp, #24]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d01c      	beq.n	800475e <USB_CoreInit+0x66>
    USBx->GAHBCFG |= (USB_OTG_GAHBCFG_HBSTLEN_1 | USB_OTG_GAHBCFG_HBSTLEN_2);
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
  }  

  return HAL_OK;
}
 8004724:	2000      	movs	r0, #0
 8004726:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800472a:	b004      	add	sp, #16
 800472c:	4770      	bx	lr
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);		
 800472e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004730:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004734:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004736:	68e2      	ldr	r2, [r4, #12]
 8004738:	4b0d      	ldr	r3, [pc, #52]	; (8004770 <USB_CoreInit+0x78>)
 800473a:	4013      	ands	r3, r2
 800473c:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800473e:	68e3      	ldr	r3, [r4, #12]
 8004740:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004744:	60e3      	str	r3, [r4, #12]
    if(cfg.use_external_vbus == 1)
 8004746:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004748:	2b01      	cmp	r3, #1
 800474a:	d003      	beq.n	8004754 <USB_CoreInit+0x5c>
    USB_CoreReset(USBx); 
 800474c:	4620      	mov	r0, r4
 800474e:	f000 f915 	bl	800497c <USB_CoreReset>
 8004752:	e7e4      	b.n	800471e <USB_CoreInit+0x26>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004754:	68e3      	ldr	r3, [r4, #12]
 8004756:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800475a:	60e3      	str	r3, [r4, #12]
 800475c:	e7f6      	b.n	800474c <USB_CoreInit+0x54>
    USBx->GAHBCFG |= (USB_OTG_GAHBCFG_HBSTLEN_1 | USB_OTG_GAHBCFG_HBSTLEN_2);
 800475e:	68a3      	ldr	r3, [r4, #8]
 8004760:	f043 030c 	orr.w	r3, r3, #12
 8004764:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004766:	68a3      	ldr	r3, [r4, #8]
 8004768:	f043 0320 	orr.w	r3, r3, #32
 800476c:	60a3      	str	r3, [r4, #8]
 800476e:	e7d9      	b.n	8004724 <USB_CoreInit+0x2c>
 8004770:	ffbdffbf 	.word	0xffbdffbf

08004774 <USB_DisableGlobalInt>:
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004774:	6883      	ldr	r3, [r0, #8]
 8004776:	f023 0301 	bic.w	r3, r3, #1
 800477a:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 800477c:	2000      	movs	r0, #0
 800477e:	4770      	bx	lr

08004780 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 8004780:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8004782:	68c3      	ldr	r3, [r0, #12]
 8004784:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004788:	60c3      	str	r3, [r0, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 800478a:	2901      	cmp	r1, #1
 800478c:	d009      	beq.n	80047a2 <USB_SetCurrentMode+0x22>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
 800478e:	b919      	cbnz	r1, 8004798 <USB_SetCurrentMode+0x18>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 8004790:	68c3      	ldr	r3, [r0, #12]
 8004792:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004796:	60c3      	str	r3, [r0, #12]
  }
  HAL_Delay(50);
 8004798:	2032      	movs	r0, #50	; 0x32
 800479a:	f7fb ff6d 	bl	8000678 <HAL_Delay>
  
  return HAL_OK;
}
 800479e:	2000      	movs	r0, #0
 80047a0:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 80047a2:	68c3      	ldr	r3, [r0, #12]
 80047a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80047a8:	60c3      	str	r3, [r0, #12]
 80047aa:	e7f5      	b.n	8004798 <USB_SetCurrentMode+0x18>

080047ac <USB_DevInit>:
  * @param  cfg  : pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047ac:	b084      	sub	sp, #16
 80047ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047b0:	4605      	mov	r5, r0
 80047b2:	a807      	add	r0, sp, #28
 80047b4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t i = 0;

  /*Activate VBUS Sensing B */
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80047b8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80047ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80047be:	63ab      	str	r3, [r5, #56]	; 0x38
  
  if (cfg.vbus_sensing_enable == 0)
 80047c0:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80047c2:	b95f      	cbnz	r7, 80047dc <USB_DevInit+0x30>
  {
    /*Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~ USB_OTG_GCCFG_VBDEN;
 80047c4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80047c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80047ca:	63ab      	str	r3, [r5, #56]	; 0x38
    
    /* B-peripheral session valid override enable*/ 
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80047cc:	682b      	ldr	r3, [r5, #0]
 80047ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047d2:	602b      	str	r3, [r5, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80047d4:	682b      	ldr	r3, [r5, #0]
 80047d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047da:	602b      	str	r3, [r5, #0]
  }
   
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0;
 80047dc:	462c      	mov	r4, r5
 80047de:	2300      	movs	r3, #0
 80047e0:	f8c5 3e00 	str.w	r3, [r5, #3584]	; 0xe00

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80047e4:	f505 6600 	add.w	r6, r5, #2048	; 0x800
 80047e8:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
 80047ec:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
  
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 80047f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d012      	beq.n	800481c <USB_DevInit+0x70>
    }
  }
  else
  {
    /* Set Full speed phy */
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 80047f6:	2103      	movs	r1, #3
 80047f8:	4628      	mov	r0, r5
 80047fa:	f000 f8ab 	bl	8004954 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10); /* all Tx FIFOs */
 80047fe:	2110      	movs	r1, #16
 8004800:	4628      	mov	r0, r5
 8004802:	f000 f881 	bl	8004908 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8004806:	4628      	mov	r0, r5
 8004808:	f000 f892 	bl	8004930 <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0;
 800480c:	2300      	movs	r3, #0
 800480e:	6133      	str	r3, [r6, #16]
  USBx_DEVICE->DOEPMSK = 0;
 8004810:	6173      	str	r3, [r6, #20]
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8004812:	f04f 32ff 	mov.w	r2, #4294967295
 8004816:	61b2      	str	r2, [r6, #24]
  USBx_DEVICE->DAINTMSK = 0;
 8004818:	61f3      	str	r3, [r6, #28]
  
  for (i = 0; i < cfg.dev_endpoints; i++)
 800481a:	e014      	b.n	8004846 <USB_DevInit+0x9a>
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 800481c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800481e:	b923      	cbnz	r3, 800482a <USB_DevInit+0x7e>
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH);
 8004820:	2100      	movs	r1, #0
 8004822:	4628      	mov	r0, r5
 8004824:	f000 f896 	bl	8004954 <USB_SetDevSpeed>
 8004828:	e7e9      	b.n	80047fe <USB_DevInit+0x52>
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 800482a:	2101      	movs	r1, #1
 800482c:	4628      	mov	r0, r5
 800482e:	f000 f891 	bl	8004954 <USB_SetDevSpeed>
 8004832:	e7e4      	b.n	80047fe <USB_DevInit+0x52>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
    {
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8004834:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004838:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    else
    {
      USBx_INEP(i)->DIEPCTL = 0;
    }
    
    USBx_INEP(i)->DIEPTSIZ = 0;
 800483c:	2200      	movs	r2, #0
 800483e:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFF;
 8004840:	22ff      	movs	r2, #255	; 0xff
 8004842:	608a      	str	r2, [r1, #8]
  for (i = 0; i < cfg.dev_endpoints; i++)
 8004844:	3301      	adds	r3, #1
 8004846:	9907      	ldr	r1, [sp, #28]
 8004848:	428b      	cmp	r3, r1
 800484a:	d20b      	bcs.n	8004864 <USB_DevInit+0xb8>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800484c:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8004850:	f502 6110 	add.w	r1, r2, #2304	; 0x900
 8004854:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 8004858:	2800      	cmp	r0, #0
 800485a:	dbeb      	blt.n	8004834 <USB_DevInit+0x88>
      USBx_INEP(i)->DIEPCTL = 0;
 800485c:	2000      	movs	r0, #0
 800485e:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 8004862:	e7eb      	b.n	800483c <USB_DevInit+0x90>
 8004864:	2300      	movs	r3, #0
 8004866:	e008      	b.n	800487a <USB_DevInit+0xce>
  
  for (i = 0; i < cfg.dev_endpoints; i++)
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
    {
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8004868:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
 800486c:	f8c2 eb00 	str.w	lr, [r2, #2816]	; 0xb00
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0;
    }
    
    USBx_OUTEP(i)->DOEPTSIZ = 0;
 8004870:	2200      	movs	r2, #0
 8004872:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFF;
 8004874:	22ff      	movs	r2, #255	; 0xff
 8004876:	6082      	str	r2, [r0, #8]
  for (i = 0; i < cfg.dev_endpoints; i++)
 8004878:	3301      	adds	r3, #1
 800487a:	428b      	cmp	r3, r1
 800487c:	d20d      	bcs.n	800489a <USB_DevInit+0xee>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800487e:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8004882:	f502 6030 	add.w	r0, r2, #2816	; 0xb00
 8004886:	f8d2 eb00 	ldr.w	lr, [r2, #2816]	; 0xb00
 800488a:	f1be 0f00 	cmp.w	lr, #0
 800488e:	dbeb      	blt.n	8004868 <USB_DevInit+0xbc>
      USBx_OUTEP(i)->DOEPCTL = 0;
 8004890:	f04f 0e00 	mov.w	lr, #0
 8004894:	f8c2 eb00 	str.w	lr, [r2, #2816]	; 0xb00
 8004898:	e7ea      	b.n	8004870 <USB_DevInit+0xc4>
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800489a:	6933      	ldr	r3, [r6, #16]
 800489c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048a0:	6133      	str	r3, [r6, #16]
  
  if (cfg.dma_enable == 1)
 80048a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d01a      	beq.n	80048de <USB_DevInit+0x132>
    
    i= USBx_DEVICE->DTHRCTL;
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0;
 80048a8:	2200      	movs	r2, #0
 80048aa:	61aa      	str	r2, [r5, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFF;
 80048ac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80048b0:	616a      	str	r2, [r5, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 80048b2:	b91b      	cbnz	r3, 80048bc <USB_DevInit+0x110>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 80048b4:	69ab      	ldr	r3, [r5, #24]
 80048b6:	f043 0310 	orr.w	r3, r3, #16
 80048ba:	61ab      	str	r3, [r5, #24]
  }
  
  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 80048bc:	69aa      	ldr	r2, [r5, #24]
 80048be:	4b0e      	ldr	r3, [pc, #56]	; (80048f8 <USB_DevInit+0x14c>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	61ab      	str	r3, [r5, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);
  
  if(cfg.Sof_enable)
 80048c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048c6:	b11b      	cbz	r3, 80048d0 <USB_DevInit+0x124>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80048c8:	69ab      	ldr	r3, [r5, #24]
 80048ca:	f043 0308 	orr.w	r3, r3, #8
 80048ce:	61ab      	str	r3, [r5, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 80048d0:	2f01      	cmp	r7, #1
 80048d2:	d00c      	beq.n	80048ee <USB_DevInit+0x142>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
  }
  
  return HAL_OK;
}
 80048d4:	2000      	movs	r0, #0
 80048d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80048da:	b004      	add	sp, #16
 80048dc:	4770      	bx	lr
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_8 | USB_OTG_DTHRCTL_RXTHRLEN_8);
 80048de:	4a07      	ldr	r2, [pc, #28]	; (80048fc <USB_DevInit+0x150>)
 80048e0:	6332      	str	r2, [r6, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN | 0x08000000);
 80048e2:	6b31      	ldr	r1, [r6, #48]	; 0x30
 80048e4:	4a06      	ldr	r2, [pc, #24]	; (8004900 <USB_DevInit+0x154>)
 80048e6:	430a      	orrs	r2, r1
 80048e8:	6332      	str	r2, [r6, #48]	; 0x30
    i= USBx_DEVICE->DTHRCTL;
 80048ea:	6b32      	ldr	r2, [r6, #48]	; 0x30
 80048ec:	e7dc      	b.n	80048a8 <USB_DevInit+0xfc>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 80048ee:	69aa      	ldr	r2, [r5, #24]
 80048f0:	4b04      	ldr	r3, [pc, #16]	; (8004904 <USB_DevInit+0x158>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	61ab      	str	r3, [r5, #24]
 80048f6:	e7ed      	b.n	80048d4 <USB_DevInit+0x128>
 80048f8:	803c3800 	.word	0x803c3800
 80048fc:	02000400 	.word	0x02000400
 8004900:	08010003 	.word	0x08010003
 8004904:	40000004 	.word	0x40000004

08004908 <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
  uint32_t count = 0;
 
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 8004908:	0189      	lsls	r1, r1, #6
 800490a:	f041 0120 	orr.w	r1, r1, #32
 800490e:	6101      	str	r1, [r0, #16]
  uint32_t count = 0;
 8004910:	2300      	movs	r3, #0
 
  do
  {
    if (++count > 200000)
 8004912:	3301      	adds	r3, #1
 8004914:	4a05      	ldr	r2, [pc, #20]	; (800492c <USB_FlushTxFifo+0x24>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d805      	bhi.n	8004926 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800491a:	6902      	ldr	r2, [r0, #16]
 800491c:	f012 0f20 	tst.w	r2, #32
 8004920:	d1f7      	bne.n	8004912 <USB_FlushTxFifo+0xa>
  
  return HAL_OK;
 8004922:	2000      	movs	r0, #0
 8004924:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004926:	2003      	movs	r0, #3
}
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	00030d40 	.word	0x00030d40

08004930 <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004930:	2310      	movs	r3, #16
 8004932:	6103      	str	r3, [r0, #16]
  uint32_t count = 0;
 8004934:	2300      	movs	r3, #0
  
  do
  {
    if (++count > 200000)
 8004936:	3301      	adds	r3, #1
 8004938:	4a05      	ldr	r2, [pc, #20]	; (8004950 <USB_FlushRxFifo+0x20>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d805      	bhi.n	800494a <USB_FlushRxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800493e:	6902      	ldr	r2, [r0, #16]
 8004940:	f012 0f10 	tst.w	r2, #16
 8004944:	d1f7      	bne.n	8004936 <USB_FlushRxFifo+0x6>
  
  return HAL_OK;
 8004946:	2000      	movs	r0, #0
 8004948:	4770      	bx	lr
      return HAL_TIMEOUT;
 800494a:	2003      	movs	r0, #3
}
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	00030d40 	.word	0x00030d40

08004954 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
  USBx_DEVICE->DCFG |= speed;
 8004954:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8004958:	4319      	orrs	r1, r3
 800495a:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  return HAL_OK;
}
 800495e:	2000      	movs	r0, #0
 8004960:	4770      	bx	lr

08004962 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 8004962:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 8004964:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8004968:	f043 0302 	orr.w	r3, r3, #2
 800496c:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3);
 8004970:	2003      	movs	r0, #3
 8004972:	f7fb fe81 	bl	8000678 <HAL_Delay>
  
  return HAL_OK;  
}
 8004976:	2000      	movs	r0, #0
 8004978:	bd08      	pop	{r3, pc}
	...

0800497c <USB_CoreReset>:
  * @param  USBx : Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
 800497c:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000)
 800497e:	3301      	adds	r3, #1
 8004980:	4a0c      	ldr	r2, [pc, #48]	; (80049b4 <USB_CoreReset+0x38>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d811      	bhi.n	80049aa <USB_CoreReset+0x2e>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0);
 8004986:	6902      	ldr	r2, [r0, #16]
 8004988:	2a00      	cmp	r2, #0
 800498a:	daf8      	bge.n	800497e <USB_CoreReset+0x2>
  
  /* Core Soft Reset */
  count = 0;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800498c:	6903      	ldr	r3, [r0, #16]
 800498e:	f043 0301 	orr.w	r3, r3, #1
 8004992:	6103      	str	r3, [r0, #16]
  count = 0;
 8004994:	2300      	movs	r3, #0

  do
  {
    if (++count > 200000)
 8004996:	3301      	adds	r3, #1
 8004998:	4a06      	ldr	r2, [pc, #24]	; (80049b4 <USB_CoreReset+0x38>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d807      	bhi.n	80049ae <USB_CoreReset+0x32>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800499e:	6902      	ldr	r2, [r0, #16]
 80049a0:	f012 0f01 	tst.w	r2, #1
 80049a4:	d1f7      	bne.n	8004996 <USB_CoreReset+0x1a>
  
  return HAL_OK;
 80049a6:	2000      	movs	r0, #0
 80049a8:	4770      	bx	lr
      return HAL_TIMEOUT;
 80049aa:	2003      	movs	r0, #3
 80049ac:	4770      	bx	lr
      return HAL_TIMEOUT;
 80049ae:	2003      	movs	r0, #3
}
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	00030d40 	.word	0x00030d40

080049b8 <AT_N5110LCD_write_buffer>:

	return N5110_OK;
}

static void AT_N5110LCD_write_buffer(AT_N5110_LCD_handle* instance, uint8_t *data, uint32_t size)
{
 80049b8:	b570      	push	{r4, r5, r6, lr}
 80049ba:	4604      	mov	r4, r0
 80049bc:	460d      	mov	r5, r1
 80049be:	4616      	mov	r6, r2
	instance->functions.reset_gpio(instance->pins.csPort, instance->pins.csPin);
 80049c0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80049c2:	6881      	ldr	r1, [r0, #8]
 80049c4:	6840      	ldr	r0, [r0, #4]
 80049c6:	4798      	blx	r3
	instance->functions.spi_transmit(data, size);
 80049c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80049ca:	4631      	mov	r1, r6
 80049cc:	4628      	mov	r0, r5
 80049ce:	4798      	blx	r3
	instance->functions.set_gpio(instance->pins.csPort, instance->pins.csPin);
 80049d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80049d2:	68a1      	ldr	r1, [r4, #8]
 80049d4:	6860      	ldr	r0, [r4, #4]
 80049d6:	4798      	blx	r3
 80049d8:	bd70      	pop	{r4, r5, r6, pc}

080049da <AT_N5110LCD_write_buffer_dma>:
}

static void AT_N5110LCD_write_buffer_dma(AT_N5110_LCD_handle* instance, uint8_t *data, uint32_t size)
{
 80049da:	b510      	push	{r4, lr}
 80049dc:	460c      	mov	r4, r1
	instance->functions.spi_transmit_dma(data, size);
 80049de:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80049e0:	4611      	mov	r1, r2
 80049e2:	4620      	mov	r0, r4
 80049e4:	4798      	blx	r3
 80049e6:	bd10      	pop	{r4, pc}

080049e8 <AT_N5110LCD_set_reset>:
}

static void AT_N5110LCD_set_reset(AT_N5110_LCD_handle* instance)
{
 80049e8:	b508      	push	{r3, lr}
	instance->functions.reset_gpio(instance->pins.RstPort, instance->pins.RstPin);
 80049ea:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80049ec:	6981      	ldr	r1, [r0, #24]
 80049ee:	6940      	ldr	r0, [r0, #20]
 80049f0:	4798      	blx	r3
 80049f2:	bd08      	pop	{r3, pc}

080049f4 <AT_N5110LCD_clear_reset>:
}

static void AT_N5110LCD_clear_reset(AT_N5110_LCD_handle* instance)
{
 80049f4:	b508      	push	{r3, lr}
	instance->functions.set_gpio(instance->pins.RstPort, instance->pins.RstPin);
 80049f6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80049f8:	6981      	ldr	r1, [r0, #24]
 80049fa:	6940      	ldr	r0, [r0, #20]
 80049fc:	4798      	blx	r3
 80049fe:	bd08      	pop	{r3, pc}

08004a00 <AT_N5110LCD_reset_duration>:
}

static void AT_N5110LCD_reset_duration(AT_N5110_LCD_handle* instance, uint32_t duration_ms)
{
 8004a00:	b538      	push	{r3, r4, r5, lr}
 8004a02:	4604      	mov	r4, r0
 8004a04:	460d      	mov	r5, r1
	static uint32_t timeBefore;
	timeBefore = instance->functions.get_time_ms();
 8004a06:	6a03      	ldr	r3, [r0, #32]
 8004a08:	4798      	blx	r3
 8004a0a:	4b08      	ldr	r3, [pc, #32]	; (8004a2c <AT_N5110LCD_reset_duration+0x2c>)
 8004a0c:	6018      	str	r0, [r3, #0]
	AT_N5110LCD_set_reset(instance);
 8004a0e:	4620      	mov	r0, r4
 8004a10:	f7ff ffea 	bl	80049e8 <AT_N5110LCD_set_reset>

	// wait for a while
	while (instance->functions.get_time_ms() - timeBefore < duration_ms );
 8004a14:	6a23      	ldr	r3, [r4, #32]
 8004a16:	4798      	blx	r3
 8004a18:	4b04      	ldr	r3, [pc, #16]	; (8004a2c <AT_N5110LCD_reset_duration+0x2c>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	1ac0      	subs	r0, r0, r3
 8004a1e:	42a8      	cmp	r0, r5
 8004a20:	d3f8      	bcc.n	8004a14 <AT_N5110LCD_reset_duration+0x14>

	AT_N5110LCD_clear_reset(instance);
 8004a22:	4620      	mov	r0, r4
 8004a24:	f7ff ffe6 	bl	80049f4 <AT_N5110LCD_clear_reset>
 8004a28:	bd38      	pop	{r3, r4, r5, pc}
 8004a2a:	bf00      	nop
 8004a2c:	2000015c 	.word	0x2000015c

08004a30 <AT_N5110LCD_send_data>:
}

static void AT_N5110LCD_send_data(AT_N5110_LCD_handle* instance, uint8_t data)
{
 8004a30:	b530      	push	{r4, r5, lr}
 8004a32:	b083      	sub	sp, #12
 8004a34:	4604      	mov	r4, r0
 8004a36:	ad02      	add	r5, sp, #8
 8004a38:	f805 1d01 	strb.w	r1, [r5, #-1]!
	instance->functions.set_gpio(instance->pins.DCPort, instance->pins.DCPin);
 8004a3c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004a3e:	6901      	ldr	r1, [r0, #16]
 8004a40:	68c0      	ldr	r0, [r0, #12]
 8004a42:	4798      	blx	r3
	AT_N5110LCD_write_buffer(instance, &data, 1);
 8004a44:	2201      	movs	r2, #1
 8004a46:	4629      	mov	r1, r5
 8004a48:	4620      	mov	r0, r4
 8004a4a:	f7ff ffb5 	bl	80049b8 <AT_N5110LCD_write_buffer>
}
 8004a4e:	b003      	add	sp, #12
 8004a50:	bd30      	pop	{r4, r5, pc}

08004a52 <AT_N5110LCD_send_command>:

static void AT_N5110LCD_send_command(AT_N5110_LCD_handle* instance, uint8_t data)
{
 8004a52:	b530      	push	{r4, r5, lr}
 8004a54:	b083      	sub	sp, #12
 8004a56:	4604      	mov	r4, r0
 8004a58:	ad02      	add	r5, sp, #8
 8004a5a:	f805 1d01 	strb.w	r1, [r5, #-1]!
	instance->functions.reset_gpio(instance->pins.DCPort, instance->pins.DCPin);
 8004a5e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004a60:	6901      	ldr	r1, [r0, #16]
 8004a62:	68c0      	ldr	r0, [r0, #12]
 8004a64:	4798      	blx	r3
	AT_N5110LCD_write_buffer(instance, &data, 1);
 8004a66:	2201      	movs	r2, #1
 8004a68:	4629      	mov	r1, r5
 8004a6a:	4620      	mov	r0, r4
 8004a6c:	f7ff ffa4 	bl	80049b8 <AT_N5110LCD_write_buffer>
}
 8004a70:	b003      	add	sp, #12
 8004a72:	bd30      	pop	{r4, r5, pc}

08004a74 <AT_N5110LCD_clear>:

static void AT_N5110LCD_clear(AT_N5110_LCD_handle* instance)
{
 8004a74:	b538      	push	{r3, r4, r5, lr}
 8004a76:	4605      	mov	r5, r0
	for(int i=0; i<N5110_TOTAL_ADDR_SIZE; i++)
 8004a78:	2400      	movs	r4, #0
 8004a7a:	e004      	b.n	8004a86 <AT_N5110LCD_clear+0x12>
		AT_N5110LCD_send_data(instance, 0x00);
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	4628      	mov	r0, r5
 8004a80:	f7ff ffd6 	bl	8004a30 <AT_N5110LCD_send_data>
	for(int i=0; i<N5110_TOTAL_ADDR_SIZE; i++)
 8004a84:	3401      	adds	r4, #1
 8004a86:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8004a8a:	dbf7      	blt.n	8004a7c <AT_N5110LCD_clear+0x8>
}
 8004a8c:	bd38      	pop	{r3, r4, r5, pc}

08004a8e <AT_N5110LCD_init_hw>:
{
 8004a8e:	b510      	push	{r4, lr}
 8004a90:	4604      	mov	r4, r0
	AT_N5110LCD_reset_duration(instance, 500);
 8004a92:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004a96:	f7ff ffb3 	bl	8004a00 <AT_N5110LCD_reset_duration>
	AT_N5110LCD_send_command(instance, N5110_FS | N5110_FS_EXTENDED_INST_SET);
 8004a9a:	2121      	movs	r1, #33	; 0x21
 8004a9c:	4620      	mov	r0, r4
 8004a9e:	f7ff ffd8 	bl	8004a52 <AT_N5110LCD_send_command>
	AT_N5110LCD_send_command(instance, N5110_BS | 3);
 8004aa2:	2113      	movs	r1, #19
 8004aa4:	4620      	mov	r0, r4
 8004aa6:	f7ff ffd4 	bl	8004a52 <AT_N5110LCD_send_command>
	AT_N5110LCD_send_command(instance, N5110_SETVOP | 0x3F);
 8004aaa:	21bf      	movs	r1, #191	; 0xbf
 8004aac:	4620      	mov	r0, r4
 8004aae:	f7ff ffd0 	bl	8004a52 <AT_N5110LCD_send_command>
	AT_N5110LCD_send_command(instance, N5110_FS);
 8004ab2:	2120      	movs	r1, #32
 8004ab4:	4620      	mov	r0, r4
 8004ab6:	f7ff ffcc 	bl	8004a52 <AT_N5110LCD_send_command>
	AT_N5110LCD_send_command(instance, N5110_DC | N5110_DC_NORMAL_MODE);
 8004aba:	210c      	movs	r1, #12
 8004abc:	4620      	mov	r0, r4
 8004abe:	f7ff ffc8 	bl	8004a52 <AT_N5110LCD_send_command>
	AT_N5110LCD_clear(instance);
 8004ac2:	4620      	mov	r0, r4
 8004ac4:	f7ff ffd6 	bl	8004a74 <AT_N5110LCD_clear>
 8004ac8:	bd10      	pop	{r4, pc}

08004aca <AT_N5110LCD_open>:
{
 8004aca:	b508      	push	{r3, lr}
	AT_N5110_LCD_handle *instance = (AT_N5110_LCD_handle*)malloc(sizeof (AT_N5110_LCD_handle));
 8004acc:	2034      	movs	r0, #52	; 0x34
 8004ace:	f000 fdd7 	bl	8005680 <malloc>
}
 8004ad2:	bd08      	pop	{r3, pc}

08004ad4 <AT_N5110LCD_init>:
	if (instance != NULL)
 8004ad4:	b168      	cbz	r0, 8004af2 <AT_N5110LCD_init+0x1e>
{
 8004ad6:	b510      	push	{r4, lr}
 8004ad8:	4604      	mov	r4, r0
		instance->frameBuffer = (uint8_t*)0x30000000;
 8004ada:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 8004ade:	6020      	str	r0, [r4, #0]
		memset(instance->frameBuffer, 0, N5110_TOTAL_ADDR_SIZE);
 8004ae0:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8004ae4:	2100      	movs	r1, #0
 8004ae6:	f000 fdd3 	bl	8005690 <memset>
		AT_N5110LCD_init_hw(instance);
 8004aea:	4620      	mov	r0, r4
 8004aec:	f7ff ffcf 	bl	8004a8e <AT_N5110LCD_init_hw>
 8004af0:	bd10      	pop	{r4, pc}
 8004af2:	4770      	bx	lr

08004af4 <AT_N5110LCD_update_display>:
{
 8004af4:	b510      	push	{r4, lr}
 8004af6:	4604      	mov	r4, r0
	AT_N5110LCD_send_command(instance, N5110_SETY | 0);
 8004af8:	2140      	movs	r1, #64	; 0x40
 8004afa:	f7ff ffaa 	bl	8004a52 <AT_N5110LCD_send_command>
	AT_N5110LCD_send_command(instance, N5110_SETX | 0);
 8004afe:	2180      	movs	r1, #128	; 0x80
 8004b00:	4620      	mov	r0, r4
 8004b02:	f7ff ffa6 	bl	8004a52 <AT_N5110LCD_send_command>
	instance->functions.set_gpio(instance->pins.DCPort, instance->pins.DCPin);
 8004b06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b08:	6921      	ldr	r1, [r4, #16]
 8004b0a:	68e0      	ldr	r0, [r4, #12]
 8004b0c:	4798      	blx	r3
	AT_N5110LCD_write_buffer_dma(instance, instance->frameBuffer, N5110_TOTAL_ADDR_SIZE);
 8004b0e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8004b12:	6821      	ldr	r1, [r4, #0]
 8004b14:	4620      	mov	r0, r4
 8004b16:	f7ff ff60 	bl	80049da <AT_N5110LCD_write_buffer_dma>
 8004b1a:	bd10      	pop	{r4, pc}

08004b1c <AT_N5110LCD_get_pixel>:
	if (X > N5110_WIDTH_PIXELS)
 8004b1c:	2954      	cmp	r1, #84	; 0x54
 8004b1e:	d811      	bhi.n	8004b44 <AT_N5110LCD_get_pixel+0x28>
	if (Y > N5110_HEIGHT_PIXELS)
 8004b20:	2a30      	cmp	r2, #48	; 0x30
 8004b22:	d812      	bhi.n	8004b4a <AT_N5110LCD_get_pixel+0x2e>
{
 8004b24:	b430      	push	{r4, r5}
	*pixel = (instance->frameBuffer[X + (Y/8) * N5110_X_ADDR_LENGTH] & (1 << (Y%8)));
 8004b26:	6804      	ldr	r4, [r0, #0]
 8004b28:	08d0      	lsrs	r0, r2, #3
 8004b2a:	2554      	movs	r5, #84	; 0x54
 8004b2c:	fb05 1100 	mla	r1, r5, r0, r1
 8004b30:	5661      	ldrsb	r1, [r4, r1]
 8004b32:	f002 0207 	and.w	r2, r2, #7
 8004b36:	2001      	movs	r0, #1
 8004b38:	fa00 f202 	lsl.w	r2, r0, r2
 8004b3c:	400a      	ands	r2, r1
 8004b3e:	701a      	strb	r2, [r3, #0]
}
 8004b40:	bc30      	pop	{r4, r5}
 8004b42:	4770      	bx	lr
		return N5110_OUT_OF_FRAMEBUFFER_X;
 8004b44:	f06f 0001 	mvn.w	r0, #1
 8004b48:	4770      	bx	lr
		return N5110_OUT_OF_FRAMEBUFFER_Y;
 8004b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b4e:	4770      	bx	lr

08004b50 <AT_N5110LCD_set_pixel>:
	if (X > N5110_WIDTH_PIXELS)
 8004b50:	2954      	cmp	r1, #84	; 0x54
 8004b52:	d812      	bhi.n	8004b7a <AT_N5110LCD_set_pixel+0x2a>
	if (Y > N5110_HEIGHT_PIXELS)
 8004b54:	2a30      	cmp	r2, #48	; 0x30
 8004b56:	d813      	bhi.n	8004b80 <AT_N5110LCD_set_pixel+0x30>
{
 8004b58:	b410      	push	{r4}
	instance->frameBuffer[X + (Y/8) * N5110_X_ADDR_LENGTH] |= 1 << (Y%8);
 8004b5a:	6804      	ldr	r4, [r0, #0]
 8004b5c:	08d3      	lsrs	r3, r2, #3
 8004b5e:	2054      	movs	r0, #84	; 0x54
 8004b60:	fb00 1103 	mla	r1, r0, r3, r1
 8004b64:	f002 0207 	and.w	r2, r2, #7
 8004b68:	2001      	movs	r0, #1
 8004b6a:	fa00 f202 	lsl.w	r2, r0, r2
 8004b6e:	5c63      	ldrb	r3, [r4, r1]
 8004b70:	431a      	orrs	r2, r3
 8004b72:	5462      	strb	r2, [r4, r1]
}
 8004b74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b78:	4770      	bx	lr
		return N5110_OUT_OF_FRAMEBUFFER_X;
 8004b7a:	f06f 0001 	mvn.w	r0, #1
 8004b7e:	4770      	bx	lr
		return N5110_OUT_OF_FRAMEBUFFER_Y;
 8004b80:	f04f 30ff 	mov.w	r0, #4294967295
 8004b84:	4770      	bx	lr

08004b86 <AT_N5110LCD_clear_pixel>:
	if (X > N5110_WIDTH_PIXELS)
 8004b86:	2954      	cmp	r1, #84	; 0x54
 8004b88:	d813      	bhi.n	8004bb2 <AT_N5110LCD_clear_pixel+0x2c>
	if (Y > N5110_HEIGHT_PIXELS)
 8004b8a:	2a30      	cmp	r2, #48	; 0x30
 8004b8c:	d814      	bhi.n	8004bb8 <AT_N5110LCD_clear_pixel+0x32>
{
 8004b8e:	b410      	push	{r4}
	instance->frameBuffer[X + (Y/8) * N5110_X_ADDR_LENGTH] &= ~(1 << (Y%8));
 8004b90:	6804      	ldr	r4, [r0, #0]
 8004b92:	08d3      	lsrs	r3, r2, #3
 8004b94:	2054      	movs	r0, #84	; 0x54
 8004b96:	fb00 1103 	mla	r1, r0, r3, r1
 8004b9a:	f002 0207 	and.w	r2, r2, #7
 8004b9e:	2001      	movs	r0, #1
 8004ba0:	fa00 f202 	lsl.w	r2, r0, r2
 8004ba4:	5c63      	ldrb	r3, [r4, r1]
 8004ba6:	ea23 0202 	bic.w	r2, r3, r2
 8004baa:	5462      	strb	r2, [r4, r1]
}
 8004bac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004bb0:	4770      	bx	lr
		return N5110_OUT_OF_FRAMEBUFFER_X;
 8004bb2:	f06f 0001 	mvn.w	r0, #1
 8004bb6:	4770      	bx	lr
		return N5110_OUT_OF_FRAMEBUFFER_Y;
 8004bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bbc:	4770      	bx	lr

08004bbe <AT_N5110LCD_draw_pixel>:
{
 8004bbe:	b508      	push	{r3, lr}
	if (pixel > 0)
 8004bc0:	b913      	cbnz	r3, 8004bc8 <AT_N5110LCD_draw_pixel+0xa>
		return AT_N5110LCD_clear_pixel(instance, X, Y);
 8004bc2:	f7ff ffe0 	bl	8004b86 <AT_N5110LCD_clear_pixel>
}
 8004bc6:	bd08      	pop	{r3, pc}
		return AT_N5110LCD_set_pixel(instance, X, Y);
 8004bc8:	f7ff ffc2 	bl	8004b50 <AT_N5110LCD_set_pixel>
 8004bcc:	bd08      	pop	{r3, pc}

08004bce <AT_N5110LCD_print_char>:
{
 8004bce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
	if (X > N5110_WIDTH_PIXELS)
 8004bd8:	2b54      	cmp	r3, #84	; 0x54
 8004bda:	dc42      	bgt.n	8004c62 <AT_N5110LCD_print_char+0x94>
	if (Y > N5110_HEIGHT_PIXELS)
 8004bdc:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 8004be0:	dc42      	bgt.n	8004c68 <AT_N5110LCD_print_char+0x9a>
 8004be2:	461f      	mov	r7, r3
 8004be4:	4693      	mov	fp, r2
 8004be6:	468a      	mov	sl, r1
 8004be8:	9001      	str	r0, [sp, #4]
 8004bea:	2600      	movs	r6, #0
	for (int k=0; k<font->Height; k++)
 8004bec:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 8004bf0:	429e      	cmp	r6, r3
 8004bf2:	da34      	bge.n	8004c5e <AT_N5110LCD_print_char+0x90>
 8004bf4:	2500      	movs	r5, #0
 8004bf6:	e000      	b.n	8004bfa <AT_N5110LCD_print_char+0x2c>
		for (int s=0; s<INTEGER_DIV_CEIL(font->Width, 8); s++)
 8004bf8:	3501      	adds	r5, #1
 8004bfa:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8004bfe:	f012 0307 	ands.w	r3, r2, #7
 8004c02:	bf18      	it	ne
 8004c04:	2301      	movne	r3, #1
 8004c06:	eb03 03d2 	add.w	r3, r3, r2, lsr #3
 8004c0a:	429d      	cmp	r5, r3
 8004c0c:	da25      	bge.n	8004c5a <AT_N5110LCD_print_char+0x8c>
			uint8_t sutunx = font->table[INTEGER_DIV_CEIL(font->Width, 8) * font->Height * (character - 0x20) + k*INTEGER_DIV_CEIL(font->Width, 8) + s];
 8004c0e:	f8da 2000 	ldr.w	r2, [sl]
 8004c12:	f8ba 1006 	ldrh.w	r1, [sl, #6]
 8004c16:	fb01 f103 	mul.w	r1, r1, r3
 8004c1a:	f1ab 0020 	sub.w	r0, fp, #32
 8004c1e:	fb03 f306 	mul.w	r3, r3, r6
 8004c22:	fb00 3301 	mla	r3, r0, r1, r3
 8004c26:	442b      	add	r3, r5
 8004c28:	f812 8003 	ldrb.w	r8, [r2, r3]
			for (int l=0; l<8; l++)
 8004c2c:	2400      	movs	r4, #0
 8004c2e:	2c07      	cmp	r4, #7
 8004c30:	dce2      	bgt.n	8004bf8 <AT_N5110LCD_print_char+0x2a>
				if (AT_N5110LCD_draw_pixel(instance, X + s*8 + l, Y + k, sutunx & (0x80>>l)) == N5110_OUT_OF_FRAMEBUFFER_Y)
 8004c32:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 8004c36:	2380      	movs	r3, #128	; 0x80
 8004c38:	4123      	asrs	r3, r4
 8004c3a:	eb09 0206 	add.w	r2, r9, r6
 8004c3e:	fa54 f181 	uxtab	r1, r4, r1
 8004c42:	ea03 0308 	and.w	r3, r3, r8
 8004c46:	b2d2      	uxtb	r2, r2
 8004c48:	b2c9      	uxtb	r1, r1
 8004c4a:	9801      	ldr	r0, [sp, #4]
 8004c4c:	f7ff ffb7 	bl	8004bbe <AT_N5110LCD_draw_pixel>
 8004c50:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004c54:	d00b      	beq.n	8004c6e <AT_N5110LCD_print_char+0xa0>
			for (int l=0; l<8; l++)
 8004c56:	3401      	adds	r4, #1
 8004c58:	e7e9      	b.n	8004c2e <AT_N5110LCD_print_char+0x60>
	for (int k=0; k<font->Height; k++)
 8004c5a:	3601      	adds	r6, #1
 8004c5c:	e7c6      	b.n	8004bec <AT_N5110LCD_print_char+0x1e>
	return N5110_OK;
 8004c5e:	2001      	movs	r0, #1
 8004c60:	e006      	b.n	8004c70 <AT_N5110LCD_print_char+0xa2>
		return N5110_OUT_OF_FRAMEBUFFER_X;
 8004c62:	f06f 0001 	mvn.w	r0, #1
 8004c66:	e003      	b.n	8004c70 <AT_N5110LCD_print_char+0xa2>
		return N5110_OUT_OF_FRAMEBUFFER_Y;
 8004c68:	f04f 30ff 	mov.w	r0, #4294967295
 8004c6c:	e000      	b.n	8004c70 <AT_N5110LCD_print_char+0xa2>
					return N5110_OK;
 8004c6e:	2001      	movs	r0, #1
}
 8004c70:	b003      	add	sp, #12
 8004c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004c76 <AT_N5110LCD_print_string>:
{
 8004c76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8004c80:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
	if (X > N5110_WIDTH_PIXELS)
 8004c82:	f1b9 0f54 	cmp.w	r9, #84	; 0x54
 8004c86:	dc1a      	bgt.n	8004cbe <AT_N5110LCD_print_string+0x48>
	if (Y > N5110_HEIGHT_PIXELS)
 8004c88:	2f30      	cmp	r7, #48	; 0x30
 8004c8a:	dc1b      	bgt.n	8004cc4 <AT_N5110LCD_print_string+0x4e>
 8004c8c:	461e      	mov	r6, r3
 8004c8e:	4690      	mov	r8, r2
 8004c90:	460d      	mov	r5, r1
 8004c92:	4682      	mov	sl, r0
 8004c94:	2400      	movs	r4, #0
	for(int i=0; i<size; i++)
 8004c96:	42b4      	cmp	r4, r6
 8004c98:	d20d      	bcs.n	8004cb6 <AT_N5110LCD_print_string+0x40>
		N5110_Status result = AT_N5110LCD_print_char(instance, font, text[i], X + font->Width*i, Y);
 8004c9a:	f818 2004 	ldrb.w	r2, [r8, r4]
 8004c9e:	88ab      	ldrh	r3, [r5, #4]
 8004ca0:	9700      	str	r7, [sp, #0]
 8004ca2:	fb03 9304 	mla	r3, r3, r4, r9
 8004ca6:	4629      	mov	r1, r5
 8004ca8:	4650      	mov	r0, sl
 8004caa:	f7ff ff90 	bl	8004bce <AT_N5110LCD_print_char>
		if (result != N5110_OK)
 8004cae:	2801      	cmp	r0, #1
 8004cb0:	d102      	bne.n	8004cb8 <AT_N5110LCD_print_string+0x42>
	for(int i=0; i<size; i++)
 8004cb2:	3401      	adds	r4, #1
 8004cb4:	e7ef      	b.n	8004c96 <AT_N5110LCD_print_string+0x20>
	return N5110_OK;
 8004cb6:	2001      	movs	r0, #1
}
 8004cb8:	b002      	add	sp, #8
 8004cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return N5110_OUT_OF_FRAMEBUFFER_X;
 8004cbe:	f06f 0001 	mvn.w	r0, #1
 8004cc2:	e7f9      	b.n	8004cb8 <AT_N5110LCD_print_string+0x42>
		return N5110_OUT_OF_FRAMEBUFFER_Y;
 8004cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cc8:	e7f6      	b.n	8004cb8 <AT_N5110LCD_print_string+0x42>
	...

08004ccc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8004ccc:	b500      	push	{lr}
 8004cce:	b083      	sub	sp, #12
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004cd0:	4b0b      	ldr	r3, [pc, #44]	; (8004d00 <MX_DMA_Init+0x34>)
 8004cd2:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8004cd6:	f042 0201 	orr.w	r2, r2, #1
 8004cda:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8004cde:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004ce2:	f003 0301 	and.w	r3, r3, #1
 8004ce6:	9301      	str	r3, [sp, #4]
 8004ce8:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8004cea:	2200      	movs	r2, #0
 8004cec:	4611      	mov	r1, r2
 8004cee:	200b      	movs	r0, #11
 8004cf0:	f7fb fcf2 	bl	80006d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8004cf4:	200b      	movs	r0, #11
 8004cf6:	f7fb fd1f 	bl	8000738 <HAL_NVIC_EnableIRQ>

}
 8004cfa:	b003      	add	sp, #12
 8004cfc:	f85d fb04 	ldr.w	pc, [sp], #4
 8004d00:	58024400 	.word	0x58024400

08004d04 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8004d04:	b510      	push	{r4, lr}
 8004d06:	b082      	sub	sp, #8
   uint8_t MACAddr[6] ;

  heth.Instance = ETH;
 8004d08:	4818      	ldr	r0, [pc, #96]	; (8004d6c <MX_ETH_Init+0x68>)
 8004d0a:	4b19      	ldr	r3, [pc, #100]	; (8004d70 <MX_ETH_Init+0x6c>)
 8004d0c:	6003      	str	r3, [r0, #0]
  MACAddr[0] = 0x00;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	f88d 3000 	strb.w	r3, [sp]
  MACAddr[1] = 0x80;
 8004d14:	2280      	movs	r2, #128	; 0x80
 8004d16:	f88d 2001 	strb.w	r2, [sp, #1]
  MACAddr[2] = 0xE1;
 8004d1a:	22e1      	movs	r2, #225	; 0xe1
 8004d1c:	f88d 2002 	strb.w	r2, [sp, #2]
  MACAddr[3] = 0x00;
 8004d20:	f88d 3003 	strb.w	r3, [sp, #3]
  MACAddr[4] = 0x00;
 8004d24:	f88d 3004 	strb.w	r3, [sp, #4]
  MACAddr[5] = 0x00;
 8004d28:	f88d 3005 	strb.w	r3, [sp, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8004d2c:	f8c0 d004 	str.w	sp, [r0, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004d30:	2301      	movs	r3, #1
 8004d32:	7203      	strb	r3, [r0, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004d34:	4b0f      	ldr	r3, [pc, #60]	; (8004d74 <MX_ETH_Init+0x70>)
 8004d36:	60c3      	str	r3, [r0, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004d38:	4b0f      	ldr	r3, [pc, #60]	; (8004d78 <MX_ETH_Init+0x74>)
 8004d3a:	6103      	str	r3, [r0, #16]
  heth.Init.RxBuffLen = 1524;
 8004d3c:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8004d40:	6143      	str	r3, [r0, #20]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8004d42:	f7fc fbd9 	bl	80014f8 <HAL_ETH_Init>
 8004d46:	b960      	cbnz	r0, 8004d62 <MX_ETH_Init+0x5e>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004d48:	4c0c      	ldr	r4, [pc, #48]	; (8004d7c <MX_ETH_Init+0x78>)
 8004d4a:	2234      	movs	r2, #52	; 0x34
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	4620      	mov	r0, r4
 8004d50:	f000 fc9e 	bl	8005690 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004d54:	2321      	movs	r3, #33	; 0x21
 8004d56:	6023      	str	r3, [r4, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004d58:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8004d5c:	6163      	str	r3, [r4, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;

}
 8004d5e:	b002      	add	sp, #8
 8004d60:	bd10      	pop	{r4, pc}
    _Error_Handler(__FILE__, __LINE__);
 8004d62:	2164      	movs	r1, #100	; 0x64
 8004d64:	4806      	ldr	r0, [pc, #24]	; (8004d80 <MX_ETH_Init+0x7c>)
 8004d66:	f000 f95b 	bl	8005020 <_Error_Handler>
 8004d6a:	e7ed      	b.n	8004d48 <MX_ETH_Init+0x44>
 8004d6c:	2000016c 	.word	0x2000016c
 8004d70:	40028000 	.word	0x40028000
 8004d74:	200000dc 	.word	0x200000dc
 8004d78:	2000007c 	.word	0x2000007c
 8004d7c:	200001d4 	.word	0x200001d4
 8004d80:	08007b74 	.word	0x08007b74

08004d84 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(ethHandle->Instance==ETH)
 8004d84:	6802      	ldr	r2, [r0, #0]
 8004d86:	4b2d      	ldr	r3, [pc, #180]	; (8004e3c <HAL_ETH_MspInit+0xb8>)
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d000      	beq.n	8004d8e <HAL_ETH_MspInit+0xa>
 8004d8c:	4770      	bx	lr
{
 8004d8e:	b570      	push	{r4, r5, r6, lr}
 8004d90:	b088      	sub	sp, #32
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8004d92:	4b2b      	ldr	r3, [pc, #172]	; (8004e40 <HAL_ETH_MspInit+0xbc>)
 8004d94:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8004d98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d9c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8004da0:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8004da4:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8004da8:	9200      	str	r2, [sp, #0]
 8004daa:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8004dac:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8004db0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004db4:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8004db8:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8004dbc:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8004dc0:	9201      	str	r2, [sp, #4]
 8004dc2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8004dc4:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8004dc8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004dcc:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8004dd0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dd8:	9302      	str	r3, [sp, #8]
 8004dda:	9b02      	ldr	r3, [sp, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004ddc:	2332      	movs	r3, #50	; 0x32
 8004dde:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004de0:	2602      	movs	r6, #2
 8004de2:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004de4:	2400      	movs	r4, #0
 8004de6:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004de8:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004dea:	250b      	movs	r5, #11
 8004dec:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004dee:	a903      	add	r1, sp, #12
 8004df0:	4814      	ldr	r0, [pc, #80]	; (8004e44 <HAL_ETH_MspInit+0xc0>)
 8004df2:	f7fc fc1f 	bl	8001634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004df6:	2386      	movs	r3, #134	; 0x86
 8004df8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dfa:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dfc:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dfe:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004e00:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e02:	a903      	add	r1, sp, #12
 8004e04:	4810      	ldr	r0, [pc, #64]	; (8004e48 <HAL_ETH_MspInit+0xc4>)
 8004e06:	f7fc fc15 	bl	8001634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004e0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e0e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e10:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e12:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e14:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004e16:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004e18:	a903      	add	r1, sp, #12
 8004e1a:	480c      	ldr	r0, [pc, #48]	; (8004e4c <HAL_ETH_MspInit+0xc8>)
 8004e1c:	f7fc fc0a 	bl	8001634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004e20:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004e24:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e26:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e28:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e2a:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004e2c:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004e2e:	a903      	add	r1, sp, #12
 8004e30:	4807      	ldr	r0, [pc, #28]	; (8004e50 <HAL_ETH_MspInit+0xcc>)
 8004e32:	f7fc fbff 	bl	8001634 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004e36:	b008      	add	sp, #32
 8004e38:	bd70      	pop	{r4, r5, r6, pc}
 8004e3a:	bf00      	nop
 8004e3c:	40028000 	.word	0x40028000
 8004e40:	58024400 	.word	0x58024400
 8004e44:	58020800 	.word	0x58020800
 8004e48:	58020000 	.word	0x58020000
 8004e4c:	58020400 	.word	0x58020400
 8004e50:	58021800 	.word	0x58021800

08004e54 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e58:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e5a:	4b5b      	ldr	r3, [pc, #364]	; (8004fc8 <MX_GPIO_Init+0x174>)
 8004e5c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004e60:	f042 0204 	orr.w	r2, r2, #4
 8004e64:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004e68:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004e6c:	f002 0204 	and.w	r2, r2, #4
 8004e70:	9201      	str	r2, [sp, #4]
 8004e72:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004e74:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004e78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e7c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004e80:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004e84:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8004e88:	9202      	str	r2, [sp, #8]
 8004e8a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e8c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004e90:	f042 0201 	orr.w	r2, r2, #1
 8004e94:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004e98:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004e9c:	f002 0201 	and.w	r2, r2, #1
 8004ea0:	9203      	str	r2, [sp, #12]
 8004ea2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ea4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004ea8:	f042 0202 	orr.w	r2, r2, #2
 8004eac:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004eb0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004eb4:	f002 0202 	and.w	r2, r2, #2
 8004eb8:	9204      	str	r2, [sp, #16]
 8004eba:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ebc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004ec0:	f042 0208 	orr.w	r2, r2, #8
 8004ec4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004ec8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004ecc:	f002 0208 	and.w	r2, r2, #8
 8004ed0:	9205      	str	r2, [sp, #20]
 8004ed2:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004ed4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004ed8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004edc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004ee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee8:	9306      	str	r3, [sp, #24]
 8004eea:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(N5110_nCS_GPIO_Port, N5110_nCS_Pin, GPIO_PIN_RESET);
 8004eec:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 8004fd8 <MX_GPIO_Init+0x184>
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	2110      	movs	r1, #16
 8004ef4:	4658      	mov	r0, fp
 8004ef6:	f7fc fc93 	bl	8001820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8004efa:	4e34      	ldr	r6, [pc, #208]	; (8004fcc <MX_GPIO_Init+0x178>)
 8004efc:	2200      	movs	r2, #0
 8004efe:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8004f02:	4630      	mov	r0, r6
 8004f04:	f7fc fc8c 	bl	8001820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8004f08:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004fdc <MX_GPIO_Init+0x188>
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	2140      	movs	r1, #64	; 0x40
 8004f10:	4640      	mov	r0, r8
 8004f12:	f7fc fc85 	bl	8001820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(N5110_DATA_nCMD_GPIO_Port, N5110_DATA_nCMD_Pin, GPIO_PIN_SET);
 8004f16:	4f2e      	ldr	r7, [pc, #184]	; (8004fd0 <MX_GPIO_Init+0x17c>)
 8004f18:	2201      	movs	r2, #1
 8004f1a:	2180      	movs	r1, #128	; 0x80
 8004f1c:	4638      	mov	r0, r7
 8004f1e:	f7fc fc7f 	bl	8001820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(N5110_nRST_GPIO_Port, N5110_nRST_Pin, GPIO_PIN_SET);
 8004f22:	2201      	movs	r2, #1
 8004f24:	2110      	movs	r1, #16
 8004f26:	4630      	mov	r0, r6
 8004f28:	f7fc fc7a 	bl	8001820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8004f2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f30:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004f32:	4b28      	ldr	r3, [pc, #160]	; (8004fd4 <MX_GPIO_Init+0x180>)
 8004f34:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f36:	2400      	movs	r4, #0
 8004f38:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8004f3a:	a907      	add	r1, sp, #28
 8004f3c:	4638      	mov	r0, r7
 8004f3e:	f7fc fb79 	bl	8001634 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = N5110_nCS_Pin;
 8004f42:	f04f 0a10 	mov.w	sl, #16
 8004f46:	f8cd a01c 	str.w	sl, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f4a:	2501      	movs	r5, #1
 8004f4c:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f4e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f50:	f04f 0903 	mov.w	r9, #3
 8004f54:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  HAL_GPIO_Init(N5110_nCS_GPIO_Port, &GPIO_InitStruct);
 8004f58:	a907      	add	r1, sp, #28
 8004f5a:	4658      	mov	r0, fp
 8004f5c:	f7fc fb6a 	bl	8001634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8004f60:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8004f64:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f66:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f68:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f6a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f6c:	a907      	add	r1, sp, #28
 8004f6e:	4630      	mov	r0, r6
 8004f70:	f7fc fb60 	bl	8001634 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8004f74:	2340      	movs	r3, #64	; 0x40
 8004f76:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f78:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f7a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f7c:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8004f7e:	a907      	add	r1, sp, #28
 8004f80:	4640      	mov	r0, r8
 8004f82:	f7fc fb57 	bl	8001634 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8004f86:	f04f 0b80 	mov.w	fp, #128	; 0x80
 8004f8a:	f8cd b01c 	str.w	fp, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f8e:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f90:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8004f92:	a907      	add	r1, sp, #28
 8004f94:	4640      	mov	r0, r8
 8004f96:	f7fc fb4d 	bl	8001634 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = N5110_DATA_nCMD_Pin;
 8004f9a:	f8cd b01c 	str.w	fp, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f9e:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fa0:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fa2:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(N5110_DATA_nCMD_GPIO_Port, &GPIO_InitStruct);
 8004fa4:	a907      	add	r1, sp, #28
 8004fa6:	4638      	mov	r0, r7
 8004fa8:	f7fc fb44 	bl	8001634 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = N5110_nRST_Pin;
 8004fac:	f8cd a01c 	str.w	sl, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fb0:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fb2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fb4:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  HAL_GPIO_Init(N5110_nRST_GPIO_Port, &GPIO_InitStruct);
 8004fb8:	a907      	add	r1, sp, #28
 8004fba:	4630      	mov	r0, r6
 8004fbc:	f7fc fb3a 	bl	8001634 <HAL_GPIO_Init>

}
 8004fc0:	b00d      	add	sp, #52	; 0x34
 8004fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fc6:	bf00      	nop
 8004fc8:	58024400 	.word	0x58024400
 8004fcc:	58020400 	.word	0x58020400
 8004fd0:	58020800 	.word	0x58020800
 8004fd4:	11110000 	.word	0x11110000
 8004fd8:	58020000 	.word	0x58020000
 8004fdc:	58021800 	.word	0x58021800

08004fe0 <GPIO_ResetPin>:
	}
}
*/

void GPIO_ResetPin(void* port, uint32_t pin)
{
 8004fe0:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(port, pin, 0);
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	b289      	uxth	r1, r1
 8004fe6:	f7fc fc1b 	bl	8001820 <HAL_GPIO_WritePin>
 8004fea:	bd08      	pop	{r3, pc}

08004fec <GPIO_SetPin>:
}
void GPIO_SetPin(void* port, uint32_t pin)
{
 8004fec:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(port, pin, 1);
 8004fee:	2201      	movs	r2, #1
 8004ff0:	b289      	uxth	r1, r1
 8004ff2:	f7fc fc15 	bl	8001820 <HAL_GPIO_WritePin>
 8004ff6:	bd08      	pop	{r3, pc}

08004ff8 <SPI_Transmit>:
}
void SPI_Transmit(uint8_t* data, uint32_t length)
{
 8004ff8:	b508      	push	{r3, lr}
	HAL_SPI_Transmit(&hspi1, data, length, 10);
 8004ffa:	230a      	movs	r3, #10
 8004ffc:	b28a      	uxth	r2, r1
 8004ffe:	4601      	mov	r1, r0
 8005000:	4801      	ldr	r0, [pc, #4]	; (8005008 <SPI_Transmit+0x10>)
 8005002:	f7fe fa6f 	bl	80034e4 <HAL_SPI_Transmit>
 8005006:	bd08      	pop	{r3, pc}
 8005008:	20000208 	.word	0x20000208

0800500c <SPI_Transmit_DMA>:
}
void SPI_Transmit_DMA(uint8_t* data, uint32_t length)
{
 800500c:	b508      	push	{r3, lr}
	HAL_SPI_Transmit_DMA(&hspi1, data, length);
 800500e:	b28a      	uxth	r2, r1
 8005010:	4601      	mov	r1, r0
 8005012:	4802      	ldr	r0, [pc, #8]	; (800501c <SPI_Transmit_DMA+0x10>)
 8005014:	f7fe fbbe 	bl	8003794 <HAL_SPI_Transmit_DMA>
 8005018:	bd08      	pop	{r3, pc}
 800501a:	bf00      	nop
 800501c:	20000208 	.word	0x20000208

08005020 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8005020:	e7fe      	b.n	8005020 <_Error_Handler>
	...

08005024 <SystemClock_Config>:
{
 8005024:	b500      	push	{lr}
 8005026:	b0cd      	sub	sp, #308	; 0x134
  MODIFY_REG(PWR->CR3, PWR_CR3_SCUEN, 0);
 8005028:	4b39      	ldr	r3, [pc, #228]	; (8005110 <SystemClock_Config+0xec>)
 800502a:	68da      	ldr	r2, [r3, #12]
 800502c:	f022 0204 	bic.w	r2, r2, #4
 8005030:	60da      	str	r2, [r3, #12]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005032:	2200      	movs	r2, #0
 8005034:	9201      	str	r2, [sp, #4]
 8005036:	699a      	ldr	r2, [r3, #24]
 8005038:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800503c:	619a      	str	r2, [r3, #24]
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005044:	9301      	str	r3, [sp, #4]
 8005046:	9b01      	ldr	r3, [sp, #4]
  while ((PWR->D3CR & (PWR_D3CR_VOSRDY)) != PWR_D3CR_VOSRDY) 
 8005048:	4b31      	ldr	r3, [pc, #196]	; (8005110 <SystemClock_Config+0xec>)
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8005050:	d0fa      	beq.n	8005048 <SystemClock_Config+0x24>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8005052:	2322      	movs	r3, #34	; 0x22
 8005054:	9339      	str	r3, [sp, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8005056:	2301      	movs	r3, #1
 8005058:	933c      	str	r3, [sp, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800505a:	2210      	movs	r2, #16
 800505c:	923d      	str	r2, [sp, #244]	; 0xf4
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800505e:	933f      	str	r3, [sp, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005060:	2302      	movs	r3, #2
 8005062:	9342      	str	r3, [sp, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005064:	2200      	movs	r2, #0
 8005066:	9243      	str	r2, [sp, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 32;
 8005068:	2120      	movs	r1, #32
 800506a:	9144      	str	r1, [sp, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 400;
 800506c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005070:	9145      	str	r1, [sp, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8005072:	9346      	str	r3, [sp, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005074:	9347      	str	r3, [sp, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005076:	9348      	str	r3, [sp, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8005078:	2304      	movs	r3, #4
 800507a:	9349      	str	r3, [sp, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800507c:	924a      	str	r2, [sp, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800507e:	924b      	str	r2, [sp, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005080:	a839      	add	r0, sp, #228	; 0xe4
 8005082:	f7fc fc73 	bl	800196c <HAL_RCC_OscConfig>
 8005086:	2800      	cmp	r0, #0
 8005088:	d133      	bne.n	80050f2 <SystemClock_Config+0xce>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800508a:	233f      	movs	r3, #63	; 0x3f
 800508c:	9331      	str	r3, [sp, #196]	; 0xc4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800508e:	2303      	movs	r3, #3
 8005090:	9332      	str	r3, [sp, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8005092:	2300      	movs	r3, #0
 8005094:	9333      	str	r3, [sp, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8005096:	2308      	movs	r3, #8
 8005098:	9334      	str	r3, [sp, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800509a:	2340      	movs	r3, #64	; 0x40
 800509c:	9335      	str	r3, [sp, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800509e:	9336      	str	r3, [sp, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80050a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050a4:	9237      	str	r2, [sp, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80050a6:	9338      	str	r3, [sp, #224]	; 0xe0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80050a8:	2102      	movs	r1, #2
 80050aa:	a831      	add	r0, sp, #196	; 0xc4
 80050ac:	f7fd f80a 	bl	80020c4 <HAL_RCC_ClockConfig>
 80050b0:	bb18      	cbnz	r0, 80050fa <SystemClock_Config+0xd6>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_SPI1
 80050b2:	4b18      	ldr	r3, [pc, #96]	; (8005114 <SystemClock_Config+0xf0>)
 80050b4:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80050b6:	2300      	movs	r3, #0
 80050b8:	9319      	str	r3, [sp, #100]	; 0x64
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80050ba:	931f      	str	r3, [sp, #124]	; 0x7c
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80050bc:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80050c0:	9323      	str	r3, [sp, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80050c2:	a802      	add	r0, sp, #8
 80050c4:	f7fd fa24 	bl	8002510 <HAL_RCCEx_PeriphCLKConfig>
 80050c8:	b9e0      	cbnz	r0, 8005104 <SystemClock_Config+0xe0>
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80050ca:	4b13      	ldr	r3, [pc, #76]	; (8005118 <SystemClock_Config+0xf4>)
 80050cc:	6818      	ldr	r0, [r3, #0]
 80050ce:	4b13      	ldr	r3, [pc, #76]	; (800511c <SystemClock_Config+0xf8>)
 80050d0:	fba3 3000 	umull	r3, r0, r3, r0
 80050d4:	0980      	lsrs	r0, r0, #6
 80050d6:	f7fb fb3d 	bl	8000754 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80050da:	2004      	movs	r0, #4
 80050dc:	f7fb fb50 	bl	8000780 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80050e0:	2200      	movs	r2, #0
 80050e2:	4611      	mov	r1, r2
 80050e4:	f04f 30ff 	mov.w	r0, #4294967295
 80050e8:	f7fb faf6 	bl	80006d8 <HAL_NVIC_SetPriority>
}
 80050ec:	b04d      	add	sp, #308	; 0x134
 80050ee:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 80050f2:	21f9      	movs	r1, #249	; 0xf9
 80050f4:	480a      	ldr	r0, [pc, #40]	; (8005120 <SystemClock_Config+0xfc>)
 80050f6:	f7ff ff93 	bl	8005020 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80050fa:	f240 110b 	movw	r1, #267	; 0x10b
 80050fe:	4808      	ldr	r0, [pc, #32]	; (8005120 <SystemClock_Config+0xfc>)
 8005100:	f7ff ff8e 	bl	8005020 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8005104:	f240 1115 	movw	r1, #277	; 0x115
 8005108:	4805      	ldr	r0, [pc, #20]	; (8005120 <SystemClock_Config+0xfc>)
 800510a:	f7ff ff89 	bl	8005020 <_Error_Handler>
 800510e:	bf00      	nop
 8005110:	58024800 	.word	0x58024800
 8005114:	00041002 	.word	0x00041002
 8005118:	20000010 	.word	0x20000010
 800511c:	10624dd3 	.word	0x10624dd3
 8005120:	08007b84 	.word	0x08007b84

08005124 <main>:
{
 8005124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005128:	b086      	sub	sp, #24
  HAL_Init();
 800512a:	f7fb fa83 	bl	8000634 <HAL_Init>
  SystemClock_Config();
 800512e:	f7ff ff79 	bl	8005024 <SystemClock_Config>
  MX_GPIO_Init();
 8005132:	f7ff fe8f 	bl	8004e54 <MX_GPIO_Init>
  MX_DMA_Init();
 8005136:	f7ff fdc9 	bl	8004ccc <MX_DMA_Init>
  MX_ETH_Init();
 800513a:	f7ff fde3 	bl	8004d04 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800513e:	f000 f9ab 	bl	8005498 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8005142:	f000 f9f9 	bl	8005538 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8005146:	f000 f881 	bl	800524c <MX_SPI1_Init>
  AT_N5110_LCD_handle *lcdHandle = AT_N5110LCD_open();
 800514a:	f7ff fcbe 	bl	8004aca <AT_N5110LCD_open>
 800514e:	4606      	mov	r6, r0
  lcdHandle->functions.delay_ms = HAL_Delay;
 8005150:	4b33      	ldr	r3, [pc, #204]	; (8005220 <main+0xfc>)
 8005152:	61c3      	str	r3, [r0, #28]
  lcdHandle->functions.get_time_ms = HAL_GetTick;
 8005154:	4b33      	ldr	r3, [pc, #204]	; (8005224 <main+0x100>)
 8005156:	6203      	str	r3, [r0, #32]
  lcdHandle->functions.reset_gpio = GPIO_ResetPin;
 8005158:	4b33      	ldr	r3, [pc, #204]	; (8005228 <main+0x104>)
 800515a:	6283      	str	r3, [r0, #40]	; 0x28
  lcdHandle->functions.set_gpio = GPIO_SetPin;
 800515c:	4b33      	ldr	r3, [pc, #204]	; (800522c <main+0x108>)
 800515e:	6243      	str	r3, [r0, #36]	; 0x24
  lcdHandle->functions.spi_transmit = SPI_Transmit;
 8005160:	4b33      	ldr	r3, [pc, #204]	; (8005230 <main+0x10c>)
 8005162:	62c3      	str	r3, [r0, #44]	; 0x2c
  lcdHandle->functions.spi_transmit_dma = SPI_Transmit_DMA;
 8005164:	4b33      	ldr	r3, [pc, #204]	; (8005234 <main+0x110>)
 8005166:	6303      	str	r3, [r0, #48]	; 0x30
  lcdHandle->pins.DCPort = N5110_DATA_nCMD_GPIO_Port;
 8005168:	4b33      	ldr	r3, [pc, #204]	; (8005238 <main+0x114>)
 800516a:	60c3      	str	r3, [r0, #12]
  lcdHandle->pins.DCPin = N5110_DATA_nCMD_Pin;
 800516c:	2380      	movs	r3, #128	; 0x80
 800516e:	6103      	str	r3, [r0, #16]
  lcdHandle->pins.RstPort = N5110_nRST_GPIO_Port;
 8005170:	4b32      	ldr	r3, [pc, #200]	; (800523c <main+0x118>)
 8005172:	6143      	str	r3, [r0, #20]
  lcdHandle->pins.RstPin = N5110_nRST_Pin;
 8005174:	2310      	movs	r3, #16
 8005176:	6183      	str	r3, [r0, #24]
  lcdHandle->pins.csPort = N5110_nCS_GPIO_Port;
 8005178:	4a31      	ldr	r2, [pc, #196]	; (8005240 <main+0x11c>)
 800517a:	6042      	str	r2, [r0, #4]
  lcdHandle->pins.csPin = N5110_nCS_Pin;
 800517c:	6083      	str	r3, [r0, #8]
  AT_N5110LCD_init(lcdHandle);
 800517e:	f7ff fca9 	bl	8004ad4 <AT_N5110LCD_init>
  int8_t kay = 84;
 8005182:	2354      	movs	r3, #84	; 0x54
  uint8_t y = 0;
 8005184:	2400      	movs	r4, #0
  uint8_t x = 0;
 8005186:	4627      	mov	r7, r4
 8005188:	e008      	b.n	800519c <main+0x78>
		  x=0;
 800518a:	2700      	movs	r7, #0
 800518c:	e043      	b.n	8005216 <main+0xf2>
	  AT_N5110LCD_update_display(lcdHandle);
 800518e:	4630      	mov	r0, r6
 8005190:	f7ff fcb0 	bl	8004af4 <AT_N5110LCD_update_display>
	  HAL_Delay(30);
 8005194:	201e      	movs	r0, #30
 8005196:	f7fb fa6f 	bl	8000678 <HAL_Delay>
	  AT_N5110LCD_print_string(lcdHandle, &FontMenlo32, (uint8_t*)text, sizeof(text)-1, kay--, 5);
 800519a:	4643      	mov	r3, r8
	  uint8_t text[] = "DSPLAB";
 800519c:	4a29      	ldr	r2, [pc, #164]	; (8005244 <main+0x120>)
 800519e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80051a2:	9004      	str	r0, [sp, #16]
 80051a4:	f8ad 1014 	strh.w	r1, [sp, #20]
 80051a8:	0c09      	lsrs	r1, r1, #16
 80051aa:	f88d 1016 	strb.w	r1, [sp, #22]
	  AT_N5110LCD_print_string(lcdHandle, &FontMenlo32, (uint8_t*)text, sizeof(text)-1, kay--, 5);
 80051ae:	f103 38ff 	add.w	r8, r3, #4294967295
 80051b2:	fa4f f888 	sxtb.w	r8, r8
 80051b6:	2205      	movs	r2, #5
 80051b8:	9201      	str	r2, [sp, #4]
 80051ba:	9300      	str	r3, [sp, #0]
 80051bc:	2306      	movs	r3, #6
 80051be:	aa04      	add	r2, sp, #16
 80051c0:	4921      	ldr	r1, [pc, #132]	; (8005248 <main+0x124>)
 80051c2:	4630      	mov	r0, r6
 80051c4:	f7ff fd57 	bl	8004c76 <AT_N5110LCD_print_string>
	  AT_N5110LCD_draw_pixel(lcdHandle, x, y, 1);
 80051c8:	2301      	movs	r3, #1
 80051ca:	4622      	mov	r2, r4
 80051cc:	4639      	mov	r1, r7
 80051ce:	4630      	mov	r0, r6
 80051d0:	f7ff fcf5 	bl	8004bbe <AT_N5110LCD_draw_pixel>
	  AT_N5110LCD_get_pixel(lcdHandle, x, y, &pixel);
 80051d4:	f10d 030f 	add.w	r3, sp, #15
 80051d8:	4622      	mov	r2, r4
 80051da:	4639      	mov	r1, r7
 80051dc:	4630      	mov	r0, r6
 80051de:	f7ff fc9d 	bl	8004b1c <AT_N5110LCD_get_pixel>
	  AT_N5110LCD_get_pixel(lcdHandle, x+1, y+1, &pixel);
 80051e2:	1c7d      	adds	r5, r7, #1
 80051e4:	b2ed      	uxtb	r5, r5
 80051e6:	3401      	adds	r4, #1
 80051e8:	b2e4      	uxtb	r4, r4
 80051ea:	f10d 030f 	add.w	r3, sp, #15
 80051ee:	4622      	mov	r2, r4
 80051f0:	4629      	mov	r1, r5
 80051f2:	4630      	mov	r0, r6
 80051f4:	f7ff fc92 	bl	8004b1c <AT_N5110LCD_get_pixel>
	  AT_N5110LCD_get_pixel(lcdHandle, x+1, y+1, &pixel);
 80051f8:	f10d 030f 	add.w	r3, sp, #15
 80051fc:	4622      	mov	r2, r4
 80051fe:	4629      	mov	r1, r5
 8005200:	4630      	mov	r0, r6
 8005202:	f7ff fc8b 	bl	8004b1c <AT_N5110LCD_get_pixel>
	  pixel += x;
 8005206:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800520a:	441f      	add	r7, r3
 800520c:	f88d 700f 	strb.w	r7, [sp, #15]
	  if (x>=84)
 8005210:	2d53      	cmp	r5, #83	; 0x53
 8005212:	d8ba      	bhi.n	800518a <main+0x66>
	  x++;
 8005214:	462f      	mov	r7, r5
	  if (y>=48)
 8005216:	2c2f      	cmp	r4, #47	; 0x2f
 8005218:	d9b9      	bls.n	800518e <main+0x6a>
		  y=0;
 800521a:	2400      	movs	r4, #0
 800521c:	e7b7      	b.n	800518e <main+0x6a>
 800521e:	bf00      	nop
 8005220:	08000679 	.word	0x08000679
 8005224:	0800066d 	.word	0x0800066d
 8005228:	08004fe1 	.word	0x08004fe1
 800522c:	08004fed 	.word	0x08004fed
 8005230:	08004ff9 	.word	0x08004ff9
 8005234:	0800500d 	.word	0x0800500d
 8005238:	58020800 	.word	0x58020800
 800523c:	58020400 	.word	0x58020400
 8005240:	58020000 	.word	0x58020000
 8005244:	08007b94 	.word	0x08007b94
 8005248:	20000008 	.word	0x20000008

0800524c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800524c:	b508      	push	{r3, lr}

  hspi1.Instance = SPI1;
 800524e:	4815      	ldr	r0, [pc, #84]	; (80052a4 <MX_SPI1_Init+0x58>)
 8005250:	4b15      	ldr	r3, [pc, #84]	; (80052a8 <MX_SPI1_Init+0x5c>)
 8005252:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005254:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005258:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 800525a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800525e:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005260:	2207      	movs	r2, #7
 8005262:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005264:	2300      	movs	r3, #0
 8005266:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005268:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800526a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 800526e:	6181      	str	r1, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8005270:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8005274:	61c1      	str	r1, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005276:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005278:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800527a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800527c:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800527e:	6343      	str	r3, [r0, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8005280:	6383      	str	r3, [r0, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8005282:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8005284:	6403      	str	r3, [r0, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8005286:	6443      	str	r3, [r0, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8005288:	6483      	str	r3, [r0, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800528a:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800528c:	6503      	str	r3, [r0, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800528e:	6543      	str	r3, [r0, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8005290:	6583      	str	r3, [r0, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005292:	f7fe f87f 	bl	8003394 <HAL_SPI_Init>
 8005296:	b900      	cbnz	r0, 800529a <MX_SPI1_Init+0x4e>
 8005298:	bd08      	pop	{r3, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 800529a:	2151      	movs	r1, #81	; 0x51
 800529c:	4803      	ldr	r0, [pc, #12]	; (80052ac <MX_SPI1_Init+0x60>)
 800529e:	f7ff febf 	bl	8005020 <_Error_Handler>
  }

}
 80052a2:	e7f9      	b.n	8005298 <MX_SPI1_Init+0x4c>
 80052a4:	20000208 	.word	0x20000208
 80052a8:	40013000 	.word	0x40013000
 80052ac:	08007b9c 	.word	0x08007b9c

080052b0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI1)
 80052b0:	6802      	ldr	r2, [r0, #0]
 80052b2:	4b28      	ldr	r3, [pc, #160]	; (8005354 <HAL_SPI_MspInit+0xa4>)
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d000      	beq.n	80052ba <HAL_SPI_MspInit+0xa>
 80052b8:	4770      	bx	lr
{
 80052ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052bc:	b087      	sub	sp, #28
 80052be:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80052c0:	4b25      	ldr	r3, [pc, #148]	; (8005358 <HAL_SPI_MspInit+0xa8>)
 80052c2:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80052c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80052ca:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 80052ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052d6:	9300      	str	r3, [sp, #0]
 80052d8:	9b00      	ldr	r3, [sp, #0]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA15     ------> SPI1_NSS
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_15;
 80052da:	f248 0320 	movw	r3, #32800	; 0x8020
 80052de:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052e0:	2702      	movs	r7, #2
 80052e2:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052e4:	2500      	movs	r5, #0
 80052e6:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052e8:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80052ea:	2605      	movs	r6, #5
 80052ec:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052ee:	a901      	add	r1, sp, #4
 80052f0:	481a      	ldr	r0, [pc, #104]	; (800535c <HAL_SPI_MspInit+0xac>)
 80052f2:	f7fc f99f 	bl	8001634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80052f6:	2320      	movs	r3, #32
 80052f8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052fa:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052fc:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052fe:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005300:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005302:	a901      	add	r1, sp, #4
 8005304:	4816      	ldr	r0, [pc, #88]	; (8005360 <HAL_SPI_MspInit+0xb0>)
 8005306:	f7fc f995 	bl	8001634 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream0;
 800530a:	4816      	ldr	r0, [pc, #88]	; (8005364 <HAL_SPI_MspInit+0xb4>)
 800530c:	4b16      	ldr	r3, [pc, #88]	; (8005368 <HAL_SPI_MspInit+0xb8>)
 800530e:	6003      	str	r3, [r0, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8005310:	2326      	movs	r3, #38	; 0x26
 8005312:	6043      	str	r3, [r0, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005314:	2340      	movs	r3, #64	; 0x40
 8005316:	6083      	str	r3, [r0, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005318:	60c5      	str	r5, [r0, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800531a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800531e:	6103      	str	r3, [r0, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005320:	6145      	str	r5, [r0, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005322:	6185      	str	r5, [r0, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8005324:	61c5      	str	r5, [r0, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005326:	6205      	str	r5, [r0, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005328:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800532a:	f7fb fb53 	bl	80009d4 <HAL_DMA_Init>
 800532e:	b960      	cbnz	r0, 800534a <HAL_SPI_MspInit+0x9a>
    {
      _Error_Handler(__FILE__, __LINE__);
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8005330:	4b0c      	ldr	r3, [pc, #48]	; (8005364 <HAL_SPI_MspInit+0xb4>)
 8005332:	67a3      	str	r3, [r4, #120]	; 0x78
 8005334:	639c      	str	r4, [r3, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8005336:	2200      	movs	r2, #0
 8005338:	4611      	mov	r1, r2
 800533a:	2023      	movs	r0, #35	; 0x23
 800533c:	f7fb f9cc 	bl	80006d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8005340:	2023      	movs	r0, #35	; 0x23
 8005342:	f7fb f9f9 	bl	8000738 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8005346:	b007      	add	sp, #28
 8005348:	bdf0      	pop	{r4, r5, r6, r7, pc}
      _Error_Handler(__FILE__, __LINE__);
 800534a:	2183      	movs	r1, #131	; 0x83
 800534c:	4807      	ldr	r0, [pc, #28]	; (800536c <HAL_SPI_MspInit+0xbc>)
 800534e:	f7ff fe67 	bl	8005020 <_Error_Handler>
 8005352:	e7ed      	b.n	8005330 <HAL_SPI_MspInit+0x80>
 8005354:	40013000 	.word	0x40013000
 8005358:	58024400 	.word	0x58024400
 800535c:	58020000 	.word	0x58020000
 8005360:	58020400 	.word	0x58020400
 8005364:	20000290 	.word	0x20000290
 8005368:	40020010 	.word	0x40020010
 800536c:	08007b9c 	.word	0x08007b9c

08005370 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005370:	b500      	push	{lr}
 8005372:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005374:	4b1e      	ldr	r3, [pc, #120]	; (80053f0 <HAL_MspInit+0x80>)
 8005376:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800537a:	f042 0202 	orr.w	r2, r2, #2
 800537e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8005382:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005386:	f003 0302 	and.w	r3, r3, #2
 800538a:	9301      	str	r3, [sp, #4]
 800538c:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800538e:	2003      	movs	r0, #3
 8005390:	f7fb f990 	bl	80006b4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8005394:	2200      	movs	r2, #0
 8005396:	4611      	mov	r1, r2
 8005398:	f06f 000b 	mvn.w	r0, #11
 800539c:	f7fb f99c 	bl	80006d8 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80053a0:	2200      	movs	r2, #0
 80053a2:	4611      	mov	r1, r2
 80053a4:	f06f 000a 	mvn.w	r0, #10
 80053a8:	f7fb f996 	bl	80006d8 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80053ac:	2200      	movs	r2, #0
 80053ae:	4611      	mov	r1, r2
 80053b0:	f06f 0009 	mvn.w	r0, #9
 80053b4:	f7fb f990 	bl	80006d8 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80053b8:	2200      	movs	r2, #0
 80053ba:	4611      	mov	r1, r2
 80053bc:	f06f 0004 	mvn.w	r0, #4
 80053c0:	f7fb f98a 	bl	80006d8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80053c4:	2200      	movs	r2, #0
 80053c6:	4611      	mov	r1, r2
 80053c8:	f06f 0003 	mvn.w	r0, #3
 80053cc:	f7fb f984 	bl	80006d8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80053d0:	2200      	movs	r2, #0
 80053d2:	4611      	mov	r1, r2
 80053d4:	f06f 0001 	mvn.w	r0, #1
 80053d8:	f7fb f97e 	bl	80006d8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80053dc:	2200      	movs	r2, #0
 80053de:	4611      	mov	r1, r2
 80053e0:	f04f 30ff 	mov.w	r0, #4294967295
 80053e4:	f7fb f978 	bl	80006d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80053e8:	b003      	add	sp, #12
 80053ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80053ee:	bf00      	nop
 80053f0:	58024400 	.word	0x58024400

080053f4 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 80053f4:	4770      	bx	lr

080053f6 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80053f6:	e7fe      	b.n	80053f6 <HardFault_Handler>

080053f8 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80053f8:	e7fe      	b.n	80053f8 <MemManage_Handler>

080053fa <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80053fa:	e7fe      	b.n	80053fa <BusFault_Handler>

080053fc <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80053fc:	e7fe      	b.n	80053fc <UsageFault_Handler>

080053fe <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 80053fe:	4770      	bx	lr

08005400 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8005400:	4770      	bx	lr

08005402 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8005402:	4770      	bx	lr

08005404 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8005404:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005406:	f7fb f925 	bl	8000654 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800540a:	f7fb f9ca 	bl	80007a2 <HAL_SYSTICK_IRQHandler>
 800540e:	bd08      	pop	{r3, pc}

08005410 <DMA1_Stream0_IRQHandler>:

/**
* @brief This function handles DMA1 stream0 global interrupt.
*/
void DMA1_Stream0_IRQHandler(void)
{
 8005410:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8005412:	4802      	ldr	r0, [pc, #8]	; (800541c <DMA1_Stream0_IRQHandler+0xc>)
 8005414:	f7fb fc8c 	bl	8000d30 <HAL_DMA_IRQHandler>
 8005418:	bd08      	pop	{r3, pc}
 800541a:	bf00      	nop
 800541c:	20000290 	.word	0x20000290

08005420 <SPI1_IRQHandler>:

/**
* @brief This function handles SPI1 global interrupt.
*/
void SPI1_IRQHandler(void)
{
 8005420:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8005422:	4802      	ldr	r0, [pc, #8]	; (800542c <SPI1_IRQHandler+0xc>)
 8005424:	f7fe fabc 	bl	80039a0 <HAL_SPI_IRQHandler>
 8005428:	bd08      	pop	{r3, pc}
 800542a:	bf00      	nop
 800542c:	20000208 	.word	0x20000208

08005430 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005430:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005432:	4915      	ldr	r1, [pc, #84]	; (8005488 <SystemInit+0x58>)
 8005434:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005438:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800543c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8005440:	4b12      	ldr	r3, [pc, #72]	; (800548c <SystemInit+0x5c>)
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	f042 0201 	orr.w	r2, r2, #1
 8005448:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800544a:	2200      	movs	r2, #0
 800544c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= (uint32_t)0xEAF6ED7F;
 800544e:	681c      	ldr	r4, [r3, #0]
 8005450:	480f      	ldr	r0, [pc, #60]	; (8005490 <SystemInit+0x60>)
 8005452:	4020      	ands	r0, r4
 8005454:	6018      	str	r0, [r3, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8005456:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8005458:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800545a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800545c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800545e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8005460:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8005462:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8005464:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8005466:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8005468:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800546a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800546c:	6818      	ldr	r0, [r3, #0]
 800546e:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8005472:	6018      	str	r0, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005474:	661a      	str	r2, [r3, #96]	; 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  *((__IO uint32_t*)0x51008108) = 0x00000001;
 8005476:	2201      	movs	r2, #1
 8005478:	4b06      	ldr	r3, [pc, #24]	; (8005494 <SystemInit+0x64>)
 800547a:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal ITCMSRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800547c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005480:	608b      	str	r3, [r1, #8]
#endif

}
 8005482:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005486:	4770      	bx	lr
 8005488:	e000ed00 	.word	0xe000ed00
 800548c:	58024400 	.word	0x58024400
 8005490:	eaf6ed7f 	.word	0xeaf6ed7f
 8005494:	51008108 	.word	0x51008108

08005498 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005498:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 800549a:	480e      	ldr	r0, [pc, #56]	; (80054d4 <MX_USART3_UART_Init+0x3c>)
 800549c:	4b0e      	ldr	r3, [pc, #56]	; (80054d8 <MX_USART3_UART_Init+0x40>)
 800549e:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 80054a0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80054a4:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80054a6:	2300      	movs	r3, #0
 80054a8:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80054aa:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80054ac:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80054ae:	220c      	movs	r2, #12
 80054b0:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80054b2:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80054b4:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80054b6:	6203      	str	r3, [r0, #32]
  huart3.Init.Prescaler = UART_PRESCALER_DIV1;
 80054b8:	6243      	str	r3, [r0, #36]	; 0x24
  huart3.Init.FIFOMode = UART_FIFOMODE_DISABLE;
 80054ba:	6283      	str	r3, [r0, #40]	; 0x28
  huart3.Init.TXFIFOThreshold = UART_TXFIFO_THRESHOLD_1_8;
 80054bc:	62c3      	str	r3, [r0, #44]	; 0x2c
  huart3.Init.RXFIFOThreshold = UART_RXFIFO_THRESHOLD_1_8;
 80054be:	6303      	str	r3, [r0, #48]	; 0x30
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80054c0:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80054c2:	f7ff f8e4 	bl	800468e <HAL_UART_Init>
 80054c6:	b900      	cbnz	r0, 80054ca <MX_USART3_UART_Init+0x32>
 80054c8:	bd08      	pop	{r3, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 80054ca:	2148      	movs	r1, #72	; 0x48
 80054cc:	4803      	ldr	r0, [pc, #12]	; (80054dc <MX_USART3_UART_Init+0x44>)
 80054ce:	f7ff fda7 	bl	8005020 <_Error_Handler>
  }

}
 80054d2:	e7f9      	b.n	80054c8 <MX_USART3_UART_Init+0x30>
 80054d4:	20000308 	.word	0x20000308
 80054d8:	40004800 	.word	0x40004800
 80054dc:	08007bbc 	.word	0x08007bbc

080054e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART3)
 80054e0:	6802      	ldr	r2, [r0, #0]
 80054e2:	4b12      	ldr	r3, [pc, #72]	; (800552c <HAL_UART_MspInit+0x4c>)
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d000      	beq.n	80054ea <HAL_UART_MspInit+0xa>
 80054e8:	4770      	bx	lr
{
 80054ea:	b500      	push	{lr}
 80054ec:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80054ee:	4b10      	ldr	r3, [pc, #64]	; (8005530 <HAL_UART_MspInit+0x50>)
 80054f0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80054f4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80054f8:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80054fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005500:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005504:	9300      	str	r3, [sp, #0]
 8005506:	9b00      	ldr	r3, [sp, #0]
  
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8005508:	f44f 7340 	mov.w	r3, #768	; 0x300
 800550c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800550e:	2302      	movs	r3, #2
 8005510:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005512:	2300      	movs	r3, #0
 8005514:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005516:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005518:	2307      	movs	r3, #7
 800551a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800551c:	a901      	add	r1, sp, #4
 800551e:	4805      	ldr	r0, [pc, #20]	; (8005534 <HAL_UART_MspInit+0x54>)
 8005520:	f7fc f888 	bl	8001634 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8005524:	b007      	add	sp, #28
 8005526:	f85d fb04 	ldr.w	pc, [sp], #4
 800552a:	bf00      	nop
 800552c:	40004800 	.word	0x40004800
 8005530:	58024400 	.word	0x58024400
 8005534:	58020c00 	.word	0x58020c00

08005538 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8005538:	b508      	push	{r3, lr}

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800553a:	480d      	ldr	r0, [pc, #52]	; (8005570 <MX_USB_OTG_FS_PCD_Init+0x38>)
 800553c:	4b0d      	ldr	r3, [pc, #52]	; (8005574 <MX_USB_OTG_FS_PCD_Init+0x3c>)
 800553e:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8005540:	2309      	movs	r3, #9
 8005542:	6043      	str	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8005544:	2202      	movs	r2, #2
 8005546:	60c2      	str	r2, [r0, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005548:	2300      	movs	r3, #0
 800554a:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 800554c:	6143      	str	r3, [r0, #20]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800554e:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8005550:	2201      	movs	r2, #1
 8005552:	61c2      	str	r2, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8005554:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8005556:	6283      	str	r3, [r0, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8005558:	6242      	str	r2, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800555a:	62c2      	str	r2, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800555c:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800555e:	f7fc f964 	bl	800182a <HAL_PCD_Init>
 8005562:	b900      	cbnz	r0, 8005566 <MX_USB_OTG_FS_PCD_Init+0x2e>
 8005564:	bd08      	pop	{r3, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 8005566:	2146      	movs	r1, #70	; 0x46
 8005568:	4803      	ldr	r0, [pc, #12]	; (8005578 <MX_USB_OTG_FS_PCD_Init+0x40>)
 800556a:	f7ff fd59 	bl	8005020 <_Error_Handler>
  }

}
 800556e:	e7f9      	b.n	8005564 <MX_USB_OTG_FS_PCD_Init+0x2c>
 8005570:	20000388 	.word	0x20000388
 8005574:	40080000 	.word	0x40080000
 8005578:	08007bcc 	.word	0x08007bcc

0800557c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 800557c:	6802      	ldr	r2, [r0, #0]
 800557e:	4b16      	ldr	r3, [pc, #88]	; (80055d8 <HAL_PCD_MspInit+0x5c>)
 8005580:	429a      	cmp	r2, r3
 8005582:	d000      	beq.n	8005586 <HAL_PCD_MspInit+0xa>
 8005584:	4770      	bx	lr
{
 8005586:	b530      	push	{r4, r5, lr}
 8005588:	b087      	sub	sp, #28
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800558a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800558e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005590:	2302      	movs	r3, #2
 8005592:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005594:	2400      	movs	r4, #0
 8005596:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005598:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800559a:	230a      	movs	r3, #10
 800559c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800559e:	4d0f      	ldr	r5, [pc, #60]	; (80055dc <HAL_PCD_MspInit+0x60>)
 80055a0:	a901      	add	r1, sp, #4
 80055a2:	4628      	mov	r0, r5
 80055a4:	f7fc f846 	bl	8001634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80055a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055ac:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80055ae:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055b0:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80055b2:	a901      	add	r1, sp, #4
 80055b4:	4628      	mov	r0, r5
 80055b6:	f7fc f83d 	bl	8001634 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80055ba:	4b09      	ldr	r3, [pc, #36]	; (80055e0 <HAL_PCD_MspInit+0x64>)
 80055bc:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80055c0:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80055c4:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80055c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80055cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055d0:	9300      	str	r3, [sp, #0]
 80055d2:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80055d4:	b007      	add	sp, #28
 80055d6:	bd30      	pop	{r4, r5, pc}
 80055d8:	40080000 	.word	0x40080000
 80055dc:	58020000 	.word	0x58020000
 80055e0:	58024400 	.word	0x58024400

080055e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80055e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800561c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80055e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80055ea:	e003      	b.n	80055f4 <LoopCopyDataInit>

080055ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80055ec:	4b0c      	ldr	r3, [pc, #48]	; (8005620 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80055ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80055f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80055f2:	3104      	adds	r1, #4

080055f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80055f4:	480b      	ldr	r0, [pc, #44]	; (8005624 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80055f6:	4b0c      	ldr	r3, [pc, #48]	; (8005628 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80055f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80055fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80055fc:	d3f6      	bcc.n	80055ec <CopyDataInit>
  ldr  r2, =_sbss
 80055fe:	4a0b      	ldr	r2, [pc, #44]	; (800562c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005600:	e002      	b.n	8005608 <LoopFillZerobss>

08005602 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005602:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005604:	f842 3b04 	str.w	r3, [r2], #4

08005608 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005608:	4b09      	ldr	r3, [pc, #36]	; (8005630 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800560a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800560c:	d3f9      	bcc.n	8005602 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800560e:	f7ff ff0f 	bl	8005430 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005612:	f000 f811 	bl	8005638 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005616:	f7ff fd85 	bl	8005124 <main>
  bx  lr    
 800561a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800561c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005620:	08007bf0 	.word	0x08007bf0
  ldr  r0, =_sdata
 8005624:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005628:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 800562c:	2000013c 	.word	0x2000013c
  ldr  r3, = _ebss
 8005630:	2000078c 	.word	0x2000078c

08005634 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005634:	e7fe      	b.n	8005634 <ADC3_IRQHandler>
	...

08005638 <__libc_init_array>:
 8005638:	b570      	push	{r4, r5, r6, lr}
 800563a:	4e0d      	ldr	r6, [pc, #52]	; (8005670 <__libc_init_array+0x38>)
 800563c:	4c0d      	ldr	r4, [pc, #52]	; (8005674 <__libc_init_array+0x3c>)
 800563e:	1ba4      	subs	r4, r4, r6
 8005640:	10a4      	asrs	r4, r4, #2
 8005642:	2500      	movs	r5, #0
 8005644:	42a5      	cmp	r5, r4
 8005646:	d109      	bne.n	800565c <__libc_init_array+0x24>
 8005648:	4e0b      	ldr	r6, [pc, #44]	; (8005678 <__libc_init_array+0x40>)
 800564a:	4c0c      	ldr	r4, [pc, #48]	; (800567c <__libc_init_array+0x44>)
 800564c:	f000 f8a6 	bl	800579c <_init>
 8005650:	1ba4      	subs	r4, r4, r6
 8005652:	10a4      	asrs	r4, r4, #2
 8005654:	2500      	movs	r5, #0
 8005656:	42a5      	cmp	r5, r4
 8005658:	d105      	bne.n	8005666 <__libc_init_array+0x2e>
 800565a:	bd70      	pop	{r4, r5, r6, pc}
 800565c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005660:	4798      	blx	r3
 8005662:	3501      	adds	r5, #1
 8005664:	e7ee      	b.n	8005644 <__libc_init_array+0xc>
 8005666:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800566a:	4798      	blx	r3
 800566c:	3501      	adds	r5, #1
 800566e:	e7f2      	b.n	8005656 <__libc_init_array+0x1e>
 8005670:	08007be8 	.word	0x08007be8
 8005674:	08007be8 	.word	0x08007be8
 8005678:	08007be8 	.word	0x08007be8
 800567c:	08007bec 	.word	0x08007bec

08005680 <malloc>:
 8005680:	4b02      	ldr	r3, [pc, #8]	; (800568c <malloc+0xc>)
 8005682:	4601      	mov	r1, r0
 8005684:	6818      	ldr	r0, [r3, #0]
 8005686:	f000 b80b 	b.w	80056a0 <_malloc_r>
 800568a:	bf00      	nop
 800568c:	20000018 	.word	0x20000018

08005690 <memset>:
 8005690:	4402      	add	r2, r0
 8005692:	4603      	mov	r3, r0
 8005694:	4293      	cmp	r3, r2
 8005696:	d100      	bne.n	800569a <memset+0xa>
 8005698:	4770      	bx	lr
 800569a:	f803 1b01 	strb.w	r1, [r3], #1
 800569e:	e7f9      	b.n	8005694 <memset+0x4>

080056a0 <_malloc_r>:
 80056a0:	b570      	push	{r4, r5, r6, lr}
 80056a2:	1ccd      	adds	r5, r1, #3
 80056a4:	f025 0503 	bic.w	r5, r5, #3
 80056a8:	3508      	adds	r5, #8
 80056aa:	2d0c      	cmp	r5, #12
 80056ac:	bf38      	it	cc
 80056ae:	250c      	movcc	r5, #12
 80056b0:	2d00      	cmp	r5, #0
 80056b2:	4606      	mov	r6, r0
 80056b4:	db01      	blt.n	80056ba <_malloc_r+0x1a>
 80056b6:	42a9      	cmp	r1, r5
 80056b8:	d903      	bls.n	80056c2 <_malloc_r+0x22>
 80056ba:	230c      	movs	r3, #12
 80056bc:	6033      	str	r3, [r6, #0]
 80056be:	2000      	movs	r0, #0
 80056c0:	bd70      	pop	{r4, r5, r6, pc}
 80056c2:	f000 f85b 	bl	800577c <__malloc_lock>
 80056c6:	4a23      	ldr	r2, [pc, #140]	; (8005754 <_malloc_r+0xb4>)
 80056c8:	6814      	ldr	r4, [r2, #0]
 80056ca:	4621      	mov	r1, r4
 80056cc:	b991      	cbnz	r1, 80056f4 <_malloc_r+0x54>
 80056ce:	4c22      	ldr	r4, [pc, #136]	; (8005758 <_malloc_r+0xb8>)
 80056d0:	6823      	ldr	r3, [r4, #0]
 80056d2:	b91b      	cbnz	r3, 80056dc <_malloc_r+0x3c>
 80056d4:	4630      	mov	r0, r6
 80056d6:	f000 f841 	bl	800575c <_sbrk_r>
 80056da:	6020      	str	r0, [r4, #0]
 80056dc:	4629      	mov	r1, r5
 80056de:	4630      	mov	r0, r6
 80056e0:	f000 f83c 	bl	800575c <_sbrk_r>
 80056e4:	1c43      	adds	r3, r0, #1
 80056e6:	d126      	bne.n	8005736 <_malloc_r+0x96>
 80056e8:	230c      	movs	r3, #12
 80056ea:	6033      	str	r3, [r6, #0]
 80056ec:	4630      	mov	r0, r6
 80056ee:	f000 f846 	bl	800577e <__malloc_unlock>
 80056f2:	e7e4      	b.n	80056be <_malloc_r+0x1e>
 80056f4:	680b      	ldr	r3, [r1, #0]
 80056f6:	1b5b      	subs	r3, r3, r5
 80056f8:	d41a      	bmi.n	8005730 <_malloc_r+0x90>
 80056fa:	2b0b      	cmp	r3, #11
 80056fc:	d90f      	bls.n	800571e <_malloc_r+0x7e>
 80056fe:	600b      	str	r3, [r1, #0]
 8005700:	50cd      	str	r5, [r1, r3]
 8005702:	18cc      	adds	r4, r1, r3
 8005704:	4630      	mov	r0, r6
 8005706:	f000 f83a 	bl	800577e <__malloc_unlock>
 800570a:	f104 000b 	add.w	r0, r4, #11
 800570e:	1d23      	adds	r3, r4, #4
 8005710:	f020 0007 	bic.w	r0, r0, #7
 8005714:	1ac3      	subs	r3, r0, r3
 8005716:	d01b      	beq.n	8005750 <_malloc_r+0xb0>
 8005718:	425a      	negs	r2, r3
 800571a:	50e2      	str	r2, [r4, r3]
 800571c:	bd70      	pop	{r4, r5, r6, pc}
 800571e:	428c      	cmp	r4, r1
 8005720:	bf0d      	iteet	eq
 8005722:	6863      	ldreq	r3, [r4, #4]
 8005724:	684b      	ldrne	r3, [r1, #4]
 8005726:	6063      	strne	r3, [r4, #4]
 8005728:	6013      	streq	r3, [r2, #0]
 800572a:	bf18      	it	ne
 800572c:	460c      	movne	r4, r1
 800572e:	e7e9      	b.n	8005704 <_malloc_r+0x64>
 8005730:	460c      	mov	r4, r1
 8005732:	6849      	ldr	r1, [r1, #4]
 8005734:	e7ca      	b.n	80056cc <_malloc_r+0x2c>
 8005736:	1cc4      	adds	r4, r0, #3
 8005738:	f024 0403 	bic.w	r4, r4, #3
 800573c:	42a0      	cmp	r0, r4
 800573e:	d005      	beq.n	800574c <_malloc_r+0xac>
 8005740:	1a21      	subs	r1, r4, r0
 8005742:	4630      	mov	r0, r6
 8005744:	f000 f80a 	bl	800575c <_sbrk_r>
 8005748:	3001      	adds	r0, #1
 800574a:	d0cd      	beq.n	80056e8 <_malloc_r+0x48>
 800574c:	6025      	str	r5, [r4, #0]
 800574e:	e7d9      	b.n	8005704 <_malloc_r+0x64>
 8005750:	bd70      	pop	{r4, r5, r6, pc}
 8005752:	bf00      	nop
 8005754:	20000160 	.word	0x20000160
 8005758:	20000164 	.word	0x20000164

0800575c <_sbrk_r>:
 800575c:	b538      	push	{r3, r4, r5, lr}
 800575e:	4c06      	ldr	r4, [pc, #24]	; (8005778 <_sbrk_r+0x1c>)
 8005760:	2300      	movs	r3, #0
 8005762:	4605      	mov	r5, r0
 8005764:	4608      	mov	r0, r1
 8005766:	6023      	str	r3, [r4, #0]
 8005768:	f000 f80a 	bl	8005780 <_sbrk>
 800576c:	1c43      	adds	r3, r0, #1
 800576e:	d102      	bne.n	8005776 <_sbrk_r+0x1a>
 8005770:	6823      	ldr	r3, [r4, #0]
 8005772:	b103      	cbz	r3, 8005776 <_sbrk_r+0x1a>
 8005774:	602b      	str	r3, [r5, #0]
 8005776:	bd38      	pop	{r3, r4, r5, pc}
 8005778:	20000788 	.word	0x20000788

0800577c <__malloc_lock>:
 800577c:	4770      	bx	lr

0800577e <__malloc_unlock>:
 800577e:	4770      	bx	lr

08005780 <_sbrk>:
 8005780:	4b04      	ldr	r3, [pc, #16]	; (8005794 <_sbrk+0x14>)
 8005782:	6819      	ldr	r1, [r3, #0]
 8005784:	4602      	mov	r2, r0
 8005786:	b909      	cbnz	r1, 800578c <_sbrk+0xc>
 8005788:	4903      	ldr	r1, [pc, #12]	; (8005798 <_sbrk+0x18>)
 800578a:	6019      	str	r1, [r3, #0]
 800578c:	6818      	ldr	r0, [r3, #0]
 800578e:	4402      	add	r2, r0
 8005790:	601a      	str	r2, [r3, #0]
 8005792:	4770      	bx	lr
 8005794:	20000168 	.word	0x20000168
 8005798:	2000078c 	.word	0x2000078c

0800579c <_init>:
 800579c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800579e:	bf00      	nop
 80057a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057a2:	bc08      	pop	{r3}
 80057a4:	469e      	mov	lr, r3
 80057a6:	4770      	bx	lr

080057a8 <_fini>:
 80057a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057aa:	bf00      	nop
 80057ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ae:	bc08      	pop	{r3}
 80057b0:	469e      	mov	lr, r3
 80057b2:	4770      	bx	lr
